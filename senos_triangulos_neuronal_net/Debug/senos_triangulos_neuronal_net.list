
senos_triangulos_neuronal_net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009070  0801f120  0801f120  0002f120  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028190  08028190  00041278  2**0
                  CONTENTS
  4 .ARM          00000008  08028190  08028190  00038190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028198  08028198  00041278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08028198  08028198  00038198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080281a4  080281a4  000381a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001278  20000000  080281ac  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20001278  08029424  00041278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  08029424  000416dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00041278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000412a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0017e6a5  00000000  00000000  000412eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010774  00000000  00000000  001bf990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005088  00000000  00000000  001d0108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003e4c  00000000  00000000  001d5190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a386  00000000  00000000  001d8fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005f7aa  00000000  00000000  00213362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f11eb  00000000  00000000  00272b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00018d08  00000000  00000000  00463cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0047ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001278 	.word	0x20001278
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f0fc 	.word	0x0801f0fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000127c 	.word	0x2000127c
 800020c:	0801f0fc 	.word	0x0801f0fc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9f1 	b.w	80010ec <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a6 	b.w	80010ec <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	460f      	mov	r7, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0xe2>
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	b143      	cbz	r3, 8000e52 <__udivmoddi4+0x2e>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0220 	rsb	r2, r3, #32
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	409c      	lsls	r4, r3
 8000e52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e56:	fa1f f58c 	uxth.w	r5, ip
 8000e5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e5e:	0c22      	lsrs	r2, r4, #16
 8000e60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e68:	fb01 f005 	mul.w	r0, r1, r5
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e78:	f080 811c 	bcs.w	80010b4 <__udivmoddi4+0x290>
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	f240 8119 	bls.w	80010b4 <__udivmoddi4+0x290>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4462      	add	r2, ip
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	b2a4      	uxth	r4, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e96:	fb00 f505 	mul.w	r5, r0, r5
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d90a      	bls.n	8000eb4 <__udivmoddi4+0x90>
 8000e9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea6:	f080 8107 	bcs.w	80010b8 <__udivmoddi4+0x294>
 8000eaa:	42a5      	cmp	r5, r4
 8000eac:	f240 8104 	bls.w	80010b8 <__udivmoddi4+0x294>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11e      	cbz	r6, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40dc      	lsrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0xbc>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	f000 80ed 	beq.w	80010ae <__udivmoddi4+0x28a>
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eda:	4608      	mov	r0, r1
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	fab3 f183 	clz	r1, r3
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d149      	bne.n	8000f7c <__udivmoddi4+0x158>
 8000ee8:	42ab      	cmp	r3, r5
 8000eea:	d302      	bcc.n	8000ef2 <__udivmoddi4+0xce>
 8000eec:	4282      	cmp	r2, r0
 8000eee:	f200 80f8 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d0e2      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	e9c6 4700 	strd	r4, r7, [r6]
 8000f04:	e7df      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f06:	b902      	cbnz	r2, 8000f0a <__udivmoddi4+0xe6>
 8000f08:	deff      	udf	#255	; 0xff
 8000f0a:	fab2 f382 	clz	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8090 	bne.w	8001034 <__udivmoddi4+0x210>
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1a:	fa1f fe8c 	uxth.w	lr, ip
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f24:	fb07 2015 	mls	r0, r7, r5, r2
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f2e:	fb0e f005 	mul.w	r0, lr, r5
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x124>
 8000f36:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x122>
 8000f40:	4290      	cmp	r0, r2
 8000f42:	f200 80cb 	bhi.w	80010dc <__udivmoddi4+0x2b8>
 8000f46:	4645      	mov	r5, r8
 8000f48:	1a12      	subs	r2, r2, r0
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f50:	fb07 2210 	mls	r2, r7, r0, r2
 8000f54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f58:	fb0e fe00 	mul.w	lr, lr, r0
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x14e>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x14c>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f200 80bb 	bhi.w	80010e6 <__udivmoddi4+0x2c2>
 8000f70:	4610      	mov	r0, r2
 8000f72:	eba4 040e 	sub.w	r4, r4, lr
 8000f76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7a:	e79f      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f7c:	f1c1 0720 	rsb	r7, r1, #32
 8000f80:	408b      	lsls	r3, r1
 8000f82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f92:	40fd      	lsrs	r5, r7
 8000f94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f9e:	fa1f fe8c 	uxth.w	lr, ip
 8000fa2:	fb09 5518 	mls	r5, r9, r8, r5
 8000fa6:	0c1c      	lsrs	r4, r3, #16
 8000fa8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fac:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000fba:	d90b      	bls.n	8000fd4 <__udivmoddi4+0x1b0>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc4:	f080 8088 	bcs.w	80010d8 <__udivmoddi4+0x2b4>
 8000fc8:	42a5      	cmp	r5, r4
 8000fca:	f240 8085 	bls.w	80010d8 <__udivmoddi4+0x2b4>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	b29d      	uxth	r5, r3
 8000fd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x1da>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ff4:	d26c      	bcs.n	80010d0 <__udivmoddi4+0x2ac>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	d96a      	bls.n	80010d0 <__udivmoddi4+0x2ac>
 8000ffa:	3b02      	subs	r3, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001002:	fba3 9502 	umull	r9, r5, r3, r2
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	42ac      	cmp	r4, r5
 800100c:	46c8      	mov	r8, r9
 800100e:	46ae      	mov	lr, r5
 8001010:	d356      	bcc.n	80010c0 <__udivmoddi4+0x29c>
 8001012:	d053      	beq.n	80010bc <__udivmoddi4+0x298>
 8001014:	b156      	cbz	r6, 800102c <__udivmoddi4+0x208>
 8001016:	ebb0 0208 	subs.w	r2, r0, r8
 800101a:	eb64 040e 	sbc.w	r4, r4, lr
 800101e:	fa04 f707 	lsl.w	r7, r4, r7
 8001022:	40ca      	lsrs	r2, r1
 8001024:	40cc      	lsrs	r4, r1
 8001026:	4317      	orrs	r7, r2
 8001028:	e9c6 7400 	strd	r7, r4, [r6]
 800102c:	4618      	mov	r0, r3
 800102e:	2100      	movs	r1, #0
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	f1c3 0120 	rsb	r1, r3, #32
 8001038:	fa02 fc03 	lsl.w	ip, r2, r3
 800103c:	fa20 f201 	lsr.w	r2, r0, r1
 8001040:	fa25 f101 	lsr.w	r1, r5, r1
 8001044:	409d      	lsls	r5, r3
 8001046:	432a      	orrs	r2, r5
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fbb1 f0f7 	udiv	r0, r1, r7
 8001054:	fb07 1510 	mls	r5, r7, r0, r1
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800105e:	fb00 f50e 	mul.w	r5, r0, lr
 8001062:	428d      	cmp	r5, r1
 8001064:	fa04 f403 	lsl.w	r4, r4, r3
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x258>
 800106a:	eb1c 0101 	adds.w	r1, ip, r1
 800106e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001072:	d22f      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 8001074:	428d      	cmp	r5, r1
 8001076:	d92d      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 8001078:	3802      	subs	r0, #2
 800107a:	4461      	add	r1, ip
 800107c:	1b49      	subs	r1, r1, r5
 800107e:	b292      	uxth	r2, r2
 8001080:	fbb1 f5f7 	udiv	r5, r1, r7
 8001084:	fb07 1115 	mls	r1, r7, r5, r1
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	fb05 f10e 	mul.w	r1, r5, lr
 8001090:	4291      	cmp	r1, r2
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x282>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f105 38ff 	add.w	r8, r5, #4294967295
 800109c:	d216      	bcs.n	80010cc <__udivmoddi4+0x2a8>
 800109e:	4291      	cmp	r1, r2
 80010a0:	d914      	bls.n	80010cc <__udivmoddi4+0x2a8>
 80010a2:	3d02      	subs	r5, #2
 80010a4:	4462      	add	r2, ip
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010ac:	e738      	b.n	8000f20 <__udivmoddi4+0xfc>
 80010ae:	4631      	mov	r1, r6
 80010b0:	4630      	mov	r0, r6
 80010b2:	e708      	b.n	8000ec6 <__udivmoddi4+0xa2>
 80010b4:	4639      	mov	r1, r7
 80010b6:	e6e6      	b.n	8000e86 <__udivmoddi4+0x62>
 80010b8:	4610      	mov	r0, r2
 80010ba:	e6fb      	b.n	8000eb4 <__udivmoddi4+0x90>
 80010bc:	4548      	cmp	r0, r9
 80010be:	d2a9      	bcs.n	8001014 <__udivmoddi4+0x1f0>
 80010c0:	ebb9 0802 	subs.w	r8, r9, r2
 80010c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c8:	3b01      	subs	r3, #1
 80010ca:	e7a3      	b.n	8001014 <__udivmoddi4+0x1f0>
 80010cc:	4645      	mov	r5, r8
 80010ce:	e7ea      	b.n	80010a6 <__udivmoddi4+0x282>
 80010d0:	462b      	mov	r3, r5
 80010d2:	e794      	b.n	8000ffe <__udivmoddi4+0x1da>
 80010d4:	4640      	mov	r0, r8
 80010d6:	e7d1      	b.n	800107c <__udivmoddi4+0x258>
 80010d8:	46d0      	mov	r8, sl
 80010da:	e77b      	b.n	8000fd4 <__udivmoddi4+0x1b0>
 80010dc:	3d02      	subs	r5, #2
 80010de:	4462      	add	r2, ip
 80010e0:	e732      	b.n	8000f48 <__udivmoddi4+0x124>
 80010e2:	4608      	mov	r0, r1
 80010e4:	e70a      	b.n	8000efc <__udivmoddi4+0xd8>
 80010e6:	4464      	add	r4, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e742      	b.n	8000f72 <__udivmoddi4+0x14e>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
 800110c:	bf00      	nop
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	7039      	strb	r1, [r7, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	7138      	strb	r0, [r7, #4]
 8001138:	bf00      	nop
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	f1c3 031f 	rsb	r3, r3, #31
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	4798      	blx	r3
    }
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf0c      	ite	eq
 80011c6:	2301      	moveq	r3, #1
 80011c8:	2300      	movne	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e6:	eef0 7ae7 	vabs.f32	s15, s15
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 8001216:	2137      	movs	r1, #55	; 0x37
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 800121a:	f01a ff7b 	bl	801c114 <__assert_func>

	if(align && size)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01f      	beq.n	8001264 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d01c      	beq.n	8001264 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4413      	add	r3, r2
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f015 fb49 	bl	80168d0 <_Z9ei_callocjj>
 800123e:	60f8      	str	r0, [r7, #12]

		if(p)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	425b      	negs	r3, r3
 8001252:	4013      	ands	r3, r2
 8001254:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3b02      	subs	r3, #2
 8001260:	b292      	uxth	r2, r2
 8001262:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001264:	697b      	ldr	r3, [r7, #20]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801f120 	.word	0x0801f120
 8001274:	0801f13c 	.word	0x0801f13c
 8001278:	0801f174 	.word	0x0801f174

0800127c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 800128e:	215a      	movs	r1, #90	; 0x5a
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001292:	f01a ff3f 	bl	801c114 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800129c:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	425b      	negs	r3, r3
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f015 fb1f 	bl	80168ec <_Z7ei_freePv>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0801f1f8 	.word	0x0801f1f8
 80012bc:	0801f1fc 	.word	0x0801f1fc
 80012c0:	0801f174 	.word	0x0801f174

080012c4 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e009      	b.n	800134e <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6819      	ldr	r1, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
      return *this;
 800134e:	687b      	ldr	r3, [r7, #4]
    }
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	da00      	bge.n	80013a2 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 80013a0:	331f      	adds	r3, #31
 80013a2:	115b      	asrs	r3, r3, #5
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	441a      	add	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	425a      	negs	r2, r3
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	f002 021f 	and.w	r2, r2, #31
 80013b8:	bf58      	it	pl
 80013ba:	4253      	negpl	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da07      	bge.n	80013d4 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3320      	adds	r3, #32
 80013c8:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1f1a      	subs	r2, r3, #4
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
    }
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ffb1 	bl	800135c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffa0 	bl	800135c <_ZNSt18_Bit_iterator_baseC1EPmj>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	461a      	mov	r2, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff3f 	bl	80012c4 <_ZNSt14_Bit_referenceC1EPmm>
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff90 	bl	8001382 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001462:	687b      	ldr	r3, [r7, #4]
    }
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZNKSt13_Bit_iteratorixEi>:
      *this += -__i;
      return *this;
    }

    reference
    operator[](difference_type __i) const
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 f80b 	bl	800149c <_ZStplRKSt13_Bit_iteratori>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f107 0210 	add.w	r2, r7, #16
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ffc9 	bl	8001426 <_ZNKSt13_Bit_iteratordeEv>
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZStplRKSt13_Bit_iteratori>:

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b0:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ffc9 	bl	800144e <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 80014bc:	bf00      	nop
    }
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	731a      	strb	r2, [r3, #12]
 80014e6:	e00e      	b.n	8001506 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2101      	movs	r1, #1
 80014f4:	4618      	mov	r0, r3
 80014f6:	f015 f9eb 	bl	80168d0 <_Z9ei_callocjj>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2201      	movs	r2, #1
 8001504:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <_ZN2ei9ei_matrixD1Ev+0x22>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f015 f9d7 	bl	80168ec <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
    }
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	ed87 0a01 	vstr	s0, [r7, #4]
 800157a:	ed97 0a01 	vldr	s0, [r7, #4]
 800157e:	f018 fa13 	bl	80199a8 <expf>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]
 800159a:	edd7 7a01 	vldr	s15, [r7, #4]
 800159e:	eef0 7ae7 	vabs.f32	s15, s15
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80015be:	f018 fa29 	bl	8019a14 <logf>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015da:	ed97 0a01 	vldr	s0, [r7, #4]
 80015de:	f018 fa75 	bl	8019acc <sqrtf>
 80015e2:	eef0 7a40 	vmov.f32	s15, s0
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fe:	fef8 7a67 	vrinta.f32	s15, s15
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001624:	edd7 7a05 	vldr	s15, [r7, #20]
 8001628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	db09      	blt.n	8001646 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001632:	ed97 0a05 	vldr	s0, [r7, #20]
 8001636:	f018 fa49 	bl	8019acc <sqrtf>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001644:	e004      	b.n	8001650 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800164e:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	e00e      	b.n	8001694 <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ed97 7a03 	vldr	s14, [r7, #12]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3301      	adds	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3ec      	bcc.n	8001676 <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	ee07 3a90 	vmov	s15, r3
    }
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b096      	sub	sp, #88	; 0x58
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6852      	ldr	r2, [r2, #4]
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80016cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	f107 021f 	add.w	r2, r7, #31
 80016dc:	f107 0008 	add.w	r0, r7, #8
 80016e0:	f008 f97a 	bl	80099d8 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 80016e4:	2301      	movs	r3, #1
 80016e6:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 80016e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001700:	fbb3 f1f2 	udiv	r1, r3, r2
 8001704:	fb01 f202 	mul.w	r2, r1, r2
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001724:	4413      	add	r3, r2
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001742:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001746:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	f107 0108 	add.w	r1, r7, #8
 8001750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001752:	4618      	mov	r0, r3
 8001754:	f008 f968 	bl	8009a28 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	2101      	movs	r1, #1
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fdd8 	bl	8001314 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001766:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800176a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800176c:	429a      	cmp	r2, r3
 800176e:	d1c4      	bne.n	80016fa <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001772:	653b      	str	r3, [r7, #80]	; 0x50
 8001774:	e009      	b.n	800178a <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xda>
                all_done_mark++; // move the high water mark so we don't look again
 8001776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001778:	3301      	adds	r3, #1
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 800177c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800177e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001780:	429a      	cmp	r2, r3
 8001782:	d213      	bcs.n	80017ac <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 8001784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001786:	3301      	adds	r3, #1
 8001788:	653b      	str	r3, [r7, #80]	; 0x50
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001794:	4618      	mov	r0, r3
 8001796:	f008 f947 	bl	8009a28 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 800179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fda3 	bl	80012ea <_ZNKSt14_Bit_referencecvbEv>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e5      	bne.n	8001776 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
            }
        }
 80017aa:	e79d      	b.n	80016e8 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                if(i>=size) { goto LOOP_END; }
 80017ac:	bf00      	nop
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1d1a      	adds	r2, r3, #4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3308      	adds	r3, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f008 f958 	bl	8009a6e <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f008 f923 	bl	8009a0e <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
 80017c8:	3758      	adds	r7, #88	; 0x58
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4619      	mov	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f000 f817 	bl	8001818 <_ZN2ei5numpy9transposeEPfii>
 80017ea:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	e00c      	b.n	8001810 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001802:	893a      	ldrh	r2, [r7, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001808:	897a      	ldrh	r2, [r7, #10]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800180e:	2300      	movs	r3, #0
    }
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08f      	sub	sp, #60	; 0x3c
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800182c:	2300      	movs	r3, #0
 800182e:	f7ff fe4a 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001838:	4c23      	ldr	r4, [pc, #140]	; (80018c8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800183a:	e03b      	b.n	80018b4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001842:	4c21      	ldr	r4, [pc, #132]	; (80018c8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001844:	e036      	b.n	80018b4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	da03      	bge.n	8001856 <_ZN2ei5numpy9transposeEPfii+0x3e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	db01      	blt.n	800185a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001856:	4c1d      	ldr	r4, [pc, #116]	; (80018cc <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001858:	e02c      	b.n	80018b4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	83bb      	strh	r3, [r7, #28]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	b29b      	uxth	r3, r3
 8001864:	83fb      	strh	r3, [r7, #30]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	b29b      	uxth	r3, r3
 800186e:	82bb      	strh	r3, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	b29b      	uxth	r3, r3
 8001874:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001878:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800187a:	f107 0214 	add.w	r2, r7, #20
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f010 fe90 	bl	80125aa <arm_mat_trans_f32>
 800188a:	4603      	mov	r3, r0
 800188c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001890:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 8001898:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 800189c:	e00a      	b.n	80018b4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	461a      	mov	r2, r3
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f01b fdaa 	bl	801d406 <memcpy>

        return EIDSP_OK;
 80018b2:	2400      	movs	r4, #0
    }
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe2f 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80018be:	4623      	mov	r3, r4
 80018c0:	4618      	mov	r0, r3
 80018c2:	373c      	adds	r7, #60	; 0x3c
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	fffffc16 	.word	0xfffffc16
 80018cc:	fffffc0c 	.word	0xfffffc0c

080018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80018dc:	edd7 7a00 	vldr	s15, [r7]
 80018e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018e4:	eef4 7a47 	vcmp.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d101      	bne.n	80018f2 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e033      	b.n	800195a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d204      	bcs.n	8001906 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d301      	bcc.n	800190a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001908:	e027      	b.n	800195a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	b29b      	uxth	r3, r3
 8001910:	82bb      	strh	r3, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	b29b      	uxth	r3, r3
 8001918:	82fb      	strh	r3, [r7, #22]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	b29b      	uxth	r3, r3
 8001926:	81bb      	strh	r3, [r7, #12]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	b29b      	uxth	r3, r3
 800192e:	81fb      	strh	r3, [r7, #14]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001936:	f107 020c 	add.w	r2, r7, #12
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4611      	mov	r1, r2
 8001940:	ed97 0a00 	vldr	s0, [r7]
 8001944:	4618      	mov	r0, r3
 8001946:	f010 fdfa 	bl	801253e <arm_mat_scale_f32>
 800194a:	4603      	mov	r3, r0
 800194c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	e000      	b.n	800195a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001958:	2300      	movs	r3, #0
    }
 800195a:	4618      	mov	r0, r3
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	fffffc0c 	.word	0xfffffc0c

08001968 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e014      	b.n	80019a4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	edd7 7a00 	vldr	s15, [r7]
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3e1      	bcc.n	800197a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 80019b6:	2300      	movs	r3, #0
    }
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80019da:	4c26      	ldr	r4, [pc, #152]	; (8001a74 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80019dc:	e045      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80019e6:	4c23      	ldr	r4, [pc, #140]	; (8001a74 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80019e8:	e03f      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e036      	b.n	8001a5e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x9a>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689d      	ldr	r5, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	69f9      	ldr	r1, [r7, #28]
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	f107 0008 	add.w	r0, r7, #8
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	f7ff fd5a 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5a>
 8001a18:	4c17      	ldr	r4, [pc, #92]	; (8001a78 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e015      	b.n	8001a4a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	f107 0308 	add.w	r3, r7, #8
 8001a30:	eeb0 0a67 	vmov.f32	s0, s15
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff97 	bl	8001968 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001a3a:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x84>
                EIDSP_ERR(ret);
 8001a42:	69bc      	ldr	r4, [r7, #24]
 8001a44:	2500      	movs	r5, #0
 8001a46:	e000      	b.n	8001a4a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            }
        }
 8001a48:	2501      	movs	r5, #1
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fd64 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8001a54:	2d01      	cmp	r5, #1
 8001a56:	d108      	bne.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3c3      	bcc.n	80019f0 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2c>

        return EIDSP_OK;
 8001a68:	2400      	movs	r4, #0
    }
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	fffffc14 	.word	0xfffffc14
 8001a78:	fffffc16 	.word	0xfffffc16

08001a7c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001a94:	e028      	b.n	8001ae8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001aa0:	e022      	b.n	8001ae8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e019      	b.n	8001adc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	68f9      	ldr	r1, [r7, #12]
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	18d0      	adds	r0, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f107 0208 	add.w	r2, r7, #8
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f010 fde1 	bl	801268a <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3e0      	bcc.n	8001aa8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2c>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001ae6:	2300      	movs	r3, #0
    }
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fffffc14 	.word	0xfffffc14

08001af4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b0c:	e028      	b.n	8001b60 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b18:	e022      	b.n	8001b60 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e019      	b.n	8001b54 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	18d0      	adds	r0, r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f107 0208 	add.w	r2, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f010 fd76 	bl	801262c <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3e0      	bcc.n	8001b20 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001b5e:	2300      	movs	r3, #0
    }
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	fffffc14 	.word	0xfffffc14

08001b6c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001b84:	e043      	b.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001b90:	e03d      	b.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e034      	b.n	8001c02 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x96>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	69f9      	ldr	r1, [r7, #28]
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	18d0      	adds	r0, r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f000 fc96 	bl	80024e4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	db09      	blt.n	8001be4 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x78>
      *pOut = sqrtf(in);
 8001bd0:	ed97 0a06 	vldr	s0, [r7, #24]
 8001bd4:	f017 ff7a 	bl	8019acc <sqrtf>
 8001bd8:	eef0 7a40 	vmov.f32	s15, s0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001be2:	e004      	b.n	8001bee <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x82>
      *pOut = 0.0f;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001bec:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3c5      	bcc.n	8001b98 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c0c:	2300      	movs	r3, #0
    }
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	fffffc14 	.word	0xfffffc14

08001c1c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d001      	beq.n	8001c36 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c34:	e087      	b.n	8001d46 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c40:	e081      	b.n	8001d46 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e078      	b.n	8001d3a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x11e>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	69f9      	ldr	r1, [r7, #28]
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	18d0      	adds	r0, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	f010 fce2 	bl	801262c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	69f9      	ldr	r1, [r7, #28]
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	18d0      	adds	r0, r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	f000 fc2e 	bl	80024e4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	18d0      	adds	r0, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ca2:	f107 0208 	add.w	r2, r7, #8
 8001ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8001caa:	4619      	mov	r1, r3
 8001cac:	f000 fd18 	bl	80026e0 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001cb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	edc7 7a06 	vstr	s15, [r7, #24]
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	db09      	blt.n	8001cf0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
      *pOut = sqrtf(in);
 8001cdc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001ce0:	f017 fef4 	bl	8019acc <sqrtf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001cee:	e004      	b.n	8001cfa <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xde>
      *pOut = 0.0f;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001cf8:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d06:	d108      	bne.n	8001d1a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xfe>
                output_matrix->buffer[row] = 0.0f;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00c      	b.n	8001d34 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x118>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d1a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d30:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d381      	bcc.n	8001c48 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001d44:	2300      	movs	r3, #0
    }
 8001d46:	4618      	mov	r0, r3
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	fffffc14 	.word	0xfffffc14

08001d54 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d6a:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d6c:	e06d      	b.n	8001e4a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d001      	beq.n	8001d7a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d78:	e067      	b.n	8001e4a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e05e      	b.n	8001e3e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xea>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	18d0      	adds	r0, r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f107 0210 	add.w	r2, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f010 fc46 	bl	801262c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d0      	adds	r0, r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f000 fb92 	bl	80024e4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	18d0      	adds	r0, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dda:	f107 0208 	add.w	r2, r7, #8
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	4619      	mov	r1, r3
 8001de4:	f000 fd37 	bl	8002856 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001de8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d107      	bne.n	8001e16 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xc2>
                output_matrix->buffer[row] = -3.0f;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e010      	b.n	8001e38 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xe4>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e16:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001e30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e34:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d39b      	bcc.n	8001d80 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001e48:	2300      	movs	r3, #0
    }
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	fffffc14 	.word	0xfffffc14
 8001e58:	c0400000 	.word	0xc0400000

08001e5c <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b098      	sub	sp, #96	; 0x60
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3301      	adds	r3, #1
 8001e70:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001e7a:	4c65      	ldr	r4, [pc, #404]	; (8002010 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001e7c:	e0c2      	b.n	8002004 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d901      	bls.n	8001e8a <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e88:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001e8a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001e92:	2101      	movs	r1, #1
 8001e94:	f7ff fb17 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8001e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001e9e:	4c5d      	ldr	r4, [pc, #372]	; (8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ea0:	e0ab      	b.n	8001ffa <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ea8:	4c5a      	ldr	r4, [pc, #360]	; (8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001eaa:	e0a6      	b.n	8001ffa <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001eac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	f01b faa6 	bl	801d406 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	18d0      	adds	r0, r2, r3
 8001ec2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f01b f9b9 	bl	801d244 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d025      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d022      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d01f      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eea:	d01b      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef2:	d017      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d013      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f02:	d00f      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d00b      	beq.n	8001f24 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	f000 fa4e 	bl	80023b4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f18:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d068      	beq.n	8001ff2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001f20:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001f22:	e06a      	b.n	8001ffa <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fd58 	bl	80029e0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f30:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001f38:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f3a:	e05d      	b.n	8001ff8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f3c:	f107 0014 	add.w	r0, r7, #20
 8001f40:	2300      	movs	r3, #0
 8001f42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f44:	2101      	movs	r1, #1
 8001f46:	f7ff fabe 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001f50:	4c30      	ldr	r4, [pc, #192]	; (8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f52:	2500      	movs	r5, #0
 8001f54:	e045      	b.n	8001fe2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f5c:	4c2d      	ldr	r4, [pc, #180]	; (8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f5e:	2500      	movs	r5, #0
 8001f60:	e03f      	b.n	8001fe2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001f62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f012 ff2a 	bl	8014dc4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001f80:	440b      	add	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	440b      	add	r3, r1
 8001f88:	6852      	ldr	r2, [r2, #4]
 8001f8a:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001f90:	2301      	movs	r3, #1
 8001f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f94:	e01f      	b.n	8001fd6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f107 0210 	add.w	r2, r7, #16
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f010 fb70 	bl	801268a <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001faa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001fae:	f7ff fb2f 	bl	8001610 <_ZN2ei5numpy4sqrtEf>
 8001fb2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fcc:	3302      	adds	r3, #2
 8001fce:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3da      	bcc.n	8001f96 <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 8001fe0:	2501      	movs	r5, #1
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fa98 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8001fec:	2d01      	cmp	r5, #1
 8001fee:	d103      	bne.n	8001ff8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8001ff0:	e000      	b.n	8001ff4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 8001ff2:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	e000      	b.n	8001ffa <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8001ff8:	bf00      	nop
    }
 8001ffa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa8c 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8002004:	4623      	mov	r3, r4
 8002006:	4618      	mov	r0, r3
 8002008:	3760      	adds	r7, #96	; 0x60
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop
 8002010:	fffffc11 	.word	0xfffffc11
 8002014:	fffffc16 	.word	0xfffffc16

08002018 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b098      	sub	sp, #96	; 0x60
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	3301      	adds	r3, #1
 800202c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002036:	4c6f      	ldr	r4, [pc, #444]	; (80021f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002038:	e0d6      	b.n	80021e8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203e:	429a      	cmp	r2, r3
 8002040:	d901      	bls.n	8002046 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8002046:	2300      	movs	r3, #0
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204e:	429a      	cmp	r2, r3
 8002050:	d101      	bne.n	8002056 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8002056:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800205e:	2101      	movs	r1, #1
 8002060:	f7ff fa31 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8002064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 800206a:	4c63      	ldr	r4, [pc, #396]	; (80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 800206c:	e0b7      	b.n	80021de <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002074:	4c60      	ldr	r4, [pc, #384]	; (80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002076:	e0b2      	b.n	80021de <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8002078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d112      	bne.n	80020a4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800207e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	68f9      	ldr	r1, [r7, #12]
 8002088:	f01b f9bd 	bl	801d406 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 800208c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	18d0      	adds	r0, r2, r3
 8002094:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f01b f8d0 	bl	801d244 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d025      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d022      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d01f      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020bc:	d01b      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c4:	d017      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020cc:	d013      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020d4:	d00f      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	d00b      	beq.n	80020f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80020de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	f000 f9d7 	bl	8002498 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 80020ea:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 80020ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d071      	beq.n	80021d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 80020f2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80020f4:	e073      	b.n	80021de <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 80020f6:	f107 0320 	add.w	r3, r7, #32
 80020fa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fc6f 	bl	80029e0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002102:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800210a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800210c:	e066      	b.n	80021dc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800210e:	f107 0010 	add.w	r0, r7, #16
 8002112:	2300      	movs	r3, #0
 8002114:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002116:	2101      	movs	r1, #1
 8002118:	f7ff f9d5 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002122:	4c35      	ldr	r4, [pc, #212]	; (80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002124:	2500      	movs	r5, #0
 8002126:	e04e      	b.n	80021c6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800212e:	4c32      	ldr	r4, [pc, #200]	; (80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002130:	2500      	movs	r5, #0
 8002132:	e048      	b.n	80021c6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002134:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	f107 0020 	add.w	r0, r7, #32
 800213c:	2300      	movs	r3, #0
 800213e:	f012 fe41 	bl	8014dc4 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002156:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800215a:	440b      	add	r3, r1
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	440b      	add	r3, r1
 8002162:	6852      	ldr	r2, [r2, #4]
 8002164:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002166:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002168:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 800217a:	2302      	movs	r3, #2
 800217c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800217e:	2301      	movs	r3, #1
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
 8002182:	e01a      	b.n	80021ba <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	441a      	add	r2, r3
 800218c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	440b      	add	r3, r1
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219c:	3301      	adds	r3, #1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	440b      	add	r3, r1
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80021ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b0:	3302      	adds	r3, #2
 80021b2:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b6:	3301      	adds	r3, #1
 80021b8:	657b      	str	r3, [r7, #84]	; 0x54
 80021ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021bc:	3b01      	subs	r3, #1
 80021be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3df      	bcc.n	8002184 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 80021c4:	2501      	movs	r5, #1
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f9a6 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80021d0:	2d01      	cmp	r5, #1
 80021d2:	d103      	bne.n	80021dc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 80021d4:	e000      	b.n	80021d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 80021d6:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80021d8:	2400      	movs	r4, #0
 80021da:	e000      	b.n	80021de <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 80021dc:	bf00      	nop
    }
 80021de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f99a 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80021e8:	4623      	mov	r3, r4
 80021ea:	4618      	mov	r0, r3
 80021ec:	3760      	adds	r7, #96	; 0x60
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	fffffc11 	.word	0xfffffc11
 80021f8:	fffffc16 	.word	0xfffffc16

080021fc <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	ed87 0a03 	vstr	s0, [r7, #12]
 8002206:	edc7 0a02 	vstr	s1, [r7, #8]
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800221c:	e03f      	b.n	800229e <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d104      	bne.n	800222e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e037      	b.n	800229e <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800222e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002232:	edd7 7a03 	vldr	s15, [r7, #12]
 8002236:	ee77 6a67 	vsub.f32	s13, s14, s15
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3b01      	subs	r3, #1
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e015      	b.n	8002280 <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	4413      	add	r3, r2
 800226e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3e4      	bcc.n	8002254 <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 800229c:	2300      	movs	r3, #0
    }
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	fffffc10 	.word	0xfffffc10

080022b0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	e062      	b.n	8002384 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xd4>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	188c      	adds	r4, r1, r2
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 80022da:	edd7 7a05 	vldr	s15, [r7, #20]
 80022de:	eef0 7ae7 	vabs.f32	s15, s15
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4618      	mov	r0, r3
 80022e8:	eeb0 0a67 	vmov.f32	s0, s15
 80022ec:	f017 fc0c 	bl	8019b08 <frexpf>
 80022f0:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 80022f6:	60fb      	str	r3, [r7, #12]
        y *= f;
 80022f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80022fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002308:	edd7 7a03 	vldr	s15, [r7, #12]
 800230c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80023a4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002314:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002318:	ed97 7a03 	vldr	s14, [r7, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80023a8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002334:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002338:	ed97 7a03 	vldr	s14, [r7, #12]
 800233c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 8002348:	edd7 7a03 	vldr	s15, [r7, #12]
 800234c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023ac <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002354:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	ed97 7a03 	vldr	s14, [r7, #12]
 8002366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236a:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 800236e:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 8002372:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80023b0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 8002376:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800237a:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	429a      	cmp	r2, r3
 8002394:	d393      	bcc.n	80022be <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 8002396:	2300      	movs	r3, #0
    }
 8002398:	4618      	mov	r0, r3
 800239a:	3724      	adds	r7, #36	; 0x24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	3f9da1a8 	.word	0x3f9da1a8
 80023a4:	4083caf5 	.word	0x4083caf5
 80023a8:	40c0b3fb 	.word	0x40c0b3fb
 80023ac:	404892e0 	.word	0x404892e0
 80023b0:	3e9a209b 	.word	0x3e9a209b

080023b4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f014 fa76 	bl	80168b8 <_Z9ei_mallocj>
 80023cc:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80023d4:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 80023d6:	e058      	b.n	800248a <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	f013 febb 	bl	8016160 <kiss_fftr_alloc>
 80023ea:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80023f2:	69b8      	ldr	r0, [r7, #24]
 80023f4:	f014 fa7a 	bl	80168ec <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 80023fa:	e046      	b.n	800248a <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f013 ffd1 	bl	80163a8 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e033      	b.n	8002474 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	2002      	movs	r0, #2
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	f007 fb45 	bl	8009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002422:	ec55 4b10 	vmov	r4, r5, d0
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002432:	2002      	movs	r0, #2
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	f007 fb38 	bl	8009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800243c:	ec53 2b10 	vmov	r2, r3, d0
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f7fd ff52 	bl	80002ec <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe fbfa 	bl	8000c48 <__aeabi_d2f>
 8002454:	4601      	mov	r1, r0
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	18d4      	adds	r4, r2, r3
 800245e:	ee00 1a10 	vmov	s0, r1
 8002462:	f7ff f8d5 	bl	8001610 <_ZN2ei5numpy4sqrtEf>
 8002466:	eef0 7a40 	vmov.f32	s15, s0
 800246a:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d3c7      	bcc.n	800240c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800247c:	6978      	ldr	r0, [r7, #20]
 800247e:	f014 fa35 	bl	80168ec <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002482:	69b8      	ldr	r0, [r7, #24]
 8002484:	f014 fa32 	bl	80168ec <_Z7ei_freePv>

        return EIDSP_OK;
 8002488:	2300      	movs	r3, #0
    }
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bdb0      	pop	{r4, r5, r7, pc}
 8002492:	bf00      	nop
 8002494:	fffffc16 	.word	0xfffffc16

08002498 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	f013 fe54 	bl	8016160 <kiss_fftr_alloc>
 80024b8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 80024c2:	e008      	b.n	80024d6 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f013 ff6d 	bl	80163a8 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f014 fa0c 	bl	80168ec <_Z7ei_freePv>

        return EIDSP_OK;
 80024d4:	2300      	movs	r3, #0
    }
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	fffffc16 	.word	0xfffffc16

080024e4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80024e4:	b480      	push	{r7}
 80024e6:	b08b      	sub	sp, #44	; 0x2c
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d804      	bhi.n	8002510 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
            return;
 800250e:	e0e2      	b.n	80026d6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002516:	e02e      	b.n	8002576 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1d1a      	adds	r2, r3, #4
 800251c:	61ba      	str	r2, [r7, #24]
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	ed97 7a08 	vldr	s14, [r7, #32]
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	61ba      	str	r2, [r7, #24]
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ed97 7a08 	vldr	s14, [r7, #32]
 800253c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002540:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	61ba      	str	r2, [r7, #24]
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002556:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	61ba      	str	r2, [r7, #24]
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ed97 7a08 	vldr	s14, [r7, #32]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3b01      	subs	r3, #1
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1cd      	bne.n	8002518 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002584:	e00d      	b.n	80025a2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	61ba      	str	r2, [r7, #24]
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ed97 7a08 	vldr	s14, [r7, #32]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1ee      	bne.n	8002586 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80025b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ba:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025c8:	e056      	b.n	8002678 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1d1a      	adds	r2, r3, #4
 80025ce:	61ba      	str	r2, [r7, #24]
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025dc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	61ba      	str	r2, [r7, #24]
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002606:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800260a:	edd7 7a04 	vldr	s15, [r7, #16]
 800260e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002612:	ed97 7a07 	vldr	s14, [r7, #28]
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1d1a      	adds	r2, r3, #4
 8002622:	61ba      	str	r2, [r7, #24]
 8002624:	ed93 7a00 	vldr	s14, [r3]
 8002628:	edd7 7a05 	vldr	s15, [r7, #20]
 800262c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002630:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002634:	edd7 7a04 	vldr	s15, [r7, #16]
 8002638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800263c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	1d1a      	adds	r2, r3, #4
 800264c:	61ba      	str	r2, [r7, #24]
 800264e:	ed93 7a00 	vldr	s14, [r3]
 8002652:	edd7 7a05 	vldr	s15, [r7, #20]
 8002656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800265e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002662:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002666:	ed97 7a07 	vldr	s14, [r7, #28]
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	3b01      	subs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1a5      	bne.n	80025ca <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002686:	e017      	b.n	80026b8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	61ba      	str	r2, [r7, #24]
 800268e:	ed93 7a00 	vldr	s14, [r3]
 8002692:	edd7 7a05 	vldr	s15, [r7, #20]
 8002696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800269e:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	3b01      	subs	r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e4      	bne.n	8002688 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	ee07 3a90 	vmov	s15, r3
 80026c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80026cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	edc3 7a00 	vstr	s15, [r3]
    }
 80026d6:	372c      	adds	r7, #44	; 0x2c
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80026ee:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80026fc:	e06e      	b.n	80027dc <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0xfc>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1d1a      	adds	r2, r3, #4
 8002702:	60fa      	str	r2, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002708:	ed97 7a05 	vldr	s14, [r7, #20]
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002714:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002718:	edd7 7a05 	vldr	s15, [r7, #20]
 800271c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002720:	edd7 7a05 	vldr	s15, [r7, #20]
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	ed97 7a06 	vldr	s14, [r7, #24]
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1d1a      	adds	r2, r3, #4
 8002738:	60fa      	str	r2, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800273e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002742:	edd7 7a01 	vldr	s15, [r7, #4]
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800274e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002752:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002766:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1d1a      	adds	r2, r3, #4
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002774:	ed97 7a05 	vldr	s14, [r7, #20]
 8002778:	edd7 7a01 	vldr	s15, [r7, #4]
 800277c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002780:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002784:	edd7 7a05 	vldr	s15, [r7, #20]
 8002788:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800278c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	ed97 7a06 	vldr	s14, [r7, #24]
 8002798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279c:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	60fa      	str	r2, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80027be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80027ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d2:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b01      	subs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d18d      	bne.n	80026fe <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 80027ea:	e01d      	b.n	8002828 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x148>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	60fa      	str	r2, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80027fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80027fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002802:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002806:	edd7 7a05 	vldr	s15, [r7, #20]
 800280a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800280e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	ed97 7a06 	vldr	s14, [r7, #24]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b01      	subs	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1de      	bne.n	80027ec <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10c>
        }

        sum = sum / blockSize;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002838:	edd7 6a06 	vldr	s13, [r7, #24]
 800283c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002840:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	601a      	str	r2, [r3, #0]
    }
 800284a:	bf00      	nop
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002856:	b480      	push	{r7}
 8002858:	b08b      	sub	sp, #44	; 0x2c
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	ed87 0a01 	vstr	s0, [r7, #4]
 8002864:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002872:	e076      	b.n	8002962 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x10c>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	60fa      	str	r2, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800287e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 800288e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002892:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002896:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 800289a:	edd7 7a05 	vldr	s15, [r7, #20]
 800289e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80028a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028aa:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	60fa      	str	r2, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80028c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028d0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80028e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e4:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	60fa      	str	r2, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fe:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002902:	edd7 7a07 	vldr	s15, [r7, #28]
 8002906:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800290a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 800290e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002912:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002916:	ed97 7a08 	vldr	s14, [r7, #32]
 800291a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291e:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800292c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002930:	edd7 7a01 	vldr	s15, [r7, #4]
 8002934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002938:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 800293c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002940:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002944:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002948:	edd7 7a05 	vldr	s15, [r7, #20]
 800294c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002950:	ed97 7a08 	vldr	s14, [r7, #32]
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d185      	bne.n	8002874 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002970:	e01f      	b.n	80029b2 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x15c>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800297c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002980:	edd7 7a01 	vldr	s15, [r7, #4]
 8002984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002988:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 800298c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002990:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002994:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 8002998:	edd7 7a06 	vldr	s15, [r7, #24]
 800299c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	3b01      	subs	r3, #1
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1dc      	bne.n	8002972 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11c>
        }

        sum = sum / blockSize;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80029c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	601a      	str	r2, [r3, #0]
    }
 80029d4:	bf00      	nop
 80029d6:	372c      	adds	r7, #44	; 0x2c
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF) && !defined(EI_CLASSIFIER_LOAD_ALL_FFTS)
        arm_status status;
        switch (n_fft) {
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d11f      	bne.n	8002a30 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x50>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_64 == 1
            case 64: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60fb      	str	r3, [r7, #12]
                S->fftLen = 32U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len32.bitRevLength;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a02:	899a      	ldrh	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len32.pBitRevTable;
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len32.pTwiddle;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 64U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_64;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002a22:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8002a24:	2300      	movs	r3, #0
 8002a26:	72fb      	strb	r3, [r7, #11]
                break;
 8002a28:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002a2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a2e:	e000      	b.n	8002a32 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x52>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	08023220 	.word	0x08023220
 8002a44:	08023120 	.word	0x08023120
 8002a48:	fffffc08 	.word	0xfffffc08

08002a4c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	461a      	mov	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d001      	beq.n	8002a6e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002a6c:	e050      	b.n	8002b10 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002a6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff f9ef 	bl	8001e5c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002a7e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	e042      	b.n	8002b10 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e03a      	b.n	8002b06 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002a90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	ee17 0a90 	vmov	r0, s15
 8002a9e:	f7fd fd83 	bl	80005a8 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	491c      	ldr	r1, [pc, #112]	; (8002b1c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002aac:	f7fd fefe 	bl	80008ac <__aeabi_ddiv>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	ed93 7a00 	vldr	s14, [r3]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd66 	bl	80005a8 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd fdb8 	bl	8000658 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	18d4      	adds	r4, r2, r3
 8002af8:	f7fe f8a6 	bl	8000c48 <__aeabi_d2f>
 8002afc:	4603      	mov	r3, r0
 8002afe:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3301      	adds	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3c0      	bcc.n	8002a90 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 8002b0e:	2300      	movs	r3, #0
    }
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	fffffc14 	.word	0xfffffc14
 8002b1c:	3ff00000 	.word	0x3ff00000

08002b20 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b093      	sub	sp, #76	; 0x4c
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8002b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	3301      	adds	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002b42:	4b4f      	ldr	r3, [pc, #316]	; (8002c80 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	f107 0218 	add.w	r2, r7, #24
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f006 ffdd 	bl	8009b10 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20b      	bcs.n	8002b76 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002b5e:	2104      	movs	r1, #4
 8002b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b62:	f013 feb5 	bl	80168d0 <_Z9ei_callocjj>
 8002b66:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f007 f804 	bl	8009b7c <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002b74:	e00b      	b.n	8002b8e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 8002b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	2100      	movs	r1, #0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f01a fb52 	bl	801d244 <memset>
        int input_ix = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002ba4:	e05d      	b.n	8002c62 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002baa:	4413      	add	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d203      	bcs.n	8002bba <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9a>
                                                                        : input_size - input_ix;
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	e000      	b.n	8002bbc <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9c>
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	18d0      	adds	r0, r2, r3
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd6:	6a39      	ldr	r1, [r7, #32]
 8002bd8:	f7ff ff38 	bl	8002a4c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8002bdc:	61f8      	str	r0, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc8>
 8002be4:	69fc      	ldr	r4, [r7, #28]
 8002be6:	e041      	b.n	8002c6c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	e017      	b.n	8002c22 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x102>
                output[j] = std::max(output[j], fft_out[i]);
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	18d0      	adds	r0, r2, r3
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c00:	4413      	add	r3, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f006 ffce 	bl	8009ba4 <_ZSt3maxIfERKT_S2_S2_>
 8002c08:	4601      	mov	r1, r0
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	680a      	ldr	r2, [r1, #0]
 8002c14:	601a      	str	r2, [r3, #0]
                j++;
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	3301      	adds	r3, #1
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	3301      	adds	r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d3e3      	bcc.n	8002bf2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd2>
            }
            if (do_overlap) {
 8002c2a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d013      	beq.n	8002c5a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x13a>
                if (do_saved_point) {
 8002c32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12e>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4413      	add	r3, r2
 8002c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c46:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c50:	085a      	lsrs	r2, r3, #1
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	4413      	add	r3, r2
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
 8002c58:	e003      	b.n	8002c62 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            }
            else {
                input_ix += fft_points;
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	4413      	add	r3, r2
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c66:	429a      	cmp	r2, r3
 8002c68:	db9d      	blt.n	8002ba6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x86>
            }
        }

        return EIDSP_OK;
 8002c6a:	2400      	movs	r4, #0
    }
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 ff62 	bl	8009b3a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002c76:	4623      	mov	r3, r4
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3744      	adds	r7, #68	; 0x44
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	080168ed 	.word	0x080168ed

08002c84 <_ZN2ei5numpy8varianceEPfj>:

    static float variance(float *input, size_t size)
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    {
        // Use CMSIS either way.  Will fall back to straight C when needed
        float temp;
#if EIDSP_USE_CMSIS_DSP
        arm_var_f32(input, size, &temp);
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	461a      	mov	r2, r3
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f00f fd3f 	bl	801271a <arm_var_f32>
        for (size_t i = 0; i < size; i++) {
            temp += (input[i] - mean) * (input[i] - mean);
        }
        temp /= (size - 1);
#endif
        return temp;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	ee07 3a90 	vmov	s15, r3
    }
 8002ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e013      	b.n	8002ce4 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	d105      	bne.n	8002cde <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8002cdc:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d3e7      	bcc.n	8002cbc <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2edbe6ff 	.word	0x2edbe6ff

08002d00 <_ZN2ei5numpy18underflow_handlingEPfjf>:
     * @param input Array
     * @param input_size Size of array
     * @param epsilon Smallest valid non-zero value
     * @returns void
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e021      	b.n	8002d58 <_ZN2ei5numpy18underflow_handlingEPfjf+0x58>
            if (fabs(input[ix]) < epsilon) {
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	f7fe fc34 	bl	8001590 <_ZSt4fabsf>
 8002d28:	eeb0 7a40 	vmov.f32	s14, s0
 8002d2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	bfcc      	ite	gt
 8002d3a:	2301      	movgt	r3, #1
 8002d3c:	2300      	movle	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <_ZN2ei5numpy18underflow_handlingEPfjf+0x52>
                input[ix] = 0.0f;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d3d9      	bcc.n	8002d14 <_ZN2ei5numpy18underflow_handlingEPfjf+0x14>
            }
        }
    }
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f013 fd94 	bl	80168b8 <_Z9ei_mallocj>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e009      	b.n	8002db0 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3f1      	bcc.n	8002d9c <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d115      	bne.n	8002e08 <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	4413      	add	r3, r2
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	0152      	lsls	r2, r2, #5
 8002df4:	440a      	add	r2, r1
 8002df6:	68d0      	ldr	r0, [r2, #12]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6851      	ldr	r1, [r2, #4]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	188c      	adds	r4, r1, r2
 8002e02:	4798      	blx	r3
 8002e04:	4603      	mov	r3, r0
 8002e06:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	681b      	ldr	r3, [r3, #0]
    }
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e01e      	b.n	8002e68 <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d004      	beq.n	8002e54 <_ZN18ei_impulse_state_t5resetEv+0x38>
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	320c      	adds	r2, #12
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3da      	bcc.n	8002e2a <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    {
        reset();
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffc8 	bl	8002e1c <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f013 fd2b 	bl	80168ec <_Z7ei_freePv>
    }
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff5b 	bl	8002d6a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	0000      	movs	r0, r0
	...

08002ec8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	b095      	sub	sp, #84	; 0x54
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6178      	str	r0, [r7, #20]
 8002ed2:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ed6:	edc7 0a03 	vstr	s1, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	da00      	bge.n	8002ee8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x20>
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	105b      	asrs	r3, r3, #1
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7fd fb5b 	bl	80005a8 <__aeabi_f2d>
 8002ef2:	a3a9      	add	r3, pc, #676	; (adr r3, 8003198 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd fbae 	bl	8000658 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4690      	mov	r8, r2
 8002f02:	4699      	mov	r9, r3
 8002f04:	6938      	ldr	r0, [r7, #16]
 8002f06:	f7fd fb4f 	bl	80005a8 <__aeabi_f2d>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4640      	mov	r0, r8
 8002f10:	4649      	mov	r1, r9
 8002f12:	f7fd fccb 	bl	80008ac <__aeabi_ddiv>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	ec43 2b17 	vmov	d7, r2, r3
 8002f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f22:	eef0 0a67 	vmov.f32	s1, s15
 8002f26:	f016 fd0b 	bl	8019940 <tan>
 8002f2a:	ec53 2b10 	vmov	r2, r3, d0
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7fd fe89 	bl	8000c48 <__aeabi_d2f>
 8002f36:	4603      	mov	r3, r0
 8002f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002f3a:	2002      	movs	r0, #2
 8002f3c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002f40:	f006 fdb4 	bl	8009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f44:	ec53 2b10 	vmov	r2, r3, d0
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fe7c 	bl	8000c48 <__aeabi_d2f>
 8002f50:	4603      	mov	r3, r0
 8002f52:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f56:	2104      	movs	r1, #4
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f013 fcb9 	bl	80168d0 <_Z9ei_callocjj>
 8002f5e:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f62:	2104      	movs	r1, #4
 8002f64:	4618      	mov	r0, r3
 8002f66:	f013 fcb3 	bl	80168d0 <_Z9ei_callocjj>
 8002f6a:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f013 fcad 	bl	80168d0 <_Z9ei_callocjj>
 8002f76:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f013 fca7 	bl	80168d0 <_Z9ei_callocjj>
 8002f82:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	2104      	movs	r1, #4
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f013 fca1 	bl	80168d0 <_Z9ei_callocjj>
 8002f8e:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f92:	2104      	movs	r1, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f013 fc9b 	bl	80168d0 <_Z9ei_callocjj>
 8002f9a:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa0:	e0e3      	b.n	800316a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002fa2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fa4:	f7fd faee 	bl	8000584 <__aeabi_i2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	f7fd f99e 	bl	80002ec <__adddf3>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8002fbe:	f7fd f995 	bl	80002ec <__adddf3>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	a373      	add	r3, pc, #460	; (adr r3, 8003198 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f7fd fb42 	bl	8000658 <__aeabi_dmul>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4690      	mov	r8, r2
 8002fda:	4699      	mov	r9, r3
 8002fdc:	6978      	ldr	r0, [r7, #20]
 8002fde:	f7fd fad1 	bl	8000584 <__aeabi_i2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	f7fd f981 	bl	80002ec <__adddf3>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4640      	mov	r0, r8
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	f7fd fc5b 	bl	80008ac <__aeabi_ddiv>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	ec43 2b17 	vmov	d7, r2, r3
 8002ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8003002:	eef0 0a67 	vmov.f32	s1, s15
 8003006:	f016 fc43 	bl	8019890 <sin>
 800300a:	ec53 2b10 	vmov	r2, r3, d0
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f7fd fe19 	bl	8000c48 <__aeabi_d2f>
 8003016:	4603      	mov	r3, r0
 8003018:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800301a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800301c:	f7fd fac4 	bl	80005a8 <__aeabi_f2d>
 8003020:	4680      	mov	r8, r0
 8003022:	4689      	mov	r9, r1
 8003024:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003026:	f7fd fabf 	bl	80005a8 <__aeabi_f2d>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	f7fd f95d 	bl	80002ec <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4692      	mov	sl, r2
 8003038:	469b      	mov	fp, r3
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f7fd fab4 	bl	80005a8 <__aeabi_f2d>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4650      	mov	r0, sl
 8003046:	4659      	mov	r1, fp
 8003048:	f7fd fb06 	bl	8000658 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4640      	mov	r0, r8
 8003052:	4649      	mov	r1, r9
 8003054:	f7fd f94a 	bl	80002ec <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8003066:	f7fd f941 	bl	80002ec <__adddf3>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd fde9 	bl	8000c48 <__aeabi_d2f>
 8003076:	4603      	mov	r3, r0
 8003078:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003080:	4413      	add	r3, r2
 8003082:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003086:	ed97 7a04 	vldr	s14, [r7, #16]
 800308a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800308e:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8003092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003096:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800309a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd fa81 	bl	80005a8 <__aeabi_f2d>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	f7fd f91f 	bl	80002ec <__adddf3>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4690      	mov	r8, r2
 80030b4:	4699      	mov	r9, r3
 80030b6:	6938      	ldr	r0, [r7, #16]
 80030b8:	f7fd fa76 	bl	80005a8 <__aeabi_f2d>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4640      	mov	r0, r8
 80030c2:	4649      	mov	r1, r9
 80030c4:	f7fd fbf2 	bl	80008ac <__aeabi_ddiv>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	18d6      	adds	r6, r2, r3
 80030d8:	f7fd fdb6 	bl	8000c48 <__aeabi_d2f>
 80030dc:	4603      	mov	r3, r0
 80030de:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 80030e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030e2:	f7fd fa61 	bl	80005a8 <__aeabi_f2d>
 80030e6:	4680      	mov	r8, r0
 80030e8:	4689      	mov	r9, r1
 80030ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030ec:	f7fd fa5c 	bl	80005a8 <__aeabi_f2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	f7fd f8fa 	bl	80002ec <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4692      	mov	sl, r2
 80030fe:	469b      	mov	fp, r3
 8003100:	69f8      	ldr	r0, [r7, #28]
 8003102:	f7fd fa51 	bl	80005a8 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4650      	mov	r0, sl
 800310c:	4659      	mov	r1, fp
 800310e:	f7fd faa3 	bl	8000658 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4640      	mov	r0, r8
 8003118:	4649      	mov	r1, r9
 800311a:	f7fd f8e5 	bl	80002e8 <__aeabi_dsub>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 800312c:	f7fd f8de 	bl	80002ec <__adddf3>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4614      	mov	r4, r2
 8003136:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800313a:	6938      	ldr	r0, [r7, #16]
 800313c:	f7fd fa34 	bl	80005a8 <__aeabi_f2d>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4620      	mov	r0, r4
 8003146:	4629      	mov	r1, r5
 8003148:	f7fd fbb0 	bl	80008ac <__aeabi_ddiv>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315a:	18d6      	adds	r6, r2, r3
 800315c:	f7fd fd74 	bl	8000c48 <__aeabi_d2f>
 8003160:	4603      	mov	r3, r0
 8003162:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	3301      	adds	r3, #1
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	429a      	cmp	r2, r3
 8003170:	f6ff af17 	blt.w	8002fa2 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8003174:	2300      	movs	r3, #0
 8003176:	64bb      	str	r3, [r7, #72]	; 0x48
 8003178:	e0a9      	b.n	80032ce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	441a      	add	r2, r3
 8003182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	440b      	add	r3, r1
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 800318e:	2300      	movs	r3, #0
 8003190:	647b      	str	r3, [r7, #68]	; 0x44
 8003192:	e094      	b.n	80032be <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
 8003194:	f3af 8000 	nop.w
 8003198:	54442d18 	.word	0x54442d18
 800319c:	400921fb 	.word	0x400921fb
 80031a0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
 80031b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b6:	4413      	add	r3, r2
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c6:	4413      	add	r3, r2
 80031c8:	edd3 6a00 	vldr	s13, [r3]
 80031cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	4413      	add	r3, r2
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f2:	4413      	add	r3, r2
 80031f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f8:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 80031fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f9ce 	bl	80005a8 <__aeabi_f2d>
 800320c:	4604      	mov	r4, r0
 800320e:	460d      	mov	r5, r1
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003216:	4413      	add	r3, r2
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f9c4 	bl	80005a8 <__aeabi_f2d>
 8003220:	4680      	mov	r8, r0
 8003222:	4689      	mov	r9, r1
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f9ba 	bl	80005a8 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	f7fd f858 	bl	80002ec <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd f852 	bl	80002ec <__adddf3>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4690      	mov	r8, r2
 800324e:	4699      	mov	r9, r3
 8003250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f9a4 	bl	80005a8 <__aeabi_f2d>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4640      	mov	r0, r8
 8003266:	4649      	mov	r1, r9
 8003268:	f7fd f840 	bl	80002ec <__adddf3>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4620      	mov	r0, r4
 8003272:	4629      	mov	r1, r5
 8003274:	f7fd f9f0 	bl	8000658 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	18d4      	adds	r4, r2, r3
 8003288:	f7fd fcde 	bl	8000c48 <__aeabi_d2f>
 800328c:	4603      	mov	r3, r0
 800328e:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8003290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	441a      	add	r2, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	6a39      	ldr	r1, [r7, #32]
 800329e:	440b      	add	r3, r1
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80032a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032aa:	441a      	add	r2, r3
 80032ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b2:	440b      	add	r3, r1
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	3301      	adds	r3, #1
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
 80032be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f6ff af6e 	blt.w	80031a4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	3301      	adds	r3, #1
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	f4ff af51 	bcc.w	800317a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 80032d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032da:	f013 fb07 	bl	80168ec <_Z7ei_freePv>
        ei_free(d1);
 80032de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e0:	f013 fb04 	bl	80168ec <_Z7ei_freePv>
        ei_free(d2);
 80032e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032e6:	f013 fb01 	bl	80168ec <_Z7ei_freePv>
        ei_free(w0);
 80032ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ec:	f013 fafe 	bl	80168ec <_Z7ei_freePv>
        ei_free(w1);
 80032f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032f2:	f013 fafb 	bl	80168ec <_Z7ei_freePv>
        ei_free(w2);
 80032f6:	6a38      	ldr	r0, [r7, #32]
 80032f8:	f013 faf8 	bl	80168ec <_Z7ei_freePv>
    }
 80032fc:	bf00      	nop
 80032fe:	3754      	adds	r7, #84	; 0x54
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003306:	bf00      	nop

08003308 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	b095      	sub	sp, #84	; 0x54
 800330e:	af00      	add	r7, sp, #0
 8003310:	6178      	str	r0, [r7, #20]
 8003312:	ed87 0a04 	vstr	s0, [r7, #16]
 8003316:	edc7 0a03 	vstr	s1, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	da00      	bge.n	8003328 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x20>
 8003326:	3301      	adds	r3, #1
 8003328:	105b      	asrs	r3, r3, #1
 800332a:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7fd f93b 	bl	80005a8 <__aeabi_f2d>
 8003332:	a3a9      	add	r3, pc, #676	; (adr r3, 80035d8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f98e 	bl	8000658 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4690      	mov	r8, r2
 8003342:	4699      	mov	r9, r3
 8003344:	6938      	ldr	r0, [r7, #16]
 8003346:	f7fd f92f 	bl	80005a8 <__aeabi_f2d>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4640      	mov	r0, r8
 8003350:	4649      	mov	r1, r9
 8003352:	f7fd faab 	bl	80008ac <__aeabi_ddiv>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	ec43 2b17 	vmov	d7, r2, r3
 800335e:	eeb0 0a47 	vmov.f32	s0, s14
 8003362:	eef0 0a67 	vmov.f32	s1, s15
 8003366:	f016 faeb 	bl	8019940 <tan>
 800336a:	ec53 2b10 	vmov	r2, r3, d0
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	f7fd fc69 	bl	8000c48 <__aeabi_d2f>
 8003376:	4603      	mov	r3, r0
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 800337a:	2002      	movs	r0, #2
 800337c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8003380:	f006 fb94 	bl	8009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003384:	ec53 2b10 	vmov	r2, r3, d0
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd fc5c 	bl	8000c48 <__aeabi_d2f>
 8003390:	4603      	mov	r3, r0
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8003394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003396:	2104      	movs	r1, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f013 fa99 	bl	80168d0 <_Z9ei_callocjj>
 800339e:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	2104      	movs	r1, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f013 fa93 	bl	80168d0 <_Z9ei_callocjj>
 80033aa:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ae:	2104      	movs	r1, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f013 fa8d 	bl	80168d0 <_Z9ei_callocjj>
 80033b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80033b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ba:	2104      	movs	r1, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f013 fa87 	bl	80168d0 <_Z9ei_callocjj>
 80033c2:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c6:	2104      	movs	r1, #4
 80033c8:	4618      	mov	r0, r3
 80033ca:	f013 fa81 	bl	80168d0 <_Z9ei_callocjj>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d2:	2104      	movs	r1, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f013 fa7b 	bl	80168d0 <_Z9ei_callocjj>
 80033da:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80033dc:	2300      	movs	r3, #0
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	e0e3      	b.n	80035aa <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80033e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80033e4:	f7fd f8ce 	bl	8000584 <__aeabi_i2d>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	f7fc ff7e 	bl	80002ec <__adddf3>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4610      	mov	r0, r2
 80033f6:	4619      	mov	r1, r3
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80033fe:	f7fc ff75 	bl	80002ec <__adddf3>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	a373      	add	r3, pc, #460	; (adr r3, 80035d8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f7fd f922 	bl	8000658 <__aeabi_dmul>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4690      	mov	r8, r2
 800341a:	4699      	mov	r9, r3
 800341c:	6978      	ldr	r0, [r7, #20]
 800341e:	f7fd f8b1 	bl	8000584 <__aeabi_i2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	f7fc ff61 	bl	80002ec <__adddf3>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4640      	mov	r0, r8
 8003430:	4649      	mov	r1, r9
 8003432:	f7fd fa3b 	bl	80008ac <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	ec43 2b17 	vmov	d7, r2, r3
 800343e:	eeb0 0a47 	vmov.f32	s0, s14
 8003442:	eef0 0a67 	vmov.f32	s1, s15
 8003446:	f016 fa23 	bl	8019890 <sin>
 800344a:	ec53 2b10 	vmov	r2, r3, d0
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fbf9 	bl	8000c48 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800345a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800345c:	f7fd f8a4 	bl	80005a8 <__aeabi_f2d>
 8003460:	4680      	mov	r8, r0
 8003462:	4689      	mov	r9, r1
 8003464:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003466:	f7fd f89f 	bl	80005a8 <__aeabi_f2d>
 800346a:	4602      	mov	r2, r0
 800346c:	460b      	mov	r3, r1
 800346e:	f7fc ff3d 	bl	80002ec <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4692      	mov	sl, r2
 8003478:	469b      	mov	fp, r3
 800347a:	69f8      	ldr	r0, [r7, #28]
 800347c:	f7fd f894 	bl	80005a8 <__aeabi_f2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4650      	mov	r0, sl
 8003486:	4659      	mov	r1, fp
 8003488:	f7fd f8e6 	bl	8000658 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4640      	mov	r0, r8
 8003492:	4649      	mov	r1, r9
 8003494:	f7fc ff2a 	bl	80002ec <__adddf3>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	4b4e      	ldr	r3, [pc, #312]	; (80035e0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80034a6:	f7fc ff21 	bl	80002ec <__adddf3>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd fbc9 	bl	8000c48 <__aeabi_d2f>
 80034b6:	4603      	mov	r3, r0
 80034b8:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034c0:	4413      	add	r3, r2
 80034c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ce:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80034d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fd f861 	bl	80005a8 <__aeabi_f2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	f7fc feff 	bl	80002ec <__adddf3>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f7fd f856 	bl	80005a8 <__aeabi_f2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	f7fd f9d2 	bl	80008ac <__aeabi_ddiv>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	18d6      	adds	r6, r2, r3
 8003518:	f7fd fb96 	bl	8000c48 <__aeabi_d2f>
 800351c:	4603      	mov	r3, r0
 800351e:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003522:	f7fd f841 	bl	80005a8 <__aeabi_f2d>
 8003526:	4680      	mov	r8, r0
 8003528:	4689      	mov	r9, r1
 800352a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800352c:	f7fd f83c 	bl	80005a8 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	f7fc feda 	bl	80002ec <__adddf3>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4692      	mov	sl, r2
 800353e:	469b      	mov	fp, r3
 8003540:	69f8      	ldr	r0, [r7, #28]
 8003542:	f7fd f831 	bl	80005a8 <__aeabi_f2d>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4650      	mov	r0, sl
 800354c:	4659      	mov	r1, fp
 800354e:	f7fd f883 	bl	8000658 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4640      	mov	r0, r8
 8003558:	4649      	mov	r1, r9
 800355a:	f7fc fec5 	bl	80002e8 <__aeabi_dsub>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800356c:	f7fc febe 	bl	80002ec <__adddf3>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4614      	mov	r4, r2
 8003576:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800357a:	6938      	ldr	r0, [r7, #16]
 800357c:	f7fd f814 	bl	80005a8 <__aeabi_f2d>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	f7fd f990 	bl	80008ac <__aeabi_ddiv>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	18d6      	adds	r6, r2, r3
 800359c:	f7fd fb54 	bl	8000c48 <__aeabi_d2f>
 80035a0:	4603      	mov	r3, r0
 80035a2:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80035a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a6:	3301      	adds	r3, #1
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f6ff af17 	blt.w	80033e2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80035b4:	2300      	movs	r3, #0
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b8:	e0a9      	b.n	800370e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80035ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	441a      	add	r2, r3
 80035c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	440b      	add	r3, r1
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80035ce:	2300      	movs	r3, #0
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
 80035d2:	e094      	b.n	80036fe <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
 80035d4:	f3af 8000 	nop.w
 80035d8:	54442d18 	.word	0x54442d18
 80035dc:	400921fb 	.word	0x400921fb
 80035e0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ea:	4413      	add	r3, r2
 80035ec:	ed93 7a00 	vldr	s14, [r3]
 80035f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4413      	add	r3, r2
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003606:	4413      	add	r3, r2
 8003608:	edd3 6a00 	vldr	s13, [r3]
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	4413      	add	r3, r2
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003632:	4413      	add	r3, r2
 8003634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003638:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800363c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003642:	4413      	add	r3, r2
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc ffae 	bl	80005a8 <__aeabi_f2d>
 800364c:	4604      	mov	r4, r0
 800364e:	460d      	mov	r5, r1
 8003650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003656:	4413      	add	r3, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ffa4 	bl	80005a8 <__aeabi_f2d>
 8003660:	4680      	mov	r8, r0
 8003662:	4689      	mov	r9, r1
 8003664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	4413      	add	r3, r2
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff9a 	bl	80005a8 <__aeabi_f2d>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	f7fc fe38 	bl	80002ec <__adddf3>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4640      	mov	r0, r8
 8003682:	4649      	mov	r1, r9
 8003684:	f7fc fe30 	bl	80002e8 <__aeabi_dsub>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4690      	mov	r8, r2
 800368e:	4699      	mov	r9, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	6a3a      	ldr	r2, [r7, #32]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff84 	bl	80005a8 <__aeabi_f2d>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4640      	mov	r0, r8
 80036a6:	4649      	mov	r1, r9
 80036a8:	f7fc fe20 	bl	80002ec <__adddf3>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc ffd0 	bl	8000658 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	18d4      	adds	r4, r2, r3
 80036c8:	f7fd fabe 	bl	8000c48 <__aeabi_d2f>
 80036cc:	4603      	mov	r3, r0
 80036ce:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d6:	441a      	add	r2, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	6a39      	ldr	r1, [r7, #32]
 80036de:	440b      	add	r3, r1
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ea:	441a      	add	r2, r3
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	440b      	add	r3, r1
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	3301      	adds	r3, #1
 80036fc:	647b      	str	r3, [r7, #68]	; 0x44
 80036fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003702:	429a      	cmp	r2, r3
 8003704:	f6ff af6e 	blt.w	80035e4 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370a:	3301      	adds	r3, #1
 800370c:	64bb      	str	r3, [r7, #72]	; 0x48
 800370e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	f4ff af51 	bcc.w	80035ba <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 8003718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800371a:	f013 f8e7 	bl	80168ec <_Z7ei_freePv>
        ei_free(d1);
 800371e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003720:	f013 f8e4 	bl	80168ec <_Z7ei_freePv>
        ei_free(d2);
 8003724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003726:	f013 f8e1 	bl	80168ec <_Z7ei_freePv>
        ei_free(w0);
 800372a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800372c:	f013 f8de 	bl	80168ec <_Z7ei_freePv>
        ei_free(w1);
 8003730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003732:	f013 f8db 	bl	80168ec <_Z7ei_freePv>
        ei_free(w2);
 8003736:	6a38      	ldr	r0, [r7, #32]
 8003738:	f013 f8d8 	bl	80168ec <_Z7ei_freePv>
    }
 800373c:	bf00      	nop
 800373e:	3754      	adds	r7, #84	; 0x54
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop

08003748 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	ed87 0a02 	vstr	s0, [r7, #8]
 8003754:	edc7 0a01 	vstr	s1, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e01e      	b.n	80037a0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_lowpass(
 8003762:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	6979      	ldr	r1, [r7, #20]
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	6979      	ldr	r1, [r7, #20]
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 8003786:	441a      	add	r2, r3
                matrix->cols);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 800378c:	4621      	mov	r1, r4
 800378e:	edd7 0a01 	vldr	s1, [r7, #4]
 8003792:	ed97 0a02 	vldr	s0, [r7, #8]
 8003796:	f7ff fb97 	bl	8002ec8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3db      	bcc.n	8003762 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 80037aa:	2300      	movs	r3, #0
    }
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80037c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80037c8:	2300      	movs	r3, #0
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e01e      	b.n	800380c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_highpass(
 80037ce:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	6979      	ldr	r1, [r7, #20]
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 80037f2:	441a      	add	r2, r3
                matrix->cols);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 80037f8:	4621      	mov	r1, r4
 80037fa:	edd7 0a01 	vldr	s1, [r7, #4]
 80037fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8003802:	f7ff fd81 	bl	8003308 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3db      	bcc.n	80037ce <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003816:	2300      	movs	r3, #0
    }
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003820:	b480      	push	{r7}
 8003822:	b091      	sub	sp, #68	; 0x44
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	ed87 0a01 	vstr	s0, [r7, #4]
 800382e:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 800383a:	e0ba      	b.n	80039b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        if (output_matrix->cols != 1) {
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003844:	4b5e      	ldr	r3, [pc, #376]	; (80039c0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003846:	e0b4      	b.n	80039b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        uint16_t out_ix = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003864:	4b57      	ldr	r3, [pc, #348]	; (80039c4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a4>)
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800386e:	2300      	movs	r3, #0
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
 8003872:	e028      	b.n	80038c6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa6>
            if (in[ix] < min) {
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	4413      	add	r3, r2
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	dd05      	ble.n	800389a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x7a>
                min = in[ix];
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	4413      	add	r3, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	4413      	add	r3, r2
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d505      	bpl.n	80038c0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa0>
                max = in[ix];
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	3301      	adds	r3, #1
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	3b01      	subs	r3, #1
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3d1      	bcc.n	8003874 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x54>
            }
        }


        float prev = in[0];
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80038d6:	2301      	movs	r3, #1
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	e05f      	b.n	800399c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x17c>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	4413      	add	r3, r2
 80038e4:	edd3 7a00 	vldr	s15, [r3]
 80038e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80038ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f4:	d549      	bpl.n	800398a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	4413      	add	r3, r2
 80038fe:	ed93 7a00 	vldr	s14, [r3]
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	3301      	adds	r3, #1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	dd37      	ble.n	800398a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	4413      	add	r3, r2
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800392a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	4413      	add	r3, r2
 8003936:	edd3 6a00 	vldr	s13, [r3]
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	3301      	adds	r3, #1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	4413      	add	r3, r2
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800394c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003950:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003954:	ed97 7a05 	vldr	s14, [r7, #20]
 8003958:	edd7 7a01 	vldr	s15, [r7, #4]
 800395c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	dd11      	ble.n	800398a <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                    out[out_ix] = ix;
 8003966:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4413      	add	r3, r2
 800396e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003970:	ee07 2a90 	vmov	s15, r2
 8003974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003978:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 800397c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800397e:	3301      	adds	r3, #1
 8003980:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8003982:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	429a      	cmp	r2, r3
 8003988:	d00e      	beq.n	80039a8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
                }
            }

            prev = in[ix];
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	4413      	add	r3, r2
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	3301      	adds	r3, #1
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	3b01      	subs	r3, #1
 80039a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d39a      	bcc.n	80038dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xbc>
 80039a6:	e000      	b.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x18a>
                    if (out_ix == out_size) break;
 80039a8:	bf00      	nop
        }

        *peaks_found = out_ix;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80039ae:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80039b0:	2300      	movs	r3, #0
    }
 80039b2:	4618      	mov	r0, r3
 80039b4:	3744      	adds	r7, #68	; 0x44
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	fffffc14 	.word	0xfffffc14
 80039c4:	7f7fffff 	.word	0x7f7fffff

080039c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f006 fae8 	bl	8009fa8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ffeb 	bl	80039c8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	bfcc      	ite	gt
 8003a1e:	2301      	movgt	r3, #1
 8003a20:	2300      	movle	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
        });
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	ed2d 8b02 	vpush	{d8}
 8003a36:	b09c      	sub	sp, #112	; 0x70
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6178      	str	r0, [r7, #20]
 8003a3c:	6139      	str	r1, [r7, #16]
 8003a3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a42:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a52:	4c95      	ldr	r4, [pc, #596]	; (8003ca8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a54:	e121      	b.n	8003c9a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->cols != 2) {
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d001      	beq.n	8003a62 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a5e:	4c92      	ldr	r4, [pc, #584]	; (8003ca8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a60:	e11b      	b.n	8003c9a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->rows == 0) {
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003a6a:	2400      	movs	r4, #0
 8003a6c:	e115      	b.n	8003c9a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        int N = static_cast<int>(fft_length);
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 8003a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	f7fd fd1a 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003a98:	4c84      	ldr	r4, [pc, #528]	; (8003cac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003a9a:	e0f9      	b.n	8003c90 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003a9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003aa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003aa8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	da00      	bge.n	8003ab4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x84>
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	105b      	asrs	r3, r3, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f006 fa64 	bl	8009f84 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003abc:	ec53 2b10 	vmov	r2, r3, d0
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fd f8a0 	bl	8000c08 <__aeabi_d2uiz>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	eef0 0a48 	vmov.f32	s1, s16
 8003ad4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003ad8:	f7fe fb90 	bl	80021fc <_ZN2ei5numpy8linspaceEffmPf>
 8003adc:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb8>
            EIDSP_ERR(ret);
 8003ae4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003ae6:	e0d3      	b.n	8003c90 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4619      	mov	r1, r3
 8003af6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003afa:	2300      	movs	r3, #0
 8003afc:	2201      	movs	r2, #1
 8003afe:	f7fd fce2 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xdc>
 8003b08:	4c68      	ldr	r4, [pc, #416]	; (8003cac <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003b0a:	e0bc      	b.n	8003c86 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003b0c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b14:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff fe80 	bl	8003820 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003b20:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfc>
            EIDSP_ERR(ret);
 8003b28:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b2a:	e0ac      	b.n	8003c86 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ei_vector<freq_peak_t> peaks;
 8003b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff56 	bl	80039e2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003b3c:	e03c      	b.n	8003bb8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b52:	ee17 3a90 	vmov	r3, s15
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 8003b80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b84:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	dd05      	ble.n	8003b9e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16e>
                d.freq = 0.0f;
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 8003b9e:	f107 0220 	add.w	r2, r7, #32
 8003ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f006 fa3a 	bl	800a022 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003bb8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	dbbd      	blt.n	8003b3e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10e>
        sort(peaks.begin(), peaks.end(),
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f006 fa51 	bl	800a06e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8003bcc:	4604      	mov	r4, r0
 8003bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f006 fa5b 	bl	800a08e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4620      	mov	r0, r4
 8003be0:	f006 fa66 	bl	800a0b0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be8:	4618      	mov	r0, r3
 8003bea:	f006 fa73 	bl	800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003bee:	66b8      	str	r0, [r7, #104]	; 0x68
 8003bf0:	e010      	b.n	8003c14 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003bfe:	f107 0218 	add.w	r2, r7, #24
 8003c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f006 fa0a 	bl	800a022 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c10:	3301      	adds	r3, #1
 8003c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3e9      	bcc.n	8003bf2 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1c2>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	667b      	str	r3, [r7, #100]	; 0x64
 8003c22:	e025      	b.n	8003c70 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 fa62 	bl	800a0f4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	6802      	ldr	r2, [r0, #0]
 8003c44:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c4a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f006 fa51 	bl	800a0f4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	6842      	ldr	r2, [r0, #4]
 8003c68:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3d4      	bcc.n	8003c24 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f4>
        }

        return EIDSP_OK;
 8003c7a:	2400      	movs	r4, #0
    }
 8003c7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c80:	4618      	mov	r0, r3
 8003c82:	f006 f9b3 	bl	8009fec <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8003c86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fc46 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8003c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fc41 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3770      	adds	r7, #112	; 0x70
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	ecbd 8b02 	vpop	{d8}
 8003ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca8:	fffffc14 	.word	0xfffffc14
 8003cac:	fffffc16 	.word	0xfffffc16
 8003cb0:	00000000 	.word	0x00000000

08003cb4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b093      	sub	sp, #76	; 0x4c
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6178      	str	r0, [r7, #20]
 8003cbc:	6139      	str	r1, [r7, #16]
 8003cbe:	60fa      	str	r2, [r7, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d103      	bne.n	8003cd6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cd6:	4c7b      	ldr	r4, [pc, #492]	; (8003ec4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003cd8:	e0ef      	b.n	8003eba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003ce2:	4c78      	ldr	r4, [pc, #480]	; (8003ec4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003ce4:	e0e9      	b.n	8003eba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d105      	bne.n	8003d00 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d00:	4c70      	ldr	r4, [pc, #448]	; (8003ec4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d02:	e0da      	b.n	8003eba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d10:	4c6c      	ldr	r4, [pc, #432]	; (8003ec4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d12:	e0d2      	b.n	8003eba <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2101      	movs	r1, #1
 8003d22:	f7fd fbd0 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003d2c:	4c66      	ldr	r4, [pc, #408]	; (8003ec8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d2e:	e0bf      	b.n	8003eb0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	f107 0018 	add.w	r0, r7, #24
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	f7fd fbc2 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003d48:	4c5f      	ldr	r4, [pc, #380]	; (8003ec8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d4a:	e0ac      	b.n	8003ea6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d52:	e063      	b.n	8003e1c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            float t = freq_matrix->buffer[ix];
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d7a:	e043      	b.n	8003e04 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d98:	db2f      	blt.n	8003dfa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003da2:	3301      	adds	r3, #1
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	d51f      	bpl.n	8003dfa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
                    buckets.buffer[ex] += v;
 8003dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	ed93 7a00 	vldr	s14, [r3]
 8003dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dda:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003df4:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003df8:	e00b      	b.n	8003e12 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003dfa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e04:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3b4      	bcc.n	8003d7c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003e12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e16:	3301      	adds	r3, #1
 8003e18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d395      	bcc.n	8003d54 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e2e:	e032      	b.n	8003e96 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e2>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	d109      	bne.n	8003e5c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1a8>
                output_matrix->buffer[ex] = 0.0f;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e017      	b.n	8003e8c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1d8>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	edd3 6a00 	vldr	s13, [r3]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	ed93 7a00 	vldr	s14, [r3]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e88:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e90:	3301      	adds	r3, #1
 8003e92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d3c5      	bcc.n	8003e30 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17c>
            }
        }

        return EIDSP_OK;
 8003ea4:	2400      	movs	r4, #0
    }
 8003ea6:	f107 0318 	add.w	r3, r7, #24
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fb36 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8003eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fd fb31 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8003eba:	4623      	mov	r3, r4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	374c      	adds	r7, #76	; 0x4c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	fffffc14 	.word	0xfffffc14
 8003ec8:	fffffc16 	.word	0xfffffc16

08003ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	ed2d 8b02 	vpush	{d8}
 8003ed2:	b09b      	sub	sp, #108	; 0x6c
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6178      	str	r0, [r7, #20]
 8003ed8:	6139      	str	r1, [r7, #16]
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ee0:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003eea:	4c82      	ldr	r4, [pc, #520]	; (80040f4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003eec:	e192      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	0852      	lsrs	r2, r2, #1
 8003efe:	b292      	uxth	r2, r2
 8003f00:	3201      	adds	r2, #1
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d001      	beq.n	8003f0a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f06:	4c7b      	ldr	r4, [pc, #492]	; (80040f4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f08:	e184      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	0852      	lsrs	r2, r2, #1
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	3201      	adds	r2, #1
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d001      	beq.n	8003f26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f22:	4c74      	ldr	r4, [pc, #464]	; (80040f4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f24:	e176      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f2e:	4c72      	ldr	r4, [pc, #456]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f30:	e170      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f3a:	4c6f      	ldr	r4, [pc, #444]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f3c:	e16a      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f46:	4c6c      	ldr	r4, [pc, #432]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f48:	e164      	b.n	8004214 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003f5a:	f7fd fab4 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8003f64:	4c64      	ldr	r4, [pc, #400]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f66:	e150      	b.n	800420a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d904      	bls.n	8003f82 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f80:	e006      	b.n	8003f90 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8003f82:	88fa      	ldrh	r2, [r7, #6]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d201      	bcs.n	8003f90 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003f90:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003f94:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	f7fd fa93 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8003fa6:	4c54      	ldr	r4, [pc, #336]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003fa8:	e12a      	b.n	8004200 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fb0:	e00c      	b.n	8003fcc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x100>
            triage_segments.buffer[ix] = 1.0f;
 8003fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003fc0:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fc2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fcc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003fd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3ec      	bcc.n	8003fb2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe6>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8003fd8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003fdc:	ee07 3a90 	vmov	s15, r3
 8003fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ff4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003ffe:	e025      	b.n	800404c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x180>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8004000:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004016:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800401a:	ed97 6a02 	vldr	s12, [r7, #8]
 800401e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004022:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004026:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800402a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004042:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004046:	3301      	adds	r3, #1
 8004048:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	b29b      	uxth	r3, r3
 8004052:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004056:	429a      	cmp	r2, r3
 8004058:	d9d2      	bls.n	8004000 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x134>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800405a:	f107 001c 	add.w	r0, r7, #28
 800405e:	2300      	movs	r3, #0
 8004060:	2201      	movs	r2, #1
 8004062:	2101      	movs	r1, #1
 8004064:	f7fd fa2f 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 800406e:	4c22      	ldr	r4, [pc, #136]	; (80040f8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004070:	e0c1      	b.n	80041f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8004072:	f107 021c 	add.w	r2, r7, #28
 8004076:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7fd fd39 	bl	8001af4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004082:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 800408a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800408c:	e0b3      	b.n	80041f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 800408e:	f107 021c 	add.w	r2, r7, #28
 8004092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fc93 	bl	80019c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800409e:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80040a6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040a8:	e0a5      	b.n	80041f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f012 fc0a 	bl	80168d0 <_Z9ei_callocjj>
 80040bc:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80040be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	461a      	mov	r2, r3
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4613      	mov	r3, r2
 80040d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040d4:	f7fd ffa0 	bl	8002018 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80040d8:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x21e>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80040e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040e2:	f012 fc03 	bl	80168ec <_Z7ei_freePv>
            EIDSP_ERR(ret);
 80040e6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040e8:	e085      	b.n	80041f6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80040f0:	e076      	b.n	80041e0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x314>
 80040f2:	bf00      	nop
 80040f4:	fffffc14 	.word	0xfffffc14
 80040f8:	fffffc16 	.word	0xfffffc16
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 80040fc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004104:	4413      	add	r3, r2
 8004106:	ed93 7a00 	vldr	s14, [r3]
 800410a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004112:	4413      	add	r3, r2
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 800411c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004124:	4413      	add	r3, r2
 8004126:	ed93 7a01 	vldr	s14, [r3, #4]
 800412a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004132:	4413      	add	r3, r2
 8004134:	edd3 7a01 	vldr	s15, [r3, #4]
 8004138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413c:	eeb0 0a67 	vmov.f32	s0, s15
 8004140:	f7fd f84a 	bl	80011d8 <_ZSt3absf>
 8004144:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8004148:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004150:	4413      	add	r3, r2
 8004152:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004156:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800415a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004162:	4413      	add	r3, r2
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800416a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004172:	4413      	add	r3, r2
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004180:	4413      	add	r3, r2
 8004182:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	b29b      	uxth	r3, r3
 8004194:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8004198:	429a      	cmp	r2, r3
 800419a:	d00f      	beq.n	80041bc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2f0>
                fft_output[ix].r *= 2;
 800419c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a4:	4413      	add	r3, r2
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041b2:	4413      	add	r3, r2
 80041b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041b8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80041bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c4:	441a      	add	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80041d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041da:	3301      	adds	r3, #1
 80041dc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d986      	bls.n	80040fc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 80041ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80041f0:	f012 fb7c 	bl	80168ec <_Z7ei_freePv>

        return EIDSP_OK;
 80041f4:	2400      	movs	r4, #0
    }
 80041f6:	f107 031c 	add.w	r3, r7, #28
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd f98e 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8004200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd f989 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 800420a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd f984 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8004214:	4623      	mov	r3, r4
 8004216:	4618      	mov	r0, r3
 8004218:	3764      	adds	r7, #100	; 0x64
 800421a:	46bd      	mov	sp, r7
 800421c:	ecbd 8b02 	vpop	{d8}
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	bf00      	nop

08004224 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	f107 000c 	add.w	r0, r7, #12
 8004234:	2300      	movs	r3, #0
 8004236:	2201      	movs	r2, #1
 8004238:	f7fd f945 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8004242:	4c12      	ldr	r4, [pc, #72]	; (800428c <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8004244:	e018      	b.n	8004278 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8004246:	f107 030c 	add.w	r3, r7, #12
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fd fc51 	bl	8001af4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004252:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800425a:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800425c:	e00c      	b.n	8004278 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fd fbad 	bl	80019c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800426a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004272:	4c07      	ldr	r4, [pc, #28]	; (8004290 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8004274:	e000      	b.n	8004278 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8004276:	2400      	movs	r4, #0
    }
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd f94d 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8004282:	4623      	mov	r3, r4
 8004284:	4618      	mov	r0, r3
 8004286:	3724      	adds	r7, #36	; 0x24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	fffffc16 	.word	0xfffffc16
 8004290:	fffffc14 	.word	0xfffffc14

08004294 <_ZN2ei8spectral3dotEPKfS2_j>:
namespace spectral {

using fvec = ei_vector<float>;

inline float dot(const float *x, const float *y, size_t sz)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
    float sum = 0.0f;
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	e016      	b.n	80042da <_ZN2ei8spectral3dotEPKfS2_j+0x46>
        sum += x[i] * y[i];
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	ed93 7a00 	vldr	s14, [r3]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4413      	add	r3, r2
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80042cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042d0:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	3301      	adds	r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3e4      	bcc.n	80042ac <_ZN2ei8spectral3dotEPKfS2_j+0x18>
    }
    return sum;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	ee07 3a90 	vmov	s15, r3
}
 80042e8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:

inline void histo(const fvec &x, size_t nbins, fvec &h, bool normalize = false)
{
 80042f6:	b590      	push	{r4, r7, lr}
 80042f8:	b08f      	sub	sp, #60	; 0x3c
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	70fb      	strb	r3, [r7, #3]
    float min = *std::min_element(x.begin(), x.end());
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f005 fd15 	bl	8009d34 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800430a:	4604      	mov	r4, r0
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f005 fd21 	bl	8009d54 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8004312:	4603      	mov	r3, r0
 8004314:	4619      	mov	r1, r3
 8004316:	4620      	mov	r0, r4
 8004318:	f005 fefc 	bl	800a114 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 800431c:	4603      	mov	r3, r0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	4618      	mov	r0, r3
 8004326:	f005 fd4e 	bl	8009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800432a:	4603      	mov	r3, r0
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
    float max = *std::max_element(x.begin(), x.end());
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f005 fcff 	bl	8009d34 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8004336:	4604      	mov	r4, r0
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f005 fd0b 	bl	8009d54 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800433e:	4603      	mov	r3, r0
 8004340:	4619      	mov	r1, r3
 8004342:	4620      	mov	r0, r4
 8004344:	f005 fd6a 	bl	8009e1c <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 8004348:	4603      	mov	r3, r0
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	f107 0318 	add.w	r3, r7, #24
 8004350:	4618      	mov	r0, r3
 8004352:	f005 fd38 	bl	8009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8004356:	4603      	mov	r3, r0
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
    float step = (max - min) / nbins;
 800435c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004364:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004376:	edc7 7a08 	vstr	s15, [r7, #32]
    h.resize(nbins);
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f005 feda 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	e02a      	b.n	80043de <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe8>
        size_t bin = (x[i] - min) / step;
 8004388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f005 fd87 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004390:	4603      	mov	r3, r0
 8004392:	ed93 7a00 	vldr	s14, [r3]
 8004396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800439a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800439e:	ed97 7a08 	vldr	s14, [r7, #32]
 80043a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 3a90 	vmov	r3, s15
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
        if (bin >= nbins)
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xc8>
            bin = nbins - 1;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
        h[bin]++;
 80043be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f005 fc92 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043c6:	4603      	mov	r3, r0
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043d4:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < x.size(); i++) {
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	3301      	adds	r3, #1
 80043dc:	637b      	str	r3, [r7, #52]	; 0x34
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f005 fadb 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bf34      	ite	cc
 80043ec:	2301      	movcc	r3, #1
 80043ee:	2300      	movcs	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1c8      	bne.n	8004388 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x92>
    }
    if (normalize) {
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d024      	beq.n	8004446 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x150>
        float s = numpy::sum(h.data(), h.size());
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f005 fadc 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8004402:	4604      	mov	r4, r0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f005 fac8 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800440a:	4603      	mov	r3, r0
 800440c:	4619      	mov	r1, r3
 800440e:	4620      	mov	r0, r4
 8004410:	f7fd f926 	bl	8001660 <_ZN2ei5numpy3sumEPfj>
 8004414:	ed87 0a07 	vstr	s0, [r7, #28]
        for (size_t i = 0; i < nbins; i++) {
 8004418:	2300      	movs	r3, #0
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	e00f      	b.n	800443e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x148>
            h[i] /= s;
 800441e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f005 fc62 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004426:	4603      	mov	r3, r0
 8004428:	edd3 6a00 	vldr	s13, [r3]
 800442c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004434:	edc3 7a00 	vstr	s15, [r3]
        for (size_t i = 0; i < nbins; i++) {
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	3301      	adds	r3, #1
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3eb      	bcc.n	800441e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x128>
        }
    }
}
 8004446:	bf00      	nop
 8004448:	373c      	adds	r7, #60	; 0x3c
 800444a:	46bd      	mov	sp, r7
 800444c:	bd90      	pop	{r4, r7, pc}
	...

08004450 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
            h[i] = wav[0][n - i - 1];
            g[i] = wav[1][n - i - 1];
        }
    }

    static void find_filter(const char *wav, fvec &h, fvec &g)
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b0ab      	sub	sp, #172	; 0xac
 8004454:	af26      	add	r7, sp, #152	; 0x98
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
    {
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 800445c:	49ae      	ldr	r1, [pc, #696]	; (8004718 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7fb fed6 	bl	8000210 <strcmp>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d113      	bne.n	8004492 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
 800446a:	4eac      	ldr	r6, [pc, #688]	; (800471c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	9309      	str	r3, [sp, #36]	; 0x24
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	9308      	str	r3, [sp, #32]
 8004474:	466d      	mov	r5, sp
 8004476:	f106 0410 	add.w	r4, r6, #16
 800447a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004482:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004486:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800448a:	f005 feaa 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
        else assert(0); // wavelet not in the list
    }
 800448e:	f000 bd9a 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 8004492:	49a3      	ldr	r1, [pc, #652]	; (8004720 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fb febb 	bl	8000210 <strcmp>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d117      	bne.n	80044d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80>
 80044a0:	4ea0      	ldr	r6, [pc, #640]	; (8004724 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	9311      	str	r3, [sp, #68]	; 0x44
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	9310      	str	r3, [sp, #64]	; 0x40
 80044aa:	466d      	mov	r5, sp
 80044ac:	f106 0410 	add.w	r4, r6, #16
 80044b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044c8:	f005 fef8 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80044cc:	f000 bd7b 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 80044d0:	4995      	ldr	r1, [pc, #596]	; (8004728 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7fb fe9c 	bl	8000210 <strcmp>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d113      	bne.n	8004506 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6>
 80044de:	4e93      	ldr	r6, [pc, #588]	; (800472c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	9309      	str	r3, [sp, #36]	; 0x24
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	9308      	str	r3, [sp, #32]
 80044e8:	466d      	mov	r5, sp
 80044ea:	f106 0410 	add.w	r4, r6, #16
 80044ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044fe:	f005 fe70 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004502:	f000 bd60 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 8004506:	498a      	ldr	r1, [pc, #552]	; (8004730 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fb fe81 	bl	8000210 <strcmp>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d117      	bne.n	8004544 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf4>
 8004514:	4e87      	ldr	r6, [pc, #540]	; (8004734 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	9311      	str	r3, [sp, #68]	; 0x44
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	9310      	str	r3, [sp, #64]	; 0x40
 800451e:	466d      	mov	r5, sp
 8004520:	f106 0410 	add.w	r4, r6, #16
 8004524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800452a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800452c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800452e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004530:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004534:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004538:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800453c:	f005 febe 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004540:	f000 bd41 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 8004544:	497c      	ldr	r1, [pc, #496]	; (8004738 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7fb fe62 	bl	8000210 <strcmp>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d111      	bne.n	8004576 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 8004552:	4c7a      	ldr	r4, [pc, #488]	; (800473c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	9319      	str	r3, [sp, #100]	; 0x64
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	9318      	str	r3, [sp, #96]	; 0x60
 800455c:	4668      	mov	r0, sp
 800455e:	f104 0310 	add.w	r3, r4, #16
 8004562:	2260      	movs	r2, #96	; 0x60
 8004564:	4619      	mov	r1, r3
 8004566:	f018 ff4e 	bl	801d406 <memcpy>
 800456a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800456e:	f005 ff12 	bl	800a396 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004572:	f000 bd28 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 8004576:	4972      	ldr	r1, [pc, #456]	; (8004740 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7fb fe49 	bl	8000210 <strcmp>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d111      	bne.n	80045a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
 8004584:	4c6f      	ldr	r4, [pc, #444]	; (8004744 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	9321      	str	r3, [sp, #132]	; 0x84
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	9320      	str	r3, [sp, #128]	; 0x80
 800458e:	4668      	mov	r0, sp
 8004590:	f104 0310 	add.w	r3, r4, #16
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	4619      	mov	r1, r3
 8004598:	f018 ff35 	bl	801d406 <memcpy>
 800459c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045a0:	f005 ff6a 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045a4:	f000 bd0f 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 80045a8:	4967      	ldr	r1, [pc, #412]	; (8004748 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7fb fe30 	bl	8000210 <strcmp>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d110      	bne.n	80045d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x188>
 80045b6:	4c65      	ldr	r4, [pc, #404]	; (800474c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	466d      	mov	r5, sp
 80045c2:	f104 0310 	add.w	r3, r4, #16
 80045c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80045cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045d0:	f005 ffc0 	bl	800a554 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045d4:	f000 bcf7 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 80045d8:	495d      	ldr	r1, [pc, #372]	; (8004750 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7fb fe18 	bl	8000210 <strcmp>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d115      	bne.n	8004612 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 80045e6:	4e5b      	ldr	r6, [pc, #364]	; (8004754 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	930d      	str	r3, [sp, #52]	; 0x34
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	930c      	str	r3, [sp, #48]	; 0x30
 80045f0:	466d      	mov	r5, sp
 80045f2:	f106 0410 	add.w	r4, r6, #16
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004602:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004606:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800460a:	f006 f80d 	bl	800a628 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800460e:	f000 bcda 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 8004612:	4951      	ldr	r1, [pc, #324]	; (8004758 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7fb fdfb 	bl	8000210 <strcmp>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1f4>
 8004620:	4c4e      	ldr	r4, [pc, #312]	; (800475c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	9315      	str	r3, [sp, #84]	; 0x54
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	9314      	str	r3, [sp, #80]	; 0x50
 800462a:	4668      	mov	r0, sp
 800462c:	f104 0310 	add.w	r3, r4, #16
 8004630:	2250      	movs	r2, #80	; 0x50
 8004632:	4619      	mov	r1, r3
 8004634:	f018 fee7 	bl	801d406 <memcpy>
 8004638:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800463c:	f006 f861 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004640:	f000 bcc1 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 8004644:	4946      	ldr	r1, [pc, #280]	; (8004760 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7fb fde2 	bl	8000210 <strcmp>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d111      	bne.n	8004676 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x226>
 8004652:	4c44      	ldr	r4, [pc, #272]	; (8004764 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	931d      	str	r3, [sp, #116]	; 0x74
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	931c      	str	r3, [sp, #112]	; 0x70
 800465c:	4668      	mov	r0, sp
 800465e:	f104 0310 	add.w	r3, r4, #16
 8004662:	2270      	movs	r2, #112	; 0x70
 8004664:	4619      	mov	r1, r3
 8004666:	f018 fece 	bl	801d406 <memcpy>
 800466a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800466e:	f006 f8b2 	bl	800a7d6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004672:	f000 bca8 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 8004676:	493c      	ldr	r1, [pc, #240]	; (8004768 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7fb fdc9 	bl	8000210 <strcmp>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d111      	bne.n	80046a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x258>
 8004684:	4c39      	ldr	r4, [pc, #228]	; (800476c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	9325      	str	r3, [sp, #148]	; 0x94
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	9324      	str	r3, [sp, #144]	; 0x90
 800468e:	4668      	mov	r0, sp
 8004690:	f104 0310 	add.w	r3, r4, #16
 8004694:	2290      	movs	r2, #144	; 0x90
 8004696:	4619      	mov	r1, r3
 8004698:	f018 feb5 	bl	801d406 <memcpy>
 800469c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046a0:	f006 f90a 	bl	800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046a4:	f000 bc8f 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 80046a8:	4931      	ldr	r1, [pc, #196]	; (8004770 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7fb fdb0 	bl	8000210 <strcmp>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d117      	bne.n	80046e6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x296>
 80046b6:	4e2f      	ldr	r6, [pc, #188]	; (8004774 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	9311      	str	r3, [sp, #68]	; 0x44
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	9310      	str	r3, [sp, #64]	; 0x40
 80046c0:	466d      	mov	r5, sp
 80046c2:	f106 0410 	add.w	r4, r6, #16
 80046c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80046da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80046de:	f005 fded 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046e2:	f000 bc70 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 80046e6:	4924      	ldr	r1, [pc, #144]	; (8004778 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7fb fd91 	bl	8000210 <strcmp>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d145      	bne.n	8004780 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>
 80046f4:	4c21      	ldr	r4, [pc, #132]	; (800477c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	9315      	str	r3, [sp, #84]	; 0x54
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	9314      	str	r3, [sp, #80]	; 0x50
 80046fe:	4668      	mov	r0, sp
 8004700:	f104 0310 	add.w	r3, r4, #16
 8004704:	2250      	movs	r2, #80	; 0x50
 8004706:	4619      	mov	r1, r3
 8004708:	f018 fe7d 	bl	801d406 <memcpy>
 800470c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004710:	f005 fff7 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004714:	f000 bc57 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004718:	0801f228 	.word	0x0801f228
 800471c:	08021b44 	.word	0x08021b44
 8004720:	0801f230 	.word	0x0801f230
 8004724:	08021b74 	.word	0x08021b74
 8004728:	0801f238 	.word	0x0801f238
 800472c:	08021bc4 	.word	0x08021bc4
 8004730:	0801f240 	.word	0x0801f240
 8004734:	08021bf4 	.word	0x08021bf4
 8004738:	0801f248 	.word	0x0801f248
 800473c:	08021c44 	.word	0x08021c44
 8004740:	0801f250 	.word	0x0801f250
 8004744:	08021cb4 	.word	0x08021cb4
 8004748:	0801f258 	.word	0x0801f258
 800474c:	08021d44 	.word	0x08021d44
 8004750:	0801f260 	.word	0x0801f260
 8004754:	08021d64 	.word	0x08021d64
 8004758:	0801f268 	.word	0x0801f268
 800475c:	08021da4 	.word	0x08021da4
 8004760:	0801f270 	.word	0x0801f270
 8004764:	08021e04 	.word	0x08021e04
 8004768:	0801f278 	.word	0x0801f278
 800476c:	08021e84 	.word	0x08021e84
 8004770:	0801f280 	.word	0x0801f280
 8004774:	08021f24 	.word	0x08021f24
 8004778:	0801f288 	.word	0x0801f288
 800477c:	08021f74 	.word	0x08021f74
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 8004780:	49b1      	ldr	r1, [pc, #708]	; (8004a48 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5f8>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7fb fd44 	bl	8000210 <strcmp>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d111      	bne.n	80047b2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x362>
 800478e:	4caf      	ldr	r4, [pc, #700]	; (8004a4c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5fc>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	9321      	str	r3, [sp, #132]	; 0x84
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	9320      	str	r3, [sp, #128]	; 0x80
 8004798:	4668      	mov	r0, sp
 800479a:	f104 0310 	add.w	r3, r4, #16
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	4619      	mov	r1, r3
 80047a2:	f018 fe30 	bl	801d406 <memcpy>
 80047a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047aa:	f005 fe65 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80047ae:	f000 bc0a 	b.w	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 80047b2:	49a7      	ldr	r1, [pc, #668]	; (8004a50 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x600>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7fb fd2b 	bl	8000210 <strcmp>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d112      	bne.n	80047e6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 80047c0:	4ea4      	ldr	r6, [pc, #656]	; (8004a54 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x604>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	9308      	str	r3, [sp, #32]
 80047ca:	466d      	mov	r5, sp
 80047cc:	f106 0410 	add.w	r4, r6, #16
 80047d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80047dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80047e0:	f005 fcff 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80047e4:	e3ef      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 80047e6:	499c      	ldr	r1, [pc, #624]	; (8004a58 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x608>)
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7fb fd11 	bl	8000210 <strcmp>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d110      	bne.n	8004816 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c6>
 80047f4:	4c99      	ldr	r4, [pc, #612]	; (8004a5c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x60c>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	9315      	str	r3, [sp, #84]	; 0x54
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	9314      	str	r3, [sp, #80]	; 0x50
 80047fe:	4668      	mov	r0, sp
 8004800:	f104 0310 	add.w	r3, r4, #16
 8004804:	2250      	movs	r2, #80	; 0x50
 8004806:	4619      	mov	r1, r3
 8004808:	f018 fdfd 	bl	801d406 <memcpy>
 800480c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004810:	f005 ff77 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004814:	e3d7      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 8004816:	4992      	ldr	r1, [pc, #584]	; (8004a60 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x610>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fb fcf9 	bl	8000210 <strcmp>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f6>
 8004824:	4c8f      	ldr	r4, [pc, #572]	; (8004a64 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x614>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9321      	str	r3, [sp, #132]	; 0x84
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	9320      	str	r3, [sp, #128]	; 0x80
 800482e:	4668      	mov	r0, sp
 8004830:	f104 0310 	add.w	r3, r4, #16
 8004834:	2280      	movs	r2, #128	; 0x80
 8004836:	4619      	mov	r1, r3
 8004838:	f018 fde5 	bl	801d406 <memcpy>
 800483c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004840:	f005 fe1a 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004844:	e3bf      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 8004846:	4988      	ldr	r1, [pc, #544]	; (8004a68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x618>)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fb fce1 	bl	8000210 <strcmp>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10f      	bne.n	8004874 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x424>
 8004854:	4c85      	ldr	r4, [pc, #532]	; (8004a6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x61c>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	9305      	str	r3, [sp, #20]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	466d      	mov	r5, sp
 8004860:	f104 0310 	add.w	r3, r4, #16
 8004864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004866:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800486a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800486e:	f005 fe71 	bl	800a554 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004872:	e3a8      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 8004874:	497e      	ldr	r1, [pc, #504]	; (8004a70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x620>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7fb fcca 	bl	8000210 <strcmp>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d112      	bne.n	80048a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x458>
 8004882:	4e7c      	ldr	r6, [pc, #496]	; (8004a74 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x624>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	9309      	str	r3, [sp, #36]	; 0x24
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	9308      	str	r3, [sp, #32]
 800488c:	466d      	mov	r5, sp
 800488e:	f106 0410 	add.w	r4, r6, #16
 8004892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004896:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800489a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800489e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048a2:	f005 fc9e 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048a6:	e38e      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 80048a8:	4973      	ldr	r1, [pc, #460]	; (8004a78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x628>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7fb fcb0 	bl	8000210 <strcmp>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d114      	bne.n	80048e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x490>
 80048b6:	4e71      	ldr	r6, [pc, #452]	; (8004a7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x62c>)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	930d      	str	r3, [sp, #52]	; 0x34
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	930c      	str	r3, [sp, #48]	; 0x30
 80048c0:	466d      	mov	r5, sp
 80048c2:	f106 0410 	add.w	r4, r6, #16
 80048c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048da:	f005 fea5 	bl	800a628 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048de:	e372      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 80048e0:	4967      	ldr	r1, [pc, #412]	; (8004a80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x630>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7fb fc94 	bl	8000210 <strcmp>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>
 80048ee:	4e65      	ldr	r6, [pc, #404]	; (8004a84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x634>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	9311      	str	r3, [sp, #68]	; 0x44
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	9310      	str	r3, [sp, #64]	; 0x40
 80048f8:	466d      	mov	r5, sp
 80048fa:	f106 0410 	add.w	r4, r6, #16
 80048fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800490e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004912:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004916:	f005 fcd1 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800491a:	e354      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 800491c:	495a      	ldr	r1, [pc, #360]	; (8004a88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x638>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7fb fc76 	bl	8000210 <strcmp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>
 800492a:	4c58      	ldr	r4, [pc, #352]	; (8004a8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x63c>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	9315      	str	r3, [sp, #84]	; 0x54
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	9314      	str	r3, [sp, #80]	; 0x50
 8004934:	4668      	mov	r0, sp
 8004936:	f104 0310 	add.w	r3, r4, #16
 800493a:	2250      	movs	r2, #80	; 0x50
 800493c:	4619      	mov	r1, r3
 800493e:	f018 fd62 	bl	801d406 <memcpy>
 8004942:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004946:	f005 fedc 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800494a:	e33c      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 800494c:	4950      	ldr	r1, [pc, #320]	; (8004a90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x640>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7fb fc5e 	bl	8000210 <strcmp>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d110      	bne.n	800497c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>
 800495a:	4c4e      	ldr	r4, [pc, #312]	; (8004a94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x644>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	9319      	str	r3, [sp, #100]	; 0x64
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	9318      	str	r3, [sp, #96]	; 0x60
 8004964:	4668      	mov	r0, sp
 8004966:	f104 0310 	add.w	r3, r4, #16
 800496a:	2260      	movs	r2, #96	; 0x60
 800496c:	4619      	mov	r1, r3
 800496e:	f018 fd4a 	bl	801d406 <memcpy>
 8004972:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004976:	f005 fd0e 	bl	800a396 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800497a:	e324      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 800497c:	4946      	ldr	r1, [pc, #280]	; (8004a98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x648>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7fb fc46 	bl	8000210 <strcmp>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d110      	bne.n	80049ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>
 800498a:	4c44      	ldr	r4, [pc, #272]	; (8004a9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x64c>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	931d      	str	r3, [sp, #116]	; 0x74
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	931c      	str	r3, [sp, #112]	; 0x70
 8004994:	4668      	mov	r0, sp
 8004996:	f104 0310 	add.w	r3, r4, #16
 800499a:	2270      	movs	r2, #112	; 0x70
 800499c:	4619      	mov	r1, r3
 800499e:	f018 fd32 	bl	801d406 <memcpy>
 80049a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049a6:	f005 ff16 	bl	800a7d6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049aa:	e30c      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 80049ac:	493c      	ldr	r1, [pc, #240]	; (8004aa0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x650>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7fb fc2e 	bl	8000210 <strcmp>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d110      	bne.n	80049dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x58c>
 80049ba:	4c3a      	ldr	r4, [pc, #232]	; (8004aa4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x654>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	9321      	str	r3, [sp, #132]	; 0x84
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	9320      	str	r3, [sp, #128]	; 0x80
 80049c4:	4668      	mov	r0, sp
 80049c6:	f104 0310 	add.w	r3, r4, #16
 80049ca:	2280      	movs	r2, #128	; 0x80
 80049cc:	4619      	mov	r1, r3
 80049ce:	f018 fd1a 	bl	801d406 <memcpy>
 80049d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049d6:	f005 fd4f 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049da:	e2f4      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 80049dc:	4932      	ldr	r1, [pc, #200]	; (8004aa8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x658>)
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7fb fc16 	bl	8000210 <strcmp>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d110      	bne.n	8004a0c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5bc>
 80049ea:	4c30      	ldr	r4, [pc, #192]	; (8004aac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x65c>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9325      	str	r3, [sp, #148]	; 0x94
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	9324      	str	r3, [sp, #144]	; 0x90
 80049f4:	4668      	mov	r0, sp
 80049f6:	f104 0310 	add.w	r3, r4, #16
 80049fa:	2290      	movs	r2, #144	; 0x90
 80049fc:	4619      	mov	r1, r3
 80049fe:	f018 fd02 	bl	801d406 <memcpy>
 8004a02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a06:	f005 ff57 	bl	800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a0a:	e2dc      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 8004a0c:	4928      	ldr	r1, [pc, #160]	; (8004ab0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x660>)
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7fb fbfe 	bl	8000210 <strcmp>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d14e      	bne.n	8004ab8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x668>
 8004a1a:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x664>)
 8004a1c:	ed93 6a00 	vldr	s12, [r3]
 8004a20:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a24:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a28:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	eeb0 0a46 	vmov.f32	s0, s12
 8004a34:	eef0 0a66 	vmov.f32	s1, s13
 8004a38:	eeb0 1a47 	vmov.f32	s2, s14
 8004a3c:	eef0 1a67 	vmov.f32	s3, s15
 8004a40:	f005 ffa8 	bl	800a994 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a44:	e2bf      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004a46:	bf00      	nop
 8004a48:	0801f290 	.word	0x0801f290
 8004a4c:	08021fd4 	.word	0x08021fd4
 8004a50:	0801f298 	.word	0x0801f298
 8004a54:	08022064 	.word	0x08022064
 8004a58:	0801f2a0 	.word	0x0801f2a0
 8004a5c:	08022094 	.word	0x08022094
 8004a60:	0801f2a8 	.word	0x0801f2a8
 8004a64:	080220f4 	.word	0x080220f4
 8004a68:	0801f2b0 	.word	0x0801f2b0
 8004a6c:	08022184 	.word	0x08022184
 8004a70:	0801f2b4 	.word	0x0801f2b4
 8004a74:	080221a4 	.word	0x080221a4
 8004a78:	0801f2b8 	.word	0x0801f2b8
 8004a7c:	080221d4 	.word	0x080221d4
 8004a80:	0801f2bc 	.word	0x0801f2bc
 8004a84:	08022214 	.word	0x08022214
 8004a88:	0801f2c0 	.word	0x0801f2c0
 8004a8c:	08022264 	.word	0x08022264
 8004a90:	0801f2c4 	.word	0x0801f2c4
 8004a94:	080222c4 	.word	0x080222c4
 8004a98:	0801f2c8 	.word	0x0801f2c8
 8004a9c:	08022334 	.word	0x08022334
 8004aa0:	0801f2cc 	.word	0x0801f2cc
 8004aa4:	080223b4 	.word	0x080223b4
 8004aa8:	0801f2d0 	.word	0x0801f2d0
 8004aac:	08022444 	.word	0x08022444
 8004ab0:	0801f2d8 	.word	0x0801f2d8
 8004ab4:	080224e4 	.word	0x080224e4
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 8004ab8:	49a8      	ldr	r1, [pc, #672]	; (8004d5c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x90c>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7fb fba8 	bl	8000210 <strcmp>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d112      	bne.n	8004aec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x69c>
 8004ac6:	4ea6      	ldr	r6, [pc, #664]	; (8004d60 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x910>)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9309      	str	r3, [sp, #36]	; 0x24
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	9308      	str	r3, [sp, #32]
 8004ad0:	466d      	mov	r5, sp
 8004ad2:	f106 0410 	add.w	r4, r6, #16
 8004ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ada:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ade:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ae2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ae6:	f005 fb7c 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004aea:	e26c      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 8004aec:	499d      	ldr	r1, [pc, #628]	; (8004d64 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x914>)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7fb fb8e 	bl	8000210 <strcmp>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6d8>
 8004afa:	4e9b      	ldr	r6, [pc, #620]	; (8004d68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x918>)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	9311      	str	r3, [sp, #68]	; 0x44
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	9310      	str	r3, [sp, #64]	; 0x40
 8004b04:	466d      	mov	r5, sp
 8004b06:	f106 0410 	add.w	r4, r6, #16
 8004b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b1a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b1e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b22:	f005 fbcb 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b26:	e24e      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 8004b28:	4990      	ldr	r1, [pc, #576]	; (8004d6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x91c>)
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7fb fb70 	bl	8000210 <strcmp>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d112      	bne.n	8004b5c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x70c>
 8004b36:	4e8e      	ldr	r6, [pc, #568]	; (8004d70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x920>)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	9308      	str	r3, [sp, #32]
 8004b40:	466d      	mov	r5, sp
 8004b42:	f106 0410 	add.w	r4, r6, #16
 8004b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b4e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b56:	f005 fb44 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b5a:	e234      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 8004b5c:	4985      	ldr	r1, [pc, #532]	; (8004d74 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x924>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fb fb56 	bl	8000210 <strcmp>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d116      	bne.n	8004b98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x748>
 8004b6a:	4e83      	ldr	r6, [pc, #524]	; (8004d78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x928>)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	9310      	str	r3, [sp, #64]	; 0x40
 8004b74:	466d      	mov	r5, sp
 8004b76:	f106 0410 	add.w	r4, r6, #16
 8004b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b92:	f005 fb93 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b96:	e216      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 8004b98:	4978      	ldr	r1, [pc, #480]	; (8004d7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92c>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7fb fb38 	bl	8000210 <strcmp>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d110      	bne.n	8004bc8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x778>
 8004ba6:	4c76      	ldr	r4, [pc, #472]	; (8004d80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x930>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	9319      	str	r3, [sp, #100]	; 0x64
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	9318      	str	r3, [sp, #96]	; 0x60
 8004bb0:	4668      	mov	r0, sp
 8004bb2:	f104 0310 	add.w	r3, r4, #16
 8004bb6:	2260      	movs	r2, #96	; 0x60
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f018 fc24 	bl	801d406 <memcpy>
 8004bbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bc2:	f005 fbe8 	bl	800a396 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bc6:	e1fe      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 8004bc8:	496e      	ldr	r1, [pc, #440]	; (8004d84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x934>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7fb fb20 	bl	8000210 <strcmp>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d110      	bne.n	8004bf8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7a8>
 8004bd6:	4c6c      	ldr	r4, [pc, #432]	; (8004d88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x938>)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	9321      	str	r3, [sp, #132]	; 0x84
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	9320      	str	r3, [sp, #128]	; 0x80
 8004be0:	4668      	mov	r0, sp
 8004be2:	f104 0310 	add.w	r3, r4, #16
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	4619      	mov	r1, r3
 8004bea:	f018 fc0c 	bl	801d406 <memcpy>
 8004bee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bf2:	f005 fc41 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bf6:	e1e6      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 8004bf8:	4964      	ldr	r1, [pc, #400]	; (8004d8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x93c>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7fb fb08 	bl	8000210 <strcmp>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7d6>
 8004c06:	4c62      	ldr	r4, [pc, #392]	; (8004d90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x940>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	9305      	str	r3, [sp, #20]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	466d      	mov	r5, sp
 8004c12:	f104 0310 	add.w	r3, r4, #16
 8004c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c20:	f005 fc98 	bl	800a554 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c24:	e1cf      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 8004c26:	495b      	ldr	r1, [pc, #364]	; (8004d94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x944>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7fb faf1 	bl	8000210 <strcmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d114      	bne.n	8004c5e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80e>
 8004c34:	4e58      	ldr	r6, [pc, #352]	; (8004d98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x948>)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	930d      	str	r3, [sp, #52]	; 0x34
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8004c3e:	466d      	mov	r5, sp
 8004c40:	f106 0410 	add.w	r4, r6, #16
 8004c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c54:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c58:	f005 fce6 	bl	800a628 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c5c:	e1b3      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 8004c5e:	494f      	ldr	r1, [pc, #316]	; (8004d9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x94c>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7fb fad5 	bl	8000210 <strcmp>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d110      	bne.n	8004c8e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x83e>
 8004c6c:	4c4c      	ldr	r4, [pc, #304]	; (8004da0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x950>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	9315      	str	r3, [sp, #84]	; 0x54
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	9314      	str	r3, [sp, #80]	; 0x50
 8004c76:	4668      	mov	r0, sp
 8004c78:	f104 0310 	add.w	r3, r4, #16
 8004c7c:	2250      	movs	r2, #80	; 0x50
 8004c7e:	4619      	mov	r1, r3
 8004c80:	f018 fbc1 	bl	801d406 <memcpy>
 8004c84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c88:	f005 fd3b 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c8c:	e19b      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 8004c8e:	4945      	ldr	r1, [pc, #276]	; (8004da4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x954>)
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7fb fabd 	bl	8000210 <strcmp>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d110      	bne.n	8004cbe <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86e>
 8004c9c:	4c42      	ldr	r4, [pc, #264]	; (8004da8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x958>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	931d      	str	r3, [sp, #116]	; 0x74
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	931c      	str	r3, [sp, #112]	; 0x70
 8004ca6:	4668      	mov	r0, sp
 8004ca8:	f104 0310 	add.w	r3, r4, #16
 8004cac:	2270      	movs	r2, #112	; 0x70
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f018 fba9 	bl	801d406 <memcpy>
 8004cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cb8:	f005 fd8d 	bl	800a7d6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cbc:	e183      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 8004cbe:	493b      	ldr	r1, [pc, #236]	; (8004dac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x95c>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7fb faa5 	bl	8000210 <strcmp>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d110      	bne.n	8004cee <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x89e>
 8004ccc:	4c38      	ldr	r4, [pc, #224]	; (8004db0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x960>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	9325      	str	r3, [sp, #148]	; 0x94
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	9324      	str	r3, [sp, #144]	; 0x90
 8004cd6:	4668      	mov	r0, sp
 8004cd8:	f104 0310 	add.w	r3, r4, #16
 8004cdc:	2290      	movs	r2, #144	; 0x90
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f018 fb91 	bl	801d406 <memcpy>
 8004ce4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ce8:	f005 fde6 	bl	800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cec:	e16b      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 8004cee:	4931      	ldr	r1, [pc, #196]	; (8004db4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x964>)
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7fb fa8d 	bl	8000210 <strcmp>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x8da>
 8004cfc:	4e2e      	ldr	r6, [pc, #184]	; (8004db8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x968>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	9311      	str	r3, [sp, #68]	; 0x44
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	9310      	str	r3, [sp, #64]	; 0x40
 8004d06:	466d      	mov	r5, sp
 8004d08:	f106 0410 	add.w	r4, r6, #16
 8004d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d24:	f005 faca 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d28:	e14d      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 8004d2a:	4924      	ldr	r1, [pc, #144]	; (8004dbc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x96c>)
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7fb fa6f 	bl	8000210 <strcmp>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d145      	bne.n	8004dc4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x974>
 8004d38:	4c21      	ldr	r4, [pc, #132]	; (8004dc0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x970>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	9314      	str	r3, [sp, #80]	; 0x50
 8004d42:	4668      	mov	r0, sp
 8004d44:	f104 0310 	add.w	r3, r4, #16
 8004d48:	2250      	movs	r2, #80	; 0x50
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f018 fb5b 	bl	801d406 <memcpy>
 8004d50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d54:	f005 fcd5 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d58:	e135      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004d5a:	bf00      	nop
 8004d5c:	0801f2e0 	.word	0x0801f2e0
 8004d60:	080224f4 	.word	0x080224f4
 8004d64:	0801f2e8 	.word	0x0801f2e8
 8004d68:	08022524 	.word	0x08022524
 8004d6c:	0801f2f0 	.word	0x0801f2f0
 8004d70:	08022574 	.word	0x08022574
 8004d74:	0801f2f8 	.word	0x0801f2f8
 8004d78:	080225a4 	.word	0x080225a4
 8004d7c:	0801f300 	.word	0x0801f300
 8004d80:	080225f4 	.word	0x080225f4
 8004d84:	0801f308 	.word	0x0801f308
 8004d88:	08022664 	.word	0x08022664
 8004d8c:	0801f310 	.word	0x0801f310
 8004d90:	080226f4 	.word	0x080226f4
 8004d94:	0801f318 	.word	0x0801f318
 8004d98:	08022714 	.word	0x08022714
 8004d9c:	0801f320 	.word	0x0801f320
 8004da0:	08022754 	.word	0x08022754
 8004da4:	0801f328 	.word	0x0801f328
 8004da8:	080227b4 	.word	0x080227b4
 8004dac:	0801f330 	.word	0x0801f330
 8004db0:	08022834 	.word	0x08022834
 8004db4:	0801f338 	.word	0x0801f338
 8004db8:	080228d4 	.word	0x080228d4
 8004dbc:	0801f340 	.word	0x0801f340
 8004dc0:	08022924 	.word	0x08022924
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 8004dc4:	4981      	ldr	r1, [pc, #516]	; (8004fcc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb7c>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fb fa22 	bl	8000210 <strcmp>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d110      	bne.n	8004df4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9a4>
 8004dd2:	4c7f      	ldr	r4, [pc, #508]	; (8004fd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb80>)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	9321      	str	r3, [sp, #132]	; 0x84
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	9320      	str	r3, [sp, #128]	; 0x80
 8004ddc:	4668      	mov	r0, sp
 8004dde:	f104 0310 	add.w	r3, r4, #16
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	4619      	mov	r1, r3
 8004de6:	f018 fb0e 	bl	801d406 <memcpy>
 8004dea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004dee:	f005 fb43 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004df2:	e0e8      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 8004df4:	4977      	ldr	r1, [pc, #476]	; (8004fd4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb84>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7fb fa0a 	bl	8000210 <strcmp>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9d2>
 8004e02:	4c75      	ldr	r4, [pc, #468]	; (8004fd8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb88>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	9304      	str	r3, [sp, #16]
 8004e0c:	466d      	mov	r5, sp
 8004e0e:	f104 0310 	add.w	r3, r4, #16
 8004e12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e1c:	f005 fb9a 	bl	800a554 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e20:	e0d1      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 8004e22:	496e      	ldr	r1, [pc, #440]	; (8004fdc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8c>)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7fb f9f3 	bl	8000210 <strcmp>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d112      	bne.n	8004e56 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa06>
 8004e30:	4e6b      	ldr	r6, [pc, #428]	; (8004fe0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb90>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	9309      	str	r3, [sp, #36]	; 0x24
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	9308      	str	r3, [sp, #32]
 8004e3a:	466d      	mov	r5, sp
 8004e3c:	f106 0410 	add.w	r4, r6, #16
 8004e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e4c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e50:	f005 f9c7 	bl	800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e54:	e0b7      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 8004e56:	4963      	ldr	r1, [pc, #396]	; (8004fe4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb94>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7fb f9d9 	bl	8000210 <strcmp>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa3e>
 8004e64:	4e60      	ldr	r6, [pc, #384]	; (8004fe8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb98>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	930d      	str	r3, [sp, #52]	; 0x34
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e6e:	466d      	mov	r5, sp
 8004e70:	f106 0410 	add.w	r4, r6, #16
 8004e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e88:	f005 fbce 	bl	800a628 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e8c:	e09b      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 8004e8e:	4957      	ldr	r1, [pc, #348]	; (8004fec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb9c>)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7fb f9bd 	bl	8000210 <strcmp>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d116      	bne.n	8004eca <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa7a>
 8004e9c:	4e54      	ldr	r6, [pc, #336]	; (8004ff0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba0>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	9311      	str	r3, [sp, #68]	; 0x44
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	9310      	str	r3, [sp, #64]	; 0x40
 8004ea6:	466d      	mov	r5, sp
 8004ea8:	f106 0410 	add.w	r4, r6, #16
 8004eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004eb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ebc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ec0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ec4:	f005 f9fa 	bl	800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ec8:	e07d      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 8004eca:	494a      	ldr	r1, [pc, #296]	; (8004ff4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba4>)
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7fb f99f 	bl	8000210 <strcmp>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d110      	bne.n	8004efa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xaaa>
 8004ed8:	4c47      	ldr	r4, [pc, #284]	; (8004ff8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba8>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9315      	str	r3, [sp, #84]	; 0x54
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	9314      	str	r3, [sp, #80]	; 0x50
 8004ee2:	4668      	mov	r0, sp
 8004ee4:	f104 0310 	add.w	r3, r4, #16
 8004ee8:	2250      	movs	r2, #80	; 0x50
 8004eea:	4619      	mov	r1, r3
 8004eec:	f018 fa8b 	bl	801d406 <memcpy>
 8004ef0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ef4:	f005 fc05 	bl	800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ef8:	e065      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 8004efa:	4940      	ldr	r1, [pc, #256]	; (8004ffc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbac>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7fb f987 	bl	8000210 <strcmp>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d110      	bne.n	8004f2a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xada>
 8004f08:	4c3d      	ldr	r4, [pc, #244]	; (8005000 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb0>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	9318      	str	r3, [sp, #96]	; 0x60
 8004f12:	4668      	mov	r0, sp
 8004f14:	f104 0310 	add.w	r3, r4, #16
 8004f18:	2260      	movs	r2, #96	; 0x60
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f018 fa73 	bl	801d406 <memcpy>
 8004f20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f24:	f005 fa37 	bl	800a396 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f28:	e04d      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 8004f2a:	4936      	ldr	r1, [pc, #216]	; (8005004 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb4>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fb f96f 	bl	8000210 <strcmp>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d110      	bne.n	8004f5a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb0a>
 8004f38:	4c33      	ldr	r4, [pc, #204]	; (8005008 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb8>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	931d      	str	r3, [sp, #116]	; 0x74
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	931c      	str	r3, [sp, #112]	; 0x70
 8004f42:	4668      	mov	r0, sp
 8004f44:	f104 0310 	add.w	r3, r4, #16
 8004f48:	2270      	movs	r2, #112	; 0x70
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f018 fa5b 	bl	801d406 <memcpy>
 8004f50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f54:	f005 fc3f 	bl	800a7d6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f58:	e035      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 8004f5a:	492c      	ldr	r1, [pc, #176]	; (800500c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbbc>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7fb f957 	bl	8000210 <strcmp>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d110      	bne.n	8004f8a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb3a>
 8004f68:	4c29      	ldr	r4, [pc, #164]	; (8005010 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc0>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	9321      	str	r3, [sp, #132]	; 0x84
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	9320      	str	r3, [sp, #128]	; 0x80
 8004f72:	4668      	mov	r0, sp
 8004f74:	f104 0310 	add.w	r3, r4, #16
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f018 fa43 	bl	801d406 <memcpy>
 8004f80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f84:	f005 fa78 	bl	800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f88:	e01d      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 8004f8a:	4922      	ldr	r1, [pc, #136]	; (8005014 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc4>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7fb f93f 	bl	8000210 <strcmp>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6a>
 8004f98:	4c1f      	ldr	r4, [pc, #124]	; (8005018 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc8>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	9325      	str	r3, [sp, #148]	; 0x94
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	9324      	str	r3, [sp, #144]	; 0x90
 8004fa2:	4668      	mov	r0, sp
 8004fa4:	f104 0310 	add.w	r3, r4, #16
 8004fa8:	2290      	movs	r2, #144	; 0x90
 8004faa:	4619      	mov	r1, r3
 8004fac:	f018 fa2b 	bl	801d406 <memcpy>
 8004fb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fb4:	f005 fc80 	bl	800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fb8:	e005      	b.n	8004fc6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else assert(0); // wavelet not in the list
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbcc>)
 8004fbc:	4a18      	ldr	r2, [pc, #96]	; (8005020 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd0>)
 8004fbe:	2184      	movs	r1, #132	; 0x84
 8004fc0:	4818      	ldr	r0, [pc, #96]	; (8005024 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd4>)
 8004fc2:	f017 f8a7 	bl	801c114 <__assert_func>
    }
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fcc:	0801f348 	.word	0x0801f348
 8004fd0:	08022984 	.word	0x08022984
 8004fd4:	0801f350 	.word	0x0801f350
 8004fd8:	08022a14 	.word	0x08022a14
 8004fdc:	0801f358 	.word	0x0801f358
 8004fe0:	08022a34 	.word	0x08022a34
 8004fe4:	0801f360 	.word	0x0801f360
 8004fe8:	08022a64 	.word	0x08022a64
 8004fec:	0801f368 	.word	0x0801f368
 8004ff0:	08022aa4 	.word	0x08022aa4
 8004ff4:	0801f370 	.word	0x0801f370
 8004ff8:	08022af4 	.word	0x08022af4
 8004ffc:	0801f378 	.word	0x0801f378
 8005000:	08022b54 	.word	0x08022b54
 8005004:	0801f380 	.word	0x0801f380
 8005008:	08022bc4 	.word	0x08022bc4
 800500c:	0801f388 	.word	0x0801f388
 8005010:	08022c44 	.word	0x08022c44
 8005014:	0801f390 	.word	0x0801f390
 8005018:	08022cd4 	.word	0x08022cd4
 800501c:	0801f398 	.word	0x0801f398
 8005020:	0801f39c 	.word	0x0801f39c
 8005024:	0801f404 	.word	0x0801f404

08005028 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>:
      _Vector_base() = default;
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f005 fd06 	bl	800aa44 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>:
      vector() = default;
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ffeb 	bl	8005028 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:

    static void calculate_entropy(const fvec &y, fvec &features)
 800505c:	b580      	push	{r7, lr}
 800505e:	ed2d 8b02 	vpush	{d8}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
    {
        fvec h;
 800506a:	f107 0310 	add.w	r3, r7, #16
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ffe7 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        histo(y, 100, h, true);
 8005074:	f107 0210 	add.w	r2, r7, #16
 8005078:	2301      	movs	r3, #1
 800507a:	2164      	movs	r1, #100	; 0x64
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f93a 	bl	80042f6 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        // entropy = -sum(prob * log(prob)
        float entropy = 0.0f;
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	e035      	b.n	80050fa <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x9e>
            if (h[i] > 0.0f) {
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fe28 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800509a:	4603      	mov	r3, r0
 800509c:	edd3 7a00 	vldr	s15, [r3]
 80050a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a8:	bfcc      	ite	gt
 80050aa:	2301      	movgt	r3, #1
 80050ac:	2300      	movle	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01f      	beq.n	80050f4 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x98>
                entropy -= h[i] * log(h[i]);
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	69f9      	ldr	r1, [r7, #28]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f004 fe15 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050c0:	4603      	mov	r3, r0
 80050c2:	ed93 8a00 	vldr	s16, [r3]
 80050c6:	f107 0310 	add.w	r3, r7, #16
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f004 fe0c 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050d2:	4603      	mov	r3, r0
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	eeb0 0a67 	vmov.f32	s0, s15
 80050dc:	f7fc fa68 	bl	80015b0 <_ZSt3logf>
 80050e0:	eef0 7a40 	vmov.f32	s15, s0
 80050e4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80050e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80050ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050f0:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	f107 0310 	add.w	r3, r7, #16
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fc4b 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005104:	4602      	mov	r2, r0
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4293      	cmp	r3, r2
 800510a:	bf34      	ite	cc
 800510c:	2301      	movcc	r3, #1
 800510e:	2300      	movcs	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1bb      	bne.n	800508e <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x32>
            }
        }
        features.push_back(entropy);
 8005116:	f107 030c 	add.w	r3, r7, #12
 800511a:	4619      	mov	r1, r3
 800511c:	6838      	ldr	r0, [r7, #0]
 800511e:	f005 fc9e 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f004 fdc4 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	ecbd 8b02 	vpop	{d8}
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	ed87 0a00 	vstr	s0, [r7]
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f004 fc28 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800514a:	4603      	mov	r3, r0
 800514c:	3b01      	subs	r3, #1
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005156:	edd7 7a00 	vldr	s15, [r7]
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	ee17 0a90 	vmov	r0, s15
 8005162:	f7fb fa21 	bl	80005a8 <__aeabi_f2d>
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x64>)
 800516c:	f7fb f8be 	bl	80002ec <__adddf3>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	f7fb fd46 	bl	8000c08 <__aeabi_d2uiz>
 800517c:	4603      	mov	r3, r0
 800517e:	60fb      	str	r3, [r7, #12]
        return sorted[index];
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f004 fe8b 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005188:	4603      	mov	r3, r0
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	ee07 3a90 	vmov	s15, r3
    }
 8005190:	eeb0 0a67 	vmov.f32	s0, s15
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	3fe00000 	.word	0x3fe00000

080051a0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b097      	sub	sp, #92	; 0x5c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        fvec sorted = y;
 80051ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051b2:	68f9      	ldr	r1, [r7, #12]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f004 fe82 	bl	8009ebe <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>
        std::sort(sorted.begin(), sorted.end());
 80051ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fd09 	bl	8009bd6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 80051c4:	4604      	mov	r4, r0
 80051c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051ca:	4618      	mov	r0, r3
 80051cc:	f004 fd13 	bl	8009bf6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4619      	mov	r1, r3
 80051d4:	4620      	mov	r0, r4
 80051d6:	f004 fe02 	bl	8009dde <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 80051da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051de:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80053e0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x240>
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ffa8 	bl	8005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 80051e8:	eef0 7a40 	vmov.f32	s15, s0
 80051ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 80051f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051f4:	4619      	mov	r1, r3
 80051f6:	68b8      	ldr	r0, [r7, #8]
 80051f8:	f005 fc56 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 80051fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005200:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff97 	bl	8005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800520a:	eef0 7a40 	vmov.f32	s15, s0
 800520e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8005212:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005216:	4619      	mov	r1, r3
 8005218:	68b8      	ldr	r0, [r7, #8]
 800521a:	f005 fc45 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 800521e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005222:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff86 	bl	8005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800522c:	eef0 7a40 	vmov.f32	s15, s0
 8005230:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8005234:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005238:	4619      	mov	r1, r3
 800523a:	68b8      	ldr	r0, [r7, #8]
 800523c:	f005 fc34 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 8005240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005244:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80053e4 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x244>
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff75 	bl	8005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800524e:	eef0 7a40 	vmov.f32	s15, s0
 8005252:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8005256:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800525a:	4619      	mov	r1, r3
 800525c:	68b8      	ldr	r0, [r7, #8]
 800525e:	f005 fc23 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 8005262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005266:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff ff64 	bl	8005138 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005270:	eef0 7a40 	vmov.f32	s15, s0
 8005274:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005278:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800527c:	4619      	mov	r1, r3
 800527e:	68b8      	ldr	r0, [r7, #8]
 8005280:	f005 fc12 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f004 fb88 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800528a:	4604      	mov	r4, r0
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f004 fdb6 	bl	8009dfe <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005292:	4603      	mov	r3, r0
 8005294:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005298:	4622      	mov	r2, r4
 800529a:	2101      	movs	r1, #1
 800529c:	f7fc f913 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 80052a0:	f107 0014 	add.w	r0, r7, #20
 80052a4:	2300      	movs	r3, #0
 80052a6:	2201      	movs	r2, #1
 80052a8:	2101      	movs	r1, #1
 80052aa:	f7fc f90c 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>

        features.push_back(mean);
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f005 fbd3 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
 80052b8:	f107 0214 	add.w	r2, r7, #20
 80052bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fc fc52 	bl	8001b6c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14e>
            features.push_back(out.get_row_ptr(0)[0]);
 80052d8:	f107 0314 	add.w	r3, r7, #20
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fc f932 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4619      	mov	r1, r3
 80052e8:	68b8      	ldr	r0, [r7, #8]
 80052ea:	f005 fbb8 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        features.push_back(numpy::variance(const_cast<float *>(y.data()), y.size()));
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f004 fd85 	bl	8009dfe <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80052f4:	4604      	mov	r4, r0
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f004 fb4f 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4619      	mov	r1, r3
 8005300:	4620      	mov	r0, r4
 8005302:	f7fd fcbf 	bl	8002c84 <_ZN2ei5numpy8varianceEPfj>
 8005306:	eef0 7a40 	vmov.f32	s15, s0
 800530a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800530e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005312:	4619      	mov	r1, r3
 8005314:	68b8      	ldr	r0, [r7, #8]
 8005316:	f005 fbc7 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 800531a:	f107 0214 	add.w	r2, r7, #20
 800531e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fc fba9 	bl	8001a7c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
            features.push_back(out.get_row_ptr(0)[0]);
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f7fc f901 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005346:	4603      	mov	r3, r0
 8005348:	4619      	mov	r1, r3
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f005 fb87 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 8005350:	f107 0214 	add.w	r2, r7, #20
 8005354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7fc fc5e 	bl	8001c1c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1e6>
            features.push_back(out.get_row_ptr(0)[0]);
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7fc f8e6 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800537c:	4603      	mov	r3, r0
 800537e:	4619      	mov	r1, r3
 8005380:	68b8      	ldr	r0, [r7, #8]
 8005382:	f005 fb6c 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 8005386:	f107 0214 	add.w	r2, r7, #20
 800538a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f7fc fcdf 	bl	8001d54 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x21c>
            features.push_back(out.get_row_ptr(0)[0]);
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fc f8cb 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4619      	mov	r1, r3
 80053b6:	68b8      	ldr	r0, [r7, #8]
 80053b8:	f005 fb51 	bl	800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fc f8ab 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80053c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc f8a6 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80053d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053d4:	4618      	mov	r0, r3
 80053d6:	f004 fc6d 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80053da:	375c      	adds	r7, #92	; 0x5c
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd90      	pop	{r4, r7, pc}
 80053e0:	3d4ccccd 	.word	0x3d4ccccd
 80053e4:	3f733333 	.word	0x3f733333

080053e8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 80053e8:	b580      	push	{r7, lr}
 80053ea:	ed2d 8b02 	vpush	{d8}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        size_t zc = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 80053fe:	2301      	movs	r3, #1
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	e021      	b.n	8005448 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x60>
            if (y[i] * y[i - 1] < 0) {
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f004 fd49 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800540c:	4603      	mov	r3, r0
 800540e:	ed93 8a00 	vldr	s16, [r3]
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	3b01      	subs	r3, #1
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f004 fd40 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800541e:	4603      	mov	r3, r0
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	bf4c      	ite	mi
 8005432:	2301      	movmi	r3, #1
 8005434:	2300      	movpl	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x5a>
                zc++;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	3301      	adds	r3, #1
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f004 faa6 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800544e:	4602      	mov	r2, r0
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	4293      	cmp	r3, r2
 8005454:	bf34      	ite	cc
 8005456:	2301      	movcc	r3, #1
 8005458:	2300      	movcs	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1d1      	bne.n	8005404 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
            }
        }
        features.push_back(zc / (float)y.size());
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f004 fa95 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005470:	ee07 0a90 	vmov	s15, r0
 8005474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005478:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800547c:	edc7 7a04 	vstr	s15, [r7, #16]
 8005480:	f107 0310 	add.w	r3, r7, #16
 8005484:	4619      	mov	r1, r3
 8005486:	68b8      	ldr	r0, [r7, #8]
 8005488:	f005 fb0e 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        size_t mc = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 8005490:	2301      	movs	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e029      	b.n	80054ea <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x102>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 8005496:	69b9      	ldr	r1, [r7, #24]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f004 fd00 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800549e:	4603      	mov	r3, r0
 80054a0:	ed93 7a00 	vldr	s14, [r3]
 80054a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80054a8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	4619      	mov	r1, r3
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f004 fcf3 	bl	8009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054b8:	4603      	mov	r3, r0
 80054ba:	ed93 7a00 	vldr	s14, [r3]
 80054be:	edd7 7a01 	vldr	s15, [r7, #4]
 80054c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80054ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d2:	bf4c      	ite	mi
 80054d4:	2301      	movmi	r3, #1
 80054d6:	2300      	movpl	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xfc>
                mc++;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f004 fa55 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80054f0:	4602      	mov	r2, r0
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf34      	ite	cc
 80054f8:	2301      	movcc	r3, #1
 80054fa:	2300      	movcs	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1c9      	bne.n	8005496 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xae>
            }
        }
        features.push_back(mc / (float)y.size());
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f004 fa44 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005512:	ee07 0a90 	vmov	s15, r0
 8005516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800551a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800551e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005522:	f107 0314 	add.w	r3, r7, #20
 8005526:	4619      	mov	r1, r3
 8005528:	68b8      	ldr	r0, [r7, #8]
 800552a:	f005 fabd 	bl	800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
    }
 800552e:	bf00      	nop
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	ecbd 8b02 	vpop	{d8}
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 800553c:	b5b0      	push	{r4, r5, r7, lr}
 800553e:	b090      	sub	sp, #64	; 0x40
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 800554a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800554c:	2b14      	cmp	r3, #20
 800554e:	d805      	bhi.n	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c>
 800555c:	4b67      	ldr	r3, [pc, #412]	; (80056fc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c0>)
 800555e:	4a68      	ldr	r2, [pc, #416]	; (8005700 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c4>)
 8005560:	21cb      	movs	r1, #203	; 0xcb
 8005562:	4868      	ldr	r0, [pc, #416]	; (8005704 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c8>)
 8005564:	f016 fdd6 	bl	801c114 <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	005a      	lsls	r2, r3, #1
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4413      	add	r3, r2
 8005570:	3b02      	subs	r3, #2
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
        fvec x_padded(nx_padded);
 8005574:	f107 0220 	add.w	r2, r7, #32
 8005578:	f107 0314 	add.w	r3, r7, #20
 800557c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800557e:	4618      	mov	r0, r3
 8005580:	f004 fb7e 	bl	8009c80 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005588:	e012      	b.n	80055b0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x74>
            x_padded[i] = x[nh - 3 - i];
 800558a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800558c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	3b03      	subs	r3, #3
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	18d4      	adds	r4, r2, r3
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fba3 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh - 2; i++)
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	3301      	adds	r3, #1
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b2:	3b02      	subs	r3, #2
 80055b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3e7      	bcc.n	800558a <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e>
        for (size_t i = 0; i < nx; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055be:	e013      	b.n	80055e8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
            x_padded[i + nh - 2] = x[i];
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	18d4      	adds	r4, r2, r3
 80055c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	4413      	add	r3, r2
 80055ce:	1e9a      	subs	r2, r3, #2
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f004 fb87 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055dc:	4602      	mov	r2, r0
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nx; i++)
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	3301      	adds	r3, #1
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3e7      	bcc.n	80055c0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x84>
        for (size_t i = 0; i < nh; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	e018      	b.n	8005628 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xec>
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	18d4      	adds	r4, r2, r3
 8005604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	441a      	add	r2, r3
 800560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560c:	4413      	add	r3, r2
 800560e:	1e9a      	subs	r2, r3, #2
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f004 fb67 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800561c:	4602      	mov	r2, r0
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh; i++)
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	3301      	adds	r3, #1
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	429a      	cmp	r2, r3
 800562e:	d3e2      	bcc.n	80055f6 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xba>

        size_t ny = (nx + nh - 1) / 2;
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005634:	4413      	add	r3, r2
 8005636:	3b01      	subs	r3, #1
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
        a.resize(ny);
 800563c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800563e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005640:	f004 fd79 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 8005644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005646:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005648:	f004 fd75 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	4618      	mov	r0, r3
 8005652:	f004 f9b2 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005656:	6278      	str	r0, [r7, #36]	; 0x24
        for (size_t i = 0; i < ny; i++) {
 8005658:	2300      	movs	r3, #0
 800565a:	633b      	str	r3, [r7, #48]	; 0x30
 800565c:	e026      	b.n	80056ac <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x170>
            a[i] = dot(xx + 2 * i, h, nh);
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	18d5      	adds	r5, r2, r3
 8005666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005668:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800566a:	f004 fb3e 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800566e:	4604      	mov	r4, r0
 8005670:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4628      	mov	r0, r5
 8005676:	f7fe fe0d 	bl	8004294 <_ZN2ei8spectral3dotEPKfS2_j>
 800567a:	eef0 7a40 	vmov.f32	s15, s0
 800567e:	edc4 7a00 	vstr	s15, [r4]
            d[i] = dot(xx + 2 * i, g, nh);
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005688:	18d5      	adds	r5, r2, r3
 800568a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800568c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800568e:	f004 fb2c 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005692:	4604      	mov	r4, r0
 8005694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	4628      	mov	r0, r5
 800569a:	f7fe fdfb 	bl	8004294 <_ZN2ei8spectral3dotEPKfS2_j>
 800569e:	eef0 7a40 	vmov.f32	s15, s0
 80056a2:	edc4 7a00 	vstr	s15, [r4]
        for (size_t i = 0; i < ny; i++) {
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	3301      	adds	r3, #1
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
 80056ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d3d4      	bcc.n	800565e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x122>
        }

        numpy::underflow_handling(d.data(), d.size());
 80056b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056b6:	f004 f980 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056ba:	4604      	mov	r4, r0
 80056bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056be:	f004 f96c 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056c2:	4603      	mov	r3, r0
 80056c4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005708 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 80056c8:	4619      	mov	r1, r3
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7fd fb18 	bl	8002d00 <_ZN2ei5numpy18underflow_handlingEPfjf>
        numpy::underflow_handling(a.data(), a.size());
 80056d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056d2:	f004 f972 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056d6:	4604      	mov	r4, r0
 80056d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056da:	f004 f95e 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056de:	4603      	mov	r3, r0
 80056e0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005708 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 80056e4:	4619      	mov	r1, r3
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7fd fb0a 	bl	8002d00 <_ZN2ei5numpy18underflow_handlingEPfjf>
    }
 80056ec:	f107 0314 	add.w	r3, r7, #20
 80056f0:	4618      	mov	r0, r3
 80056f2:	f004 fadf 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80056f6:	3740      	adds	r7, #64	; 0x40
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bdb0      	pop	{r4, r5, r7, pc}
 80056fc:	0801f484 	.word	0x0801f484
 8005700:	0801f4a4 	.word	0x0801f4a4
 8005704:	0801f404 	.word	0x0801f404
 8005708:	33d6bf95 	.word	0x33d6bf95

0800570c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b08d      	sub	sp, #52	; 0x34
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f004 f93f 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800571c:	4604      	mov	r4, r0
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f004 f94b 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005724:	4603      	mov	r3, r0
 8005726:	f107 001c 	add.w	r0, r7, #28
 800572a:	4622      	mov	r2, r4
 800572c:	2101      	movs	r1, #1
 800572e:	f7fb feca 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005732:	f107 000c 	add.w	r0, r7, #12
 8005736:	2300      	movs	r3, #0
 8005738:	2201      	movs	r2, #1
 800573a:	2101      	movs	r1, #1
 800573c:	f7fb fec3 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 8005740:	f107 020c 	add.w	r2, r7, #12
 8005744:	f107 031c 	add.w	r3, r7, #28
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f7fc f9d2 	bl	8001af4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x60>
            assert(0);
 8005760:	4b15      	ldr	r3, [pc, #84]	; (80057b8 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xac>)
 8005762:	4a16      	ldr	r2, [pc, #88]	; (80057bc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb0>)
 8005764:	21eb      	movs	r1, #235	; 0xeb
 8005766:	4816      	ldr	r0, [pc, #88]	; (80057c0 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb4>)
 8005768:	f016 fcd4 	bl	801c114 <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f7fb fee8 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005778:	4603      	mov	r3, r0
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c

        calculate_entropy(y, features);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fc6b 	bl	800505c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 8005786:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fe2b 	bl	80053e8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 8005792:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fd01 	bl	80051a0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
    }
 800579e:	f107 030c 	add.w	r3, r7, #12
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fb feba 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80057a8:	f107 031c 	add.w	r3, r7, #28
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fb feb5 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80057b2:	3734      	adds	r7, #52	; 0x34
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd90      	pop	{r4, r7, pc}
 80057b8:	0801f398 	.word	0x0801f398
 80057bc:	0801f530 	.word	0x0801f530
 80057c0:	0801f404 	.word	0x0801f404

080057c4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 80057c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c8:	b098      	sub	sp, #96	; 0x60
 80057ca:	af04      	add	r7, sp, #16
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
    {
        assert(level > 0 && level < 8);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd02      	ble.n	80057e0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1c>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b07      	cmp	r3, #7
 80057de:	dd05      	ble.n	80057ec <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x28>
 80057e0:	4b6e      	ldr	r3, [pc, #440]	; (800599c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d8>)
 80057e2:	4a6f      	ldr	r2, [pc, #444]	; (80059a0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1dc>)
 80057e4:	21f6      	movs	r1, #246	; 0xf6
 80057e6:	486f      	ldr	r0, [pc, #444]	; (80059a4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1e0>)
 80057e8:	f016 fc94 	bl	801c114 <__assert_func>

        fvec h;
 80057ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fc26 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec g;
 80057f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fc21 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        find_filter(wav, h, g);
 8005800:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005804:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fe fe20 	bl	8004450 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>

        features.clear();
 8005810:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005812:	f005 f95a 	bl	800aaca <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>
        fvec a;
 8005816:	f107 0320 	add.w	r3, r7, #32
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fc11 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec d;
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fc0c 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 800582a:	68bc      	ldr	r4, [r7, #8]
 800582c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005830:	4618      	mov	r0, r3
 8005832:	f004 f8c2 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005836:	4605      	mov	r5, r0
 8005838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800583c:	4618      	mov	r0, r3
 800583e:	f004 f8bc 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005842:	4606      	mov	r6, r0
 8005844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005848:	4618      	mov	r0, r3
 800584a:	f004 f8a6 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800584e:	4602      	mov	r2, r0
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	f107 0320 	add.w	r3, r7, #32
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	9200      	str	r2, [sp, #0]
 800585e:	4633      	mov	r3, r6
 8005860:	462a      	mov	r2, r5
 8005862:	4621      	mov	r1, r4
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fe69 	bl	800553c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 800586a:	f107 0314 	add.w	r3, r7, #20
 800586e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff4b 	bl	800570c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 8005876:	2301      	movs	r3, #1
 8005878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587a:	e033      	b.n	80058e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x120>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 800587c:	f107 0320 	add.w	r3, r7, #32
 8005880:	4618      	mov	r0, r3
 8005882:	f004 f89a 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005886:	4604      	mov	r4, r0
 8005888:	f107 0320 	add.w	r3, r7, #32
 800588c:	4618      	mov	r0, r3
 800588e:	f004 f884 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005892:	4605      	mov	r5, r0
 8005894:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005898:	4618      	mov	r0, r3
 800589a:	f004 f88e 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 800589e:	4606      	mov	r6, r0
 80058a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 f888 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058aa:	4680      	mov	r8, r0
 80058ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058b0:	4618      	mov	r0, r3
 80058b2:	f004 f872 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058b6:	4602      	mov	r2, r0
 80058b8:	f107 0314 	add.w	r3, r7, #20
 80058bc:	9302      	str	r3, [sp, #8]
 80058be:	f107 0320 	add.w	r3, r7, #32
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	9200      	str	r2, [sp, #0]
 80058c6:	4643      	mov	r3, r8
 80058c8:	4632      	mov	r2, r6
 80058ca:	4629      	mov	r1, r5
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff fe35 	bl	800553c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff17 	bl	800570c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e0:	3301      	adds	r3, #1
 80058e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	dbc7      	blt.n	800587c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb8>
        }

        extract_features(a, features);
 80058ec:	f107 0320 	add.w	r3, r7, #32
 80058f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff ff0a 	bl	800570c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 80058f8:	2300      	movs	r3, #0
 80058fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058fc:	e02c      	b.n	8005958 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x194>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	647b      	str	r3, [r7, #68]	; 0x44
 8005902:	e023      	b.n	800594c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x188>
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 8005904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	1a9b      	subs	r3, r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	461a      	mov	r2, r3
 8005910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005912:	4413      	add	r3, r2
 8005914:	4619      	mov	r1, r3
 8005916:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005918:	f004 f9e7 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800591c:	4604      	mov	r4, r0
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	461a      	mov	r2, r3
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	4413      	add	r3, r2
 8005934:	4619      	mov	r1, r3
 8005936:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005938:	f004 f9d7 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800593c:	4603      	mov	r3, r0
                std::swap(
 800593e:	4619      	mov	r1, r3
 8005940:	4620      	mov	r0, r4
 8005942:	f005 f8db 	bl	800aafc <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005948:	3301      	adds	r3, #1
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
 800594c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594e:	2b0d      	cmp	r3, #13
 8005950:	ddd8      	ble.n	8005904 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x140>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005954:	3301      	adds	r3, #1
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	da00      	bge.n	8005960 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x19c>
 800595e:	3301      	adds	r3, #1
 8005960:	105b      	asrs	r3, r3, #1
 8005962:	461a      	mov	r2, r3
 8005964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005966:	4293      	cmp	r3, r2
 8005968:	ddc9      	ble.n	80058fe <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x13a>
            }
        }
    }
 800596a:	f107 0314 	add.w	r3, r7, #20
 800596e:	4618      	mov	r0, r3
 8005970:	f004 f9a0 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005974:	f107 0320 	add.w	r3, r7, #32
 8005978:	4618      	mov	r0, r3
 800597a:	f004 f99b 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800597e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005982:	4618      	mov	r0, r3
 8005984:	f004 f996 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800598c:	4618      	mov	r0, r3
 800598e:	f004 f991 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005992:	3750      	adds	r7, #80	; 0x50
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599a:	bf00      	nop
 800599c:	0801f590 	.word	0x0801f590
 80059a0:	0801f5a8 	.word	0x0801f5a8
 80059a4:	0801f404 	.word	0x0801f404

080059a8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static int dwt_features(const float *x, int len, const char *wav, int level, fvec &features)
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
    {
        assert(level <= 7);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	dd06      	ble.n	80059ca <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 80059bc:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>)
 80059be:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059c0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80059c4:	4817      	ldr	r0, [pc, #92]	; (8005a24 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 80059c6:	f016 fba5 	bl	801c114 <__assert_func>

        assert(features.size() == 0); // make sure features is empty
 80059ca:	69b8      	ldr	r0, [r7, #24]
 80059cc:	f003 ffe5 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x3c>
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x80>)
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059da:	f44f 718b 	mov.w	r1, #278	; 0x116
 80059de:	4811      	ldr	r0, [pc, #68]	; (8005a24 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 80059e0:	f016 fb98 	bl	801c114 <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	461a      	mov	r2, r3
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4619      	mov	r1, r3
 80059f4:	69b8      	ldr	r0, [r7, #24]
 80059f6:	f005 f8b7 	bl	800ab68 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>

        wavedec_features(x, len, wav, level, features);
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fedd 	bl	80057c4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>

        return features.size();
 8005a0a:	69b8      	ldr	r0, [r7, #24]
 8005a0c:	f003 ffc5 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005a10:	4603      	mov	r3, r0
    }
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	0801f618 	.word	0x0801f618
 8005a20:	0801f624 	.word	0x0801f624
 8005a24:	0801f404 	.word	0x0801f404
 8005a28:	0801f690 	.word	0x0801f690

08005a2c <_ZN2ei8spectral7wavelet14check_min_sizeEii>:

    static bool check_min_size(int len, int level)
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
    {
        int min_size = 32 * (1 << level);
 8005a36:	2220      	movs	r2, #32
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
        return (len >= min_size);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	bfac      	ite	ge
 8005a48:	2301      	movge	r3, #1
 8005a4a:	2300      	movlt	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
    }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

public:
    static int extract_wavelet_features(
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b094      	sub	sp, #80	; 0x50
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7fb fe1f 	bl	80016b0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a78:	eeb0 0a67 	vmov.f32	s0, s15
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7fb ff27 	bl	80018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8005a82:	63b8      	str	r0, [r7, #56]	; 0x38
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	e0b0      	b.n	8005bf0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4959      	ldr	r1, [pc, #356]	; (8005bf8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fa fbbb 	bl	8000210 <strcmp>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d117      	bne.n	8005ad0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x74>
            if (config->filter_order) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d034      	beq.n	8005b12 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	edd3 7a06 	vldr	s15, [r3, #24]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	eef0 0a67 	vmov.f32	s1, s15
 8005aba:	ed97 0a00 	vldr	s0, [r7]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7fd fe42 	bl	8003748 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005ac4:	6338      	str	r0, [r7, #48]	; 0x30
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d022      	beq.n	8005b12 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	e08f      	b.n	8005bf0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	4949      	ldr	r1, [pc, #292]	; (8005bfc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fb9a 	bl	8000210 <strcmp>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d117      	bne.n	8005b12 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
            if (config->filter_order) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	edd3 7a06 	vldr	s15, [r3, #24]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	4619      	mov	r1, r3
 8005af8:	eef0 0a67 	vmov.f32	s1, s15
 8005afc:	ed97 0a00 	vldr	s0, [r7]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7fd fe57 	bl	80037b4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8005b06:	6378      	str	r0, [r7, #52]	; 0x34
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	e06e      	b.n	8005bf0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7fe fb86 	bl	8004224 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005b18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc8>
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	e065      	b.n	8005bf0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        int out_idx = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005b28:	2300      	movs	r3, #0
 8005b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b2c:	e05a      	b.n	8005be4 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>
            float *data_window = input_matrix->get_row_ptr(row);
 8005b2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7fb fd09 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005b36:	62b8      	str	r0, [r7, #40]	; 0x28
            size_t data_size = input_matrix->cols;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24

            if (!check_min_size(data_size, config->wavelet_level))
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7ff ff70 	bl	8005a2c <_ZN2ei8spectral7wavelet14check_min_sizeEii>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f083 0301 	eor.w	r3, r3, #1
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 8005b5a:	e049      	b.n	8005bf0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

            fvec features;
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff fa6e 	bl	8005042 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
            size_t num_features = dwt_features(
 8005b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4603      	mov	r3, r0
 8005b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7a:	f7ff ff15 	bl	80059a8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
 8005b7e:	4603      	mov	r3, r0
                data_window,
                data_size,
                config->wavelet,
                config->wavelet_level,
                features);
 8005b80:	623b      	str	r3, [r7, #32]

            assert(num_features == output_matrix->cols / input_matrix->rows);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d006      	beq.n	8005ba2 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a8>)
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1ac>)
 8005b98:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b9c:	481b      	ldr	r0, [pc, #108]	; (8005c0c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b0>)
 8005b9e:	f016 fab9 	bl	801c114 <__assert_func>
            for (size_t i = 0; i < num_features; i++) {
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba6:	e011      	b.n	8005bcc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f004 f89b 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	6479      	str	r1, [r7, #68]	; 0x44
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	6802      	ldr	r2, [r0, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < num_features; i++) {
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc8:	3301      	adds	r3, #1
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3e9      	bcc.n	8005ba8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            }
        }
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 f86b 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be0:	3301      	adds	r3, #1
 8005be2:	643b      	str	r3, [r7, #64]	; 0x40
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d39f      	bcc.n	8005b2e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd2>
        return EIDSP_OK;
 8005bee:	2300      	movs	r3, #0
    }
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3748      	adds	r7, #72	; 0x48
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	0801f6a8 	.word	0x0801f6a8
 8005bfc:	0801f6ac 	.word	0x0801f6ac
 8005c00:	fffffc11 	.word	0xfffffc11
 8005c04:	0801f6b4 	.word	0x0801f6b4
 8005c08:	0801f6f0 	.word	0x0801f6f0
 8005c0c:	0801f404 	.word	0x0801f404

08005c10 <_ZN2ei6signal18get_decimated_sizeEjj>:
        for (size_t ix = 0; ix < output_size; ix++) {
            output[ix] = filtered[ix * factor];
        }
    }

    static size_t get_decimated_size(size_t input_size, size_t factor)
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
    {
        return (input_size + factor - 1) / factor;
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4413      	add	r3, r2
 8005c20:	1e5a      	subs	r2, r3, #1
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
    }
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <_ZN2ei6signal7sosfiltC1EPKfS3_j>:
        const float *coeff; // 6 * num_sections coefficients
        float* zi;
        fvec zi_vec; // 2 * num_sections initial conditions
        size_t num_sections;

        sosfilt(const float *coeff_, const float *zi_, size_t num_sections_)
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
            : coeff(coeff_),
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	601a      	str	r2, [r3, #0]
              zi_vec(zi_, zi_ + (num_sections_ * 2)),
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f103 0008 	add.w	r0, r3, #8
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	441a      	add	r2, r3
 8005c56:	f107 0314 	add.w	r3, r7, #20
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	f005 f804 	bl	800ac68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>
              num_sections(num_sections_)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	615a      	str	r2, [r3, #20]
        {
            zi = zi_vec.data();
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f003 fea5 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]
        }
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZN2ei6signal7sosfilt3runEPKfjPf>:
         * This is the counterpart of scipy.signal.sosfilt .
         * @param input Input signal
         * @param output Output signal. Can be the same as input for in place
         * @param x_size Minimum size of input and output signal
         */
        void run(const float *input, const size_t size, float* output)
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
        {
            assert(num_sections > 0);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d105      	bne.n	8005ca2 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x22>
 8005c96:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <_ZN2ei6signal7sosfilt3runEPKfjPf+0x9c>)
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa0>)
 8005c9a:	216e      	movs	r1, #110	; 0x6e
 8005c9c:	4821      	ldr	r0, [pc, #132]	; (8005d24 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa4>)
 8005c9e:	f016 fa39 	bl	801c114 <__assert_func>

            iir2(input, output, size, coeff, coeff + 3, zi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	6852      	ldr	r2, [r2, #4]
 8005cb0:	9201      	str	r2, [sp, #4]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f000 f8cc 	bl	8005e58 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>

            for (size_t sect = 1; sect < num_sections; sect++) {
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e020      	b.n	8005d08 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x88>
                iir2(
                    output,
                    output,
                    size,
                    coeff + sect * 6,
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
                iir2(
 8005cd4:	18c8      	adds	r0, r1, r3
                    coeff + sect * 6 + 3,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	330c      	adds	r3, #12
                iir2(
 8005ce6:	440b      	add	r3, r1
                    zi + sect * 2);
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	6851      	ldr	r1, [r2, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	00d2      	lsls	r2, r2, #3
                iir2(
 8005cf0:	440a      	add	r2, r1
 8005cf2:	9201      	str	r2, [sp, #4]
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6838      	ldr	r0, [r7, #0]
 8005cfe:	f000 f8ab 	bl	8005e58 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3301      	adds	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3d9      	bcc.n	8005cc6 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x46>
            }
        }
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	0801f774 	.word	0x0801f774
 8005d20:	0801f788 	.word	0x0801f788
 8005d24:	0801f7c4 	.word	0x0801f7c4

08005d28 <_ZN2ei6signal7sosfilt4initEf>:

        void init(float x0)
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	ed87 0a00 	vstr	s0, [r7]
        {
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	e028      	b.n	8005d8c <_ZN2ei6signal7sosfilt4initEf+0x64>
                zi[sect * 2] *= x0;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4413      	add	r3, r2
 8005d44:	ed93 7a00 	vldr	s14, [r3]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4413      	add	r3, r2
 8005d52:	edd7 7a00 	vldr	s15, [r7]
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc3 7a00 	vstr	s15, [r3]
                zi[sect * 2 + 1] *= x0;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	3304      	adds	r3, #4
 8005d68:	4413      	add	r3, r2
 8005d6a:	ed93 7a00 	vldr	s14, [r3]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	3304      	adds	r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	edd7 7a00 	vldr	s15, [r7]
 8005d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d82:	edc3 7a00 	vstr	s15, [r3]
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3d1      	bcc.n	8005d3a <_ZN2ei6signal7sosfilt4initEf+0x12>
            }
        }
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>:
     * @param input Input signal
     * @param output Output signal
     * @param factor Decimation factor
     * @param sos Second-order section
     */
    static void decimate_simple(
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
        float *output,
        const size_t output_size,
        size_t factor,
        sosfilt &sos)
    {
        sos.init(input[0]);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	edd3 7a00 	vldr	s15, [r3]
 8005db8:	eeb0 0a67 	vmov.f32	s0, s15
 8005dbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dbe:	f7ff ffb3 	bl	8005d28 <_ZN2ei6signal7sosfilt4initEf>

        fvec filtered(input_size);
 8005dc2:	f107 021c 	add.w	r2, r7, #28
 8005dc6:	f107 0310 	add.w	r3, r7, #16
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f003 ff57 	bl	8009c80 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
        sos.run(input, input_size, filtered.data());
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f003 fdef 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005de4:	f7ff ff4c 	bl	8005c80 <_ZN2ei6signal7sosfilt3runEPKfjPf>

        size_t expected_size = get_decimated_size(input_size, factor);
 8005de8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dea:	68b8      	ldr	r0, [r7, #8]
 8005dec:	f7ff ff10 	bl	8005c10 <_ZN2ei6signal18get_decimated_sizeEjj>
 8005df0:	6238      	str	r0, [r7, #32]
        assert(output_size >= expected_size);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d205      	bcs.n	8005e06 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x62>
 8005dfa:	4b14      	ldr	r3, [pc, #80]	; (8005e4c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xa8>)
 8005dfc:	4a14      	ldr	r2, [pc, #80]	; (8005e50 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xac>)
 8005dfe:	219c      	movs	r1, #156	; 0x9c
 8005e00:	4814      	ldr	r0, [pc, #80]	; (8005e54 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xb0>)
 8005e02:	f016 f987 	bl	801c114 <__assert_func>

        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e06:	2300      	movs	r3, #0
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	e013      	b.n	8005e34 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x90>
            output[ix] = filtered[ix * factor];
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e10:	fb03 f202 	mul.w	r2, r3, r2
 8005e14:	f107 0310 	add.w	r3, r7, #16
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f003 ff65 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005e20:	4601      	mov	r1, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	680a      	ldr	r2, [r1, #0]
 8005e2c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	3301      	adds	r3, #1
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d3e7      	bcc.n	8005e0c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x68>
        }
    }
 8005e3c:	f107 0310 	add.w	r3, r7, #16
 8005e40:	4618      	mov	r0, r3
 8005e42:	f003 ff37 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005e46:	3728      	adds	r7, #40	; 0x28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	0801f840 	.word	0x0801f840
 8005e50:	0801f860 	.word	0x0801f860
 8005e54:	0801f7c4 	.word	0x0801f7c4

08005e58 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	ed93 7a00 	vldr	s14, [r3]
 8005e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e74:	edc7 7a06 	vstr	s15, [r7, #24]
        for (size_t ix = 0; ix < n; ix++) {
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e063      	b.n	8005f46 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0xee>
            const float xx = x[ix];
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	617b      	str	r3, [r7, #20]
            y[ix] = b[0] * xx + d[0];
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	ed93 7a00 	vldr	s14, [r3]
 8005e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	edd3 7a00 	vldr	s15, [r3]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eaa:	edc3 7a00 	vstr	s15, [r3]
            y[ix] *= one_over_a0;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	ed93 7a00 	vldr	s14, [r3]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc3 7a00 	vstr	s15, [r3]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	ed93 7a00 	vldr	s14, [r3]
 8005ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	edd3 6a00 	vldr	s13, [r3]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4413      	add	r3, r2
 8005eee:	edd3 7a00 	vldr	s15, [r3]
 8005ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	3304      	adds	r3, #4
 8005efe:	edd3 7a00 	vldr	s15, [r3]
 8005f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	edc3 7a00 	vstr	s15, [r3]
            d[1] = b[2] * xx - a[2] * y[ix];
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	ed93 7a00 	vldr	s14, [r3]
 8005f14:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1e:	3308      	adds	r3, #8
 8005f20:	edd3 6a00 	vldr	s13, [r3]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	edd3 7a00 	vldr	s15, [r3]
 8005f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	3304      	adds	r3, #4
 8005f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f3c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < n; ix++) {
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	3301      	adds	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d397      	bcc.n	8005e7e <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x26>
        }
    }
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	3724      	adds	r7, #36	; 0x24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8005f5c:	b5b0      	push	{r4, r5, r7, lr}
 8005f5e:	b0b0      	sub	sp, #192	; 0xc0
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	6178      	str	r0, [r7, #20]
 8005f64:	6139      	str	r1, [r7, #16]
 8005f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f70:	461a      	mov	r2, r3
 8005f72:	ed87 1a00 	vstr	s2, [r7]
 8005f76:	460b      	mov	r3, r1
 8005f78:	72fb      	strb	r3, [r7, #11]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d001      	beq.n	8005f8e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005f8a:	4cbe      	ldr	r4, [pc, #760]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005f8c:	e227      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	689d      	ldr	r5, [r3, #8]
 8005f92:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8005f96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	f000 fa22 	bl	80063e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fb4:	4cb3      	ldr	r4, [pc, #716]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fb6:	e212      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8005fb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fc2:	4cb0      	ldr	r4, [pc, #704]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fc4:	e20b      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8005fce:	6938      	ldr	r0, [r7, #16]
 8005fd0:	f7fe f928 	bl	8004224 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005fd4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8005fd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8005fe0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005fe4:	e1fb      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d110      	bne.n	800600e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 8005fec:	7abb      	ldrb	r3, [r7, #10]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	edd7 0a01 	vldr	s1, [r7, #4]
 8005ff4:	ed97 0a03 	vldr	s0, [r7, #12]
 8005ff8:	6938      	ldr	r0, [r7, #16]
 8005ffa:	f7fd fba5 	bl	8003748 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005ffe:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8006002:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800600a:	4c9e      	ldr	r4, [pc, #632]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800600c:	e1e7      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d110      	bne.n	8006036 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8006014:	7abb      	ldrb	r3, [r7, #10]
 8006016:	4619      	mov	r1, r3
 8006018:	edd7 0a01 	vldr	s1, [r7, #4]
 800601c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f7fd fbc7 	bl	80037b4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006026:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800602a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006032:	4c94      	ldr	r4, [pc, #592]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006034:	e1d3      	b.n	80063de <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8006036:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800603a:	2300      	movs	r3, #0
 800603c:	2201      	movs	r2, #1
 800603e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006042:	f7fb fa40 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8006046:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 800604e:	4c8e      	ldr	r4, [pc, #568]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006050:	e1c0      	b.n	80063d4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8006052:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006056:	4619      	mov	r1, r3
 8006058:	6938      	ldr	r0, [r7, #16]
 800605a:	f7fb fd0f 	bl	8001a7c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800605e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8006062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800606a:	4c86      	ldr	r4, [pc, #536]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800606c:	e1b2      	b.n	80063d4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800606e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	461a      	mov	r2, r3
 8006076:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800607a:	2300      	movs	r3, #0
 800607c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006080:	f7fb fa21 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8006084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 800608a:	4c7f      	ldr	r4, [pc, #508]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800608c:	e19d      	b.n	80063ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006094:	e191      	b.n	80063ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45e>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	689d      	ldr	r5, [r3, #8]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80060b2:	462a      	mov	r2, r5
 80060b4:	2101      	movs	r1, #1
 80060b6:	f7fb fa06 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 80060ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d102      	bne.n	80060c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
 80060c0:	4c71      	ldr	r4, [pc, #452]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060c2:	2500      	movs	r5, #0
 80060c4:	e16d      	b.n	80063a2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80060c6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	461a      	mov	r2, r3
 80060d2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80060d6:	2300      	movs	r3, #0
 80060d8:	2101      	movs	r1, #1
 80060da:	f7fb f9f4 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 80060de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18e>
 80060e4:	4c68      	ldr	r4, [pc, #416]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060e6:	2500      	movs	r5, #0
 80060e8:	e151      	b.n	800638e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 80060ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80060ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80060ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f0:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80060f2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	462b      	mov	r3, r5
 80060fa:	f7fb feaf 	bl	8001e5c <_ZN2ei5numpy4rfftEPKfjPfjj>
 80060fe:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8006102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b4>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800610a:	4c5e      	ldr	r4, [pc, #376]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800610c:	2500      	movs	r5, #0
 800610e:	e13e      	b.n	800638e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8006110:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006124:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006128:	eeb0 0a47 	vmov.f32	s0, s14
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb fbcf 	bl	80018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8006132:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8006136:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800613a:	2300      	movs	r3, #0
 800613c:	2202      	movs	r2, #2
 800613e:	f7fb f9c2 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8006142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1f2>
 8006148:	4c4f      	ldr	r4, [pc, #316]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800614a:	2500      	movs	r5, #0
 800614c:	e115      	b.n	800637a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800614e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8006152:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800615a:	edd7 0a00 	vldr	s1, [r7]
 800615e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fc64 	bl	8003a30 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8006168:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 800616c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x21e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006174:	4c43      	ldr	r4, [pc, #268]	; (8006284 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006176:	2500      	movs	r5, #0
 8006178:	e0ff      	b.n	800637a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 800617a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800617e:	085b      	lsrs	r3, r3, #1
 8006180:	b29b      	uxth	r3, r3
 8006182:	3301      	adds	r3, #1
 8006184:	461a      	mov	r2, r3
 8006186:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800618a:	2300      	movs	r3, #0
 800618c:	2101      	movs	r1, #1
 800618e:	f7fb f99a 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x242>
 8006198:	4c3b      	ldr	r4, [pc, #236]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800619a:	2500      	movs	r5, #0
 800619c:	e0e3      	b.n	8006366 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 800619e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3301      	adds	r3, #1
 80061a8:	461a      	mov	r2, r3
 80061aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80061ae:	2300      	movs	r3, #0
 80061b0:	2101      	movs	r1, #1
 80061b2:	f7fb f988 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
 80061bc:	4c32      	ldr	r4, [pc, #200]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061be:	2500      	movs	r5, #0
 80061c0:	e0c7      	b.n	8006352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            ret = spectral::processing::periodogram(&axis_matrix,
 80061c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061ce:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80061d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80061d6:	f7fd fe79 	bl	8003ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80061da:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80061de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
                EIDSP_ERR(ret);
 80061e6:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80061ea:	2500      	movs	r5, #0
 80061ec:	e0b1      	b.n	8006352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 80061ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	1e59      	subs	r1, r3, #1
 80061f6:	f107 0018 	add.w	r0, r7, #24
 80061fa:	2300      	movs	r3, #0
 80061fc:	2201      	movs	r2, #1
 80061fe:	f7fb f962 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b2>
 8006208:	4c1f      	ldr	r4, [pc, #124]	; (8006288 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800620a:	2500      	movs	r5, #0
 800620c:	e097      	b.n	800633e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            ret = spectral::processing::spectral_power_edges(
 800620e:	f107 0318 	add.w	r3, r7, #24
 8006212:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006216:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800621a:	ed97 0a03 	vldr	s0, [r7, #12]
 800621e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006222:	f7fd fd47 	bl	8003cb4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8006226:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 800622a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2de>
                EIDSP_ERR(ret);
 8006232:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8006236:	2500      	movs	r5, #0
 8006238:	e081      	b.n	800633e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8006258:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800625c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006268:	1c59      	adds	r1, r3, #1
 800626a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006274:	440b      	add	r3, r1
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006280:	e030      	b.n	80062e4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x388>
 8006282:	bf00      	nop
 8006284:	fffffc14 	.word	0xfffffc14
 8006288:	fffffc16 	.word	0xfffffc16
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 800628c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800628e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006290:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062ac:	440b      	add	r3, r1
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80062b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	3301      	adds	r3, #1
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	441a      	add	r2, r3
 80062c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062c8:	1c59      	adds	r1, r3, #1
 80062ca:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062d4:	440b      	add	r3, r1
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80062da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062de:	3301      	adds	r3, #1
 80062e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d3ce      	bcc.n	800628c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062f4:	e01d      	b.n	8006332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80062fe:	fb01 f303 	mul.w	r3, r1, r3
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	ed93 7a00 	vldr	s14, [r3]
 800630a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800631a:	4413      	add	r3, r2
 800631c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006324:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8006328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800632c:	3301      	adds	r3, #1
 800632e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006338:	429a      	cmp	r2, r3
 800633a:	d3dc      	bcc.n	80062f6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            }
        }
 800633c:	2501      	movs	r5, #1
 800633e:	f107 0318 	add.w	r3, r7, #24
 8006342:	4618      	mov	r0, r3
 8006344:	f7fb f8ea 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006348:	2d01      	cmp	r5, #1
 800634a:	d101      	bne.n	8006350 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f4>
 800634c:	2501      	movs	r5, #1
 800634e:	e000      	b.n	8006352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
 8006350:	2500      	movs	r5, #0
 8006352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb f8e0 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 800635c:	2d01      	cmp	r5, #1
 800635e:	d101      	bne.n	8006364 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x408>
 8006360:	2501      	movs	r5, #1
 8006362:	e000      	b.n	8006366 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
 8006364:	2500      	movs	r5, #0
 8006366:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800636a:	4618      	mov	r0, r3
 800636c:	f7fb f8d6 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006370:	2d01      	cmp	r5, #1
 8006372:	d101      	bne.n	8006378 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41c>
 8006374:	2501      	movs	r5, #1
 8006376:	e000      	b.n	800637a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
 8006378:	2500      	movs	r5, #0
 800637a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800637e:	4618      	mov	r0, r3
 8006380:	f7fb f8cc 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006384:	2d01      	cmp	r5, #1
 8006386:	d101      	bne.n	800638c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x430>
 8006388:	2501      	movs	r5, #1
 800638a:	e000      	b.n	800638e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
 800638c:	2500      	movs	r5, #0
 800638e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006392:	4618      	mov	r0, r3
 8006394:	f7fb f8c2 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006398:	2d01      	cmp	r5, #1
 800639a:	d101      	bne.n	80063a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x444>
 800639c:	2501      	movs	r5, #1
 800639e:	e000      	b.n	80063a2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>
 80063a0:	2500      	movs	r5, #0
 80063a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fb f8b8 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80063ac:	2d01      	cmp	r5, #1
 80063ae:	d10c      	bne.n	80063ca <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80063b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063c2:	429a      	cmp	r2, r3
 80063c4:	f4ff ae67 	bcc.w	8006096 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>

        return EIDSP_OK;
 80063c8:	2400      	movs	r4, #0
    }
 80063ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fb f8a4 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80063d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fb f89f 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80063de:	4623      	mov	r3, r4
 80063e0:	4618      	mov	r0, r3
 80063e2:	37b8      	adds	r7, #184	; 0xb8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bdb0      	pop	{r4, r5, r7, pc}

080063e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3301      	adds	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	3b01      	subs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8006420:	697b      	ldr	r3, [r7, #20]
    }
 8006422:	4618      	mov	r0, r3
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8006430:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8006434:	b0b3      	sub	sp, #204	; 0xcc
 8006436:	af04      	add	r7, sp, #16
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	edd3 7a03 	vldr	s15, [r3, #12]
 8006448:	eeb0 0a67 	vmov.f32	s0, s15
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7fb fa3f 	bl	80018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006452:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800645e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006462:	488c      	ldr	r0, [pc, #560]	; (8006694 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8006464:	f002 fcd6 	bl	8008e14 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006468:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800646c:	e10b      	b.n	8006686 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7fb f9ad 	bl	80017ce <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8006474:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 8006480:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006484:	4884      	ldr	r0, [pc, #528]	; (8006698 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 8006486:	f002 fcc5 	bl	8008e14 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800648a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800648e:	e0fa      	b.n	8006686 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 8006490:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8006494:	2300      	movs	r3, #0
 8006496:	2201      	movs	r2, #1
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	f7fb f814 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	f107 0318 	add.w	r3, r7, #24
 80064ac:	227c      	movs	r2, #124	; 0x7c
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f016 fec7 	bl	801d244 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7f9 ff08 	bl	80002d0 <strlen>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b7f      	cmp	r3, #127	; 0x7f
 80064c4:	d901      	bls.n	80064ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80064c6:	4c75      	ldr	r4, [pc, #468]	; (800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 80064c8:	e0d8      	b.n	800667c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
        memcpy(
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7f9 fefc 	bl	80002d0 <strlen>
 80064d8:	4602      	mov	r2, r0
 80064da:	f107 0314 	add.w	r3, r7, #20
 80064de:	4621      	mov	r1, r4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f016 ff90 	bl	801d406 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 80064ee:	e03e      	b.n	800656e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            while ((*spectral_ptr) == ' ') {
                spectral_ptr++;
 80064f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064f4:	3301      	adds	r3, #1
 80064f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 80064fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b20      	cmp	r3, #32
 8006502:	d0f5      	beq.n	80064f0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8006504:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006508:	f015 fe22 	bl	801c150 <atof>
 800650c:	ec59 8b10 	vmov	r8, r9, d0
 8006510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006518:	1c59      	adds	r1, r3, #1
 800651a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	18d4      	adds	r4, r2, r3
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7fa fb8f 	bl	8000c48 <__aeabi_d2f>
 800652a:	4603      	mov	r3, r0
 800652c:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800652e:	e009      	b.n	8006544 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x114>
                spectral_ptr++;
 8006530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006534:	3301      	adds	r3, #1
 8006536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800653a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x120>
            while ((*spectral_ptr != ',')) {
 8006544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b2c      	cmp	r3, #44	; 0x2c
 800654c:	d1f0      	bne.n	8006530 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
 800654e:	e000      	b.n	8006552 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
                    break;
 8006550:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8006552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
                spectral_ptr = NULL;
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006562:	e004      	b.n	800656e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            }
            else {
                spectral_ptr++;
 8006564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006568:	3301      	adds	r3, #1
 800656a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800656e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1c1      	bne.n	80064fa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8006576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800657a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8006582:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 8006584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 8006588:	461a      	mov	r2, r3
 800658a:	2001      	movs	r0, #1
 800658c:	f7ff ff2c 	bl	80063e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8006590:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	6852      	ldr	r2, [r2, #4]
 800659c:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4619      	mov	r1, r3
 80065a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065aa:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d001      	beq.n	80065b6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80065b2:	4c3b      	ldr	r4, [pc, #236]	; (80066a0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80065b4:	e062      	b.n	800667c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80065bc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	4935      	ldr	r1, [pc, #212]	; (80066a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 fe1e 	bl	8000210 <strcmp>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80065e0:	e00f      	b.n	8006602 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	4930      	ldr	r1, [pc, #192]	; (80066a8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7f9 fe11 	bl	8000210 <strcmp>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 80065f4:	2302      	movs	r3, #2
 80065f6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80065fa:	e002      	b.n	8006602 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	edd3 7a06 	vldr	s15, [r3, #24]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 800660c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ret = spectral::feature::spectral_analysis(
 8006612:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6a92      	ldr	r2, [r2, #40]	; 0x28
        ret = spectral::feature::spectral_analysis(
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006620:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8006624:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006628:	9102      	str	r1, [sp, #8]
 800662a:	9201      	str	r2, [sp, #4]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	eeb0 1a47 	vmov.f32	s2, s14
 8006632:	4623      	mov	r3, r4
 8006634:	eef0 0a67 	vmov.f32	s1, s15
 8006638:	4602      	mov	r2, r0
 800663a:	ed97 0a00 	vldr	s0, [r7]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	68b8      	ldr	r0, [r7, #8]
 8006642:	f7ff fc8b 	bl	8005f5c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8006646:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800664a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8006652:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006656:	4815      	ldr	r0, [pc, #84]	; (80066ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8006658:	f002 fbdc 	bl	8008e14 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800665c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006660:	e00c      	b.n	800667c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	461a      	mov	r2, r3
 8006668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800666c:	fb03 f202 	mul.w	r2, r3, r2
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2201      	movs	r2, #1
 8006678:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 800667a:	2400      	movs	r4, #0
    }
 800667c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006680:	4618      	mov	r0, r3
 8006682:	f7fa ff4b 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006686:	4623      	mov	r3, r4
 8006688:	4618      	mov	r0, r3
 800668a:	37bc      	adds	r7, #188	; 0xbc
 800668c:	46bd      	mov	sp, r7
 800668e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8006692:	bf00      	nop
 8006694:	0801f8cc 	.word	0x0801f8cc
 8006698:	0801f8f0 	.word	0x0801f8f0
 800669c:	fffffc10 	.word	0xfffffc10
 80066a0:	fffffc14 	.word	0xfffffc14
 80066a4:	0801f6a8 	.word	0x0801f6a8
 80066a8:	0801f6ac 	.word	0x0801f6ac
 80066ac:	0801f918 	.word	0x0801f918

080066b0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80066ba:	6138      	str	r0, [r7, #16]
 80066bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        if (filter_cutoff > sampling_freq / 2) {
 80066c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80066ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80066d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066de:	dd07      	ble.n	80066f0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x40>
            filter_cutoff = sampling_freq / 2;
 80066e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80066e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ec:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        float bin = filter_cutoff * fft_length / sampling_freq;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	ee07 3a90 	vmov	s15, r3
 80066f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006702:	ed97 7a05 	vldr	s14, [r7, #20]
 8006706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d021      	beq.n	8006758 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8006714:	69f8      	ldr	r0, [r7, #28]
 8006716:	f7f9 ff47 	bl	80005a8 <__aeabi_f2d>
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	4b1b      	ldr	r3, [pc, #108]	; (800678c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006720:	f7f9 fde2 	bl	80002e8 <__aeabi_dsub>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f7fa fa6c 	bl	8000c08 <__aeabi_d2uiz>
 8006730:	4603      	mov	r3, r0
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x96>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	e000      	b.n	8006748 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x98>
 8006746:	2301      	movs	r3, #1
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8006756:	e014      	b.n	8006782 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xd2>
            *start_bin = 1;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 800675e:	69f8      	ldr	r0, [r7, #28]
 8006760:	f7f9 ff22 	bl	80005a8 <__aeabi_f2d>
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	4b08      	ldr	r3, [pc, #32]	; (800678c <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 800676a:	f7f9 fdbf 	bl	80002ec <__adddf3>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4610      	mov	r0, r2
 8006774:	4619      	mov	r1, r3
 8006776:	f7fa fa47 	bl	8000c08 <__aeabi_d2uiz>
 800677a:	4603      	mov	r3, r0
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	601a      	str	r2, [r3, #0]
    }
 8006782:	bf00      	nop
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	3fe00000 	.word	0x3fe00000

08006790 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    /**
     * @brief Calculates the spectral analysis features.
     *
     * @return the number of features calculated
     */
    static size_t extract_spec_features(
 8006790:	b5b0      	push	{r4, r5, r7, lr}
 8006792:	b0ba      	sub	sp, #232	; 0xe8
 8006794:	af04      	add	r7, sp, #16
 8006796:	6178      	str	r0, [r7, #20]
 8006798:	6139      	str	r1, [r7, #16]
 800679a:	60fa      	str	r2, [r7, #12]
 800679c:	ed87 0a02 	vstr	s0, [r7, #8]
 80067a0:	71fb      	strb	r3, [r7, #7]
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq,
        const bool remove_mean = true,
        const bool transpose_and_scale_input = true)
    {
        if (transpose_and_scale_input) {
 80067a2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d013      	beq.n	80067d2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
            // transpose the matrix so we have one row per axis
            numpy::transpose_in_place(input_matrix);
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	f7fa ff80 	bl	80016b0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

            // func tests for scale of 1 and does a no op in that case
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067b6:	eeb0 0a67 	vmov.f32	s0, s15
 80067ba:	6978      	ldr	r0, [r7, #20]
 80067bc:	f7fb f888 	bl	80018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80067c0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80067c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
 80067cc:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80067d0:	e297      	b.n	8006d02 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        bool do_filter = false;
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	49cd      	ldr	r1, [pc, #820]	; (8006b14 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x384>)
 80067de:	4618      	mov	r0, r3
 80067e0:	f7f9 fd16 	bl	8000210 <strcmp>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d121      	bne.n	800682e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x9e>
            if( config->filter_order ) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	eef0 0a67 	vmov.f32	s1, s15
 8006804:	ed97 0a02 	vldr	s0, [r7, #8]
 8006808:	6978      	ldr	r0, [r7, #20]
 800680a:	f7fc ff9d 	bl	8003748 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800680e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8006812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
 800681a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800681e:	e270      	b.n	8006d02 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = false;
 8006826:	2300      	movs	r3, #0
 8006828:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800682c:	e029      	b.n	8006882 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	49b9      	ldr	r1, [pc, #740]	; (8006b18 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x388>)
 8006834:	4618      	mov	r0, r3
 8006836:	f7f9 fceb 	bl	8000210 <strcmp>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d120      	bne.n	8006882 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
            if( config->filter_order ) {
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d016      	beq.n	8006876 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	edd3 7a06 	vldr	s15, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	4619      	mov	r1, r3
 8006856:	eef0 0a67 	vmov.f32	s1, s15
 800685a:	ed97 0a02 	vldr	s0, [r7, #8]
 800685e:	6978      	ldr	r0, [r7, #20]
 8006860:	f7fc ffa8 	bl	80037b4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006864:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8006868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
 8006870:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8006874:	e245      	b.n	8006d02 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = true;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        }

        if (remove_mean){
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00b      	beq.n	80068a0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
            EI_TRY(processing::subtract_mean(input_matrix));
 8006888:	6978      	ldr	r0, [r7, #20]
 800688a:	f7fd fccb 	bl	8004224 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 800688e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8006892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
 800689a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800689e:	e230      	b.n	8006d02 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 80068a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d012      	beq.n	80068ce <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x13e>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            get_start_stop_bin(
 80068ac:	4618      	mov	r0, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80068b4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80068b8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80068bc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80068c0:	eef0 0a67 	vmov.f32	s1, s15
 80068c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80068c8:	f7ff fef2 	bl	80066b0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80068cc:	e009      	b.n	80068e2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x152>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80068ce:	2301      	movs	r3, #1
 80068d0:	67bb      	str	r3, [r7, #120]	; 0x78
            stop_bin = config->fft_length / 2 + 1;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da00      	bge.n	80068dc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x14c>
 80068da:	3301      	adds	r3, #1
 80068dc:	105b      	asrs	r3, r3, #1
 80068de:	3301      	adds	r3, #1
 80068e0:	677b      	str	r3, [r7, #116]	; 0x74
        }
        size_t num_bins = stop_bin - start_bin;
 80068e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        float *feature_out = output_matrix->buffer;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        const float *feature_out_ori = feature_out;
 80068f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006902:	e1ed      	b.n	8006ce0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x550>
            float *data_window = input_matrix->get_row_ptr(row);
 8006904:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8006908:	6978      	ldr	r0, [r7, #20]
 800690a:	f7fa fe1d 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800690e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            size_t data_size = input_matrix->cols;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            matrix_t rms_in_matrix(1, data_size, data_window);
 800691a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800691e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006926:	2101      	movs	r1, #1
 8006928:	f7fa fdcd 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 800692c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006934:	2201      	movs	r2, #1
 8006936:	2101      	movs	r1, #1
 8006938:	f7fa fdc5 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 800693c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb f898 	bl	8001a7c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800694c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8006950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d0>
 8006958:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800695c:	2500      	movs	r5, #0
 800695e:	e1a9      	b.n	8006cb4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>

            feature_out++;
 8006960:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006964:	3304      	adds	r3, #4
 8006966:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 800696a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800696e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (stddev == 0.0f) {
 8006976:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800697a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800697e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006982:	d102      	bne.n	800698a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1fa>
                stddev = 1e-10f;
 8006984:	4b65      	ldr	r3, [pc, #404]	; (8006b1c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x38c>)
 8006986:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            float k_sum = 0;
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 800699a:	2300      	movs	r3, #0
 800699c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069a0:	e03c      	b.n	8006a1c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x28c>
                temp = data_window[i] * data_window[i] * data_window[i];
 80069a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069ac:	4413      	add	r3, r2
 80069ae:	ed93 7a00 	vldr	s14, [r3]
 80069b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069bc:	4413      	add	r3, r2
 80069be:	edd3 7a00 	vldr	s15, [r3]
 80069c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069d0:	4413      	add	r3, r2
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                s_sum += temp;
 80069de:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80069e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80069e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ea:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                k_sum += temp * data_window[i];
 80069ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069f8:	4413      	add	r3, r2
 80069fa:	ed93 7a00 	vldr	s14, [r3]
 80069fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
            for (size_t i = 0; i < data_size; i++) {
 8006a12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a16:	3301      	adds	r3, #1
 8006a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3bc      	bcc.n	80069a2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x212>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 8006a28:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006a2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a30:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a38:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            *feature_out++ = (s_sum / data_size) / temp;
 8006a3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a48:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a54:	1d1a      	adds	r2, r3, #4
 8006a56:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006a5a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a62:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8006a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a72:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a7a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a7e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006a82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006a94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006a98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a9c:	edc3 7a00 	vstr	s15, [r3]

            if (config->implementation_version == 4) {
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	889b      	ldrh	r3, [r3, #4]
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	f040 80c0 	bne.w	8006c2a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x49a>

                size_t fft_out_size = config->fft_length / 2 + 1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da00      	bge.n	8006ab4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x324>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	105b      	asrs	r3, r3, #1
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ei_vector<float> fft_out(fft_out_size);
 8006abc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ac4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f003 f8d9 	bl	8009c80 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 8006ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 ff71 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	9101      	str	r1, [sp, #4]
 8006aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006af6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006afa:	f7fc f811 	bl	8002b20 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006afe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8006b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x390>
 8006b0a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006b0e:	2500      	movs	r5, #0
 8006b10:	e082      	b.n	8006c18 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x488>
 8006b12:	bf00      	nop
 8006b14:	0801f6a8 	.word	0x0801f6a8
 8006b18:	0801f6ac 	.word	0x0801f6ac
 8006b1c:	2edbe6ff 	.word	0x2edbe6ff
                    0,
                    fft_out_size,
                    config->fft_length,
                    config->do_fft_overlap));

                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 8006b20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b24:	4618      	mov	r0, r3
 8006b26:	f002 ff38 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b30:	4618      	mov	r0, r3
 8006b32:	f002 ff42 	bl	80099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006b3c:	462a      	mov	r2, r5
 8006b3e:	2101      	movs	r1, #1
 8006b40:	f7fa fcc1 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 8006b44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	f7fa fcba 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>

                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fb f85d 	bl	8001c1c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ea>
 8006b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fa fcea 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006b74:	4603      	mov	r3, r0
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	e001      	b.n	8006b7e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ee>
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b82:	1d19      	adds	r1, r3, #4
 8006b84:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006b88:	601a      	str	r2, [r3, #0]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fb f8dd 	bl	8001d54 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d108      	bne.n	8006bb2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x422>
 8006ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fa fcce 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006bac:	4603      	mov	r3, r0
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	e001      	b.n	8006bb6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x426>
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bba:	1d19      	adds	r1, r3, #4
 8006bbc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006bc0:	601a      	str	r2, [r3, #0]

                for (size_t i = start_bin; i < stop_bin; i++) {
 8006bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc8:	e016      	b.n	8006bf8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x468>
                    feature_out[i - start_bin] = fft_out[i];
 8006bca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f003 f889 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8006bd8:	4601      	mov	r1, r0
 8006bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006be8:	4413      	add	r3, r2
 8006bea:	680a      	ldr	r2, [r1, #0]
 8006bec:	601a      	str	r2, [r3, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 8006bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d3e3      	bcc.n	8006bca <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x43a>
                }
            } else {
 8006c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fa fc88 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006c0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fa fc83 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006c16:	2501      	movs	r5, #1
 8006c18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f003 f849 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006c22:	2d01      	cmp	r5, #1
 8006c24:	d01f      	beq.n	8006c66 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c26:	2500      	movs	r5, #0
 8006c28:	e044      	b.n	8006cb4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                EI_TRY(numpy::welch_max_hold(
 8006c2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c32:	4610      	mov	r0, r2
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006c3a:	9202      	str	r2, [sp, #8]
 8006c3c:	9001      	str	r0, [sp, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	460b      	mov	r3, r1
 8006c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c46:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006c4a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006c4e:	f7fb ff67 	bl	8002b20 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006c52:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8006c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c5e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8006c62:	2500      	movs	r5, #0
 8006c64:	e026      	b.n	8006cb4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                    start_bin,
                    stop_bin,
                    config->fft_length,
                    config->do_fft_overlap));
            }
            if (config->do_log) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d018      	beq.n	8006ca2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x512>
                numpy::zero_handling(feature_out, num_bins);
 8006c70:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c74:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006c78:	f7fc f818 	bl	8002cac <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8006c7c:	f107 0018 	add.w	r0, r7, #24
 8006c80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c84:	2201      	movs	r2, #1
 8006c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c8a:	f7fa fc1c 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fb fb0c 	bl	80022b0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
            }
 8006c98:	f107 0318 	add.w	r3, r7, #24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fa fc3d 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 8006ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cac:	4413      	add	r3, r2
 8006cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        }
 8006cb2:	2501      	movs	r5, #1
 8006cb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fa fc2f 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006cbe:	2d01      	cmp	r5, #1
 8006cc0:	d101      	bne.n	8006cc6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x536>
 8006cc2:	2501      	movs	r5, #1
 8006cc4:	e000      	b.n	8006cc8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x538>
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fa fc25 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 8006cd2:	2d01      	cmp	r5, #1
 8006cd4:	d115      	bne.n	8006d02 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006cd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cda:	3301      	adds	r3, #1
 8006cdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	f4ff ae0b 	bcc.w	8006904 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x174>
        size_t num_features = feature_out - feature_out_ori;
 8006cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	109b      	asrs	r3, r3, #2
 8006cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        return num_features;
 8006cfe:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    }
 8006d02:	4623      	mov	r3, r4
 8006d04:	4618      	mov	r0, r3
 8006d06:	37d8      	adds	r7, #216	; 0xd8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bdb0      	pop	{r4, r5, r7, pc}

08006d0c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        size_t n_features =
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	ed97 0a00 	vldr	s0, [r7]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fd30 	bl	8006790 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006d30:	6178      	str	r0, [r7, #20]
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d101      	bne.n	8006d40 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 8006d40:	4b02      	ldr	r3, [pc, #8]	; (8006d4c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x40>)
    }
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	fffffc14 	.word	0xfffffc14

08006d50 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b09a      	sub	sp, #104	; 0x68
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
    {
        if (r == 1 || r == 3 || r == 10) {
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d005      	beq.n	8006d6c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d002      	beq.n	8006d6c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b0a      	cmp	r3, #10
 8006d6a:	d10f      	bne.n	8006d8c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x3c>
            return {r};
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	f107 0310 	add.w	r3, r7, #16
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	2301      	movs	r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	f107 0314 	add.w	r3, r7, #20
 8006d7e:	f107 0208 	add.w	r2, r7, #8
 8006d82:	ca06      	ldmia	r2, {r1, r2}
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f003 ff8c 	bl	800aca2 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
            return {10, 10, 10};
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 8006d8a:	e04e      	b.n	8006e2a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 30) {
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b1e      	cmp	r3, #30
 8006d90:	d114      	bne.n	8006dbc <_ZN2ei8spectral7feature15get_ratio_comboEi+0x6c>
            return {3, 10};
 8006d92:	4a28      	ldr	r2, [pc, #160]	; (8006e34 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe4>)
 8006d94:	f107 0320 	add.w	r3, r7, #32
 8006d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d9c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006da0:	f107 0320 	add.w	r3, r7, #32
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	2302      	movs	r3, #2
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dae:	f107 0218 	add.w	r2, r7, #24
 8006db2:	ca06      	ldmia	r2, {r1, r2}
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f003 ff74 	bl	800aca2 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006dba:	e036      	b.n	8006e2a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 100) {
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b64      	cmp	r3, #100	; 0x64
 8006dc0:	d114      	bne.n	8006dec <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>
            return {10, 10};
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe8>)
 8006dc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dde:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006de2:	ca06      	ldmia	r2, {r1, r2}
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f003 ff5c 	bl	800aca2 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006dea:	e01e      	b.n	8006e2a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 1000) {
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df2:	d113      	bne.n	8006e1c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xcc>
            return {10, 10, 10};
 8006df4:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xec>)
 8006df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006dfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e04:	643b      	str	r3, [r7, #64]	; 0x40
 8006e06:	2303      	movs	r3, #3
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e0e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e12:	ca06      	ldmia	r2, {r1, r2}
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f003 ff44 	bl	800aca2 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e1a:	e006      	b.n	8006e2a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
            assert(0);
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf0>)
 8006e1e:	4a09      	ldr	r2, [pc, #36]	; (8006e44 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf4>)
 8006e20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e24:	4808      	ldr	r0, [pc, #32]	; (8006e48 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf8>)
 8006e26:	f015 f975 	bl	801c114 <__assert_func>
    }
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	3768      	adds	r7, #104	; 0x68
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	0801fa10 	.word	0x0801fa10
 8006e38:	0801fa18 	.word	0x0801fa18
 8006e3c:	0801fa20 	.word	0x0801fa20
 8006e40:	0801f398 	.word	0x0801f398
 8006e44:	0801f94c 	.word	0x0801f94c
 8006e48:	0801f990 	.word	0x0801f990

08006e4c <_ZN2ei6signal7sosfiltD1Ev>:
    struct sosfilt {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3308      	adds	r3, #8
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f002 ff2b 	bl	8009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b092      	sub	sp, #72	; 0x48
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d009      	beq.n	8006e8e <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b0a      	cmp	r3, #10
 8006e7e:	d006      	beq.n	8006e8e <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>)
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>)
 8006e84:	f240 212b 	movw	r1, #555	; 0x22b
 8006e88:	4827      	ldr	r0, [pc, #156]	; (8006f28 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc0>)
 8006e8a:	f015 f943 	bl	801c114 <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d101      	bne.n	8006e98 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x30>
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc4>)
 8006e96:	e000      	b.n	8006e9a <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x32>
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc8>)
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d101      	bne.n	8006ea6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x3e>
 8006ea2:	4b24      	ldr	r3, [pc, #144]	; (8006f34 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xcc>)
 8006ea4:	e000      	b.n	8006ea8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x40>
 8006ea6:	4b24      	ldr	r3, [pc, #144]	; (8006f38 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xd0>)
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fead 	bl	8005c10 <_ZN2ei6signal18get_decimated_sizeEjj>
 8006eb6:	6338      	str	r0, [r7, #48]	; 0x30

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006eb8:	2300      	movs	r3, #0
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ebc:	e026      	b.n	8006f0c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
            const float *x = input_matrix->get_row_ptr(row);
 8006ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7fa fb41 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
            float *y = output_matrix->get_row_ptr(row);
 8006ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eca:	68b8      	ldr	r0, [r7, #8]
 8006ecc:	f7fa fb3c 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ed0:	62b8      	str	r0, [r7, #40]	; 0x28
            signal::sosfilt sosfilt(sos, sos_zi, 4);
 8006ed2:	f107 0010 	add.w	r0, r7, #16
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006edc:	f7fe feaa 	bl	8005c34 <_ZN2ei6signal7sosfiltC1EPKfS3_j>
            signal::decimate_simple(
                x,
                input_matrix->cols,
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6899      	ldr	r1, [r3, #8]
                y,
                output_matrix->cols,
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	689a      	ldr	r2, [r3, #8]
            signal::decimate_simple(
 8006ee8:	f107 0310 	add.w	r3, r7, #16
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef8:	f7fe ff54 	bl	8005da4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>
                ratio,
                sosfilt);
        }
 8006efc:	f107 0310 	add.w	r3, r7, #16
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff ffa3 	bl	8006e4c <_ZN2ei6signal7sosfiltD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f08:	3301      	adds	r3, #1
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d3d3      	bcc.n	8006ebe <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x56>

        return out_size;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3740      	adds	r7, #64	; 0x40
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	0801fa2c 	.word	0x0801fa2c
 8006f24:	0801fa48 	.word	0x0801fa48
 8006f28:	0801f990 	.word	0x0801f990
 8006f2c:	20000000 	.word	0x20000000
 8006f30:	20000080 	.word	0x20000080
 8006f34:	20000060 	.word	0x20000060
 8006f38:	200000e0 	.word	0x200000e0

08006f3c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	b0b5      	sub	sp, #212	; 0xd4
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f52:	4611      	mov	r1, r2
 8006f54:	2244      	movs	r2, #68	; 0x44
 8006f56:	4618      	mov	r0, r3
 8006f58:	f016 fa55 	bl	801d406 <memcpy>
        auto config = &config_copy;
 8006f5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 8006f64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	4998      	ldr	r1, [pc, #608]	; (80071cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x290>)
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7f9 f94f 	bl	8000210 <strcmp>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x50>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 8006f78:	ed97 0a00 	vldr	s0, [r7]
 8006f7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7fe fd6a 	bl	8005a5c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	e19e      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 8006f8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11b      	bne.n	8006fd0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
 8006f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d116      	bne.n	8006fd0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
            size_t n_features =
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	ed97 0a00 	vldr	s0, [r7]
 8006fac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fbec 	bl	8006790 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006fb8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d101      	bne.n	8006fcc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
 8006fc8:	2400      	movs	r4, #0
 8006fca:	e17e      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 8006fcc:	4c80      	ldr	r4, [pc, #512]	; (80071d0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x294>)
 8006fce:	e17c      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else {
            numpy::transpose_in_place(input_matrix);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fa fb6d 	bl	80016b0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8006fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fde:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fa fc74 	bl	80018d0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006fe8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8006fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
 8006ff4:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006ff8:	e167      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>

            if (config->input_decimation_ratio > 1) {
 8006ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b01      	cmp	r3, #1
 8007002:	f340 8086 	ble.w	8007112 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d6>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 8007006:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007010:	4611      	mov	r1, r2
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fe9c 	bl	8006d50 <_ZN2ei8spectral7feature15get_ratio_comboEi>
                size_t out_size = input_matrix->cols;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007028:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800702c:	f003 fe5a 	bl	800ace4 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>
 8007030:	4603      	mov	r3, r0
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
 8007034:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007038:	f003 fe64 	bl	800ad04 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>
 800703c:	4603      	mov	r3, r0
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	e016      	b.n	8007070 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
 8007042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007046:	4618      	mov	r0, r3
 8007048:	f003 fe95 	bl	800ad76 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>
 800704c:	4603      	mov	r3, r0
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    out_size = _decimate(input_matrix, input_matrix, r);
 8007054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007058:	461a      	mov	r2, r3
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff ff03 	bl	8006e68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
 8007062:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706a:	4618      	mov	r0, r3
 800706c:	f003 fe73 	bl	800ad56 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>
 8007070:	f107 0220 	add.w	r2, r7, #32
 8007074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f003 fe53 	bl	800ad26 <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1dd      	bne.n	8007042 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                }

                // rearrange input matrix to be in the right shape after decimation
                float* out = input_matrix->get_row_ptr(0) + out_size;
 8007086:	2100      	movs	r1, #0
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7fa fa5d 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800708e:	4602      	mov	r2, r0
 8007090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 800709c:	2301      	movs	r3, #1
 800709e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070a2:	e027      	b.n	80070f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b8>
                    float *row = input_matrix->get_row_ptr(r);
 80070a4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7fa fa4d 	bl	8001548 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ae:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    for(size_t c = 0; c < out_size; c++) {
 80070b2:	2300      	movs	r3, #0
 80070b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070b8:	e011      	b.n	80070de <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a2>
                        *out++ = row[c];
 80070ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80070c4:	441a      	add	r2, r3
 80070c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ca:	1d19      	adds	r1, r3, #4
 80070cc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	601a      	str	r2, [r3, #0]
                    for(size_t c = 0; c < out_size; c++) {
 80070d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d8:	3301      	adds	r3, #1
 80070da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80070e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d3e7      	bcc.n	80070ba <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x17e>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 80070ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070ee:	3301      	adds	r3, #1
 80070f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d3d1      	bcc.n	80070a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                    }
                }
                input_matrix->cols = out_size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007106:	609a      	str	r2, [r3, #8]
            }
 8007108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800710c:	4618      	mov	r0, r3
 800710e:	f002 fe96 	bl	8009e3e <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>

            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 8007112:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	ee07 3a90 	vmov	s15, r3
 800711c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007120:	edd7 6a00 	vldr	s13, [r7]
 8007124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007128:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

            // filter here, before decimating, instead of inside extract_spec_features
            if (strcmp(config->filter_type, "low") == 0) {
 800712c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	4928      	ldr	r1, [pc, #160]	; (80071d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x298>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7f9 f86b 	bl	8000210 <strcmp>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d11d      	bne.n	800717c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x240>
                if( config->filter_order ) {
 8007140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d048      	beq.n	80071dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 800714a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800714e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007152:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	4619      	mov	r1, r3
 800715c:	eef0 0a67 	vmov.f32	s1, s15
 8007160:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7fc faef 	bl	8003748 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800716a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800716e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007172:	2b00      	cmp	r3, #0
 8007174:	d032      	beq.n	80071dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 8007176:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800717a:	e0a6      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
                        new_sampling_freq,
                        config->filter_cutoff,
                        config->filter_order));
                }
            }
            else if (strcmp(config->filter_type, "high") == 0) {
 800717c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4915      	ldr	r1, [pc, #84]	; (80071d8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x29c>)
 8007184:	4618      	mov	r0, r3
 8007186:	f7f9 f843 	bl	8000210 <strcmp>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d125      	bne.n	80071dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                if( config->filter_order ) {
 8007190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 800719a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800719e:	edd3 7a06 	vldr	s15, [r3, #24]
 80071a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	eef0 0a67 	vmov.f32	s1, s15
 80071b0:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7fc fafd 	bl	80037b4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80071ba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80071be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 80071c6:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80071ca:	e07e      	b.n	80072ca <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 80071cc:	0801faa0 	.word	0x0801faa0
 80071d0:	fffffc14 	.word	0xfffffc14
 80071d4:	0801f6a8 	.word	0x0801f6a8
 80071d8:	0801f6ac 	.word	0x0801f6ac
                        config->filter_order));
                }
            }
            
            // set the filter order to 0, so that we won't double filter
            config->filter_order = 0;
 80071dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071e0:	2200      	movs	r2, #0
 80071e2:	61da      	str	r2, [r3, #28]

            // do this before extract_spec_features because extract_spec_features modifies the matrix
            constexpr size_t decimation = 10;
 80071e4:	230a      	movs	r3, #10
 80071e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            const size_t decimated_size =
                signal::get_decimated_size(input_matrix->cols, decimation);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	210a      	movs	r1, #10
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe fd0d 	bl	8005c10 <_ZN2ei6signal18get_decimated_sizeEjj>
 80071f6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007202:	2300      	movs	r3, #0
 8007204:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007208:	f7fa f95d 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 800720c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007210:	220a      	movs	r2, #10
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff fe27 	bl	8006e68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>

            size_t n_features = extract_spec_features(
 800721a:	2300      	movs	r3, #0
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	2301      	movs	r3, #1
 8007220:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007224:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fab0 	bl	8006790 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007230:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                config,
                new_sampling_freq,
                true,
                false);

            if (n_features > 0 && config->extra_low_freq) {
 8007234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d038      	beq.n	80072ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
 800723c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d032      	beq.n	80072ae <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
                // disable filtering post decimation
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	6892      	ldr	r2, [r2, #8]
 8007250:	fb03 f202 	mul.w	r2, r3, r2
                    output_matrix->buffer + n_features);
 8007254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007258:	1ad1      	subs	r1, r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	f107 0010 	add.w	r0, r7, #16
 800726a:	460a      	mov	r2, r1
 800726c:	2101      	movs	r1, #1
 800726e:	f7fa f92a 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>

                n_features += extract_spec_features(
 8007272:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007276:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800727a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800727e:	f107 0110 	add.w	r1, r7, #16
 8007282:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2301      	movs	r3, #1
 800728c:	eeb0 0a47 	vmov.f32	s0, s14
 8007290:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007294:	f7ff fa7c 	bl	8006790 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007298:	4602      	mov	r2, r0
 800729a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800729e:	4413      	add	r3, r2
 80072a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    &lf_features,
                    config,
                    new_sampling_freq / decimation,
                    true,
                    false);
            }
 80072a4:	f107 0310 	add.w	r3, r7, #16
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fa f937 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d101      	bne.n	80072be <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x382>
 80072ba:	2400      	movs	r4, #0
 80072bc:	e000      	b.n	80072c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x384>
 80072be:	4c05      	ldr	r4, [pc, #20]	; (80072d4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x398>)
        }
 80072c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fa f929 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
    }
 80072ca:	4623      	mov	r3, r4
 80072cc:	4618      	mov	r0, r3
 80072ce:	37cc      	adds	r7, #204	; 0xcc
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd90      	pop	{r4, r7, pc}
 80072d4:	fffffc14 	.word	0xfffffc14

080072d8 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7f9 ff54 	bl	8001190 <_ZNSt14_Function_baseD1Ev>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f003 fd59 	bl	800adb4 <_ZNSt8functionIFijjPfEEC1Ev>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <_ZN2ei11ei_signal_tD1Ev>:
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ffde 	bl	80072d8 <_ZNSt8functionIFijjPfEED1Ev>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8007328:	b590      	push	{r4, r7, lr}
 800732a:	b08b      	sub	sp, #44	; 0x2c
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	6892      	ldr	r2, [r2, #8]
 8007344:	fbb3 f1f2 	udiv	r1, r3, r2
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	461a      	mov	r2, r3
 800734e:	f107 0014 	add.w	r0, r7, #20
 8007352:	2300      	movs	r3, #0
 8007354:	f7fa f8b7 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800735e:	4c23      	ldr	r4, [pc, #140]	; (80073ec <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>)
 8007360:	e039      	b.n	80073d6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2100      	movs	r1, #0
 800736c:	f002 fddc 	bl	8009f28 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	491e      	ldr	r1, [pc, #120]	; (80073f0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>)
 8007376:	4618      	mov	r0, r3
 8007378:	f7f8 ff4a 	bl	8000210 <strcmp>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d128      	bne.n	80073d4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>
        if (config->implementation_version == 1) {
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	889b      	ldrh	r3, [r3, #4]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d10a      	bne.n	80073a0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 800738a:	f107 0314 	add.w	r3, r7, #20
 800738e:	ed97 0a00 	vldr	s0, [r7]
 8007392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff f84a 	bl	8006430 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 800739c:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 800739e:	e01a      	b.n	80073d6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else if (config->implementation_version == 4) {
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	889b      	ldrh	r3, [r3, #4]
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d10a      	bne.n	80073be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
            return spectral::feature::extract_spectral_analysis_features_v4(
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	ed97 0a00 	vldr	s0, [r7]
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fdc1 	bl	8006f3c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073ba:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073bc:	e00b      	b.n	80073d6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	ed97 0a00 	vldr	s0, [r7]
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fc9e 	bl	8006d0c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073d0:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073d2:	e000      	b.n	80073d6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80073d4:	4c07      	ldr	r4, [pc, #28]	; (80073f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>)
}
 80073d6:	f107 0314 	add.w	r3, r7, #20
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fa f89e 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 80073e0:	4623      	mov	r3, r4
 80073e2:	4618      	mov	r0, r3
 80073e4:	372c      	adds	r7, #44	; 0x2c
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	fffffc16 	.word	0xfffffc16
 80073f0:	0801fc1c 	.word	0x0801fc1c
 80073f4:	fffffc0a 	.word	0xfffffc0a

080073f8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	60da      	str	r2, [r3, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3310      	adds	r3, #16
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ff65 	bl	80072f2 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	f000 f832 	bl	80074b2 <_ZN14SignalWithAxes8get_dataEjjPf>
 800744e:	4603      	mov	r3, r0
        };
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d102      	bne.n	8007474 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	e01a      	b.n	80074aa <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	fbb2 f3f3 	udiv	r3, r2, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6892      	ldr	r2, [r2, #8]
 8007488:	fb03 f202 	mul.w	r2, r3, r2
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]
        };
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f103 0210 	add.w	r2, r3, #16
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	f107 030c 	add.w	r3, r7, #12
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f003 fcbc 	bl	800ae1e <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3310      	adds	r3, #16
    }
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b08a      	sub	sp, #40	; 0x28
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	68d2      	ldr	r2, [r2, #12]
 80074ce:	6992      	ldr	r2, [r2, #24]
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	68d2      	ldr	r2, [r2, #12]
 80074e4:	6992      	ldr	r2, [r2, #24]
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	623b      	str	r3, [r7, #32]
 80074f4:	e02a      	b.n	800754c <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e01c      	b.n	8007536 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	4413      	add	r3, r2
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	461a      	mov	r2, r3
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	18d1      	adds	r1, r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	627a      	str	r2, [r7, #36]	; 0x24
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4413      	add	r3, r2
 800751e:	2201      	movs	r2, #1
 8007520:	f002 fd02 	bl	8009f28 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8007524:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e014      	b.n	800755a <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3301      	adds	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	429a      	cmp	r2, r3
 800753e:	d3dd      	bcc.n	80074fc <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	4413      	add	r3, r2
 800754a:	623b      	str	r3, [r7, #32]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	4413      	add	r3, r2
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	429a      	cmp	r2, r3
 8007556:	d3ce      	bcc.n	80074f6 <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8007558:	2300      	movs	r3, #0
    }
 800755a:	4618      	mov	r0, r3
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	f7fb fc86 	bl	8002e7e <_ZN18ei_impulse_state_tD1Ev>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800758a:	f06f 0314 	mvn.w	r3, #20
#endif
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6178      	str	r0, [r7, #20]
 80075a2:	6139      	str	r1, [r7, #16]
 80075a4:	60fa      	str	r2, [r7, #12]
 80075a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80075aa:	edc7 0a01 	vstr	s1, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075b0:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6178      	str	r0, [r7, #20]
 80075c8:	6139      	str	r1, [r7, #16]
 80075ca:	60fa      	str	r2, [r7, #12]
 80075cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80075d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80075d4:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	e03e      	b.n	800765a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f993 3000 	ldrsb.w	r3, [r3]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80075f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80075fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fe:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8007602:	78fb      	ldrb	r3, [r7, #3]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4619      	mov	r1, r3
 8007618:	4816      	ldr	r0, [pc, #88]	; (8007674 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 800761a:	f001 fbfb 	bl	8008e14 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800761e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007622:	f00f f845 	bl	80166b0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007626:	4814      	ldr	r0, [pc, #80]	; (8007678 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 8007628:	f001 fbf4 	bl	8008e14 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	6819      	ldr	r1, [r3, #0]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	3201      	adds	r2, #1
 8007640:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	3301      	adds	r3, #1
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4413      	add	r3, r2
 800764e:	3304      	adds	r3, #4
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	3301      	adds	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8007660:	461a      	mov	r2, r3
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4293      	cmp	r3, r2
 8007666:	d3b9      	bcc.n	80075dc <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3720      	adds	r7, #32
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	0801fec0 	.word	0x0801fec0
 8007678:	0801fc18 	.word	0x0801fc18

0800767c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e031      	b.n	80076f4 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]

        if (debug) {
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d011      	beq.n	80076c6 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	4816      	ldr	r0, [pc, #88]	; (800770c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 80076b4:	f001 fbae 	bl	8008e14 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80076b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80076bc:	f00e fff8 	bl	80166b0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80076c0:	4813      	ldr	r0, [pc, #76]	; (8007710 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 80076c2:	f001 fba7 	bl	8008e14 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	3201      	adds	r2, #1
 80076da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	3301      	adds	r3, #1
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	3304      	adds	r3, #4
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3301      	adds	r3, #1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80076fa:	461a      	mov	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	4293      	cmp	r3, r2
 8007700:	d3c6      	bcc.n	8007690 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	0801fec0 	.word	0x0801fec0
 8007710:	0801fc18 	.word	0x0801fc18

08007714 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800773e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800775c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800777a:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 8007798:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077b6:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
 80077d2:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077d4:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	e01e      	b.n	8007836 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	ed93 7a00 	vldr	s14, [r3]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	4413      	add	r3, r2
 800780c:	edd3 7a00 	vldr	s15, [r3]
 8007810:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4413      	add	r3, r2
 800781c:	ed93 7a00 	vldr	s14, [r3]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782c:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	3301      	adds	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d3dc      	bcc.n	80077f8 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 800783e:	bf00      	nop
 8007840:	bf00      	nop
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800784c:	b5b0      	push	{r4, r5, r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8007858:	f04f 0300 	mov.w	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800785e:	2300      	movs	r3, #0
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e029      	b.n	80078b8 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	ed93 7a00 	vldr	s14, [r3]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	edd3 7a00 	vldr	s15, [r3]
 800787e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007882:	2002      	movs	r0, #2
 8007884:	eeb0 0a67 	vmov.f32	s0, s15
 8007888:	f002 f910 	bl	8009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800788c:	ec55 4b10 	vmov	r4, r5, d0
 8007890:	6978      	ldr	r0, [r7, #20]
 8007892:	f7f8 fe89 	bl	80005a8 <__aeabi_f2d>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fd25 	bl	80002ec <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4610      	mov	r0, r2
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7f9 f9cd 	bl	8000c48 <__aeabi_d2f>
 80078ae:	4603      	mov	r3, r0
 80078b0:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	3301      	adds	r3, #1
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d3d1      	bcc.n	8007864 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 80078c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80078c4:	f7f9 fe84 	bl	80015d0 <_ZSt4sqrtf>
 80078c8:	eeb0 7a40 	vmov.f32	s14, s0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80078d2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80078d6:	eeb0 0a67 	vmov.f32	s0, s15
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bdb0      	pop	{r4, r5, r7, pc}

080078e0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 80078f0:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e018      	b.n	800792a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4413      	add	r3, r2
 8007900:	461a      	mov	r2, r3
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff ffa1 	bl	800784c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 800790a:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800790e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007912:	edd7 7a07 	vldr	s15, [r7, #28]
 8007916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d501      	bpl.n	8007924 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	3301      	adds	r3, #1
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d3e2      	bcc.n	80078f8 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	ee07 3a90 	vmov	s15, r3
}
 8007938:	eeb0 0a67 	vmov.f32	s0, s15
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	447a0000 	.word	0x447a0000

08007948 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8007948:	b480      	push	{r7}
 800794a:	b08d      	sub	sp, #52	; 0x34
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d11a      	bne.n	8007992 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 800795c:	2300      	movs	r3, #0
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007960:	e012      	b.n	8007988 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800796e:	440b      	add	r3, r1
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800797c:	440b      	add	r3, r1
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	3301      	adds	r3, #1
 8007986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d3e8      	bcc.n	8007962 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 8007990:	e053      	b.n	8007a3a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 800799e:	2300      	movs	r3, #0
 80079a0:	623b      	str	r3, [r7, #32]
 80079a2:	e044      	b.n	8007a2e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	e02c      	b.n	8007a0a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	6892      	ldr	r2, [r2, #8]
 80079c4:	fb03 f202 	mul.w	r2, r3, r2
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	4413      	add	r3, r2
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d820      	bhi.n	8007a14 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079dc:	440b      	add	r3, r1
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	1acb      	subs	r3, r1, r3
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	441a      	add	r2, r3
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079f0:	440b      	add	r3, r1
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	601a      	str	r2, [r3, #0]
                    input_pos++;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	3301      	adds	r3, #1
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d219      	bcs.n	8007a38 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	3301      	adds	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3ce      	bcc.n	80079b0 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8007a12:	e000      	b.n	8007a16 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8007a14:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	6892      	ldr	r2, [r2, #8]
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a24:	4413      	add	r3, r2
 8007a26:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	6a3a      	ldr	r2, [r7, #32]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d3b6      	bcc.n	80079a4 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8007a36:	e000      	b.n	8007a3a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8007a38:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3734      	adds	r7, #52	; 0x34
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8007a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8007a5a:	f00e fe0b 	bl	8016674 <_Z16ei_read_timer_msv>
 8007a5e:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	891b      	ldrh	r3, [r3, #8]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f00e ff25 	bl	80168b8 <_Z9ei_mallocj>
 8007a6e:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d105      	bne.n	8007a82 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8007a76:	4829      	ldr	r0, [pc, #164]	; (8007b1c <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8007a78:	f001 f9cc 	bl	8008e14 <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8007a7c:	f06f 030a 	mvn.w	r3, #10
 8007a80:	e047      	b.n	8007b12 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	460b      	mov	r3, r1
 8007a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	68b8      	ldr	r0, [r7, #8]
 8007a9a:	f7ff ff55 	bl	8007948 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	6959      	ldr	r1, [r3, #20]
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	891b      	ldrh	r3, [r3, #8]
 8007aaa:	69f8      	ldr	r0, [r7, #28]
 8007aac:	f7ff fe9a 	bl	80077e4 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8007abe:	69f8      	ldr	r0, [r7, #28]
 8007ac0:	f7ff ff0e 	bl	80078e0 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8007ac4:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8007ac8:	f00e fdd4 	bl	8016674 <_Z16ei_read_timer_msv>
 8007acc:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8007ad0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	480f      	ldr	r0, [pc, #60]	; (8007b20 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8007ae2:	f001 f997 	bl	8008e14 <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8007ae6:	ed97 0a06 	vldr	s0, [r7, #24]
 8007aea:	f00e fde1 	bl	80166b0 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8007aee:	480d      	ldr	r0, [pc, #52]	; (8007b24 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8007af0:	f001 f990 	bl	8008e14 <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    result->anomaly = anomaly;
 8007b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ei_free(input);
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f00e feee 	bl	80168ec <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3730      	adds	r7, #48	; 0x30
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	0801fec8 	.word	0x0801fec8
 8007b20:	0801fefc 	.word	0x0801fefc
 8007b24:	0801fc18 	.word	0x0801fc18

08007b28 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <_ZL17pre_cast_quantizefflb+0x1e>
 8007b42:	237f      	movs	r3, #127	; 0x7f
 8007b44:	e000      	b.n	8007b48 <_ZL17pre_cast_quantizefflb+0x20>
 8007b46:	23ff      	movs	r3, #255	; 0xff
 8007b48:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <_ZL17pre_cast_quantizefflb+0x2e>
 8007b50:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007b54:	e000      	b.n	8007b58 <_ZL17pre_cast_quantizefflb+0x30>
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8007b5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b66:	eeb0 0a66 	vmov.f32	s0, s13
 8007b6a:	f7f9 fd41 	bl	80015f0 <_ZSt5roundf>
 8007b6e:	eef0 7a40 	vmov.f32	s15, s0
 8007b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b76:	ee17 2a90 	vmov	r2, s15
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	61fb      	str	r3, [r7, #28]
 8007b80:	f107 0214 	add.w	r2, r7, #20
 8007b84:	f107 031c 	add.w	r3, r7, #28
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f003 fa13 	bl	800afb6 <_ZSt3maxIlERKT_S2_S2_>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f107 0318 	add.w	r3, r7, #24
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f003 f9f8 	bl	800af8e <_ZSt3minIlERKT_S2_S2_>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	681b      	ldr	r3, [r3, #0]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d201      	bcs.n	8007bc4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	e000      	b.n	8007bc6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007bc4:	687b      	ldr	r3, [r7, #4]
    }
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007bea:	2300      	movs	r3, #0
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bee:	e098      	b.n	8007d22 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	6892      	ldr	r2, [r2, #8]
 8007bfe:	fb02 f303 	mul.w	r3, r2, r3
 8007c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c04:	4413      	add	r3, r2
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d024      	beq.n	8007c5a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	dc7a      	bgt.n	8007d0a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d002      	beq.n	8007c1e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d04a      	beq.n	8007cb2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007c1c:	e075      	b.n	8007d0a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c1e:	2300      	movs	r3, #0
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c22:	e010      	b.n	8007c46 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	441a      	add	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6859      	ldr	r1, [r3, #4]
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	1c58      	adds	r0, r3, #1
 8007c36:	6338      	str	r0, [r7, #48]	; 0x30
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	3301      	adds	r3, #1
 8007c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	6892      	ldr	r2, [r2, #8]
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d3e5      	bcc.n	8007c24 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007c58:	e060      	b.n	8007d1c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5e:	e01e      	b.n	8007c9e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	eef0 0a67 	vmov.f32	s1, s15
 8007c80:	ed97 0a06 	vldr	s0, [r7, #24]
 8007c84:	f7ff ff50 	bl	8007b28 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	6339      	str	r1, [r7, #48]	; 0x30
 8007c92:	4413      	add	r3, r2
 8007c94:	b242      	sxtb	r2, r0
 8007c96:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	6892      	ldr	r2, [r2, #8]
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
 8007caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3d7      	bcc.n	8007c60 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8007cb0:	e034      	b.n	8007d1c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	623b      	str	r3, [r7, #32]
 8007cb6:	e01e      	b.n	8007cf6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	eef0 0a67 	vmov.f32	s1, s15
 8007cd8:	ed97 0a05 	vldr	s0, [r7, #20]
 8007cdc:	f7ff ff24 	bl	8007b28 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8007cea:	4413      	add	r3, r2
 8007cec:	b2c2      	uxtb	r2, r0
 8007cee:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	6892      	ldr	r2, [r2, #8]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	6a3a      	ldr	r2, [r7, #32]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d3d7      	bcc.n	8007cb8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007d08:	e008      	b.n	8007d1c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4814      	ldr	r0, [pc, #80]	; (8007d64 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8007d12:	f001 f87f 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007d16:	f06f 030c 	mvn.w	r3, #12
 8007d1a:	e01e      	b.n	8007d5a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	3301      	adds	r3, #1
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	f4ff af62 	bcc.w	8007bf0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	089b      	lsrs	r3, r3, #2
 8007d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d00f      	beq.n	8007d58 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d00a      	beq.n	8007d58 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007d46:	4619      	mov	r1, r3
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4806      	ldr	r0, [pc, #24]	; (8007d68 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8007d4e:	f001 f861 	bl	8008e14 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8007d52:	f06f 0317 	mvn.w	r3, #23
 8007d56:	e000      	b.n	8007d5a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3738      	adds	r7, #56	; 0x38
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	0801ff1c 	.word	0x0801ff1c
 8007d68:	0801ff40 	.word	0x0801ff40

08007d6c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	6892      	ldr	r2, [r2, #8]
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b09      	cmp	r3, #9
 8007d8a:	d026      	beq.n	8007dda <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	f300 8093 	bgt.w	8007eb8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d002      	beq.n	8007d9c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d057      	beq.n	8007e4a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007d9a:	e08d      	b.n	8007eb8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	089b      	lsrs	r3, r3, #2
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d00e      	beq.n	8007dc6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da00      	bge.n	8007db2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8007db0:	3303      	adds	r3, #3
 8007db2:	109b      	asrs	r3, r3, #2
 8007db4:	4619      	mov	r1, r3
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4846      	ldr	r0, [pc, #280]	; (8007ed4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007dbc:	f001 f82a 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007dc0:	f06f 0317 	mvn.w	r3, #23
 8007dc4:	e082      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f015 fb17 	bl	801d406 <memcpy>
            break;
 8007dd8:	e077      	b.n	8007eca <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d00a      	beq.n	8007dfa <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007de8:	4619      	mov	r1, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	461a      	mov	r2, r3
 8007dee:	4839      	ldr	r0, [pc, #228]	; (8007ed4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007df0:	f001 f810 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007df4:	f06f 0317 	mvn.w	r3, #23
 8007df8:	e068      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	e01e      	b.n	8007e3e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	f993 3000 	ldrsb.w	r3, [r3]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3db      	bcc.n	8007e00 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007e48:	e03f      	b.n	8007eca <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d00a      	beq.n	8007e6a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e58:	4619      	mov	r1, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	481d      	ldr	r0, [pc, #116]	; (8007ed4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e60:	f000 ffd8 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e64:	f06f 0317 	mvn.w	r3, #23
 8007e68:	e030      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e01d      	b.n	8007eac <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	4413      	add	r3, r2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e94:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	61bb      	str	r3, [r7, #24]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3dc      	bcc.n	8007e70 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8007eb6:	e008      	b.n	8007eca <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4806      	ldr	r0, [pc, #24]	; (8007ed8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8007ec0:	f000 ffa8 	bl	8008e14 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8007ec4:	f06f 030d 	mvn.w	r3, #13
 8007ec8:	e000      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	0801ffc8 	.word	0x0801ffc8
 8007ed8:	0802000c 	.word	0x0802000c

08007edc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08c      	sub	sp, #48	; 0x30
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	789b      	ldrb	r3, [r3, #2]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	f040 822d 	bne.w	8008354 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	2b09      	cmp	r3, #9
 8007f04:	f200 821c 	bhi.w	8008340 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007fab 	.word	0x08007fab
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007fb7 	.word	0x08007fb7
 8007f1c:	08008093 	.word	0x08008093
 8007f20:	08007fb7 	.word	0x08007fb7
 8007f24:	080080b3 	.word	0x080080b3
 8007f28:	080080fb 	.word	0x080080fb
 8007f2c:	080080fb 	.word	0x080080fb
 8007f30:	080081b9 	.word	0x080081b9
 8007f34:	08008283 	.word	0x08008283
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007f46:	7cfb      	ldrb	r3, [r7, #19]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01d      	beq.n	8007f88 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f66:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	eef0 0a47 	vmov.f32	s1, s14
 8007f74:	eeb0 0a67 	vmov.f32	s0, s15
 8007f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff fb0d 	bl	800759a <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8007f86:	e233      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007f90:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff faed 	bl	800757c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007fa8:	e222      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 8007faa:	48a4      	ldr	r0, [pc, #656]	; (800823c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 8007fac:	f000 ff32 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007fb0:	f06f 0309 	mvn.w	r3, #9
 8007fb4:	e21e      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8007fbc:	2b05      	cmp	r3, #5
 8007fbe:	d101      	bne.n	8007fc4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8007fc0:	2305      	movs	r3, #5
 8007fc2:	e000      	b.n	8007fc6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8007fc4:	2306      	movs	r3, #6
 8007fc6:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b09      	cmp	r3, #9
 8007fce:	d11e      	bne.n	800800e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8007fea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fee:	9201      	str	r2, [sp, #4]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	eef0 0a47 	vmov.f32	s1, s14
 8007ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f003 f80b 	bl	800b01c <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800800c:	e1f0      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d11e      	bne.n	8008054 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 800801e:	ee07 3a90 	vmov	s15, r3
 8008022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008030:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008034:	9201      	str	r2, [sp, #4]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	eef0 0a47 	vmov.f32	s1, s14
 800803c:	eeb0 0a67 	vmov.f32	s0, s15
 8008040:	460b      	mov	r3, r1
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f002 fffb 	bl	800b042 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008052:	e1cd      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d111      	bne.n	8008080 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 8008064:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008068:	9201      	str	r2, [sp, #4]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	460b      	mov	r3, r1
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7ff fb5c 	bl	8007730 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800807e:	e1b7      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	4619      	mov	r1, r3
 8008086:	486e      	ldr	r0, [pc, #440]	; (8008240 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 8008088:	f000 fec4 	bl	8008e14 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800808c:	f06f 0309 	mvn.w	r3, #9
 8008090:	e1b0      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 800809a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	460b      	mov	r3, r1
 80080a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff fb52 	bl	800774e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        debug);
                #endif
                break;
 80080b0:	e19e      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 80080b2:	2301      	movs	r3, #1
 80080b4:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e00d      	b.n	80080d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	fb02 f303 	mul.w	r3, r2, r3
 80080d0:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3301      	adds	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	dbeb      	blt.n	80080bc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff fb3d 	bl	800776c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 80080f8:	e17a      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b09      	cmp	r3, #9
 8008100:	d11c      	bne.n	800813c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800811c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	460b      	mov	r3, r1
 8008124:	eef0 0a47 	vmov.f32	s1, s14
 8008128:	eeb0 0a67 	vmov.f32	s0, s15
 800812c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f002 ff9a 	bl	800b068 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800813a:	e159      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b03      	cmp	r3, #3
 8008142:	d11c      	bne.n	800817e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800815e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	460b      	mov	r3, r1
 8008166:	eef0 0a47 	vmov.f32	s1, s14
 800816a:	eeb0 0a67 	vmov.f32	s0, s15
 800816e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f002 ff8c 	bl	800b08e <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800817c:	e138      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d10f      	bne.n	80081a6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 800818e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	460b      	mov	r3, r1
 8008196:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff faf6 	bl	800778a <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80081a4:	e124      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
 80081ac:	4825      	ldr	r0, [pc, #148]	; (8008244 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 80081ae:	f000 fe31 	bl	8008e14 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80081b2:	f06f 0309 	mvn.w	r3, #9
 80081b6:	e11d      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b09      	cmp	r3, #9
 80081be:	d11c      	bne.n	80081fa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081c8:	ee07 3a90 	vmov	s15, r3
 80081cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	460b      	mov	r3, r1
 80081e2:	eef0 0a47 	vmov.f32	s1, s14
 80081e6:	eeb0 0a67 	vmov.f32	s0, s15
 80081ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f002 ff61 	bl	800b0b4 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80081f2:	4603      	mov	r3, r0
 80081f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80081f8:	e0fa      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d122      	bne.n	8008248 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800821c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	460b      	mov	r3, r1
 8008224:	eef0 0a47 	vmov.f32	s1, s14
 8008228:	eeb0 0a67 	vmov.f32	s0, s15
 800822c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f002 ff53 	bl	800b0da <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008234:	4603      	mov	r3, r0
 8008236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800823a:	e0d9      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 800823c:	08020034 	.word	0x08020034
 8008240:	0802007c 	.word	0x0802007c
 8008244:	080200b4 	.word	0x080200b4
                else if (output->type == kTfLiteFloat32) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d10f      	bne.n	8008270 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008258:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	460b      	mov	r3, r1
 8008260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff faa0 	bl	80077a8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800826e:	e0bf      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	4619      	mov	r1, r3
 8008276:	4861      	ldr	r0, [pc, #388]	; (80083fc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 8008278:	f000 fdcc 	bl	8008e14 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800827c:	f06f 0309 	mvn.w	r3, #9
 8008280:	e0b8      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b09      	cmp	r3, #9
 8008288:	d11c      	bne.n	80082c4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082a4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	460b      	mov	r3, r1
 80082ac:	eef0 0a47 	vmov.f32	s1, s14
 80082b0:	eeb0 0a67 	vmov.f32	s0, s15
 80082b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f002 ff22 	bl	800b100 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80082bc:	4603      	mov	r3, r0
 80082be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80082c2:	e095      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d11c      	bne.n	8008306 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082e6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	460b      	mov	r3, r1
 80082ee:	eef0 0a47 	vmov.f32	s1, s14
 80082f2:	eeb0 0a67 	vmov.f32	s0, s15
 80082f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f002 ff14 	bl	800b126 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80082fe:	4603      	mov	r3, r0
 8008300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008304:	e074      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d10f      	bne.n	800832e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 8008316:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	460b      	mov	r3, r1
 800831e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fa50 	bl	80077c6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800832c:	e060      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	4832      	ldr	r0, [pc, #200]	; (8008400 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 8008336:	f000 fd6d 	bl	8008e14 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800833a:	f06f 0309 	mvn.w	r3, #9
 800833e:	e059      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8008346:	4619      	mov	r1, r3
 8008348:	482e      	ldr	r0, [pc, #184]	; (8008404 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 800834a:	f000 fd63 	bl	8008e14 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800834e:	f06f 0309 	mvn.w	r3, #9
 8008352:	e04f      	b.n	80083f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	789b      	ldrb	r3, [r3, #2]
 8008358:	2b05      	cmp	r3, #5
 800835a:	d113      	bne.n	8008384 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008362:	f083 0301 	eor.w	r3, r3, #1
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d041      	beq.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff f9cc 	bl	8007714 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008382:	e035      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 8008384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008386:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800838a:	f083 0301 	eor.w	r3, r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02d      	beq.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b09      	cmp	r3, #9
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 80083a2:	7efb      	ldrb	r3, [r7, #27]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d018      	beq.n	80083da <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80083be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80083c2:	eef0 0a47 	vmov.f32	s1, s14
 80083c6:	eeb0 0a67 	vmov.f32	s0, s15
 80083ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff f8f7 	bl	80075c0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083d8:	e00a      	b.n	80083f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80083e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff f949 	bl	800767c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 80083f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	080200e8 	.word	0x080200e8
 8008400:	0802011c 	.word	0x0802011c
 8008404:	08020150 	.word	0x08020150

08008408 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 800841c:	f00e f937 	bl	801668e <_Z16ei_read_timer_usv>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	4829      	ldr	r0, [pc, #164]	; (80084d4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 8008436:	7cfb      	ldrb	r3, [r7, #19]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 800843c:	7cfb      	ldrb	r3, [r7, #19]
 800843e:	4619      	mov	r1, r3
 8008440:	4825      	ldr	r0, [pc, #148]	; (80084d8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 8008442:	f000 fce7 	bl	8008e14 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8008446:	f06f 0305 	mvn.w	r3, #5
 800844a:	e03f      	b.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	2000      	movs	r0, #0
 8008454:	4798      	blx	r3
 8008456:	4603      	mov	r3, r0
 8008458:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 800845a:	7cbb      	ldrb	r3, [r7, #18]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 8008460:	f06f 0302 	mvn.w	r3, #2
 8008464:	e032      	b.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	7a92      	ldrb	r2, [r2, #10]
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	4603      	mov	r3, r0
 8008476:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8008478:	7cbb      	ldrb	r3, [r7, #18]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 800847e:	f06f 0302 	mvn.w	r3, #2
 8008482:	e023      	b.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d11d      	bne.n	80084ca <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	7b12      	ldrb	r2, [r2, #12]
 8008496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084a0:	7cbb      	ldrb	r3, [r7, #18]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 80084a6:	f06f 0302 	mvn.w	r3, #2
 80084aa:	e00f      	b.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	7ad2      	ldrb	r2, [r2, #11]
 80084b4:	6a39      	ldr	r1, [r7, #32]
 80084b6:	4610      	mov	r0, r2
 80084b8:	4798      	blx	r3
 80084ba:	4603      	mov	r3, r0
 80084bc:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084be:	7cbb      	ldrb	r3, [r7, #18]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 80084c4:	f06f 0302 	mvn.w	r3, #2
 80084c8:	e000      	b.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	080011f9 	.word	0x080011f9
 80084d8:	08020184 	.word	0x08020184

080084dc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af04      	add	r7, sp, #16
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf14      	ite	ne
 80084fc:	2301      	movne	r3, #1
 80084fe:	2300      	moveq	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 8008506:	f06f 0302 	mvn.w	r3, #2
 800850a:	e04d      	b.n	80085a8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 800850c:	f00e f8bf 	bl	801668e <_Z16ei_read_timer_usv>
 8008510:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8008514:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800851c:	1a84      	subs	r4, r0, r2
 800851e:	eb61 0503 	sbc.w	r5, r1, r3
 8008522:	4622      	mov	r2, r4
 8008524:	462b      	mov	r3, r5
 8008526:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008528:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800852c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8008532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	f7f8 fbd5 	bl	8000ce8 <__aeabi_ldivmod>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008544:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8008548:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8008550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008556:	4619      	mov	r1, r3
 8008558:	4815      	ldr	r0, [pc, #84]	; (80085b0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 800855a:	f000 fc5b 	bl	8008e14 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 800855e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008562:	9302      	str	r3, [sp, #8]
 8008564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fcb2 	bl	8007edc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 8008578:	4603      	mov	r3, r0
 800857a:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 800857c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 8008584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008588:	e00e      	b.n	80085a8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800858a:	f00e f86b 	bl	8016664 <_Z29ei_run_impulse_check_canceledv>
 800858e:	4603      	mov	r3, r0
 8008590:	f113 0f02 	cmn.w	r3, #2
 8008594:	bf0c      	ite	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	2300      	movne	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80085a0:	f06f 0301 	mvn.w	r3, #1
 80085a4:	e000      	b.n	80085a8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3728      	adds	r7, #40	; 0x28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bdb0      	pop	{r4, r5, r7, pc}
 80085b0:	080201b4 	.word	0x080201b4

080085b4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 80085b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b6:	b0d7      	sub	sp, #348	; 0x15c
 80085b8:	af06      	add	r7, sp, #24
 80085ba:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 80085be:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 80085c2:	6030      	str	r0, [r6, #0]
 80085c4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80085c8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80085cc:	6001      	str	r1, [r0, #0]
 80085ce:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80085d2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80085d6:	600a      	str	r2, [r1, #0]
 80085d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80085dc:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80085e0:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 80085e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80085e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 80085ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 80085f4:	f00e f84b 	bl	801668e <_Z16ei_read_timer_usv>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8008600:	4b65      	ldr	r3, [pc, #404]	; (8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008602:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008606:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	2100      	movs	r1, #0
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fa7d 	bl	8009b10 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 8008616:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800861a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800861e:	f107 0118 	add.w	r1, r7, #24
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	9302      	str	r3, [sp, #8]
 8008628:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	4603      	mov	r3, r0
 8008636:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800863a:	f7ff fee5 	bl	8008408 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8008644:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 800864c:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 8008650:	e096      	b.n	8008780 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fd78 	bl	800b14c <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800865c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8008660:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800866c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008670:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008678:	4413      	add	r3, r2
 800867a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 800867e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008682:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8008686:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800868a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800868e:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 8008692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	f7ff fa98 	bl	8007bd4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 80086aa:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 80086b2:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 80086b6:	e063      	b.n	8008780 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 80086b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086bc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80086c0:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 80086c4:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80086ce:	9104      	str	r1, [sp, #16]
 80086d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80086d4:	9103      	str	r1, [sp, #12]
 80086d6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80086da:	9102      	str	r1, [sp, #8]
 80086dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80086e0:	9101      	str	r1, [sp, #4]
 80086e2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80086e6:	9100      	str	r1, [sp, #0]
 80086e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f7ff fef5 	bl	80084dc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 80086f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80086fc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008700:	2b00      	cmp	r3, #0
 8008702:	d023      	beq.n	800874c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8008704:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008708:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008710:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008714:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4413      	add	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008722:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	4413      	add	r3, r2
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fb1a 	bl	8007d6c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 800873e:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 8008746:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 800874a:	e019      	b.n	8008780 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 800874c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	4811      	ldr	r0, [pc, #68]	; (8008798 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008754:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8008756:	f00d ff9a 	bl	801668e <_Z16ei_read_timer_usv>
 800875a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800875e:	1a84      	subs	r4, r0, r2
 8008760:	eb61 0503 	sbc.w	r5, r1, r3
 8008764:	4622      	mov	r2, r4
 8008766:	462b      	mov	r3, r5
 8008768:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800876c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8008770:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8008778:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 800877c:	e000      	b.n	8008780 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 800877e:	2400      	movs	r4, #0
}
 8008780:	f107 0310 	add.w	r3, r7, #16
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f9d8 	bl	8009b3a <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 800878a:	4623      	mov	r3, r4
 800878c:	4618      	mov	r0, r3
 800878e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008792:	46bd      	mov	sp, r7
 8008794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008796:	bf00      	nop
 8008798:	0800127d 	.word	0x0800127d

0800879c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800879c:	b5b0      	push	{r4, r5, r7, lr}
 800879e:	b094      	sub	sp, #80	; 0x50
 80087a0:	af04      	add	r7, sp, #16
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	330c      	adds	r3, #12
 80087ae:	63bb      	str	r3, [r7, #56]	; 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b4:	e02f      	b.n	8008816 <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	015b      	lsls	r3, r3, #5
 80087c0:	4413      	add	r3, r2
 80087c2:	f107 0414 	add.w	r4, r7, #20
 80087c6:	461d      	mov	r5, r3
 80087c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 80087d4:	7e3a      	ldrb	r2, [r7, #24]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 80087dc:	69fc      	ldr	r4, [r7, #28]
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	6a3a      	ldr	r2, [r7, #32]
 80087e8:	78f9      	ldrb	r1, [r7, #3]
 80087ea:	9103      	str	r1, [sp, #12]
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	9201      	str	r2, [sp, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	462b      	mov	r3, r5
 80087f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	47a0      	blx	r4
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (res != EI_IMPULSE_OK) {
 8008802:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <run_inference+0x74>
            return res;
 800880a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800880e:	e017      	b.n	8008840 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	3301      	adds	r3, #1
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800881e:	429a      	cmp	r2, r3
 8008820:	d3c9      	bcc.n	80087b6 <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008822:	f00d ff1f 	bl	8016664 <_Z29ei_run_impulse_check_canceledv>
 8008826:	4603      	mov	r3, r0
 8008828:	f113 0f02 	cmn.w	r3, #2
 800882c:	bf0c      	ite	eq
 800882e:	2301      	moveq	r3, #1
 8008830:	2300      	movne	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 8008838:	f06f 0301 	mvn.w	r3, #1
 800883c:	e000      	b.n	8008840 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3740      	adds	r7, #64	; 0x40
 8008844:	46bd      	mov	sp, r7
 8008846:	bdb0      	pop	{r4, r5, r7, pc}

08008848 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	4611      	mov	r1, r2
 8008858:	4618      	mov	r0, r3
 800885a:	f002 fcbb 	bl	800b1d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ffe5 	bl	8008848 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3310      	adds	r3, #16
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fd39 	bl	800730c <_ZN2ei11ei_signal_tD1Ev>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 80088a4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80088a8:	b0a6      	sub	sp, #152	; 0x98
 80088aa:	af02      	add	r7, sp, #8
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	70fb      	strb	r3, [r7, #3]
 80088b4:	2600      	movs	r6, #0
    if(!handle) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 80088bc:	f06f 0615 	mvn.w	r6, #21
 80088c0:	e24c      	b.n	8008d5c <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 80088c2:	f44f 7284 	mov.w	r2, #264	; 0x108
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f014 fcbb 	bl	801d244 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088da:	4413      	add	r3, r2
 80088dc:	67bb      	str	r3, [r7, #120]	; 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 80088de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088e4:	d201      	bcs.n	80088ea <process_impulse+0x46>
 80088e6:	00db      	lsls	r3, r3, #3
 80088e8:	e001      	b.n	80088ee <process_impulse+0x4a>
 80088ea:	f04f 33ff 	mov.w	r3, #4294967295
 80088ee:	4618      	mov	r0, r3
 80088f0:	f010 fe91 	bl	8019616 <_Znaj>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f002 fabc 	bl	800ae7c <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8008904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008908:	4618      	mov	r0, r3
 800890a:	f002 fae5 	bl	800aed8 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 800890e:	6778      	str	r0, [r7, #116]	; 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8008910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	461a      	mov	r2, r3
 8008916:	2100      	movs	r1, #0
 8008918:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800891a:	f014 fc93 	bl	801d244 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 800891e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8008920:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008924:	429c      	cmp	r4, r3
 8008926:	d202      	bcs.n	800892e <process_impulse+0x8a>
 8008928:	1ca3      	adds	r3, r4, #2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	e001      	b.n	8008932 <process_impulse+0x8e>
 800892e:	f04f 33ff 	mov.w	r3, #4294967295
 8008932:	4618      	mov	r0, r3
 8008934:	f010 fe6f 	bl	8019616 <_Znaj>
 8008938:	4603      	mov	r3, r0
 800893a:	461d      	mov	r5, r3
 800893c:	2304      	movs	r3, #4
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	1d2b      	adds	r3, r5, #4
 8008942:	601c      	str	r4, [r3, #0]
 8008944:	f105 0308 	add.w	r3, r5, #8
 8008948:	1e62      	subs	r2, r4, #1
 800894a:	4614      	mov	r4, r2
 800894c:	4698      	mov	r8, r3
 800894e:	e005      	b.n	800895c <process_impulse+0xb8>
 8008950:	4640      	mov	r0, r8
 8008952:	f002 fc2f 	bl	800b1b4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8008956:	f108 0804 	add.w	r8, r8, #4
 800895a:	3c01      	subs	r4, #1
 800895c:	2c00      	cmp	r4, #0
 800895e:	daf7      	bge.n	8008950 <process_impulse+0xac>
 8008960:	f105 0308 	add.w	r3, r5, #8
 8008964:	673b      	str	r3, [r7, #112]	; 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 8008966:	f00d fe92 	bl	801668e <_Z16ei_read_timer_usv>
 800896a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008974:	2300      	movs	r3, #0
 8008976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800897a:	e13c      	b.n	8008bf6 <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008986:	015b      	lsls	r3, r3, #5
 8008988:	4413      	add	r3, r2
 800898a:	f107 0410 	add.w	r4, r7, #16
 800898e:	461d      	mov	r5, r3
 8008990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008994:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 800899c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089a4:	18d4      	adds	r4, r2, r3
 80089a6:	2010      	movs	r0, #16
 80089a8:	f010 fe24 	bl	80195f4 <_Znwj>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461d      	mov	r5, r3
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	2300      	movs	r3, #0
 80089b4:	2101      	movs	r1, #1
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7f8 fd85 	bl	80014c6 <_ZN2ei9ei_matrixC1EmmPf>
 80089bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089c0:	4629      	mov	r1, r5
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 faa5 	bl	800af12 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80089c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089cc:	4619      	mov	r1, r3
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff ff4a 	bl	8008868 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80089d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089d8:	4618      	mov	r0, r3
 80089da:	f002 faa9 	bl	800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 80089de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089e6:	18d1      	adds	r1, r2, r3
 80089e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80089f0:	18d4      	adds	r4, r2, r3
 80089f2:	4608      	mov	r0, r1
 80089f4:	f002 fabe 	bl	800af74 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 80089f8:	4603      	mov	r3, r0
 80089fa:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 80089fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a04:	4413      	add	r3, r2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d922      	bls.n	8008a62 <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8008a1c:	48a6      	ldr	r0, [pc, #664]	; (8008cb8 <process_impulse+0x414>)
 8008a1e:	f000 f9f9 	bl	8008e14 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d019      	beq.n	8008a5c <process_impulse+0x1b8>
 8008a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a2a:	3b04      	subs	r3, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a32:	18d4      	adds	r4, r2, r3
 8008a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a36:	429c      	cmp	r4, r3
 8008a38:	d004      	beq.n	8008a44 <process_impulse+0x1a0>
 8008a3a:	3c04      	subs	r4, #4
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f002 fa77 	bl	800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a42:	e7f7      	b.n	8008a34 <process_impulse+0x190>
 8008a44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a46:	f1a3 0208 	sub.w	r2, r3, #8
 8008a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4c:	3b04      	subs	r3, #4
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3302      	adds	r3, #2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	f010 fdca 	bl	80195f0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008a5c:	f06f 0604 	mvn.w	r6, #4
 8008a60:	e176      	b.n	8008d50 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	460b      	mov	r3, r1
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	f7fe fcc0 	bl	80073f8 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8008a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe fceb 	bl	8007458 <_ZN14SignalWithAxes10get_signalEv>
 8008a82:	6638      	str	r0, [r7, #96]	; 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d038      	beq.n	8008afc <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8008a8a:	4b8c      	ldr	r3, [pc, #560]	; (8008cbc <process_impulse+0x418>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	f083 0301 	eor.w	r3, r3, #1
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8008a98:	4b89      	ldr	r3, [pc, #548]	; (8008cc0 <process_impulse+0x41c>)
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4889      	ldr	r0, [pc, #548]	; (8008cc4 <process_impulse+0x420>)
 8008aa0:	f000 f9b8 	bl	8008e14 <_Z9ei_printfPKcz>
 8008aa4:	4888      	ldr	r0, [pc, #544]	; (8008cc8 <process_impulse+0x424>)
 8008aa6:	f000 f9b5 	bl	8008e14 <_Z9ei_printfPKcz>
                has_printed = true;
 8008aaa:	4b84      	ldr	r3, [pc, #528]	; (8008cbc <process_impulse+0x418>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fa f983 	bl	8002dc2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8008abc:	65f8      	str	r0, [r7, #92]	; 0x5c
            if(dsp_handle) {
 8008abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d017      	beq.n	8008af4 <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	681c      	ldr	r4, [r3, #0]
 8008acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ad4:	4413      	add	r3, r2
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	69f9      	ldr	r1, [r7, #28]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008aea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008aec:	47a0      	blx	r4
 8008aee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8008af2:	e016      	b.n	8008b22 <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8008af4:	f06f 060a 	mvn.w	r6, #10
 8008af8:	2400      	movs	r4, #0
 8008afa:	e06f      	b.n	8008bdc <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b02:	00d2      	lsls	r2, r2, #3
 8008b04:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008b06:	440a      	add	r2, r1
 8008b08:	6811      	ldr	r1, [r2, #0]
 8008b0a:	69f8      	ldr	r0, [r7, #28]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	68d2      	ldr	r2, [r2, #12]
 8008b10:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008b14:	eeb0 0a67 	vmov.f32	s0, s15
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008b1c:	4798      	blx	r3
 8008b1e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        }

        if (ret != EIDSP_OK) {
 8008b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d025      	beq.n	8008b76 <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8008b2a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008b2e:	4867      	ldr	r0, [pc, #412]	; (8008ccc <process_impulse+0x428>)
 8008b30:	f000 f970 	bl	8008e14 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d019      	beq.n	8008b6e <process_impulse+0x2ca>
 8008b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b44:	18d4      	adds	r4, r2, r3
 8008b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d004      	beq.n	8008b56 <process_impulse+0x2b2>
 8008b4c:	3c04      	subs	r4, #4
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f002 f9ee 	bl	800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008b54:	e7f7      	b.n	8008b46 <process_impulse+0x2a2>
 8008b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b58:	f1a3 0208 	sub.w	r2, r3, #8
 8008b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5e:	3b04      	subs	r3, #4
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3302      	adds	r3, #2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f010 fd41 	bl	80195f0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008b6e:	f06f 0604 	mvn.w	r6, #4
 8008b72:	2400      	movs	r4, #0
 8008b74:	e032      	b.n	8008bdc <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008b76:	f00d fd75 	bl	8016664 <_Z29ei_run_impulse_check_canceledv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f113 0f02 	cmn.w	r3, #2
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d020      	beq.n	8008bce <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8008b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d019      	beq.n	8008bc6 <process_impulse+0x322>
 8008b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b94:	3b04      	subs	r3, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b9c:	18d4      	adds	r4, r2, r3
 8008b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ba0:	429c      	cmp	r4, r3
 8008ba2:	d004      	beq.n	8008bae <process_impulse+0x30a>
 8008ba4:	3c04      	subs	r4, #4
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f002 f9c2 	bl	800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008bac:	e7f7      	b.n	8008b9e <process_impulse+0x2fa>
 8008bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb0:	f1a3 0208 	sub.w	r2, r3, #8
 8008bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb6:	3b04      	subs	r3, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3302      	adds	r3, #2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f010 fd15 	bl	80195f0 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8008bc6:	f06f 0601 	mvn.w	r6, #1
 8008bca:	2400      	movs	r4, #0
 8008bcc:	e006      	b.n	8008bdc <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }
 8008bda:	2401      	movs	r4, #1
 8008bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fe51 	bl	8008888 <_ZN14SignalWithAxesD1Ev>
 8008be6:	2c01      	cmp	r4, #1
 8008be8:	f040 80b2 	bne.w	8008d50 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c00:	429a      	cmp	r2, r3
 8008c02:	f4ff aebb 	bcc.w	800897c <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8008c06:	f00d fd42 	bl	801668e <_Z16ei_read_timer_usv>
 8008c0a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c0e:	ebb0 0a02 	subs.w	sl, r0, r2
 8008c12:	eb61 0b03 	sbc.w	fp, r1, r3
 8008c16:	4652      	mov	r2, sl
 8008c18:	465b      	mov	r3, fp
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8008c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	f7f8 f85b 	bl	8000ce8 <__aeabi_ldivmod>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d057      	beq.n	8008cf2 <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4821      	ldr	r0, [pc, #132]	; (8008cd0 <process_impulse+0x42c>)
 8008c4c:	f000 f8e2 	bl	8008e14 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8008c50:	2300      	movs	r3, #0
 8008c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c56:	e047      	b.n	8008ce8 <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8008c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c60:	4413      	add	r3, r2
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d039      	beq.n	8008cdc <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008c68:	2300      	movs	r3, #0
 8008c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c6c:	e015      	b.n	8008c9a <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8008c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c76:	4413      	add	r3, r2
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	edd3 7a00 	vldr	s15, [r3]
 8008c86:	eeb0 0a67 	vmov.f32	s0, s15
 8008c8a:	f00d fd11 	bl	80166b0 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8008c8e:	4811      	ldr	r0, [pc, #68]	; (8008cd4 <process_impulse+0x430>)
 8008c90:	f000 f8c0 	bl	8008e14 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c96:	3301      	adds	r3, #1
 8008c98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008ca2:	4413      	add	r3, r2
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d3df      	bcc.n	8008c6e <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8008cae:	480a      	ldr	r0, [pc, #40]	; (8008cd8 <process_impulse+0x434>)
 8008cb0:	f000 f8b0 	bl	8008e14 <_Z9ei_printfPKcz>
 8008cb4:	e013      	b.n	8008cde <process_impulse+0x43a>
 8008cb6:	bf00      	nop
 8008cb8:	08020260 	.word	0x08020260
 8008cbc:	200012a8 	.word	0x200012a8
 8008cc0:	20000100 	.word	0x20000100
 8008cc4:	0802028c 	.word	0x0802028c
 8008cc8:	08020294 	.word	0x08020294
 8008ccc:	08020300 	.word	0x08020300
 8008cd0:	08020328 	.word	0x08020328
 8008cd4:	0802033c 	.word	0x0802033c
 8008cd8:	0801fc18 	.word	0x0801fc18
                continue;
 8008cdc:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8008cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d3b2      	bcc.n	8008c58 <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8008cf8:	481b      	ldr	r0, [pc, #108]	; (8008d68 <process_impulse+0x4c4>)
 8008cfa:	f000 f88b 	bl	8008e14 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f7ff fd49 	bl	800879c <run_inference>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    delete[] matrix_ptrs;
 8008d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d019      	beq.n	8008d4a <process_impulse+0x4a6>
 8008d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d18:	3b04      	subs	r3, #4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d20:	18d4      	adds	r4, r2, r3
 8008d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d24:	429c      	cmp	r4, r3
 8008d26:	d004      	beq.n	8008d32 <process_impulse+0x48e>
 8008d28:	3c04      	subs	r4, #4
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f002 f900 	bl	800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008d30:	e7f7      	b.n	8008d22 <process_impulse+0x47e>
 8008d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d34:	f1a3 0208 	sub.w	r2, r3, #8
 8008d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3302      	adds	r3, #2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f010 fc53 	bl	80195f0 <_ZdaPvj>
    return res;
 8008d4a:	f997 6067 	ldrsb.w	r6, [r7, #103]	; 0x67
 8008d4e:	e000      	b.n	8008d52 <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8008d50:	bf00      	nop
}
 8008d52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 f89f 	bl	800ae9a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8008d5c:	4633      	mov	r3, r6
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3790      	adds	r7, #144	; 0x90
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8008d68:	08020340 	.word	0x08020340

08008d6c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8008d7a:	4805      	ldr	r0, [pc, #20]	; (8008d90 <run_classifier+0x24>)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	f7ff fd8f 	bl	80088a4 <process_impulse>
 8008d86:	4603      	mov	r3, r0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20001298 	.word	0x20001298

08008d94 <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		512, 3396, 3935, 2114, 660, 1601, 3152, 6065, 2421, 4867, 7793, 7851, 3508, 4796, 5430, 8705, 8243, 9593, 11198, 7716, 7701, 6712, 10509, 7966, 8651, 10027, 10788, 15139, 9860, 16103, 12564, 14020, 12813, 17362, 13905, 18191, 17450, 17579, 17450, 15294, 16900, 20380, 18904, 17576, 17261, 17190, 21925, 21628, 23730, 24211, 23261, 26026, 21028, 22584, 25129, 26257, 27613, 24924, 27929, 27932, 27871, 25162, 30061, 29647, 27337, 27347, 27533, 28582, 32218, 32442, 31346, 34706, 32624, 34016, 35922, 30812, 33019, 35495, 36944, 34377, 33872, 35628, 37840, 35586, 35625, 38569, 38966, 37640, 39658, 39471, 40706, 42398, 40305, 45288, 40134, 42972, 41473, 44885, 42207, 42247, 48261, 48472, 45292, 44280, 48284, 46024, 45026, 48650, 50938, 51430, 50313, 49329, 47922, 54441, 54876, 50954, 50515, 50995, 50590, 51440, 53186, 53719, 55124, 55437, 53558, 53540, 54805, 60709, 59303, 57352, 62334, 56279, 59051, 62972, 58740, 61268, 59820, 65410, 63940, 60028, 63955, 63379, 62068, 64702, 65535, 65535, 63748, 65134, 64383, 63285, 64872, 61070, 59888, 58800, 59774, 61928, 61090, 61244, 59098, 60221, 55857, 57889, 60689, 58320, 57211, 55957, 58227, 57770, 55597, 52373, 52777, 53126, 54130, 51015, 55103, 52826, 50186, 50689, 52286, 49994, 49631, 48536, 51271, 49524, 44273, 45065, 46498, 47692, 47032, 48035, 46788, 45564, 41461, 42918, 40433, 43161, 40279, 44481, 38167, 42613, 39239, 38764, 40005, 39661, 36677, 40298, 39208, 38394, 34471, 34402, 38379, 37818, 35415, 33525, 32077, 32807, 36196, 34277, 31734, 28722, 33070, 31142, 33402, 29435, 27541, 25826, 27212, 30638, 28369, 25305, 29592, 25011, 28201, 28119, 22371, 22606, 25674, 21923, 26048, 21800, 21168, 22184, 21961, 19217, 20553, 21682, 18372, 21392, 20466, 19322, 14381, 18994, 17712, 19334, 16533, 14129, 11970, 14647, 15634, 11005, 14430, 14006, 11798, 14288, 11832, 8813, 10211, 7271, 10462, 9717, 5734, 10925, 8056, 5839, 7664, 3431, 3724, 4948, 5042, 3696, 1673, 4317, 500, 175, 3470, 4317, 1991, 0, 660, 0, 2733, 2182, 3011, 2867, 1776, 5874, 5927, 2120, 5900, 5354, 6743, 6594, 8824, 5771, 8604, 9067, 6619, 8799, 6548, 12013, 8580, 7979, 11304, 9949, 8393, 9251, 12129, 14716, 16155, 16994, 17480, 13788, 14301, 15147, 16566, 19742, 14380, 15641, 18285, 15974, 17951, 20809, 19285, 20785, 23271, 21415, 23084, 23854, 25164, 24943, 26595, 25566, 27226, 26166, 24753, 25015, 23600, 24398, 25289, 27765, 30303, 28905, 28782, 29684, 30505, 28068, 29348, 33527, 29270, 31580, 34473, 30473, 32574, 34818, 31887, 35885, 33149, 32502, 35904, 35632, 37077, 36866, 36438, 37421, 39708, 38354, 41066, 37700, 41248, 40263, 44503, 43842, 39458, 45917, 40653, 42071, 45228, 45060, 42950, 45854, 45803, 44877, 46805, 46617, 45677, 48414, 46845, 48903, 50654, 50601, 53305, 48367, 54724, 52154, 50497, 51469, 53194, 54834, 53280, 57214, 52547, 58159, 55449, 59687, 58733, 60180, 60659, 56770, 56760, 58604, 57681, 59936, 59768, 63383, 63560, 64966, 60098, 60001, 62093, 61420, 62889, 65535, 65535, 65535, 65535, 62044, 65535, 61702, 65535, 65535, 60259, 59874, 63746, 61124, 58962, 62836, 61679, 60340, 59205, 59456, 58444, 59048, 57695, 58656, 54515, 56428, 56207, 57121, 51274, 51287, 56072, 51623, 50574, 51930, 48518, 52549, 47845, 48281, 47383, 48638, 47375, 49637, 46890, 45356, 43997, 49243, 47988, 43599, 43006, 47472, 45825, 45735, 39869, 41971, 41193, 40931, 39759, 37917, 37638, 38293, 41094, 41034, 36307, 35933, 35640, 38591, 37360, 37098, 36120, 35957, 37959, 37713, 32849, 33612, 31364, 33127, 33774, 32282, 28600, 28017, 31225, 31597, 30968, 26284, 28368, 28086, 28126, 26498, 27735, 28576, 28669, 25569, 23888, 25153, 21331, 22088, 20871, 24692, 18991, 22660, 22856, 18134, 18609, 20738, 22648, 19307, 18338, 16429, 16121, 20048, 13978, 17714, 14474, 13558, 18228, 13872, 12946, 10910, 13052, 12377, 14300, 14266, 9251, 7842, 12474, 12644, 7720, 10082, 10704, 8779, 9337, 4073, 8211, 5934, 5507, 7721, 3291, 6071, 6715, 5845, 2203, 0, 3348, 3496, 0, 2707, 0, 599, 3049, 1380, 4331, 2324, 4820, 776, 4621, 2146, 5681, 6171, 4367, 4291, 6091, 5221, 5063, 5760, 8894, 5675, 10798, 6303, 6740, 10317, 10653, 10959, 14474, 8947, 14329, 11703, 13576, 11770, 15052, 14607, 12689, 13993, 18155, 19218, 15429, 18605, 17941, 16712, 18225, 16314, 17008, 19339, 21839, 23034, 19882, 18986, 20400, 25631, 23003, 23694, 23163, 21417, 26667, 22297, 25600, 28620, 26302, 29867, 30198, 25906, 31760, 31268, 30584, 32827, 30302, 29057, 29314, 33074, 29225, 29742, 34007, 36786, 35435, 32111, 35219, 37066, 34265, 35881, 33662, 35179, 40767, 38277, 36719, 37244, 38712, 38952, 40301, 41066, 43703, 41899, 42184, 41670, 40168, 43925, 45287, 45388, 45092, 46477, 47797, 43492, 50103, 46345, 50984, 49518, 48749, 47984, 47672, 49037, 50435, 52655, 48288, 49214, 51947, 54852, 50967, 52138, 54547, 57676, 54407, 57691, 55437, 58426, 56263, 59966, 59652, 57245, 56171, 56033, 57572, 58166, 57602, 59305, 64129, 64291, 62748, 62418, 65535, 63200, 63357, 63869, 62554, 62897, 65535, 64941, 62261, 61055, 63797, 62535, 64306, 62252, 63354, 58995, 62112, 62488, 60272, 61351, 56145, 56357, 58068, 59052, 57269, 55447, 58611, 56942, 58252, 54980, 52381, 55731, 53859, 50998, 51668, 52341, 50499, 52242, 49036, 50045, 48641, 52151, 50495, 50350, 45168, 50449, 49285, 46699, 45452, 47645, 46802, 41637, 45602, 42202, 43259, 45302, 45565, 44769, 44739, 42998, 38978, 38726, 40100, 36267, 38160, 40074, 37091, 38703, 35364, 37761, 38352, 37643, 35075, 34328, 35173, 32569, 35587, 35266, 31654, 32074, 32439, 34312, 30780, 32251, 28608, 26445, 26688, 28240, 30299, 30213, 29380, 26559, 27697, 23016, 23331, 27495, 23118, 26095, 26329, 24588, 21665, 25144, 21654, 21087, 22361, 22191, 22285, 17225, 15619, 15417, 16542, 17645, 18975, 19547, 14279, 15163, 12187, 15608
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4a06      	ldr	r2, [pc, #24]	; (8008dc0 <_Z16get_feature_datajjPf+0x2c>)
 8008da6:	1899      	adds	r1, r3, r2
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	461a      	mov	r2, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f014 fb29 	bl	801d406 <memcpy>
    return 0;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000180 	.word	0x20000180

08008dc4 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b0b4      	sub	sp, #208	; 0xd0
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f014 fa10 	bl	801d1fc <vsiprintf>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bfcc      	ite	gt
 8008de2:	2301      	movgt	r3, #1
 8008de4:	2300      	movle	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8008dec:	f107 0308 	add.w	r3, r7, #8
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7f7 fa6d 	bl	80002d0 <strlen>
 8008df6:	4603      	mov	r3, r0
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	f107 0108 	add.w	r1, r7, #8
 8008dfe:	23b4      	movs	r3, #180	; 0xb4
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <_Z6vprintPKcSt9__va_list+0x4c>)
 8008e02:	f008 ff15 	bl	8011c30 <HAL_UART_Transmit>
    }
}
 8008e06:	bf00      	nop
 8008e08:	37d0      	adds	r7, #208	; 0xd0
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200012ac 	.word	0x200012ac

08008e14 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8008e14:	b40f      	push	{r0, r1, r2, r3}
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	6938      	ldr	r0, [r7, #16]
 8008e26:	f7ff ffcd 	bl	8008dc4 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e34:	b004      	add	sp, #16
 8008e36:	4770      	bx	lr

08008e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b0ca      	sub	sp, #296	; 0x128
 8008e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e3e:	f007 fb02 	bl	8010446 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8008e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fa53 	bl	80072f2 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8008e4c:	f240 3342 	movw	r3, #834	; 0x342
 8008e50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  signal.get_data = &get_feature_data;
 8008e54:	4b3a      	ldr	r3, [pc, #232]	; (8008f40 <main+0x108>)
 8008e56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008e5a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8008e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 ffbb 	bl	800ade0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e6a:	f000 f875 	bl	8008f58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e6e:	f000 f919 	bl	80090a4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8008e72:	f000 f8e3 	bl	800903c <_ZL19MX_USART1_UART_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8008e76:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008e7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008e84:	461a      	mov	r2, r3
 8008e86:	2100      	movs	r1, #0
 8008e88:	f014 f9dc 	bl	801d244 <memset>
	        EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	2201      	movs	r2, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff ff69 	bl	8008d6c <run_classifier>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	        ei_printf("run_classifier returned: %d\n", res);
 8008ea0:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4827      	ldr	r0, [pc, #156]	; (8008f44 <main+0x10c>)
 8008ea8:	f7ff ffb4 	bl	8008e14 <_Z9ei_printfPKcz>

	        ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \n",
 8008eac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008eb0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008eb4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008eb8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ebc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008ec4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ec8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ecc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ed0:	481d      	ldr	r0, [pc, #116]	; (8008f48 <main+0x110>)
 8008ed2:	f7ff ff9f 	bl	8008e14 <_Z9ei_printfPKcz>
	            result.timing.dsp, result.timing.classification, result.timing.anomaly);

	        // print the predictions
	        ei_printf("[");
 8008ed6:	481d      	ldr	r0, [pc, #116]	; (8008f4c <main+0x114>)
 8008ed8:	f7ff ff9c 	bl	8008e14 <_Z9ei_printfPKcz>
	        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8008edc:	2300      	movs	r3, #0
 8008ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ee2:	e017      	b.n	8008f14 <main+0xdc>
	      	  ei_printf_float(result.classification[ix].value);
 8008ee4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ee8:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8008eec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	edd3 7a00 	vldr	s15, [r3]
 8008efc:	eeb0 0a67 	vmov.f32	s0, s15
 8008f00:	f00d fbd6 	bl	80166b0 <_Z15ei_printf_floatf>
	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
	            ei_printf(", ");
 8008f04:	4812      	ldr	r0, [pc, #72]	; (8008f50 <main+0x118>)
 8008f06:	f7ff ff85 	bl	8008e14 <_Z9ei_printfPKcz>
	        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8008f0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008f0e:	3301      	adds	r3, #1
 8008f10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008f14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d9e3      	bls.n	8008ee4 <main+0xac>
	                ei_printf(", ");
	            }
	    #endif
	        }
	    #if EI_CLASSIFIER_HAS_ANOMALY == 1
	        ei_printf_float(result.anomaly);
 8008f1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008f20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f24:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8008f28:	eeb0 0a67 	vmov.f32	s0, s15
 8008f2c:	f00d fbc0 	bl	80166b0 <_Z15ei_printf_floatf>
	    #endif
	        ei_printf("]\n\n\n");
 8008f30:	4808      	ldr	r0, [pc, #32]	; (8008f54 <main+0x11c>)
 8008f32:	f7ff ff6f 	bl	8008e14 <_Z9ei_printfPKcz>

	      HAL_Delay(5000);
 8008f36:	f241 3088 	movw	r0, #5000	; 0x1388
 8008f3a:	f007 fae1 	bl	8010500 <HAL_Delay>
  }
 8008f3e:	e79a      	b.n	8008e76 <main+0x3e>
 8008f40:	08008d95 	.word	0x08008d95
 8008f44:	080203e0 	.word	0x080203e0
 8008f48:	080201d4 	.word	0x080201d4
 8008f4c:	08020400 	.word	0x08020400
 8008f50:	08020404 	.word	0x08020404
 8008f54:	08020408 	.word	0x08020408

08008f58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b094      	sub	sp, #80	; 0x50
 8008f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f5e:	f107 0320 	add.w	r3, r7, #32
 8008f62:	2230      	movs	r2, #48	; 0x30
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f014 f96c 	bl	801d244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	609a      	str	r2, [r3, #8]
 8008f78:	60da      	str	r2, [r3, #12]
 8008f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f7c:	4b2d      	ldr	r3, [pc, #180]	; (8009034 <_Z18SystemClock_Configv+0xdc>)
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f80:	4a2c      	ldr	r2, [pc, #176]	; (8009034 <_Z18SystemClock_Configv+0xdc>)
 8008f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f86:	6413      	str	r3, [r2, #64]	; 0x40
 8008f88:	4b2a      	ldr	r3, [pc, #168]	; (8009034 <_Z18SystemClock_Configv+0xdc>)
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f94:	4b28      	ldr	r3, [pc, #160]	; (8009038 <_Z18SystemClock_Configv+0xe0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f9c:	4a26      	ldr	r2, [pc, #152]	; (8009038 <_Z18SystemClock_Configv+0xe0>)
 8008f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	4b24      	ldr	r3, [pc, #144]	; (8009038 <_Z18SystemClock_Configv+0xe0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008fac:	607b      	str	r3, [r7, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008fb8:	2310      	movs	r3, #16
 8008fba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8008fc4:	230a      	movs	r3, #10
 8008fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8008fc8:	23d2      	movs	r3, #210	; 0xd2
 8008fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008fd4:	f107 0320 	add.w	r3, r7, #32
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f007 fd61 	bl	8010aa0 <HAL_RCC_OscConfig>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bf14      	ite	ne
 8008fe4:	2301      	movne	r3, #1
 8008fe6:	2300      	moveq	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8008fee:	f000 fccf 	bl	8009990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ff2:	230f      	movs	r3, #15
 8008ff4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	2105      	movs	r1, #5
 8009010:	4618      	mov	r0, r3
 8009012:	f007 ffe9 	bl	8010fe8 <HAL_RCC_ClockConfig>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8009026:	f000 fcb3 	bl	8009990 <Error_Handler>
  }
}
 800902a:	bf00      	nop
 800902c:	3750      	adds	r7, #80	; 0x50
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	40023800 	.word	0x40023800
 8009038:	40007000 	.word	0x40007000

0800903c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009042:	4a17      	ldr	r2, [pc, #92]	; (80090a0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8009044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009046:	4b15      	ldr	r3, [pc, #84]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800904c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009050:	2200      	movs	r2, #0
 8009052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009054:	4b11      	ldr	r3, [pc, #68]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009056:	2200      	movs	r2, #0
 8009058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800905a:	4b10      	ldr	r3, [pc, #64]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 800905c:	2200      	movs	r2, #0
 800905e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009060:	4b0e      	ldr	r3, [pc, #56]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009062:	220c      	movs	r2, #12
 8009064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009066:	4b0d      	ldr	r3, [pc, #52]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009068:	2200      	movs	r2, #0
 800906a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800906c:	4b0b      	ldr	r3, [pc, #44]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 800906e:	2200      	movs	r2, #0
 8009070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009072:	4b0a      	ldr	r3, [pc, #40]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009074:	2200      	movs	r2, #0
 8009076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009078:	4b08      	ldr	r3, [pc, #32]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 800907a:	2200      	movs	r2, #0
 800907c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800907e:	4807      	ldr	r0, [pc, #28]	; (800909c <_ZL19MX_USART1_UART_Initv+0x60>)
 8009080:	f008 fd88 	bl	8011b94 <HAL_UART_Init>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	bf14      	ite	ne
 800908a:	2301      	movne	r3, #1
 800908c:	2300      	moveq	r3, #0
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8009094:	f000 fc7c 	bl	8009990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009098:	bf00      	nop
 800909a:	bd80      	pop	{r7, pc}
 800909c:	200012ac 	.word	0x200012ac
 80090a0:	40011000 	.word	0x40011000

080090a4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b090      	sub	sp, #64	; 0x40
 80090a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	605a      	str	r2, [r3, #4]
 80090b4:	609a      	str	r2, [r3, #8]
 80090b6:	60da      	str	r2, [r3, #12]
 80090b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80090ba:	4bad      	ldr	r3, [pc, #692]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090be:	4aac      	ldr	r2, [pc, #688]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090c0:	f043 0310 	orr.w	r3, r3, #16
 80090c4:	6313      	str	r3, [r2, #48]	; 0x30
 80090c6:	4baa      	ldr	r3, [pc, #680]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80090d2:	4ba7      	ldr	r3, [pc, #668]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	4aa6      	ldr	r2, [pc, #664]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090dc:	6313      	str	r3, [r2, #48]	; 0x30
 80090de:	4ba4      	ldr	r3, [pc, #656]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80090ea:	4ba1      	ldr	r3, [pc, #644]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	4aa0      	ldr	r2, [pc, #640]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	6313      	str	r3, [r2, #48]	; 0x30
 80090f6:	4b9e      	ldr	r3, [pc, #632]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	623b      	str	r3, [r7, #32]
 8009100:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009102:	4b9b      	ldr	r3, [pc, #620]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	4a9a      	ldr	r2, [pc, #616]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009108:	f043 0308 	orr.w	r3, r3, #8
 800910c:	6313      	str	r3, [r2, #48]	; 0x30
 800910e:	4b98      	ldr	r3, [pc, #608]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	f003 0308 	and.w	r3, r3, #8
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800911a:	4b95      	ldr	r3, [pc, #596]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911e:	4a94      	ldr	r2, [pc, #592]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009120:	f043 0304 	orr.w	r3, r3, #4
 8009124:	6313      	str	r3, [r2, #48]	; 0x30
 8009126:	4b92      	ldr	r3, [pc, #584]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	61bb      	str	r3, [r7, #24]
 8009130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009132:	4b8f      	ldr	r3, [pc, #572]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	4a8e      	ldr	r2, [pc, #568]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	6313      	str	r3, [r2, #48]	; 0x30
 800913e:	4b8c      	ldr	r3, [pc, #560]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800914a:	4b89      	ldr	r3, [pc, #548]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914e:	4a88      	ldr	r2, [pc, #544]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009154:	6313      	str	r3, [r2, #48]	; 0x30
 8009156:	4b86      	ldr	r3, [pc, #536]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800915e:	613b      	str	r3, [r7, #16]
 8009160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009162:	4b83      	ldr	r3, [pc, #524]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	4a82      	ldr	r2, [pc, #520]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800916c:	6313      	str	r3, [r2, #48]	; 0x30
 800916e:	4b80      	ldr	r3, [pc, #512]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800917a:	4b7d      	ldr	r3, [pc, #500]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	4a7c      	ldr	r2, [pc, #496]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009184:	6313      	str	r3, [r2, #48]	; 0x30
 8009186:	4b7a      	ldr	r3, [pc, #488]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800918e:	60bb      	str	r3, [r7, #8]
 8009190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009192:	4b77      	ldr	r3, [pc, #476]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	4a76      	ldr	r2, [pc, #472]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009198:	f043 0320 	orr.w	r3, r3, #32
 800919c:	6313      	str	r3, [r2, #48]	; 0x30
 800919e:	4b74      	ldr	r3, [pc, #464]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80091aa:	4b71      	ldr	r3, [pc, #452]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	4a70      	ldr	r2, [pc, #448]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80091b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b4:	6313      	str	r3, [r2, #48]	; 0x30
 80091b6:	4b6e      	ldr	r3, [pc, #440]	; (8009370 <_ZL12MX_GPIO_Initv+0x2cc>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80091c2:	2201      	movs	r2, #1
 80091c4:	2120      	movs	r1, #32
 80091c6:	486b      	ldr	r0, [pc, #428]	; (8009374 <_ZL12MX_GPIO_Initv+0x2d0>)
 80091c8:	f007 fc50 	bl	8010a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80091cc:	2200      	movs	r2, #0
 80091ce:	f241 010c 	movw	r1, #4108	; 0x100c
 80091d2:	4869      	ldr	r0, [pc, #420]	; (8009378 <_ZL12MX_GPIO_Initv+0x2d4>)
 80091d4:	f007 fc4a 	bl	8010a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80091d8:	2200      	movs	r2, #0
 80091da:	2108      	movs	r1, #8
 80091dc:	4867      	ldr	r0, [pc, #412]	; (800937c <_ZL12MX_GPIO_Initv+0x2d8>)
 80091de:	f007 fc45 	bl	8010a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80091e2:	2200      	movs	r2, #0
 80091e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80091e8:	4865      	ldr	r0, [pc, #404]	; (8009380 <_ZL12MX_GPIO_Initv+0x2dc>)
 80091ea:	f007 fc3f 	bl	8010a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80091ee:	2200      	movs	r2, #0
 80091f0:	21c8      	movs	r1, #200	; 0xc8
 80091f2:	4864      	ldr	r0, [pc, #400]	; (8009384 <_ZL12MX_GPIO_Initv+0x2e0>)
 80091f4:	f007 fc3a 	bl	8010a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80091f8:	2310      	movs	r3, #16
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fc:	2302      	movs	r3, #2
 80091fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009200:	2300      	movs	r3, #0
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009204:	2300      	movs	r3, #0
 8009206:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009208:	230e      	movs	r3, #14
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800920c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009210:	4619      	mov	r1, r3
 8009212:	485d      	ldr	r0, [pc, #372]	; (8009388 <_ZL12MX_GPIO_Initv+0x2e4>)
 8009214:	f007 fa7e 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8009218:	2308      	movs	r3, #8
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800921c:	2300      	movs	r3, #0
 800921e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009220:	2300      	movs	r3, #0
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009228:	4619      	mov	r1, r3
 800922a:	4857      	ldr	r0, [pc, #348]	; (8009388 <_ZL12MX_GPIO_Initv+0x2e4>)
 800922c:	f007 fa72 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8009230:	2304      	movs	r3, #4
 8009232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009234:	2302      	movs	r3, #2
 8009236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009238:	2300      	movs	r3, #0
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800923c:	2303      	movs	r3, #3
 800923e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009240:	2309      	movs	r3, #9
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009248:	4619      	mov	r1, r3
 800924a:	484f      	ldr	r0, [pc, #316]	; (8009388 <_ZL12MX_GPIO_Initv+0x2e4>)
 800924c:	f007 fa62 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009250:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009256:	2302      	movs	r3, #2
 8009258:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925a:	2300      	movs	r3, #0
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800925e:	2303      	movs	r3, #3
 8009260:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009262:	230b      	movs	r3, #11
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800926a:	4619      	mov	r1, r3
 800926c:	4845      	ldr	r0, [pc, #276]	; (8009384 <_ZL12MX_GPIO_Initv+0x2e0>)
 800926e:	f007 fa51 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8009272:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009276:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009278:	2302      	movs	r3, #2
 800927a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927c:	2300      	movs	r3, #0
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009280:	2303      	movs	r3, #3
 8009282:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009284:	230c      	movs	r3, #12
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800928c:	4619      	mov	r1, r3
 800928e:	483e      	ldr	r0, [pc, #248]	; (8009388 <_ZL12MX_GPIO_Initv+0x2e4>)
 8009290:	f007 fa40 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800929a:	2312      	movs	r3, #18
 800929c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80092a6:	2304      	movs	r3, #4
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ae:	4619      	mov	r1, r3
 80092b0:	4836      	ldr	r0, [pc, #216]	; (800938c <_ZL12MX_GPIO_Initv+0x2e8>)
 80092b2:	f007 fa2f 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80092b6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80092ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092bc:	2302      	movs	r3, #2
 80092be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c4:	2303      	movs	r3, #3
 80092c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80092c8:	230a      	movs	r3, #10
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092d0:	4619      	mov	r1, r3
 80092d2:	482e      	ldr	r0, [pc, #184]	; (800938c <_ZL12MX_GPIO_Initv+0x2e8>)
 80092d4:	f007 fa1e 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80092d8:	2310      	movs	r3, #16
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092dc:	2302      	movs	r3, #2
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e0:	2300      	movs	r3, #0
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80092e8:	2302      	movs	r3, #2
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80092ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092f0:	4619      	mov	r1, r3
 80092f2:	4826      	ldr	r0, [pc, #152]	; (800938c <_ZL12MX_GPIO_Initv+0x2e8>)
 80092f4:	f007 fa0e 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80092f8:	2380      	movs	r3, #128	; 0x80
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fc:	2302      	movs	r3, #2
 80092fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009300:	2300      	movs	r3, #0
 8009302:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009304:	2300      	movs	r3, #0
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8009308:	2308      	movs	r3, #8
 800930a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800930c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009310:	4619      	mov	r1, r3
 8009312:	4818      	ldr	r0, [pc, #96]	; (8009374 <_ZL12MX_GPIO_Initv+0x2d0>)
 8009314:	f007 f9fe 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8009318:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800931c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931e:	2302      	movs	r3, #2
 8009320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009322:	2300      	movs	r3, #0
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009326:	2303      	movs	r3, #3
 8009328:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800932a:	230c      	movs	r3, #12
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800932e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009332:	4619      	mov	r1, r3
 8009334:	4816      	ldr	r0, [pc, #88]	; (8009390 <_ZL12MX_GPIO_Initv+0x2ec>)
 8009336:	f007 f9ed 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800933a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800933e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	2302      	movs	r3, #2
 8009342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009348:	2300      	movs	r3, #0
 800934a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800934c:	2301      	movs	r3, #1
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8009350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009354:	4619      	mov	r1, r3
 8009356:	480f      	ldr	r0, [pc, #60]	; (8009394 <_ZL12MX_GPIO_Initv+0x2f0>)
 8009358:	f007 f9dc 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800935c:	2360      	movs	r3, #96	; 0x60
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009360:	2302      	movs	r3, #2
 8009362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009364:	2300      	movs	r3, #0
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009368:	2300      	movs	r3, #0
 800936a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800936c:	230d      	movs	r3, #13
 800936e:	e013      	b.n	8009398 <_ZL12MX_GPIO_Initv+0x2f4>
 8009370:	40023800 	.word	0x40023800
 8009374:	40020c00 	.word	0x40020c00
 8009378:	40022000 	.word	0x40022000
 800937c:	40022800 	.word	0x40022800
 8009380:	40021c00 	.word	0x40021c00
 8009384:	40021800 	.word	0x40021800
 8009388:	40021000 	.word	0x40021000
 800938c:	40020400 	.word	0x40020400
 8009390:	40020800 	.word	0x40020800
 8009394:	40020000 	.word	0x40020000
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800939a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800939e:	4619      	mov	r1, r3
 80093a0:	48bc      	ldr	r0, [pc, #752]	; (8009694 <_ZL12MX_GPIO_Initv+0x5f0>)
 80093a2:	f007 f9b7 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80093a6:	2340      	movs	r3, #64	; 0x40
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093aa:	2302      	movs	r3, #2
 80093ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093b2:	2303      	movs	r3, #3
 80093b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80093b6:	230a      	movs	r3, #10
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80093ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093be:	4619      	mov	r1, r3
 80093c0:	48b5      	ldr	r0, [pc, #724]	; (8009698 <_ZL12MX_GPIO_Initv+0x5f4>)
 80093c2:	f007 f9a7 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80093c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093cc:	2302      	movs	r3, #2
 80093ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d4:	2303      	movs	r3, #3
 80093d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093d8:	230c      	movs	r3, #12
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80093dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093e0:	4619      	mov	r1, r3
 80093e2:	48ae      	ldr	r0, [pc, #696]	; (800969c <_ZL12MX_GPIO_Initv+0x5f8>)
 80093e4:	f007 f996 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80093e8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80093ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ee:	2302      	movs	r3, #2
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093fa:	230e      	movs	r3, #14
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80093fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009402:	4619      	mov	r1, r3
 8009404:	48a6      	ldr	r0, [pc, #664]	; (80096a0 <_ZL12MX_GPIO_Initv+0x5fc>)
 8009406:	f007 f985 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800940a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800940e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009410:	2300      	movs	r3, #0
 8009412:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009414:	2300      	movs	r3, #0
 8009416:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800941c:	4619      	mov	r1, r3
 800941e:	48a0      	ldr	r0, [pc, #640]	; (80096a0 <_ZL12MX_GPIO_Initv+0x5fc>)
 8009420:	f007 f978 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009428:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800942e:	2300      	movs	r3, #0
 8009430:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8009432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009436:	4619      	mov	r1, r3
 8009438:	489a      	ldr	r0, [pc, #616]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 800943a:	f007 f96b 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800943e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009442:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009444:	2302      	movs	r3, #2
 8009446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009448:	2300      	movs	r3, #0
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800944c:	2303      	movs	r3, #3
 800944e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009450:	230c      	movs	r3, #12
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009458:	4619      	mov	r1, r3
 800945a:	4892      	ldr	r0, [pc, #584]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 800945c:	f007 f95a 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8009460:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009466:	2302      	movs	r3, #2
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800946a:	2300      	movs	r3, #0
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800946e:	2303      	movs	r3, #3
 8009470:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009472:	230a      	movs	r3, #10
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800947a:	4619      	mov	r1, r3
 800947c:	488a      	ldr	r0, [pc, #552]	; (80096a8 <_ZL12MX_GPIO_Initv+0x604>)
 800947e:	f007 f949 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8009482:	23f0      	movs	r3, #240	; 0xf0
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009486:	2302      	movs	r3, #2
 8009488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800948a:	2300      	movs	r3, #0
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800948e:	2300      	movs	r3, #0
 8009490:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009492:	230a      	movs	r3, #10
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800949a:	4619      	mov	r1, r3
 800949c:	4883      	ldr	r0, [pc, #524]	; (80096ac <_ZL12MX_GPIO_Initv+0x608>)
 800949e:	f007 f939 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80094a2:	23f7      	movs	r3, #247	; 0xf7
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094a6:	2302      	movs	r3, #2
 80094a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80094b2:	230e      	movs	r3, #14
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80094b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ba:	4619      	mov	r1, r3
 80094bc:	487c      	ldr	r0, [pc, #496]	; (80096b0 <_ZL12MX_GPIO_Initv+0x60c>)
 80094be:	f007 f929 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80094c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c8:	2302      	movs	r3, #2
 80094ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80094d4:	2309      	movs	r3, #9
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80094d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094dc:	4619      	mov	r1, r3
 80094de:	486f      	ldr	r0, [pc, #444]	; (800969c <_ZL12MX_GPIO_Initv+0x5f8>)
 80094e0:	f007 f918 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80094e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ea:	2302      	movs	r3, #2
 80094ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094f2:	2300      	movs	r3, #0
 80094f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80094f6:	230a      	movs	r3, #10
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80094fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094fe:	4619      	mov	r1, r3
 8009500:	4866      	ldr	r0, [pc, #408]	; (800969c <_ZL12MX_GPIO_Initv+0x5f8>)
 8009502:	f007 f907 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8009506:	2320      	movs	r3, #32
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800950a:	2301      	movs	r3, #1
 800950c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950e:	2300      	movs	r3, #0
 8009510:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009512:	2300      	movs	r3, #0
 8009514:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8009516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800951a:	4619      	mov	r1, r3
 800951c:	4861      	ldr	r0, [pc, #388]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 800951e:	f007 f8f9 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8009522:	2308      	movs	r3, #8
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009526:	2302      	movs	r3, #2
 8009528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952a:	2300      	movs	r3, #0
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800952e:	2300      	movs	r3, #0
 8009530:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009532:	230d      	movs	r3, #13
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8009536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800953a:	4619      	mov	r1, r3
 800953c:	4859      	ldr	r0, [pc, #356]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 800953e:	f007 f8e9 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8009542:	f241 030c 	movw	r3, #4108	; 0x100c
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009548:	2301      	movs	r3, #1
 800954a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954c:	2300      	movs	r3, #0
 800954e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009550:	2300      	movs	r3, #0
 8009552:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009558:	4619      	mov	r1, r3
 800955a:	4854      	ldr	r0, [pc, #336]	; (80096ac <_ZL12MX_GPIO_Initv+0x608>)
 800955c:	f007 f8da 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8009560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009566:	2300      	movs	r3, #0
 8009568:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956a:	2300      	movs	r3, #0
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800956e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009572:	4619      	mov	r1, r3
 8009574:	484f      	ldr	r0, [pc, #316]	; (80096b4 <_ZL12MX_GPIO_Initv+0x610>)
 8009576:	f007 f8cd 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800957a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009580:	2302      	movs	r3, #2
 8009582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009584:	2300      	movs	r3, #0
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009588:	2303      	movs	r3, #3
 800958a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800958c:	230c      	movs	r3, #12
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009594:	4619      	mov	r1, r3
 8009596:	4848      	ldr	r0, [pc, #288]	; (80096b8 <_ZL12MX_GPIO_Initv+0x614>)
 8009598:	f007 f8bc 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800959c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095a2:	2302      	movs	r3, #2
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095aa:	2300      	movs	r3, #0
 80095ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80095ae:	230e      	movs	r3, #14
 80095b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80095b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095b6:	4619      	mov	r1, r3
 80095b8:	483c      	ldr	r0, [pc, #240]	; (80096ac <_ZL12MX_GPIO_Initv+0x608>)
 80095ba:	f007 f8ab 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80095be:	2308      	movs	r3, #8
 80095c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80095c2:	2301      	movs	r3, #1
 80095c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095ca:	2300      	movs	r3, #0
 80095cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80095ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095d2:	4619      	mov	r1, r3
 80095d4:	4836      	ldr	r0, [pc, #216]	; (80096b0 <_ZL12MX_GPIO_Initv+0x60c>)
 80095d6:	f007 f89d 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80095da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095e0:	2302      	movs	r3, #2
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095e4:	2300      	movs	r3, #0
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095e8:	2300      	movs	r3, #0
 80095ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80095ec:	230d      	movs	r3, #13
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80095f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095f4:	4619      	mov	r1, r3
 80095f6:	4829      	ldr	r0, [pc, #164]	; (800969c <_ZL12MX_GPIO_Initv+0x5f8>)
 80095f8:	f007 f88c 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80095fc:	2310      	movs	r3, #16
 80095fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009600:	2300      	movs	r3, #0
 8009602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009604:	2300      	movs	r3, #0
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800960c:	4619      	mov	r1, r3
 800960e:	4825      	ldr	r0, [pc, #148]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 8009610:	f007 f880 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8009614:	2304      	movs	r3, #4
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009618:	2302      	movs	r3, #2
 800961a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800961c:	2300      	movs	r3, #0
 800961e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009620:	2303      	movs	r3, #3
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009624:	230c      	movs	r3, #12
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8009628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800962c:	4619      	mov	r1, r3
 800962e:	481d      	ldr	r0, [pc, #116]	; (80096a4 <_ZL12MX_GPIO_Initv+0x600>)
 8009630:	f007 f870 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8009634:	f248 0304 	movw	r3, #32772	; 0x8004
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800963a:	2300      	movs	r3, #0
 800963c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963e:	2300      	movs	r3, #0
 8009640:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009646:	4619      	mov	r1, r3
 8009648:	481c      	ldr	r0, [pc, #112]	; (80096bc <_ZL12MX_GPIO_Initv+0x618>)
 800964a:	f007 f863 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800964e:	2302      	movs	r3, #2
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009652:	2302      	movs	r3, #2
 8009654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009656:	2300      	movs	r3, #0
 8009658:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800965a:	2300      	movs	r3, #0
 800965c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800965e:	2305      	movs	r3, #5
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8009662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009666:	4619      	mov	r1, r3
 8009668:	4810      	ldr	r0, [pc, #64]	; (80096ac <_ZL12MX_GPIO_Initv+0x608>)
 800966a:	f007 f853 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800966e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009674:	2301      	movs	r3, #1
 8009676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009678:	2300      	movs	r3, #0
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800967c:	2300      	movs	r3, #0
 800967e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009684:	4619      	mov	r1, r3
 8009686:	480d      	ldr	r0, [pc, #52]	; (80096bc <_ZL12MX_GPIO_Initv+0x618>)
 8009688:	f007 f844 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800968c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8009690:	e016      	b.n	80096c0 <_ZL12MX_GPIO_Initv+0x61c>
 8009692:	bf00      	nop
 8009694:	40021000 	.word	0x40021000
 8009698:	40020400 	.word	0x40020400
 800969c:	40021800 	.word	0x40021800
 80096a0:	40022400 	.word	0x40022400
 80096a4:	40020c00 	.word	0x40020c00
 80096a8:	40020000 	.word	0x40020000
 80096ac:	40022000 	.word	0x40022000
 80096b0:	40022800 	.word	0x40022800
 80096b4:	40020800 	.word	0x40020800
 80096b8:	40021400 	.word	0x40021400
 80096bc:	40021c00 	.word	0x40021c00
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096c2:	2302      	movs	r3, #2
 80096c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ca:	2300      	movs	r3, #0
 80096cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80096ce:	230d      	movs	r3, #13
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80096d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096d6:	4619      	mov	r1, r3
 80096d8:	48a5      	ldr	r0, [pc, #660]	; (8009970 <_ZL12MX_GPIO_Initv+0x8cc>)
 80096da:	f007 f81b 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80096de:	2301      	movs	r3, #1
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e2:	2302      	movs	r3, #2
 80096e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ea:	2300      	movs	r3, #0
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80096ee:	2302      	movs	r3, #2
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80096f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096f6:	4619      	mov	r1, r3
 80096f8:	489e      	ldr	r0, [pc, #632]	; (8009974 <_ZL12MX_GPIO_Initv+0x8d0>)
 80096fa:	f007 f80b 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80096fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009704:	2302      	movs	r3, #2
 8009706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009708:	2300      	movs	r3, #0
 800970a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800970c:	2300      	movs	r3, #0
 800970e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009710:	2301      	movs	r3, #1
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8009714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009718:	4619      	mov	r1, r3
 800971a:	4897      	ldr	r0, [pc, #604]	; (8009978 <_ZL12MX_GPIO_Initv+0x8d4>)
 800971c:	f006 fffa 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8009720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009726:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800972a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800972c:	2300      	movs	r3, #0
 800972e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8009730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009734:	4619      	mov	r1, r3
 8009736:	488f      	ldr	r0, [pc, #572]	; (8009974 <_ZL12MX_GPIO_Initv+0x8d0>)
 8009738:	f006 ffec 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800973c:	23c0      	movs	r3, #192	; 0xc0
 800973e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009740:	2302      	movs	r3, #2
 8009742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009744:	2300      	movs	r3, #0
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009748:	2303      	movs	r3, #3
 800974a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800974c:	2308      	movs	r3, #8
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009754:	4619      	mov	r1, r3
 8009756:	4889      	ldr	r0, [pc, #548]	; (800997c <_ZL12MX_GPIO_Initv+0x8d8>)
 8009758:	f006 ffdc 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800975c:	2310      	movs	r3, #16
 800975e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009760:	2302      	movs	r3, #2
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009764:	2300      	movs	r3, #0
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009768:	2303      	movs	r3, #3
 800976a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800976c:	230a      	movs	r3, #10
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009774:	4619      	mov	r1, r3
 8009776:	487e      	ldr	r0, [pc, #504]	; (8009970 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009778:	f006 ffcc 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800977c:	2328      	movs	r3, #40	; 0x28
 800977e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009780:	2302      	movs	r3, #2
 8009782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009784:	2300      	movs	r3, #0
 8009786:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009788:	2303      	movs	r3, #3
 800978a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800978c:	230c      	movs	r3, #12
 800978e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009794:	4619      	mov	r1, r3
 8009796:	4876      	ldr	r0, [pc, #472]	; (8009970 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009798:	f006 ffbc 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800979c:	23c8      	movs	r3, #200	; 0xc8
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097a0:	2301      	movs	r3, #1
 80097a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097a8:	2300      	movs	r3, #0
 80097aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80097ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097b0:	4619      	mov	r1, r3
 80097b2:	4873      	ldr	r0, [pc, #460]	; (8009980 <_ZL12MX_GPIO_Initv+0x8dc>)
 80097b4:	f006 ffae 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80097b8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80097bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097be:	2303      	movs	r3, #3
 80097c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80097c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ca:	4619      	mov	r1, r3
 80097cc:	486d      	ldr	r0, [pc, #436]	; (8009984 <_ZL12MX_GPIO_Initv+0x8e0>)
 80097ce:	f006 ffa1 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80097d2:	2308      	movs	r3, #8
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d6:	2302      	movs	r3, #2
 80097d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097de:	2303      	movs	r3, #3
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80097e2:	230c      	movs	r3, #12
 80097e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80097e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097ea:	4619      	mov	r1, r3
 80097ec:	4863      	ldr	r0, [pc, #396]	; (800997c <_ZL12MX_GPIO_Initv+0x8d8>)
 80097ee:	f006 ff91 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80097f2:	2305      	movs	r3, #5
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f6:	2302      	movs	r3, #2
 80097f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097fe:	2303      	movs	r3, #3
 8009800:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009802:	230a      	movs	r3, #10
 8009804:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800980a:	4619      	mov	r1, r3
 800980c:	485b      	ldr	r0, [pc, #364]	; (800997c <_ZL12MX_GPIO_Initv+0x8d8>)
 800980e:	f006 ff81 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009812:	2332      	movs	r3, #50	; 0x32
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009816:	2302      	movs	r3, #2
 8009818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800981e:	2303      	movs	r3, #3
 8009820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009822:	230b      	movs	r3, #11
 8009824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800982a:	4619      	mov	r1, r3
 800982c:	4853      	ldr	r0, [pc, #332]	; (800997c <_ZL12MX_GPIO_Initv+0x8d8>)
 800982e:	f006 ff71 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009832:	2304      	movs	r3, #4
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009836:	2302      	movs	r3, #2
 8009838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983a:	2300      	movs	r3, #0
 800983c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800983e:	2303      	movs	r3, #3
 8009840:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009842:	2309      	movs	r3, #9
 8009844:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800984a:	4619      	mov	r1, r3
 800984c:	484e      	ldr	r0, [pc, #312]	; (8009988 <_ZL12MX_GPIO_Initv+0x8e4>)
 800984e:	f006 ff61 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8009852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009858:	2302      	movs	r3, #2
 800985a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985c:	2300      	movs	r3, #0
 800985e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009860:	2303      	movs	r3, #3
 8009862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009864:	2309      	movs	r3, #9
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800986c:	4619      	mov	r1, r3
 800986e:	4847      	ldr	r0, [pc, #284]	; (800998c <_ZL12MX_GPIO_Initv+0x8e8>)
 8009870:	f006 ff50 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8009874:	2304      	movs	r3, #4
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009878:	2300      	movs	r3, #0
 800987a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987c:	2300      	movs	r3, #0
 800987e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8009880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009884:	4619      	mov	r1, r3
 8009886:	483e      	ldr	r0, [pc, #248]	; (8009980 <_ZL12MX_GPIO_Initv+0x8dc>)
 8009888:	f006 ff44 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800988c:	2386      	movs	r3, #134	; 0x86
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009890:	2302      	movs	r3, #2
 8009892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009894:	2300      	movs	r3, #0
 8009896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009898:	2303      	movs	r3, #3
 800989a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800989c:	230b      	movs	r3, #11
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098a4:	4619      	mov	r1, r3
 80098a6:	4834      	ldr	r0, [pc, #208]	; (8009978 <_ZL12MX_GPIO_Initv+0x8d4>)
 80098a8:	f006 ff34 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80098ac:	2301      	movs	r3, #1
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098b0:	2303      	movs	r3, #3
 80098b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80098b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098bc:	4619      	mov	r1, r3
 80098be:	482e      	ldr	r0, [pc, #184]	; (8009978 <_ZL12MX_GPIO_Initv+0x8d4>)
 80098c0:	f006 ff28 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80098c4:	2350      	movs	r3, #80	; 0x50
 80098c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098c8:	2302      	movs	r3, #2
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098cc:	2300      	movs	r3, #0
 80098ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098d0:	2300      	movs	r3, #0
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80098d4:	230d      	movs	r3, #13
 80098d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098dc:	4619      	mov	r1, r3
 80098de:	4826      	ldr	r0, [pc, #152]	; (8009978 <_ZL12MX_GPIO_Initv+0x8d4>)
 80098e0:	f006 ff18 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80098e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80098ea:	2312      	movs	r3, #18
 80098ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098f2:	2303      	movs	r3, #3
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80098f6:	2304      	movs	r3, #4
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80098fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098fe:	4619      	mov	r1, r3
 8009900:	481b      	ldr	r0, [pc, #108]	; (8009970 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009902:	f006 ff07 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8009906:	2328      	movs	r3, #40	; 0x28
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800990a:	2302      	movs	r3, #2
 800990c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800990e:	2300      	movs	r3, #0
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009912:	2303      	movs	r3, #3
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009916:	230a      	movs	r3, #10
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800991a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800991e:	4619      	mov	r1, r3
 8009920:	4815      	ldr	r0, [pc, #84]	; (8009978 <_ZL12MX_GPIO_Initv+0x8d4>)
 8009922:	f006 fef7 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8009926:	2340      	movs	r3, #64	; 0x40
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800992a:	2302      	movs	r3, #2
 800992c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992e:	2300      	movs	r3, #0
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009932:	2300      	movs	r3, #0
 8009934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8009936:	2309      	movs	r3, #9
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800993a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800993e:	4619      	mov	r1, r3
 8009940:	480b      	ldr	r0, [pc, #44]	; (8009970 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009942:	f006 fee7 	bl	8010714 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8009946:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994c:	2302      	movs	r3, #2
 800994e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009954:	2300      	movs	r3, #0
 8009956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009958:	2305      	movs	r3, #5
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800995c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009960:	4619      	mov	r1, r3
 8009962:	4809      	ldr	r0, [pc, #36]	; (8009988 <_ZL12MX_GPIO_Initv+0x8e4>)
 8009964:	f006 fed6 	bl	8010714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009968:	bf00      	nop
 800996a:	3740      	adds	r7, #64	; 0x40
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40021c00 	.word	0x40021c00
 8009974:	40022000 	.word	0x40022000
 8009978:	40020000 	.word	0x40020000
 800997c:	40020800 	.word	0x40020800
 8009980:	40021800 	.word	0x40021800
 8009984:	40021400 	.word	0x40021400
 8009988:	40020400 	.word	0x40020400
 800998c:	40020c00 	.word	0x40020c00

08009990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009994:	b672      	cpsid	i
}
 8009996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009998:	e7fe      	b.n	8009998 <Error_Handler+0x8>

0800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	109b      	asrs	r3, r3, #2
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 fc1f 	bl	800b20c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f001 fc1a 	bl	800b224 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f001 fc39 	bl	800b26a <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	4619      	mov	r1, r3
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f001 fc6f 	bl	800b2e2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 fc1a 	bl	800b252 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 fc74 	bl	800b328 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f107 0110 	add.w	r1, r7, #16
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7f7 fd0f 	bl	800146c <_ZNKSt13_Bit_iteratorixEi>
 8009a4e:	bf00      	nop
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b084      	sub	sp, #16
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
 8009a76:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff ffed 	bl	8009a58 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009a84:	6838      	ldr	r0, [r7, #0]
 8009a86:	f7ff ffe7 	bl	8009a58 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ffde 	bl	8009a58 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	601a      	str	r2, [r3, #0]
    }
 8009aa4:	bf00      	nop
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8009aac:	b5b0      	push	{r4, r5, r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8009ab6:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7f6 fd75 	bl	80005a8 <__aeabi_f2d>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	460d      	mov	r5, r1
 8009ac2:	6838      	ldr	r0, [r7, #0]
 8009ac4:	f7f6 fd5e 	bl	8000584 <__aeabi_i2d>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	ec43 2b11 	vmov	d1, r2, r3
 8009ad0:	ec45 4b10 	vmov	d0, r4, r5
 8009ad4:	f00f fdb2 	bl	801963c <pow>
 8009ad8:	eeb0 7a40 	vmov.f32	s14, s0
 8009adc:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8009ae4:	eef0 0a67 	vmov.f32	s1, s15
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bdb0      	pop	{r4, r5, r7, pc}

08009aee <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f001 fc4d 	bl	800b3a0 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009b1c:	68fc      	ldr	r4, [r7, #12]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 fc33 	bl	800b38a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8009b24:	4603      	mov	r3, r0
 8009b26:	461a      	mov	r2, r3
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f7ff ffdf 	bl	8009aee <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}

08009b3a <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8009b3a:	b590      	push	{r4, r7, lr}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 fc41 	bl	800b3cc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8009b4a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 fc46 	bl	800b3e6 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f001 fa51 	bl	800b006 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009b64:	4603      	mov	r3, r0
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	47a0      	blx	r4
	__ptr = pointer();
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
      }
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd90      	pop	{r4, r7, pc}

08009b7c <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8009b86:	687c      	ldr	r4, [r7, #4]
 8009b88:	463b      	mov	r3, r7
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 fa3b 	bl	800b006 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009b90:	4603      	mov	r3, r0
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4619      	mov	r1, r3
 8009b96:	4620      	mov	r0, r4
 8009b98:	f001 fc32 	bl	800b400 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	ed93 7a00 	vldr	s14, [r3]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	edd3 7a00 	vldr	s15, [r3]
 8009bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc2:	d501      	bpl.n	8009bc8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	e000      	b.n	8009bca <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8009bc8:	687b      	ldr	r3, [r7, #4]
    }
 8009bca:	4618      	mov	r0, r3
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	f107 030c 	add.w	r3, r7, #12
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fc29 	bl	800b43e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	1d1a      	adds	r2, r3, #4
 8009c02:	f107 030c 	add.w	r3, r7, #12
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 fc18 	bl	800b43e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fc1b 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	681c      	ldr	r4, [r3, #0]
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	f001 fc16 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009c32:	4603      	mov	r3, r0
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	429c      	cmp	r4, r3
 8009c38:	bf14      	ite	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	2300      	moveq	r3, #0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd90      	pop	{r4, r7, pc}

08009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	1d1a      	adds	r2, r3, #4
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	601a      	str	r2, [r3, #0]
	return *this;
 8009c5a:	687b      	ldr	r3, [r7, #4]
      }
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8009c80:	b590      	push	{r4, r7, lr}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8009c8c:	68fc      	ldr	r4, [r7, #12]
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	68b8      	ldr	r0, [r7, #8]
 8009c92:	f001 fbef 	bl	800b474 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 8009c96:	4603      	mov	r3, r0
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f001 fc07 	bl	800b4b0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f001 fc17 	bl	800b4d8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd90      	pop	{r4, r7, pc}

08009cb4 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009cb4:	b5b0      	push	{r4, r5, r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681c      	ldr	r4, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fc1e 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009ccc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f001 fc23 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      }
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 f815 	bl	8009d0a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bdb0      	pop	{r4, r5, r7, pc}

08009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009cea:	b480      	push	{r7}
 8009cec:	b083      	sub	sp, #12
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
      }
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009d22:	461a      	mov	r2, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 fc15 	bl	800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      }
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	f107 030c 	add.w	r3, r7, #12
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f001 fc18 	bl	800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1d1a      	adds	r2, r3, #4
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	4611      	mov	r1, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fc07 	bl	800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009d76:	b590      	push	{r4, r7, lr}
 8009d78:	b083      	sub	sp, #12
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fc0a 	bl	800b59a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009d86:	4603      	mov	r3, r0
 8009d88:	681c      	ldr	r4, [r3, #0]
 8009d8a:	6838      	ldr	r0, [r7, #0]
 8009d8c:	f001 fc05 	bl	800b59a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009d90:	4603      	mov	r3, r0
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	429c      	cmp	r4, r3
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd90      	pop	{r4, r7, pc}

08009da6 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
	return *this;
 8009db8:	687b      	ldr	r3, [r7, #4]
      }
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009dde:	b590      	push	{r4, r7, lr}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8009de8:	f7f7 f98e 	bl	8001108 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009dec:	4622      	mov	r2, r4
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 fbdd 	bl	800b5b0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd90      	pop	{r4, r7, pc}

08009dfe <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f9fd 	bl	800b20c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009e12:	4603      	mov	r3, r0
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 8009e26:	f7f7 f96f 	bl	8001108 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	6839      	ldr	r1, [r7, #0]
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 fc10 	bl	800b654 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 8009e34:	4603      	mov	r3, r0
    }
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd90      	pop	{r4, r7, pc}

08009e3e <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009e3e:	b5b0      	push	{r4, r5, r7, lr}
 8009e40:	b082      	sub	sp, #8
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681c      	ldr	r4, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fc53 	bl	800b6fc <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 8009e56:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f001 fc58 	bl	800b712 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>
      }
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f805 	bl	8009e74 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bdb0      	pop	{r4, r5, r7, pc}

08009e74 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fc5a 	bl	800b748 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>
      }
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
      }
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>:
      vector(const vector& __x)
 8009ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8009ec8:	687c      	ldr	r4, [r7, #4]
 8009eca:	6838      	ldr	r0, [r7, #0]
 8009ecc:	f7ff fd65 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 fc56 	bl	800b786 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fc46 	bl	800b76e <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4620      	mov	r0, r4
 8009eec:	f001 fae0 	bl	800b4b0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009ef0:	6838      	ldr	r0, [r7, #0]
 8009ef2:	f7ff ff1f 	bl	8009d34 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	6838      	ldr	r0, [r7, #0]
 8009efa:	f7ff ff2b 	bl	8009d54 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8009efe:	4606      	mov	r6, r0
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f001 fafe 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009f0c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4631      	mov	r1, r6
 8009f12:	4628      	mov	r0, r5
 8009f14:	f001 fc42 	bl	800b79c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>
 8009f18:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	605a      	str	r2, [r3, #4]
      }
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f28 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f7 f93b 	bl	80011b6 <_ZNKSt14_Function_base8_M_emptyEv>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 8009f46:	f00f fb6b 	bl	8019620 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	68dc      	ldr	r4, [r3, #12]
 8009f4e:	68fd      	ldr	r5, [r7, #12]
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 fc52 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	1d3b      	adds	r3, r7, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 fc4d 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8009f64:	4680      	mov	r8, r0
 8009f66:	463b      	mov	r3, r7
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 fc53 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4642      	mov	r2, r8
 8009f72:	4631      	mov	r1, r6
 8009f74:	4628      	mov	r0, r5
 8009f76:	47a0      	blx	r4
 8009f78:	4603      	mov	r3, r0
      }
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f84 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7f6 faf9 	bl	8000584 <__aeabi_i2d>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	ec43 2b17 	vmov	d7, r2, r3
 8009f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8009f9e:	eef0 0a67 	vmov.f32	s1, s15
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fc39 	bl	800b82a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689a      	ldr	r2, [r3, #8]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 fc38 	bl	800b852 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009fec:	b5b0      	push	{r4, r5, r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681c      	ldr	r4, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 fc3a 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800a004:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a006:	461a      	mov	r2, r3
 800a008:	4629      	mov	r1, r5
 800a00a:	4620      	mov	r0, r4
 800a00c:	f001 fc3f 	bl	800b88e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      }
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff ffd5 	bl	8009fc2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bdb0      	pop	{r4, r5, r7, pc}

0800a022 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
 800a02a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d00d      	beq.n	800a054 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	4619      	mov	r1, r3
 800a042:	f001 fc3f 	bl	800b8c4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f103 0208 	add.w	r2, r3, #8
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800a052:	e008      	b.n	800a066 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f81a 	bl	800a08e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800a05a:	4603      	mov	r3, r0
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fc59 	bl	800b918 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	f107 030c 	add.w	r3, r7, #12
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fd06 	bl	800ba90 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fcf5 	bl	800ba90 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	713a      	strb	r2, [r7, #4]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f001 fcf7 	bl	800bab0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f001 fd05 	bl	800bad6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800a0cc:	bf00      	nop
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd90      	pop	{r4, r7, pc}

0800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	10db      	asrs	r3, r3, #3
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	4413      	add	r3, r2
      }
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
				__gnu_cxx::__ops::__iter_less_iter());
 800a11e:	f7f6 fff3 	bl	8001108 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800a122:	4622      	mov	r2, r4
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fd02 	bl	800bb30 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a12c:	4603      	mov	r3, r0
    }
 800a12e:	4618      	mov	r0, r3
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	bd90      	pop	{r4, r7, pc}

0800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff fc2a 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a146:	4602      	mov	r2, r0
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	4293      	cmp	r3, r2
 800a14c:	bf8c      	ite	hi
 800a14e:	2301      	movhi	r3, #1
 800a150:	2300      	movls	r3, #0
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fc1e 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a15e:	4602      	mov	r2, r0
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	1a9b      	subs	r3, r3, r2
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f001 fd18 	bl	800bb9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 800a16c:	e014      	b.n	800a198 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	else if (__new_size < size())
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff fc13 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a174:	4602      	mov	r2, r0
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	4293      	cmp	r3, r2
 800a17a:	bf34      	ite	cc
 800a17c:	2301      	movcc	r3, #1
 800a17e:	2300      	movcs	r3, #0
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d008      	beq.n	800a198 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 fdc0 	bl	800bd18 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
      }
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>:
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f805 	bl	800a1be <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>
 800a1b4:	4603      	mov	r3, r0
      }
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	00db      	lsls	r3, r3, #3
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	b590      	push	{r4, r7, lr}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	f107 0418 	add.w	r4, r7, #24
 800a1ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a1f2:	2306      	movs	r3, #6
 800a1f4:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a1fa:	f7ff ff9c 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a202:	f7ff ff98 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a206:	2300      	movs	r3, #0
 800a208:	607b      	str	r3, [r7, #4]
 800a20a:	e02a      	b.n	800a262 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a20c:	2100      	movs	r1, #0
 800a20e:	f107 0018 	add.w	r0, r7, #24
 800a212:	f7ff ffc5 	bl	800a1a0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	4619      	mov	r1, r3
 800a220:	f001 fd9b 	bl	800bd5a <_ZNKSt5arrayIfLj6EEixEj>
 800a224:	4604      	mov	r4, r0
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a22a:	f7ff fd5e 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a22e:	4602      	mov	r2, r0
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a234:	2101      	movs	r1, #1
 800a236:	f107 0018 	add.w	r0, r7, #24
 800a23a:	f7ff ffb1 	bl	800a1a0 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	4619      	mov	r1, r3
 800a248:	f001 fd87 	bl	800bd5a <_ZNKSt5arrayIfLj6EEixEj>
 800a24c:	4604      	mov	r4, r0
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a252:	f7ff fd4a 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a256:	4602      	mov	r2, r0
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3301      	adds	r3, #1
 800a260:	607b      	str	r3, [r7, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d3d0      	bcc.n	800a20c <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a276:	b004      	add	sp, #16
 800a278:	4770      	bx	lr

0800a27a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f805 	bl	800a298 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>
 800a28e:	4603      	mov	r3, r0
      }
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a2bc:	b084      	sub	sp, #16
 800a2be:	b590      	push	{r4, r7, lr}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	f107 0418 	add.w	r4, r7, #24
 800a2c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a2cc:	230a      	movs	r3, #10
 800a2ce:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a2d4:	f7ff ff2f 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a2dc:	f7ff ff2b 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	607b      	str	r3, [r7, #4]
 800a2e4:	e02a      	b.n	800a33c <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	f107 0018 	add.w	r0, r7, #24
 800a2ec:	f7ff ffc5 	bl	800a27a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	f001 fd3d 	bl	800bd78 <_ZNKSt5arrayIfLj10EEixEj>
 800a2fe:	4604      	mov	r4, r0
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a304:	f7ff fcf1 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a308:	4602      	mov	r2, r0
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a30e:	2101      	movs	r1, #1
 800a310:	f107 0018 	add.w	r0, r7, #24
 800a314:	f7ff ffb1 	bl	800a27a <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	4619      	mov	r1, r3
 800a322:	f001 fd29 	bl	800bd78 <_ZNKSt5arrayIfLj10EEixEj>
 800a326:	4604      	mov	r4, r0
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a32c:	f7ff fcdd 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a330:	4602      	mov	r2, r0
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3301      	adds	r3, #1
 800a33a:	607b      	str	r3, [r7, #4]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d3d0      	bcc.n	800a2e6 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	370c      	adds	r7, #12
 800a34a:	46bd      	mov	sp, r7
 800a34c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a350:	b004      	add	sp, #16
 800a352:	4770      	bx	lr

0800a354 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f805 	bl	800a372 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>
 800a368:	4603      	mov	r3, r0
      }
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a372:	b480      	push	{r7}
 800a374:	b083      	sub	sp, #12
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	4613      	mov	r3, r2
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	1a9b      	subs	r3, r3, r2
 800a384:	00db      	lsls	r3, r3, #3
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4413      	add	r3, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a396:	b084      	sub	sp, #16
 800a398:	b590      	push	{r4, r7, lr}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	f107 0418 	add.w	r4, r7, #24
 800a3a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a3a6:	230e      	movs	r3, #14
 800a3a8:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a3b0:	f7ff fec1 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a3ba:	f7ff febc 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a3be:	2300      	movs	r3, #0
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	e02c      	b.n	800a41e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	f107 0018 	add.w	r0, r7, #24
 800a3ca:	f7ff ffc3 	bl	800a354 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f001 fcdd 	bl	800bd96 <_ZNKSt5arrayIfLj14EEixEj>
 800a3dc:	4604      	mov	r4, r0
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a3e4:	f7ff fc81 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	f107 0018 	add.w	r0, r7, #24
 800a3f4:	f7ff ffae 	bl	800a354 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4619      	mov	r1, r3
 800a402:	f001 fcc8 	bl	800bd96 <_ZNKSt5arrayIfLj14EEixEj>
 800a406:	4604      	mov	r4, r0
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a40e:	f7ff fc6c 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a412:	4602      	mov	r2, r0
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3301      	adds	r3, #1
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d3ce      	bcc.n	800a3c4 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a432:	b004      	add	sp, #16
 800a434:	4770      	bx	lr

0800a436 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f805 	bl	800a454 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>
 800a44a:	4603      	mov	r3, r0
      }
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	4413      	add	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	4413      	add	r3, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a478:	b084      	sub	sp, #16
 800a47a:	b590      	push	{r4, r7, lr}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	f107 0418 	add.w	r4, r7, #24
 800a484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a488:	2312      	movs	r3, #18
 800a48a:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a492:	f7ff fe50 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a49c:	f7ff fe4b 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	e02c      	b.n	800a500 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	f107 0018 	add.w	r0, r7, #24
 800a4ac:	f7ff ffc3 	bl	800a436 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	f001 fc7b 	bl	800bdb4 <_ZNKSt5arrayIfLj18EEixEj>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a4c6:	f7ff fc10 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	f107 0018 	add.w	r0, r7, #24
 800a4d6:	f7ff ffae 	bl	800a436 <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f001 fc66 	bl	800bdb4 <_ZNKSt5arrayIfLj18EEixEj>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a4f0:	f7ff fbfb 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	607b      	str	r3, [r7, #4]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d3ce      	bcc.n	800a4a6 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a514:	b004      	add	sp, #16
 800a516:	4770      	bx	lr

0800a518 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f805 	bl	800a536 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>
 800a52c:	4603      	mov	r3, r0
      }
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	4413      	add	r3, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a554:	b084      	sub	sp, #16
 800a556:	b590      	push	{r4, r7, lr}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	f107 0418 	add.w	r4, r7, #24
 800a560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a564:	2304      	movs	r3, #4
 800a566:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a56c:	f7ff fde3 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a574:	f7ff fddf 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a578:	2300      	movs	r3, #0
 800a57a:	607b      	str	r3, [r7, #4]
 800a57c:	e02a      	b.n	800a5d4 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a57e:	2100      	movs	r1, #0
 800a580:	f107 0018 	add.w	r0, r7, #24
 800a584:	f7ff ffc8 	bl	800a518 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	4619      	mov	r1, r3
 800a592:	f001 fc1e 	bl	800bdd2 <_ZNKSt5arrayIfLj4EEixEj>
 800a596:	4604      	mov	r4, r0
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a59c:	f7ff fba5 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	f107 0018 	add.w	r0, r7, #24
 800a5ac:	f7ff ffb4 	bl	800a518 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f001 fc0a 	bl	800bdd2 <_ZNKSt5arrayIfLj4EEixEj>
 800a5be:	4604      	mov	r4, r0
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a5c4:	f7ff fb91 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d3d0      	bcc.n	800a57e <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a5e8:	b004      	add	sp, #16
 800a5ea:	4770      	bx	lr

0800a5ec <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f805 	bl	800a60a <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>
 800a600:	4603      	mov	r3, r0
      }
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	015b      	lsls	r3, r3, #5
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	4413      	add	r3, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a628:	b084      	sub	sp, #16
 800a62a:	b590      	push	{r4, r7, lr}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	f107 0418 	add.w	r4, r7, #24
 800a634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a638:	2308      	movs	r3, #8
 800a63a:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a640:	f7ff fd79 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a648:	f7ff fd75 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a64c:	2300      	movs	r3, #0
 800a64e:	607b      	str	r3, [r7, #4]
 800a650:	e02a      	b.n	800a6a8 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a652:	2100      	movs	r1, #0
 800a654:	f107 0018 	add.w	r0, r7, #24
 800a658:	f7ff ffc8 	bl	800a5ec <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	3b01      	subs	r3, #1
 800a664:	4619      	mov	r1, r3
 800a666:	f001 fbc3 	bl	800bdf0 <_ZNKSt5arrayIfLj8EEixEj>
 800a66a:	4604      	mov	r4, r0
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a670:	f7ff fb3b 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a674:	4602      	mov	r2, r0
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a67a:	2101      	movs	r1, #1
 800a67c:	f107 0018 	add.w	r0, r7, #24
 800a680:	f7ff ffb4 	bl	800a5ec <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	4619      	mov	r1, r3
 800a68e:	f001 fbaf 	bl	800bdf0 <_ZNKSt5arrayIfLj8EEixEj>
 800a692:	4604      	mov	r4, r0
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a698:	f7ff fb27 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a69c:	4602      	mov	r2, r0
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d3d0      	bcc.n	800a652 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a6bc:	b004      	add	sp, #16
 800a6be:	4770      	bx	lr

0800a6c0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6839      	ldr	r1, [r7, #0]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f805 	bl	800a6de <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>
 800a6d4:	4603      	mov	r3, r0
      }
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	4413      	add	r3, r2
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a702:	b084      	sub	sp, #16
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	f107 0418 	add.w	r4, r7, #24
 800a70e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a712:	230c      	movs	r3, #12
 800a714:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a71a:	f7ff fd0c 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a722:	f7ff fd08 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a726:	2300      	movs	r3, #0
 800a728:	607b      	str	r3, [r7, #4]
 800a72a:	e02a      	b.n	800a782 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a72c:	2100      	movs	r1, #0
 800a72e:	f107 0018 	add.w	r0, r7, #24
 800a732:	f7ff ffc5 	bl	800a6c0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4619      	mov	r1, r3
 800a740:	f001 fb65 	bl	800be0e <_ZNKSt5arrayIfLj12EEixEj>
 800a744:	4604      	mov	r4, r0
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a74a:	f7ff face 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a74e:	4602      	mov	r2, r0
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a754:	2101      	movs	r1, #1
 800a756:	f107 0018 	add.w	r0, r7, #24
 800a75a:	f7ff ffb1 	bl	800a6c0 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	3b01      	subs	r3, #1
 800a766:	4619      	mov	r1, r3
 800a768:	f001 fb51 	bl	800be0e <_ZNKSt5arrayIfLj12EEixEj>
 800a76c:	4604      	mov	r4, r0
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a772:	f7ff faba 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a776:	4602      	mov	r2, r0
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3301      	adds	r3, #1
 800a780:	607b      	str	r3, [r7, #4]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d3d0      	bcc.n	800a72c <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a796:	b004      	add	sp, #16
 800a798:	4770      	bx	lr

0800a79a <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 f805 	bl	800a7b8 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>
 800a7ae:	4603      	mov	r3, r0
      }
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	019b      	lsls	r3, r3, #6
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	f107 0418 	add.w	r4, r7, #24
 800a7e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a7f0:	f7ff fca1 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a7fa:	f7ff fc9c 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a7fe:	2300      	movs	r3, #0
 800a800:	607b      	str	r3, [r7, #4]
 800a802:	e02c      	b.n	800a85e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a804:	2100      	movs	r1, #0
 800a806:	f107 0018 	add.w	r0, r7, #24
 800a80a:	f7ff ffc6 	bl	800a79a <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	4619      	mov	r1, r3
 800a818:	f001 fb08 	bl	800be2c <_ZNKSt5arrayIfLj16EEixEj>
 800a81c:	4604      	mov	r4, r0
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a824:	f7ff fa61 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a828:	4602      	mov	r2, r0
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a82e:	2101      	movs	r1, #1
 800a830:	f107 0018 	add.w	r0, r7, #24
 800a834:	f7ff ffb1 	bl	800a79a <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	4619      	mov	r1, r3
 800a842:	f001 faf3 	bl	800be2c <_ZNKSt5arrayIfLj16EEixEj>
 800a846:	4604      	mov	r4, r0
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a84e:	f7ff fa4c 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a852:	4602      	mov	r2, r0
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3301      	adds	r3, #1
 800a85c:	607b      	str	r3, [r7, #4]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d3ce      	bcc.n	800a804 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a872:	b004      	add	sp, #16
 800a874:	4770      	bx	lr

0800a876 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f805 	bl	800a894 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>
 800a88a:	4603      	mov	r3, r0
      }
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	011b      	lsls	r3, r3, #4
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	b590      	push	{r4, r7, lr}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	f107 0418 	add.w	r4, r7, #24
 800a8c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a8c8:	2314      	movs	r3, #20
 800a8ca:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a8d2:	f7ff fc30 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a8dc:	f7ff fc2b 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	607b      	str	r3, [r7, #4]
 800a8e4:	e02c      	b.n	800a940 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	f107 0018 	add.w	r0, r7, #24
 800a8ec:	f7ff ffc3 	bl	800a876 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f001 faa6 	bl	800be4a <_ZNKSt5arrayIfLj20EEixEj>
 800a8fe:	4604      	mov	r4, r0
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a906:	f7ff f9f0 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a90a:	4602      	mov	r2, r0
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a910:	2101      	movs	r1, #1
 800a912:	f107 0018 	add.w	r0, r7, #24
 800a916:	f7ff ffae 	bl	800a876 <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	3b01      	subs	r3, #1
 800a922:	4619      	mov	r1, r3
 800a924:	f001 fa91 	bl	800be4a <_ZNKSt5arrayIfLj20EEixEj>
 800a928:	4604      	mov	r4, r0
 800a92a:	6879      	ldr	r1, [r7, #4]
 800a92c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800a930:	f7ff f9db 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a934:	4602      	mov	r2, r0
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3301      	adds	r3, #1
 800a93e:	607b      	str	r3, [r7, #4]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d3ce      	bcc.n	800a8e6 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a954:	b004      	add	sp, #16
 800a956:	4770      	bx	lr

0800a958 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f000 f805 	bl	800a976 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>
 800a96c:	4603      	mov	r3, r0
      }
 800a96e:	4618      	mov	r0, r3
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a976:	b480      	push	{r7}
 800a978:	b083      	sub	sp, #12
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	4413      	add	r3, r2
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b089      	sub	sp, #36	; 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	eeb0 6a40 	vmov.f32	s12, s0
 800a99e:	eef0 6a60 	vmov.f32	s13, s1
 800a9a2:	eeb0 7a41 	vmov.f32	s14, s2
 800a9a6:	eef0 7a61 	vmov.f32	s15, s3
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	ed87 6a02 	vstr	s12, [r7, #8]
 800a9b2:	edc7 6a03 	vstr	s13, [r7, #12]
 800a9b6:	ed87 7a04 	vstr	s14, [r7, #16]
 800a9ba:	edc7 7a05 	vstr	s15, [r7, #20]
        size_t n = wav[0].size();
 800a9be:	2302      	movs	r3, #2
 800a9c0:	61bb      	str	r3, [r7, #24]
        h.resize(n);
 800a9c2:	69b9      	ldr	r1, [r7, #24]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fbb6 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a9ca:	69b9      	ldr	r1, [r7, #24]
 800a9cc:	6838      	ldr	r0, [r7, #0]
 800a9ce:	f7ff fbb2 	bl	800a136 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	e02c      	b.n	800aa32 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x9e>
            h[i] = wav[0][n - i - 1];
 800a9d8:	f107 0308 	add.w	r3, r7, #8
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ffba 	bl	800a958 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f001 fa3b 	bl	800be68 <_ZNKSt5arrayIfLj2EEixEj>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	69f9      	ldr	r1, [r7, #28]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff f977 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	2101      	movs	r1, #1
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff ffa5 	bl	800a958 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	4619      	mov	r1, r3
 800aa18:	f001 fa26 	bl	800be68 <_ZNKSt5arrayIfLj2EEixEj>
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	69f9      	ldr	r1, [r7, #28]
 800aa20:	6838      	ldr	r0, [r7, #0]
 800aa22:	f7ff f962 	bl	8009cea <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d3ce      	bcc.n	800a9d8 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x44>
    }
 800aa3a:	bf00      	nop
 800aa3c:	bf00      	nop
 800aa3e:	3724      	adds	r7, #36	; 0x24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd90      	pop	{r4, r7, pc}

0800aa44 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 fa19 	bl	800be86 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d00c      	beq.n	800aa8e <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f001 fa16 	bl	800beae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	    ++this->_M_impl._M_finish;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	1d1a      	adds	r2, r3, #4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	605a      	str	r2, [r3, #4]
      }
 800aa8c:	e008      	b.n	800aaa0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff f8b1 	bl	8009bf6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800aa94:	4603      	mov	r3, r0
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f001 fa1a 	bl	800bed4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f000 f817 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800aab8:	4603      	mov	r3, r0
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 fac5 	bl	800c04c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 f91d 	bl	800bd18 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
 800aade:	bf00      	nop
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff ffed 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ab12:	6838      	ldr	r0, [r7, #0]
 800ab14:	f7ff ffe7 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ab20:	f107 030c 	add.w	r3, r7, #12
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff ffde 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	601a      	str	r2, [r3, #0]
    }
 800ab32:	bf00      	nop
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>:
      _S_use_relocate()
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 f805 	bl	800ab50 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ab46:	4603      	mov	r3, r0
      }
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ab58:	2301      	movs	r3, #1
      }
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
	...

0800ab68 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800ab68:	b5b0      	push	{r4, r5, r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 fa98 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	bf8c      	ite	hi
 800ab80:	2301      	movhi	r3, #1
 800ab82:	2300      	movls	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800ab8a:	4836      	ldr	r0, [pc, #216]	; (800ac64 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xfc>)
 800ab8c:	f00e fd45 	bl	801961a <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fa9a 	bl	800c0ca <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>
 800ab96:	4602      	mov	r2, r0
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	bf8c      	ite	hi
 800ab9e:	2301      	movhi	r3, #1
 800aba0:	2300      	movls	r3, #0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d059      	beq.n	800ac5c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7fe fef6 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800abae:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800abb0:	f7ff ffc3 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d014      	beq.n	800abe4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fa93 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800abc4:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681c      	ldr	r4, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fc99 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800abd6:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4629      	mov	r1, r5
 800abdc:	4620      	mov	r0, r4
 800abde:	f001 fa98 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800abe2:	e01f      	b.n	800ac24 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 faa6 	bl	800c13a <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800abee:	4604      	mov	r4, r0
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 faa0 	bl	800c13a <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800abfa:	4603      	mov	r3, r0
 800abfc:	4622      	mov	r2, r4
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 faa9 	bl	800c158 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>
 800ac06:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681c      	ldr	r4, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 fc78 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ac18:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 fc7d 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 800ac36:	461a      	mov	r2, r3
 800ac38:	f000 fc8c 	bl	800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	441a      	add	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	441a      	add	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	609a      	str	r2, [r3, #8]
	}
    }
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bdb0      	pop	{r4, r5, r7, pc}
 800ac64:	08020410 	.word	0x08020410

0800ac68 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>:
	vector(_InputIterator __first, _InputIterator __last,
 800ac68:	b5b0      	push	{r4, r5, r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
 800ac74:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fa88 	bl	800c190 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>
	  _M_range_initialize(__first, __last,
 800ac80:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fa91 	bl	800c1ae <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4621      	mov	r1, r4
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f001 fa96 	bl	800c1c4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>
	}
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bdb0      	pop	{r4, r5, r7, pc}

0800aca2 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 800aca2:	b5b0      	push	{r4, r5, r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	1d38      	adds	r0, r7, #4
 800acac:	e880 0006 	stmia.w	r0, {r1, r2}
 800acb0:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 fadb 	bl	800c272 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 800acbc:	1d3b      	adds	r3, r7, #4
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fab9 	bl	800c236 <_ZNKSt16initializer_listIiE5beginEv>
 800acc4:	4604      	mov	r4, r0
 800acc6:	1d3b      	adds	r3, r7, #4
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fac0 	bl	800c24e <_ZNKSt16initializer_listIiE3endEv>
 800acce:	4602      	mov	r2, r0
 800acd0:	462b      	mov	r3, r5
 800acd2:	4621      	mov	r1, r4
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f001 fadb 	bl	800c290 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>
      }
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4618      	mov	r0, r3
 800acde:	3718      	adds	r7, #24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bdb0      	pop	{r4, r5, r7, pc}

0800ace4 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	f107 030c 	add.w	r3, r7, #12
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 fb04 	bl	800c302 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	1d1a      	adds	r2, r3, #4
 800ad10:	f107 030c 	add.w	r3, r7, #12
 800ad14:	4611      	mov	r1, r2
 800ad16:	4618      	mov	r0, r3
 800ad18:	f001 faf3 	bl	800c302 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}

0800ad26 <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ad26:	b590      	push	{r4, r7, lr}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 faf6 	bl	800c322 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800ad36:	4603      	mov	r3, r0
 800ad38:	681c      	ldr	r4, [r3, #0]
 800ad3a:	6838      	ldr	r0, [r7, #0]
 800ad3c:	f001 faf1 	bl	800c322 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800ad40:	4603      	mov	r3, r0
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	429c      	cmp	r4, r3
 800ad46:	bf14      	ite	ne
 800ad48:	2301      	movne	r3, #1
 800ad4a:	2300      	moveq	r3, #0
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd90      	pop	{r4, r7, pc}

0800ad56 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ad56:	b480      	push	{r7}
 800ad58:	b083      	sub	sp, #12
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	1d1a      	adds	r2, r3, #4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	601a      	str	r2, [r3, #0]
	return *this;
 800ad68:	687b      	ldr	r3, [r7, #4]
      }
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ad76:	b480      	push	{r7}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	6053      	str	r3, [r2, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	609a      	str	r2, [r3, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	461a      	mov	r2, r3
 800adc0:	2300      	movs	r3, #0
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	6053      	str	r3, [r2, #4]
 800adc6:	6093      	str	r3, [r2, #8]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ffdf 	bl	800ad8e <_ZNSt14_Function_baseC1Ev>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	60da      	str	r2, [r3, #12]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800adea:	6838      	ldr	r0, [r7, #0]
 800adec:	f001 faa4 	bl	800c338 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800adf0:	4602      	mov	r2, r0
 800adf2:	f107 0308 	add.w	r3, r7, #8
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f001 faa9 	bl	800c350 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 800adfe:	f107 0308 	add.w	r3, r7, #8
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fa9f 	bl	800b348 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fc fa62 	bl	80072d8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800ae14:	687b      	ldr	r3, [r7, #4]
	}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b086      	sub	sp, #24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800ae28:	6838      	ldr	r0, [r7, #0]
 800ae2a:	f001 fac3 	bl	800c3b4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	f107 0308 	add.w	r3, r7, #8
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 fac8 	bl	800c3cc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 fa80 	bl	800b348 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800ae48:	f107 0308 	add.w	r3, r7, #8
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fc fa43 	bl	80072d8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800ae52:	687b      	ldr	r3, [r7, #4]
	}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f001 fadd 	bl	800c42c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff ffe6 	bl	800ae5c <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 fad5 	bl	800c454 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800aeaa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d009      	beq.n	800aec8 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 fada 	bl	800c46e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800aeba:	4602      	mov	r2, r0
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f001 fae0 	bl	800c488 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
      }
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fadf 	bl	800c4a6 <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800aee8:	4603      	mov	r3, r0
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f001 fadd 	bl	800c4c2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ffe6 	bl	800aef2 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800af30:	b590      	push	{r4, r7, lr}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fad5 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800af40:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00c      	beq.n	800af64 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 fada 	bl	800c504 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800af50:	4604      	mov	r4, r0
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f001 fae3 	bl	800c51e <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 800af58:	4603      	mov	r3, r0
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 fae8 	bl	800c534 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
      }
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	bd90      	pop	{r4, r7, pc}

0800af74 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4618      	mov	r0, r3
 800af80:	f001 faeb 	bl	800c55a <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800af84:	4603      	mov	r3, r0
 800af86:	4618      	mov	r0, r3
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	da01      	bge.n	800afa8 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	e000      	b.n	800afaa <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800afa8:	687b      	ldr	r3, [r7, #4]
    }
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	429a      	cmp	r2, r3
 800afca:	da01      	bge.n	800afd0 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	e000      	b.n	800afd2 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800afd0:	687b      	ldr	r3, [r7, #4]
    }
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d201      	bcs.n	800aff8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	e000      	b.n	800affa <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800aff8:	687b      	ldr	r3, [r7, #4]
    }
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b006:	b480      	push	{r7}
 800b008:	b083      	sub	sp, #12
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6178      	str	r0, [r7, #20]
 800b024:	6139      	str	r1, [r7, #16]
 800b026:	60fa      	str	r2, [r7, #12]
 800b028:	60bb      	str	r3, [r7, #8]
 800b02a:	ed87 0a01 	vstr	s0, [r7, #4]
 800b02e:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b032:	f06f 0314 	mvn.w	r3, #20
}
 800b036:	4618      	mov	r0, r3
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b042:	b480      	push	{r7}
 800b044:	b087      	sub	sp, #28
 800b046:	af00      	add	r7, sp, #0
 800b048:	6178      	str	r0, [r7, #20]
 800b04a:	6139      	str	r1, [r7, #16]
 800b04c:	60fa      	str	r2, [r7, #12]
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	ed87 0a01 	vstr	s0, [r7, #4]
 800b054:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b058:	f06f 0314 	mvn.w	r3, #20
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6178      	str	r0, [r7, #20]
 800b070:	6139      	str	r1, [r7, #16]
 800b072:	60fa      	str	r2, [r7, #12]
 800b074:	ed87 0a02 	vstr	s0, [r7, #8]
 800b078:	edc7 0a01 	vstr	s1, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b07e:	f06f 0314 	mvn.w	r3, #20
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b08e:	b480      	push	{r7}
 800b090:	b087      	sub	sp, #28
 800b092:	af00      	add	r7, sp, #0
 800b094:	6178      	str	r0, [r7, #20]
 800b096:	6139      	str	r1, [r7, #16]
 800b098:	60fa      	str	r2, [r7, #12]
 800b09a:	ed87 0a02 	vstr	s0, [r7, #8]
 800b09e:	edc7 0a01 	vstr	s1, [r7, #4]
 800b0a2:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b0a4:	f06f 0314 	mvn.w	r3, #20
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	371c      	adds	r7, #28
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6178      	str	r0, [r7, #20]
 800b0bc:	6139      	str	r1, [r7, #16]
 800b0be:	60fa      	str	r2, [r7, #12]
 800b0c0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b0c4:	edc7 0a01 	vstr	s1, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b0ca:	f06f 0314 	mvn.w	r3, #20
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b0da:	b480      	push	{r7}
 800b0dc:	b087      	sub	sp, #28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6178      	str	r0, [r7, #20]
 800b0e2:	6139      	str	r1, [r7, #16]
 800b0e4:	60fa      	str	r2, [r7, #12]
 800b0e6:	ed87 0a02 	vstr	s0, [r7, #8]
 800b0ea:	edc7 0a01 	vstr	s1, [r7, #4]
 800b0ee:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b0f0:	f06f 0314 	mvn.w	r3, #20
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	371c      	adds	r7, #28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	6178      	str	r0, [r7, #20]
 800b108:	6139      	str	r1, [r7, #16]
 800b10a:	60fa      	str	r2, [r7, #12]
 800b10c:	ed87 0a02 	vstr	s0, [r7, #8]
 800b110:	edc7 0a01 	vstr	s1, [r7, #4]
 800b114:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b116:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b126:	b480      	push	{r7}
 800b128:	b087      	sub	sp, #28
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6178      	str	r0, [r7, #20]
 800b12e:	6139      	str	r1, [r7, #16]
 800b130:	60fa      	str	r2, [r7, #12]
 800b132:	ed87 0a02 	vstr	s0, [r7, #8]
 800b136:	edc7 0a01 	vstr	s1, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b13c:	f06f 0314 	mvn.w	r3, #20
}
 800b140:	4618      	mov	r0, r3
 800b142:	371c      	adds	r7, #28
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f001 fa0d 	bl	800c576 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fa0e 	bl	800c592 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff ffeb 	bl	800b166 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff ffeb 	bl	800b180 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	: _M_t()
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff ffe8 	bl	800b19a <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800b1de:	6838      	ldr	r0, [r7, #0]
 800b1e0:	f001 fa07 	bl	800c5f2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f001 f9e2 	bl	800c5b2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800b1ee:	6838      	ldr	r0, [r7, #0]
 800b1f0:	f001 fa14 	bl	800c61c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f001 fa1d 	bl	800c636 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fa0d 	bl	800c61c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800b202:	687b      	ldr	r3, [r7, #4]
      }
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800b22e:	687c      	ldr	r4, [r7, #4]
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	4618      	mov	r0, r3
 800b238:	f001 fa08 	bl	800c64c <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 800b23c:	f107 030c 	add.w	r3, r7, #12
 800b240:	4619      	mov	r1, r3
 800b242:	4620      	mov	r0, r4
 800b244:	f001 fa0e 	bl	800c664 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}

0800b252 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 fa10 	bl	800c680 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 800b26a:	b590      	push	{r4, r7, lr}
 800b26c:	b089      	sub	sp, #36	; 0x24
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d02f      	beq.n	800b2da <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x70>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68b9      	ldr	r1, [r7, #8]
 800b27e:	4618      	mov	r0, r3
 800b280:	f001 fa23 	bl	800c6ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800b284:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 800b286:	68b8      	ldr	r0, [r7, #8]
 800b288:	f001 fa32 	bl	800c6f0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800b28c:	4603      	mov	r3, r0
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	441a      	add	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 800b298:	69f8      	ldr	r0, [r7, #28]
 800b29a:	f001 fa36 	bl	800c70a <_ZSt11__addressofImEPT_RS0_>
 800b29e:	4601      	mov	r1, r0
 800b2a0:	f107 0314 	add.w	r3, r7, #20
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7f6 f8ac 	bl	8001404 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f107 0314 	add.w	r3, r7, #20
 800b2b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b2b8:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	68fc      	ldr	r4, [r7, #12]
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	f107 0114 	add.w	r1, r7, #20
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f6 f8e8 	bl	800149c <_ZStplRKSt13_Bit_iteratori>
 800b2cc:	f104 0308 	add.w	r3, r4, #8
 800b2d0:	463a      	mov	r2, r7
 800b2d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b2d6:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
      }
 800b2da:	bf00      	nop
 800b2dc:	3724      	adds	r7, #36	; 0x24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd90      	pop	{r4, r7, pc}

0800b2e2 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 800b2e2:	b590      	push	{r4, r7, lr}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d012      	beq.n	800b320 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 800b300:	f04f 34ff 	mov.w	r4, #4294967295
 800b304:	e000      	b.n	800b308 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 800b306:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f001 fa08 	bl	800c720 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800b310:	4602      	mov	r2, r0
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b316:	461a      	mov	r2, r3
 800b318:	4621      	mov	r1, r4
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f011 ff92 	bl	801d244 <memset>
			   * sizeof(_Bit_type));
      }
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	bd90      	pop	{r4, r7, pc}

0800b328 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2200      	movs	r2, #0
 800b338:	4619      	mov	r1, r3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7f6 f862 	bl	8001404 <_ZNSt13_Bit_iteratorC1EPmj>
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	4611      	mov	r1, r2
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fa02 	bl	800c762 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f103 0208 	add.w	r2, r3, #8
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	3308      	adds	r3, #8
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f001 fa2b 	bl	800c7c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f103 020c 	add.w	r2, r3, #12
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	330c      	adds	r3, #12
 800b37a:	4619      	mov	r1, r3
 800b37c:	4610      	mov	r0, r2
 800b37e:	f001 fa4c 	bl	800c81a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b3ac:	68fc      	ldr	r4, [r7, #12]
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f001 fa52 	bl	800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	f107 0308 	add.w	r3, r7, #8
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f001 fa56 	bl	800c86e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}

0800b3cc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f001 fa62 	bl	800c8a0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f001 fa62 	bl	800c8ba <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff ffde 	bl	800b3cc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b410:	4603      	mov	r3, r0
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff ffd8 	bl	800b3cc <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b41c:	4602      	mov	r2, r0
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d006      	beq.n	800b436 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 fa46 	bl	800c8ba <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b42e:	4603      	mov	r3, r0
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	4798      	blx	r3
      }
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b47e:	f107 030c 	add.w	r3, r7, #12
 800b482:	4618      	mov	r0, r3
 800b484:	f001 fa26 	bl	800c8d4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800b488:	4602      	mov	r2, r0
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bf8c      	ite	hi
 800b490:	2301      	movhi	r3, #1
 800b492:	2300      	movls	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b49a:	4804      	ldr	r0, [pc, #16]	; (800b4ac <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b49c:	f00e f8bd 	bl	801961a <_ZSt20__throw_length_errorPKc>
	return __n;
 800b4a0:	687b      	ldr	r3, [r7, #4]
      }
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	08020420 	.word	0x08020420

0800b4b0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f001 fa21 	bl	800c908 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f001 fa2b 	bl	800c924 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800b4d8:	b590      	push	{r4, r7, lr}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 f80d 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b4ee:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f001 fa30 	bl	800c95a <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b4fa:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	605a      	str	r2, [r3, #4]
      }
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	bd90      	pop	{r4, r7, pc}

0800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800b52a:	e00a      	b.n	800b542 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f001 fa33 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800b532:	4603      	mov	r3, r0
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 fa39 	bl	800c9ae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3304      	adds	r3, #4
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	429a      	cmp	r2, r3
 800b548:	d1f0      	bne.n	800b52c <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800b54a:	bf00      	nop
 800b54c:	bf00      	nop
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
	if (__p)
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d005      	beq.n	800b572 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 fa2c 	bl	800c9ca <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>
      }
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b57a:	b480      	push	{r7}
 800b57c:	b083      	sub	sp, #12
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4618      	mov	r0, r3
 800b590:	370c      	adds	r7, #12
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b5b0:	b5b0      	push	{r4, r5, r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b5bc:	f107 0208 	add.w	r2, r7, #8
 800b5c0:	f107 030c 	add.w	r3, r7, #12
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fb26 	bl	8009c18 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d017      	beq.n	800b602 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b5d2:	f107 020c 	add.w	r2, r7, #12
 800b5d6:	f107 0308 	add.w	r3, r7, #8
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 fa28 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f5 fdae 	bl	8001146 <_ZSt4__lgi>
 800b5ea:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b5ec:	005a      	lsls	r2, r3, #1
 800b5ee:	462b      	mov	r3, r5
 800b5f0:	68b9      	ldr	r1, [r7, #8]
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f001 fa32 	bl	800ca5c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f001 fa64 	bl	800caca <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bdb0      	pop	{r4, r5, r7, pc}

0800b60a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b60a:	b580      	push	{r7, lr}
 800b60c:	ed2d 8b02 	vpush	{d8}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b61a:	f107 0308 	add.w	r3, r7, #8
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fbd1 	bl	8009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b624:	4603      	mov	r3, r0
 800b626:	ed93 8a00 	vldr	s16, [r3]
 800b62a:	1d3b      	adds	r3, r7, #4
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe fbca 	bl	8009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b632:	4603      	mov	r3, r0
 800b634:	edd3 7a00 	vldr	s15, [r3]
 800b638:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	bf4c      	ite	mi
 800b642:	2301      	movmi	r3, #1
 800b644:	2300      	movpl	r3, #0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	ecbd 8b02 	vpop	{d8}
 800b652:	bd80      	pop	{r7, pc}

0800b654 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 800b660:	f107 0208 	add.w	r2, r7, #8
 800b664:	f107 030c 	add.w	r3, r7, #12
 800b668:	4611      	mov	r1, r2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f001 fa65 	bl	800cb3a <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	e01d      	b.n	800b6b6 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b67e:	e00a      	b.n	800b696 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__result, __first))
 800b680:	1d3b      	adds	r3, r7, #4
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	6979      	ldr	r1, [r7, #20]
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff ffbf 	bl	800b60a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b696:	f107 030c 	add.w	r3, r7, #12
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe fb83 	bl	8009da6 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	f107 0308 	add.w	r3, r7, #8
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7fe fb64 	bl	8009d76 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e5      	bne.n	800b680 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b6b4:	697b      	ldr	r3, [r7, #20]
    }
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b6ca:	f107 030c 	add.w	r3, r7, #12
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 fa4b 	bl	800cb6a <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bf8c      	ite	hi
 800b6dc:	2301      	movhi	r3, #1
 800b6de:	2300      	movls	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b6e6:	4804      	ldr	r0, [pc, #16]	; (800b6f8 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b6e8:	f00d ff97 	bl	801961a <_ZSt20__throw_length_errorPKc>
	return __n;
 800b6ec:	687b      	ldr	r3, [r7, #4]
      }
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	08020420 	.word	0x08020420

0800b6fc <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b712:	b580      	push	{r7, lr}
 800b714:	b084      	sub	sp, #16
 800b716:	af00      	add	r7, sp, #0
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b71e:	e00a      	b.n	800b736 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f001 fa4a 	bl	800cbba <_ZSt11__addressofIiEPT_RS0_>
 800b726:	4603      	mov	r3, r0
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fa50 	bl	800cbd0 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3304      	adds	r3, #4
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d1f0      	bne.n	800b720 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0xe>
    }
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
	if (__p)
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	68b9      	ldr	r1, [r7, #8]
 800b760:	4618      	mov	r0, r3
 800b762:	f001 fa43 	bl	800cbec <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>
      }
 800b766:	bf00      	nop
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b76e:	b590      	push	{r4, r7, lr}
 800b770:	b083      	sub	sp, #12
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 fa47 	bl	800cc0a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>
 800b77c:	bf00      	nop
 800b77e:	4620      	mov	r0, r4
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	bd90      	pop	{r4, r7, pc}

0800b786 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>:
  //  any of the POD optimizations.

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b79c:	b590      	push	{r4, r7, lr}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __first != __last; ++__first, (void)++__cur)
 800b7ae:	e016      	b.n	800b7de <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800b7b0:	6978      	ldr	r0, [r7, #20]
 800b7b2:	f001 f8f1 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	f107 030c 	add.w	r3, r7, #12
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fe fb02 	bl	8009dc6 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	6838      	ldr	r0, [r7, #0]
 800b7ca:	f000 fb70 	bl	800beae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800b7ce:	f107 030c 	add.w	r3, r7, #12
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fe fae7 	bl	8009da6 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	f107 0208 	add.w	r2, r7, #8
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fac4 	bl	8009d76 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1dd      	bne.n	800b7b0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x14>
	  return __cur;
 800b7f4:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__result, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd90      	pop	{r4, r7, pc}

0800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	609a      	str	r2, [r3, #8]
	{ }
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4618      	mov	r0, r3
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
 800b85c:	607a      	str	r2, [r7, #4]
	if (__p)
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f9da 	bl	800cc24 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4618      	mov	r0, r3
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	60f8      	str	r0, [r7, #12]
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b89a:	e00a      	b.n	800b8b2 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f001 f9d0 	bl	800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 f9d6 	bl	800cc58 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d1f0      	bne.n	800b89c <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xe>
    }
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f001 f9cf 	bl	800cc74 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f001 f9d4 	bl	800cc8a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 f805 	bl	800b900 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800b8f6:	4603      	mov	r3, r0
      }
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800b908:	2301      	movs	r3, #1
      }
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
	...

0800b918 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800b918:	b5b0      	push	{r4, r5, r7, lr}
 800b91a:	b08c      	sub	sp, #48	; 0x30
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800b924:	4a59      	ldr	r2, [pc, #356]	; (800ba8c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 800b926:	2101      	movs	r1, #1
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f001 f9c7 	bl	800ccbc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800b92e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7fe fb96 	bl	800a06e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 800b942:	4603      	mov	r3, r0
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	f107 0214 	add.w	r2, r7, #20
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4611      	mov	r1, r2
 800b950:	4618      	mov	r0, r3
 800b952:	f001 f9fa 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800b956:	4603      	mov	r3, r0
 800b958:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 fa08 	bl	800cd74 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 800b964:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800b96a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800b970:	69ba      	ldr	r2, [r7, #24]
 800b972:	18d5      	adds	r5, r2, r3
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 f97d 	bl	800cc74 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	4629      	mov	r1, r5
 800b980:	4620      	mov	r0, r4
 800b982:	f7ff ff9f 	bl	800b8c4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800b986:	2300      	movs	r3, #0
 800b988:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800b98a:	f7ff ffae 	bl	800b8ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d027      	beq.n	800b9e4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b994:	f107 0308 	add.w	r3, r7, #8
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 fa13 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ff67 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b9aa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9b2:	f001 f9f3 	bl	800cd9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800b9b6:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b9be:	f107 0308 	add.w	r3, r7, #8
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f9fe 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ff52 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b9d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800b9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9d8:	6a39      	ldr	r1, [r7, #32]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f001 f9de 	bl	800cd9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800b9e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b9e2:	e026      	b.n	800ba32 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800b9e4:	f107 0308 	add.w	r3, r7, #8
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 f9eb 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff ff3f 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800b9fa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	4621      	mov	r1, r4
 800ba00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba02:	f001 f9ea 	bl	800cdda <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800ba06:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4618      	mov	r0, r3
 800ba14:	f001 f9d6 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff ff2a 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800ba24:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800ba26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba28:	6a39      	ldr	r1, [r7, #32]
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f001 f9d5 	bl	800cdda <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800ba30:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800ba32:	f7ff ff5a 	bl	800b8ea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f083 0301 	eor.w	r3, r3, #1
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d009      	beq.n	800ba56 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff ff17 	bl	800b878 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6a39      	ldr	r1, [r7, #32]
 800ba50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba52:	f7ff ff1c 	bl	800b88e <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800ba56:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800ba62:	461a      	mov	r2, r3
 800ba64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba66:	f7ff fef4 	bl	800b852 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba74:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	441a      	add	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	609a      	str	r2, [r3, #8]
    }
 800ba82:	bf00      	nop
 800ba84:	3730      	adds	r7, #48	; 0x30
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bdb0      	pop	{r4, r5, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	08020454 	.word	0x08020454

0800ba90 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800bab0:	b5b0      	push	{r4, r5, r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800bab8:	1d3b      	adds	r3, r7, #4
 800baba:	4618      	mov	r0, r3
 800babc:	f001 f9a6 	bl	800ce0c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800bac0:	f107 030c 	add.w	r3, r7, #12
 800bac4:	4629      	mov	r1, r5
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 f9ab 	bl	800ce22 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800bacc:	bf00      	nop
 800bace:	4620      	mov	r0, r4
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bdb0      	pop	{r4, r5, r7, pc}

0800bad6 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	60f8      	str	r0, [r7, #12]
 800bade:	60b9      	str	r1, [r7, #8]
 800bae0:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800bae2:	f107 0208 	add.w	r2, r7, #8
 800bae6:	f107 030c 	add.w	r3, r7, #12
 800baea:	4611      	mov	r1, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f001 f9a6 	bl	800ce3e <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d017      	beq.n	800bb28 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800baf8:	f107 020c 	add.w	r2, r7, #12
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 f921 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f5 fb1b 	bl	8001146 <_ZSt4__lgi>
 800bb10:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800bb12:	005a      	lsls	r2, r3, #1
 800bb14:	793b      	ldrb	r3, [r7, #4]
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f001 f9a8 	bl	800ce6e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800bb1e:	793a      	ldrb	r2, [r7, #4]
 800bb20:	68b9      	ldr	r1, [r7, #8]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f001 f9da 	bl	800cedc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800bb28:	bf00      	nop
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800bb3c:	f107 0208 	add.w	r2, r7, #8
 800bb40:	f107 030c 	add.w	r3, r7, #12
 800bb44:	4611      	mov	r1, r2
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 fff7 	bl	800cb3a <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
	return __first;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	e01d      	b.n	800bb92 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bb5a:	e00a      	b.n	800bb72 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__first, __result))
 800bb5c:	1d3b      	adds	r3, r7, #4
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	68f9      	ldr	r1, [r7, #12]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff fd51 	bl	800b60a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bb72:	f107 030c 	add.w	r3, r7, #12
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe f915 	bl	8009da6 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f107 0308 	add.w	r3, r7, #8
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7fe f8f6 	bl	8009d76 <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e5      	bne.n	800bb5c <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800bb90:	697b      	ldr	r3, [r7, #20]
    }
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
	...

0800bb9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800bb9c:	b5b0      	push	{r4, r5, r7, lr}
 800bb9e:	b088      	sub	sp, #32
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 80af 	beq.w	800bd0c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
	{
	  const size_type __size = size();
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7fd fef3 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800bbb4:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	109b      	asrs	r3, r3, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bbc2:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fa6f 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d808      	bhi.n	800bbe4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa68 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d901      	bls.n	800bbe8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4c>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e000      	b.n	800bbea <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d30f      	bcc.n	800bc14 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fc84 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bc00:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bc02:	461a      	mov	r2, r3
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fea7 	bl	800c95a <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800bc0c:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800bc12:	e07b      	b.n	800bd0c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
		_M_check_len(__n, "vector::_M_default_append");
 800bc14:	4a3f      	ldr	r2, [pc, #252]	; (800bd14 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x178>)
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f997 	bl	800cf4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800bc1e:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6979      	ldr	r1, [r7, #20]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f000 fa60 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bc2a:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bc2c:	f7fe ff85 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d01c      	beq.n	800bc70 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0xd4>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff fc61 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bc46:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bc48:	461a      	mov	r2, r3
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fe84 	bl	800c95a <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681c      	ldr	r4, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fc53 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bc62:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	4629      	mov	r1, r5
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 fa52 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800bc6e:	e030      	b.n	800bcd2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x136>
		  pointer __destroy_from = pointer();
 800bc70:	2300      	movs	r3, #0
 800bc72:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7ff fc42 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bc84:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bc86:	461a      	mov	r2, r3
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 fe65 	bl	800c95a <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		      __destroy_from = __new_start + __size;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681c      	ldr	r4, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fc2f 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bcaa:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f001 f992 	bl	800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681c      	ldr	r4, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7ff fc21 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bcc6:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7ff fc26 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	      _M_deallocate(this->_M_impl._M_start,
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800bce4:	461a      	mov	r2, r3
 800bce6:	f7ff fc35 	bl	800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __new_start;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800bcf0:	69fa      	ldr	r2, [r7, #28]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	441a      	add	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	441a      	add	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	609a      	str	r2, [r3, #8]
    }
 800bd0c:	bf00      	nop
 800bd0e:	3720      	adds	r7, #32
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bdb0      	pop	{r4, r5, r7, pc}
 800bd14:	08020470 	.word	0x08020470

0800bd18 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800bd18:	b590      	push	{r4, r7, lr}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	109b      	asrs	r3, r3, #2
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00e      	beq.n	800bd52 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fbe4 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bd40:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bd42:	461a      	mov	r2, r3
 800bd44:	4621      	mov	r1, r4
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f7ff fbe9 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	605a      	str	r2, [r3, #4]
      }
 800bd52:	bf00      	nop
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd90      	pop	{r4, r7, pc}

0800bd5a <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f001 f94f 	bl	800d00c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800bd6e:	4603      	mov	r3, r0
      }
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <_ZNKSt5arrayIfLj10EEixEj>:
      operator[](size_type __n) const noexcept
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 f94f 	bl	800d02a <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>
 800bd8c:	4603      	mov	r3, r0
      }
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <_ZNKSt5arrayIfLj14EEixEj>:
      operator[](size_type __n) const noexcept
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 f94f 	bl	800d048 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>
 800bdaa:	4603      	mov	r3, r0
      }
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f001 f94f 	bl	800d066 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 800bdc8:	4603      	mov	r3, r0
      }
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 f94f 	bl	800d084 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800bde6:	4603      	mov	r3, r0
      }
 800bde8:	4618      	mov	r0, r3
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <_ZNKSt5arrayIfLj8EEixEj>:
      operator[](size_type __n) const noexcept
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f94f 	bl	800d0a2 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>
 800be04:	4603      	mov	r3, r0
      }
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 f94f 	bl	800d0c0 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 800be22:	4603      	mov	r3, r0
      }
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f001 f94f 	bl	800d0de <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800be40:	4603      	mov	r3, r0
      }
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <_ZNKSt5arrayIfLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 f94f 	bl	800d0fc <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>
 800be5e:	4603      	mov	r3, r0
      }
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <_ZNKSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) const noexcept
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f001 f94f 	bl	800d11a <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800be7c:	4603      	mov	r3, r0
      }
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800be86:	b480      	push	{r7}
 800be88:	b083      	sub	sp, #12
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	605a      	str	r2, [r3, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	609a      	str	r2, [r3, #8]
	{ }
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	60f8      	str	r0, [r7, #12]
 800beb6:	60b9      	str	r1, [r7, #8]
 800beb8:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 f93c 	bl	800d138 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	68b9      	ldr	r1, [r7, #8]
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f001 f941 	bl	800d14e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800bed4:	b5b0      	push	{r4, r5, r7, lr}
 800bed6:	b08c      	sub	sp, #48	; 0x30
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800bee0:	4a59      	ldr	r2, [pc, #356]	; (800c048 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800bee2:	2101      	movs	r1, #1
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f001 f831 	bl	800cf4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800beea:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f7fd fe6c 	bl	8009bd6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800befe:	4603      	mov	r3, r0
 800bf00:	617b      	str	r3, [r7, #20]
 800bf02:	f107 0214 	add.w	r2, r7, #20
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fd90 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800bf12:	4603      	mov	r3, r0
 800bf14:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f8e5 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bf20:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800bf26:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	18d5      	adds	r5, r2, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 f901 	bl	800d138 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f7ff ffb6 	bl	800beae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  __new_finish = pointer();
 800bf42:	2300      	movs	r3, #0
 800bf44:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bf46:	f7fe fdf8 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d027      	beq.n	800bfa0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bf50:	f107 0308 	add.w	r3, r7, #8
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff fa82 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7ff fad1 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bf66:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf6e:	f000 f8d0 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800bf72:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf76:	3304      	adds	r3, #4
 800bf78:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bf7a:	f107 0308 	add.w	r3, r7, #8
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fa6d 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bf84:	4603      	mov	r3, r0
 800bf86:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff fabc 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bf90:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bf92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf94:	6a39      	ldr	r1, [r7, #32]
 800bf96:	4620      	mov	r0, r4
 800bf98:	f000 f8bb 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800bf9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bf9e:	e026      	b.n	800bfee <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800bfa0:	f107 0308 	add.w	r3, r7, #8
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff fa5a 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff faa9 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bfb6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	4621      	mov	r1, r4
 800bfbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfbe:	f001 f80c 	bl	800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800bfc2:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800bfca:	f107 0308 	add.w	r3, r7, #8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fa45 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fa94 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bfe0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800bfe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfe4:	6a39      	ldr	r1, [r7, #32]
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fff7 	bl	800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800bfec:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800bfee:	f7fe fda4 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f083 0301 	eor.w	r3, r3, #1
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	4618      	mov	r0, r3
 800c002:	f7ff fa81 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c006:	4603      	mov	r3, r0
 800c008:	461a      	mov	r2, r3
 800c00a:	6a39      	ldr	r1, [r7, #32]
 800c00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c00e:	f7ff fa86 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800c012:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c01e:	461a      	mov	r2, r3
 800c020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c022:	f7ff fa97 	bl	800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c030:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	441a      	add	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	609a      	str	r2, [r3, #8]
    }
 800c03e:	bf00      	nop
 800c040:	3730      	adds	r7, #48	; 0x30
 800c042:	46bd      	mov	sp, r7
 800c044:	bdb0      	pop	{r4, r5, r7, pc}
 800c046:	bf00      	nop
 800c048:	08020454 	.word	0x08020454

0800c04c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800c04c:	b5b0      	push	{r4, r5, r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d011      	beq.n	800c086 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c062:	687c      	ldr	r4, [r7, #4]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685d      	ldr	r5, [r3, #4]
 800c068:	6838      	ldr	r0, [r7, #0]
 800c06a:	f001 f886 	bl	800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c06e:	4603      	mov	r3, r0
 800c070:	461a      	mov	r2, r3
 800c072:	4629      	mov	r1, r5
 800c074:	4620      	mov	r0, r4
 800c076:	f001 f88b 	bl	800d190 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	    ++this->_M_impl._M_finish;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	1d1a      	adds	r2, r3, #4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	605a      	str	r2, [r3, #4]
      }
 800c084:	e00c      	b.n	800c0a0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7fd fdb5 	bl	8009bf6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800c08c:	4604      	mov	r4, r0
 800c08e:	6838      	ldr	r0, [r7, #0]
 800c090:	f001 f873 	bl	800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c094:	4603      	mov	r3, r0
 800c096:	461a      	mov	r2, r3
 800c098:	4621      	mov	r1, r4
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 f88c 	bl	800d1b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bdb0      	pop	{r4, r5, r7, pc}

0800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff fb67 	bl	800b786 <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fc0a 	bl	800c8d4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	109b      	asrs	r3, r3, #2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d006      	beq.n	800c108 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x1e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f001 f916 	bl	800d330 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>
 800c104:	4603      	mov	r3, r0
 800c106:	e000      	b.n	800c10a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x20>
 800c108:	2300      	movs	r3, #0
      }
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c112:	b590      	push	{r4, r7, lr}
 800c114:	b087      	sub	sp, #28
 800c116:	af02      	add	r7, sp, #8
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c120:	f88d 4000 	strb.w	r4, [sp]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f001 f90e 	bl	800d34c <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>
 800c130:	4603      	mov	r3, r0
      }
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	bd90      	pop	{r4, r7, pc}

0800c13a <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c142:	f107 030c 	add.w	r3, r7, #12
 800c146:	6879      	ldr	r1, [r7, #4]
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 f911 	bl	800d370 <_ZNSt13move_iteratorIPfEC1ES0_>
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4618      	mov	r0, r3
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	68b9      	ldr	r1, [r7, #8]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff ffbd 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c170:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff f9c7 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c17a:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f001 f907 	bl	800d394 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
	      return __result;
 800c186:	697b      	ldr	r3, [r7, #20]
	}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 fbb2 	bl	800c908 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c1b6:	bf00      	nop
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	68b8      	ldr	r0, [r7, #8]
 800c1d6:	f001 f90e 	bl	800d3f6 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c1de:	68fc      	ldr	r4, [r7, #12]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff f990 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6978      	ldr	r0, [r7, #20]
 800c1ee:	f7ff f941 	bl	800b474 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f7ff ff77 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	441a      	add	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff f976 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c21c:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c21e:	4622      	mov	r2, r4
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	68b8      	ldr	r0, [r7, #8]
 800c224:	f001 f8fb 	bl	800d41e <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800c228:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	605a      	str	r2, [r3, #4]
	}
 800c22e:	bf00      	nop
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	bd90      	pop	{r4, r7, pc}

0800c236 <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c236:	b480      	push	{r7}
 800c238:	b083      	sub	sp, #12
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c24e:	b590      	push	{r4, r7, lr}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ffed 	bl	800c236 <_ZNKSt16initializer_listIiE5beginEv>
 800c25c:	4604      	mov	r4, r0
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 f8ff 	bl	800d462 <_ZNKSt16initializer_listIiE4sizeEv>
 800c264:	4603      	mov	r3, r0
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4423      	add	r3, r4
 800c26a:	4618      	mov	r0, r3
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}

0800c272 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fc8c 	bl	800cb9e <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c290:	b590      	push	{r4, r7, lr}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	68b8      	ldr	r0, [r7, #8]
 800c2a2:	f001 f8ea 	bl	800d47a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c2aa:	68fc      	ldr	r4, [r7, #12]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff fa24 	bl	800b6fc <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6978      	ldr	r0, [r7, #20]
 800c2ba:	f7ff fa01 	bl	800b6c0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f001 f8ed 	bl	800d4a2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	441a      	add	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fa0a 	bl	800b6fc <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c2e8:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c2ea:	4622      	mov	r2, r4
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	68b8      	ldr	r0, [r7, #8]
 800c2f0:	f001 f8eb 	bl	800d4ca <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>
 800c2f4:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	605a      	str	r2, [r3, #4]
	}
 800c2fa:	bf00      	nop
 800c2fc:	371c      	adds	r7, #28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd90      	pop	{r4, r7, pc}

0800c302 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 800c350:	b590      	push	{r4, r7, lr}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	461a      	mov	r2, r3
 800c35e:	2300      	movs	r3, #0
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	6053      	str	r3, [r2, #4]
 800c364:	6093      	str	r3, [r2, #8]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe fd10 	bl	800ad8e <_ZNSt14_Function_baseC1Ev>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 f8d7 	bl	800d52c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00e      	beq.n	800c3a2 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800c384:	687c      	ldr	r4, [r7, #4]
 800c386:	6838      	ldr	r0, [r7, #0]
 800c388:	f7ff ffd6 	bl	800c338 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c38c:	4603      	mov	r3, r0
 800c38e:	4619      	mov	r1, r3
 800c390:	4620      	mov	r0, r4
 800c392:	f001 f8db 	bl	800d54c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a04      	ldr	r2, [pc, #16]	; (800c3ac <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 800c39a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a04      	ldr	r2, [pc, #16]	; (800c3b0 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 800c3a0:	609a      	str	r2, [r3, #8]
	}
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd90      	pop	{r4, r7, pc}
 800c3ac:	0800d571 	.word	0x0800d571
 800c3b0:	0800d5b3 	.word	0x0800d5b3

0800c3b4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
	...

0800c3cc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 800c3cc:	b590      	push	{r4, r7, lr}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	2300      	movs	r3, #0
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	6053      	str	r3, [r2, #4]
 800c3e0:	6093      	str	r3, [r2, #8]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fcd2 	bl	800ad8e <_ZNSt14_Function_baseC1Ev>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c3f0:	6838      	ldr	r0, [r7, #0]
 800c3f2:	f001 f8fd 	bl	800d5f0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00e      	beq.n	800c41a <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800c3fc:	687c      	ldr	r4, [r7, #4]
 800c3fe:	6838      	ldr	r0, [r7, #0]
 800c400:	f7ff ffd8 	bl	800c3b4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800c404:	4603      	mov	r3, r0
 800c406:	4619      	mov	r1, r3
 800c408:	4620      	mov	r0, r4
 800c40a:	f001 f8fc 	bl	800d606 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4a04      	ldr	r2, [pc, #16]	; (800c424 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800c412:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a04      	ldr	r2, [pc, #16]	; (800c428 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 800c418:	609a      	str	r2, [r3, #8]
	}
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4618      	mov	r0, r3
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	bd90      	pop	{r4, r7, pc}
 800c424:	0800d62b 	.word	0x0800d62b
 800c428:	0800d66d 	.word	0x0800d66d

0800c42c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4618      	mov	r0, r3
 800c43a:	f001 f936 	bl	800d6aa <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 f808 	bl	800c454 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800c444:	4602      	mov	r2, r0
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4618      	mov	r0, r3
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4618      	mov	r0, r3
 800c460:	f001 f930 	bl	800d6c4 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c464:	4603      	mov	r3, r0
 800c466:	4618      	mov	r0, r3
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800c46e:	b580      	push	{r7, lr}
 800c470:	b082      	sub	sp, #8
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4618      	mov	r0, r3
 800c47a:	f001 f930 	bl	800d6de <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 800c47e:	4603      	mov	r3, r0
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 800c498:	6838      	ldr	r0, [r7, #0]
 800c49a:	f00d f8a7 	bl	80195ec <_ZdaPv>
	}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 f921 	bl	800d6f8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fe fe49 	bl	800b166 <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f808 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f001 f90c 	bl	800d712 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 f884 	bl	800c61c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c514:	4603      	mov	r3, r0
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c51e:	b480      	push	{r7}
 800c520:	b083      	sub	sp, #12
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800c534:	b590      	push	{r4, r7, lr}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c53e:	683c      	ldr	r4, [r7, #0]
 800c540:	2c00      	cmp	r4, #0
 800c542:	d006      	beq.n	800c552 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800c544:	4620      	mov	r0, r4
 800c546:	f7f4 ffe9 	bl	800151c <_ZN2ei9ei_matrixD1Ev>
 800c54a:	2110      	movs	r1, #16
 800c54c:	4620      	mov	r0, r4
 800c54e:	f00d f84b 	bl	80195e8 <_ZdlPvj>
      }
 800c552:	bf00      	nop
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	bd90      	pop	{r4, r7, pc}

0800c55a <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4618      	mov	r0, r3
 800c566:	f001 f8e1 	bl	800d72c <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c56a:	4603      	mov	r3, r0
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	f001 f8e0 	bl	800d746 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800c586:	4603      	mov	r3, r0
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f001 f8e0 	bl	800d760 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f001 f8e8 	bl	800d778 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff ff94 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7ff ff8e 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d007      	beq.n	800c5ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f81e 	bl	800c61c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff ffa5 	bl	800c534 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 800c5ea:	bf00      	nop
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff ff75 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c600:	4603      	mov	r3, r0
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff ff6f 	bl	800c4ea <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
	return __p;
 800c612:	68fb      	ldr	r3, [r7, #12]
      }
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4618      	mov	r0, r3
 800c628:	f001 f8b4 	bl	800d794 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c62c:	4603      	mov	r3, r0
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	f001 f89b 	bl	800d7ac <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	{ }
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d018      	beq.n	800c6c2 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f000 f844 	bl	800c720 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800c698:	4602      	mov	r2, r0
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	109b      	asrs	r3, r3, #2
 800c6a2:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c6a4:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691a      	ldr	r2, [r3, #16]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c6b0:	4413      	add	r3, r2
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	f000 ff2a 	bl	800d50e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f001 f88a 	bl	800d7d6 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 800c6c2:	bf00      	nop
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c6ca:	b590      	push	{r4, r7, lr}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 800c6d4:	687c      	ldr	r4, [r7, #4]
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f000 f80a 	bl	800c6f0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 f88d 	bl	800d800 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd90      	pop	{r4, r7, pc}

0800c6f0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	331f      	adds	r3, #31
 800c6fc:	095b      	lsrs	r3, r3, #5
 800c6fe:	4618      	mov	r0, r3
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c70a:	b480      	push	{r7}
 800c70c:	b083      	sub	sp, #12
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d008      	beq.n	800c742 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	3b04      	subs	r3, #4
 800c736:	4618      	mov	r0, r3
 800c738:	f7ff ffe7 	bl	800c70a <_ZSt11__addressofImEPT_RS0_>
 800c73c:	4603      	mov	r3, r0
 800c73e:	3304      	adds	r3, #4
 800c740:	e000      	b.n	800c744 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 800c742:	2300      	movs	r3, #0
	}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800c74c:	b480      	push	{r7}
 800c74e:	b083      	sub	sp, #12
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4618      	mov	r0, r3
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff ffed 	bl	800c74c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c772:	4602      	mov	r2, r0
 800c774:	f107 0308 	add.w	r3, r7, #8
 800c778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c77c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800c780:	6838      	ldr	r0, [r7, #0]
 800c782:	f7ff ffe3 	bl	800c74c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c786:	4602      	mov	r2, r0
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c78e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800c792:	f107 0308 	add.w	r3, r7, #8
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff ffd8 	bl	800c74c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c79c:	4602      	mov	r2, r0
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c7a8:	bf00      	nop
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff ffed 	bl	800c7b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c7dc:	6838      	ldr	r0, [r7, #0]
 800c7de:	f7ff ffe7 	bl	800c7b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c7ea:	f107 030c 	add.w	r3, r7, #12
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff ffde 	bl	800c7b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	601a      	str	r2, [r3, #0]
    }
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4618      	mov	r0, r3
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7ff ffed 	bl	800c804 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c82a:	4603      	mov	r3, r0
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c830:	6838      	ldr	r0, [r7, #0]
 800c832:	f7ff ffe7 	bl	800c804 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c836:	4603      	mov	r3, r0
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff ffde 	bl	800c804 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c848:	4603      	mov	r3, r0
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	601a      	str	r2, [r3, #0]
    }
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800c86e:	b5b0      	push	{r4, r5, r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800c87a:	68fc      	ldr	r4, [r7, #12]
 800c87c:	68b8      	ldr	r0, [r7, #8]
 800c87e:	f000 ffcd 	bl	800d81c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800c882:	4605      	mov	r5, r0
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7ff ffe7 	bl	800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c88a:	4603      	mov	r3, r0
 800c88c:	461a      	mov	r2, r3
 800c88e:	4629      	mov	r1, r5
 800c890:	4620      	mov	r0, r4
 800c892:	f000 ffce 	bl	800d832 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bdb0      	pop	{r4, r5, r7, pc}

0800c8a0 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 ffdf 	bl	800d86e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 ffde 	bl	800d886 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c8dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c8e0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 ffdc 	bl	800d8a0 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c8ec:	f107 0208 	add.w	r2, r7, #8
 800c8f0:	f107 030c 	add.w	r3, r7, #12
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fb f957 	bl	8007baa <_ZSt3minIjERKT_S2_S2_>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	681b      	ldr	r3, [r3, #0]
      }
 800c900:	4618      	mov	r0, r3
 800c902:	3710      	adds	r7, #16
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff fab6 	bl	800be86 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800c92e:	6839      	ldr	r1, [r7, #0]
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff fbda 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c936:	4602      	mov	r2, r0
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	441a      	add	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	609a      	str	r2, [r3, #8]
      }
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>:
  // __uninitialized_default_n_a
  // Fills [first, first + n) with value_types constructed by the allocator
  // alloc, with no arguments passed to the construct call.
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b086      	sub	sp, #24
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	607a      	str	r2, [r7, #4]
				_Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __n > 0; --__n, (void) ++__cur)
 800c96a:	e00d      	b.n	800c988 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x2e>
	    __traits::construct(__alloc, std::__addressof(*__cur));
 800c96c:	6978      	ldr	r0, [r7, #20]
 800c96e:	f000 f813 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800c972:	4603      	mov	r3, r0
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 ff9f 	bl	800d8ba <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __n > 0; --__n, (void) ++__cur)
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	3b01      	subs	r3, #1
 800c980:	60bb      	str	r3, [r7, #8]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	3304      	adds	r3, #4
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1ee      	bne.n	800c96c <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x12>
	  return __cur;
 800c98e:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__first, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800c9ae:	b580      	push	{r7, lr}
 800c9b0:	b082      	sub	sp, #8
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	6078      	str	r0, [r7, #4]
 800c9b6:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 ff89 	bl	800d8d4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	68b9      	ldr	r1, [r7, #8]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f000 ff89 	bl	800d8f2 <_ZN2ei7EiAllocIfE10deallocateEPfj>
 800c9e0:	bf00      	nop
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800c9f0:	1d3b      	adds	r3, r7, #4
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fd33 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff ffea 	bl	800c9e8 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800ca14:	4602      	mov	r2, r0
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	1a9b      	subs	r3, r3, r2
 800ca1a:	109b      	asrs	r3, r3, #2
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	1d3b      	adds	r3, r7, #4
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 ff72 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ca32:	b590      	push	{r4, r7, lr}
 800ca34:	b083      	sub	sp, #12
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7fe fd0e 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800ca42:	4603      	mov	r3, r0
 800ca44:	681c      	ldr	r4, [r3, #0]
 800ca46:	6838      	ldr	r0, [r7, #0]
 800ca48:	f7fe fd09 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	1ae3      	subs	r3, r4, r3
 800ca52:	109b      	asrs	r3, r3, #2
 800ca54:	4618      	mov	r0, r3
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd90      	pop	{r4, r7, pc}

0800ca5c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5e:	b087      	sub	sp, #28
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800ca6a:	e01b      	b.n	800caa4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800ca72:	4633      	mov	r3, r6
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	68b9      	ldr	r1, [r7, #8]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 ff5f 	bl	800d93c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
 800ca7e:	e021      	b.n	800cac4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x68>
	  --__depth_limit;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800ca86:	462a      	mov	r2, r5
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 ff6d 	bl	800d96a <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 800ca90:	4603      	mov	r3, r0
 800ca92:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800ca94:	4623      	mov	r3, r4
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	6978      	ldr	r0, [r7, #20]
 800ca9c:	f7ff ffde 	bl	800ca5c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  __last = __cut;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800caa4:	f107 020c 	add.w	r2, r7, #12
 800caa8:	f107 0308 	add.w	r3, r7, #8
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff ffbf 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b10      	cmp	r3, #16
 800cab8:	bfcc      	ite	gt
 800caba:	2301      	movgt	r3, #1
 800cabc:	2300      	movle	r3, #0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1d3      	bne.n	800ca6c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x10>
    }
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800caca <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800caca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cacc:	b085      	sub	sp, #20
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800cad6:	f107 020c 	add.w	r2, r7, #12
 800cada:	f107 0308 	add.w	r3, r7, #8
 800cade:	4611      	mov	r1, r2
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff ffa6 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b10      	cmp	r3, #16
 800caea:	bfcc      	ite	gt
 800caec:	2301      	movgt	r3, #1
 800caee:	2300      	movle	r3, #0
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d018      	beq.n	800cb28 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800caf6:	f107 030c 	add.w	r3, r7, #12
 800cafa:	2110      	movs	r1, #16
 800cafc:	4618      	mov	r0, r3
 800cafe:	f000 ff05 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cb02:	4603      	mov	r3, r0
 800cb04:	4632      	mov	r2, r6
 800cb06:	4619      	mov	r1, r3
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 ff6f 	bl	800d9ec <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800cb0e:	f107 030c 	add.w	r3, r7, #12
 800cb12:	2110      	movs	r1, #16
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 fef9 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	462a      	mov	r2, r5
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 ffc9 	bl	800dab8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cb26:	e004      	b.n	800cb32 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800cb28:	4622      	mov	r2, r4
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 ff5d 	bl	800d9ec <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb3a <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cb3a:	b590      	push	{r4, r7, lr}
 800cb3c:	b083      	sub	sp, #12
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fe fd28 	bl	800b59a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	681c      	ldr	r4, [r3, #0]
 800cb4e:	6838      	ldr	r0, [r7, #0]
 800cb50:	f7fe fd23 	bl	800b59a <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cb54:	4603      	mov	r3, r0
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	bf0c      	ite	eq
 800cb5c:	2301      	moveq	r3, #1
 800cb5e:	2300      	movne	r3, #0
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd90      	pop	{r4, r7, pc}

0800cb6a <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cb72:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cb76:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 ffc2 	bl	800db02 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cb82:	f107 0208 	add.w	r2, r7, #8
 800cb86:	f107 030c 	add.w	r3, r7, #12
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fb f80c 	bl	8007baa <_ZSt3minIjERKT_S2_S2_>
 800cb92:	4603      	mov	r3, r0
 800cb94:	681b      	ldr	r3, [r3, #0]
      }
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 ffb6 	bl	800db1c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>
	{ }
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cbda:	2200      	movs	r2, #0
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 ffc3 	bl	800db6a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>
 800cbe4:	bf00      	nop
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	68b9      	ldr	r1, [r7, #8]
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 ffc3 	bl	800db88 <_ZN2ei7EiAllocIiE10deallocateEPij>
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const _Alloc& __rhs)
 800cc0a:	b590      	push	{r4, r7, lr}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
      { return _S_select(__rhs, 0); }
 800cc12:	2100      	movs	r1, #0
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 ffc4 	bl	800dba2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>
 800cc1a:	bf00      	nop
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd90      	pop	{r4, r7, pc}

0800cc24 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 ffbe 	bl	800dbb6 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800cc3a:	bf00      	nop
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cc62:	2200      	movs	r2, #0
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 ffb2 	bl	800dbd0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 800cc6c:	bf00      	nop
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800cc8a:	b590      	push	{r4, r7, lr}
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff ffec 	bl	800cc74 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	4619      	mov	r1, r3
 800cca2:	2008      	movs	r0, #8
 800cca4:	f7f4 fa24 	bl	80010f0 <_ZnwjPv>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	4622      	mov	r2, r4
 800ccac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ccb0:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800ccb4:	bf00      	nop
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd90      	pop	{r4, r7, pc}

0800ccbc <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f000 ff90 	bl	800dbee <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ccce:	4604      	mov	r4, r0
 800ccd0:	68f8      	ldr	r0, [r7, #12]
 800ccd2:	f7fd f9ff 	bl	800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	1ae2      	subs	r2, r4, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	bf34      	ite	cc
 800cce0:	2301      	movcc	r3, #1
 800cce2:	2300      	movcs	r3, #0
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f00c fc95 	bl	801961a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7fd f9ef 	bl	800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f7fd f9eb 	bl	800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	613b      	str	r3, [r7, #16]
 800cd02:	f107 0208 	add.w	r2, r7, #8
 800cd06:	f107 0310 	add.w	r3, r7, #16
 800cd0a:	4611      	mov	r1, r2
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe f966 	bl	800afde <_ZSt3maxIjERKT_S2_S2_>
 800cd12:	4603      	mov	r3, r0
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4423      	add	r3, r4
 800cd18:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7fd f9da 	bl	800a0d4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cd20:	4602      	mov	r2, r0
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d306      	bcc.n	800cd36 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800cd28:	68f8      	ldr	r0, [r7, #12]
 800cd2a:	f000 ff60 	bl	800dbee <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d904      	bls.n	800cd40 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 ff59 	bl	800dbee <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	e000      	b.n	800cd42 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 800cd40:	697b      	ldr	r3, [r7, #20]
      }
 800cd42:	4618      	mov	r0, r3
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd90      	pop	{r4, r7, pc}

0800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cd4a:	b590      	push	{r4, r7, lr}
 800cd4c:	b083      	sub	sp, #12
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f835 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	681c      	ldr	r4, [r3, #0]
 800cd5e:	6838      	ldr	r0, [r7, #0]
 800cd60:	f000 f830 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cd64:	4603      	mov	r3, r0
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	1ae3      	subs	r3, r4, r3
 800cd6a:	10db      	asrs	r3, r3, #3
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd90      	pop	{r4, r7, pc}

0800cd74 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 ff41 	bl	800dc10 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	e000      	b.n	800cd94 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800cd92:	2300      	movs	r3, #0
      }
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cd9c:	b590      	push	{r4, r7, lr}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af02      	add	r7, sp, #8
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
 800cda8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cdaa:	f88d 4000 	strb.w	r4, [sp]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 ff39 	bl	800dc2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800cdba:	4603      	mov	r3, r0
      }
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}

0800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cdda:	b590      	push	{r4, r7, lr}
 800cddc:	b085      	sub	sp, #20
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 ff31 	bl	800dc50 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cdee:	4604      	mov	r4, r0
 800cdf0:	68b8      	ldr	r0, [r7, #8]
 800cdf2:	f000 ff2d 	bl	800dc50 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 ff36 	bl	800dc6e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 800ce02:	4603      	mov	r3, r0
    }
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd90      	pop	{r4, r7, pc}

0800ce0c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800ce2c:	463b      	mov	r3, r7
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff ffec 	bl	800ce0c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b083      	sub	sp, #12
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ffbb 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	681c      	ldr	r4, [r3, #0]
 800ce52:	6838      	ldr	r0, [r7, #0]
 800ce54:	f7ff ffb6 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	429c      	cmp	r4, r3
 800ce5e:	bf14      	ite	ne
 800ce60:	2301      	movne	r3, #1
 800ce62:	2300      	moveq	r3, #0
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	4618      	mov	r0, r3
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd90      	pop	{r4, r7, pc}

0800ce6e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	607a      	str	r2, [r7, #4]
 800ce7a:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800ce7c:	e01b      	b.n	800ceb6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800ce84:	783b      	ldrb	r3, [r7, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	68b9      	ldr	r1, [r7, #8]
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 ff20 	bl	800dcd0 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800ce90:	e021      	b.n	800ced6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800ce98:	783a      	ldrb	r2, [r7, #0]
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f000 ff2e 	bl	800dcfe <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800cea2:	4603      	mov	r3, r0
 800cea4:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800cea6:	783b      	ldrb	r3, [r7, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	6978      	ldr	r0, [r7, #20]
 800ceae:	f7ff ffde 	bl	800ce6e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800ceb6:	f107 020c 	add.w	r2, r7, #12
 800ceba:	f107 0308 	add.w	r3, r7, #8
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff ff42 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b10      	cmp	r3, #16
 800ceca:	bfcc      	ite	gt
 800cecc:	2301      	movgt	r3, #1
 800cece:	2300      	movle	r3, #0
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1d3      	bne.n	800ce7e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
    }
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800cee8:	f107 020c 	add.w	r2, r7, #12
 800ceec:	f107 0308 	add.w	r3, r7, #8
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ff29 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b10      	cmp	r3, #16
 800cefc:	bfcc      	ite	gt
 800cefe:	2301      	movgt	r3, #1
 800cf00:	2300      	movle	r3, #0
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d018      	beq.n	800cf3a <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	2110      	movs	r1, #16
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 ff38 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800cf14:	4603      	mov	r3, r0
 800cf16:	793a      	ldrb	r2, [r7, #4]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 ff4a 	bl	800ddb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800cf20:	f107 030c 	add.w	r3, r7, #12
 800cf24:	2110      	movs	r1, #16
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 ff2c 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	793a      	ldrb	r2, [r7, #4]
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ffab 	bl	800de8e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800cf38:	e004      	b.n	800cf44 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800cf3a:	793a      	ldrb	r2, [r7, #4]
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	68f8      	ldr	r0, [r7, #12]
 800cf40:	f000 ff38 	bl	800ddb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800cf44:	bf00      	nop
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cf4c:	b590      	push	{r4, r7, lr}
 800cf4e:	b087      	sub	sp, #28
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7ff f8a5 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800cf5e:	4604      	mov	r4, r0
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7fc fd1a 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cf66:	4603      	mov	r3, r0
 800cf68:	1ae2      	subs	r2, r4, r3
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	bf34      	ite	cc
 800cf70:	2301      	movcc	r3, #1
 800cf72:	2300      	movcs	r3, #0
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d002      	beq.n	800cf80 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f00c fb4d 	bl	801961a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7fc fd0a 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cf86:	4604      	mov	r4, r0
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7fc fd06 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	613b      	str	r3, [r7, #16]
 800cf92:	f107 0208 	add.w	r2, r7, #8
 800cf96:	f107 0310 	add.w	r3, r7, #16
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe f81e 	bl	800afde <_ZSt3maxIjERKT_S2_S2_>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4423      	add	r3, r4
 800cfa8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7fc fcf5 	bl	800999a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d306      	bcc.n	800cfc6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x7a>
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff f875 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d904      	bls.n	800cfd0 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x84>
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f7ff f86e 	bl	800c0a8 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	e000      	b.n	800cfd2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x86>
 800cfd0:	697b      	ldr	r3, [r7, #20]
      }
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd90      	pop	{r4, r7, pc}

0800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cfda:	b590      	push	{r4, r7, lr}
 800cfdc:	b085      	sub	sp, #20
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	60f8      	str	r0, [r7, #12]
 800cfe2:	60b9      	str	r1, [r7, #8]
 800cfe4:	607a      	str	r2, [r7, #4]
 800cfe6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff f8a6 	bl	800c13a <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800cfee:	4604      	mov	r4, r0
 800cff0:	68b8      	ldr	r0, [r7, #8]
 800cff2:	f7ff f8a2 	bl	800c13a <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800cff6:	4601      	mov	r1, r0
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f9c9 	bl	800d394 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800d002:	4603      	mov	r3, r0
    }
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd90      	pop	{r4, r7, pc}

0800d00c <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	4413      	add	r3, r2
 800d01e:	4618      	mov	r0, r3
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4413      	add	r3, r2
 800d03c:	4618      	mov	r0, r3
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	4413      	add	r3, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	4413      	add	r3, r2
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	4413      	add	r3, r2
 800d096:	4618      	mov	r0, r3
 800d098:	370c      	adds	r7, #12
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d0a2:	b480      	push	{r7}
 800d0a4:	b083      	sub	sp, #12
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	370c      	adds	r7, #12
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d11a:	b480      	push	{r7}
 800d11c:	b083      	sub	sp, #12
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	4413      	add	r3, r2
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4618      	mov	r0, r3
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800d14e:	b590      	push	{r4, r7, lr}
 800d150:	b085      	sub	sp, #20
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff ffec 	bl	800d138 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d160:	4603      	mov	r3, r0
 800d162:	681c      	ldr	r4, [r3, #0]
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	4619      	mov	r1, r3
 800d168:	2004      	movs	r0, #4
 800d16a:	f7f3 ffc1 	bl	80010f0 <_ZnwjPv>
 800d16e:	4603      	mov	r3, r0
 800d170:	601c      	str	r4, [r3, #0]
	}
 800d172:	bf00      	nop
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	bd90      	pop	{r4, r7, pc}

0800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d17a:	b480      	push	{r7}
 800d17c:	b083      	sub	sp, #12
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4618      	mov	r0, r3
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7ff ffec 	bl	800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68b9      	ldr	r1, [r7, #8]
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 fe95 	bl	800ded8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d1ae:	bf00      	nop
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
	...

0800d1b8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d1b8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ba:	b08c      	sub	sp, #48	; 0x30
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d1c4:	4a59      	ldr	r2, [pc, #356]	; (800d32c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7ff febf 	bl	800cf4c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800d1ce:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	f7fc fcfa 	bl	8009bd6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	f107 0214 	add.w	r2, r7, #20
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7ff fc1e 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe ff73 	bl	800c0ea <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800d204:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800d20a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	18d5      	adds	r5, r2, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff ffb0 	bl	800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d21a:	4603      	mov	r3, r0
 800d21c:	461a      	mov	r2, r3
 800d21e:	4629      	mov	r1, r5
 800d220:	4620      	mov	r0, r4
 800d222:	f7ff ffb5 	bl	800d190 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  __new_finish = pointer();
 800d226:	2300      	movs	r3, #0
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800d22a:	f7fd fc86 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d027      	beq.n	800d284 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d234:	f107 0308 	add.w	r3, r7, #8
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fe f910 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d23e:	4603      	mov	r3, r0
 800d240:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe f95f 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d24a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	4621      	mov	r1, r4
 800d250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d252:	f7fe ff5e 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d256:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	3304      	adds	r3, #4
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d25e:	f107 0308 	add.w	r3, r7, #8
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe f8fb 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d268:	4603      	mov	r3, r0
 800d26a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe f94a 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d274:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d278:	6a39      	ldr	r1, [r7, #32]
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7fe ff49 	bl	800c112 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d280:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d282:	e026      	b.n	800d2d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d284:	f107 0308 	add.w	r3, r7, #8
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe f8e8 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d28e:	4603      	mov	r3, r0
 800d290:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe f937 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d29a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	4621      	mov	r1, r4
 800d2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2a2:	f7ff fe9a 	bl	800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d2a6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800d2ae:	f107 0308 	add.w	r3, r7, #8
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe f8d3 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe f922 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d2c4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d2c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c8:	6a39      	ldr	r1, [r7, #32]
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f7ff fe85 	bl	800cfda <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d2d2:	f7fd fc32 	bl	800ab3a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f083 0301 	eor.w	r3, r3, #1
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d009      	beq.n	800d2f6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fe f90f 	bl	800b508 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	6a39      	ldr	r1, [r7, #32]
 800d2f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2f2:	f7fe f914 	bl	800b51e <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800d2f6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	689a      	ldr	r2, [r3, #8]
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d302:	461a      	mov	r2, r3
 800d304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d306:	f7fe f925 	bl	800b554 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	69ba      	ldr	r2, [r7, #24]
 800d30e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d314:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	441a      	add	r2, r3
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	609a      	str	r2, [r3, #8]
    }
 800d322:	bf00      	nop
 800d324:	3730      	adds	r7, #48	; 0x30
 800d326:	46bd      	mov	sp, r7
 800d328:	bdb0      	pop	{r4, r5, r7, pc}
 800d32a:	bf00      	nop
 800d32c:	08020454 	.word	0x08020454

0800d330 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d33a:	6839      	ldr	r1, [r7, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fde1 	bl	800df04 <_ZN2ei7EiAllocIfE8allocateEj>
 800d342:	4603      	mov	r3, r0
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fde0 	bl	800df26 <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d366:	4603      	mov	r3, r0
      }
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800d37a:	463b      	mov	r3, r7
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fdef 	bl	800df60 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 800d382:	4603      	mov	r3, r0
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d394:	b590      	push	{r4, r7, lr}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d3a6:	e016      	b.n	800d3d6 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d3a8:	6978      	ldr	r0, [r7, #20]
 800d3aa:	f7ff faf5 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	f107 030c 	add.w	r3, r7, #12
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 fdff 	bl	800dfb8 <_ZNKSt13move_iteratorIPfEdeEv>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4621      	mov	r1, r4
 800d3c0:	6838      	ldr	r0, [r7, #0]
 800d3c2:	f7ff fee5 	bl	800d190 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d3c6:	f107 030c 	add.w	r3, r7, #12
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 fde4 	bl	800df98 <_ZNSt13move_iteratorIPfEppEv>
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	f107 0208 	add.w	r2, r7, #8
 800d3da:	f107 030c 	add.w	r3, r7, #12
 800d3de:	4611      	mov	r1, r2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fdc8 	bl	800df76 <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1dd      	bne.n	800d3a8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d3ec:	697b      	ldr	r3, [r7, #20]
    }
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	371c      	adds	r7, #28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd90      	pop	{r4, r7, pc}

0800d3f6 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d3f6:	b5b0      	push	{r4, r5, r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d400:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d402:	1d3b      	adds	r3, r7, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fed2 	bl	800c1ae <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d40a:	462a      	mov	r2, r5
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	4620      	mov	r0, r4
 800d410:	f000 fdde 	bl	800dfd0 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d414:	4603      	mov	r3, r0
    }
 800d416:	4618      	mov	r0, r3
 800d418:	3708      	adds	r7, #8
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bdb0      	pop	{r4, r5, r7, pc}

0800d41e <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d41e:	b580      	push	{r7, lr}
 800d420:	b086      	sub	sp, #24
 800d422:	af00      	add	r7, sp, #0
 800d424:	60f8      	str	r0, [r7, #12]
 800d426:	60b9      	str	r1, [r7, #8]
 800d428:	607a      	str	r2, [r7, #4]
 800d42a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d430:	e00e      	b.n	800d450 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d432:	6978      	ldr	r0, [r7, #20]
 800d434:	f7ff fab0 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800d438:	4603      	mov	r3, r0
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	4619      	mov	r1, r3
 800d43e:	6838      	ldr	r0, [r7, #0]
 800d440:	f7fe fd35 	bl	800beae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	3304      	adds	r3, #4
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	3304      	adds	r3, #4
 800d44e:	617b      	str	r3, [r7, #20]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	429a      	cmp	r2, r3
 800d456:	d1ec      	bne.n	800d432 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d458:	697b      	ldr	r3, [r7, #20]
    }
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800d462:	b480      	push	{r7}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	4618      	mov	r0, r3
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d47a:	b5b0      	push	{r4, r5, r7, lr}
 800d47c:	b082      	sub	sp, #8
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d484:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d486:	1d3b      	adds	r3, r7, #4
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 fdb1 	bl	800dff0 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d48e:	462a      	mov	r2, r5
 800d490:	6839      	ldr	r1, [r7, #0]
 800d492:	4620      	mov	r0, r4
 800d494:	f000 fdb7 	bl	800e006 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d498:	4603      	mov	r3, r0
    }
 800d49a:	4618      	mov	r0, r3
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bdb0      	pop	{r4, r5, r7, pc}

0800d4a2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d006      	beq.n	800d4c0 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x1e>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 fdb5 	bl	800e026 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	e000      	b.n	800d4c2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x20>
 800d4c0:	2300      	movs	r3, #0
      }
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b086      	sub	sp, #24
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	60f8      	str	r0, [r7, #12]
 800d4d2:	60b9      	str	r1, [r7, #8]
 800d4d4:	607a      	str	r2, [r7, #4]
 800d4d6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d4dc:	e00e      	b.n	800d4fc <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d4de:	6978      	ldr	r0, [r7, #20]
 800d4e0:	f7ff fb6b 	bl	800cbba <_ZSt11__addressofIiEPT_RS0_>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	68fa      	ldr	r2, [r7, #12]
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6838      	ldr	r0, [r7, #0]
 800d4ec:	f000 fb2a 	bl	800db44 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	3304      	adds	r3, #4
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	617b      	str	r3, [r7, #20]
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	429a      	cmp	r2, r3
 800d502:	d1ec      	bne.n	800d4de <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d504:	697b      	ldr	r3, [r7, #20]
    }
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	60f8      	str	r0, [r7, #12]
 800d516:	60b9      	str	r1, [r7, #8]
 800d518:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	68b9      	ldr	r1, [r7, #8]
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f000 fd8f 	bl	800e042 <_ZN2ei7EiAllocImE10deallocateEPmj>
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bf14      	ite	ne
 800d53a:	2301      	movne	r3, #1
 800d53c:	2300      	moveq	r3, #0
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	4618      	mov	r0, r3
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d556:	6838      	ldr	r0, [r7, #0]
 800d558:	f7fe feee 	bl	800c338 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d55c:	4603      	mov	r3, r0
 800d55e:	4622      	mov	r2, r4
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fd7a 	bl	800e05c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd90      	pop	{r4, r7, pc}

0800d570 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f000 fd85 	bl	800e08e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d584:	4604      	mov	r4, r0
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	f7fe f939 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d58c:	4605      	mov	r5, r0
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7fe f935 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d594:	4606      	mov	r6, r0
 800d596:	6838      	ldr	r0, [r7, #0]
 800d598:	f7fe f93c 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d59c:	4603      	mov	r3, r0
 800d59e:	4632      	mov	r2, r6
 800d5a0:	4629      	mov	r1, r5
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f000 fd84 	bl	800e0b0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d5a8:	4603      	mov	r3, r0
      }
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3714      	adds	r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5b2 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d5b2:	b590      	push	{r4, r7, lr}
 800d5b4:	b085      	sub	sp, #20
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d109      	bne.n	800d5da <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d5c6:	68f8      	ldr	r0, [r7, #12]
 800d5c8:	f000 fd97 	bl	800e0fa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	68b8      	ldr	r0, [r7, #8]
 800d5d0:	f000 fd5d 	bl	800e08e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	6023      	str	r3, [r4, #0]
	    break;
 800d5d8:	e005      	b.n	800d5e6 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d5da:	79fb      	ldrb	r3, [r7, #7]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fd97 	bl	800e114 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d5e6:	2300      	movs	r3, #0
      }
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd90      	pop	{r4, r7, pc}

0800d5f0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d606:	b590      	push	{r4, r7, lr}
 800d608:	b083      	sub	sp, #12
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d610:	6838      	ldr	r0, [r7, #0]
 800d612:	f7fe fecf 	bl	800c3b4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d616:	4603      	mov	r3, r0
 800d618:	4622      	mov	r2, r4
 800d61a:	4619      	mov	r1, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fdb3 	bl	800e188 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d622:	bf00      	nop
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	bd90      	pop	{r4, r7, pc}

0800d62a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d62a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d62c:	b085      	sub	sp, #20
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
 800d636:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 fdbe 	bl	800e1ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d63e:	4604      	mov	r4, r0
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	f7fe f8dc 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d646:	4605      	mov	r5, r0
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7fe f8d8 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d64e:	4606      	mov	r6, r0
 800d650:	6838      	ldr	r0, [r7, #0]
 800d652:	f7fe f8df 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d656:	4603      	mov	r3, r0
 800d658:	4632      	mov	r2, r6
 800d65a:	4629      	mov	r1, r5
 800d65c:	4620      	mov	r0, r4
 800d65e:	f000 fdbd 	bl	800e1dc <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d662:	4603      	mov	r3, r0
      }
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d66c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d109      	bne.n	800d694 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 fdd0 	bl	800e226 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800d686:	4604      	mov	r4, r0
 800d688:	68b8      	ldr	r0, [r7, #8]
 800d68a:	f000 fd96 	bl	800e1ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d68e:	4603      	mov	r3, r0
 800d690:	6023      	str	r3, [r4, #0]
	    break;
 800d692:	e005      	b.n	800d6a0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	461a      	mov	r2, r3
 800d698:	68b9      	ldr	r1, [r7, #8]
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f000 fdd0 	bl	800e240 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d6a0:	2300      	movs	r3, #0
      }
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd90      	pop	{r4, r7, pc}

0800d6aa <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 fdfd 	bl	800e2b4 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3708      	adds	r7, #8
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fe00 	bl	800e2d4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b082      	sub	sp, #8
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fdff 	bl	800e2ec <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fdfe 	bl	800e304 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d708:	4603      	mov	r3, r0
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 fdfd 	bl	800e31c <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d722:	4603      	mov	r3, r0
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4618      	mov	r0, r3
 800d738:	f000 fdfc 	bl	800e334 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d73c:	4603      	mov	r3, r0
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d746:	b580      	push	{r7, lr}
 800d748:	b082      	sub	sp, #8
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fdfb 	bl	800e34c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d756:	4603      	mov	r3, r0
 800d758:	4618      	mov	r0, r3
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 fdfb 	bl	800e364 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4618      	mov	r0, r3
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fdec 	bl	800e37a <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f3 fe15 	bl	80013e6 <_ZNSt13_Bit_iteratorC1Ev>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	3308      	adds	r3, #8
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7f3 fe10 	bl	80013e6 <_ZNSt13_Bit_iteratorC1Ev>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	611a      	str	r2, [r3, #16]
	{ }
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800d7d6:	b5b0      	push	{r4, r5, r7, lr}
 800d7d8:	b088      	sub	sp, #32
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 800d7de:	f107 030c 	add.w	r3, r7, #12
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7ff ffe2 	bl	800d7ac <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	461d      	mov	r5, r3
 800d7ec:	f107 040c 	add.w	r4, r7, #12
 800d7f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	602b      	str	r3, [r5, #0]
 800d7f8:	bf00      	nop
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bdb0      	pop	{r4, r5, r7, pc}

0800d800 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fdc0 	bl	800e392 <_ZN2ei7EiAllocImE8allocateEj>
 800d812:	4603      	mov	r3, r0
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4618      	mov	r0, r3
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d832:	b590      	push	{r4, r7, lr}
 800d834:	b085      	sub	sp, #20
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800d83e:	68fc      	ldr	r4, [r7, #12]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff f809 	bl	800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d846:	4603      	mov	r3, r0
 800d848:	4619      	mov	r1, r3
 800d84a:	4620      	mov	r0, r4
 800d84c:	f000 fdbe 	bl	800e3cc <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	1d1c      	adds	r4, r3, #4
 800d854:	68b8      	ldr	r0, [r7, #8]
 800d856:	f7ff ffe1 	bl	800d81c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800d85a:	4603      	mov	r3, r0
 800d85c:	4619      	mov	r1, r3
 800d85e:	4620      	mov	r0, r4
 800d860:	f000 fdc7 	bl	800e3f2 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd90      	pop	{r4, r7, pc}

0800d86e <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fdcc 	bl	800e414 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fdcd 	bl	800e430 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d896:	4603      	mov	r3, r0
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fdcc 	bl	800e448 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	6039      	str	r1, [r7, #0]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fdc9 	bl	800e45e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800d8d4:	b40e      	push	{r1, r2, r3}
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800d8de:	6978      	ldr	r0, [r7, #20]
 800d8e0:	f000 fdcf 	bl	800e482 <_ZSt8_DestroyIfEvPT_>
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8ee:	b003      	add	sp, #12
 800d8f0:	4770      	bx	lr

0800d8f2 <_ZN2ei7EiAllocIfE10deallocateEPfj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b084      	sub	sp, #16
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800d8fe:	68b8      	ldr	r0, [r7, #8]
 800d900:	f008 fff4 	bl	80168ec <_Z7ei_freePv>
#endif
    }
 800d904:	bf00      	nop
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	60fb      	str	r3, [r7, #12]
 800d922:	f107 020c 	add.w	r2, r7, #12
 800d926:	f107 0308 	add.w	r3, r7, #8
 800d92a:	4611      	mov	r1, r2
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fd fd86 	bl	800b43e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800d94a:	4623      	mov	r3, r4
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 fda0 	bl	800e496 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800d956:	463b      	mov	r3, r7
 800d958:	461a      	mov	r2, r3
 800d95a:	68b9      	ldr	r1, [r7, #8]
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f000 fdcd 	bl	800e4fc <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
    }
 800d962:	bf00      	nop
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	bd90      	pop	{r4, r7, pc}

0800d96a <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800d96a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d96c:	b089      	sub	sp, #36	; 0x24
 800d96e:	af02      	add	r7, sp, #8
 800d970:	60f8      	str	r0, [r7, #12]
 800d972:	60b9      	str	r1, [r7, #8]
 800d974:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800d976:	f107 020c 	add.w	r2, r7, #12
 800d97a:	f107 0308 	add.w	r3, r7, #8
 800d97e:	4611      	mov	r1, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff f856 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	da00      	bge.n	800d98e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_+0x24>
 800d98c:	3301      	adds	r3, #1
 800d98e:	105b      	asrs	r3, r3, #1
 800d990:	461a      	mov	r2, r3
 800d992:	f107 030c 	add.w	r3, r7, #12
 800d996:	4611      	mov	r1, r2
 800d998:	4618      	mov	r0, r3
 800d99a:	f7ff ffb7 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800d9a2:	f107 030c 	add.w	r3, r7, #12
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff ffaf 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	f107 0308 	add.w	r3, r7, #8
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 fdc7 	bl	800e54a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f88d 5000 	strb.w	r5, [sp]
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 fdfd 	bl	800e5c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800d9cc:	f107 030c 	add.w	r3, r7, #12
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff ff9a 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800d9d8:	4633      	mov	r3, r6
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	68b9      	ldr	r1, [r7, #8]
 800d9de:	f000 fe47 	bl	800e670 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 800d9e2:	4603      	mov	r3, r0
    }
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9ec <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800d9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	60f8      	str	r0, [r7, #12]
 800d9f4:	60b9      	str	r1, [r7, #8]
 800d9f6:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800d9f8:	f107 0208 	add.w	r2, r7, #8
 800d9fc:	f107 030c 	add.w	r3, r7, #12
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f000 fe7c 	bl	800e700 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d150      	bne.n	800dab0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800da0e:	f107 030c 	add.w	r3, r7, #12
 800da12:	2101      	movs	r1, #1
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff ff79 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800da1a:	4603      	mov	r3, r0
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	e03b      	b.n	800da98 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
	  if (__comp(__i, __first))
 800da20:	1d3b      	adds	r3, r7, #4
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	6979      	ldr	r1, [r7, #20]
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fda8 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d026      	beq.n	800da80 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800da32:	f107 0314 	add.w	r3, r7, #20
 800da36:	4618      	mov	r0, r3
 800da38:	f7fc f916 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800da3c:	4603      	mov	r3, r0
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fd f851 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da44:	4603      	mov	r3, r0
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800da4a:	f107 0314 	add.w	r3, r7, #20
 800da4e:	2101      	movs	r1, #1
 800da50:	4618      	mov	r0, r3
 800da52:	f7ff ff5b 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800da56:	4603      	mov	r3, r0
 800da58:	461a      	mov	r2, r3
 800da5a:	6979      	ldr	r1, [r7, #20]
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f000 fe67 	bl	800e730 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 800da62:	f107 0310 	add.w	r3, r7, #16
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd f83d 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800da6c:	4604      	mov	r4, r0
 800da6e:	f107 030c 	add.w	r3, r7, #12
 800da72:	4618      	mov	r0, r3
 800da74:	f7fc f8f8 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800da78:	4602      	mov	r2, r0
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	6013      	str	r3, [r2, #0]
 800da7e:	e006      	b.n	800da8e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800da80:	4630      	mov	r0, r6
 800da82:	f7f3 fb55 	bl	8001130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800da86:	4629      	mov	r1, r5
 800da88:	6978      	ldr	r0, [r7, #20]
 800da8a:	f000 fe69 	bl	800e760 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800da8e:	f107 0314 	add.w	r3, r7, #20
 800da92:	4618      	mov	r0, r3
 800da94:	f7fc f8d8 	bl	8009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800da98:	f107 0208 	add.w	r2, r7, #8
 800da9c:	f107 0314 	add.w	r3, r7, #20
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fc f8b8 	bl	8009c18 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1b8      	bne.n	800da20 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800daae:	e000      	b.n	800dab2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc6>
      if (__first == __last) return;
 800dab0:	bf00      	nop
    }
 800dab2:	371c      	adds	r7, #28
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dab8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800dab8:	b5b0      	push	{r4, r5, r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	617b      	str	r3, [r7, #20]
 800dac8:	e00b      	b.n	800dae2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800daca:	4628      	mov	r0, r5
 800dacc:	f7f3 fb30 	bl	8001130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800dad0:	4621      	mov	r1, r4
 800dad2:	6978      	ldr	r0, [r7, #20]
 800dad4:	f000 fe44 	bl	800e760 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dad8:	f107 0314 	add.w	r3, r7, #20
 800dadc:	4618      	mov	r0, r3
 800dade:	f7fc f8b3 	bl	8009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dae2:	f107 0208 	add.w	r2, r7, #8
 800dae6:	f107 0314 	add.w	r3, r7, #20
 800daea:	4611      	mov	r1, r2
 800daec:	4618      	mov	r0, r3
 800daee:	f7fc f893 	bl	8009c18 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e8      	bne.n	800daca <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x12>
    }
 800daf8:	bf00      	nop
 800dafa:	bf00      	nop
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bdb0      	pop	{r4, r5, r7, pc}

0800db02 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800db0a:	2100      	movs	r1, #0
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fe72 	bl	800e7f6 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>
 800db12:	4603      	mov	r3, r0
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	605a      	str	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	609a      	str	r2, [r3, #8]
	{ }
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f000 fe5b 	bl	800e80c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	68b9      	ldr	r1, [r7, #8]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 fe60 	bl	800e822 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800db6a:	b40e      	push	{r1, r2, r3}
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800db74:	6978      	ldr	r0, [r7, #20]
 800db76:	f000 fe6a 	bl	800e84e <_ZSt8_DestroyIiEvPT_>
 800db7a:	bf00      	nop
 800db7c:	370c      	adds	r7, #12
 800db7e:	46bd      	mov	sp, r7
 800db80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db84:	b003      	add	sp, #12
 800db86:	4770      	bx	lr

0800db88 <_ZN2ei7EiAllocIiE10deallocateEPij>:
    void deallocate(T *p, size_t n) noexcept
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800db94:	68b8      	ldr	r0, [r7, #8]
 800db96:	f008 fea9 	bl	80168ec <_Z7ei_freePv>
    }
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>:
	_S_select(_Alloc2& __a, ...)
 800dba2:	b40f      	push	{r0, r1, r2, r3}
 800dba4:	b480      	push	{r7}
 800dba6:	af00      	add	r7, sp, #0
	{ return __a; }
 800dba8:	bf00      	nop
 800dbaa:	4618      	mov	r0, r3
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	b004      	add	sp, #16
 800dbb4:	4770      	bx	lr

0800dbb6 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
    void deallocate(T *p, size_t n) noexcept
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b084      	sub	sp, #16
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	60b9      	str	r1, [r7, #8]
 800dbc0:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dbc2:	68b8      	ldr	r0, [r7, #8]
 800dbc4:	f008 fe92 	bl	80168ec <_Z7ei_freePv>
    }
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dbd0:	b40e      	push	{r1, r2, r3}
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dbda:	6978      	ldr	r0, [r7, #20]
 800dbdc:	f000 fe41 	bl	800e862 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbea:	b003      	add	sp, #12
 800dbec:	4770      	bx	lr

0800dbee <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f000 fe56 	bl	800e8aa <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 fe38 	bl	800e876 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800dc06:	4603      	mov	r3, r0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fe4f 	bl	800e8c0 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 800dc22:	4603      	mov	r3, r0
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]
 800dc38:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 fe4e 	bl	800e8e2 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800dc46:	4603      	mov	r3, r0
      }
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800dc58:	f107 030c 	add.w	r3, r7, #12
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f000 fe5c 	bl	800e91c <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800dc6e:	b590      	push	{r4, r7, lr}
 800dc70:	b087      	sub	sp, #28
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	60b9      	str	r1, [r7, #8]
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800dc80:	e016      	b.n	800dcb0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800dc82:	6978      	ldr	r0, [r7, #20]
 800dc84:	f7fe ffdd 	bl	800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	f107 030c 	add.w	r3, r7, #12
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 fe78 	bl	800e984 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 800dc94:	4603      	mov	r3, r0
 800dc96:	461a      	mov	r2, r3
 800dc98:	4621      	mov	r1, r4
 800dc9a:	6838      	ldr	r0, [r7, #0]
 800dc9c:	f000 fe7e 	bl	800e99c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800dca0:	f107 030c 	add.w	r3, r7, #12
 800dca4:	4618      	mov	r0, r3
 800dca6:	f000 fe5c 	bl	800e962 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	3308      	adds	r3, #8
 800dcae:	617b      	str	r3, [r7, #20]
 800dcb0:	f107 0208 	add.w	r2, r7, #8
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4611      	mov	r1, r2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fe40 	bl	800e940 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1dd      	bne.n	800dc82 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x14>
	  return __cur;
 800dcc6:	697b      	ldr	r3, [r7, #20]
    }
 800dcc8:	4618      	mov	r0, r3
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd90      	pop	{r4, r7, pc}

0800dcd0 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800dcde:	783b      	ldrb	r3, [r7, #0]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	68b9      	ldr	r1, [r7, #8]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 fe6c 	bl	800e9c2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800dcea:	463b      	mov	r3, r7
 800dcec:	461a      	mov	r2, r3
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 fe99 	bl	800ea28 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 800dcf6:	bf00      	nop
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800dcfe:	b590      	push	{r4, r7, lr}
 800dd00:	b089      	sub	sp, #36	; 0x24
 800dd02:	af02      	add	r7, sp, #8
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800dd0a:	f107 020c 	add.w	r2, r7, #12
 800dd0e:	f107 0308 	add.w	r3, r7, #8
 800dd12:	4611      	mov	r1, r2
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7ff f818 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	da00      	bge.n	800dd22 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_+0x24>
 800dd20:	3301      	adds	r3, #1
 800dd22:	105b      	asrs	r3, r3, #1
 800dd24:	461a      	mov	r2, r3
 800dd26:	f107 030c 	add.w	r3, r7, #12
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f000 f829 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dd32:	4603      	mov	r3, r0
 800dd34:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800dd36:	f107 030c 	add.w	r3, r7, #12
 800dd3a:	2101      	movs	r1, #1
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f000 f821 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dd42:	4604      	mov	r4, r0
 800dd44:	f107 0308 	add.w	r3, r7, #8
 800dd48:	2101      	movs	r1, #1
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 fe93 	bl	800ea76 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 800dd50:	4602      	mov	r2, r0
 800dd52:	793b      	ldrb	r3, [r7, #4]
 800dd54:	f88d 3000 	strb.w	r3, [sp]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f000 febe 	bl	800eae0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800dd64:	f107 030c 	add.w	r3, r7, #12
 800dd68:	2101      	movs	r1, #1
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 f80a 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dd70:	793b      	ldrb	r3, [r7, #4]
 800dd72:	68fa      	ldr	r2, [r7, #12]
 800dd74:	68b9      	ldr	r1, [r7, #8]
 800dd76:	f000 ff08 	bl	800eb8a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800dd7a:	4603      	mov	r3, r0
    }
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	371c      	adds	r7, #28
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd90      	pop	{r4, r7, pc}

0800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	4413      	add	r3, r2
 800dd98:	60fb      	str	r3, [r7, #12]
 800dd9a:	f107 020c 	add.w	r2, r7, #12
 800dd9e:	f107 0308 	add.w	r3, r7, #8
 800dda2:	4611      	mov	r1, r2
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd fe73 	bl	800ba90 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800ddb4:	b5b0      	push	{r4, r5, r7, lr}
 800ddb6:	b088      	sub	sp, #32
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800ddc0:	f107 0208 	add.w	r2, r7, #8
 800ddc4:	f107 030c 	add.w	r3, r7, #12
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 ff25 	bl	800ec1a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d157      	bne.n	800de86 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800ddd6:	f107 030c 	add.w	r3, r7, #12
 800ddda:	2101      	movs	r1, #1
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff ffd1 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dde2:	4603      	mov	r3, r0
 800dde4:	61fb      	str	r3, [r7, #28]
 800dde6:	e042      	b.n	800de6e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xba>
	  if (__comp(__i, __first))
 800dde8:	1d3b      	adds	r3, r7, #4
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	69f9      	ldr	r1, [r7, #28]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f000 fe5a 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d02d      	beq.n	800de56 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xa2>
		__val = _GLIBCXX_MOVE(*__i);
 800ddfa:	f107 031c 	add.w	r3, r7, #28
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 ff34 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800de04:	4603      	mov	r3, r0
 800de06:	4618      	mov	r0, r3
 800de08:	f000 ff3c 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800de0c:	4602      	mov	r2, r0
 800de0e:	f107 0314 	add.w	r3, r7, #20
 800de12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de16:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800de1a:	f107 031c 	add.w	r3, r7, #28
 800de1e:	2101      	movs	r1, #1
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff ffaf 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800de26:	4603      	mov	r3, r0
 800de28:	461a      	mov	r2, r3
 800de2a:	69f9      	ldr	r1, [r7, #28]
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 ff34 	bl	800ec9a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800de32:	f107 0314 	add.w	r3, r7, #20
 800de36:	4618      	mov	r0, r3
 800de38:	f000 ff24 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800de3c:	4604      	mov	r4, r0
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4618      	mov	r0, r3
 800de44:	f000 ff12 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800de48:	4603      	mov	r3, r0
 800de4a:	4622      	mov	r2, r4
 800de4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de50:	e883 0003 	stmia.w	r3, {r0, r1}
 800de54:	e006      	b.n	800de64 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb0>
	    std::__unguarded_linear_insert(__i,
 800de56:	7938      	ldrb	r0, [r7, #4]
 800de58:	f000 ff37 	bl	800ecca <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800de5c:	4629      	mov	r1, r5
 800de5e:	69f8      	ldr	r0, [r7, #28]
 800de60:	f000 ff47 	bl	800ecf2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800de64:	f107 031c 	add.w	r3, r7, #28
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 feee 	bl	800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800de6e:	f107 0208 	add.w	r2, r7, #8
 800de72:	f107 031c 	add.w	r3, r7, #28
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fe ffe0 	bl	800ce3e <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1b1      	bne.n	800dde8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x34>
 800de84:	e000      	b.n	800de88 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd4>
      if (__first == __last) return;
 800de86:	bf00      	nop
    }
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bdb0      	pop	{r4, r5, r7, pc}

0800de8e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800de8e:	b590      	push	{r4, r7, lr}
 800de90:	b087      	sub	sp, #28
 800de92:	af00      	add	r7, sp, #0
 800de94:	60f8      	str	r0, [r7, #12]
 800de96:	60b9      	str	r1, [r7, #8]
 800de98:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	617b      	str	r3, [r7, #20]
 800de9e:	e00b      	b.n	800deb8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x2a>
	std::__unguarded_linear_insert(__i,
 800dea0:	7938      	ldrb	r0, [r7, #4]
 800dea2:	f000 ff12 	bl	800ecca <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800dea6:	4621      	mov	r1, r4
 800dea8:	6978      	ldr	r0, [r7, #20]
 800deaa:	f000 ff22 	bl	800ecf2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800deae:	f107 0314 	add.w	r3, r7, #20
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fec9 	bl	800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800deb8:	f107 0208 	add.w	r2, r7, #8
 800debc:	f107 0314 	add.w	r3, r7, #20
 800dec0:	4611      	mov	r1, r2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe ffbb 	bl	800ce3e <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1e8      	bne.n	800dea0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x12>
    }
 800dece:	bf00      	nop
 800ded0:	bf00      	nop
 800ded2:	371c      	adds	r7, #28
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd90      	pop	{r4, r7, pc}

0800ded8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ded8:	b590      	push	{r4, r7, lr}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff f948 	bl	800d17a <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800deea:	4603      	mov	r3, r0
 800deec:	681c      	ldr	r4, [r3, #0]
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	4619      	mov	r1, r3
 800def2:	2004      	movs	r0, #4
 800def4:	f7f3 f8fc 	bl	80010f0 <_ZnwjPv>
 800def8:	4603      	mov	r3, r0
 800defa:	601c      	str	r4, [r3, #0]
	}
 800defc:	bf00      	nop
 800defe:	3714      	adds	r7, #20
 800df00:	46bd      	mov	sp, r7
 800df02:	bd90      	pop	{r4, r7, pc}

0800df04 <_ZN2ei7EiAllocIfE8allocateEj>:
    T *allocate(size_t n)
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f008 fccf 	bl	80168b8 <_Z9ei_mallocj>
 800df1a:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800df1c:	68bb      	ldr	r3, [r7, #8]
    }
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800df26:	b5b0      	push	{r4, r5, r7, lr}
 800df28:	b084      	sub	sp, #16
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	60b9      	str	r1, [r7, #8]
 800df30:	607a      	str	r2, [r7, #4]
 800df32:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f000 ff31 	bl	800ed9c <_ZSt12__niter_baseIPfET_S1_>
 800df3a:	4604      	mov	r4, r0
 800df3c:	68b8      	ldr	r0, [r7, #8]
 800df3e:	f000 ff2d 	bl	800ed9c <_ZSt12__niter_baseIPfET_S1_>
 800df42:	4605      	mov	r5, r0
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 ff29 	bl	800ed9c <_ZSt12__niter_baseIPfET_S1_>
 800df4a:	4602      	mov	r2, r0
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	4629      	mov	r1, r5
 800df50:	4620      	mov	r0, r4
 800df52:	f000 ff2e 	bl	800edb2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800df56:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bdb0      	pop	{r4, r5, r7, pc}

0800df60 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800df76:	b580      	push	{r7, lr}
 800df78:	b082      	sub	sp, #8
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 ff3b 	bl	800edfe <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>
 800df88:	4603      	mov	r3, r0
 800df8a:	f083 0301 	eor.w	r3, r3, #1
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	4618      	mov	r0, r3
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <_ZNSt13move_iteratorIPfEppEv>:
      operator++()
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	1d1a      	adds	r2, r3, #4
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	601a      	str	r2, [r3, #0]
	return *this;
 800dfaa:	687b      	ldr	r3, [r7, #4]
      }
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <_ZNKSt13move_iteratorIPfEdeEv>:
      operator*() const
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	109b      	asrs	r3, r3, #2
    }
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800dff8:	bf00      	nop
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e006:	b480      	push	{r7}
 800e008:	b085      	sub	sp, #20
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	109b      	asrs	r3, r3, #2
    }
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800e026:	b580      	push	{r7, lr}
 800e028:	b082      	sub	sp, #8
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fef9 	bl	800ee2a <_ZN2ei7EiAllocIiE8allocateEj>
 800e038:	4603      	mov	r3, r0
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	60b9      	str	r1, [r7, #8]
 800e04c:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800e04e:	68b8      	ldr	r0, [r7, #8]
 800e050:	f008 fc4c 	bl	80168ec <_Z7ei_freePv>
    }
 800e054:	bf00      	nop
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e068:	68b8      	ldr	r0, [r7, #8]
 800e06a:	f7fe f965 	bl	800c338 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e06e:	4603      	mov	r3, r0
 800e070:	681c      	ldr	r4, [r3, #0]
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f7f3 f876 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800e078:	4603      	mov	r3, r0
 800e07a:	4619      	mov	r1, r3
 800e07c:	2004      	movs	r0, #4
 800e07e:	f7f3 f837 	bl	80010f0 <_ZnwjPv>
 800e082:	4603      	mov	r3, r0
 800e084:	601c      	str	r4, [r3, #0]
	  }
 800e086:	bf00      	nop
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd90      	pop	{r4, r7, pc}

0800e08e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fed8 	bl	800ee4c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800e09c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f000 fee0 	bl	800ee64 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	bf00      	nop
	}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b4:	b086      	sub	sp, #24
 800e0b6:	af02      	add	r7, sp, #8
 800e0b8:	60f8      	str	r0, [r7, #12]
 800e0ba:	60b9      	str	r1, [r7, #8]
 800e0bc:	607a      	str	r2, [r7, #4]
 800e0be:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f000 feda 	bl	800ee7a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	68b8      	ldr	r0, [r7, #8]
 800e0ca:	f7fd fb98 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f7fd fb94 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	6838      	ldr	r0, [r7, #0]
 800e0da:	f7fd fb9b 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	462a      	mov	r2, r5
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4640      	mov	r0, r8
 800e0ea:	f000 fed1 	bl	800ee90 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800e0ee:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0fa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b082      	sub	sp, #8
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7f3 f82e 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800e108:	4603      	mov	r3, r0
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
	...

0800e114 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e114:	b590      	push	{r4, r7, lr}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	4613      	mov	r3, r2
 800e120:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e122:	79fb      	ldrb	r3, [r7, #7]
 800e124:	2b03      	cmp	r3, #3
 800e126:	d82a      	bhi.n	800e17e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e128:	a201      	add	r2, pc, #4	; (adr r2, 800e130 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12e:	bf00      	nop
 800e130:	0800e141 	.word	0x0800e141
 800e134:	0800e14f 	.word	0x0800e14f
 800e138:	0800e163 	.word	0x0800e163
 800e13c:	0800e175 	.word	0x0800e175
	      __dest._M_access<const type_info*>() = nullptr;
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 f937 	bl	800e3b4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e146:	4603      	mov	r3, r0
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
	      break;
 800e14c:	e017      	b.n	800e17e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e14e:	68f8      	ldr	r0, [r7, #12]
 800e150:	f7ff ffd3 	bl	800e0fa <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800e154:	4604      	mov	r4, r0
 800e156:	68b8      	ldr	r0, [r7, #8]
 800e158:	f7ff ff99 	bl	800e08e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e15c:	4603      	mov	r3, r0
 800e15e:	6023      	str	r3, [r4, #0]
	      break;
 800e160:	e00d      	b.n	800e17e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e162:	68b8      	ldr	r0, [r7, #8]
 800e164:	f7ff ff93 	bl	800e08e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e168:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e16a:	4619      	mov	r1, r3
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 feb3 	bl	800eed8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e172:	e004      	b.n	800e17e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e174:	4621      	mov	r1, r4
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 fec0 	bl	800eefc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e17c:	bf00      	nop
	  return false;
 800e17e:	2300      	movs	r3, #0
	}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	bd90      	pop	{r4, r7, pc}

0800e188 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e188:	b590      	push	{r4, r7, lr}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e194:	68b8      	ldr	r0, [r7, #8]
 800e196:	f7fe f90d 	bl	800c3b4 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800e19a:	4604      	mov	r4, r0
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7f2 ffe1 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	2004      	movs	r0, #4
 800e1a8:	f7f2 ffa2 	bl	80010f0 <_ZnwjPv>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	6013      	str	r3, [r2, #0]
	  }
 800e1b2:	bf00      	nop
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd90      	pop	{r4, r7, pc}

0800e1ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b084      	sub	sp, #16
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 fea6 	bl	800ef14 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800e1c8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 feae 	bl	800ef2c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	bf00      	nop
	}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e0:	b086      	sub	sp, #24
 800e1e2:	af02      	add	r7, sp, #8
 800e1e4:	60f8      	str	r0, [r7, #12]
 800e1e6:	60b9      	str	r1, [r7, #8]
 800e1e8:	607a      	str	r2, [r7, #4]
 800e1ea:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 fea8 	bl	800ef42 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	68b8      	ldr	r0, [r7, #8]
 800e1f6:	f7fd fb02 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7fd fafe 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e202:	4606      	mov	r6, r0
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	f7fd fb05 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e20a:	4603      	mov	r3, r0
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	4633      	mov	r3, r6
 800e210:	462a      	mov	r2, r5
 800e212:	4621      	mov	r1, r4
 800e214:	4640      	mov	r0, r8
 800e216:	f000 fe9f 	bl	800ef58 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800e21a:	4603      	mov	r3, r0
    }
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e226 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7f2 ff98 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800e234:	4603      	mov	r3, r0
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
	...

0800e240 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e240:	b590      	push	{r4, r7, lr}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	4613      	mov	r3, r2
 800e24c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	2b03      	cmp	r3, #3
 800e252:	d82a      	bhi.n	800e2aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e254:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25a:	bf00      	nop
 800e25c:	0800e26d 	.word	0x0800e26d
 800e260:	0800e27b 	.word	0x0800e27b
 800e264:	0800e28f 	.word	0x0800e28f
 800e268:	0800e2a1 	.word	0x0800e2a1
	      __dest._M_access<const type_info*>() = nullptr;
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f000 f8a1 	bl	800e3b4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e272:	4603      	mov	r3, r0
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
	      break;
 800e278:	e017      	b.n	800e2aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7ff ffd3 	bl	800e226 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800e280:	4604      	mov	r4, r0
 800e282:	68b8      	ldr	r0, [r7, #8]
 800e284:	f7ff ff99 	bl	800e1ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e288:	4603      	mov	r3, r0
 800e28a:	6023      	str	r3, [r4, #0]
	      break;
 800e28c:	e00d      	b.n	800e2aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e28e:	68b8      	ldr	r0, [r7, #8]
 800e290:	f7ff ff93 	bl	800e1ba <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e294:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e296:	4619      	mov	r1, r3
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f000 fe81 	bl	800efa0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e29e:	e004      	b.n	800e2aa <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f000 fe8e 	bl	800efc4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e2a8:	bf00      	nop
	  return false;
 800e2aa:	2300      	movs	r3, #0
	}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd90      	pop	{r4, r7, pc}

0800e2b4 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fe8d 	bl	800efdc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 fe95 	bl	800eff4 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fe97 	bl	800f010 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 fe98 	bl	800f02a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 fe98 	bl	800f042 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800e312:	4603      	mov	r3, r0
 800e314:	4618      	mov	r0, r3
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 fe99 	bl	800f05c <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800e32a:	4603      	mov	r3, r0
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fe9a 	bl	800f076 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800e342:	4603      	mov	r3, r0
 800e344:	4618      	mov	r0, r3
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fe9b 	bl	800f090 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800e35a:	4603      	mov	r3, r0
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fe92 	bl	800f0ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800e388:	4603      	mov	r3, r0
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f008 fa88 	bl	80168b8 <_Z9ei_mallocj>
 800e3a8:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e3aa:	68bb      	ldr	r3, [r7, #8]
    }
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7f2 fed1 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800e3d6:	687c      	ldr	r4, [r7, #4]
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f7fe fa3d 	bl	800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 fe6e 	bl	800f0c4 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd90      	pop	{r4, r7, pc}

0800e3f2 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
 800e3fa:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7ff fa0d 	bl	800d81c <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800e402:	4603      	mov	r3, r0
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4618      	mov	r0, r3
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3304      	adds	r3, #4
 800e420:	4618      	mov	r0, r3
 800e422:	f000 fe60 	bl	800f0e6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800e426:	4603      	mov	r3, r0
 800e428:	4618      	mov	r0, r3
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fe5f 	bl	800f0fc <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800e43e:	4603      	mov	r3, r0
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e448:	b40f      	push	{r0, r1, r2, r3}
 800e44a:	b480      	push	{r7}
 800e44c:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e44e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e452:	4618      	mov	r0, r3
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	b004      	add	sp, #16
 800e45c:	4770      	bx	lr

0800e45e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e45e:	b580      	push	{r7, lr}
 800e460:	b082      	sub	sp, #8
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	6039      	str	r1, [r7, #0]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	4619      	mov	r1, r3
 800e46c:	2004      	movs	r0, #4
 800e46e:	f7f2 fe3f 	bl	80010f0 <_ZnwjPv>
 800e472:	4603      	mov	r3, r0
 800e474:	f04f 0200 	mov.w	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
	}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <_ZSt8_DestroyIfEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800e482:	b480      	push	{r7}
 800e484:	b083      	sub	sp, #12
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e496:	b580      	push	{r7, lr}
 800e498:	b086      	sub	sp, #24
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	60f8      	str	r0, [r7, #12]
 800e49e:	60b9      	str	r1, [r7, #8]
 800e4a0:	607a      	str	r2, [r7, #4]
 800e4a2:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e4a4:	463b      	mov	r3, r7
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	68b9      	ldr	r1, [r7, #8]
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 fe33 	bl	800f116 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	617b      	str	r3, [r7, #20]
 800e4b4:	e013      	b.n	800e4de <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800e4b6:	463b      	mov	r3, r7
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	6979      	ldr	r1, [r7, #20]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f85d 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e4c8:	463b      	mov	r3, r7
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	68b9      	ldr	r1, [r7, #8]
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 fe90 	bl	800f1f4 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fb fbb5 	bl	8009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800e4de:	1d3a      	adds	r2, r7, #4
 800e4e0:	f107 0314 	add.w	r3, r7, #20
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f000 fe6c 	bl	800f1c4 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1e1      	bne.n	800e4b6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e508:	e00a      	b.n	800e520 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x24>
	{
	  --__last;
 800e50a:	f107 0308 	add.w	r3, r7, #8
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 feb0 	bl	800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68ba      	ldr	r2, [r7, #8]
 800e518:	68b9      	ldr	r1, [r7, #8]
 800e51a:	68f8      	ldr	r0, [r7, #12]
 800e51c:	f000 fe6a 	bl	800f1f4 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      while (__last - __first > 1)
 800e520:	f107 020c 	add.w	r2, r7, #12
 800e524:	f107 0308 	add.w	r3, r7, #8
 800e528:	4611      	mov	r1, r2
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fa81 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e530:	4603      	mov	r3, r0
 800e532:	2b01      	cmp	r3, #1
 800e534:	bfcc      	ite	gt
 800e536:	2301      	movgt	r3, #1
 800e538:	2300      	movle	r3, #0
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1e4      	bne.n	800e50a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xe>
	}
    }
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	425b      	negs	r3, r3
 800e55e:	4413      	add	r3, r2
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	f107 020c 	add.w	r2, r7, #12
 800e566:	f107 0308 	add.w	r3, r7, #8
 800e56a:	4611      	mov	r1, r2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fc ff66 	bl	800b43e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4618      	mov	r0, r3
 800e576:	3710      	adds	r7, #16
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e57c:	b580      	push	{r7, lr}
 800e57e:	ed2d 8b02 	vpush	{d8}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4618      	mov	r0, r3
 800e592:	f7fb fb69 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e596:	4603      	mov	r3, r0
 800e598:	ed93 8a00 	vldr	s16, [r3]
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fb fb62 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	edd3 7a00 	vldr	s15, [r3]
 800e5aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b2:	bf4c      	ite	mi
 800e5b4:	2301      	movmi	r3, #1
 800e5b6:	2300      	movpl	r3, #0
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	ecbd 8b02 	vpop	{d8}
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	60f8      	str	r0, [r7, #12]
 800e5ce:	60b9      	str	r1, [r7, #8]
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	f107 0018 	add.w	r0, r7, #24
 800e5dc:	f7ff ffce 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d020      	beq.n	800e628 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	6879      	ldr	r1, [r7, #4]
 800e5ea:	f107 0018 	add.w	r0, r7, #24
 800e5ee:	f7ff ffc5 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e5f8:	6879      	ldr	r1, [r7, #4]
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 fe4a 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e600:	e032      	b.n	800e668 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	68b9      	ldr	r1, [r7, #8]
 800e606:	f107 0018 	add.w	r0, r7, #24
 800e60a:	f7ff ffb7 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e614:	6839      	ldr	r1, [r7, #0]
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f000 fe3c 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e61c:	e024      	b.n	800e668 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e61e:	68b9      	ldr	r1, [r7, #8]
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f000 fe37 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e626:	e01f      	b.n	800e668 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 800e628:	683a      	ldr	r2, [r7, #0]
 800e62a:	68b9      	ldr	r1, [r7, #8]
 800e62c:	f107 0018 	add.w	r0, r7, #24
 800e630:	f7ff ffa4 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d004      	beq.n	800e644 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f000 fe29 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e642:	e011      	b.n	800e668 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	6879      	ldr	r1, [r7, #4]
 800e648:	f107 0018 	add.w	r0, r7, #24
 800e64c:	f7ff ff96 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d004      	beq.n	800e660 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f000 fe1b 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e65e:	e003      	b.n	800e668 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e660:	6879      	ldr	r1, [r7, #4]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fe16 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e668:	bf00      	nop
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	607a      	str	r2, [r7, #4]
 800e67c:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e67e:	e004      	b.n	800e68a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 800e680:	f107 030c 	add.w	r3, r7, #12
 800e684:	4618      	mov	r0, r3
 800e686:	f7fb fadf 	bl	8009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e68a:	463b      	mov	r3, r7
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	68f9      	ldr	r1, [r7, #12]
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff ff73 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1f1      	bne.n	800e680 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 800e69c:	f107 0308 	add.w	r3, r7, #8
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 fde7 	bl	800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e6a6:	e004      	b.n	800e6b2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 800e6a8:	f107 0308 	add.w	r3, r7, #8
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fde1 	bl	800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e6b2:	463b      	mov	r3, r7
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	6879      	ldr	r1, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff ff5f 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1f1      	bne.n	800e6a8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 800e6c4:	f107 0208 	add.w	r2, r7, #8
 800e6c8:	f107 030c 	add.w	r3, r7, #12
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 fd78 	bl	800f1c4 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f083 0301 	eor.w	r3, r3, #1
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	e009      	b.n	800e6f8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e6e4:	68b9      	ldr	r1, [r7, #8]
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f000 fdd4 	bl	800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
	  ++__first;
 800e6ec:	f107 030c 	add.w	r3, r7, #12
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fb faa9 	bl	8009c48 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e6f6:	e7c8      	b.n	800e68a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e700:	b590      	push	{r4, r7, lr}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7fc fea7 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e710:	4603      	mov	r3, r0
 800e712:	681c      	ldr	r4, [r3, #0]
 800e714:	6838      	ldr	r0, [r7, #0]
 800e716:	f7fc fea2 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e71a:	4603      	mov	r3, r0
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	429c      	cmp	r4, r3
 800e720:	bf0c      	ite	eq
 800e722:	2301      	moveq	r3, #1
 800e724:	2300      	movne	r3, #0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	4618      	mov	r0, r3
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd90      	pop	{r4, r7, pc}

0800e730 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e730:	b590      	push	{r4, r7, lr}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 fdc0 	bl	800f2c2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e742:	4604      	mov	r4, r0
 800e744:	68b8      	ldr	r0, [r7, #8]
 800e746:	f000 fdbc 	bl	800f2c2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e74a:	4603      	mov	r3, r0
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	4619      	mov	r1, r3
 800e750:	4620      	mov	r0, r4
 800e752:	f000 fdc1 	bl	800f2d8 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>
 800e756:	4603      	mov	r3, r0
    }
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd90      	pop	{r4, r7, pc}

0800e760 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e76a:	1d3b      	adds	r3, r7, #4
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fb fa7b 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e772:	4603      	mov	r3, r0
 800e774:	4618      	mov	r0, r3
 800e776:	f7fc f9b6 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e77a:	4603      	mov	r3, r0
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	60bb      	str	r3, [r7, #8]
      --__next;
 800e784:	f107 0308 	add.w	r3, r7, #8
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 fd73 	bl	800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e78e:	e017      	b.n	800e7c0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e790:	f107 0308 	add.w	r3, r7, #8
 800e794:	4618      	mov	r0, r3
 800e796:	f7fb fa67 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e79a:	4603      	mov	r3, r0
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fc f9a2 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	1d3b      	adds	r3, r7, #4
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fb fa5e 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	6013      	str	r3, [r2, #0]
	  __last = __next;
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	607b      	str	r3, [r7, #4]
	  --__next;
 800e7b6:	f107 0308 	add.w	r3, r7, #8
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f000 fd5a 	bl	800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e7c0:	f107 010c 	add.w	r1, r7, #12
 800e7c4:	463b      	mov	r3, r7
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f000 fda6 	bl	800f31a <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1dd      	bne.n	800e790 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e7d4:	f107 030c 	add.w	r3, r7, #12
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fc f984 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e7de:	4604      	mov	r4, r0
 800e7e0:	1d3b      	adds	r3, r7, #4
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fb fa40 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	6013      	str	r3, [r2, #0]
    }
 800e7ee:	bf00      	nop
 800e7f0:	3714      	adds	r7, #20
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd90      	pop	{r4, r7, pc}

0800e7f6 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e7f6:	b40f      	push	{r0, r1, r2, r3}
 800e7f8:	b480      	push	{r7}
 800e7fa:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e7fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e800:	4618      	mov	r0, r3
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	b004      	add	sp, #16
 800e80a:	4770      	bx	lr

0800e80c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4618      	mov	r0, r3
 800e818:	370c      	adds	r7, #12
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e822:	b590      	push	{r4, r7, lr}
 800e824:	b085      	sub	sp, #20
 800e826:	af00      	add	r7, sp, #0
 800e828:	60f8      	str	r0, [r7, #12]
 800e82a:	60b9      	str	r1, [r7, #8]
 800e82c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff ffec 	bl	800e80c <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800e834:	4603      	mov	r3, r0
 800e836:	681c      	ldr	r4, [r3, #0]
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	4619      	mov	r1, r3
 800e83c:	2004      	movs	r0, #4
 800e83e:	f7f2 fc57 	bl	80010f0 <_ZnwjPv>
 800e842:	4603      	mov	r3, r0
 800e844:	601c      	str	r4, [r3, #0]
	}
 800e846:	bf00      	nop
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd90      	pop	{r4, r7, pc}

0800e84e <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 800e84e:	b480      	push	{r7}
 800e850:	b083      	sub	sp, #12
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
    }
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
    }
 800e86a:	bf00      	nop
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800e87e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e882:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 fd68 	bl	800f35a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 800e88a:	4603      	mov	r3, r0
 800e88c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e88e:	f107 0208 	add.w	r2, r7, #8
 800e892:	f107 030c 	add.w	r3, r7, #12
 800e896:	4611      	mov	r1, r2
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f9 f986 	bl	8007baa <_ZSt3minIjERKT_S2_S2_>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	681b      	ldr	r3, [r3, #0]
      }
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	00db      	lsls	r3, r3, #3
 800e8ce:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f007 fff1 	bl	80168b8 <_Z9ei_mallocj>
 800e8d6:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e8d8:	68bb      	ldr	r3, [r7, #8]
    }
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e8e2:	b5b0      	push	{r4, r5, r7, lr}
 800e8e4:	b084      	sub	sp, #16
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	60b9      	str	r1, [r7, #8]
 800e8ec:	607a      	str	r2, [r7, #4]
 800e8ee:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 fd3f 	bl	800f374 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	68b8      	ldr	r0, [r7, #8]
 800e8fa:	f000 fd3b 	bl	800f374 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e8fe:	4605      	mov	r5, r0
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 fd37 	bl	800f374 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800e906:	4602      	mov	r2, r0
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	4629      	mov	r1, r5
 800e90c:	4620      	mov	r0, r4
 800e90e:	f000 fd3c 	bl	800f38a <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800e912:	4603      	mov	r3, r0
    }
 800e914:	4618      	mov	r0, r3
 800e916:	3710      	adds	r7, #16
 800e918:	46bd      	mov	sp, r7
 800e91a:	bdb0      	pop	{r4, r5, r7, pc}

0800e91c <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800e926:	463b      	mov	r3, r7
 800e928:	4618      	mov	r0, r3
 800e92a:	f000 fd54 	bl	800f3d6 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 800e92e:	4603      	mov	r3, r0
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fd4d 	bl	800f3ec <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800e952:	4603      	mov	r3, r0
 800e954:	f083 0301 	eor.w	r3, r3, #1
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f103 0208 	add.w	r2, r3, #8
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	601a      	str	r2, [r3, #0]
	return *this;
 800e976:	687b      	ldr	r3, [r7, #4]
      }
 800e978:	4618      	mov	r0, r3
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4618      	mov	r0, r3
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fd35 	bl	800f418 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	68b9      	ldr	r1, [r7, #8]
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f000 fd3a 	bl	800f42e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b086      	sub	sp, #24
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	60f8      	str	r0, [r7, #12]
 800e9ca:	60b9      	str	r1, [r7, #8]
 800e9cc:	607a      	str	r2, [r7, #4]
 800e9ce:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e9d0:	463b      	mov	r3, r7
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f000 fd42 	bl	800f460 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	617b      	str	r3, [r7, #20]
 800e9e0:	e013      	b.n	800ea0a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x48>
	if (__comp(__i, __first))
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	68fa      	ldr	r2, [r7, #12]
 800e9e6:	6979      	ldr	r1, [r7, #20]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f85d 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d005      	beq.n	800ea00 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e9f4:	463b      	mov	r3, r7
 800e9f6:	697a      	ldr	r2, [r7, #20]
 800e9f8:	68b9      	ldr	r1, [r7, #8]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 fda8 	bl	800f550 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ea00:	f107 0314 	add.w	r3, r7, #20
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 f920 	bl	800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800ea0a:	1d3a      	adds	r2, r7, #4
 800ea0c:	f107 0314 	add.w	r3, r7, #20
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f000 fd84 	bl	800f520 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1e1      	bne.n	800e9e2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x20>
    }
 800ea1e:	bf00      	nop
 800ea20:	bf00      	nop
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 800ea34:	e00a      	b.n	800ea4c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x24>
	  --__last;
 800ea36:	f107 0308 	add.w	r3, r7, #8
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 fdd4 	bl	800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	68b9      	ldr	r1, [r7, #8]
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f000 fd82 	bl	800f550 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 800ea4c:	f107 020c 	add.w	r2, r7, #12
 800ea50:	f107 0308 	add.w	r3, r7, #8
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fe f977 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	bfcc      	ite	gt
 800ea62:	2301      	movgt	r3, #1
 800ea64:	2300      	movle	r3, #0
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e4      	bne.n	800ea36 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xe>
    }
 800ea6c:	bf00      	nop
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b084      	sub	sp, #16
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	425b      	negs	r3, r3
 800ea8a:	4413      	add	r3, r2
 800ea8c:	60fb      	str	r3, [r7, #12]
 800ea8e:	f107 020c 	add.w	r2, r7, #12
 800ea92:	f107 0308 	add.w	r3, r7, #8
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fc fff9 	bl	800ba90 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800eab4:	68fc      	ldr	r4, [r7, #12]
 800eab6:	f107 0308 	add.w	r3, r7, #8
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 f8d6 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eac0:	4605      	mov	r5, r0
 800eac2:	1d3b      	adds	r3, r7, #4
 800eac4:	4618      	mov	r0, r3
 800eac6:	f000 f8d1 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eaca:	4603      	mov	r3, r0
 800eacc:	461a      	mov	r2, r3
 800eace:	4629      	mov	r1, r5
 800ead0:	4620      	mov	r0, r4
 800ead2:	f7f4 ff93 	bl	80039fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800ead6:	4603      	mov	r3, r0
 800ead8:	4618      	mov	r0, r3
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bdb0      	pop	{r4, r5, r7, pc}

0800eae0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
 800eaec:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	68b9      	ldr	r1, [r7, #8]
 800eaf2:	f107 0018 	add.w	r0, r7, #24
 800eaf6:	f7ff ffd7 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d020      	beq.n	800eb42 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	6879      	ldr	r1, [r7, #4]
 800eb04:	f107 0018 	add.w	r0, r7, #24
 800eb08:	f7ff ffce 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d004      	beq.n	800eb1c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800eb12:	6879      	ldr	r1, [r7, #4]
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f000 fd78 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb1a:	e032      	b.n	800eb82 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	68b9      	ldr	r1, [r7, #8]
 800eb20:	f107 0018 	add.w	r0, r7, #24
 800eb24:	f7ff ffc0 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d004      	beq.n	800eb38 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 fd6a 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb36:	e024      	b.n	800eb82 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f000 fd65 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb40:	e01f      	b.n	800eb82 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 800eb42:	683a      	ldr	r2, [r7, #0]
 800eb44:	68b9      	ldr	r1, [r7, #8]
 800eb46:	f107 0018 	add.w	r0, r7, #24
 800eb4a:	f7ff ffad 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d004      	beq.n	800eb5e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 800eb54:	68b9      	ldr	r1, [r7, #8]
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f000 fd57 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb5c:	e011      	b.n	800eb82 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	6879      	ldr	r1, [r7, #4]
 800eb62:	f107 0018 	add.w	r0, r7, #24
 800eb66:	f7ff ff9f 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d004      	beq.n	800eb7a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	f000 fd49 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb78:	e003      	b.n	800eb82 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f000 fd44 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800eb82:	bf00      	nop
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	60f8      	str	r0, [r7, #12]
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	607a      	str	r2, [r7, #4]
 800eb96:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800eb98:	e004      	b.n	800eba4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
	    ++__first;
 800eb9a:	f107 030c 	add.w	r3, r7, #12
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f000 f853 	bl	800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800eba4:	463b      	mov	r3, r7
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	68f9      	ldr	r1, [r7, #12]
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff ff7c 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1f1      	bne.n	800eb9a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x10>
	  --__last;
 800ebb6:	f107 0308 	add.w	r3, r7, #8
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 fd14 	bl	800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ebc0:	e004      	b.n	800ebcc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x42>
	    --__last;
 800ebc2:	f107 0308 	add.w	r3, r7, #8
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f000 fd0e 	bl	800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ebcc:	463b      	mov	r3, r7
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	6879      	ldr	r1, [r7, #4]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff ff68 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1f1      	bne.n	800ebc2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x38>
	  if (!(__first < __last))
 800ebde:	f107 0208 	add.w	r2, r7, #8
 800ebe2:	f107 030c 	add.w	r3, r7, #12
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 fc99 	bl	800f520 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f083 0301 	eor.w	r3, r3, #1
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d001      	beq.n	800ebfe <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	e009      	b.n	800ec12 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 800ebfe:	68b9      	ldr	r1, [r7, #8]
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 fd02 	bl	800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 800ec06:	f107 030c 	add.w	r3, r7, #12
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 f81d 	bl	800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800ec10:	e7c8      	b.n	800eba4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
    }
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ec1a:	b590      	push	{r4, r7, lr}
 800ec1c:	b083      	sub	sp, #12
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f7fe f8cd 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	681c      	ldr	r4, [r3, #0]
 800ec2e:	6838      	ldr	r0, [r7, #0]
 800ec30:	f7fe f8c8 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ec34:	4603      	mov	r3, r0
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	429c      	cmp	r4, r3
 800ec3a:	bf0c      	ite	eq
 800ec3c:	2301      	moveq	r3, #1
 800ec3e:	2300      	movne	r3, #0
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	4618      	mov	r0, r3
 800ec44:	370c      	adds	r7, #12
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd90      	pop	{r4, r7, pc}

0800ec4a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ec4a:	b480      	push	{r7}
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f103 0208 	add.w	r2, r3, #8
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	601a      	str	r2, [r3, #0]
	return *this;
 800ec5e:	687b      	ldr	r3, [r7, #4]
      }
 800ec60:	4618      	mov	r0, r3
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ec9a:	b590      	push	{r4, r7, lr}
 800ec9c:	b085      	sub	sp, #20
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	60f8      	str	r0, [r7, #12]
 800eca2:	60b9      	str	r1, [r7, #8]
 800eca4:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f000 fcc6 	bl	800f638 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ecac:	4604      	mov	r4, r0
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f000 fcc2 	bl	800f638 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f000 fcc7 	bl	800f64e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800ecc0:	4603      	mov	r3, r0
    }
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd90      	pop	{r4, r7, pc}

0800ecca <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800ecca:	b590      	push	{r4, r7, lr}
 800eccc:	b085      	sub	sp, #20
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800ecd2:	1d3b      	adds	r3, r7, #4
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 fcdb 	bl	800f690 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	f107 030c 	add.w	r3, r7, #12
 800ece0:	4611      	mov	r1, r2
 800ece2:	4618      	mov	r0, r3
 800ece4:	f000 fcdf 	bl	800f6a6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 800ece8:	bf00      	nop
 800ecea:	4620      	mov	r0, r4
 800ecec:	3714      	adds	r7, #20
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd90      	pop	{r4, r7, pc}

0800ecf2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800ecf2:	b590      	push	{r4, r7, lr}
 800ecf4:	b087      	sub	sp, #28
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800ecfc:	1d3b      	adds	r3, r7, #4
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff ffb4 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ed04:	4603      	mov	r3, r0
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff ffbc 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	f107 0310 	add.w	r3, r7, #16
 800ed12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed16:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	60fb      	str	r3, [r7, #12]
      --__next;
 800ed1e:	f107 030c 	add.w	r3, r7, #12
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 fc60 	bl	800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ed28:	e01a      	b.n	800ed60 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x6e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800ed2a:	f107 030c 	add.w	r3, r7, #12
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7ff ff9c 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ed34:	4603      	mov	r3, r0
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff ffa4 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	1d3b      	adds	r3, r7, #4
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff ff93 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ed46:	4603      	mov	r3, r0
 800ed48:	4622      	mov	r2, r4
 800ed4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed4e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	607b      	str	r3, [r7, #4]
	  --__next;
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fc44 	bl	800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ed60:	f107 0110 	add.w	r1, r7, #16
 800ed64:	463b      	mov	r3, r7
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 fcaa 	bl	800f6c2 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1da      	bne.n	800ed2a <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800ed74:	f107 0310 	add.w	r3, r7, #16
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7ff ff83 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ed7e:	4604      	mov	r4, r0
 800ed80:	1d3b      	adds	r3, r7, #4
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff ff72 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed90:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ed94:	bf00      	nop
 800ed96:	371c      	adds	r7, #28
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd90      	pop	{r4, r7, pc}

0800ed9c <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800edb2:	b590      	push	{r4, r7, lr}
 800edb4:	b087      	sub	sp, #28
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	60f8      	str	r0, [r7, #12]
 800edba:	60b9      	str	r1, [r7, #8]
 800edbc:	607a      	str	r2, [r7, #4]
 800edbe:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800edc4:	e012      	b.n	800edec <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800edc6:	6978      	ldr	r0, [r7, #20]
 800edc8:	f7fd fde6 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800edcc:	4604      	mov	r4, r0
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7fd fde2 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800edd4:	4603      	mov	r3, r0
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	4619      	mov	r1, r3
 800edda:	4620      	mov	r0, r4
 800eddc:	f000 fc87 	bl	800f6ee <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	3304      	adds	r3, #4
 800ede4:	60fb      	str	r3, [r7, #12]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	3304      	adds	r3, #4
 800edea:	617b      	str	r3, [r7, #20]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d1e8      	bne.n	800edc6 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800edf4:	697b      	ldr	r3, [r7, #20]
    }
 800edf6:	4618      	mov	r0, r3
 800edf8:	371c      	adds	r7, #28
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd90      	pop	{r4, r7, pc}

0800edfe <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800edfe:	b590      	push	{r4, r7, lr}
 800ee00:	b083      	sub	sp, #12
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fc8b 	bl	800f724 <_ZNKSt13move_iteratorIPfE4baseEv>
 800ee0e:	4604      	mov	r4, r0
 800ee10:	6838      	ldr	r0, [r7, #0]
 800ee12:	f000 fc87 	bl	800f724 <_ZNKSt13move_iteratorIPfE4baseEv>
 800ee16:	4603      	mov	r3, r0
 800ee18:	429c      	cmp	r4, r3
 800ee1a:	bf0c      	ite	eq
 800ee1c:	2301      	moveq	r3, #1
 800ee1e:	2300      	movne	r3, #0
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	4618      	mov	r0, r3
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd90      	pop	{r4, r7, pc}

0800ee2a <_ZN2ei7EiAllocIiE8allocateEj>:
    T *allocate(size_t n)
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f007 fd3c 	bl	80168b8 <_Z9ei_mallocj>
 800ee40:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800ee42:	68bb      	ldr	r3, [r7, #8]
    }
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7f2 f990 	bl	800117a <_ZNKSt9_Any_data9_M_accessEv>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ee7a:	b480      	push	{r7}
 800ee7c:	b083      	sub	sp, #12
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	7338      	strb	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
 800ee9c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ee9e:	68b8      	ldr	r0, [r7, #8]
 800eea0:	f7ff ffeb 	bl	800ee7a <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eea4:	4603      	mov	r3, r0
 800eea6:	681c      	ldr	r4, [r3, #0]
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7fc fca8 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	681d      	ldr	r5, [r3, #0]
 800eeb2:	6838      	ldr	r0, [r7, #0]
 800eeb4:	f7fc fca3 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	681e      	ldr	r6, [r3, #0]
 800eebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eebe:	f7fc fca9 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800eec2:	4603      	mov	r3, r0
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	4631      	mov	r1, r6
 800eeca:	4628      	mov	r0, r5
 800eecc:	47a0      	blx	r4
 800eece:	4603      	mov	r3, r0
 800eed0:	4618      	mov	r0, r3
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eed8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800eee2:	6838      	ldr	r0, [r7, #0]
 800eee4:	f000 fc2a 	bl	800f73c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800eee8:	4603      	mov	r3, r0
 800eeea:	4622      	mov	r2, r4
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fc2f 	bl	800f752 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd90      	pop	{r4, r7, pc}

0800eefc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fc3c 	bl	800f784 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7f2 f92c 	bl	800117a <_ZNKSt9_Any_data9_M_accessEv>
 800ef22:	4603      	mov	r3, r0
 800ef24:	4618      	mov	r0, r3
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4618      	mov	r0, r3
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	7338      	strb	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ef66:	68b8      	ldr	r0, [r7, #8]
 800ef68:	f7ff ffeb 	bl	800ef42 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800ef6c:	4606      	mov	r6, r0
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7fc fc45 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ef74:	4603      	mov	r3, r0
 800ef76:	681c      	ldr	r4, [r3, #0]
 800ef78:	6838      	ldr	r0, [r7, #0]
 800ef7a:	f7fc fc40 	bl	800b7fe <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	681d      	ldr	r5, [r3, #0]
 800ef82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef84:	f7fc fc46 	bl	800b814 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	462a      	mov	r2, r5
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4630      	mov	r0, r6
 800ef92:	f7f8 fa4e 	bl	8007432 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800ef96:	4603      	mov	r3, r0
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800efa0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800efa0:	b590      	push	{r4, r7, lr}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800efaa:	6838      	ldr	r0, [r7, #0]
 800efac:	f000 fbf6 	bl	800f79c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800efb0:	4603      	mov	r3, r0
 800efb2:	4622      	mov	r2, r4
 800efb4:	4619      	mov	r1, r3
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fbfb 	bl	800f7b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd90      	pop	{r4, r7, pc}

0800efc4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fc08 	bl	800f7e4 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 fc09 	bl	800f7fc <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4618      	mov	r0, r3
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f010:	b580      	push	{r7, lr}
 800f012:	b082      	sub	sp, #8
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f000 fbf9 	bl	800f812 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800f020:	4603      	mov	r3, r0
 800f022:	4618      	mov	r0, r3
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fbf8 	bl	800f828 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800f038:	4603      	mov	r3, r0
 800f03a:	4618      	mov	r0, r3
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f042:	b580      	push	{r7, lr}
 800f044:	b082      	sub	sp, #8
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f000 fbf7 	bl	800f840 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800f052:	4603      	mov	r3, r0
 800f054:	4618      	mov	r0, r3
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4618      	mov	r0, r3
 800f068:	f000 fbf5 	bl	800f856 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800f06c:	4603      	mov	r3, r0
 800f06e:	4618      	mov	r0, r3
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f076:	b580      	push	{r7, lr}
 800f078:	b082      	sub	sp, #8
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 fbf3 	bl	800f86c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800f086:	4603      	mov	r3, r0
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3304      	adds	r3, #4
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 fbf0 	bl	800f882 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fbef 	bl	800f898 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800f0ce:	6838      	ldr	r0, [r7, #0]
 800f0d0:	f7fd fbc2 	bl	800c858 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	601a      	str	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f0e6:	b480      	push	{r7}
 800f0e8:	b083      	sub	sp, #12
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4618      	mov	r0, r3
 800f108:	f000 fbd1 	bl	800f8ae <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800f10c:	4603      	mov	r3, r0
 800f10e:	4618      	mov	r0, r3
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}

0800f116 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f116:	b590      	push	{r4, r7, lr}
 800f118:	b089      	sub	sp, #36	; 0x24
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	60f8      	str	r0, [r7, #12]
 800f11e:	60b9      	str	r1, [r7, #8]
 800f120:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f122:	f107 020c 	add.w	r2, r7, #12
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fd fc80 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f132:	4603      	mov	r3, r0
 800f134:	2b01      	cmp	r3, #1
 800f136:	bfd4      	ite	le
 800f138:	2301      	movle	r3, #1
 800f13a:	2300      	movgt	r3, #0
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d13a      	bne.n	800f1b8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa2>
      const _DistanceType __len = __last - __first;
 800f142:	f107 020c 	add.w	r2, r7, #12
 800f146:	f107 0308 	add.w	r3, r7, #8
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fd fc70 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f152:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	3b02      	subs	r3, #2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	da00      	bge.n	800f15e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x48>
 800f15c:	3301      	adds	r3, #1
 800f15e:	105b      	asrs	r3, r3, #1
 800f160:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f162:	f107 030c 	add.w	r3, r7, #12
 800f166:	69f9      	ldr	r1, [r7, #28]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe fbcf 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f16e:	4603      	mov	r3, r0
 800f170:	617b      	str	r3, [r7, #20]
 800f172:	f107 0314 	add.w	r3, r7, #20
 800f176:	4618      	mov	r0, r3
 800f178:	f7fa fd76 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f17c:	4603      	mov	r3, r0
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fb fcb1 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f184:	4603      	mov	r3, r0
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f18a:	f107 0310 	add.w	r3, r7, #16
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fb fca9 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f194:	4603      	mov	r3, r0
 800f196:	edd3 7a00 	vldr	s15, [r3]
 800f19a:	4623      	mov	r3, r4
 800f19c:	eeb0 0a67 	vmov.f32	s0, s15
 800f1a0:	69ba      	ldr	r2, [r7, #24]
 800f1a2:	69f9      	ldr	r1, [r7, #28]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 fb8d 	bl	800f8c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
	  if (__parent == 0)
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d005      	beq.n	800f1bc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa6>
	  __parent--;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	3b01      	subs	r3, #1
 800f1b4:	61fb      	str	r3, [r7, #28]
      while (true)
 800f1b6:	e7d4      	b.n	800f162 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4c>
	return;
 800f1b8:	bf00      	nop
 800f1ba:	e000      	b.n	800f1be <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa8>
	    return;
 800f1bc:	bf00      	nop
    }
 800f1be:	3724      	adds	r7, #36	; 0x24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd90      	pop	{r4, r7, pc}

0800f1c4 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fc f945 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	681c      	ldr	r4, [r3, #0]
 800f1d8:	6838      	ldr	r0, [r7, #0]
 800f1da:	f7fc f940 	bl	800b45e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	429c      	cmp	r4, r3
 800f1e4:	bf34      	ite	cc
 800f1e6:	2301      	movcc	r3, #1
 800f1e8:	2300      	movcs	r3, #0
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd90      	pop	{r4, r7, pc}

0800f1f4 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f1f4:	b5b0      	push	{r4, r5, r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f202:	1d3b      	adds	r3, r7, #4
 800f204:	4618      	mov	r0, r3
 800f206:	f7fa fd2f 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fb fc6a 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f212:	4603      	mov	r3, r0
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800f218:	f107 030c 	add.w	r3, r7, #12
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fa fd23 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f222:	4603      	mov	r3, r0
 800f224:	4618      	mov	r0, r3
 800f226:	f7fb fc5e 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f22a:	4604      	mov	r4, r0
 800f22c:	1d3b      	adds	r3, r7, #4
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fa fd1a 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f234:	4602      	mov	r2, r0
 800f236:	6823      	ldr	r3, [r4, #0]
 800f238:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 800f23a:	f107 020c 	add.w	r2, r7, #12
 800f23e:	f107 0308 	add.w	r3, r7, #8
 800f242:	4611      	mov	r1, r2
 800f244:	4618      	mov	r0, r3
 800f246:	f7fd fbf4 	bl	800ca32 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f24a:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f24c:	f107 0314 	add.w	r3, r7, #20
 800f250:	4618      	mov	r0, r3
 800f252:	f7fb fc48 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f256:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f258:	edd3 7a00 	vldr	s15, [r3]
 800f25c:	462b      	mov	r3, r5
 800f25e:	eeb0 0a67 	vmov.f32	s0, s15
 800f262:	4622      	mov	r2, r4
 800f264:	2100      	movs	r1, #0
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f000 fb2c 	bl	800f8c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 800f26c:	bf00      	nop
 800f26e:	3718      	adds	r7, #24
 800f270:	46bd      	mov	sp, r7
 800f272:	bdb0      	pop	{r4, r5, r7, pc}

0800f274 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	1f1a      	subs	r2, r3, #4
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	601a      	str	r2, [r3, #0]
	return *this;
 800f286:	687b      	ldr	r3, [r7, #4]
      }
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f294:	b590      	push	{r4, r7, lr}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f29e:	1d3b      	adds	r3, r7, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fa fce1 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	463b      	mov	r3, r7
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fa fcdc 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f7fb fc21 	bl	800aafc <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f2ba:	bf00      	nop
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd90      	pop	{r4, r7, pc}

0800f2c2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800f2c2:	b480      	push	{r7}
 800f2c4:	b083      	sub	sp, #12
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f2d8:	b5b0      	push	{r4, r5, r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7fd fb7f 	bl	800c9e8 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	68b8      	ldr	r0, [r7, #8]
 800f2ee:	f7fd fb7b 	bl	800c9e8 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fd fb77 	bl	800c9e8 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	4629      	mov	r1, r5
 800f300:	4620      	mov	r0, r4
 800f302:	f000 fb93 	bl	800fa2c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f306:	4603      	mov	r3, r0
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7fd fb7a 	bl	800ca04 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>
 800f310:	4603      	mov	r3, r0
    }
 800f312:	4618      	mov	r0, r3
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bdb0      	pop	{r4, r5, r7, pc}

0800f31a <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f31a:	b580      	push	{r7, lr}
 800f31c:	ed2d 8b02 	vpush	{d8}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	60f8      	str	r0, [r7, #12]
 800f326:	60b9      	str	r1, [r7, #8]
 800f328:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	ed93 8a00 	vldr	s16, [r3]
 800f330:	1d3b      	adds	r3, r7, #4
 800f332:	4618      	mov	r0, r3
 800f334:	f7fa fc98 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f338:	4603      	mov	r3, r0
 800f33a:	edd3 7a00 	vldr	s15, [r3]
 800f33e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f346:	bf4c      	ite	mi
 800f348:	2301      	movmi	r3, #1
 800f34a:	2300      	movpl	r3, #0
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	4618      	mov	r0, r3
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	ecbd 8b02 	vpop	{d8}
 800f358:	bd80      	pop	{r7, pc}

0800f35a <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 800f35a:	b580      	push	{r7, lr}
 800f35c:	b082      	sub	sp, #8
 800f35e:	af00      	add	r7, sp, #0
 800f360:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800f362:	2100      	movs	r1, #0
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fb71 	bl	800fa4c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4618      	mov	r0, r3
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4618      	mov	r0, r3
 800f380:	370c      	adds	r7, #12
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f38a:	b590      	push	{r4, r7, lr}
 800f38c:	b087      	sub	sp, #28
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	607a      	str	r2, [r7, #4]
 800f396:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f39c:	e012      	b.n	800f3c4 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f39e:	6978      	ldr	r0, [r7, #20]
 800f3a0:	f7fd fc4f 	bl	800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7fd fc4b 	bl	800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 fb55 	bl	800fa62 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3308      	adds	r3, #8
 800f3bc:	60fb      	str	r3, [r7, #12]
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d1e8      	bne.n	800f39e <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800f3cc:	697b      	ldr	r3, [r7, #20]
    }
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	371c      	adds	r7, #28
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}

0800f3d6 <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f3d6:	b480      	push	{r7}
 800f3d8:	b083      	sub	sp, #12
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f3ec:	b590      	push	{r4, r7, lr}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fb4e 	bl	800fa98 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	6838      	ldr	r0, [r7, #0]
 800f400:	f000 fb4a 	bl	800fa98 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f404:	4603      	mov	r3, r0
 800f406:	429c      	cmp	r4, r3
 800f408:	bf0c      	ite	eq
 800f40a:	2301      	moveq	r3, #1
 800f40c:	2300      	movne	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	bd90      	pop	{r4, r7, pc}

0800f418 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4618      	mov	r0, r3
 800f424:	370c      	adds	r7, #12
 800f426:	46bd      	mov	sp, r7
 800f428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42c:	4770      	bx	lr

0800f42e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800f42e:	b590      	push	{r4, r7, lr}
 800f430:	b085      	sub	sp, #20
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff ffec 	bl	800f418 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f440:	4604      	mov	r4, r0
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	4619      	mov	r1, r3
 800f446:	2008      	movs	r0, #8
 800f448:	f7f1 fe52 	bl	80010f0 <_ZnwjPv>
 800f44c:	4603      	mov	r3, r0
 800f44e:	4622      	mov	r2, r4
 800f450:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f454:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800f458:	bf00      	nop
 800f45a:	3714      	adds	r7, #20
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd90      	pop	{r4, r7, pc}

0800f460 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f460:	b580      	push	{r7, lr}
 800f462:	b08a      	sub	sp, #40	; 0x28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f46c:	f107 020c 	add.w	r2, r7, #12
 800f470:	f107 0308 	add.w	r3, r7, #8
 800f474:	4611      	mov	r1, r2
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fc67 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b01      	cmp	r3, #1
 800f480:	bfd4      	ite	le
 800f482:	2301      	movle	r3, #1
 800f484:	2300      	movgt	r3, #0
 800f486:	b2db      	uxtb	r3, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d143      	bne.n	800f514 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb4>
      const _DistanceType __len = __last - __first;
 800f48c:	f107 020c 	add.w	r2, r7, #12
 800f490:	f107 0308 	add.w	r3, r7, #8
 800f494:	4611      	mov	r1, r2
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd fc57 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f49c:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800f49e:	6a3b      	ldr	r3, [r7, #32]
 800f4a0:	3b02      	subs	r3, #2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da00      	bge.n	800f4a8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x48>
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	105b      	asrs	r3, r3, #1
 800f4aa:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f4ac:	f107 030c 	add.w	r3, r7, #12
 800f4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fc66 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	f107 031c 	add.w	r3, r7, #28
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff fbd3 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff fbdb 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	f107 0314 	add.w	r3, r7, #20
 800f4d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4d8:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f4dc:	f107 0314 	add.w	r3, r7, #20
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff fbcf 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	ed93 7a00 	vldr	s14, [r3]
 800f4ee:	edd3 7a01 	vldr	s15, [r3, #4]
 800f4f2:	7813      	ldrb	r3, [r2, #0]
 800f4f4:	eeb0 0a47 	vmov.f32	s0, s14
 800f4f8:	eef0 0a67 	vmov.f32	s1, s15
 800f4fc:	6a3a      	ldr	r2, [r7, #32]
 800f4fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f000 fad5 	bl	800fab0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d005      	beq.n	800f518 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	  __parent--;
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	3b01      	subs	r3, #1
 800f510:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800f512:	e7cb      	b.n	800f4ac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4c>
	return;
 800f514:	bf00      	nop
 800f516:	e000      	b.n	800f51a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xba>
	    return;
 800f518:	bf00      	nop
    }
 800f51a:	3728      	adds	r7, #40	; 0x28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fd fc4a 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f530:	4603      	mov	r3, r0
 800f532:	681c      	ldr	r4, [r3, #0]
 800f534:	6838      	ldr	r0, [r7, #0]
 800f536:	f7fd fc45 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f53a:	4603      	mov	r3, r0
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429c      	cmp	r4, r3
 800f540:	bf34      	ite	cc
 800f542:	2301      	movcc	r3, #1
 800f544:	2300      	movcs	r3, #0
 800f546:	b2db      	uxtb	r3, r3
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd90      	pop	{r4, r7, pc}

0800f550 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f550:	b590      	push	{r4, r7, lr}
 800f552:	b087      	sub	sp, #28
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f55e:	1d3b      	adds	r3, r7, #4
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff fb83 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f566:	4603      	mov	r3, r0
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff fb8b 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f56e:	4602      	mov	r2, r0
 800f570:	f107 0310 	add.w	r3, r7, #16
 800f574:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f578:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800f57c:	f107 030c 	add.w	r3, r7, #12
 800f580:	4618      	mov	r0, r3
 800f582:	f7ff fb73 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f586:	4603      	mov	r3, r0
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff fb7b 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f58e:	4604      	mov	r4, r0
 800f590:	1d3b      	adds	r3, r7, #4
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff fb6a 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f598:	4603      	mov	r3, r0
 800f59a:	4622      	mov	r2, r4
 800f59c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5a0:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800f5a4:	f107 020c 	add.w	r2, r7, #12
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fd fbcb 	bl	800cd4a <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f5b4:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f5b6:	f107 0310 	add.w	r3, r7, #16
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fb62 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f5c0:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f5c2:	683a      	ldr	r2, [r7, #0]
 800f5c4:	ed93 7a00 	vldr	s14, [r3]
 800f5c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800f5cc:	7813      	ldrb	r3, [r2, #0]
 800f5ce:	eeb0 0a47 	vmov.f32	s0, s14
 800f5d2:	eef0 0a67 	vmov.f32	s1, s15
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	2100      	movs	r1, #0
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f000 fa68 	bl	800fab0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 800f5e0:	bf00      	nop
 800f5e2:	371c      	adds	r7, #28
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd90      	pop	{r4, r7, pc}

0800f5e8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f1a3 0208 	sub.w	r2, r3, #8
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	601a      	str	r2, [r3, #0]
	return *this;
 800f5fc:	687b      	ldr	r3, [r7, #4]
      }
 800f5fe:	4618      	mov	r0, r3
 800f600:	370c      	adds	r7, #12
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f60a:	b590      	push	{r4, r7, lr}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f614:	1d3b      	adds	r3, r7, #4
 800f616:	4618      	mov	r0, r3
 800f618:	f7ff fb28 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f61c:	4604      	mov	r4, r0
 800f61e:	463b      	mov	r3, r7
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fb23 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f626:	4603      	mov	r3, r0
 800f628:	4619      	mov	r1, r3
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 fb05 	bl	800fc3a <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800f630:	bf00      	nop
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	bd90      	pop	{r4, r7, pc}

0800f638 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
    __miter_base(_Iterator __it)
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4618      	mov	r0, r3
 800f644:	370c      	adds	r7, #12
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f64e:	b5b0      	push	{r4, r5, r7, lr}
 800f650:	b084      	sub	sp, #16
 800f652:	af00      	add	r7, sp, #0
 800f654:	60f8      	str	r0, [r7, #12]
 800f656:	60b9      	str	r1, [r7, #8]
 800f658:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f65a:	68f8      	ldr	r0, [r7, #12]
 800f65c:	f000 fb14 	bl	800fc88 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f660:	4604      	mov	r4, r0
 800f662:	68b8      	ldr	r0, [r7, #8]
 800f664:	f000 fb10 	bl	800fc88 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f668:	4605      	mov	r5, r0
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fb0c 	bl	800fc88 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
 800f674:	4629      	mov	r1, r5
 800f676:	4620      	mov	r0, r4
 800f678:	f000 fb14 	bl	800fca4 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800f67c:	4603      	mov	r3, r0
 800f67e:	4619      	mov	r1, r3
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 fb1f 	bl	800fcc4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800f686:	4603      	mov	r3, r0
    }
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bdb0      	pop	{r4, r5, r7, pc}

0800f690 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
 800f6ae:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fd fbaa 	bl	800ce0c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800f6c2:	b590      	push	{r4, r7, lr}
 800f6c4:	b085      	sub	sp, #20
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 800f6ce:	68fc      	ldr	r4, [r7, #12]
 800f6d0:	1d3b      	adds	r3, r7, #4
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7ff faca 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	f7f4 f98c 	bl	80039fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd90      	pop	{r4, r7, pc}

0800f6ee <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b084      	sub	sp, #16
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f6fa:	68b8      	ldr	r0, [r7, #8]
 800f6fc:	f7fb f9f3 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f700:	4603      	mov	r3, r0
 800f702:	461a      	mov	r2, r3
 800f704:	68f9      	ldr	r1, [r7, #12]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f7fd fd42 	bl	800d190 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f70c:	68b8      	ldr	r0, [r7, #8]
 800f70e:	f7fd f943 	bl	800c998 <_ZSt11__addressofIfEPT_RS0_>
 800f712:	4603      	mov	r3, r0
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7fd f949 	bl	800c9ae <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
    }
 800f71c:	bf00      	nop
 800f71e:	3710      	adds	r7, #16
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4618      	mov	r0, r3
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4618      	mov	r0, r3
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f752:	b590      	push	{r4, r7, lr}
 800f754:	b085      	sub	sp, #20
 800f756:	af00      	add	r7, sp, #0
 800f758:	60f8      	str	r0, [r7, #12]
 800f75a:	60b9      	str	r1, [r7, #8]
 800f75c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f75e:	68b8      	ldr	r0, [r7, #8]
 800f760:	f7ff ffec 	bl	800f73c <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f764:	4603      	mov	r3, r0
 800f766:	681c      	ldr	r4, [r3, #0]
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f7f1 fcfb 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800f76e:	4603      	mov	r3, r0
 800f770:	4619      	mov	r1, r3
 800f772:	2004      	movs	r0, #4
 800f774:	f7f1 fcbc 	bl	80010f0 <_ZnwjPv>
 800f778:	4603      	mov	r3, r0
 800f77a:	601c      	str	r4, [r3, #0]
	  }
 800f77c:	bf00      	nop
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	bd90      	pop	{r4, r7, pc}

0800f784 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f7f1 fce9 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800f792:	4603      	mov	r3, r0
 800f794:	4618      	mov	r0, r3
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}

0800f79c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr

0800f7b2 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f7b2:	b590      	push	{r4, r7, lr}
 800f7b4:	b085      	sub	sp, #20
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	60f8      	str	r0, [r7, #12]
 800f7ba:	60b9      	str	r1, [r7, #8]
 800f7bc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f7be:	68b8      	ldr	r0, [r7, #8]
 800f7c0:	f7ff ffec 	bl	800f79c <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f7f1 fccc 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	2004      	movs	r0, #4
 800f7d2:	f7f1 fc8d 	bl	80010f0 <_ZnwjPv>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	6823      	ldr	r3, [r4, #0]
 800f7da:	6013      	str	r3, [r2, #0]
	  }
 800f7dc:	bf00      	nop
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd90      	pop	{r4, r7, pc}

0800f7e4 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7f1 fcb9 	bl	8001164 <_ZNSt9_Any_data9_M_accessEv>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f812:	b480      	push	{r7}
 800f814:	b083      	sub	sp, #12
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4618      	mov	r0, r3
 800f81e:	370c      	adds	r7, #12
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr

0800f828 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 fa5e 	bl	800fcf2 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800f836:	4603      	mov	r3, r0
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	370c      	adds	r7, #12
 800f84e:	46bd      	mov	sp, r7
 800f850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f854:	4770      	bx	lr

0800f856 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f856:	b480      	push	{r7}
 800f858:	b083      	sub	sp, #12
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	4618      	mov	r0, r3
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f8ae:	b480      	push	{r7}
 800f8b0:	b083      	sub	sp, #12
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	370c      	adds	r7, #12
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr

0800f8c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800f8c4:	b5b0      	push	{r4, r5, r7, lr}
 800f8c6:	b08e      	sub	sp, #56	; 0x38
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6178      	str	r0, [r7, #20]
 800f8cc:	6139      	str	r1, [r7, #16]
 800f8ce:	60fa      	str	r2, [r7, #12]
 800f8d0:	ed87 0a02 	vstr	s0, [r7, #8]
 800f8d4:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800f8de:	e042      	b.n	800f966 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	005b      	lsls	r3, r3, #1
 800f8e6:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800f8e8:	f107 0314 	add.w	r3, r7, #20
 800f8ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fe f80c 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f8:	1e5a      	subs	r2, r3, #1
 800f8fa:	f107 0314 	add.w	r3, r7, #20
 800f8fe:	4611      	mov	r1, r2
 800f900:	4618      	mov	r0, r3
 800f902:	f7fe f803 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f906:	4602      	mov	r2, r0
 800f908:	1d3b      	adds	r3, r7, #4
 800f90a:	4621      	mov	r1, r4
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fe35 	bl	800e57c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d002      	beq.n	800f91e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x5a>
	    __secondChild--;
 800f918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91a:	3b01      	subs	r3, #1
 800f91c:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800f91e:	f107 0314 	add.w	r3, r7, #20
 800f922:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f924:	4618      	mov	r0, r3
 800f926:	f7fd fff1 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f92a:	4603      	mov	r3, r0
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	f107 0320 	add.w	r3, r7, #32
 800f932:	4618      	mov	r0, r3
 800f934:	f7fa f998 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f938:	4603      	mov	r3, r0
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fb f8d3 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f940:	4604      	mov	r4, r0
 800f942:	f107 0314 	add.w	r3, r7, #20
 800f946:	6939      	ldr	r1, [r7, #16]
 800f948:	4618      	mov	r0, r3
 800f94a:	f7fd ffdf 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f94e:	4603      	mov	r3, r0
 800f950:	627b      	str	r3, [r7, #36]	; 0x24
 800f952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f956:	4618      	mov	r0, r3
 800f958:	f7fa f986 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f95c:	4602      	mov	r2, r0
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 800f962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f964:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	3b01      	subs	r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da00      	bge.n	800f970 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xac>
 800f96e:	3301      	adds	r3, #1
 800f970:	105b      	asrs	r3, r3, #1
 800f972:	461a      	mov	r2, r3
 800f974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f976:	4293      	cmp	r3, r2
 800f978:	dbb2      	blt.n	800f8e0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f003 0301 	and.w	r3, r3, #1
 800f980:	2b00      	cmp	r3, #0
 800f982:	d134      	bne.n	800f9ee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3b02      	subs	r3, #2
 800f988:	2b00      	cmp	r3, #0
 800f98a:	da00      	bge.n	800f98e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xca>
 800f98c:	3301      	adds	r3, #1
 800f98e:	105b      	asrs	r3, r3, #1
 800f990:	461a      	mov	r2, r3
 800f992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f994:	4293      	cmp	r3, r2
 800f996:	d12a      	bne.n	800f9ee <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
	  __secondChild = 2 * (__secondChild + 1);
 800f998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f99a:	3301      	adds	r3, #1
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800f9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9a2:	1e5a      	subs	r2, r3, #1
 800f9a4:	f107 0314 	add.w	r3, r7, #20
 800f9a8:	4611      	mov	r1, r2
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fd ffae 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fa f955 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fb f890 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	f107 0314 	add.w	r3, r7, #20
 800f9cc:	6939      	ldr	r1, [r7, #16]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fd ff9c 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fa f943 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	6823      	ldr	r3, [r4, #0]
 800f9e6:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 800f9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800f9ee:	1d3b      	adds	r3, r7, #4
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 f989 	bl	800fd08 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800f9f6:	f107 031c 	add.w	r3, r7, #28
 800f9fa:	4629      	mov	r1, r5
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f1 fb8b 	bl	8001118 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fa02:	f107 0308 	add.w	r3, r7, #8
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fb f86d 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fa0c:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fa0e:	edd3 7a00 	vldr	s15, [r3]
 800fa12:	f107 031c 	add.w	r3, r7, #28
 800fa16:	eeb0 0a67 	vmov.f32	s0, s15
 800fa1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa1c:	6939      	ldr	r1, [r7, #16]
 800fa1e:	6978      	ldr	r0, [r7, #20]
 800fa20:	f000 f97d 	bl	800fd1e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800fa24:	bf00      	nop
 800fa26:	3738      	adds	r7, #56	; 0x38
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bdb0      	pop	{r4, r5, r7, pc}

0800fa2c <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	68b9      	ldr	r1, [r7, #8]
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f000 f9dd 	bl	800fdfc <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800fa42:	4603      	mov	r3, r0
 800fa44:	4618      	mov	r0, r3
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800fa4c:	b40f      	push	{r0, r1, r2, r3}
 800fa4e:	b480      	push	{r7}
 800fa50:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800fa52:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800fa56:	4618      	mov	r0, r3
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	b004      	add	sp, #16
 800fa60:	4770      	bx	lr

0800fa62 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b084      	sub	sp, #16
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fa6e:	68b8      	ldr	r0, [r7, #8]
 800fa70:	f7ff f908 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7fe ff8e 	bl	800e99c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fa80:	68b8      	ldr	r0, [r7, #8]
 800fa82:	f7fd f8de 	bl	800cc42 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800fa86:	4603      	mov	r3, r0
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7fd f8e4 	bl	800cc58 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800fa90:	bf00      	nop
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4618      	mov	r0, r3
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fab0:	b590      	push	{r4, r7, lr}
 800fab2:	b08f      	sub	sp, #60	; 0x3c
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6178      	str	r0, [r7, #20]
 800fab8:	6139      	str	r1, [r7, #16]
 800faba:	60fa      	str	r2, [r7, #12]
 800fabc:	eeb0 7a40 	vmov.f32	s14, s0
 800fac0:	eef0 7a60 	vmov.f32	s15, s1
 800fac4:	703b      	strb	r3, [r7, #0]
 800fac6:	ed87 7a01 	vstr	s14, [r7, #4]
 800faca:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800fad6:	e045      	b.n	800fb64 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 800fad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fada:	3301      	adds	r3, #1
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800fae0:	f107 0314 	add.w	r3, r7, #20
 800fae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fe f94c 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800faec:	4604      	mov	r4, r0
 800faee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf0:	1e5a      	subs	r2, r3, #1
 800faf2:	f107 0314 	add.w	r3, r7, #20
 800faf6:	4611      	mov	r1, r2
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe f943 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fafe:	4602      	mov	r2, r0
 800fb00:	463b      	mov	r3, r7
 800fb02:	4621      	mov	r1, r4
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fe ffcf 	bl	800eaa8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d002      	beq.n	800fb16 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x66>
	    __secondChild--;
 800fb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb12:	3b01      	subs	r3, #1
 800fb14:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fb16:	f107 0314 	add.w	r3, r7, #20
 800fb1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe f931 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fb22:	4603      	mov	r3, r0
 800fb24:	623b      	str	r3, [r7, #32]
 800fb26:	f107 0320 	add.w	r3, r7, #32
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7ff f89e 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fb30:	4603      	mov	r3, r0
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff f8a6 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fb38:	4604      	mov	r4, r0
 800fb3a:	f107 0314 	add.w	r3, r7, #20
 800fb3e:	6939      	ldr	r1, [r7, #16]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe f91f 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fb46:	4603      	mov	r3, r0
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24
 800fb4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff f88c 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fb54:	4603      	mov	r3, r0
 800fb56:	4622      	mov	r2, r4
 800fb58:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb5c:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800fb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb62:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	3b01      	subs	r3, #1
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	da00      	bge.n	800fb6e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xbe>
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	105b      	asrs	r3, r3, #1
 800fb70:	461a      	mov	r2, r3
 800fb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb74:	4293      	cmp	r3, r2
 800fb76:	dbaf      	blt.n	800fad8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x28>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d137      	bne.n	800fbf2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3b02      	subs	r3, #2
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	da00      	bge.n	800fb8c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xdc>
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	105b      	asrs	r3, r3, #1
 800fb8e:	461a      	mov	r2, r3
 800fb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d12d      	bne.n	800fbf2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
	  __secondChild = 2 * (__secondChild + 1);
 800fb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb98:	3301      	adds	r3, #1
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba0:	1e5a      	subs	r2, r3, #1
 800fba2:	f107 0314 	add.w	r3, r7, #20
 800fba6:	4611      	mov	r1, r2
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fe f8eb 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff f858 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff f860 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	f107 0314 	add.w	r3, r7, #20
 800fbca:	6939      	ldr	r1, [r7, #16]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe f8d9 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7ff f846 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbe8:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800fbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fbf2:	463b      	mov	r3, r7
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fd4b 	bl	800f690 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	f107 031c 	add.w	r3, r7, #28
 800fc00:	4611      	mov	r1, r2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 f90a 	bl	800fe1c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fc08:	1d3b      	adds	r3, r7, #4
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7ff f83a 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc10:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fc12:	f107 021c 	add.w	r2, r7, #28
 800fc16:	ed93 7a00 	vldr	s14, [r3]
 800fc1a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	eeb0 0a47 	vmov.f32	s0, s14
 800fc24:	eef0 0a67 	vmov.f32	s1, s15
 800fc28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2a:	6939      	ldr	r1, [r7, #16]
 800fc2c:	6978      	ldr	r0, [r7, #20]
 800fc2e:	f000 f903 	bl	800fe38 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 800fc32:	bf00      	nop
 800fc34:	373c      	adds	r7, #60	; 0x3c
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd90      	pop	{r4, r7, pc}

0800fc3a <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff f81d 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	f107 0308 	add.w	r3, r7, #8
 800fc50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc54:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800fc58:	6838      	ldr	r0, [r7, #0]
 800fc5a:	f7ff f813 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc66:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800fc6a:	f107 0308 	add.w	r3, r7, #8
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff f808 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc74:	4602      	mov	r2, r0
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc7c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fc80:	bf00      	nop
 800fc82:	3710      	adds	r7, #16
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fc90:	1d3b      	adds	r3, r7, #4
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd f896 	bl	800cdc4 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	68b9      	ldr	r1, [r7, #8]
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f000 f938 	bl	800ff2a <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3710      	adds	r7, #16
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7ff ffda 	bl	800fc88 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	1a9b      	subs	r3, r3, r2
 800fcda:	10db      	asrs	r3, r3, #3
 800fcdc:	461a      	mov	r2, r3
 800fcde:	1d3b      	adds	r3, r7, #4
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe f84e 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fce8:	4603      	mov	r3, r0
 800fcea:	4618      	mov	r0, r3
 800fcec:	3708      	adds	r7, #8
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fcf2:	b480      	push	{r7}
 800fcf4:	b083      	sub	sp, #12
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	6078      	str	r0, [r7, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4618      	mov	r0, r3
 800fd14:	370c      	adds	r7, #12
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fd1e:	b590      	push	{r4, r7, lr}
 800fd20:	b08b      	sub	sp, #44	; 0x2c
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6178      	str	r0, [r7, #20]
 800fd26:	6139      	str	r1, [r7, #16]
 800fd28:	60fa      	str	r2, [r7, #12]
 800fd2a:	ed87 0a02 	vstr	s0, [r7, #8]
 800fd2e:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	3b01      	subs	r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	da00      	bge.n	800fd3a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x1c>
 800fd38:	3301      	adds	r3, #1
 800fd3a:	105b      	asrs	r3, r3, #1
 800fd3c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fd3e:	e02a      	b.n	800fd96 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x78>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fd40:	f107 0314 	add.w	r3, r7, #20
 800fd44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fd fde0 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	61bb      	str	r3, [r7, #24]
 800fd50:	f107 0318 	add.w	r3, r7, #24
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7f9 ff87 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7fa fec2 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fd62:	4604      	mov	r4, r0
 800fd64:	f107 0314 	add.w	r3, r7, #20
 800fd68:	6939      	ldr	r1, [r7, #16]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fd fdce 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fd70:	4603      	mov	r3, r0
 800fd72:	61fb      	str	r3, [r7, #28]
 800fd74:	f107 031c 	add.w	r3, r7, #28
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7f9 ff75 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	6823      	ldr	r3, [r4, #0]
 800fd82:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	da00      	bge.n	800fd92 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x74>
 800fd90:	3301      	adds	r3, #1
 800fd92:	105b      	asrs	r3, r3, #1
 800fd94:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fd96:	693a      	ldr	r2, [r7, #16]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	dd11      	ble.n	800fdc2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800fd9e:	f107 0314 	add.w	r3, r7, #20
 800fda2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fdb1 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fdaa:	4601      	mov	r1, r0
 800fdac:	f107 0308 	add.w	r3, r7, #8
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 f8c9 	bl	800ff4a <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d001      	beq.n	800fdc2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e000      	b.n	800fdc4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa6>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1bb      	bne.n	800fd40 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x22>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800fdc8:	f107 0308 	add.w	r3, r7, #8
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fa fe8a 	bl	800aae6 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	f107 0314 	add.w	r3, r7, #20
 800fdd8:	6939      	ldr	r1, [r7, #16]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fd fd96 	bl	800d90c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fde0:	4603      	mov	r3, r0
 800fde2:	623b      	str	r3, [r7, #32]
 800fde4:	f107 0320 	add.w	r3, r7, #32
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7f9 ff3d 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	6013      	str	r3, [r2, #0]
    }
 800fdf4:	bf00      	nop
 800fdf6:	372c      	adds	r7, #44	; 0x2c
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd90      	pop	{r4, r7, pc}

0800fdfc <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	68b9      	ldr	r1, [r7, #8]
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 f8b9 	bl	800ff84 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800fe12:	4603      	mov	r3, r0
    }
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fc ffef 	bl	800ce0c <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b08b      	sub	sp, #44	; 0x2c
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6178      	str	r0, [r7, #20]
 800fe40:	6139      	str	r1, [r7, #16]
 800fe42:	60fa      	str	r2, [r7, #12]
 800fe44:	eeb0 7a40 	vmov.f32	s14, s0
 800fe48:	eef0 7a60 	vmov.f32	s15, s1
 800fe4c:	603b      	str	r3, [r7, #0]
 800fe4e:	ed87 7a01 	vstr	s14, [r7, #4]
 800fe52:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	da00      	bge.n	800fe60 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x28>
 800fe5e:	3301      	adds	r3, #1
 800fe60:	105b      	asrs	r3, r3, #1
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fe64:	e02d      	b.n	800fec2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x8a>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fe66:	f107 0314 	add.w	r3, r7, #20
 800fe6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fd ff89 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fe72:	4603      	mov	r3, r0
 800fe74:	61bb      	str	r3, [r7, #24]
 800fe76:	f107 0318 	add.w	r3, r7, #24
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fe fef6 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fe80:	4603      	mov	r3, r0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fefe 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe88:	4604      	mov	r4, r0
 800fe8a:	f107 0314 	add.w	r3, r7, #20
 800fe8e:	6939      	ldr	r1, [r7, #16]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fd ff77 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fe96:	4603      	mov	r3, r0
 800fe98:	61fb      	str	r3, [r7, #28]
 800fe9a:	f107 031c 	add.w	r3, r7, #28
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe fee4 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fea4:	4603      	mov	r3, r0
 800fea6:	4622      	mov	r2, r4
 800fea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800feac:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 800feb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb2:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	3b01      	subs	r3, #1
 800feb8:	2b00      	cmp	r3, #0
 800feba:	da00      	bge.n	800febe <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x86>
 800febc:	3301      	adds	r3, #1
 800febe:	105b      	asrs	r3, r3, #1
 800fec0:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fec2:	693a      	ldr	r2, [r7, #16]
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	dd10      	ble.n	800feec <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 800feca:	f107 0314 	add.w	r3, r7, #20
 800fece:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fd ff57 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fed6:	4601      	mov	r1, r0
 800fed8:	1d3b      	adds	r3, r7, #4
 800feda:	461a      	mov	r2, r3
 800fedc:	6838      	ldr	r0, [r7, #0]
 800fede:	f000 f873 	bl	800ffc8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 800fee8:	2301      	movs	r3, #1
 800feea:	e000      	b.n	800feee <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
 800feec:	2300      	movs	r3, #0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1b9      	bne.n	800fe66 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800fef2:	1d3b      	adds	r3, r7, #4
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe fec5 	bl	800ec84 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fefa:	4604      	mov	r4, r0
 800fefc:	f107 0314 	add.w	r3, r7, #20
 800ff00:	6939      	ldr	r1, [r7, #16]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fd ff3e 	bl	800dd84 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	623b      	str	r3, [r7, #32]
 800ff0c:	f107 0320 	add.w	r3, r7, #32
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe feab 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ff16:	4603      	mov	r3, r0
 800ff18:	4622      	mov	r2, r4
 800ff1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ff22:	bf00      	nop
 800ff24:	372c      	adds	r7, #44	; 0x2c
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd90      	pop	{r4, r7, pc}

0800ff2a <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	60f8      	str	r0, [r7, #12]
 800ff32:	60b9      	str	r1, [r7, #8]
 800ff34:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	68b9      	ldr	r1, [r7, #8]
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f000 f85b 	bl	800fff6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 800ff40:	4603      	mov	r3, r0
    }
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	60b9      	str	r1, [r7, #8]
 800ff54:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800ff56:	f107 0308 	add.w	r3, r7, #8
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7f9 fe84 	bl	8009c68 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff60:	4603      	mov	r3, r0
 800ff62:	ed93 7a00 	vldr	s14, [r3]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	edd3 7a00 	vldr	s15, [r3]
 800ff6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff74:	bf4c      	ite	mi
 800ff76:	2301      	movmi	r3, #1
 800ff78:	2300      	movpl	r3, #0
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	109b      	asrs	r3, r3, #2
 800ff98:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00a      	beq.n	800ffb6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	425b      	negs	r3, r3
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	18d0      	adds	r0, r2, r3
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	461a      	mov	r2, r3
 800ffb0:	68f9      	ldr	r1, [r7, #12]
 800ffb2:	f00d f92d 	bl	801d210 <memmove>
	  return __result - _Num;
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	425b      	negs	r3, r3
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	4413      	add	r3, r2
	}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 800ffc8:	b590      	push	{r4, r7, lr}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 800ffd4:	68fc      	ldr	r4, [r7, #12]
 800ffd6:	f107 0308 	add.w	r3, r7, #8
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fe fe46 	bl	800ec6c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7f3 fd08 	bl	80039fc <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800ffec:	4603      	mov	r3, r0
 800ffee:	4618      	mov	r0, r3
 800fff0:	3714      	adds	r7, #20
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd90      	pop	{r4, r7, pc}

0800fff6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b086      	sub	sp, #24
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010002:	68ba      	ldr	r2, [r7, #8]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	10db      	asrs	r3, r3, #3
 801000a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00a      	beq.n	8010028 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	425b      	negs	r3, r3
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	18d0      	adds	r0, r2, r3
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	00db      	lsls	r3, r3, #3
 8010020:	461a      	mov	r2, r3
 8010022:	68f9      	ldr	r1, [r7, #12]
 8010024:	f00d f8f4 	bl	801d210 <memmove>
	  return __result - _Num;
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	425b      	negs	r3, r3
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	4413      	add	r3, r2
	}
 8010032:	4618      	mov	r0, r3
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d108      	bne.n	801005e <_Z41__static_initialization_and_destruction_0ii+0x22>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010052:	4293      	cmp	r3, r2
 8010054:	d103      	bne.n	801005e <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365511_0 = ei_impulse_handle_t( &impulse_365511_0 );
 8010056:	4909      	ldr	r1, [pc, #36]	; (801007c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010058:	4809      	ldr	r0, [pc, #36]	; (8010080 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 801005a:	f7f2 ff21 	bl	8002ea0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d107      	bne.n	8010074 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801006a:	4293      	cmp	r3, r2
 801006c:	d102      	bne.n	8010074 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801006e:	4804      	ldr	r0, [pc, #16]	; (8010080 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010070:	f7f7 fa77 	bl	8007562 <_ZN19ei_impulse_handle_tD1Ev>
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	08022f18 	.word	0x08022f18
 8010080:	20001298 	.word	0x20001298

08010084 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8010084:	b580      	push	{r7, lr}
 8010086:	af00      	add	r7, sp, #0
 8010088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801008c:	2001      	movs	r0, #1
 801008e:	f7ff ffd5 	bl	801003c <_Z41__static_initialization_and_destruction_0ii>
 8010092:	bd80      	pop	{r7, pc}

08010094 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
 8010098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801009c:	2000      	movs	r0, #0
 801009e:	f7ff ffcd 	bl	801003c <_Z41__static_initialization_and_destruction_0ii>
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80100aa:	4b0f      	ldr	r3, [pc, #60]	; (80100e8 <HAL_MspInit+0x44>)
 80100ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ae:	4a0e      	ldr	r2, [pc, #56]	; (80100e8 <HAL_MspInit+0x44>)
 80100b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100b4:	6413      	str	r3, [r2, #64]	; 0x40
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <HAL_MspInit+0x44>)
 80100b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100be:	607b      	str	r3, [r7, #4]
 80100c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80100c2:	4b09      	ldr	r3, [pc, #36]	; (80100e8 <HAL_MspInit+0x44>)
 80100c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c6:	4a08      	ldr	r2, [pc, #32]	; (80100e8 <HAL_MspInit+0x44>)
 80100c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100cc:	6453      	str	r3, [r2, #68]	; 0x44
 80100ce:	4b06      	ldr	r3, [pc, #24]	; (80100e8 <HAL_MspInit+0x44>)
 80100d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100d6:	603b      	str	r3, [r7, #0]
 80100d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80100da:	bf00      	nop
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop
 80100e8:	40023800 	.word	0x40023800

080100ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b0ac      	sub	sp, #176	; 0xb0
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80100f8:	2200      	movs	r2, #0
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	605a      	str	r2, [r3, #4]
 80100fe:	609a      	str	r2, [r3, #8]
 8010100:	60da      	str	r2, [r3, #12]
 8010102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010104:	f107 0318 	add.w	r3, r7, #24
 8010108:	2284      	movs	r2, #132	; 0x84
 801010a:	2100      	movs	r1, #0
 801010c:	4618      	mov	r0, r3
 801010e:	f00d f899 	bl	801d244 <memset>
  if(huart->Instance==USART1)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a32      	ldr	r2, [pc, #200]	; (80101e0 <HAL_UART_MspInit+0xf4>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d15c      	bne.n	80101d6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801011c:	2340      	movs	r3, #64	; 0x40
 801011e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010120:	2300      	movs	r3, #0
 8010122:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010124:	f107 0318 	add.w	r3, r7, #24
 8010128:	4618      	mov	r0, r3
 801012a:	f001 f943 	bl	80113b4 <HAL_RCCEx_PeriphCLKConfig>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8010134:	f7f9 fc2c 	bl	8009990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010138:	4b2a      	ldr	r3, [pc, #168]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 801013a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801013c:	4a29      	ldr	r2, [pc, #164]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 801013e:	f043 0310 	orr.w	r3, r3, #16
 8010142:	6453      	str	r3, [r2, #68]	; 0x44
 8010144:	4b27      	ldr	r3, [pc, #156]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 8010146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010148:	f003 0310 	and.w	r3, r3, #16
 801014c:	617b      	str	r3, [r7, #20]
 801014e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010150:	4b24      	ldr	r3, [pc, #144]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 8010152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010154:	4a23      	ldr	r2, [pc, #140]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 8010156:	f043 0302 	orr.w	r3, r3, #2
 801015a:	6313      	str	r3, [r2, #48]	; 0x30
 801015c:	4b21      	ldr	r3, [pc, #132]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 801015e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010160:	f003 0302 	and.w	r3, r3, #2
 8010164:	613b      	str	r3, [r7, #16]
 8010166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010168:	4b1e      	ldr	r3, [pc, #120]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 801016a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801016c:	4a1d      	ldr	r2, [pc, #116]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 801016e:	f043 0301 	orr.w	r3, r3, #1
 8010172:	6313      	str	r3, [r2, #48]	; 0x30
 8010174:	4b1b      	ldr	r3, [pc, #108]	; (80101e4 <HAL_UART_MspInit+0xf8>)
 8010176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	60fb      	str	r3, [r7, #12]
 801017e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8010180:	2380      	movs	r3, #128	; 0x80
 8010182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010186:	2302      	movs	r3, #2
 8010188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801018c:	2300      	movs	r3, #0
 801018e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010192:	2300      	movs	r3, #0
 8010194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010198:	2307      	movs	r3, #7
 801019a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 801019e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80101a2:	4619      	mov	r1, r3
 80101a4:	4810      	ldr	r0, [pc, #64]	; (80101e8 <HAL_UART_MspInit+0xfc>)
 80101a6:	f000 fab5 	bl	8010714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80101aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101b2:	2302      	movs	r3, #2
 80101b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101be:	2300      	movs	r3, #0
 80101c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80101c4:	2307      	movs	r3, #7
 80101c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80101ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80101ce:	4619      	mov	r1, r3
 80101d0:	4806      	ldr	r0, [pc, #24]	; (80101ec <HAL_UART_MspInit+0x100>)
 80101d2:	f000 fa9f 	bl	8010714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80101d6:	bf00      	nop
 80101d8:	37b0      	adds	r7, #176	; 0xb0
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	40011000 	.word	0x40011000
 80101e4:	40023800 	.word	0x40023800
 80101e8:	40020400 	.word	0x40020400
 80101ec:	40020000 	.word	0x40020000

080101f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80101f0:	b480      	push	{r7}
 80101f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80101f4:	e7fe      	b.n	80101f4 <NMI_Handler+0x4>

080101f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80101f6:	b480      	push	{r7}
 80101f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80101fa:	e7fe      	b.n	80101fa <HardFault_Handler+0x4>

080101fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010200:	e7fe      	b.n	8010200 <MemManage_Handler+0x4>

08010202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010202:	b480      	push	{r7}
 8010204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010206:	e7fe      	b.n	8010206 <BusFault_Handler+0x4>

08010208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010208:	b480      	push	{r7}
 801020a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801020c:	e7fe      	b.n	801020c <UsageFault_Handler+0x4>

0801020e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801020e:	b480      	push	{r7}
 8010210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010212:	bf00      	nop
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801021c:	b480      	push	{r7}
 801021e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010220:	bf00      	nop
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801022a:	b480      	push	{r7}
 801022c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801022e:	bf00      	nop
 8010230:	46bd      	mov	sp, r7
 8010232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010236:	4770      	bx	lr

08010238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801023c:	f000 f940 	bl	80104c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010240:	bf00      	nop
 8010242:	bd80      	pop	{r7, pc}

08010244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010244:	b480      	push	{r7}
 8010246:	af00      	add	r7, sp, #0
  return 1;
 8010248:	2301      	movs	r3, #1
}
 801024a:	4618      	mov	r0, r3
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <_kill>:

int _kill(int pid, int sig)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801025e:	f00d f8a5 	bl	801d3ac <__errno>
 8010262:	4603      	mov	r3, r0
 8010264:	2216      	movs	r2, #22
 8010266:	601a      	str	r2, [r3, #0]
  return -1;
 8010268:	f04f 33ff 	mov.w	r3, #4294967295
}
 801026c:	4618      	mov	r0, r3
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <_exit>:

void _exit (int status)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801027c:	f04f 31ff 	mov.w	r1, #4294967295
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7ff ffe7 	bl	8010254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010286:	e7fe      	b.n	8010286 <_exit+0x12>

08010288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010294:	2300      	movs	r3, #0
 8010296:	617b      	str	r3, [r7, #20]
 8010298:	e00a      	b.n	80102b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801029a:	f3af 8000 	nop.w
 801029e:	4601      	mov	r1, r0
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	60ba      	str	r2, [r7, #8]
 80102a6:	b2ca      	uxtb	r2, r1
 80102a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	3301      	adds	r3, #1
 80102ae:	617b      	str	r3, [r7, #20]
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	dbf0      	blt.n	801029a <_read+0x12>
  }

  return len;
 80102b8:	687b      	ldr	r3, [r7, #4]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b086      	sub	sp, #24
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	60f8      	str	r0, [r7, #12]
 80102ca:	60b9      	str	r1, [r7, #8]
 80102cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80102ce:	2300      	movs	r3, #0
 80102d0:	617b      	str	r3, [r7, #20]
 80102d2:	e009      	b.n	80102e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	1c5a      	adds	r2, r3, #1
 80102d8:	60ba      	str	r2, [r7, #8]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	4618      	mov	r0, r3
 80102de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	3301      	adds	r3, #1
 80102e6:	617b      	str	r3, [r7, #20]
 80102e8:	697a      	ldr	r2, [r7, #20]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	dbf1      	blt.n	80102d4 <_write+0x12>
  }
  return len;
 80102f0:	687b      	ldr	r3, [r7, #4]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}

080102fa <_close>:

int _close(int file)
{
 80102fa:	b480      	push	{r7}
 80102fc:	b083      	sub	sp, #12
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010306:	4618      	mov	r0, r3
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010312:	b480      	push	{r7}
 8010314:	b083      	sub	sp, #12
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
 801031a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010322:	605a      	str	r2, [r3, #4]
  return 0;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <_isatty>:

int _isatty(int file)
{
 8010332:	b480      	push	{r7}
 8010334:	b083      	sub	sp, #12
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801033a:	2301      	movs	r3, #1
}
 801033c:	4618      	mov	r0, r3
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010348:	b480      	push	{r7}
 801034a:	b085      	sub	sp, #20
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b086      	sub	sp, #24
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801036c:	4a14      	ldr	r2, [pc, #80]	; (80103c0 <_sbrk+0x5c>)
 801036e:	4b15      	ldr	r3, [pc, #84]	; (80103c4 <_sbrk+0x60>)
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010378:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <_sbrk+0x64>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d102      	bne.n	8010386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010380:	4b11      	ldr	r3, [pc, #68]	; (80103c8 <_sbrk+0x64>)
 8010382:	4a12      	ldr	r2, [pc, #72]	; (80103cc <_sbrk+0x68>)
 8010384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010386:	4b10      	ldr	r3, [pc, #64]	; (80103c8 <_sbrk+0x64>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4413      	add	r3, r2
 801038e:	693a      	ldr	r2, [r7, #16]
 8010390:	429a      	cmp	r2, r3
 8010392:	d207      	bcs.n	80103a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010394:	f00d f80a 	bl	801d3ac <__errno>
 8010398:	4603      	mov	r3, r0
 801039a:	220c      	movs	r2, #12
 801039c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801039e:	f04f 33ff 	mov.w	r3, #4294967295
 80103a2:	e009      	b.n	80103b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80103a4:	4b08      	ldr	r3, [pc, #32]	; (80103c8 <_sbrk+0x64>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80103aa:	4b07      	ldr	r3, [pc, #28]	; (80103c8 <_sbrk+0x64>)
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4413      	add	r3, r2
 80103b2:	4a05      	ldr	r2, [pc, #20]	; (80103c8 <_sbrk+0x64>)
 80103b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80103b6:	68fb      	ldr	r3, [r7, #12]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3718      	adds	r7, #24
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20050000 	.word	0x20050000
 80103c4:	00000400 	.word	0x00000400
 80103c8:	20001334 	.word	0x20001334
 80103cc:	200016e0 	.word	0x200016e0

080103d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80103d0:	b480      	push	{r7}
 80103d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80103d4:	4b06      	ldr	r3, [pc, #24]	; (80103f0 <SystemInit+0x20>)
 80103d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103da:	4a05      	ldr	r2, [pc, #20]	; (80103f0 <SystemInit+0x20>)
 80103dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80103e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80103e4:	bf00      	nop
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	e000ed00 	.word	0xe000ed00

080103f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80103f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801042c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80103f8:	480d      	ldr	r0, [pc, #52]	; (8010430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80103fa:	490e      	ldr	r1, [pc, #56]	; (8010434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80103fc:	4a0e      	ldr	r2, [pc, #56]	; (8010438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80103fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010400:	e002      	b.n	8010408 <LoopCopyDataInit>

08010402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010406:	3304      	adds	r3, #4

08010408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801040c:	d3f9      	bcc.n	8010402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801040e:	4a0b      	ldr	r2, [pc, #44]	; (801043c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010410:	4c0b      	ldr	r4, [pc, #44]	; (8010440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010414:	e001      	b.n	801041a <LoopFillZerobss>

08010416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010418:	3204      	adds	r2, #4

0801041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801041c:	d3fb      	bcc.n	8010416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801041e:	f7ff ffd7 	bl	80103d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010422:	f00c ffc9 	bl	801d3b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010426:	f7f8 fd07 	bl	8008e38 <main>
  bx  lr    
 801042a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801042c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8010430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010434:	20001278 	.word	0x20001278
  ldr r2, =_sidata
 8010438:	080281ac 	.word	0x080281ac
  ldr r2, =_sbss
 801043c:	20001278 	.word	0x20001278
  ldr r4, =_ebss
 8010440:	200016dc 	.word	0x200016dc

08010444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010444:	e7fe      	b.n	8010444 <ADC_IRQHandler>

08010446 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801044a:	2003      	movs	r0, #3
 801044c:	f000 f92e 	bl	80106ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010450:	2000      	movs	r0, #0
 8010452:	f000 f805 	bl	8010460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010456:	f7ff fe25 	bl	80100a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	bd80      	pop	{r7, pc}

08010460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010468:	4b12      	ldr	r3, [pc, #72]	; (80104b4 <HAL_InitTick+0x54>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	4b12      	ldr	r3, [pc, #72]	; (80104b8 <HAL_InitTick+0x58>)
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	4619      	mov	r1, r3
 8010472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010476:	fbb3 f3f1 	udiv	r3, r3, r1
 801047a:	fbb2 f3f3 	udiv	r3, r2, r3
 801047e:	4618      	mov	r0, r3
 8010480:	f000 f93b 	bl	80106fa <HAL_SYSTICK_Config>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801048a:	2301      	movs	r3, #1
 801048c:	e00e      	b.n	80104ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b0f      	cmp	r3, #15
 8010492:	d80a      	bhi.n	80104aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010494:	2200      	movs	r2, #0
 8010496:	6879      	ldr	r1, [r7, #4]
 8010498:	f04f 30ff 	mov.w	r0, #4294967295
 801049c:	f000 f911 	bl	80106c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80104a0:	4a06      	ldr	r2, [pc, #24]	; (80104bc <HAL_InitTick+0x5c>)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80104a6:	2300      	movs	r3, #0
 80104a8:	e000      	b.n	80104ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	20000f88 	.word	0x20000f88
 80104b8:	20000f90 	.word	0x20000f90
 80104bc:	20000f8c 	.word	0x20000f8c

080104c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80104c0:	b480      	push	{r7}
 80104c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80104c4:	4b06      	ldr	r3, [pc, #24]	; (80104e0 <HAL_IncTick+0x20>)
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	4b06      	ldr	r3, [pc, #24]	; (80104e4 <HAL_IncTick+0x24>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4413      	add	r3, r2
 80104d0:	4a04      	ldr	r2, [pc, #16]	; (80104e4 <HAL_IncTick+0x24>)
 80104d2:	6013      	str	r3, [r2, #0]
}
 80104d4:	bf00      	nop
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop
 80104e0:	20000f90 	.word	0x20000f90
 80104e4:	20001338 	.word	0x20001338

080104e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80104e8:	b480      	push	{r7}
 80104ea:	af00      	add	r7, sp, #0
  return uwTick;
 80104ec:	4b03      	ldr	r3, [pc, #12]	; (80104fc <HAL_GetTick+0x14>)
 80104ee:	681b      	ldr	r3, [r3, #0]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	20001338 	.word	0x20001338

08010500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010508:	f7ff ffee 	bl	80104e8 <HAL_GetTick>
 801050c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010518:	d005      	beq.n	8010526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801051a:	4b0a      	ldr	r3, [pc, #40]	; (8010544 <HAL_Delay+0x44>)
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	461a      	mov	r2, r3
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4413      	add	r3, r2
 8010524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010526:	bf00      	nop
 8010528:	f7ff ffde 	bl	80104e8 <HAL_GetTick>
 801052c:	4602      	mov	r2, r0
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	429a      	cmp	r2, r3
 8010536:	d8f7      	bhi.n	8010528 <HAL_Delay+0x28>
  {
  }
}
 8010538:	bf00      	nop
 801053a:	bf00      	nop
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	20000f90 	.word	0x20000f90

08010548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f003 0307 	and.w	r3, r3, #7
 8010556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010558:	4b0b      	ldr	r3, [pc, #44]	; (8010588 <__NVIC_SetPriorityGrouping+0x40>)
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010564:	4013      	ands	r3, r2
 8010566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010570:	4b06      	ldr	r3, [pc, #24]	; (801058c <__NVIC_SetPriorityGrouping+0x44>)
 8010572:	4313      	orrs	r3, r2
 8010574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010576:	4a04      	ldr	r2, [pc, #16]	; (8010588 <__NVIC_SetPriorityGrouping+0x40>)
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	60d3      	str	r3, [r2, #12]
}
 801057c:	bf00      	nop
 801057e:	3714      	adds	r7, #20
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	e000ed00 	.word	0xe000ed00
 801058c:	05fa0000 	.word	0x05fa0000

08010590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010590:	b480      	push	{r7}
 8010592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010594:	4b04      	ldr	r3, [pc, #16]	; (80105a8 <__NVIC_GetPriorityGrouping+0x18>)
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	0a1b      	lsrs	r3, r3, #8
 801059a:	f003 0307 	and.w	r3, r3, #7
}
 801059e:	4618      	mov	r0, r3
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	e000ed00 	.word	0xe000ed00

080105ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	4603      	mov	r3, r0
 80105b4:	6039      	str	r1, [r7, #0]
 80105b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80105b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	db0a      	blt.n	80105d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	b2da      	uxtb	r2, r3
 80105c4:	490c      	ldr	r1, [pc, #48]	; (80105f8 <__NVIC_SetPriority+0x4c>)
 80105c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105ca:	0112      	lsls	r2, r2, #4
 80105cc:	b2d2      	uxtb	r2, r2
 80105ce:	440b      	add	r3, r1
 80105d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80105d4:	e00a      	b.n	80105ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	4908      	ldr	r1, [pc, #32]	; (80105fc <__NVIC_SetPriority+0x50>)
 80105dc:	79fb      	ldrb	r3, [r7, #7]
 80105de:	f003 030f 	and.w	r3, r3, #15
 80105e2:	3b04      	subs	r3, #4
 80105e4:	0112      	lsls	r2, r2, #4
 80105e6:	b2d2      	uxtb	r2, r2
 80105e8:	440b      	add	r3, r1
 80105ea:	761a      	strb	r2, [r3, #24]
}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	e000e100 	.word	0xe000e100
 80105fc:	e000ed00 	.word	0xe000ed00

08010600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010600:	b480      	push	{r7}
 8010602:	b089      	sub	sp, #36	; 0x24
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f003 0307 	and.w	r3, r3, #7
 8010612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	f1c3 0307 	rsb	r3, r3, #7
 801061a:	2b04      	cmp	r3, #4
 801061c:	bf28      	it	cs
 801061e:	2304      	movcs	r3, #4
 8010620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	3304      	adds	r3, #4
 8010626:	2b06      	cmp	r3, #6
 8010628:	d902      	bls.n	8010630 <NVIC_EncodePriority+0x30>
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	3b03      	subs	r3, #3
 801062e:	e000      	b.n	8010632 <NVIC_EncodePriority+0x32>
 8010630:	2300      	movs	r3, #0
 8010632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010634:	f04f 32ff 	mov.w	r2, #4294967295
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	fa02 f303 	lsl.w	r3, r2, r3
 801063e:	43da      	mvns	r2, r3
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	401a      	ands	r2, r3
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010648:	f04f 31ff 	mov.w	r1, #4294967295
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	fa01 f303 	lsl.w	r3, r1, r3
 8010652:	43d9      	mvns	r1, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010658:	4313      	orrs	r3, r2
         );
}
 801065a:	4618      	mov	r0, r3
 801065c:	3724      	adds	r7, #36	; 0x24
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
	...

08010668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3b01      	subs	r3, #1
 8010674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010678:	d301      	bcc.n	801067e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801067a:	2301      	movs	r3, #1
 801067c:	e00f      	b.n	801069e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801067e:	4a0a      	ldr	r2, [pc, #40]	; (80106a8 <SysTick_Config+0x40>)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3b01      	subs	r3, #1
 8010684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010686:	210f      	movs	r1, #15
 8010688:	f04f 30ff 	mov.w	r0, #4294967295
 801068c:	f7ff ff8e 	bl	80105ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010690:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <SysTick_Config+0x40>)
 8010692:	2200      	movs	r2, #0
 8010694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010696:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <SysTick_Config+0x40>)
 8010698:	2207      	movs	r2, #7
 801069a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	e000e010 	.word	0xe000e010

080106ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b082      	sub	sp, #8
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7ff ff47 	bl	8010548 <__NVIC_SetPriorityGrouping>
}
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b086      	sub	sp, #24
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	4603      	mov	r3, r0
 80106ca:	60b9      	str	r1, [r7, #8]
 80106cc:	607a      	str	r2, [r7, #4]
 80106ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80106d0:	2300      	movs	r3, #0
 80106d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80106d4:	f7ff ff5c 	bl	8010590 <__NVIC_GetPriorityGrouping>
 80106d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	68b9      	ldr	r1, [r7, #8]
 80106de:	6978      	ldr	r0, [r7, #20]
 80106e0:	f7ff ff8e 	bl	8010600 <NVIC_EncodePriority>
 80106e4:	4602      	mov	r2, r0
 80106e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106ea:	4611      	mov	r1, r2
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff ff5d 	bl	80105ac <__NVIC_SetPriority>
}
 80106f2:	bf00      	nop
 80106f4:	3718      	adds	r7, #24
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b082      	sub	sp, #8
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff ffb0 	bl	8010668 <SysTick_Config>
 8010708:	4603      	mov	r3, r0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
	...

08010714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010714:	b480      	push	{r7}
 8010716:	b089      	sub	sp, #36	; 0x24
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801071e:	2300      	movs	r3, #0
 8010720:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8010722:	2300      	movs	r3, #0
 8010724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010726:	2300      	movs	r3, #0
 8010728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801072a:	2300      	movs	r3, #0
 801072c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801072e:	2300      	movs	r3, #0
 8010730:	61fb      	str	r3, [r7, #28]
 8010732:	e175      	b.n	8010a20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8010734:	2201      	movs	r2, #1
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	fa02 f303 	lsl.w	r3, r2, r3
 801073c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	697a      	ldr	r2, [r7, #20]
 8010744:	4013      	ands	r3, r2
 8010746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	429a      	cmp	r2, r3
 801074e:	f040 8164 	bne.w	8010a1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	f003 0303 	and.w	r3, r3, #3
 801075a:	2b01      	cmp	r3, #1
 801075c:	d005      	beq.n	801076a <HAL_GPIO_Init+0x56>
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	f003 0303 	and.w	r3, r3, #3
 8010766:	2b02      	cmp	r3, #2
 8010768:	d130      	bne.n	80107cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	2203      	movs	r2, #3
 8010776:	fa02 f303 	lsl.w	r3, r2, r3
 801077a:	43db      	mvns	r3, r3
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	4013      	ands	r3, r2
 8010780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	68da      	ldr	r2, [r3, #12]
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	fa02 f303 	lsl.w	r3, r2, r3
 801078e:	69ba      	ldr	r2, [r7, #24]
 8010790:	4313      	orrs	r3, r2
 8010792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	69ba      	ldr	r2, [r7, #24]
 8010798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80107a0:	2201      	movs	r2, #1
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	fa02 f303 	lsl.w	r3, r2, r3
 80107a8:	43db      	mvns	r3, r3
 80107aa:	69ba      	ldr	r2, [r7, #24]
 80107ac:	4013      	ands	r3, r2
 80107ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	091b      	lsrs	r3, r3, #4
 80107b6:	f003 0201 	and.w	r2, r3, #1
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	fa02 f303 	lsl.w	r3, r2, r3
 80107c0:	69ba      	ldr	r2, [r7, #24]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	69ba      	ldr	r2, [r7, #24]
 80107ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	f003 0303 	and.w	r3, r3, #3
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d017      	beq.n	8010808 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	005b      	lsls	r3, r3, #1
 80107e2:	2203      	movs	r2, #3
 80107e4:	fa02 f303 	lsl.w	r3, r2, r3
 80107e8:	43db      	mvns	r3, r3
 80107ea:	69ba      	ldr	r2, [r7, #24]
 80107ec:	4013      	ands	r3, r2
 80107ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	689a      	ldr	r2, [r3, #8]
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	fa02 f303 	lsl.w	r3, r2, r3
 80107fc:	69ba      	ldr	r2, [r7, #24]
 80107fe:	4313      	orrs	r3, r2
 8010800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	69ba      	ldr	r2, [r7, #24]
 8010806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	f003 0303 	and.w	r3, r3, #3
 8010810:	2b02      	cmp	r3, #2
 8010812:	d123      	bne.n	801085c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	08da      	lsrs	r2, r3, #3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3208      	adds	r2, #8
 801081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	f003 0307 	and.w	r3, r3, #7
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	220f      	movs	r2, #15
 801082c:	fa02 f303 	lsl.w	r3, r2, r3
 8010830:	43db      	mvns	r3, r3
 8010832:	69ba      	ldr	r2, [r7, #24]
 8010834:	4013      	ands	r3, r2
 8010836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	691a      	ldr	r2, [r3, #16]
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	f003 0307 	and.w	r3, r3, #7
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	fa02 f303 	lsl.w	r3, r2, r3
 8010848:	69ba      	ldr	r2, [r7, #24]
 801084a:	4313      	orrs	r3, r2
 801084c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	08da      	lsrs	r2, r3, #3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	3208      	adds	r2, #8
 8010856:	69b9      	ldr	r1, [r7, #24]
 8010858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	2203      	movs	r2, #3
 8010868:	fa02 f303 	lsl.w	r3, r2, r3
 801086c:	43db      	mvns	r3, r3
 801086e:	69ba      	ldr	r2, [r7, #24]
 8010870:	4013      	ands	r3, r2
 8010872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	f003 0203 	and.w	r2, r3, #3
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	005b      	lsls	r3, r3, #1
 8010880:	fa02 f303 	lsl.w	r3, r2, r3
 8010884:	69ba      	ldr	r2, [r7, #24]
 8010886:	4313      	orrs	r3, r2
 8010888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	69ba      	ldr	r2, [r7, #24]
 801088e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010898:	2b00      	cmp	r3, #0
 801089a:	f000 80be 	beq.w	8010a1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801089e:	4b66      	ldr	r3, [pc, #408]	; (8010a38 <HAL_GPIO_Init+0x324>)
 80108a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108a2:	4a65      	ldr	r2, [pc, #404]	; (8010a38 <HAL_GPIO_Init+0x324>)
 80108a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80108a8:	6453      	str	r3, [r2, #68]	; 0x44
 80108aa:	4b63      	ldr	r3, [pc, #396]	; (8010a38 <HAL_GPIO_Init+0x324>)
 80108ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108b2:	60fb      	str	r3, [r7, #12]
 80108b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80108b6:	4a61      	ldr	r2, [pc, #388]	; (8010a3c <HAL_GPIO_Init+0x328>)
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	089b      	lsrs	r3, r3, #2
 80108bc:	3302      	adds	r3, #2
 80108be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	f003 0303 	and.w	r3, r3, #3
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	220f      	movs	r2, #15
 80108ce:	fa02 f303 	lsl.w	r3, r2, r3
 80108d2:	43db      	mvns	r3, r3
 80108d4:	69ba      	ldr	r2, [r7, #24]
 80108d6:	4013      	ands	r3, r2
 80108d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4a58      	ldr	r2, [pc, #352]	; (8010a40 <HAL_GPIO_Init+0x32c>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d037      	beq.n	8010952 <HAL_GPIO_Init+0x23e>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a57      	ldr	r2, [pc, #348]	; (8010a44 <HAL_GPIO_Init+0x330>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d031      	beq.n	801094e <HAL_GPIO_Init+0x23a>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4a56      	ldr	r2, [pc, #344]	; (8010a48 <HAL_GPIO_Init+0x334>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d02b      	beq.n	801094a <HAL_GPIO_Init+0x236>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a55      	ldr	r2, [pc, #340]	; (8010a4c <HAL_GPIO_Init+0x338>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d025      	beq.n	8010946 <HAL_GPIO_Init+0x232>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4a54      	ldr	r2, [pc, #336]	; (8010a50 <HAL_GPIO_Init+0x33c>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d01f      	beq.n	8010942 <HAL_GPIO_Init+0x22e>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a53      	ldr	r2, [pc, #332]	; (8010a54 <HAL_GPIO_Init+0x340>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d019      	beq.n	801093e <HAL_GPIO_Init+0x22a>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a52      	ldr	r2, [pc, #328]	; (8010a58 <HAL_GPIO_Init+0x344>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d013      	beq.n	801093a <HAL_GPIO_Init+0x226>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a51      	ldr	r2, [pc, #324]	; (8010a5c <HAL_GPIO_Init+0x348>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d00d      	beq.n	8010936 <HAL_GPIO_Init+0x222>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a50      	ldr	r2, [pc, #320]	; (8010a60 <HAL_GPIO_Init+0x34c>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d007      	beq.n	8010932 <HAL_GPIO_Init+0x21e>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a4f      	ldr	r2, [pc, #316]	; (8010a64 <HAL_GPIO_Init+0x350>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d101      	bne.n	801092e <HAL_GPIO_Init+0x21a>
 801092a:	2309      	movs	r3, #9
 801092c:	e012      	b.n	8010954 <HAL_GPIO_Init+0x240>
 801092e:	230a      	movs	r3, #10
 8010930:	e010      	b.n	8010954 <HAL_GPIO_Init+0x240>
 8010932:	2308      	movs	r3, #8
 8010934:	e00e      	b.n	8010954 <HAL_GPIO_Init+0x240>
 8010936:	2307      	movs	r3, #7
 8010938:	e00c      	b.n	8010954 <HAL_GPIO_Init+0x240>
 801093a:	2306      	movs	r3, #6
 801093c:	e00a      	b.n	8010954 <HAL_GPIO_Init+0x240>
 801093e:	2305      	movs	r3, #5
 8010940:	e008      	b.n	8010954 <HAL_GPIO_Init+0x240>
 8010942:	2304      	movs	r3, #4
 8010944:	e006      	b.n	8010954 <HAL_GPIO_Init+0x240>
 8010946:	2303      	movs	r3, #3
 8010948:	e004      	b.n	8010954 <HAL_GPIO_Init+0x240>
 801094a:	2302      	movs	r3, #2
 801094c:	e002      	b.n	8010954 <HAL_GPIO_Init+0x240>
 801094e:	2301      	movs	r3, #1
 8010950:	e000      	b.n	8010954 <HAL_GPIO_Init+0x240>
 8010952:	2300      	movs	r3, #0
 8010954:	69fa      	ldr	r2, [r7, #28]
 8010956:	f002 0203 	and.w	r2, r2, #3
 801095a:	0092      	lsls	r2, r2, #2
 801095c:	4093      	lsls	r3, r2
 801095e:	69ba      	ldr	r2, [r7, #24]
 8010960:	4313      	orrs	r3, r2
 8010962:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010964:	4935      	ldr	r1, [pc, #212]	; (8010a3c <HAL_GPIO_Init+0x328>)
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	089b      	lsrs	r3, r3, #2
 801096a:	3302      	adds	r3, #2
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010972:	4b3d      	ldr	r3, [pc, #244]	; (8010a68 <HAL_GPIO_Init+0x354>)
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	43db      	mvns	r3, r3
 801097c:	69ba      	ldr	r2, [r7, #24]
 801097e:	4013      	ands	r3, r2
 8010980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801098e:	69ba      	ldr	r2, [r7, #24]
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	4313      	orrs	r3, r2
 8010994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010996:	4a34      	ldr	r2, [pc, #208]	; (8010a68 <HAL_GPIO_Init+0x354>)
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801099c:	4b32      	ldr	r3, [pc, #200]	; (8010a68 <HAL_GPIO_Init+0x354>)
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	43db      	mvns	r3, r3
 80109a6:	69ba      	ldr	r2, [r7, #24]
 80109a8:	4013      	ands	r3, r2
 80109aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d003      	beq.n	80109c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80109b8:	69ba      	ldr	r2, [r7, #24]
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	4313      	orrs	r3, r2
 80109be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80109c0:	4a29      	ldr	r2, [pc, #164]	; (8010a68 <HAL_GPIO_Init+0x354>)
 80109c2:	69bb      	ldr	r3, [r7, #24]
 80109c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80109c6:	4b28      	ldr	r3, [pc, #160]	; (8010a68 <HAL_GPIO_Init+0x354>)
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	43db      	mvns	r3, r3
 80109d0:	69ba      	ldr	r2, [r7, #24]
 80109d2:	4013      	ands	r3, r2
 80109d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d003      	beq.n	80109ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80109e2:	69ba      	ldr	r2, [r7, #24]
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	4313      	orrs	r3, r2
 80109e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80109ea:	4a1f      	ldr	r2, [pc, #124]	; (8010a68 <HAL_GPIO_Init+0x354>)
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80109f0:	4b1d      	ldr	r3, [pc, #116]	; (8010a68 <HAL_GPIO_Init+0x354>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	43db      	mvns	r3, r3
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	4013      	ands	r3, r2
 80109fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010a0c:	69ba      	ldr	r2, [r7, #24]
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	4313      	orrs	r3, r2
 8010a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010a14:	4a14      	ldr	r2, [pc, #80]	; (8010a68 <HAL_GPIO_Init+0x354>)
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	61fb      	str	r3, [r7, #28]
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	2b0f      	cmp	r3, #15
 8010a24:	f67f ae86 	bls.w	8010734 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010a28:	bf00      	nop
 8010a2a:	bf00      	nop
 8010a2c:	3724      	adds	r7, #36	; 0x24
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	40023800 	.word	0x40023800
 8010a3c:	40013800 	.word	0x40013800
 8010a40:	40020000 	.word	0x40020000
 8010a44:	40020400 	.word	0x40020400
 8010a48:	40020800 	.word	0x40020800
 8010a4c:	40020c00 	.word	0x40020c00
 8010a50:	40021000 	.word	0x40021000
 8010a54:	40021400 	.word	0x40021400
 8010a58:	40021800 	.word	0x40021800
 8010a5c:	40021c00 	.word	0x40021c00
 8010a60:	40022000 	.word	0x40022000
 8010a64:	40022400 	.word	0x40022400
 8010a68:	40013c00 	.word	0x40013c00

08010a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	460b      	mov	r3, r1
 8010a76:	807b      	strh	r3, [r7, #2]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010a7c:	787b      	ldrb	r3, [r7, #1]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d003      	beq.n	8010a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010a82:	887a      	ldrh	r2, [r7, #2]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010a88:	e003      	b.n	8010a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010a8a:	887b      	ldrh	r3, [r7, #2]
 8010a8c:	041a      	lsls	r2, r3, #16
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	619a      	str	r2, [r3, #24]
}
 8010a92:	bf00      	nop
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
	...

08010aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d101      	bne.n	8010ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e291      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f000 8087 	beq.w	8010bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010ac4:	4b96      	ldr	r3, [pc, #600]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010ac6:	689b      	ldr	r3, [r3, #8]
 8010ac8:	f003 030c 	and.w	r3, r3, #12
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	d00c      	beq.n	8010aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010ad0:	4b93      	ldr	r3, [pc, #588]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	f003 030c 	and.w	r3, r3, #12
 8010ad8:	2b08      	cmp	r3, #8
 8010ada:	d112      	bne.n	8010b02 <HAL_RCC_OscConfig+0x62>
 8010adc:	4b90      	ldr	r3, [pc, #576]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ae8:	d10b      	bne.n	8010b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010aea:	4b8d      	ldr	r3, [pc, #564]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d06c      	beq.n	8010bd0 <HAL_RCC_OscConfig+0x130>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d168      	bne.n	8010bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e26b      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b0a:	d106      	bne.n	8010b1a <HAL_RCC_OscConfig+0x7a>
 8010b0c:	4b84      	ldr	r3, [pc, #528]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	4a83      	ldr	r2, [pc, #524]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b16:	6013      	str	r3, [r2, #0]
 8010b18:	e02e      	b.n	8010b78 <HAL_RCC_OscConfig+0xd8>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d10c      	bne.n	8010b3c <HAL_RCC_OscConfig+0x9c>
 8010b22:	4b7f      	ldr	r3, [pc, #508]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a7e      	ldr	r2, [pc, #504]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b2c:	6013      	str	r3, [r2, #0]
 8010b2e:	4b7c      	ldr	r3, [pc, #496]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4a7b      	ldr	r2, [pc, #492]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010b38:	6013      	str	r3, [r2, #0]
 8010b3a:	e01d      	b.n	8010b78 <HAL_RCC_OscConfig+0xd8>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b44:	d10c      	bne.n	8010b60 <HAL_RCC_OscConfig+0xc0>
 8010b46:	4b76      	ldr	r3, [pc, #472]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	4a75      	ldr	r2, [pc, #468]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010b50:	6013      	str	r3, [r2, #0]
 8010b52:	4b73      	ldr	r3, [pc, #460]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	4a72      	ldr	r2, [pc, #456]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b5c:	6013      	str	r3, [r2, #0]
 8010b5e:	e00b      	b.n	8010b78 <HAL_RCC_OscConfig+0xd8>
 8010b60:	4b6f      	ldr	r3, [pc, #444]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a6e      	ldr	r2, [pc, #440]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b6a:	6013      	str	r3, [r2, #0]
 8010b6c:	4b6c      	ldr	r3, [pc, #432]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a6b      	ldr	r2, [pc, #428]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d013      	beq.n	8010ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b80:	f7ff fcb2 	bl	80104e8 <HAL_GetTick>
 8010b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b86:	e008      	b.n	8010b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010b88:	f7ff fcae 	bl	80104e8 <HAL_GetTick>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	2b64      	cmp	r3, #100	; 0x64
 8010b94:	d901      	bls.n	8010b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010b96:	2303      	movs	r3, #3
 8010b98:	e21f      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b9a:	4b61      	ldr	r3, [pc, #388]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d0f0      	beq.n	8010b88 <HAL_RCC_OscConfig+0xe8>
 8010ba6:	e014      	b.n	8010bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ba8:	f7ff fc9e 	bl	80104e8 <HAL_GetTick>
 8010bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010bae:	e008      	b.n	8010bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010bb0:	f7ff fc9a 	bl	80104e8 <HAL_GetTick>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	2b64      	cmp	r3, #100	; 0x64
 8010bbc:	d901      	bls.n	8010bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010bbe:	2303      	movs	r3, #3
 8010bc0:	e20b      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010bc2:	4b57      	ldr	r3, [pc, #348]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1f0      	bne.n	8010bb0 <HAL_RCC_OscConfig+0x110>
 8010bce:	e000      	b.n	8010bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f003 0302 	and.w	r3, r3, #2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d069      	beq.n	8010cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010bde:	4b50      	ldr	r3, [pc, #320]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010be0:	689b      	ldr	r3, [r3, #8]
 8010be2:	f003 030c 	and.w	r3, r3, #12
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00b      	beq.n	8010c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010bea:	4b4d      	ldr	r3, [pc, #308]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	f003 030c 	and.w	r3, r3, #12
 8010bf2:	2b08      	cmp	r3, #8
 8010bf4:	d11c      	bne.n	8010c30 <HAL_RCC_OscConfig+0x190>
 8010bf6:	4b4a      	ldr	r3, [pc, #296]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d116      	bne.n	8010c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010c02:	4b47      	ldr	r3, [pc, #284]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f003 0302 	and.w	r3, r3, #2
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d005      	beq.n	8010c1a <HAL_RCC_OscConfig+0x17a>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d001      	beq.n	8010c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e1df      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010c1a:	4b41      	ldr	r3, [pc, #260]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	493d      	ldr	r1, [pc, #244]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010c2e:	e040      	b.n	8010cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d023      	beq.n	8010c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010c38:	4b39      	ldr	r3, [pc, #228]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	4a38      	ldr	r2, [pc, #224]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c3e:	f043 0301 	orr.w	r3, r3, #1
 8010c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c44:	f7ff fc50 	bl	80104e8 <HAL_GetTick>
 8010c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c4a:	e008      	b.n	8010c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010c4c:	f7ff fc4c 	bl	80104e8 <HAL_GetTick>
 8010c50:	4602      	mov	r2, r0
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	1ad3      	subs	r3, r2, r3
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d901      	bls.n	8010c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010c5a:	2303      	movs	r3, #3
 8010c5c:	e1bd      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c5e:	4b30      	ldr	r3, [pc, #192]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f003 0302 	and.w	r3, r3, #2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d0f0      	beq.n	8010c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010c6a:	4b2d      	ldr	r3, [pc, #180]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	691b      	ldr	r3, [r3, #16]
 8010c76:	00db      	lsls	r3, r3, #3
 8010c78:	4929      	ldr	r1, [pc, #164]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	600b      	str	r3, [r1, #0]
 8010c7e:	e018      	b.n	8010cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010c80:	4b27      	ldr	r3, [pc, #156]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4a26      	ldr	r2, [pc, #152]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010c86:	f023 0301 	bic.w	r3, r3, #1
 8010c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c8c:	f7ff fc2c 	bl	80104e8 <HAL_GetTick>
 8010c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010c92:	e008      	b.n	8010ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010c94:	f7ff fc28 	bl	80104e8 <HAL_GetTick>
 8010c98:	4602      	mov	r2, r0
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	d901      	bls.n	8010ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8010ca2:	2303      	movs	r3, #3
 8010ca4:	e199      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010ca6:	4b1e      	ldr	r3, [pc, #120]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1f0      	bne.n	8010c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f003 0308 	and.w	r3, r3, #8
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d038      	beq.n	8010d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	695b      	ldr	r3, [r3, #20]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d019      	beq.n	8010cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010cc6:	4b16      	ldr	r3, [pc, #88]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cca:	4a15      	ldr	r2, [pc, #84]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010ccc:	f043 0301 	orr.w	r3, r3, #1
 8010cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010cd2:	f7ff fc09 	bl	80104e8 <HAL_GetTick>
 8010cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010cd8:	e008      	b.n	8010cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010cda:	f7ff fc05 	bl	80104e8 <HAL_GetTick>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	d901      	bls.n	8010cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	e176      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010cec:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cf0:	f003 0302 	and.w	r3, r3, #2
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d0f0      	beq.n	8010cda <HAL_RCC_OscConfig+0x23a>
 8010cf8:	e01a      	b.n	8010d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010cfa:	4b09      	ldr	r3, [pc, #36]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cfe:	4a08      	ldr	r2, [pc, #32]	; (8010d20 <HAL_RCC_OscConfig+0x280>)
 8010d00:	f023 0301 	bic.w	r3, r3, #1
 8010d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d06:	f7ff fbef 	bl	80104e8 <HAL_GetTick>
 8010d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010d0c:	e00a      	b.n	8010d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010d0e:	f7ff fbeb 	bl	80104e8 <HAL_GetTick>
 8010d12:	4602      	mov	r2, r0
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	2b02      	cmp	r3, #2
 8010d1a:	d903      	bls.n	8010d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010d1c:	2303      	movs	r3, #3
 8010d1e:	e15c      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
 8010d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010d24:	4b91      	ldr	r3, [pc, #580]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d28:	f003 0302 	and.w	r3, r3, #2
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d1ee      	bne.n	8010d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f003 0304 	and.w	r3, r3, #4
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f000 80a4 	beq.w	8010e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010d3e:	4b8b      	ldr	r3, [pc, #556]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10d      	bne.n	8010d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010d4a:	4b88      	ldr	r3, [pc, #544]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d4e:	4a87      	ldr	r2, [pc, #540]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d54:	6413      	str	r3, [r2, #64]	; 0x40
 8010d56:	4b85      	ldr	r3, [pc, #532]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d5e:	60bb      	str	r3, [r7, #8]
 8010d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010d62:	2301      	movs	r3, #1
 8010d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010d66:	4b82      	ldr	r3, [pc, #520]	; (8010f70 <HAL_RCC_OscConfig+0x4d0>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d118      	bne.n	8010da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8010d72:	4b7f      	ldr	r3, [pc, #508]	; (8010f70 <HAL_RCC_OscConfig+0x4d0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a7e      	ldr	r2, [pc, #504]	; (8010f70 <HAL_RCC_OscConfig+0x4d0>)
 8010d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010d7e:	f7ff fbb3 	bl	80104e8 <HAL_GetTick>
 8010d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010d84:	e008      	b.n	8010d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010d86:	f7ff fbaf 	bl	80104e8 <HAL_GetTick>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	1ad3      	subs	r3, r2, r3
 8010d90:	2b64      	cmp	r3, #100	; 0x64
 8010d92:	d901      	bls.n	8010d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8010d94:	2303      	movs	r3, #3
 8010d96:	e120      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010d98:	4b75      	ldr	r3, [pc, #468]	; (8010f70 <HAL_RCC_OscConfig+0x4d0>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d0f0      	beq.n	8010d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d106      	bne.n	8010dba <HAL_RCC_OscConfig+0x31a>
 8010dac:	4b6f      	ldr	r3, [pc, #444]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010db0:	4a6e      	ldr	r2, [pc, #440]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010db2:	f043 0301 	orr.w	r3, r3, #1
 8010db6:	6713      	str	r3, [r2, #112]	; 0x70
 8010db8:	e02d      	b.n	8010e16 <HAL_RCC_OscConfig+0x376>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d10c      	bne.n	8010ddc <HAL_RCC_OscConfig+0x33c>
 8010dc2:	4b6a      	ldr	r3, [pc, #424]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc6:	4a69      	ldr	r2, [pc, #420]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dc8:	f023 0301 	bic.w	r3, r3, #1
 8010dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8010dce:	4b67      	ldr	r3, [pc, #412]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dd2:	4a66      	ldr	r2, [pc, #408]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dd4:	f023 0304 	bic.w	r3, r3, #4
 8010dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8010dda:	e01c      	b.n	8010e16 <HAL_RCC_OscConfig+0x376>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	2b05      	cmp	r3, #5
 8010de2:	d10c      	bne.n	8010dfe <HAL_RCC_OscConfig+0x35e>
 8010de4:	4b61      	ldr	r3, [pc, #388]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010de8:	4a60      	ldr	r2, [pc, #384]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010dea:	f043 0304 	orr.w	r3, r3, #4
 8010dee:	6713      	str	r3, [r2, #112]	; 0x70
 8010df0:	4b5e      	ldr	r3, [pc, #376]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df4:	4a5d      	ldr	r2, [pc, #372]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010df6:	f043 0301 	orr.w	r3, r3, #1
 8010dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8010dfc:	e00b      	b.n	8010e16 <HAL_RCC_OscConfig+0x376>
 8010dfe:	4b5b      	ldr	r3, [pc, #364]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e02:	4a5a      	ldr	r2, [pc, #360]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e04:	f023 0301 	bic.w	r3, r3, #1
 8010e08:	6713      	str	r3, [r2, #112]	; 0x70
 8010e0a:	4b58      	ldr	r3, [pc, #352]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e0e:	4a57      	ldr	r2, [pc, #348]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e10:	f023 0304 	bic.w	r3, r3, #4
 8010e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	689b      	ldr	r3, [r3, #8]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d015      	beq.n	8010e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e1e:	f7ff fb63 	bl	80104e8 <HAL_GetTick>
 8010e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e24:	e00a      	b.n	8010e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e26:	f7ff fb5f 	bl	80104e8 <HAL_GetTick>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d901      	bls.n	8010e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010e38:	2303      	movs	r3, #3
 8010e3a:	e0ce      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010e3c:	4b4b      	ldr	r3, [pc, #300]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e40:	f003 0302 	and.w	r3, r3, #2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d0ee      	beq.n	8010e26 <HAL_RCC_OscConfig+0x386>
 8010e48:	e014      	b.n	8010e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e4a:	f7ff fb4d 	bl	80104e8 <HAL_GetTick>
 8010e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010e50:	e00a      	b.n	8010e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e52:	f7ff fb49 	bl	80104e8 <HAL_GetTick>
 8010e56:	4602      	mov	r2, r0
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d901      	bls.n	8010e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8010e64:	2303      	movs	r3, #3
 8010e66:	e0b8      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010e68:	4b40      	ldr	r3, [pc, #256]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6c:	f003 0302 	and.w	r3, r3, #2
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d1ee      	bne.n	8010e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010e74:	7dfb      	ldrb	r3, [r7, #23]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d105      	bne.n	8010e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010e7a:	4b3c      	ldr	r3, [pc, #240]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7e:	4a3b      	ldr	r2, [pc, #236]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	699b      	ldr	r3, [r3, #24]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 80a4 	beq.w	8010fd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010e90:	4b36      	ldr	r3, [pc, #216]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	f003 030c 	and.w	r3, r3, #12
 8010e98:	2b08      	cmp	r3, #8
 8010e9a:	d06b      	beq.n	8010f74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	699b      	ldr	r3, [r3, #24]
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	d149      	bne.n	8010f38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010ea4:	4b31      	ldr	r3, [pc, #196]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a30      	ldr	r2, [pc, #192]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eb0:	f7ff fb1a 	bl	80104e8 <HAL_GetTick>
 8010eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010eb6:	e008      	b.n	8010eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010eb8:	f7ff fb16 	bl	80104e8 <HAL_GetTick>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	2b02      	cmp	r3, #2
 8010ec4:	d901      	bls.n	8010eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8010ec6:	2303      	movs	r3, #3
 8010ec8:	e087      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010eca:	4b28      	ldr	r3, [pc, #160]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1f0      	bne.n	8010eb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	69da      	ldr	r2, [r3, #28]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6a1b      	ldr	r3, [r3, #32]
 8010ede:	431a      	orrs	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee4:	019b      	lsls	r3, r3, #6
 8010ee6:	431a      	orrs	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eec:	085b      	lsrs	r3, r3, #1
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	041b      	lsls	r3, r3, #16
 8010ef2:	431a      	orrs	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef8:	061b      	lsls	r3, r3, #24
 8010efa:	4313      	orrs	r3, r2
 8010efc:	4a1b      	ldr	r2, [pc, #108]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010f04:	4b19      	ldr	r3, [pc, #100]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a18      	ldr	r2, [pc, #96]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f10:	f7ff faea 	bl	80104e8 <HAL_GetTick>
 8010f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010f16:	e008      	b.n	8010f2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010f18:	f7ff fae6 	bl	80104e8 <HAL_GetTick>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d901      	bls.n	8010f2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8010f26:	2303      	movs	r3, #3
 8010f28:	e057      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010f2a:	4b10      	ldr	r3, [pc, #64]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0f0      	beq.n	8010f18 <HAL_RCC_OscConfig+0x478>
 8010f36:	e04f      	b.n	8010fd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010f38:	4b0c      	ldr	r3, [pc, #48]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4a0b      	ldr	r2, [pc, #44]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f44:	f7ff fad0 	bl	80104e8 <HAL_GetTick>
 8010f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010f4a:	e008      	b.n	8010f5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010f4c:	f7ff facc 	bl	80104e8 <HAL_GetTick>
 8010f50:	4602      	mov	r2, r0
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	1ad3      	subs	r3, r2, r3
 8010f56:	2b02      	cmp	r3, #2
 8010f58:	d901      	bls.n	8010f5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8010f5a:	2303      	movs	r3, #3
 8010f5c:	e03d      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010f5e:	4b03      	ldr	r3, [pc, #12]	; (8010f6c <HAL_RCC_OscConfig+0x4cc>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1f0      	bne.n	8010f4c <HAL_RCC_OscConfig+0x4ac>
 8010f6a:	e035      	b.n	8010fd8 <HAL_RCC_OscConfig+0x538>
 8010f6c:	40023800 	.word	0x40023800
 8010f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8010f74:	4b1b      	ldr	r3, [pc, #108]	; (8010fe4 <HAL_RCC_OscConfig+0x544>)
 8010f76:	685b      	ldr	r3, [r3, #4]
 8010f78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d028      	beq.n	8010fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d121      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d11a      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d111      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fba:	085b      	lsrs	r3, r3, #1
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d107      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d001      	beq.n	8010fd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	e000      	b.n	8010fda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	40023800 	.word	0x40023800

08010fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d101      	bne.n	8011000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	e0d0      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011000:	4b6a      	ldr	r3, [pc, #424]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f003 030f 	and.w	r3, r3, #15
 8011008:	683a      	ldr	r2, [r7, #0]
 801100a:	429a      	cmp	r2, r3
 801100c:	d910      	bls.n	8011030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801100e:	4b67      	ldr	r3, [pc, #412]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f023 020f 	bic.w	r2, r3, #15
 8011016:	4965      	ldr	r1, [pc, #404]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	4313      	orrs	r3, r2
 801101c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801101e:	4b63      	ldr	r3, [pc, #396]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 030f 	and.w	r3, r3, #15
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d001      	beq.n	8011030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801102c:	2301      	movs	r3, #1
 801102e:	e0b8      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	f003 0302 	and.w	r3, r3, #2
 8011038:	2b00      	cmp	r3, #0
 801103a:	d020      	beq.n	801107e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f003 0304 	and.w	r3, r3, #4
 8011044:	2b00      	cmp	r3, #0
 8011046:	d005      	beq.n	8011054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011048:	4b59      	ldr	r3, [pc, #356]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	4a58      	ldr	r2, [pc, #352]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 801104e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f003 0308 	and.w	r3, r3, #8
 801105c:	2b00      	cmp	r3, #0
 801105e:	d005      	beq.n	801106c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011060:	4b53      	ldr	r3, [pc, #332]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011062:	689b      	ldr	r3, [r3, #8]
 8011064:	4a52      	ldr	r2, [pc, #328]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801106a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801106c:	4b50      	ldr	r3, [pc, #320]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	689b      	ldr	r3, [r3, #8]
 8011078:	494d      	ldr	r1, [pc, #308]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 801107a:	4313      	orrs	r3, r2
 801107c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f003 0301 	and.w	r3, r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	d040      	beq.n	801110c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d107      	bne.n	80110a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011092:	4b47      	ldr	r3, [pc, #284]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801109a:	2b00      	cmp	r3, #0
 801109c:	d115      	bne.n	80110ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801109e:	2301      	movs	r3, #1
 80110a0:	e07f      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d107      	bne.n	80110ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80110aa:	4b41      	ldr	r3, [pc, #260]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d109      	bne.n	80110ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e073      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110ba:	4b3d      	ldr	r3, [pc, #244]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f003 0302 	and.w	r3, r3, #2
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d101      	bne.n	80110ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80110c6:	2301      	movs	r3, #1
 80110c8:	e06b      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80110ca:	4b39      	ldr	r3, [pc, #228]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	f023 0203 	bic.w	r2, r3, #3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	4936      	ldr	r1, [pc, #216]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 80110d8:	4313      	orrs	r3, r2
 80110da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110dc:	f7ff fa04 	bl	80104e8 <HAL_GetTick>
 80110e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80110e2:	e00a      	b.n	80110fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80110e4:	f7ff fa00 	bl	80104e8 <HAL_GetTick>
 80110e8:	4602      	mov	r2, r0
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80110f2:	4293      	cmp	r3, r2
 80110f4:	d901      	bls.n	80110fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80110f6:	2303      	movs	r3, #3
 80110f8:	e053      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80110fa:	4b2d      	ldr	r3, [pc, #180]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 80110fc:	689b      	ldr	r3, [r3, #8]
 80110fe:	f003 020c 	and.w	r2, r3, #12
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	429a      	cmp	r2, r3
 801110a:	d1eb      	bne.n	80110e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801110c:	4b27      	ldr	r3, [pc, #156]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f003 030f 	and.w	r3, r3, #15
 8011114:	683a      	ldr	r2, [r7, #0]
 8011116:	429a      	cmp	r2, r3
 8011118:	d210      	bcs.n	801113c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801111a:	4b24      	ldr	r3, [pc, #144]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f023 020f 	bic.w	r2, r3, #15
 8011122:	4922      	ldr	r1, [pc, #136]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	4313      	orrs	r3, r2
 8011128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801112a:	4b20      	ldr	r3, [pc, #128]	; (80111ac <HAL_RCC_ClockConfig+0x1c4>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f003 030f 	and.w	r3, r3, #15
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	429a      	cmp	r2, r3
 8011136:	d001      	beq.n	801113c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8011138:	2301      	movs	r3, #1
 801113a:	e032      	b.n	80111a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f003 0304 	and.w	r3, r3, #4
 8011144:	2b00      	cmp	r3, #0
 8011146:	d008      	beq.n	801115a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011148:	4b19      	ldr	r3, [pc, #100]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	4916      	ldr	r1, [pc, #88]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011156:	4313      	orrs	r3, r2
 8011158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b00      	cmp	r3, #0
 8011164:	d009      	beq.n	801117a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011166:	4b12      	ldr	r3, [pc, #72]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	490e      	ldr	r1, [pc, #56]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011176:	4313      	orrs	r3, r2
 8011178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801117a:	f000 f821 	bl	80111c0 <HAL_RCC_GetSysClockFreq>
 801117e:	4602      	mov	r2, r0
 8011180:	4b0b      	ldr	r3, [pc, #44]	; (80111b0 <HAL_RCC_ClockConfig+0x1c8>)
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	091b      	lsrs	r3, r3, #4
 8011186:	f003 030f 	and.w	r3, r3, #15
 801118a:	490a      	ldr	r1, [pc, #40]	; (80111b4 <HAL_RCC_ClockConfig+0x1cc>)
 801118c:	5ccb      	ldrb	r3, [r1, r3]
 801118e:	fa22 f303 	lsr.w	r3, r2, r3
 8011192:	4a09      	ldr	r2, [pc, #36]	; (80111b8 <HAL_RCC_ClockConfig+0x1d0>)
 8011194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8011196:	4b09      	ldr	r3, [pc, #36]	; (80111bc <HAL_RCC_ClockConfig+0x1d4>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4618      	mov	r0, r3
 801119c:	f7ff f960 	bl	8010460 <HAL_InitTick>

  return HAL_OK;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop
 80111ac:	40023c00 	.word	0x40023c00
 80111b0:	40023800 	.word	0x40023800
 80111b4:	08022fa8 	.word	0x08022fa8
 80111b8:	20000f88 	.word	0x20000f88
 80111bc:	20000f8c 	.word	0x20000f8c

080111c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80111c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80111c4:	b090      	sub	sp, #64	; 0x40
 80111c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	637b      	str	r3, [r7, #52]	; 0x34
 80111cc:	2300      	movs	r3, #0
 80111ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111d0:	2300      	movs	r3, #0
 80111d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80111d4:	2300      	movs	r3, #0
 80111d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80111d8:	4b59      	ldr	r3, [pc, #356]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	f003 030c 	and.w	r3, r3, #12
 80111e0:	2b08      	cmp	r3, #8
 80111e2:	d00d      	beq.n	8011200 <HAL_RCC_GetSysClockFreq+0x40>
 80111e4:	2b08      	cmp	r3, #8
 80111e6:	f200 80a1 	bhi.w	801132c <HAL_RCC_GetSysClockFreq+0x16c>
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <HAL_RCC_GetSysClockFreq+0x34>
 80111ee:	2b04      	cmp	r3, #4
 80111f0:	d003      	beq.n	80111fa <HAL_RCC_GetSysClockFreq+0x3a>
 80111f2:	e09b      	b.n	801132c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80111f4:	4b53      	ldr	r3, [pc, #332]	; (8011344 <HAL_RCC_GetSysClockFreq+0x184>)
 80111f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80111f8:	e09b      	b.n	8011332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80111fa:	4b53      	ldr	r3, [pc, #332]	; (8011348 <HAL_RCC_GetSysClockFreq+0x188>)
 80111fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80111fe:	e098      	b.n	8011332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011200:	4b4f      	ldr	r3, [pc, #316]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011208:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801120a:	4b4d      	ldr	r3, [pc, #308]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011212:	2b00      	cmp	r3, #0
 8011214:	d028      	beq.n	8011268 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011216:	4b4a      	ldr	r3, [pc, #296]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	099b      	lsrs	r3, r3, #6
 801121c:	2200      	movs	r2, #0
 801121e:	623b      	str	r3, [r7, #32]
 8011220:	627a      	str	r2, [r7, #36]	; 0x24
 8011222:	6a3b      	ldr	r3, [r7, #32]
 8011224:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8011228:	2100      	movs	r1, #0
 801122a:	4b47      	ldr	r3, [pc, #284]	; (8011348 <HAL_RCC_GetSysClockFreq+0x188>)
 801122c:	fb03 f201 	mul.w	r2, r3, r1
 8011230:	2300      	movs	r3, #0
 8011232:	fb00 f303 	mul.w	r3, r0, r3
 8011236:	4413      	add	r3, r2
 8011238:	4a43      	ldr	r2, [pc, #268]	; (8011348 <HAL_RCC_GetSysClockFreq+0x188>)
 801123a:	fba0 1202 	umull	r1, r2, r0, r2
 801123e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011240:	460a      	mov	r2, r1
 8011242:	62ba      	str	r2, [r7, #40]	; 0x28
 8011244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011246:	4413      	add	r3, r2
 8011248:	62fb      	str	r3, [r7, #44]	; 0x2c
 801124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801124c:	2200      	movs	r2, #0
 801124e:	61bb      	str	r3, [r7, #24]
 8011250:	61fa      	str	r2, [r7, #28]
 8011252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801125a:	f7ef fd95 	bl	8000d88 <__aeabi_uldivmod>
 801125e:	4602      	mov	r2, r0
 8011260:	460b      	mov	r3, r1
 8011262:	4613      	mov	r3, r2
 8011264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011266:	e053      	b.n	8011310 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011268:	4b35      	ldr	r3, [pc, #212]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 801126a:	685b      	ldr	r3, [r3, #4]
 801126c:	099b      	lsrs	r3, r3, #6
 801126e:	2200      	movs	r2, #0
 8011270:	613b      	str	r3, [r7, #16]
 8011272:	617a      	str	r2, [r7, #20]
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801127a:	f04f 0b00 	mov.w	fp, #0
 801127e:	4652      	mov	r2, sl
 8011280:	465b      	mov	r3, fp
 8011282:	f04f 0000 	mov.w	r0, #0
 8011286:	f04f 0100 	mov.w	r1, #0
 801128a:	0159      	lsls	r1, r3, #5
 801128c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011290:	0150      	lsls	r0, r2, #5
 8011292:	4602      	mov	r2, r0
 8011294:	460b      	mov	r3, r1
 8011296:	ebb2 080a 	subs.w	r8, r2, sl
 801129a:	eb63 090b 	sbc.w	r9, r3, fp
 801129e:	f04f 0200 	mov.w	r2, #0
 80112a2:	f04f 0300 	mov.w	r3, #0
 80112a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80112aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80112ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80112b2:	ebb2 0408 	subs.w	r4, r2, r8
 80112b6:	eb63 0509 	sbc.w	r5, r3, r9
 80112ba:	f04f 0200 	mov.w	r2, #0
 80112be:	f04f 0300 	mov.w	r3, #0
 80112c2:	00eb      	lsls	r3, r5, #3
 80112c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80112c8:	00e2      	lsls	r2, r4, #3
 80112ca:	4614      	mov	r4, r2
 80112cc:	461d      	mov	r5, r3
 80112ce:	eb14 030a 	adds.w	r3, r4, sl
 80112d2:	603b      	str	r3, [r7, #0]
 80112d4:	eb45 030b 	adc.w	r3, r5, fp
 80112d8:	607b      	str	r3, [r7, #4]
 80112da:	f04f 0200 	mov.w	r2, #0
 80112de:	f04f 0300 	mov.w	r3, #0
 80112e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80112e6:	4629      	mov	r1, r5
 80112e8:	028b      	lsls	r3, r1, #10
 80112ea:	4621      	mov	r1, r4
 80112ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80112f0:	4621      	mov	r1, r4
 80112f2:	028a      	lsls	r2, r1, #10
 80112f4:	4610      	mov	r0, r2
 80112f6:	4619      	mov	r1, r3
 80112f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fa:	2200      	movs	r2, #0
 80112fc:	60bb      	str	r3, [r7, #8]
 80112fe:	60fa      	str	r2, [r7, #12]
 8011300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011304:	f7ef fd40 	bl	8000d88 <__aeabi_uldivmod>
 8011308:	4602      	mov	r2, r0
 801130a:	460b      	mov	r3, r1
 801130c:	4613      	mov	r3, r2
 801130e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8011310:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <HAL_RCC_GetSysClockFreq+0x180>)
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	0c1b      	lsrs	r3, r3, #16
 8011316:	f003 0303 	and.w	r3, r3, #3
 801131a:	3301      	adds	r3, #1
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8011320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	fbb2 f3f3 	udiv	r3, r2, r3
 8011328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801132a:	e002      	b.n	8011332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801132c:	4b05      	ldr	r3, [pc, #20]	; (8011344 <HAL_RCC_GetSysClockFreq+0x184>)
 801132e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8011330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8011334:	4618      	mov	r0, r3
 8011336:	3740      	adds	r7, #64	; 0x40
 8011338:	46bd      	mov	sp, r7
 801133a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801133e:	bf00      	nop
 8011340:	40023800 	.word	0x40023800
 8011344:	00f42400 	.word	0x00f42400
 8011348:	017d7840 	.word	0x017d7840

0801134c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801134c:	b480      	push	{r7}
 801134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011350:	4b03      	ldr	r3, [pc, #12]	; (8011360 <HAL_RCC_GetHCLKFreq+0x14>)
 8011352:	681b      	ldr	r3, [r3, #0]
}
 8011354:	4618      	mov	r0, r3
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	20000f88 	.word	0x20000f88

08011364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011368:	f7ff fff0 	bl	801134c <HAL_RCC_GetHCLKFreq>
 801136c:	4602      	mov	r2, r0
 801136e:	4b05      	ldr	r3, [pc, #20]	; (8011384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011370:	689b      	ldr	r3, [r3, #8]
 8011372:	0a9b      	lsrs	r3, r3, #10
 8011374:	f003 0307 	and.w	r3, r3, #7
 8011378:	4903      	ldr	r1, [pc, #12]	; (8011388 <HAL_RCC_GetPCLK1Freq+0x24>)
 801137a:	5ccb      	ldrb	r3, [r1, r3]
 801137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011380:	4618      	mov	r0, r3
 8011382:	bd80      	pop	{r7, pc}
 8011384:	40023800 	.word	0x40023800
 8011388:	08022fb8 	.word	0x08022fb8

0801138c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011390:	f7ff ffdc 	bl	801134c <HAL_RCC_GetHCLKFreq>
 8011394:	4602      	mov	r2, r0
 8011396:	4b05      	ldr	r3, [pc, #20]	; (80113ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8011398:	689b      	ldr	r3, [r3, #8]
 801139a:	0b5b      	lsrs	r3, r3, #13
 801139c:	f003 0307 	and.w	r3, r3, #7
 80113a0:	4903      	ldr	r1, [pc, #12]	; (80113b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80113a2:	5ccb      	ldrb	r3, [r1, r3]
 80113a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	40023800 	.word	0x40023800
 80113b0:	08022fb8 	.word	0x08022fb8

080113b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b088      	sub	sp, #32
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80113c0:	2300      	movs	r3, #0
 80113c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80113c4:	2300      	movs	r3, #0
 80113c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80113cc:	2300      	movs	r3, #0
 80113ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f003 0301 	and.w	r3, r3, #1
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d012      	beq.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80113dc:	4b69      	ldr	r3, [pc, #420]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	4a68      	ldr	r2, [pc, #416]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80113e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80113e6:	6093      	str	r3, [r2, #8]
 80113e8:	4b66      	ldr	r3, [pc, #408]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80113ea:	689a      	ldr	r2, [r3, #8]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113f0:	4964      	ldr	r1, [pc, #400]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80113f2:	4313      	orrs	r3, r2
 80113f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80113fe:	2301      	movs	r3, #1
 8011400:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801140a:	2b00      	cmp	r3, #0
 801140c:	d017      	beq.n	801143e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801140e:	4b5d      	ldr	r3, [pc, #372]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801141c:	4959      	ldr	r1, [pc, #356]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801141e:	4313      	orrs	r3, r2
 8011420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801142c:	d101      	bne.n	8011432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801142e:	2301      	movs	r3, #1
 8011430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011436:	2b00      	cmp	r3, #0
 8011438:	d101      	bne.n	801143e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801143a:	2301      	movs	r3, #1
 801143c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011446:	2b00      	cmp	r3, #0
 8011448:	d017      	beq.n	801147a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801144a:	4b4e      	ldr	r3, [pc, #312]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	494a      	ldr	r1, [pc, #296]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801145a:	4313      	orrs	r3, r2
 801145c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011468:	d101      	bne.n	801146e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801146a:	2301      	movs	r3, #1
 801146c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011472:	2b00      	cmp	r3, #0
 8011474:	d101      	bne.n	801147a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8011476:	2301      	movs	r3, #1
 8011478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8011486:	2301      	movs	r3, #1
 8011488:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f003 0320 	and.w	r3, r3, #32
 8011492:	2b00      	cmp	r3, #0
 8011494:	f000 808b 	beq.w	80115ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011498:	4b3a      	ldr	r3, [pc, #232]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801149c:	4a39      	ldr	r2, [pc, #228]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114a2:	6413      	str	r3, [r2, #64]	; 0x40
 80114a4:	4b37      	ldr	r3, [pc, #220]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80114a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80114ac:	60bb      	str	r3, [r7, #8]
 80114ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80114b0:	4b35      	ldr	r3, [pc, #212]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	4a34      	ldr	r2, [pc, #208]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80114b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114bc:	f7ff f814 	bl	80104e8 <HAL_GetTick>
 80114c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80114c2:	e008      	b.n	80114d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114c4:	f7ff f810 	bl	80104e8 <HAL_GetTick>
 80114c8:	4602      	mov	r2, r0
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	1ad3      	subs	r3, r2, r3
 80114ce:	2b64      	cmp	r3, #100	; 0x64
 80114d0:	d901      	bls.n	80114d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80114d2:	2303      	movs	r3, #3
 80114d4:	e357      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80114d6:	4b2c      	ldr	r3, [pc, #176]	; (8011588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d0f0      	beq.n	80114c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80114e2:	4b28      	ldr	r3, [pc, #160]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80114e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80114ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d035      	beq.n	801155e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80114fa:	693a      	ldr	r2, [r7, #16]
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d02e      	beq.n	801155e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011500:	4b20      	ldr	r3, [pc, #128]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011508:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801150a:	4b1e      	ldr	r3, [pc, #120]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801150e:	4a1d      	ldr	r2, [pc, #116]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011514:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011516:	4b1b      	ldr	r3, [pc, #108]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801151a:	4a1a      	ldr	r2, [pc, #104]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8011522:	4a18      	ldr	r2, [pc, #96]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8011528:	4b16      	ldr	r3, [pc, #88]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801152c:	f003 0301 	and.w	r3, r3, #1
 8011530:	2b01      	cmp	r3, #1
 8011532:	d114      	bne.n	801155e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011534:	f7fe ffd8 	bl	80104e8 <HAL_GetTick>
 8011538:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801153a:	e00a      	b.n	8011552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801153c:	f7fe ffd4 	bl	80104e8 <HAL_GetTick>
 8011540:	4602      	mov	r2, r0
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	f241 3288 	movw	r2, #5000	; 0x1388
 801154a:	4293      	cmp	r3, r2
 801154c:	d901      	bls.n	8011552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e319      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011552:	4b0c      	ldr	r3, [pc, #48]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011556:	f003 0302 	and.w	r3, r3, #2
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0ee      	beq.n	801153c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801156a:	d111      	bne.n	8011590 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801156c:	4b05      	ldr	r3, [pc, #20]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011578:	4b04      	ldr	r3, [pc, #16]	; (801158c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801157a:	400b      	ands	r3, r1
 801157c:	4901      	ldr	r1, [pc, #4]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801157e:	4313      	orrs	r3, r2
 8011580:	608b      	str	r3, [r1, #8]
 8011582:	e00b      	b.n	801159c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8011584:	40023800 	.word	0x40023800
 8011588:	40007000 	.word	0x40007000
 801158c:	0ffffcff 	.word	0x0ffffcff
 8011590:	4baa      	ldr	r3, [pc, #680]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011592:	689b      	ldr	r3, [r3, #8]
 8011594:	4aa9      	ldr	r2, [pc, #676]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801159a:	6093      	str	r3, [r2, #8]
 801159c:	4ba7      	ldr	r3, [pc, #668]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801159e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115a8:	49a4      	ldr	r1, [pc, #656]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115aa:	4313      	orrs	r3, r2
 80115ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f003 0310 	and.w	r3, r3, #16
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d010      	beq.n	80115dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80115ba:	4ba0      	ldr	r3, [pc, #640]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115c0:	4a9e      	ldr	r2, [pc, #632]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80115c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80115ca:	4b9c      	ldr	r3, [pc, #624]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d4:	4999      	ldr	r1, [pc, #612]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115d6:	4313      	orrs	r3, r2
 80115d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00a      	beq.n	80115fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80115e8:	4b94      	ldr	r3, [pc, #592]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115f6:	4991      	ldr	r1, [pc, #580]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80115f8:	4313      	orrs	r3, r2
 80115fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00a      	beq.n	8011620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801160a:	4b8c      	ldr	r3, [pc, #560]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011618:	4988      	ldr	r1, [pc, #544]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801161a:	4313      	orrs	r3, r2
 801161c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011628:	2b00      	cmp	r3, #0
 801162a:	d00a      	beq.n	8011642 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801162c:	4b83      	ldr	r3, [pc, #524]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801163a:	4980      	ldr	r1, [pc, #512]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801163c:	4313      	orrs	r3, r2
 801163e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801164a:	2b00      	cmp	r3, #0
 801164c:	d00a      	beq.n	8011664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801164e:	4b7b      	ldr	r3, [pc, #492]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801165c:	4977      	ldr	r1, [pc, #476]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801165e:	4313      	orrs	r3, r2
 8011660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166c:	2b00      	cmp	r3, #0
 801166e:	d00a      	beq.n	8011686 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011670:	4b72      	ldr	r3, [pc, #456]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011676:	f023 0203 	bic.w	r2, r3, #3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801167e:	496f      	ldr	r1, [pc, #444]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011680:	4313      	orrs	r3, r2
 8011682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801168e:	2b00      	cmp	r3, #0
 8011690:	d00a      	beq.n	80116a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011692:	4b6a      	ldr	r3, [pc, #424]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011698:	f023 020c 	bic.w	r2, r3, #12
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116a0:	4966      	ldr	r1, [pc, #408]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116a2:	4313      	orrs	r3, r2
 80116a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d00a      	beq.n	80116ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80116b4:	4b61      	ldr	r3, [pc, #388]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116c2:	495e      	ldr	r1, [pc, #376]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116c4:	4313      	orrs	r3, r2
 80116c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00a      	beq.n	80116ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80116d6:	4b59      	ldr	r3, [pc, #356]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116e4:	4955      	ldr	r1, [pc, #340]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116e6:	4313      	orrs	r3, r2
 80116e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d00a      	beq.n	801170e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80116f8:	4b50      	ldr	r3, [pc, #320]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80116fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011706:	494d      	ldr	r1, [pc, #308]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011708:	4313      	orrs	r3, r2
 801170a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00a      	beq.n	8011730 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801171a:	4b48      	ldr	r3, [pc, #288]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011728:	4944      	ldr	r1, [pc, #272]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801172a:	4313      	orrs	r3, r2
 801172c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00a      	beq.n	8011752 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801173c:	4b3f      	ldr	r3, [pc, #252]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801174a:	493c      	ldr	r1, [pc, #240]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801174c:	4313      	orrs	r3, r2
 801174e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00a      	beq.n	8011774 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801175e:	4b37      	ldr	r3, [pc, #220]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801176c:	4933      	ldr	r1, [pc, #204]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801176e:	4313      	orrs	r3, r2
 8011770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00a      	beq.n	8011796 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011780:	4b2e      	ldr	r3, [pc, #184]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801178e:	492b      	ldr	r1, [pc, #172]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011790:	4313      	orrs	r3, r2
 8011792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d011      	beq.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80117a2:	4b26      	ldr	r3, [pc, #152]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117b0:	4922      	ldr	r1, [pc, #136]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117b2:	4313      	orrs	r3, r2
 80117b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80117bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80117c0:	d101      	bne.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80117c2:	2301      	movs	r3, #1
 80117c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f003 0308 	and.w	r3, r3, #8
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80117d2:	2301      	movs	r3, #1
 80117d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d00a      	beq.n	80117f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80117e2:	4b16      	ldr	r3, [pc, #88]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f0:	4912      	ldr	r1, [pc, #72]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117f2:	4313      	orrs	r3, r2
 80117f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00b      	beq.n	801181c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011804:	4b0d      	ldr	r3, [pc, #52]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801180a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011814:	4909      	ldr	r1, [pc, #36]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011816:	4313      	orrs	r3, r2
 8011818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d006      	beq.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801182a:	2b00      	cmp	r3, #0
 801182c:	f000 80d9 	beq.w	80119e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011830:	4b02      	ldr	r3, [pc, #8]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	4a01      	ldr	r2, [pc, #4]	; (801183c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801183a:	e001      	b.n	8011840 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 801183c:	40023800 	.word	0x40023800
 8011840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011842:	f7fe fe51 	bl	80104e8 <HAL_GetTick>
 8011846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011848:	e008      	b.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801184a:	f7fe fe4d 	bl	80104e8 <HAL_GetTick>
 801184e:	4602      	mov	r2, r0
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	2b64      	cmp	r3, #100	; 0x64
 8011856:	d901      	bls.n	801185c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011858:	2303      	movs	r3, #3
 801185a:	e194      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801185c:	4b6c      	ldr	r3, [pc, #432]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1f0      	bne.n	801184a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f003 0301 	and.w	r3, r3, #1
 8011870:	2b00      	cmp	r3, #0
 8011872:	d021      	beq.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011878:	2b00      	cmp	r3, #0
 801187a:	d11d      	bne.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801187c:	4b64      	ldr	r3, [pc, #400]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801187e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011882:	0c1b      	lsrs	r3, r3, #16
 8011884:	f003 0303 	and.w	r3, r3, #3
 8011888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801188a:	4b61      	ldr	r3, [pc, #388]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011890:	0e1b      	lsrs	r3, r3, #24
 8011892:	f003 030f 	and.w	r3, r3, #15
 8011896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	019a      	lsls	r2, r3, #6
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	041b      	lsls	r3, r3, #16
 80118a2:	431a      	orrs	r2, r3
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	061b      	lsls	r3, r3, #24
 80118a8:	431a      	orrs	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	689b      	ldr	r3, [r3, #8]
 80118ae:	071b      	lsls	r3, r3, #28
 80118b0:	4957      	ldr	r1, [pc, #348]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80118b2:	4313      	orrs	r3, r2
 80118b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d004      	beq.n	80118ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118cc:	d00a      	beq.n	80118e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d02e      	beq.n	8011938 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80118e2:	d129      	bne.n	8011938 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80118e4:	4b4a      	ldr	r3, [pc, #296]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80118e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118ea:	0c1b      	lsrs	r3, r3, #16
 80118ec:	f003 0303 	and.w	r3, r3, #3
 80118f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80118f2:	4b47      	ldr	r3, [pc, #284]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80118f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118f8:	0f1b      	lsrs	r3, r3, #28
 80118fa:	f003 0307 	and.w	r3, r3, #7
 80118fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	019a      	lsls	r2, r3, #6
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	041b      	lsls	r3, r3, #16
 801190a:	431a      	orrs	r2, r3
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	061b      	lsls	r3, r3, #24
 8011912:	431a      	orrs	r2, r3
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	071b      	lsls	r3, r3, #28
 8011918:	493d      	ldr	r1, [pc, #244]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801191a:	4313      	orrs	r3, r2
 801191c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011920:	4b3b      	ldr	r3, [pc, #236]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011926:	f023 021f 	bic.w	r2, r3, #31
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801192e:	3b01      	subs	r3, #1
 8011930:	4937      	ldr	r1, [pc, #220]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011932:	4313      	orrs	r3, r2
 8011934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011940:	2b00      	cmp	r3, #0
 8011942:	d01d      	beq.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011944:	4b32      	ldr	r3, [pc, #200]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801194a:	0e1b      	lsrs	r3, r3, #24
 801194c:	f003 030f 	and.w	r3, r3, #15
 8011950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011952:	4b2f      	ldr	r3, [pc, #188]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011958:	0f1b      	lsrs	r3, r3, #28
 801195a:	f003 0307 	and.w	r3, r3, #7
 801195e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	019a      	lsls	r2, r3, #6
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	691b      	ldr	r3, [r3, #16]
 801196a:	041b      	lsls	r3, r3, #16
 801196c:	431a      	orrs	r2, r3
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	061b      	lsls	r3, r3, #24
 8011972:	431a      	orrs	r2, r3
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	071b      	lsls	r3, r3, #28
 8011978:	4925      	ldr	r1, [pc, #148]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 801197a:	4313      	orrs	r3, r2
 801197c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011988:	2b00      	cmp	r3, #0
 801198a:	d011      	beq.n	80119b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	019a      	lsls	r2, r3, #6
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	691b      	ldr	r3, [r3, #16]
 8011996:	041b      	lsls	r3, r3, #16
 8011998:	431a      	orrs	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	061b      	lsls	r3, r3, #24
 80119a0:	431a      	orrs	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	689b      	ldr	r3, [r3, #8]
 80119a6:	071b      	lsls	r3, r3, #28
 80119a8:	4919      	ldr	r1, [pc, #100]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119aa:	4313      	orrs	r3, r2
 80119ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80119b0:	4b17      	ldr	r3, [pc, #92]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4a16      	ldr	r2, [pc, #88]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80119ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80119bc:	f7fe fd94 	bl	80104e8 <HAL_GetTick>
 80119c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80119c2:	e008      	b.n	80119d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80119c4:	f7fe fd90 	bl	80104e8 <HAL_GetTick>
 80119c8:	4602      	mov	r2, r0
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	2b64      	cmp	r3, #100	; 0x64
 80119d0:	d901      	bls.n	80119d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80119d2:	2303      	movs	r3, #3
 80119d4:	e0d7      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80119d6:	4b0e      	ldr	r3, [pc, #56]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d0f0      	beq.n	80119c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	f040 80cd 	bne.w	8011b84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80119ea:	4b09      	ldr	r3, [pc, #36]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	4a08      	ldr	r2, [pc, #32]	; (8011a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80119f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80119f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80119f6:	f7fe fd77 	bl	80104e8 <HAL_GetTick>
 80119fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80119fc:	e00a      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80119fe:	f7fe fd73 	bl	80104e8 <HAL_GetTick>
 8011a02:	4602      	mov	r2, r0
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	2b64      	cmp	r3, #100	; 0x64
 8011a0a:	d903      	bls.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011a0c:	2303      	movs	r3, #3
 8011a0e:	e0ba      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8011a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011a14:	4b5e      	ldr	r3, [pc, #376]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a20:	d0ed      	beq.n	80119fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d003      	beq.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d009      	beq.n	8011a4a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d02e      	beq.n	8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d12a      	bne.n	8011aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011a4a:	4b51      	ldr	r3, [pc, #324]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a50:	0c1b      	lsrs	r3, r3, #16
 8011a52:	f003 0303 	and.w	r3, r3, #3
 8011a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011a58:	4b4d      	ldr	r3, [pc, #308]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a5e:	0f1b      	lsrs	r3, r3, #28
 8011a60:	f003 0307 	and.w	r3, r3, #7
 8011a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	695b      	ldr	r3, [r3, #20]
 8011a6a:	019a      	lsls	r2, r3, #6
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	041b      	lsls	r3, r3, #16
 8011a70:	431a      	orrs	r2, r3
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	061b      	lsls	r3, r3, #24
 8011a78:	431a      	orrs	r2, r3
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	071b      	lsls	r3, r3, #28
 8011a7e:	4944      	ldr	r1, [pc, #272]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a80:	4313      	orrs	r3, r2
 8011a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011a86:	4b42      	ldr	r3, [pc, #264]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a94:	3b01      	subs	r3, #1
 8011a96:	021b      	lsls	r3, r3, #8
 8011a98:	493d      	ldr	r1, [pc, #244]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d022      	beq.n	8011af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011ab4:	d11d      	bne.n	8011af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011ab6:	4b36      	ldr	r3, [pc, #216]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011abc:	0e1b      	lsrs	r3, r3, #24
 8011abe:	f003 030f 	and.w	r3, r3, #15
 8011ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011ac4:	4b32      	ldr	r3, [pc, #200]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011aca:	0f1b      	lsrs	r3, r3, #28
 8011acc:	f003 0307 	and.w	r3, r3, #7
 8011ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	695b      	ldr	r3, [r3, #20]
 8011ad6:	019a      	lsls	r2, r3, #6
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6a1b      	ldr	r3, [r3, #32]
 8011adc:	041b      	lsls	r3, r3, #16
 8011ade:	431a      	orrs	r2, r3
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	061b      	lsls	r3, r3, #24
 8011ae4:	431a      	orrs	r2, r3
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	071b      	lsls	r3, r3, #28
 8011aea:	4929      	ldr	r1, [pc, #164]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011aec:	4313      	orrs	r3, r2
 8011aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f003 0308 	and.w	r3, r3, #8
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d028      	beq.n	8011b50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011afe:	4b24      	ldr	r3, [pc, #144]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b04:	0e1b      	lsrs	r3, r3, #24
 8011b06:	f003 030f 	and.w	r3, r3, #15
 8011b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011b0c:	4b20      	ldr	r3, [pc, #128]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b12:	0c1b      	lsrs	r3, r3, #16
 8011b14:	f003 0303 	and.w	r3, r3, #3
 8011b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	695b      	ldr	r3, [r3, #20]
 8011b1e:	019a      	lsls	r2, r3, #6
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	041b      	lsls	r3, r3, #16
 8011b24:	431a      	orrs	r2, r3
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	061b      	lsls	r3, r3, #24
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	071b      	lsls	r3, r3, #28
 8011b32:	4917      	ldr	r1, [pc, #92]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b34:	4313      	orrs	r3, r2
 8011b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011b3a:	4b15      	ldr	r3, [pc, #84]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b48:	4911      	ldr	r1, [pc, #68]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b4a:	4313      	orrs	r3, r2
 8011b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011b50:	4b0f      	ldr	r3, [pc, #60]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a0e      	ldr	r2, [pc, #56]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b5c:	f7fe fcc4 	bl	80104e8 <HAL_GetTick>
 8011b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011b62:	e008      	b.n	8011b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011b64:	f7fe fcc0 	bl	80104e8 <HAL_GetTick>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	2b64      	cmp	r3, #100	; 0x64
 8011b70:	d901      	bls.n	8011b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011b72:	2303      	movs	r3, #3
 8011b74:	e007      	b.n	8011b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011b76:	4b06      	ldr	r3, [pc, #24]	; (8011b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b82:	d1ef      	bne.n	8011b64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8011b84:	2300      	movs	r3, #0
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3720      	adds	r7, #32
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	40023800 	.word	0x40023800

08011b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e040      	b.n	8011c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d106      	bne.n	8011bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f7fe fa98 	bl	80100ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2224      	movs	r2, #36	; 0x24
 8011bc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f022 0201 	bic.w	r2, r2, #1
 8011bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f000 f8b0 	bl	8011d38 <UART_SetConfig>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d101      	bne.n	8011be2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e022      	b.n	8011c28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 fb08 	bl	8012200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	685a      	ldr	r2, [r3, #4]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	689a      	ldr	r2, [r3, #8]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f042 0201 	orr.w	r2, r2, #1
 8011c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f000 fb8f 	bl	8012344 <UART_CheckIdleState>
 8011c26:	4603      	mov	r3, r0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08a      	sub	sp, #40	; 0x28
 8011c34:	af02      	add	r7, sp, #8
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c44:	2b20      	cmp	r3, #32
 8011c46:	d171      	bne.n	8011d2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d002      	beq.n	8011c54 <HAL_UART_Transmit+0x24>
 8011c4e:	88fb      	ldrh	r3, [r7, #6]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d101      	bne.n	8011c58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011c54:	2301      	movs	r3, #1
 8011c56:	e06a      	b.n	8011d2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2221      	movs	r2, #33	; 0x21
 8011c64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011c66:	f7fe fc3f 	bl	80104e8 <HAL_GetTick>
 8011c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	88fa      	ldrh	r2, [r7, #6]
 8011c70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	88fa      	ldrh	r2, [r7, #6]
 8011c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	689b      	ldr	r3, [r3, #8]
 8011c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c84:	d108      	bne.n	8011c98 <HAL_UART_Transmit+0x68>
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d104      	bne.n	8011c98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	61bb      	str	r3, [r7, #24]
 8011c96:	e003      	b.n	8011ca0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011ca0:	e02c      	b.n	8011cfc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	2180      	movs	r1, #128	; 0x80
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f000 fb80 	bl	80123b2 <UART_WaitOnFlagUntilTimeout>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d001      	beq.n	8011cbc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8011cb8:	2303      	movs	r3, #3
 8011cba:	e038      	b.n	8011d2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d10b      	bne.n	8011cda <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011cc2:	69bb      	ldr	r3, [r7, #24]
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011cd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	3302      	adds	r3, #2
 8011cd6:	61bb      	str	r3, [r7, #24]
 8011cd8:	e007      	b.n	8011cea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	781a      	ldrb	r2, [r3, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	b29a      	uxth	r2, r3
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d1cc      	bne.n	8011ca2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	2140      	movs	r1, #64	; 0x40
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f000 fb4d 	bl	80123b2 <UART_WaitOnFlagUntilTimeout>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8011d1e:	2303      	movs	r3, #3
 8011d20:	e005      	b.n	8011d2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2220      	movs	r2, #32
 8011d26:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	e000      	b.n	8011d2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8011d2c:	2302      	movs	r3, #2
  }
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3720      	adds	r7, #32
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
	...

08011d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b088      	sub	sp, #32
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011d40:	2300      	movs	r3, #0
 8011d42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	689a      	ldr	r2, [r3, #8]
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	691b      	ldr	r3, [r3, #16]
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	695b      	ldr	r3, [r3, #20]
 8011d52:	431a      	orrs	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	69db      	ldr	r3, [r3, #28]
 8011d58:	4313      	orrs	r3, r2
 8011d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	4ba6      	ldr	r3, [pc, #664]	; (8011ffc <UART_SetConfig+0x2c4>)
 8011d64:	4013      	ands	r3, r2
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	6812      	ldr	r2, [r2, #0]
 8011d6a:	6979      	ldr	r1, [r7, #20]
 8011d6c:	430b      	orrs	r3, r1
 8011d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	430a      	orrs	r2, r1
 8011d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	699b      	ldr	r3, [r3, #24]
 8011d8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a1b      	ldr	r3, [r3, #32]
 8011d90:	697a      	ldr	r2, [r7, #20]
 8011d92:	4313      	orrs	r3, r2
 8011d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	697a      	ldr	r2, [r7, #20]
 8011da6:	430a      	orrs	r2, r1
 8011da8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4a94      	ldr	r2, [pc, #592]	; (8012000 <UART_SetConfig+0x2c8>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d120      	bne.n	8011df6 <UART_SetConfig+0xbe>
 8011db4:	4b93      	ldr	r3, [pc, #588]	; (8012004 <UART_SetConfig+0x2cc>)
 8011db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dba:	f003 0303 	and.w	r3, r3, #3
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d816      	bhi.n	8011df0 <UART_SetConfig+0xb8>
 8011dc2:	a201      	add	r2, pc, #4	; (adr r2, 8011dc8 <UART_SetConfig+0x90>)
 8011dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc8:	08011dd9 	.word	0x08011dd9
 8011dcc:	08011de5 	.word	0x08011de5
 8011dd0:	08011ddf 	.word	0x08011ddf
 8011dd4:	08011deb 	.word	0x08011deb
 8011dd8:	2301      	movs	r3, #1
 8011dda:	77fb      	strb	r3, [r7, #31]
 8011ddc:	e150      	b.n	8012080 <UART_SetConfig+0x348>
 8011dde:	2302      	movs	r3, #2
 8011de0:	77fb      	strb	r3, [r7, #31]
 8011de2:	e14d      	b.n	8012080 <UART_SetConfig+0x348>
 8011de4:	2304      	movs	r3, #4
 8011de6:	77fb      	strb	r3, [r7, #31]
 8011de8:	e14a      	b.n	8012080 <UART_SetConfig+0x348>
 8011dea:	2308      	movs	r3, #8
 8011dec:	77fb      	strb	r3, [r7, #31]
 8011dee:	e147      	b.n	8012080 <UART_SetConfig+0x348>
 8011df0:	2310      	movs	r3, #16
 8011df2:	77fb      	strb	r3, [r7, #31]
 8011df4:	e144      	b.n	8012080 <UART_SetConfig+0x348>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a83      	ldr	r2, [pc, #524]	; (8012008 <UART_SetConfig+0x2d0>)
 8011dfc:	4293      	cmp	r3, r2
 8011dfe:	d132      	bne.n	8011e66 <UART_SetConfig+0x12e>
 8011e00:	4b80      	ldr	r3, [pc, #512]	; (8012004 <UART_SetConfig+0x2cc>)
 8011e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e06:	f003 030c 	and.w	r3, r3, #12
 8011e0a:	2b0c      	cmp	r3, #12
 8011e0c:	d828      	bhi.n	8011e60 <UART_SetConfig+0x128>
 8011e0e:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <UART_SetConfig+0xdc>)
 8011e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e14:	08011e49 	.word	0x08011e49
 8011e18:	08011e61 	.word	0x08011e61
 8011e1c:	08011e61 	.word	0x08011e61
 8011e20:	08011e61 	.word	0x08011e61
 8011e24:	08011e55 	.word	0x08011e55
 8011e28:	08011e61 	.word	0x08011e61
 8011e2c:	08011e61 	.word	0x08011e61
 8011e30:	08011e61 	.word	0x08011e61
 8011e34:	08011e4f 	.word	0x08011e4f
 8011e38:	08011e61 	.word	0x08011e61
 8011e3c:	08011e61 	.word	0x08011e61
 8011e40:	08011e61 	.word	0x08011e61
 8011e44:	08011e5b 	.word	0x08011e5b
 8011e48:	2300      	movs	r3, #0
 8011e4a:	77fb      	strb	r3, [r7, #31]
 8011e4c:	e118      	b.n	8012080 <UART_SetConfig+0x348>
 8011e4e:	2302      	movs	r3, #2
 8011e50:	77fb      	strb	r3, [r7, #31]
 8011e52:	e115      	b.n	8012080 <UART_SetConfig+0x348>
 8011e54:	2304      	movs	r3, #4
 8011e56:	77fb      	strb	r3, [r7, #31]
 8011e58:	e112      	b.n	8012080 <UART_SetConfig+0x348>
 8011e5a:	2308      	movs	r3, #8
 8011e5c:	77fb      	strb	r3, [r7, #31]
 8011e5e:	e10f      	b.n	8012080 <UART_SetConfig+0x348>
 8011e60:	2310      	movs	r3, #16
 8011e62:	77fb      	strb	r3, [r7, #31]
 8011e64:	e10c      	b.n	8012080 <UART_SetConfig+0x348>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4a68      	ldr	r2, [pc, #416]	; (801200c <UART_SetConfig+0x2d4>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d120      	bne.n	8011eb2 <UART_SetConfig+0x17a>
 8011e70:	4b64      	ldr	r3, [pc, #400]	; (8012004 <UART_SetConfig+0x2cc>)
 8011e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011e7a:	2b30      	cmp	r3, #48	; 0x30
 8011e7c:	d013      	beq.n	8011ea6 <UART_SetConfig+0x16e>
 8011e7e:	2b30      	cmp	r3, #48	; 0x30
 8011e80:	d814      	bhi.n	8011eac <UART_SetConfig+0x174>
 8011e82:	2b20      	cmp	r3, #32
 8011e84:	d009      	beq.n	8011e9a <UART_SetConfig+0x162>
 8011e86:	2b20      	cmp	r3, #32
 8011e88:	d810      	bhi.n	8011eac <UART_SetConfig+0x174>
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d002      	beq.n	8011e94 <UART_SetConfig+0x15c>
 8011e8e:	2b10      	cmp	r3, #16
 8011e90:	d006      	beq.n	8011ea0 <UART_SetConfig+0x168>
 8011e92:	e00b      	b.n	8011eac <UART_SetConfig+0x174>
 8011e94:	2300      	movs	r3, #0
 8011e96:	77fb      	strb	r3, [r7, #31]
 8011e98:	e0f2      	b.n	8012080 <UART_SetConfig+0x348>
 8011e9a:	2302      	movs	r3, #2
 8011e9c:	77fb      	strb	r3, [r7, #31]
 8011e9e:	e0ef      	b.n	8012080 <UART_SetConfig+0x348>
 8011ea0:	2304      	movs	r3, #4
 8011ea2:	77fb      	strb	r3, [r7, #31]
 8011ea4:	e0ec      	b.n	8012080 <UART_SetConfig+0x348>
 8011ea6:	2308      	movs	r3, #8
 8011ea8:	77fb      	strb	r3, [r7, #31]
 8011eaa:	e0e9      	b.n	8012080 <UART_SetConfig+0x348>
 8011eac:	2310      	movs	r3, #16
 8011eae:	77fb      	strb	r3, [r7, #31]
 8011eb0:	e0e6      	b.n	8012080 <UART_SetConfig+0x348>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4a56      	ldr	r2, [pc, #344]	; (8012010 <UART_SetConfig+0x2d8>)
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d120      	bne.n	8011efe <UART_SetConfig+0x1c6>
 8011ebc:	4b51      	ldr	r3, [pc, #324]	; (8012004 <UART_SetConfig+0x2cc>)
 8011ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ec2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8011ec8:	d013      	beq.n	8011ef2 <UART_SetConfig+0x1ba>
 8011eca:	2bc0      	cmp	r3, #192	; 0xc0
 8011ecc:	d814      	bhi.n	8011ef8 <UART_SetConfig+0x1c0>
 8011ece:	2b80      	cmp	r3, #128	; 0x80
 8011ed0:	d009      	beq.n	8011ee6 <UART_SetConfig+0x1ae>
 8011ed2:	2b80      	cmp	r3, #128	; 0x80
 8011ed4:	d810      	bhi.n	8011ef8 <UART_SetConfig+0x1c0>
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d002      	beq.n	8011ee0 <UART_SetConfig+0x1a8>
 8011eda:	2b40      	cmp	r3, #64	; 0x40
 8011edc:	d006      	beq.n	8011eec <UART_SetConfig+0x1b4>
 8011ede:	e00b      	b.n	8011ef8 <UART_SetConfig+0x1c0>
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	77fb      	strb	r3, [r7, #31]
 8011ee4:	e0cc      	b.n	8012080 <UART_SetConfig+0x348>
 8011ee6:	2302      	movs	r3, #2
 8011ee8:	77fb      	strb	r3, [r7, #31]
 8011eea:	e0c9      	b.n	8012080 <UART_SetConfig+0x348>
 8011eec:	2304      	movs	r3, #4
 8011eee:	77fb      	strb	r3, [r7, #31]
 8011ef0:	e0c6      	b.n	8012080 <UART_SetConfig+0x348>
 8011ef2:	2308      	movs	r3, #8
 8011ef4:	77fb      	strb	r3, [r7, #31]
 8011ef6:	e0c3      	b.n	8012080 <UART_SetConfig+0x348>
 8011ef8:	2310      	movs	r3, #16
 8011efa:	77fb      	strb	r3, [r7, #31]
 8011efc:	e0c0      	b.n	8012080 <UART_SetConfig+0x348>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4a44      	ldr	r2, [pc, #272]	; (8012014 <UART_SetConfig+0x2dc>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	d125      	bne.n	8011f54 <UART_SetConfig+0x21c>
 8011f08:	4b3e      	ldr	r3, [pc, #248]	; (8012004 <UART_SetConfig+0x2cc>)
 8011f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f16:	d017      	beq.n	8011f48 <UART_SetConfig+0x210>
 8011f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f1c:	d817      	bhi.n	8011f4e <UART_SetConfig+0x216>
 8011f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f22:	d00b      	beq.n	8011f3c <UART_SetConfig+0x204>
 8011f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f28:	d811      	bhi.n	8011f4e <UART_SetConfig+0x216>
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d003      	beq.n	8011f36 <UART_SetConfig+0x1fe>
 8011f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f32:	d006      	beq.n	8011f42 <UART_SetConfig+0x20a>
 8011f34:	e00b      	b.n	8011f4e <UART_SetConfig+0x216>
 8011f36:	2300      	movs	r3, #0
 8011f38:	77fb      	strb	r3, [r7, #31]
 8011f3a:	e0a1      	b.n	8012080 <UART_SetConfig+0x348>
 8011f3c:	2302      	movs	r3, #2
 8011f3e:	77fb      	strb	r3, [r7, #31]
 8011f40:	e09e      	b.n	8012080 <UART_SetConfig+0x348>
 8011f42:	2304      	movs	r3, #4
 8011f44:	77fb      	strb	r3, [r7, #31]
 8011f46:	e09b      	b.n	8012080 <UART_SetConfig+0x348>
 8011f48:	2308      	movs	r3, #8
 8011f4a:	77fb      	strb	r3, [r7, #31]
 8011f4c:	e098      	b.n	8012080 <UART_SetConfig+0x348>
 8011f4e:	2310      	movs	r3, #16
 8011f50:	77fb      	strb	r3, [r7, #31]
 8011f52:	e095      	b.n	8012080 <UART_SetConfig+0x348>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4a2f      	ldr	r2, [pc, #188]	; (8012018 <UART_SetConfig+0x2e0>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d125      	bne.n	8011faa <UART_SetConfig+0x272>
 8011f5e:	4b29      	ldr	r3, [pc, #164]	; (8012004 <UART_SetConfig+0x2cc>)
 8011f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f6c:	d017      	beq.n	8011f9e <UART_SetConfig+0x266>
 8011f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011f72:	d817      	bhi.n	8011fa4 <UART_SetConfig+0x26c>
 8011f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f78:	d00b      	beq.n	8011f92 <UART_SetConfig+0x25a>
 8011f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f7e:	d811      	bhi.n	8011fa4 <UART_SetConfig+0x26c>
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d003      	beq.n	8011f8c <UART_SetConfig+0x254>
 8011f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f88:	d006      	beq.n	8011f98 <UART_SetConfig+0x260>
 8011f8a:	e00b      	b.n	8011fa4 <UART_SetConfig+0x26c>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	77fb      	strb	r3, [r7, #31]
 8011f90:	e076      	b.n	8012080 <UART_SetConfig+0x348>
 8011f92:	2302      	movs	r3, #2
 8011f94:	77fb      	strb	r3, [r7, #31]
 8011f96:	e073      	b.n	8012080 <UART_SetConfig+0x348>
 8011f98:	2304      	movs	r3, #4
 8011f9a:	77fb      	strb	r3, [r7, #31]
 8011f9c:	e070      	b.n	8012080 <UART_SetConfig+0x348>
 8011f9e:	2308      	movs	r3, #8
 8011fa0:	77fb      	strb	r3, [r7, #31]
 8011fa2:	e06d      	b.n	8012080 <UART_SetConfig+0x348>
 8011fa4:	2310      	movs	r3, #16
 8011fa6:	77fb      	strb	r3, [r7, #31]
 8011fa8:	e06a      	b.n	8012080 <UART_SetConfig+0x348>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	4a1b      	ldr	r2, [pc, #108]	; (801201c <UART_SetConfig+0x2e4>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d138      	bne.n	8012026 <UART_SetConfig+0x2ee>
 8011fb4:	4b13      	ldr	r3, [pc, #76]	; (8012004 <UART_SetConfig+0x2cc>)
 8011fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8011fbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011fc2:	d017      	beq.n	8011ff4 <UART_SetConfig+0x2bc>
 8011fc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011fc8:	d82a      	bhi.n	8012020 <UART_SetConfig+0x2e8>
 8011fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fce:	d00b      	beq.n	8011fe8 <UART_SetConfig+0x2b0>
 8011fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fd4:	d824      	bhi.n	8012020 <UART_SetConfig+0x2e8>
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d003      	beq.n	8011fe2 <UART_SetConfig+0x2aa>
 8011fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fde:	d006      	beq.n	8011fee <UART_SetConfig+0x2b6>
 8011fe0:	e01e      	b.n	8012020 <UART_SetConfig+0x2e8>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	77fb      	strb	r3, [r7, #31]
 8011fe6:	e04b      	b.n	8012080 <UART_SetConfig+0x348>
 8011fe8:	2302      	movs	r3, #2
 8011fea:	77fb      	strb	r3, [r7, #31]
 8011fec:	e048      	b.n	8012080 <UART_SetConfig+0x348>
 8011fee:	2304      	movs	r3, #4
 8011ff0:	77fb      	strb	r3, [r7, #31]
 8011ff2:	e045      	b.n	8012080 <UART_SetConfig+0x348>
 8011ff4:	2308      	movs	r3, #8
 8011ff6:	77fb      	strb	r3, [r7, #31]
 8011ff8:	e042      	b.n	8012080 <UART_SetConfig+0x348>
 8011ffa:	bf00      	nop
 8011ffc:	efff69f3 	.word	0xefff69f3
 8012000:	40011000 	.word	0x40011000
 8012004:	40023800 	.word	0x40023800
 8012008:	40004400 	.word	0x40004400
 801200c:	40004800 	.word	0x40004800
 8012010:	40004c00 	.word	0x40004c00
 8012014:	40005000 	.word	0x40005000
 8012018:	40011400 	.word	0x40011400
 801201c:	40007800 	.word	0x40007800
 8012020:	2310      	movs	r3, #16
 8012022:	77fb      	strb	r3, [r7, #31]
 8012024:	e02c      	b.n	8012080 <UART_SetConfig+0x348>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a72      	ldr	r2, [pc, #456]	; (80121f4 <UART_SetConfig+0x4bc>)
 801202c:	4293      	cmp	r3, r2
 801202e:	d125      	bne.n	801207c <UART_SetConfig+0x344>
 8012030:	4b71      	ldr	r3, [pc, #452]	; (80121f8 <UART_SetConfig+0x4c0>)
 8012032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801203a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801203e:	d017      	beq.n	8012070 <UART_SetConfig+0x338>
 8012040:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012044:	d817      	bhi.n	8012076 <UART_SetConfig+0x33e>
 8012046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801204a:	d00b      	beq.n	8012064 <UART_SetConfig+0x32c>
 801204c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012050:	d811      	bhi.n	8012076 <UART_SetConfig+0x33e>
 8012052:	2b00      	cmp	r3, #0
 8012054:	d003      	beq.n	801205e <UART_SetConfig+0x326>
 8012056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801205a:	d006      	beq.n	801206a <UART_SetConfig+0x332>
 801205c:	e00b      	b.n	8012076 <UART_SetConfig+0x33e>
 801205e:	2300      	movs	r3, #0
 8012060:	77fb      	strb	r3, [r7, #31]
 8012062:	e00d      	b.n	8012080 <UART_SetConfig+0x348>
 8012064:	2302      	movs	r3, #2
 8012066:	77fb      	strb	r3, [r7, #31]
 8012068:	e00a      	b.n	8012080 <UART_SetConfig+0x348>
 801206a:	2304      	movs	r3, #4
 801206c:	77fb      	strb	r3, [r7, #31]
 801206e:	e007      	b.n	8012080 <UART_SetConfig+0x348>
 8012070:	2308      	movs	r3, #8
 8012072:	77fb      	strb	r3, [r7, #31]
 8012074:	e004      	b.n	8012080 <UART_SetConfig+0x348>
 8012076:	2310      	movs	r3, #16
 8012078:	77fb      	strb	r3, [r7, #31]
 801207a:	e001      	b.n	8012080 <UART_SetConfig+0x348>
 801207c:	2310      	movs	r3, #16
 801207e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	69db      	ldr	r3, [r3, #28]
 8012084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012088:	d15b      	bne.n	8012142 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801208a:	7ffb      	ldrb	r3, [r7, #31]
 801208c:	2b08      	cmp	r3, #8
 801208e:	d828      	bhi.n	80120e2 <UART_SetConfig+0x3aa>
 8012090:	a201      	add	r2, pc, #4	; (adr r2, 8012098 <UART_SetConfig+0x360>)
 8012092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012096:	bf00      	nop
 8012098:	080120bd 	.word	0x080120bd
 801209c:	080120c5 	.word	0x080120c5
 80120a0:	080120cd 	.word	0x080120cd
 80120a4:	080120e3 	.word	0x080120e3
 80120a8:	080120d3 	.word	0x080120d3
 80120ac:	080120e3 	.word	0x080120e3
 80120b0:	080120e3 	.word	0x080120e3
 80120b4:	080120e3 	.word	0x080120e3
 80120b8:	080120db 	.word	0x080120db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120bc:	f7ff f952 	bl	8011364 <HAL_RCC_GetPCLK1Freq>
 80120c0:	61b8      	str	r0, [r7, #24]
        break;
 80120c2:	e013      	b.n	80120ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120c4:	f7ff f962 	bl	801138c <HAL_RCC_GetPCLK2Freq>
 80120c8:	61b8      	str	r0, [r7, #24]
        break;
 80120ca:	e00f      	b.n	80120ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80120cc:	4b4b      	ldr	r3, [pc, #300]	; (80121fc <UART_SetConfig+0x4c4>)
 80120ce:	61bb      	str	r3, [r7, #24]
        break;
 80120d0:	e00c      	b.n	80120ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80120d2:	f7ff f875 	bl	80111c0 <HAL_RCC_GetSysClockFreq>
 80120d6:	61b8      	str	r0, [r7, #24]
        break;
 80120d8:	e008      	b.n	80120ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120de:	61bb      	str	r3, [r7, #24]
        break;
 80120e0:	e004      	b.n	80120ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80120e2:	2300      	movs	r3, #0
 80120e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80120e6:	2301      	movs	r3, #1
 80120e8:	77bb      	strb	r3, [r7, #30]
        break;
 80120ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d074      	beq.n	80121dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	005a      	lsls	r2, r3, #1
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	085b      	lsrs	r3, r3, #1
 80120fc:	441a      	add	r2, r3
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	fbb2 f3f3 	udiv	r3, r2, r3
 8012106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2b0f      	cmp	r3, #15
 801210c:	d916      	bls.n	801213c <UART_SetConfig+0x404>
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012114:	d212      	bcs.n	801213c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	b29b      	uxth	r3, r3
 801211a:	f023 030f 	bic.w	r3, r3, #15
 801211e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	085b      	lsrs	r3, r3, #1
 8012124:	b29b      	uxth	r3, r3
 8012126:	f003 0307 	and.w	r3, r3, #7
 801212a:	b29a      	uxth	r2, r3
 801212c:	89fb      	ldrh	r3, [r7, #14]
 801212e:	4313      	orrs	r3, r2
 8012130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	89fa      	ldrh	r2, [r7, #14]
 8012138:	60da      	str	r2, [r3, #12]
 801213a:	e04f      	b.n	80121dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801213c:	2301      	movs	r3, #1
 801213e:	77bb      	strb	r3, [r7, #30]
 8012140:	e04c      	b.n	80121dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012142:	7ffb      	ldrb	r3, [r7, #31]
 8012144:	2b08      	cmp	r3, #8
 8012146:	d828      	bhi.n	801219a <UART_SetConfig+0x462>
 8012148:	a201      	add	r2, pc, #4	; (adr r2, 8012150 <UART_SetConfig+0x418>)
 801214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214e:	bf00      	nop
 8012150:	08012175 	.word	0x08012175
 8012154:	0801217d 	.word	0x0801217d
 8012158:	08012185 	.word	0x08012185
 801215c:	0801219b 	.word	0x0801219b
 8012160:	0801218b 	.word	0x0801218b
 8012164:	0801219b 	.word	0x0801219b
 8012168:	0801219b 	.word	0x0801219b
 801216c:	0801219b 	.word	0x0801219b
 8012170:	08012193 	.word	0x08012193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012174:	f7ff f8f6 	bl	8011364 <HAL_RCC_GetPCLK1Freq>
 8012178:	61b8      	str	r0, [r7, #24]
        break;
 801217a:	e013      	b.n	80121a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801217c:	f7ff f906 	bl	801138c <HAL_RCC_GetPCLK2Freq>
 8012180:	61b8      	str	r0, [r7, #24]
        break;
 8012182:	e00f      	b.n	80121a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012184:	4b1d      	ldr	r3, [pc, #116]	; (80121fc <UART_SetConfig+0x4c4>)
 8012186:	61bb      	str	r3, [r7, #24]
        break;
 8012188:	e00c      	b.n	80121a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801218a:	f7ff f819 	bl	80111c0 <HAL_RCC_GetSysClockFreq>
 801218e:	61b8      	str	r0, [r7, #24]
        break;
 8012190:	e008      	b.n	80121a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012196:	61bb      	str	r3, [r7, #24]
        break;
 8012198:	e004      	b.n	80121a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801219a:	2300      	movs	r3, #0
 801219c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801219e:	2301      	movs	r3, #1
 80121a0:	77bb      	strb	r3, [r7, #30]
        break;
 80121a2:	bf00      	nop
    }

    if (pclk != 0U)
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d018      	beq.n	80121dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	085a      	lsrs	r2, r3, #1
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	441a      	add	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80121bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	2b0f      	cmp	r3, #15
 80121c2:	d909      	bls.n	80121d8 <UART_SetConfig+0x4a0>
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121ca:	d205      	bcs.n	80121d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	60da      	str	r2, [r3, #12]
 80121d6:	e001      	b.n	80121dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80121d8:	2301      	movs	r3, #1
 80121da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80121e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3720      	adds	r7, #32
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	40007c00 	.word	0x40007c00
 80121f8:	40023800 	.word	0x40023800
 80121fc:	00f42400 	.word	0x00f42400

08012200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801220c:	f003 0301 	and.w	r3, r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00a      	beq.n	801222a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	430a      	orrs	r2, r1
 8012228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801222e:	f003 0302 	and.w	r3, r3, #2
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00a      	beq.n	801224c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	430a      	orrs	r2, r1
 801224a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012250:	f003 0304 	and.w	r3, r3, #4
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00a      	beq.n	801226e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	430a      	orrs	r2, r1
 801226c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012272:	f003 0308 	and.w	r3, r3, #8
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	430a      	orrs	r2, r1
 801228e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012294:	f003 0310 	and.w	r3, r3, #16
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00a      	beq.n	80122b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	430a      	orrs	r2, r1
 80122b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b6:	f003 0320 	and.w	r3, r3, #32
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00a      	beq.n	80122d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	430a      	orrs	r2, r1
 80122d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d01a      	beq.n	8012316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	430a      	orrs	r2, r1
 80122f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80122fe:	d10a      	bne.n	8012316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	430a      	orrs	r2, r1
 8012314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00a      	beq.n	8012338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	430a      	orrs	r2, r1
 8012336:	605a      	str	r2, [r3, #4]
  }
}
 8012338:	bf00      	nop
 801233a:	370c      	adds	r7, #12
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr

08012344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af02      	add	r7, sp, #8
 801234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012354:	f7fe f8c8 	bl	80104e8 <HAL_GetTick>
 8012358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f003 0308 	and.w	r3, r3, #8
 8012364:	2b08      	cmp	r3, #8
 8012366:	d10e      	bne.n	8012386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2200      	movs	r2, #0
 8012372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 f81b 	bl	80123b2 <UART_WaitOnFlagUntilTimeout>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	d001      	beq.n	8012386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012382:	2303      	movs	r3, #3
 8012384:	e011      	b.n	80123aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2220      	movs	r2, #32
 801238a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2220      	movs	r2, #32
 8012390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2200      	movs	r2, #0
 801239e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80123a8:	2300      	movs	r3, #0
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b09c      	sub	sp, #112	; 0x70
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	60f8      	str	r0, [r7, #12]
 80123ba:	60b9      	str	r1, [r7, #8]
 80123bc:	603b      	str	r3, [r7, #0]
 80123be:	4613      	mov	r3, r2
 80123c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123c2:	e0a7      	b.n	8012514 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ca:	f000 80a3 	beq.w	8012514 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123ce:	f7fe f88b 	bl	80104e8 <HAL_GetTick>
 80123d2:	4602      	mov	r2, r0
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123da:	429a      	cmp	r2, r3
 80123dc:	d302      	bcc.n	80123e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80123de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d13f      	bne.n	8012464 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ec:	e853 3f00 	ldrex	r3, [r3]
 80123f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80123f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80123f8:	667b      	str	r3, [r7, #100]	; 0x64
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	461a      	mov	r2, r3
 8012400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012404:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801240a:	e841 2300 	strex	r3, r2, [r1]
 801240e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012412:	2b00      	cmp	r3, #0
 8012414:	d1e6      	bne.n	80123e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3308      	adds	r3, #8
 801241c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012420:	e853 3f00 	ldrex	r3, [r3]
 8012424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012428:	f023 0301 	bic.w	r3, r3, #1
 801242c:	663b      	str	r3, [r7, #96]	; 0x60
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	3308      	adds	r3, #8
 8012434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012436:	64ba      	str	r2, [r7, #72]	; 0x48
 8012438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801243c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801243e:	e841 2300 	strex	r3, r2, [r1]
 8012442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1e5      	bne.n	8012416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2220      	movs	r2, #32
 801244e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2220      	movs	r2, #32
 8012454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2200      	movs	r2, #0
 801245c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8012460:	2303      	movs	r3, #3
 8012462:	e068      	b.n	8012536 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f003 0304 	and.w	r3, r3, #4
 801246e:	2b00      	cmp	r3, #0
 8012470:	d050      	beq.n	8012514 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801247c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012480:	d148      	bne.n	8012514 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801248a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012494:	e853 3f00 	ldrex	r3, [r3]
 8012498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80124a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	461a      	mov	r2, r3
 80124a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124aa:	637b      	str	r3, [r7, #52]	; 0x34
 80124ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124b2:	e841 2300 	strex	r3, r2, [r1]
 80124b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80124b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1e6      	bne.n	801248c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3308      	adds	r3, #8
 80124c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	e853 3f00 	ldrex	r3, [r3]
 80124cc:	613b      	str	r3, [r7, #16]
   return(result);
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	f023 0301 	bic.w	r3, r3, #1
 80124d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	3308      	adds	r3, #8
 80124dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80124de:	623a      	str	r2, [r7, #32]
 80124e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124e2:	69f9      	ldr	r1, [r7, #28]
 80124e4:	6a3a      	ldr	r2, [r7, #32]
 80124e6:	e841 2300 	strex	r3, r2, [r1]
 80124ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1e5      	bne.n	80124be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2220      	movs	r2, #32
 80124f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2220      	movs	r2, #32
 80124fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2220      	movs	r2, #32
 8012504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8012510:	2303      	movs	r3, #3
 8012512:	e010      	b.n	8012536 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	69da      	ldr	r2, [r3, #28]
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	4013      	ands	r3, r2
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	429a      	cmp	r2, r3
 8012522:	bf0c      	ite	eq
 8012524:	2301      	moveq	r3, #1
 8012526:	2300      	movne	r3, #0
 8012528:	b2db      	uxtb	r3, r3
 801252a:	461a      	mov	r2, r3
 801252c:	79fb      	ldrb	r3, [r7, #7]
 801252e:	429a      	cmp	r2, r3
 8012530:	f43f af48 	beq.w	80123c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012534:	2300      	movs	r3, #0
}
 8012536:	4618      	mov	r0, r3
 8012538:	3770      	adds	r7, #112	; 0x70
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}

0801253e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801253e:	b480      	push	{r7}
 8012540:	b08b      	sub	sp, #44	; 0x2c
 8012542:	af00      	add	r7, sp, #0
 8012544:	60f8      	str	r0, [r7, #12]
 8012546:	ed87 0a02 	vstr	s0, [r7, #8]
 801254a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	685b      	ldr	r3, [r3, #4]
 8012550:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	461a      	mov	r2, r3
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	885b      	ldrh	r3, [r3, #2]
 8012562:	fb02 f303 	mul.w	r3, r2, r3
 8012566:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801256c:	e010      	b.n	8012590 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	1d1a      	adds	r2, r3, #4
 8012572:	627a      	str	r2, [r7, #36]	; 0x24
 8012574:	ed93 7a00 	vldr	s14, [r3]
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	1d1a      	adds	r2, r3, #4
 801257c:	623a      	str	r2, [r7, #32]
 801257e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012586:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	3b01      	subs	r3, #1
 801258e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1eb      	bne.n	801256e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012596:	2300      	movs	r3, #0
 8012598:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 801259a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	372c      	adds	r7, #44	; 0x2c
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80125aa:	b480      	push	{r7}
 80125ac:	b08b      	sub	sp, #44	; 0x2c
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
 80125b2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	881b      	ldrh	r3, [r3, #0]
 80125c4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	885b      	ldrh	r3, [r3, #2]
 80125ca:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80125cc:	89fb      	ldrh	r3, [r7, #14]
 80125ce:	61bb      	str	r3, [r7, #24]
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	009b      	lsls	r3, r3, #2
 80125d8:	693a      	ldr	r2, [r7, #16]
 80125da:	4413      	add	r3, r2
 80125dc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80125de:	89bb      	ldrh	r3, [r7, #12]
 80125e0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80125e2:	e00d      	b.n	8012600 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	1d1a      	adds	r2, r3, #4
 80125e8:	627a      	str	r2, [r7, #36]	; 0x24
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	6a3b      	ldr	r3, [r7, #32]
 80125ee:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80125f0:	89fb      	ldrh	r3, [r7, #14]
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	6a3a      	ldr	r2, [r7, #32]
 80125f6:	4413      	add	r3, r2
 80125f8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012600:	69fb      	ldr	r3, [r7, #28]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1ee      	bne.n	80125e4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	3301      	adds	r3, #1
 801260a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	3b01      	subs	r3, #1
 8012610:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1dd      	bne.n	80125d4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012618:	2300      	movs	r3, #0
 801261a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801261c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012620:	4618      	mov	r0, r3
 8012622:	372c      	adds	r7, #44	; 0x2c
 8012624:	46bd      	mov	sp, r7
 8012626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262a:	4770      	bx	lr

0801262c <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801262c:	b480      	push	{r7}
 801262e:	b087      	sub	sp, #28
 8012630:	af00      	add	r7, sp, #0
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8012638:	f04f 0300 	mov.w	r3, #0
 801263c:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012642:	e00d      	b.n	8012660 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	1d1a      	adds	r2, r3, #4
 8012648:	60fa      	str	r2, [r7, #12]
 801264a:	edd3 7a00 	vldr	s15, [r3]
 801264e:	ed97 7a04 	vldr	s14, [r7, #16]
 8012652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012656:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	3b01      	subs	r3, #1
 801265e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1ee      	bne.n	8012644 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	ee07 3a90 	vmov	s15, r3
 801266c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012670:	edd7 6a04 	vldr	s13, [r7, #16]
 8012674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	edc3 7a00 	vstr	s15, [r3]
}
 801267e:	bf00      	nop
 8012680:	371c      	adds	r7, #28
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr

0801268a <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b08a      	sub	sp, #40	; 0x28
 801268e:	af00      	add	r7, sp, #0
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	60b9      	str	r1, [r7, #8]
 8012694:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8012696:	f04f 0300 	mov.w	r3, #0
 801269a:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80126a0:	e011      	b.n	80126c6 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	1d1a      	adds	r2, r3, #4
 80126a6:	60fa      	str	r2, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 80126ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80126b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80126b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80126b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126bc:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80126c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c2:	3b01      	subs	r3, #1
 80126c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80126c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d1ea      	bne.n	80126a2 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	ee07 3a90 	vmov	s15, r3
 80126d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80126d6:	edd7 6a08 	vldr	s13, [r7, #32]
 80126da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126de:	edc7 7a06 	vstr	s15, [r7, #24]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80126e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80126ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f2:	db09      	blt.n	8012708 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80126f4:	ed97 0a06 	vldr	s0, [r7, #24]
 80126f8:	f007 f9e8 	bl	8019acc <sqrtf>
 80126fc:	eef0 7a40 	vmov.f32	s15, s0
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8012706:	e004      	b.n	8012712 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	f04f 0200 	mov.w	r2, #0
 801270e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8012710:	bf00      	nop
}
 8012712:	bf00      	nop
 8012714:	3728      	adds	r7, #40	; 0x28
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}

0801271a <arm_var_f32>:
#else
void arm_var_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801271a:	b480      	push	{r7}
 801271c:	b08b      	sub	sp, #44	; 0x2c
 801271e:	af00      	add	r7, sp, #0
 8012720:	60f8      	str	r0, [r7, #12]
 8012722:	60b9      	str	r1, [r7, #8]
 8012724:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8012726:	f04f 0300 	mov.w	r3, #0
 801272a:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 801272c:	f04f 0300 	mov.w	r3, #0
 8012730:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	61bb      	str	r3, [r7, #24]

  if (blockSize <= 1U)
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2b01      	cmp	r3, #1
 801273a:	d804      	bhi.n	8012746 <arm_var_f32+0x2c>
  {
    *pResult = 0;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f04f 0200 	mov.w	r2, #0
 8012742:	601a      	str	r2, [r3, #0]
    return;
 8012744:	e04e      	b.n	80127e4 <arm_var_f32+0xca>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801274a:	e00d      	b.n	8012768 <arm_var_f32+0x4e>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */

    sum += *pInput++;
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	1d1a      	adds	r2, r3, #4
 8012750:	61ba      	str	r2, [r7, #24]
 8012752:	edd3 7a00 	vldr	s15, [r3]
 8012756:	ed97 7a08 	vldr	s14, [r7, #32]
 801275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801275e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8012762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012764:	3b01      	subs	r3, #1
 8012766:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8012768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801276a:	2b00      	cmp	r3, #0
 801276c:	d1ee      	bne.n	801274c <arm_var_f32+0x32>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  fMean = sum / (float32_t) blockSize;
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	ee07 3a90 	vmov	s15, r3
 8012774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012778:	edd7 6a08 	vldr	s13, [r7, #32]
 801277c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012780:	edc7 7a05 	vstr	s15, [r7, #20]

  pInput = pSrc;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801278c:	e017      	b.n	80127be <arm_var_f32+0xa4>
  {
    fValue = *pInput++ - fMean;
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	1d1a      	adds	r2, r3, #4
 8012792:	61ba      	str	r2, [r7, #24]
 8012794:	ed93 7a00 	vldr	s14, [r3]
 8012798:	edd7 7a05 	vldr	s15, [r7, #20]
 801279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127a0:	edc7 7a04 	vstr	s15, [r7, #16]
    fSum += fValue * fValue;
 80127a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80127a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80127ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80127b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127b4:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement loop counter */
    blkCnt--;
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	3b01      	subs	r3, #1
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d1e4      	bne.n	801278e <arm_var_f32+0x74>
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	ee07 3a90 	vmov	s15, r3
 80127ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80127d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80127da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	edc3 7a00 	vstr	s15, [r3]
}
 80127e4:	372c      	adds	r7, #44	; 0x2c
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr

080127ee <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80127ee:	b480      	push	{r7}
 80127f0:	b089      	sub	sp, #36	; 0x24
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	60f8      	str	r0, [r7, #12]
 80127f6:	460b      	mov	r3, r1
 80127f8:	607a      	str	r2, [r7, #4]
 80127fa:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80127fc:	2300      	movs	r3, #0
 80127fe:	61fb      	str	r3, [r7, #28]
 8012800:	e043      	b.n	801288a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	687a      	ldr	r2, [r7, #4]
 8012808:	4413      	add	r3, r2
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	089b      	lsrs	r3, r3, #2
 801280e:	b29b      	uxth	r3, r3
 8012810:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	3301      	adds	r3, #1
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	4413      	add	r3, r2
 801281c:	881b      	ldrh	r3, [r3, #0]
 801281e:	089b      	lsrs	r3, r3, #2
 8012820:	b29b      	uxth	r3, r3
 8012822:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	4413      	add	r3, r2
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	441a      	add	r2, r3
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	68f9      	ldr	r1, [r7, #12]
 801283e:	440b      	add	r3, r1
 8012840:	6812      	ldr	r2, [r2, #0]
 8012842:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	4413      	add	r3, r2
 801284c:	693a      	ldr	r2, [r7, #16]
 801284e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	3301      	adds	r3, #1
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	68fa      	ldr	r2, [r7, #12]
 8012858:	4413      	add	r3, r2
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	3301      	adds	r3, #1
 8012862:	009b      	lsls	r3, r3, #2
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	441a      	add	r2, r3
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	3301      	adds	r3, #1
 801286c:	009b      	lsls	r3, r3, #2
 801286e:	68f9      	ldr	r1, [r7, #12]
 8012870:	440b      	add	r3, r1
 8012872:	6812      	ldr	r2, [r2, #0]
 8012874:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	3301      	adds	r3, #1
 801287a:	009b      	lsls	r3, r3, #2
 801287c:	68fa      	ldr	r2, [r7, #12]
 801287e:	4413      	add	r3, r2
 8012880:	693a      	ldr	r2, [r7, #16]
 8012882:	601a      	str	r2, [r3, #0]

    i += 2;
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	3302      	adds	r3, #2
 8012888:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801288a:	897b      	ldrh	r3, [r7, #10]
 801288c:	69fa      	ldr	r2, [r7, #28]
 801288e:	429a      	cmp	r2, r3
 8012890:	d3b7      	bcc.n	8012802 <arm_bitreversal_32+0x14>
  }
}
 8012892:	bf00      	nop
 8012894:	bf00      	nop
 8012896:	3724      	adds	r7, #36	; 0x24
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b0a0      	sub	sp, #128	; 0x80
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	881b      	ldrh	r3, [r3, #0]
 80128ae:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80128b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	683a      	ldr	r2, [r7, #0]
 80128b6:	4413      	add	r3, r2
 80128b8:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80128c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80128c6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80128c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128ca:	085b      	lsrs	r3, r3, #1
 80128cc:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80128ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	683a      	ldr	r2, [r7, #0]
 80128d4:	4413      	add	r3, r2
 80128d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80128d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80128de:	4413      	add	r3, r2
 80128e0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80128e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80128e4:	089b      	lsrs	r3, r3, #2
 80128e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80128e8:	e1b6      	b.n	8012c58 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	689b      	ldr	r3, [r3, #8]
 80128fa:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	68db      	ldr	r3, [r3, #12]
 8012900:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8012902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8012908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 801290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012910:	689b      	ldr	r3, [r3, #8]
 8012912:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8012914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 801291a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8012920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8012926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 801292c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8012932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8012938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 801293e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8012944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 801294a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801294e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	1d1a      	adds	r2, r3, #4
 8012956:	603a      	str	r2, [r7, #0]
 8012958:	ee77 7a27 	vadd.f32	s15, s14, s15
 801295c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8012960:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012964:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	1d1a      	adds	r2, r3, #4
 801296c:	603a      	str	r2, [r7, #0]
 801296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012972:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8012976:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801297a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	1d1a      	adds	r2, r3, #4
 8012982:	603a      	str	r2, [r7, #0]
 8012984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012988:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801298c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012990:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	1d1a      	adds	r2, r3, #4
 8012998:	603a      	str	r2, [r7, #0]
 801299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801299e:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 80129a2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80129a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80129aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80129b2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80129b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80129ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80129c2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80129c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80129ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129ce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80129d2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80129d6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80129da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80129e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80129e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80129ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129ec:	1d1a      	adds	r2, r3, #4
 80129ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80129f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129f4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80129f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80129fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8012a00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a02:	1d1a      	adds	r2, r3, #4
 8012a04:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a0a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8012a0e:	ed97 7a08 	vldr	s14, [r7, #32]
 8012a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8012a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a18:	1d1a      	adds	r2, r3, #4
 8012a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a20:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8012a24:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8012a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a2e:	1d1a      	adds	r2, r3, #4
 8012a30:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a36:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8012a3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8012a3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a46:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8012a4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012a4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a56:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8012a5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8012a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a66:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8012a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a76:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8012a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a7c:	1d1a      	adds	r2, r3, #4
 8012a7e:	673a      	str	r2, [r7, #112]	; 0x70
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8012a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a86:	1d1a      	adds	r2, r3, #4
 8012a88:	673a      	str	r2, [r7, #112]	; 0x70
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8012a8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012a92:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a9a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8012a9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012aa2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aaa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8012aae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012ab2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8012abe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012ac2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8012ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ad0:	1d1a      	adds	r2, r3, #4
 8012ad2:	677a      	str	r2, [r7, #116]	; 0x74
 8012ad4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012ad8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ae0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8012ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ae6:	1d1a      	adds	r2, r3, #4
 8012ae8:	677a      	str	r2, [r7, #116]	; 0x74
 8012aea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012aee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012af6:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8012afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8012afe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b06:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8012b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b0e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b16:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8012b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8012b1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b26:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8012b2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8012b2e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b36:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8012b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b3c:	1d1a      	adds	r2, r3, #4
 8012b3e:	67ba      	str	r2, [r7, #120]	; 0x78
 8012b40:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012b44:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b4c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8012b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b52:	1d1a      	adds	r2, r3, #4
 8012b54:	67ba      	str	r2, [r7, #120]	; 0x78
 8012b56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012b5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b62:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8012b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b68:	1d1a      	adds	r2, r3, #4
 8012b6a:	673a      	str	r2, [r7, #112]	; 0x70
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8012b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b72:	1d1a      	adds	r2, r3, #4
 8012b74:	673a      	str	r2, [r7, #112]	; 0x70
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8012b7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012b7e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b86:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8012b8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012b8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b96:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8012b9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012b9e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ba6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8012baa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012bae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bb6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8012bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bbc:	1d1a      	adds	r2, r3, #4
 8012bbe:	677a      	str	r2, [r7, #116]	; 0x74
 8012bc0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012bc4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bcc:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8012bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bd2:	1d1a      	adds	r2, r3, #4
 8012bd4:	677a      	str	r2, [r7, #116]	; 0x74
 8012bd6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012bda:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012be2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8012be6:	edd7 7a04 	vldr	s15, [r7, #16]
 8012bea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bf2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8012bf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012bfa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c02:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8012c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c0a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c12:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8012c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8012c1a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c22:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8012c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c28:	1d1a      	adds	r2, r3, #4
 8012c2a:	67ba      	str	r2, [r7, #120]	; 0x78
 8012c2c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012c30:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c38:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8012c3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c3e:	1d1a      	adds	r2, r3, #4
 8012c40:	67ba      	str	r2, [r7, #120]	; 0x78
 8012c42:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012c46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c4e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8012c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c54:	3b01      	subs	r3, #1
 8012c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f47f ae45 	bne.w	80128ea <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8012c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c62:	b299      	uxth	r1, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	685a      	ldr	r2, [r3, #4]
 8012c68:	2302      	movs	r3, #2
 8012c6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012c6c:	f000 fef6 	bl	8013a5c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8012c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012c72:	b299      	uxth	r1, r3
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685a      	ldr	r2, [r3, #4]
 8012c78:	2302      	movs	r3, #2
 8012c7a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012c7c:	f000 feee 	bl	8013a5c <arm_radix8_butterfly_f32>
}
 8012c80:	bf00      	nop
 8012c82:	3780      	adds	r7, #128	; 0x80
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b0ac      	sub	sp, #176	; 0xb0
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	881b      	ldrh	r3, [r3, #0]
 8012c96:	085b      	lsrs	r3, r3, #1
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8012c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	683a      	ldr	r2, [r7, #0]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8012cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012cb6:	4413      	add	r3, r2
 8012cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8012cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012cc6:	4413      	add	r3, r2
 8012cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8012cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012cd4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8012cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012cda:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8012cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ce0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8012ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012ce6:	3b04      	subs	r3, #4
 8012ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8012cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012cf0:	3b04      	subs	r3, #4
 8012cf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8012cf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012cfa:	3b04      	subs	r3, #4
 8012cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8012d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012d0a:	4413      	add	r3, r2
 8012d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8012d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d2c:	085b      	lsrs	r3, r3, #1
 8012d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8012d32:	2302      	movs	r3, #2
 8012d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8012d36:	2304      	movs	r3, #4
 8012d38:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8012d3a:	2306      	movs	r3, #6
 8012d3c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	ed93 7a00 	vldr	s14, [r3]
 8012d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d48:	edd3 7a00 	vldr	s15, [r3]
 8012d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d50:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	ed93 7a00 	vldr	s14, [r3]
 8012d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d5e:	edd3 7a00 	vldr	s15, [r3]
 8012d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d66:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	ed93 7a00 	vldr	s14, [r3]
 8012d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d76:	3304      	adds	r3, #4
 8012d78:	edd3 7a00 	vldr	s15, [r3]
 8012d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d80:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	3304      	adds	r3, #4
 8012d88:	ed93 7a00 	vldr	s14, [r3]
 8012d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d90:	3304      	adds	r3, #4
 8012d92:	edd3 7a00 	vldr	s15, [r3]
 8012d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d9a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8012d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012da2:	3304      	adds	r3, #4
 8012da4:	ed93 7a00 	vldr	s14, [r3]
 8012da8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012db4:	3304      	adds	r3, #4
 8012db6:	edd3 7a00 	vldr	s15, [r3]
 8012dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8012dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012dc6:	edd3 7a00 	vldr	s15, [r3]
 8012dca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012dce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012dd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012dd6:	edd3 7a00 	vldr	s15, [r3]
 8012dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012dde:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8012de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012de6:	edd3 7a00 	vldr	s15, [r3]
 8012dea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012df6:	edd3 7a00 	vldr	s15, [r3]
 8012dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012dfe:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8012e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e06:	3304      	adds	r3, #4
 8012e08:	edd3 7a00 	vldr	s15, [r3]
 8012e0c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e18:	3304      	adds	r3, #4
 8012e1a:	edd3 7a00 	vldr	s15, [r3]
 8012e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e22:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8012e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e2a:	3304      	adds	r3, #4
 8012e2c:	edd3 7a00 	vldr	s15, [r3]
 8012e30:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012e34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	edd3 7a00 	vldr	s15, [r3]
 8012e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e46:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8012e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e4e:	ed93 7a00 	vldr	s14, [r3]
 8012e52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8012e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e5e:	edd3 7a00 	vldr	s15, [r3]
 8012e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e66:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8012e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e6e:	ed93 7a00 	vldr	s14, [r3]
 8012e72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8012e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e7e:	edd3 7a00 	vldr	s15, [r3]
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	1d1a      	adds	r2, r3, #4
 8012e86:	603a      	str	r2, [r7, #0]
 8012e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e8c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8012e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e94:	3304      	adds	r3, #4
 8012e96:	ed93 7a00 	vldr	s14, [r3]
 8012e9a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8012e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	edd3 7a00 	vldr	s15, [r3]
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	1d1a      	adds	r2, r3, #4
 8012eb0:	603a      	str	r2, [r7, #0]
 8012eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012eb6:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8012eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012ebe:	1d1a      	adds	r2, r3, #4
 8012ec0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8012ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ec6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8012ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012ecc:	1d1a      	adds	r2, r3, #4
 8012ece:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8012ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ed4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8012ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012eda:	1d1a      	adds	r2, r3, #4
 8012edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012ee0:	69fa      	ldr	r2, [r7, #28]
 8012ee2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8012ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ee8:	1d1a      	adds	r2, r3, #4
 8012eea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8012eee:	6a3a      	ldr	r2, [r7, #32]
 8012ef0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8012ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ef6:	1d1a      	adds	r2, r3, #4
 8012ef8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8012f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012f04:	1d1a      	adds	r2, r3, #4
 8012f06:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8012f0a:	693a      	ldr	r2, [r7, #16]
 8012f0c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8012f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012f16:	4413      	add	r3, r2
 8012f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8012f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012f24:	4413      	add	r3, r2
 8012f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8012f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012f32:	4413      	add	r3, r2
 8012f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8012f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f3c:	3b02      	subs	r3, #2
 8012f3e:	085b      	lsrs	r3, r3, #1
 8012f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012f44:	e31c      	b.n	8013580 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	ed93 7a00 	vldr	s14, [r3]
 8012f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f50:	edd3 7a00 	vldr	s15, [r3]
 8012f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f58:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	ed93 7a00 	vldr	s14, [r3]
 8012f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f66:	edd3 7a00 	vldr	s15, [r3]
 8012f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f6e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	3304      	adds	r3, #4
 8012f76:	ed93 7a00 	vldr	s14, [r3]
 8012f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f7e:	3304      	adds	r3, #4
 8012f80:	edd3 7a00 	vldr	s15, [r3]
 8012f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f88:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	3304      	adds	r3, #4
 8012f90:	ed93 7a00 	vldr	s14, [r3]
 8012f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f98:	3304      	adds	r3, #4
 8012f9a:	edd3 7a00 	vldr	s15, [r3]
 8012f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fa2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8012fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012faa:	3304      	adds	r3, #4
 8012fac:	ed93 7a00 	vldr	s14, [r3]
 8012fb0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fbc:	3304      	adds	r3, #4
 8012fbe:	edd3 7a00 	vldr	s15, [r3]
 8012fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fc6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8012fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fce:	edd3 7a00 	vldr	s15, [r3]
 8012fd2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012fda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fde:	edd3 7a00 	vldr	s15, [r3]
 8012fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fe6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8012fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fee:	edd3 7a00 	vldr	s15, [r3]
 8012ff2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ffe:	edd3 7a00 	vldr	s15, [r3]
 8013002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013006:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 801300a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801300e:	3304      	adds	r3, #4
 8013010:	edd3 7a00 	vldr	s15, [r3]
 8013014:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013018:	ee37 7a67 	vsub.f32	s14, s14, s15
 801301c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013020:	3304      	adds	r3, #4
 8013022:	edd3 7a00 	vldr	s15, [r3]
 8013026:	ee77 7a67 	vsub.f32	s15, s14, s15
 801302a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 801302e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013032:	3304      	adds	r3, #4
 8013034:	edd3 7a00 	vldr	s15, [r3]
 8013038:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801303c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013044:	3304      	adds	r3, #4
 8013046:	edd3 7a00 	vldr	s15, [r3]
 801304a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801304e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8013052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013056:	ed93 7a00 	vldr	s14, [r3]
 801305a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801305e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013066:	edd3 7a00 	vldr	s15, [r3]
 801306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801306e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8013072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013076:	ed93 7a00 	vldr	s14, [r3]
 801307a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801307e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013086:	edd3 7a00 	vldr	s15, [r3]
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	1d1a      	adds	r2, r3, #4
 801308e:	603a      	str	r2, [r7, #0]
 8013090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013094:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801309c:	3304      	adds	r3, #4
 801309e:	ed93 7a00 	vldr	s14, [r3]
 80130a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80130a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80130aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80130ae:	3304      	adds	r3, #4
 80130b0:	edd3 7a00 	vldr	s15, [r3]
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	1d1a      	adds	r2, r3, #4
 80130b8:	603a      	str	r2, [r7, #0]
 80130ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130be:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80130c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80130c6:	3b04      	subs	r3, #4
 80130c8:	ed93 7a00 	vldr	s14, [r3]
 80130cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80130d0:	3b04      	subs	r3, #4
 80130d2:	edd3 7a00 	vldr	s15, [r3]
 80130d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80130de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80130e2:	3b04      	subs	r3, #4
 80130e4:	ed93 7a00 	vldr	s14, [r3]
 80130e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80130ec:	3b04      	subs	r3, #4
 80130ee:	edd3 7a00 	vldr	s15, [r3]
 80130f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80130fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80130fe:	ed93 7a00 	vldr	s14, [r3]
 8013102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013106:	edd3 7a00 	vldr	s15, [r3]
 801310a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801310e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8013112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013116:	ed93 7a00 	vldr	s14, [r3]
 801311a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801311e:	edd3 7a00 	vldr	s15, [r3]
 8013122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013126:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 801312a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801312e:	ed93 7a00 	vldr	s14, [r3]
 8013132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013136:	edd3 7a00 	vldr	s15, [r3]
 801313a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801313e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013146:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 801314a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801314e:	ed93 7a00 	vldr	s14, [r3]
 8013152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013156:	edd3 7a00 	vldr	s15, [r3]
 801315a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801315e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013162:	3b04      	subs	r3, #4
 8013164:	edd3 7a00 	vldr	s15, [r3]
 8013168:	ee37 7a67 	vsub.f32	s14, s14, s15
 801316c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013170:	3b04      	subs	r3, #4
 8013172:	edd3 7a00 	vldr	s15, [r3]
 8013176:	ee77 7a27 	vadd.f32	s15, s14, s15
 801317a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 801317e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013182:	3b04      	subs	r3, #4
 8013184:	edd3 7a00 	vldr	s15, [r3]
 8013188:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801318c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013190:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013194:	3b04      	subs	r3, #4
 8013196:	edd3 7a00 	vldr	s15, [r3]
 801319a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801319e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 80131a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80131a6:	edd3 7a00 	vldr	s15, [r3]
 80131aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80131ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131b6:	edd3 7a00 	vldr	s15, [r3]
 80131ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 80131c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80131c6:	ed93 7a00 	vldr	s14, [r3]
 80131ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131ce:	edd3 7a00 	vldr	s15, [r3]
 80131d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80131da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131de:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80131e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80131e6:	3b04      	subs	r3, #4
 80131e8:	ed93 7a00 	vldr	s14, [r3]
 80131ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80131f0:	3b04      	subs	r3, #4
 80131f2:	edd3 7a00 	vldr	s15, [r3]
 80131f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80131fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013202:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8013206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801320a:	ed93 7a00 	vldr	s14, [r3]
 801320e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801321a:	edd3 7a00 	vldr	s15, [r3]
 801321e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013222:	1f1a      	subs	r2, r3, #4
 8013224:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013228:	ee77 7a27 	vadd.f32	s15, s14, s15
 801322c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8013230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013234:	3b04      	subs	r3, #4
 8013236:	ed93 7a00 	vldr	s14, [r3]
 801323a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801323e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013246:	3b04      	subs	r3, #4
 8013248:	edd3 7a00 	vldr	s15, [r3]
 801324c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013250:	1f1a      	subs	r2, r3, #4
 8013252:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013256:	ee77 7a27 	vadd.f32	s15, s14, s15
 801325a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 801325e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013262:	1d1a      	adds	r2, r3, #4
 8013264:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 801326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013270:	1d1a      	adds	r2, r3, #4
 8013272:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 801327a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801327e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013286:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 801328a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801328e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013296:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 801329a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801329e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80132a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 80132aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80132ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80132b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 80132ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132be:	1d1a      	adds	r2, r3, #4
 80132c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80132c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80132c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80132cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132d0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 80132d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80132d8:	1d1a      	adds	r2, r3, #4
 80132da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80132de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80132e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80132e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132ea:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80132ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80132f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80132f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80132fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013302:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801330a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 801330e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013312:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013316:	ee67 7a27 	vmul.f32	s15, s14, s15
 801331a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 801331e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013322:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013326:	ee67 7a27 	vmul.f32	s15, s14, s15
 801332a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 801332e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013332:	1f1a      	subs	r2, r3, #4
 8013334:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013338:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801333c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013344:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8013348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801334c:	1f1a      	subs	r2, r3, #4
 801334e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013352:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013356:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801335a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801335e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8013362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 801336a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801336e:	3304      	adds	r3, #4
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8013374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801337c:	4413      	add	r3, r2
 801337e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8013382:	edd7 7a07 	vldr	s15, [r7, #28]
 8013386:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801338e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8013392:	edd7 7a08 	vldr	s15, [r7, #32]
 8013396:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801339e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 80133a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80133a6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80133aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80133b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80133b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80133ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80133c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80133c6:	1d1a      	adds	r2, r3, #4
 80133c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80133cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80133d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80133d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133d8:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80133dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80133e0:	1d1a      	adds	r2, r3, #4
 80133e2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80133e6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80133ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80133ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133f2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80133f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80133fa:	eef1 7a67 	vneg.f32	s15, s15
 80133fe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013406:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 801340a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801340e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013416:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 801341a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801341e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013426:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 801342a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801342e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013436:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 801343a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801343e:	1f1a      	subs	r2, r3, #4
 8013440:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013444:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013448:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801344c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013450:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8013454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013458:	1f1a      	subs	r2, r3, #4
 801345a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801345e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013462:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8013466:	ee77 7a67 	vsub.f32	s15, s14, s15
 801346a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 801346e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8013476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801347a:	3304      	adds	r3, #4
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8013480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013488:	4413      	add	r3, r2
 801348a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 801348e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013492:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801349a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 801349e:	edd7 7a04 	vldr	s15, [r7, #16]
 80134a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80134a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 80134ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80134b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80134b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134ba:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 80134be:	edd7 7a03 	vldr	s15, [r7, #12]
 80134c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80134c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80134ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80134d2:	1d1a      	adds	r2, r3, #4
 80134d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80134d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80134dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80134e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134e4:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80134e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80134ec:	1d1a      	adds	r2, r3, #4
 80134ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80134f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80134f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80134fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134fe:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8013502:	edd7 7a06 	vldr	s15, [r7, #24]
 8013506:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801350e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8013512:	edd7 7a05 	vldr	s15, [r7, #20]
 8013516:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801351e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8013522:	edd7 7a05 	vldr	s15, [r7, #20]
 8013526:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801352e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8013532:	edd7 7a06 	vldr	s15, [r7, #24]
 8013536:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801353e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8013542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013546:	1f1a      	subs	r2, r3, #4
 8013548:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801354c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013550:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013558:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 801355c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013560:	1f1a      	subs	r2, r3, #4
 8013562:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013566:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801356a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013572:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8013576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801357a:	3b01      	subs	r3, #1
 801357c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013584:	2b00      	cmp	r3, #0
 8013586:	f47f acde 	bne.w	8012f46 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	ed93 7a00 	vldr	s14, [r3]
 8013590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013594:	edd3 7a00 	vldr	s15, [r3]
 8013598:	ee77 7a27 	vadd.f32	s15, s14, s15
 801359c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	ed93 7a00 	vldr	s14, [r3]
 80135a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80135aa:	edd3 7a00 	vldr	s15, [r3]
 80135ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135b2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	3304      	adds	r3, #4
 80135ba:	ed93 7a00 	vldr	s14, [r3]
 80135be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80135c2:	3304      	adds	r3, #4
 80135c4:	edd3 7a00 	vldr	s15, [r3]
 80135c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	3304      	adds	r3, #4
 80135d4:	ed93 7a00 	vldr	s14, [r3]
 80135d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80135dc:	3304      	adds	r3, #4
 80135de:	edd3 7a00 	vldr	s15, [r3]
 80135e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135e6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80135ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80135ee:	3304      	adds	r3, #4
 80135f0:	ed93 7a00 	vldr	s14, [r3]
 80135f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80135f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80135fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013600:	3304      	adds	r3, #4
 8013602:	edd3 7a00 	vldr	s15, [r3]
 8013606:	ee77 7a67 	vsub.f32	s15, s14, s15
 801360a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 801360e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013612:	edd3 7a00 	vldr	s15, [r3]
 8013616:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801361a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801361e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013622:	edd3 7a00 	vldr	s15, [r3]
 8013626:	ee77 7a27 	vadd.f32	s15, s14, s15
 801362a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 801362e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013632:	edd3 7a00 	vldr	s15, [r3]
 8013636:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801363a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801363e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013642:	edd3 7a00 	vldr	s15, [r3]
 8013646:	ee77 7a67 	vsub.f32	s15, s14, s15
 801364a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801364e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013652:	3304      	adds	r3, #4
 8013654:	edd3 7a00 	vldr	s15, [r3]
 8013658:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801365c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013664:	3304      	adds	r3, #4
 8013666:	edd3 7a00 	vldr	s15, [r3]
 801366a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801366e:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8013672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013676:	3304      	adds	r3, #4
 8013678:	edd3 7a00 	vldr	s15, [r3]
 801367c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013688:	3304      	adds	r3, #4
 801368a:	edd3 7a00 	vldr	s15, [r3]
 801368e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013692:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8013696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801369a:	ed93 7a00 	vldr	s14, [r3]
 801369e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80136a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136aa:	edd3 7a00 	vldr	s15, [r3]
 80136ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136b2:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80136b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80136ba:	ed93 7a00 	vldr	s14, [r3]
 80136be:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80136c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136ca:	edd3 7a00 	vldr	s15, [r3]
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	1d1a      	adds	r2, r3, #4
 80136d2:	603a      	str	r2, [r7, #0]
 80136d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136d8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80136dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80136e0:	3304      	adds	r3, #4
 80136e2:	ed93 7a00 	vldr	s14, [r3]
 80136e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80136ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136f2:	3304      	adds	r3, #4
 80136f4:	edd3 7a00 	vldr	s15, [r3]
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	1d1a      	adds	r2, r3, #4
 80136fc:	603a      	str	r2, [r7, #0]
 80136fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013702:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8013706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 801370e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013712:	3304      	adds	r3, #4
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8013718:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801371c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013724:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8013728:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801372c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013734:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8013738:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801373c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013744:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8013748:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801374c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013754:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8013758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801375c:	1d1a      	adds	r2, r3, #4
 801375e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013762:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013766:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801376a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801376e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8013772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013776:	1d1a      	adds	r2, r3, #4
 8013778:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801377c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013780:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013788:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 801378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8013794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013798:	3304      	adds	r3, #4
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 801379e:	edd7 7a07 	vldr	s15, [r7, #28]
 80137a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80137a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80137ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80137b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80137b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80137be:	edd7 7a08 	vldr	s15, [r7, #32]
 80137c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80137c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80137ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80137d2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80137d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80137de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80137e2:	1d1a      	adds	r2, r3, #4
 80137e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80137e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80137ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80137f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137f4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80137f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80137fc:	1d1a      	adds	r2, r3, #4
 80137fe:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013802:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013806:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801380a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801380e:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8013812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 801381a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801381e:	3304      	adds	r3, #4
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8013824:	edd7 7a03 	vldr	s15, [r7, #12]
 8013828:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013830:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8013834:	edd7 7a04 	vldr	s15, [r7, #16]
 8013838:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013840:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8013844:	edd7 7a04 	vldr	s15, [r7, #16]
 8013848:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801384c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013850:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8013854:	edd7 7a03 	vldr	s15, [r7, #12]
 8013858:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801385c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013860:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8013864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013868:	1d1a      	adds	r2, r3, #4
 801386a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801386e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013872:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013876:	ee77 7a27 	vadd.f32	s15, s14, s15
 801387a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801387e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013882:	1d1a      	adds	r2, r3, #4
 8013884:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013888:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801388c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013894:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8013898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801389c:	b299      	uxth	r1, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	685a      	ldr	r2, [r3, #4]
 80138a2:	2304      	movs	r3, #4
 80138a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80138a6:	f000 f8d9 	bl	8013a5c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80138aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80138ae:	b299      	uxth	r1, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	2304      	movs	r3, #4
 80138b6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80138b8:	f000 f8d0 	bl	8013a5c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80138bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80138c0:	b299      	uxth	r1, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	685a      	ldr	r2, [r3, #4]
 80138c6:	2304      	movs	r3, #4
 80138c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80138ca:	f000 f8c7 	bl	8013a5c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80138ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80138d2:	b299      	uxth	r1, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	685a      	ldr	r2, [r3, #4]
 80138d8:	2304      	movs	r3, #4
 80138da:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80138dc:	f000 f8be 	bl	8013a5c <arm_radix8_butterfly_f32>
}
 80138e0:	bf00      	nop
 80138e2:	37b0      	adds	r7, #176	; 0xb0
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b088      	sub	sp, #32
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	4611      	mov	r1, r2
 80138f4:	461a      	mov	r2, r3
 80138f6:	460b      	mov	r3, r1
 80138f8:	71fb      	strb	r3, [r7, #7]
 80138fa:	4613      	mov	r3, r2
 80138fc:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	881b      	ldrh	r3, [r3, #0]
 8013902:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8013904:	79fb      	ldrb	r3, [r7, #7]
 8013906:	2b01      	cmp	r3, #1
 8013908:	d117      	bne.n	801393a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	3304      	adds	r3, #4
 801390e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8013910:	2300      	movs	r3, #0
 8013912:	61fb      	str	r3, [r7, #28]
 8013914:	e00d      	b.n	8013932 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	edd3 7a00 	vldr	s15, [r3]
 801391c:	eef1 7a67 	vneg.f32	s15, s15
 8013920:	69bb      	ldr	r3, [r7, #24]
 8013922:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	3308      	adds	r3, #8
 801392a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	3301      	adds	r3, #1
 8013930:	61fb      	str	r3, [r7, #28]
 8013932:	69fa      	ldr	r2, [r7, #28]
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	429a      	cmp	r2, r3
 8013938:	d3ed      	bcc.n	8013916 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013940:	d040      	beq.n	80139c4 <arm_cfft_f32+0xdc>
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013948:	d845      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013950:	d033      	beq.n	80139ba <arm_cfft_f32+0xd2>
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013958:	d83d      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013960:	d026      	beq.n	80139b0 <arm_cfft_f32+0xc8>
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013968:	d835      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013970:	d028      	beq.n	80139c4 <arm_cfft_f32+0xdc>
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013978:	d82d      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013980:	d01b      	beq.n	80139ba <arm_cfft_f32+0xd2>
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013988:	d825      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	2b80      	cmp	r3, #128	; 0x80
 801398e:	d00f      	beq.n	80139b0 <arm_cfft_f32+0xc8>
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	2b80      	cmp	r3, #128	; 0x80
 8013994:	d81f      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 8013996:	697b      	ldr	r3, [r7, #20]
 8013998:	2b40      	cmp	r3, #64	; 0x40
 801399a:	d013      	beq.n	80139c4 <arm_cfft_f32+0xdc>
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	2b40      	cmp	r3, #64	; 0x40
 80139a0:	d819      	bhi.n	80139d6 <arm_cfft_f32+0xee>
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	2b10      	cmp	r3, #16
 80139a6:	d003      	beq.n	80139b0 <arm_cfft_f32+0xc8>
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	2b20      	cmp	r3, #32
 80139ac:	d005      	beq.n	80139ba <arm_cfft_f32+0xd2>
 80139ae:	e012      	b.n	80139d6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80139b0:	68b9      	ldr	r1, [r7, #8]
 80139b2:	68f8      	ldr	r0, [r7, #12]
 80139b4:	f7fe ff74 	bl	80128a0 <arm_cfft_radix8by2_f32>
    break;
 80139b8:	e00d      	b.n	80139d6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80139ba:	68b9      	ldr	r1, [r7, #8]
 80139bc:	68f8      	ldr	r0, [r7, #12]
 80139be:	f7ff f963 	bl	8012c88 <arm_cfft_radix8by4_f32>
    break;
 80139c2:	e008      	b.n	80139d6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	b299      	uxth	r1, r3
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	685a      	ldr	r2, [r3, #4]
 80139cc:	2301      	movs	r3, #1
 80139ce:	68b8      	ldr	r0, [r7, #8]
 80139d0:	f000 f844 	bl	8013a5c <arm_radix8_butterfly_f32>
    break;
 80139d4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80139d6:	79bb      	ldrb	r3, [r7, #6]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d007      	beq.n	80139ec <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	8999      	ldrh	r1, [r3, #12]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	461a      	mov	r2, r3
 80139e6:	68b8      	ldr	r0, [r7, #8]
 80139e8:	f7fe ff01 	bl	80127ee <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80139ec:	79fb      	ldrb	r3, [r7, #7]
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d130      	bne.n	8013a54 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	ee07 3a90 	vmov	s15, r3
 80139f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80139fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a04:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
 8013a10:	e01c      	b.n	8013a4c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	1d1a      	adds	r2, r3, #4
 8013a16:	61ba      	str	r2, [r7, #24]
 8013a18:	ed93 7a00 	vldr	s14, [r3]
 8013a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a24:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	edd3 7a00 	vldr	s15, [r3]
 8013a2e:	eeb1 7a67 	vneg.f32	s14, s15
 8013a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8013a40:	69bb      	ldr	r3, [r7, #24]
 8013a42:	3304      	adds	r3, #4
 8013a44:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	61fb      	str	r3, [r7, #28]
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d3de      	bcc.n	8013a12 <arm_cfft_f32+0x12a>
    }
  }
}
 8013a54:	bf00      	nop
 8013a56:	3720      	adds	r7, #32
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b0bd      	sub	sp, #244	; 0xf4
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	607a      	str	r2, [r7, #4]
 8013a66:	461a      	mov	r2, r3
 8013a68:	460b      	mov	r3, r1
 8013a6a:	817b      	strh	r3, [r7, #10]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8013a70:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <arm_radix8_butterfly_f32+0x3c>)
 8013a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8013a76:	897b      	ldrh	r3, [r7, #10]
 8013a78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8013a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8013a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013a88:	08db      	lsrs	r3, r3, #3
 8013a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013a94:	e002      	b.n	8013a9c <arm_radix8_butterfly_f32+0x40>
 8013a96:	bf00      	nop
 8013a98:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8013a9c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8013aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8013aaa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ab2:	4413      	add	r3, r2
 8013ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8013ab8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ac0:	4413      	add	r3, r2
 8013ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8013ac6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8013aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ace:	4413      	add	r3, r2
 8013ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8013ad4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013adc:	4413      	add	r3, r2
 8013ade:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8013ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013aea:	4413      	add	r3, r2
 8013aec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8013af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013af8:	4413      	add	r3, r2
 8013afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8013afe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013b02:	00db      	lsls	r3, r3, #3
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	4413      	add	r3, r2
 8013b08:	ed93 7a00 	vldr	s14, [r3]
 8013b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013b10:	00db      	lsls	r3, r3, #3
 8013b12:	68fa      	ldr	r2, [r7, #12]
 8013b14:	4413      	add	r3, r2
 8013b16:	edd3 7a00 	vldr	s15, [r3]
 8013b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b1e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8013b22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	68fa      	ldr	r2, [r7, #12]
 8013b2a:	4413      	add	r3, r2
 8013b2c:	ed93 7a00 	vldr	s14, [r3]
 8013b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013b34:	00db      	lsls	r3, r3, #3
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	4413      	add	r3, r2
 8013b3a:	edd3 7a00 	vldr	s15, [r3]
 8013b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b42:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8013b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	4413      	add	r3, r2
 8013b50:	ed93 7a00 	vldr	s14, [r3]
 8013b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013b58:	00db      	lsls	r3, r3, #3
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	4413      	add	r3, r2
 8013b5e:	edd3 7a00 	vldr	s15, [r3]
 8013b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b66:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8013b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	68fa      	ldr	r2, [r7, #12]
 8013b72:	4413      	add	r3, r2
 8013b74:	ed93 7a00 	vldr	s14, [r3]
 8013b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013b7c:	00db      	lsls	r3, r3, #3
 8013b7e:	68fa      	ldr	r2, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	edd3 7a00 	vldr	s15, [r3]
 8013b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b8a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8013b8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013b92:	00db      	lsls	r3, r3, #3
 8013b94:	68fa      	ldr	r2, [r7, #12]
 8013b96:	4413      	add	r3, r2
 8013b98:	ed93 7a00 	vldr	s14, [r3]
 8013b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013ba0:	00db      	lsls	r3, r3, #3
 8013ba2:	68fa      	ldr	r2, [r7, #12]
 8013ba4:	4413      	add	r3, r2
 8013ba6:	edd3 7a00 	vldr	s15, [r3]
 8013baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8013bb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013bb6:	00db      	lsls	r3, r3, #3
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	ed93 7a00 	vldr	s14, [r3]
 8013bc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013bc4:	00db      	lsls	r3, r3, #3
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	4413      	add	r3, r2
 8013bca:	edd3 7a00 	vldr	s15, [r3]
 8013bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bd2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8013bd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	4413      	add	r3, r2
 8013be0:	ed93 7a00 	vldr	s14, [r3]
 8013be4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013be8:	00db      	lsls	r3, r3, #3
 8013bea:	68fa      	ldr	r2, [r7, #12]
 8013bec:	4413      	add	r3, r2
 8013bee:	edd3 7a00 	vldr	s15, [r3]
 8013bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bf6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8013bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	68fa      	ldr	r2, [r7, #12]
 8013c02:	4413      	add	r3, r2
 8013c04:	ed93 7a00 	vldr	s14, [r3]
 8013c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013c0c:	00db      	lsls	r3, r3, #3
 8013c0e:	68fa      	ldr	r2, [r7, #12]
 8013c10:	4413      	add	r3, r2
 8013c12:	edd3 7a00 	vldr	s15, [r3]
 8013c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c1a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8013c1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013c22:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c2a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8013c2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013c32:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c3a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8013c3e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013c42:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c4a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8013c4e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013c52:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c5a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8013c5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013c62:	00db      	lsls	r3, r3, #3
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	4413      	add	r3, r2
 8013c68:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013c6c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c74:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8013c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013c7c:	00db      	lsls	r3, r3, #3
 8013c7e:	68fa      	ldr	r2, [r7, #12]
 8013c80:	4413      	add	r3, r2
 8013c82:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013c86:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c8e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8013c92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013c96:	00db      	lsls	r3, r3, #3
 8013c98:	3304      	adds	r3, #4
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	ed93 7a00 	vldr	s14, [r3]
 8013ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	3304      	adds	r3, #4
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	4413      	add	r3, r2
 8013cae:	edd3 7a00 	vldr	s15, [r3]
 8013cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cb6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8013cba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013cbe:	00db      	lsls	r3, r3, #3
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	ed93 7a00 	vldr	s14, [r3]
 8013cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013cce:	00db      	lsls	r3, r3, #3
 8013cd0:	3304      	adds	r3, #4
 8013cd2:	68fa      	ldr	r2, [r7, #12]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	edd3 7a00 	vldr	s15, [r3]
 8013cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cde:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8013ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013ce6:	00db      	lsls	r3, r3, #3
 8013ce8:	3304      	adds	r3, #4
 8013cea:	68fa      	ldr	r2, [r7, #12]
 8013cec:	4413      	add	r3, r2
 8013cee:	ed93 7a00 	vldr	s14, [r3]
 8013cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	3304      	adds	r3, #4
 8013cfa:	68fa      	ldr	r2, [r7, #12]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	edd3 7a00 	vldr	s15, [r3]
 8013d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d06:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8013d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013d0e:	00db      	lsls	r3, r3, #3
 8013d10:	3304      	adds	r3, #4
 8013d12:	68fa      	ldr	r2, [r7, #12]
 8013d14:	4413      	add	r3, r2
 8013d16:	ed93 7a00 	vldr	s14, [r3]
 8013d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	3304      	adds	r3, #4
 8013d22:	68fa      	ldr	r2, [r7, #12]
 8013d24:	4413      	add	r3, r2
 8013d26:	edd3 7a00 	vldr	s15, [r3]
 8013d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d2e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8013d32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d36:	00db      	lsls	r3, r3, #3
 8013d38:	3304      	adds	r3, #4
 8013d3a:	68fa      	ldr	r2, [r7, #12]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	ed93 7a00 	vldr	s14, [r3]
 8013d42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d46:	00db      	lsls	r3, r3, #3
 8013d48:	3304      	adds	r3, #4
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	edd3 7a00 	vldr	s15, [r3]
 8013d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d56:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8013d5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d5e:	00db      	lsls	r3, r3, #3
 8013d60:	3304      	adds	r3, #4
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	4413      	add	r3, r2
 8013d66:	ed93 7a00 	vldr	s14, [r3]
 8013d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	3304      	adds	r3, #4
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	4413      	add	r3, r2
 8013d76:	edd3 7a00 	vldr	s15, [r3]
 8013d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d7e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8013d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	3304      	adds	r3, #4
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	ed93 7a00 	vldr	s14, [r3]
 8013d92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013d96:	00db      	lsls	r3, r3, #3
 8013d98:	3304      	adds	r3, #4
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	edd3 7a00 	vldr	s15, [r3]
 8013da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013da6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8013daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	3304      	adds	r3, #4
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	4413      	add	r3, r2
 8013db6:	ed93 7a00 	vldr	s14, [r3]
 8013dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	3304      	adds	r3, #4
 8013dc2:	68fa      	ldr	r2, [r7, #12]
 8013dc4:	4413      	add	r3, r2
 8013dc6:	edd3 7a00 	vldr	s15, [r3]
 8013dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8013dd2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013dd6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dde:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8013de2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013de6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8013df2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013df6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dfe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8013e02:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013e06:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e0e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8013e12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013e16:	00db      	lsls	r3, r3, #3
 8013e18:	3304      	adds	r3, #4
 8013e1a:	68fa      	ldr	r2, [r7, #12]
 8013e1c:	4413      	add	r3, r2
 8013e1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013e22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8013e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e32:	00db      	lsls	r3, r3, #3
 8013e34:	3304      	adds	r3, #4
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013e3e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e46:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8013e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	4413      	add	r3, r2
 8013e54:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8013e58:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e60:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8013e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8013e72:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e7a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8013e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013e82:	00db      	lsls	r3, r3, #3
 8013e84:	3304      	adds	r3, #4
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	4413      	add	r3, r2
 8013e8a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8013e8e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e96:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8013e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013e9e:	00db      	lsls	r3, r3, #3
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8013eaa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eb2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8013eb6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8013eba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8013ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ec2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8013ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8013ece:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8013ed2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8013ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eda:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8013ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ee2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8013ee6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8013eea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8013eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ef2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8013ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013efa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8013efe:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8013f02:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8013f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f0a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8013f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f12:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8013f16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8013f1a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8013f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8013f26:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8013f2a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8013f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f32:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8013f36:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8013f3a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8013f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f42:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8013f46:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8013f4a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8013f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f52:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8013f56:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8013f5a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f62:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8013f66:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8013f6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f72:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8013f76:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8013f7a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8013f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f82:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8013f86:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8013f8a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8013f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f92:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8013f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	68fa      	ldr	r2, [r7, #12]
 8013f9e:	4413      	add	r3, r2
 8013fa0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8013fa4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8013fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fac:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8013fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013fb4:	00db      	lsls	r3, r3, #3
 8013fb6:	68fa      	ldr	r2, [r7, #12]
 8013fb8:	4413      	add	r3, r2
 8013fba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8013fbe:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8013fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fc6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8013fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	68fa      	ldr	r2, [r7, #12]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8013fd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8013fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fe0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8013fe4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	4413      	add	r3, r2
 8013fee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8013ff2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8013ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ffa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8013ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	3304      	adds	r3, #4
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	4413      	add	r3, r2
 801400a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801400e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8014012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014016:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 801401a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801401e:	00db      	lsls	r3, r3, #3
 8014020:	3304      	adds	r3, #4
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	4413      	add	r3, r2
 8014026:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 801402a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 801402e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014032:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8014036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	3304      	adds	r3, #4
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	4413      	add	r3, r2
 8014042:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014046:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801404a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801404e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8014052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014056:	00db      	lsls	r3, r3, #3
 8014058:	3304      	adds	r3, #4
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	4413      	add	r3, r2
 801405e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014062:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014066:	ee77 7a27 	vadd.f32	s15, s14, s15
 801406a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 801406e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014076:	4413      	add	r3, r2
 8014078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 801407c:	897b      	ldrh	r3, [r7, #10]
 801407e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014082:	429a      	cmp	r2, r3
 8014084:	f4ff ad0a 	bcc.w	8013a9c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8014088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801408c:	2b07      	cmp	r3, #7
 801408e:	f240 84e3 	bls.w	8014a58 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8014098:	2301      	movs	r3, #1
 801409a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 801409e:	893b      	ldrh	r3, [r7, #8]
 80140a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140a4:	4413      	add	r3, r2
 80140a6:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80140a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80140ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80140b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140b4:	4413      	add	r3, r2
 80140b6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80140b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80140ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140bc:	4413      	add	r3, r2
 80140be:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80140c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80140c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140c4:	4413      	add	r3, r2
 80140c6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80140c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80140ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140cc:	4413      	add	r3, r2
 80140ce:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80140d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80140d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140d4:	4413      	add	r3, r2
 80140d6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80140d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80140da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140dc:	4413      	add	r3, r2
 80140de:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80140e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	4413      	add	r3, r2
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80140ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	4413      	add	r3, r2
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80140fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	4413      	add	r3, r2
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8014106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014108:	00db      	lsls	r3, r3, #3
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	4413      	add	r3, r2
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8014112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014114:	00db      	lsls	r3, r3, #3
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	4413      	add	r3, r2
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 801411e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014120:	00db      	lsls	r3, r3, #3
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	4413      	add	r3, r2
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 801412a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801412c:	00db      	lsls	r3, r3, #3
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4413      	add	r3, r2
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8014136:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	3304      	adds	r3, #4
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	4413      	add	r3, r2
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8014146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014148:	00db      	lsls	r3, r3, #3
 801414a:	3304      	adds	r3, #4
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	4413      	add	r3, r2
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8014154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	3304      	adds	r3, #4
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	4413      	add	r3, r2
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8014162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	3304      	adds	r3, #4
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	4413      	add	r3, r2
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8014170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014172:	00db      	lsls	r3, r3, #3
 8014174:	3304      	adds	r3, #4
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	4413      	add	r3, r2
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 801417e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	3304      	adds	r3, #4
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	4413      	add	r3, r2
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 801418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801418e:	00db      	lsls	r3, r3, #3
 8014190:	3304      	adds	r3, #4
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	4413      	add	r3, r2
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 801419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801419e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80141a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80141a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141aa:	4413      	add	r3, r2
 80141ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80141b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80141b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141b8:	4413      	add	r3, r2
 80141ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80141be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80141c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141c6:	4413      	add	r3, r2
 80141c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80141cc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80141d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141d4:	4413      	add	r3, r2
 80141d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80141da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80141de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141e2:	4413      	add	r3, r2
 80141e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80141e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80141ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141f0:	4413      	add	r3, r2
 80141f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80141f6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80141fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80141fe:	4413      	add	r3, r2
 8014200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8014204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	68fa      	ldr	r2, [r7, #12]
 801420c:	4413      	add	r3, r2
 801420e:	ed93 7a00 	vldr	s14, [r3]
 8014212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	68fa      	ldr	r2, [r7, #12]
 801421a:	4413      	add	r3, r2
 801421c:	edd3 7a00 	vldr	s15, [r3]
 8014220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014224:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8014228:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	68fa      	ldr	r2, [r7, #12]
 8014230:	4413      	add	r3, r2
 8014232:	ed93 7a00 	vldr	s14, [r3]
 8014236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	4413      	add	r3, r2
 8014240:	edd3 7a00 	vldr	s15, [r3]
 8014244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014248:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 801424c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	68fa      	ldr	r2, [r7, #12]
 8014254:	4413      	add	r3, r2
 8014256:	ed93 7a00 	vldr	s14, [r3]
 801425a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801425e:	00db      	lsls	r3, r3, #3
 8014260:	68fa      	ldr	r2, [r7, #12]
 8014262:	4413      	add	r3, r2
 8014264:	edd3 7a00 	vldr	s15, [r3]
 8014268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801426c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8014270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014274:	00db      	lsls	r3, r3, #3
 8014276:	68fa      	ldr	r2, [r7, #12]
 8014278:	4413      	add	r3, r2
 801427a:	ed93 7a00 	vldr	s14, [r3]
 801427e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	68fa      	ldr	r2, [r7, #12]
 8014286:	4413      	add	r3, r2
 8014288:	edd3 7a00 	vldr	s15, [r3]
 801428c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014290:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8014294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	4413      	add	r3, r2
 801429e:	ed93 7a00 	vldr	s14, [r3]
 80142a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	68fa      	ldr	r2, [r7, #12]
 80142aa:	4413      	add	r3, r2
 80142ac:	edd3 7a00 	vldr	s15, [r3]
 80142b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142b4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80142b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80142bc:	00db      	lsls	r3, r3, #3
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	4413      	add	r3, r2
 80142c2:	ed93 7a00 	vldr	s14, [r3]
 80142c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	68fa      	ldr	r2, [r7, #12]
 80142ce:	4413      	add	r3, r2
 80142d0:	edd3 7a00 	vldr	s15, [r3]
 80142d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142d8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80142dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	68fa      	ldr	r2, [r7, #12]
 80142e4:	4413      	add	r3, r2
 80142e6:	ed93 7a00 	vldr	s14, [r3]
 80142ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80142ee:	00db      	lsls	r3, r3, #3
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	4413      	add	r3, r2
 80142f4:	edd3 7a00 	vldr	s15, [r3]
 80142f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142fc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8014300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014304:	00db      	lsls	r3, r3, #3
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	4413      	add	r3, r2
 801430a:	ed93 7a00 	vldr	s14, [r3]
 801430e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014312:	00db      	lsls	r3, r3, #3
 8014314:	68fa      	ldr	r2, [r7, #12]
 8014316:	4413      	add	r3, r2
 8014318:	edd3 7a00 	vldr	s15, [r3]
 801431c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014320:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8014324:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014328:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801432c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014330:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8014334:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014338:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801433c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014340:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8014344:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014348:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801434c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014350:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8014354:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014358:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 801435c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014360:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8014364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	68fa      	ldr	r2, [r7, #12]
 801436c:	4413      	add	r3, r2
 801436e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014372:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014376:	ee77 7a27 	vadd.f32	s15, s14, s15
 801437a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 801437e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014382:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014386:	ee77 7a67 	vsub.f32	s15, s14, s15
 801438a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 801438e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	3304      	adds	r3, #4
 8014396:	68fa      	ldr	r2, [r7, #12]
 8014398:	4413      	add	r3, r2
 801439a:	ed93 7a00 	vldr	s14, [r3]
 801439e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	3304      	adds	r3, #4
 80143a6:	68fa      	ldr	r2, [r7, #12]
 80143a8:	4413      	add	r3, r2
 80143aa:	edd3 7a00 	vldr	s15, [r3]
 80143ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80143b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80143ba:	00db      	lsls	r3, r3, #3
 80143bc:	3304      	adds	r3, #4
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	4413      	add	r3, r2
 80143c2:	ed93 7a00 	vldr	s14, [r3]
 80143c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	3304      	adds	r3, #4
 80143ce:	68fa      	ldr	r2, [r7, #12]
 80143d0:	4413      	add	r3, r2
 80143d2:	edd3 7a00 	vldr	s15, [r3]
 80143d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143da:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80143de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80143e2:	00db      	lsls	r3, r3, #3
 80143e4:	3304      	adds	r3, #4
 80143e6:	68fa      	ldr	r2, [r7, #12]
 80143e8:	4413      	add	r3, r2
 80143ea:	ed93 7a00 	vldr	s14, [r3]
 80143ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	3304      	adds	r3, #4
 80143f6:	68fa      	ldr	r2, [r7, #12]
 80143f8:	4413      	add	r3, r2
 80143fa:	edd3 7a00 	vldr	s15, [r3]
 80143fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014402:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8014406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	3304      	adds	r3, #4
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	4413      	add	r3, r2
 8014412:	ed93 7a00 	vldr	s14, [r3]
 8014416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801441a:	00db      	lsls	r3, r3, #3
 801441c:	3304      	adds	r3, #4
 801441e:	68fa      	ldr	r2, [r7, #12]
 8014420:	4413      	add	r3, r2
 8014422:	edd3 7a00 	vldr	s15, [r3]
 8014426:	ee77 7a67 	vsub.f32	s15, s14, s15
 801442a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 801442e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	3304      	adds	r3, #4
 8014436:	68fa      	ldr	r2, [r7, #12]
 8014438:	4413      	add	r3, r2
 801443a:	ed93 7a00 	vldr	s14, [r3]
 801443e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014442:	00db      	lsls	r3, r3, #3
 8014444:	3304      	adds	r3, #4
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	4413      	add	r3, r2
 801444a:	edd3 7a00 	vldr	s15, [r3]
 801444e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014452:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8014456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801445a:	00db      	lsls	r3, r3, #3
 801445c:	3304      	adds	r3, #4
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	4413      	add	r3, r2
 8014462:	ed93 7a00 	vldr	s14, [r3]
 8014466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801446a:	00db      	lsls	r3, r3, #3
 801446c:	3304      	adds	r3, #4
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	4413      	add	r3, r2
 8014472:	edd3 7a00 	vldr	s15, [r3]
 8014476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801447a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 801447e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	3304      	adds	r3, #4
 8014486:	68fa      	ldr	r2, [r7, #12]
 8014488:	4413      	add	r3, r2
 801448a:	ed93 7a00 	vldr	s14, [r3]
 801448e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014492:	00db      	lsls	r3, r3, #3
 8014494:	3304      	adds	r3, #4
 8014496:	68fa      	ldr	r2, [r7, #12]
 8014498:	4413      	add	r3, r2
 801449a:	edd3 7a00 	vldr	s15, [r3]
 801449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144a2:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80144a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	3304      	adds	r3, #4
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	4413      	add	r3, r2
 80144b2:	ed93 7a00 	vldr	s14, [r3]
 80144b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	3304      	adds	r3, #4
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	4413      	add	r3, r2
 80144c2:	edd3 7a00 	vldr	s15, [r3]
 80144c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144ca:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80144ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80144d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80144d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144da:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80144de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80144e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80144e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80144ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80144f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80144f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144fa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80144fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014502:	edd7 7a08 	vldr	s15, [r7, #32]
 8014506:	ee77 7a27 	vadd.f32	s15, s14, s15
 801450a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 801450e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014512:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801451a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 801451e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014522:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014526:	ee77 7a67 	vsub.f32	s15, s14, s15
 801452a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 801452e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	3304      	adds	r3, #4
 8014536:	68fa      	ldr	r2, [r7, #12]
 8014538:	4413      	add	r3, r2
 801453a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801453e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014546:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 801454a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801454e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014556:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 801455a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801455e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014566:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 801456a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801456e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014576:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 801457a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801457e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014586:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 801458a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801458e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014596:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 801459a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801459e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80145a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145a6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 80145aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80145ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80145b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145b6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80145ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	4413      	add	r3, r2
 80145c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80145c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80145cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145d0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80145d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80145d8:	00db      	lsls	r3, r3, #3
 80145da:	3304      	adds	r3, #4
 80145dc:	68fa      	ldr	r2, [r7, #12]
 80145de:	4413      	add	r3, r2
 80145e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80145e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80145e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145ec:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80145f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80145f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80145f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145fc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8014600:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014604:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014608:	ee67 7a27 	vmul.f32	s15, s14, s15
 801460c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8014610:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014618:	ee67 7a27 	vmul.f32	s15, s14, s15
 801461c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8014620:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014624:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801462c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8014630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	68fa      	ldr	r2, [r7, #12]
 8014638:	4413      	add	r3, r2
 801463a:	ed97 7a07 	vldr	s14, [r7, #28]
 801463e:	edd7 7a06 	vldr	s15, [r7, #24]
 8014642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014646:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 801464a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	3304      	adds	r3, #4
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	4413      	add	r3, r2
 8014656:	ed97 7a05 	vldr	s14, [r7, #20]
 801465a:	edd7 7a04 	vldr	s15, [r7, #16]
 801465e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014662:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8014666:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801466a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014672:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8014676:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801467a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014682:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8014686:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801468a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014692:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8014696:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801469a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146a2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 80146a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80146aa:	00db      	lsls	r3, r3, #3
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	4413      	add	r3, r2
 80146b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80146b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80146b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146bc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 80146c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	3304      	adds	r3, #4
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	4413      	add	r3, r2
 80146cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80146d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80146d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146d8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80146dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80146e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80146e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80146ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146f0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80146f4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80146f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80146fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014700:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8014704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014708:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 801470c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8014710:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014718:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014720:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8014724:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8014728:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014730:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8014734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014738:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 801473c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014748:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 801474c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014750:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014758:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 801475c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014760:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014768:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 801476c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014770:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014778:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 801477c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014780:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014788:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 801478c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014790:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014798:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 801479c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80147a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80147a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80147ac:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80147b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80147b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147b8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80147bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80147c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80147c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147c8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80147cc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80147d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80147d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147d8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80147dc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80147e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80147e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80147ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80147f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80147f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147f8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80147fc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014800:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8014804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014808:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 801480c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014810:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8014814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014818:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 801481c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014820:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014828:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 801482c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014830:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014838:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 801483c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014840:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014848:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801484c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014858:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801485c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014860:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014868:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801486c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014870:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014878:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801487c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014880:	00db      	lsls	r3, r3, #3
 8014882:	68fa      	ldr	r2, [r7, #12]
 8014884:	4413      	add	r3, r2
 8014886:	ed97 7a07 	vldr	s14, [r7, #28]
 801488a:	edd7 7a06 	vldr	s15, [r7, #24]
 801488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014892:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8014896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801489a:	00db      	lsls	r3, r3, #3
 801489c:	3304      	adds	r3, #4
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	4413      	add	r3, r2
 80148a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80148a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80148aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148ae:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 80148b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80148b6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80148ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148be:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 80148c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80148c6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80148ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148ce:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80148d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80148d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80148da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148de:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80148e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80148e6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80148ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148ee:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80148f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	4413      	add	r3, r2
 80148fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8014900:	edd7 7a06 	vldr	s15, [r7, #24]
 8014904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014908:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 801490c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014910:	00db      	lsls	r3, r3, #3
 8014912:	3304      	adds	r3, #4
 8014914:	68fa      	ldr	r2, [r7, #12]
 8014916:	4413      	add	r3, r2
 8014918:	ed97 7a05 	vldr	s14, [r7, #20]
 801491c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014924:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8014928:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801492c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014934:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8014938:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801493c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014944:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8014948:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801494c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014954:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8014958:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801495c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014964:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8014968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	4413      	add	r3, r2
 8014972:	ed97 7a07 	vldr	s14, [r7, #28]
 8014976:	edd7 7a06 	vldr	s15, [r7, #24]
 801497a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801497e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8014982:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014986:	00db      	lsls	r3, r3, #3
 8014988:	3304      	adds	r3, #4
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	4413      	add	r3, r2
 801498e:	ed97 7a05 	vldr	s14, [r7, #20]
 8014992:	edd7 7a04 	vldr	s15, [r7, #16]
 8014996:	ee77 7a67 	vsub.f32	s15, s14, s15
 801499a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 801499e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80149a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80149a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149aa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 80149ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80149b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80149b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149ba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 80149be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80149c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80149c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149ca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80149ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80149d2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80149d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149da:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80149de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80149e2:	00db      	lsls	r3, r3, #3
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	4413      	add	r3, r2
 80149e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80149ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80149f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149f4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80149f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	3304      	adds	r3, #4
 8014a00:	68fa      	ldr	r2, [r7, #12]
 8014a02:	4413      	add	r3, r2
 8014a04:	ed97 7a05 	vldr	s14, [r7, #20]
 8014a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8014a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a10:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8014a14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014a1c:	4413      	add	r3, r2
 8014a1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8014a22:	897b      	ldrh	r3, [r7, #10]
 8014a24:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	f4ff abba 	bcc.w	80141a2 <arm_radix8_butterfly_f32+0x746>

         j++;
 8014a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a32:	3301      	adds	r3, #1
 8014a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8014a38:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a40:	429a      	cmp	r2, r3
 8014a42:	f4ff ab2c 	bcc.w	801409e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8014a46:	893b      	ldrh	r3, [r7, #8]
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8014a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a50:	2b07      	cmp	r3, #7
 8014a52:	f63f a813 	bhi.w	8013a7c <arm_radix8_butterfly_f32+0x20>
}
 8014a56:	e000      	b.n	8014a5a <arm_radix8_butterfly_f32+0xffe>
         break;
 8014a58:	bf00      	nop
}
 8014a5a:	bf00      	nop
 8014a5c:	37f4      	adds	r7, #244	; 0xf4
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a64:	4770      	bx	lr
 8014a66:	bf00      	nop

08014a68 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b095      	sub	sp, #84	; 0x54
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	695b      	ldr	r3, [r3, #20]
 8014a78:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	881b      	ldrh	r3, [r3, #0]
 8014a86:	3b01      	subs	r3, #1
 8014a88:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8014a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8014a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8014a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8014a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8014aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014aa4:	1d1a      	adds	r2, r3, #4
 8014aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8014aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014aae:	1d1a      	adds	r2, r3, #4
 8014ab0:	64ba      	str	r2, [r7, #72]	; 0x48
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8014ab6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014aba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ac2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8014ac6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014aca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ad2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8014ad6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014ada:	edd7 7a08 	vldr	s15, [r7, #32]
 8014ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	1d1a      	adds	r2, r3, #4
 8014ae6:	607a      	str	r2, [r7, #4]
 8014ae8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014af0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8014af4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014af8:	edd7 7a08 	vldr	s15, [r7, #32]
 8014afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	1d1a      	adds	r2, r3, #4
 8014b04:	607a      	str	r2, [r7, #4]
 8014b06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b0e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8014b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b14:	00db      	lsls	r3, r3, #3
 8014b16:	68ba      	ldr	r2, [r7, #8]
 8014b18:	4413      	add	r3, r2
 8014b1a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8014b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b1e:	3308      	adds	r3, #8
 8014b20:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8014b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8014b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8014b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8014b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8014b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b3c:	1d1a      	adds	r2, r3, #4
 8014b3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8014b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b46:	1d1a      	adds	r2, r3, #4
 8014b48:	64ba      	str	r2, [r7, #72]	; 0x48
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8014b4e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014b52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8014b5e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014b62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b6a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8014b6e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014b72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8014b7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014b82:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b8a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8014b8e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8014b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b9a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8014b9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014ba2:	edd7 7a08 	vldr	s15, [r7, #32]
 8014ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014baa:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8014bae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014bb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bba:	edd7 7a07 	vldr	s15, [r7, #28]
 8014bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8014bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	1d1a      	adds	r2, r3, #4
 8014bce:	607a      	str	r2, [r7, #4]
 8014bd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014bd8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8014bdc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8014be0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014be8:	edd7 7a06 	vldr	s15, [r7, #24]
 8014bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8014bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	1d1a      	adds	r2, r3, #4
 8014bfc:	607a      	str	r2, [r7, #4]
 8014bfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c06:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8014c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c0c:	3308      	adds	r3, #8
 8014c0e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8014c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c12:	3b08      	subs	r3, #8
 8014c14:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8014c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8014c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f73f af7f 	bgt.w	8014b22 <stage_rfft_f32+0xba>
}
 8014c24:	bf00      	nop
 8014c26:	bf00      	nop
 8014c28:	3754      	adds	r7, #84	; 0x54
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr

08014c32 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8014c32:	b480      	push	{r7}
 8014c34:	b095      	sub	sp, #84	; 0x54
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	60f8      	str	r0, [r7, #12]
 8014c3a:	60b9      	str	r1, [r7, #8]
 8014c3c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	695b      	ldr	r3, [r3, #20]
 8014c42:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	3b01      	subs	r3, #1
 8014c52:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8014c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8014c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8014c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c62:	3308      	adds	r3, #8
 8014c64:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8014c66:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014c6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	1d1a      	adds	r2, r3, #4
 8014c76:	607a      	str	r2, [r7, #4]
 8014c78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c80:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8014c84:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014c88:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	1d1a      	adds	r2, r3, #4
 8014c94:	607a      	str	r2, [r7, #4]
 8014c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c9e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8014ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ca4:	00db      	lsls	r3, r3, #3
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	4413      	add	r3, r2
 8014caa:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8014cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cae:	3308      	adds	r3, #8
 8014cb0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8014cb2:	e07c      	b.n	8014dae <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8014cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8014cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8014cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8014cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8014ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cce:	1d1a      	adds	r2, r3, #4
 8014cd0:	64ba      	str	r2, [r7, #72]	; 0x48
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8014cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cd8:	1d1a      	adds	r2, r3, #4
 8014cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8014ce0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014ce4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8014cf0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014cf4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cfc:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8014d00:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014d04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8014d10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014d14:	edd7 7a08 	vldr	s15, [r7, #32]
 8014d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d1c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8014d20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014d24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d2c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8014d30:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014d34:	edd7 7a08 	vldr	s15, [r7, #32]
 8014d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d3c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8014d40:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014d44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8014d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d54:	edd7 7a06 	vldr	s15, [r7, #24]
 8014d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	1d1a      	adds	r2, r3, #4
 8014d60:	607a      	str	r2, [r7, #4]
 8014d62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d6a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8014d6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014d72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8014d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8014d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	1d1a      	adds	r2, r3, #4
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d98:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8014d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d9e:	3308      	adds	r3, #8
 8014da0:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8014da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014da4:	3b08      	subs	r3, #8
 8014da6:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8014da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014daa:	3b01      	subs	r3, #1
 8014dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8014dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f73f af7f 	bgt.w	8014cb4 <merge_rfft_f32+0x82>
   }

}
 8014db6:	bf00      	nop
 8014db8:	bf00      	nop
 8014dba:	3754      	adds	r7, #84	; 0x54
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	60f8      	str	r0, [r7, #12]
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	607a      	str	r2, [r7, #4]
 8014dd0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8014dd6:	78fb      	ldrb	r3, [r7, #3]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d00b      	beq.n	8014df4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	68b9      	ldr	r1, [r7, #8]
 8014de0:	68f8      	ldr	r0, [r7, #12]
 8014de2:	f7ff ff26 	bl	8014c32 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8014de6:	78fa      	ldrb	r2, [r7, #3]
 8014de8:	2301      	movs	r3, #1
 8014dea:	6879      	ldr	r1, [r7, #4]
 8014dec:	6978      	ldr	r0, [r7, #20]
 8014dee:	f7fe fd7b 	bl	80138e8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8014df2:	e00a      	b.n	8014e0a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8014df4:	78fa      	ldrb	r2, [r7, #3]
 8014df6:	2301      	movs	r3, #1
 8014df8:	68b9      	ldr	r1, [r7, #8]
 8014dfa:	6978      	ldr	r0, [r7, #20]
 8014dfc:	f7fe fd74 	bl	80138e8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	68b9      	ldr	r1, [r7, #8]
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f7ff fe2f 	bl	8014a68 <stage_rfft_f32>
}
 8014e0a:	bf00      	nop
 8014e0c:	3718      	adds	r7, #24
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8014e12:	b480      	push	{r7}
 8014e14:	b089      	sub	sp, #36	; 0x24
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	60f8      	str	r0, [r7, #12]
 8014e1a:	60b9      	str	r1, [r7, #8]
 8014e1c:	607a      	str	r2, [r7, #4]
 8014e1e:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014e26:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	00db      	lsls	r3, r3, #3
 8014e2c:	68fa      	ldr	r2, [r7, #12]
 8014e2e:	4413      	add	r3, r2
 8014e30:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	ed93 7a00 	vldr	s14, [r3]
 8014e38:	69bb      	ldr	r3, [r7, #24]
 8014e3a:	edd3 7a00 	vldr	s15, [r3]
 8014e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e42:	69fb      	ldr	r3, [r7, #28]
 8014e44:	edd3 6a01 	vldr	s13, [r3, #4]
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8014e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e56:	edc7 7a04 	vstr	s15, [r7, #16]
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	ed93 7a00 	vldr	s14, [r3]
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	edd3 7a01 	vldr	s15, [r3, #4]
 8014e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e6a:	69fb      	ldr	r3, [r7, #28]
 8014e6c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	edd3 7a00 	vldr	s15, [r3]
 8014e76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e7e:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	00db      	lsls	r3, r3, #3
 8014e86:	69ba      	ldr	r2, [r7, #24]
 8014e88:	4413      	add	r3, r2
 8014e8a:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	ed93 7a00 	vldr	s14, [r3]
 8014e92:	edd7 7a04 	vldr	s15, [r7, #16]
 8014e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	edc3 7a00 	vstr	s15, [r3]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	ed93 7a01 	vldr	s14, [r3, #4]
 8014ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8014eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	ed93 7a00 	vldr	s14, [r3]
 8014eba:	edd7 7a04 	vldr	s15, [r7, #16]
 8014ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	edc3 7a00 	vstr	s15, [r3]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	ed93 7a01 	vldr	s14, [r3, #4]
 8014ece:	edd7 7a05 	vldr	s15, [r7, #20]
 8014ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	3308      	adds	r3, #8
 8014ee0:	61fb      	str	r3, [r7, #28]
        ++Fout;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	3308      	adds	r3, #8
 8014ee6:	60fb      	str	r3, [r7, #12]
    }while (--m);
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	3b01      	subs	r3, #1
 8014eec:	603b      	str	r3, [r7, #0]
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	bf14      	ite	ne
 8014ef4:	2301      	movne	r3, #1
 8014ef6:	2300      	moveq	r3, #0
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d199      	bne.n	8014e32 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 8014efe:	bf00      	nop
 8014f00:	bf00      	nop
 8014f02:	3724      	adds	r7, #36	; 0x24
 8014f04:	46bd      	mov	sp, r7
 8014f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0a:	4770      	bx	lr

08014f0c <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b097      	sub	sp, #92	; 0x5c
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
 8014f18:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	005b      	lsls	r3, r3, #1
 8014f22:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 8014f24:	683a      	ldr	r2, [r7, #0]
 8014f26:	4613      	mov	r3, r2
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4413      	add	r3, r2
 8014f2c:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014f34:	657b      	str	r3, [r7, #84]	; 0x54
 8014f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f38:	653b      	str	r3, [r7, #80]	; 0x50
 8014f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f3c:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	68fa      	ldr	r2, [r7, #12]
 8014f44:	4413      	add	r3, r2
 8014f46:	ed93 7a00 	vldr	s14, [r3]
 8014f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f4c:	edd3 7a00 	vldr	s15, [r3]
 8014f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	68fa      	ldr	r2, [r7, #12]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8014f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f62:	edd3 7a01 	vldr	s15, [r3, #4]
 8014f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f6e:	edc7 7a04 	vstr	s15, [r7, #16]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	00db      	lsls	r3, r3, #3
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	4413      	add	r3, r2
 8014f7a:	ed93 7a00 	vldr	s14, [r3]
 8014f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f80:	edd3 7a01 	vldr	s15, [r3, #4]
 8014f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	68fa      	ldr	r2, [r7, #12]
 8014f8e:	4413      	add	r3, r2
 8014f90:	edd3 6a01 	vldr	s13, [r3, #4]
 8014f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f96:	edd3 7a00 	vldr	s15, [r3]
 8014f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fa2:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8014fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fa8:	00db      	lsls	r3, r3, #3
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	4413      	add	r3, r2
 8014fae:	ed93 7a00 	vldr	s14, [r3]
 8014fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fb4:	edd3 7a00 	vldr	s15, [r3]
 8014fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fbe:	00db      	lsls	r3, r3, #3
 8014fc0:	68fa      	ldr	r2, [r7, #12]
 8014fc2:	4413      	add	r3, r2
 8014fc4:	edd3 6a01 	vldr	s13, [r3, #4]
 8014fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8014fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fd6:	edc7 7a06 	vstr	s15, [r7, #24]
 8014fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014fdc:	00db      	lsls	r3, r3, #3
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	ed93 7a00 	vldr	s14, [r3]
 8014fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8014fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	68fa      	ldr	r2, [r7, #12]
 8014ff6:	4413      	add	r3, r2
 8014ff8:	edd3 6a01 	vldr	s13, [r3, #4]
 8014ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ffe:	edd3 7a00 	vldr	s15, [r3]
 8015002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015006:	ee77 7a27 	vadd.f32	s15, s14, s15
 801500a:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 801500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015010:	00db      	lsls	r3, r3, #3
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	4413      	add	r3, r2
 8015016:	ed93 7a00 	vldr	s14, [r3]
 801501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801501c:	edd3 7a00 	vldr	s15, [r3]
 8015020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	68fa      	ldr	r2, [r7, #12]
 801502a:	4413      	add	r3, r2
 801502c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015032:	edd3 7a01 	vldr	s15, [r3, #4]
 8015036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801503a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801503e:	edc7 7a08 	vstr	s15, [r7, #32]
 8015042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015044:	00db      	lsls	r3, r3, #3
 8015046:	68fa      	ldr	r2, [r7, #12]
 8015048:	4413      	add	r3, r2
 801504a:	ed93 7a00 	vldr	s14, [r3]
 801504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015050:	edd3 7a01 	vldr	s15, [r3, #4]
 8015054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801505a:	00db      	lsls	r3, r3, #3
 801505c:	68fa      	ldr	r2, [r7, #12]
 801505e:	4413      	add	r3, r2
 8015060:	edd3 6a01 	vldr	s13, [r3, #4]
 8015064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015066:	edd3 7a00 	vldr	s15, [r3]
 801506a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801506e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015072:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	ed93 7a00 	vldr	s14, [r3]
 801507c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015084:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	ed93 7a01 	vldr	s14, [r3, #4]
 801508e:	edd7 7a07 	vldr	s15, [r7, #28]
 8015092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015096:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	ed93 7a00 	vldr	s14, [r3]
 80150a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80150a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	edc3 7a00 	vstr	s15, [r3]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80150b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80150b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 80150c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80150c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80150ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80150d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80150d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80150da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 80150e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80150e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80150ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80150f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80150f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80150fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	ed93 7a00 	vldr	s14, [r3]
 8015108:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	4413      	add	r3, r2
 8015114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015118:	edc3 7a00 	vstr	s15, [r3]
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	ed93 7a01 	vldr	s14, [r3, #4]
 8015122:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	4413      	add	r3, r2
 801512e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015132:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801513c:	4413      	add	r3, r2
 801513e:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	011b      	lsls	r3, r3, #4
 8015144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015146:	4413      	add	r3, r2
 8015148:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 801514a:	68ba      	ldr	r2, [r7, #8]
 801514c:	4613      	mov	r3, r2
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4413      	add	r3, r2
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	461a      	mov	r2, r3
 8015156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015158:	4413      	add	r3, r2
 801515a:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	ed93 7a00 	vldr	s14, [r3]
 8015162:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015166:	ee77 7a27 	vadd.f32	s15, s14, s15
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	edc3 7a00 	vstr	s15, [r3]
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	ed93 7a01 	vldr	s14, [r3, #4]
 8015176:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801517a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d030      	beq.n	80151ee <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 801518c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015190:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	00db      	lsls	r3, r3, #3
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	4413      	add	r3, r2
 801519c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151a0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 80151a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80151a8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	4413      	add	r3, r2
 80151b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151b8:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 80151bc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80151c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80151c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151c6:	00db      	lsls	r3, r3, #3
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	4413      	add	r3, r2
 80151cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151d0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 80151d4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80151d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80151dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151de:	00db      	lsls	r3, r3, #3
 80151e0:	68fa      	ldr	r2, [r7, #12]
 80151e2:	4413      	add	r3, r2
 80151e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151e8:	edc3 7a01 	vstr	s15, [r3, #4]
 80151ec:	e02f      	b.n	801524e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80151ee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80151f2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	00db      	lsls	r3, r3, #3
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	4413      	add	r3, r2
 80151fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015202:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8015206:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801520a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	00db      	lsls	r3, r3, #3
 8015212:	68fa      	ldr	r2, [r7, #12]
 8015214:	4413      	add	r3, r2
 8015216:	ee77 7a67 	vsub.f32	s15, s14, s15
 801521a:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 801521e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015222:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	4413      	add	r3, r2
 801522e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015232:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8015236:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801523a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801523e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015240:	00db      	lsls	r3, r3, #3
 8015242:	68fa      	ldr	r2, [r7, #12]
 8015244:	4413      	add	r3, r2
 8015246:	ee77 7a27 	vadd.f32	s15, s14, s15
 801524a:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	3308      	adds	r3, #8
 8015252:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8015254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015256:	3b01      	subs	r3, #1
 8015258:	64bb      	str	r3, [r7, #72]	; 0x48
 801525a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801525c:	2b00      	cmp	r3, #0
 801525e:	bf14      	ite	ne
 8015260:	2301      	movne	r3, #1
 8015262:	2300      	moveq	r3, #0
 8015264:	b2db      	uxtb	r3, r3
 8015266:	2b00      	cmp	r3, #0
 8015268:	f47f ae69 	bne.w	8014f3e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 801526c:	bf00      	nop
 801526e:	bf00      	nop
 8015270:	375c      	adds	r7, #92	; 0x5c
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr
	...

0801527c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 801527c:	b5b0      	push	{r4, r5, r7, lr}
 801527e:	b094      	sub	sp, #80	; 0x50
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	603b      	str	r3, [r7, #0]
     size_t k=m;
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	fb02 f303 	mul.w	r3, r2, r3
 801529c:	6879      	ldr	r1, [r7, #4]
 801529e:	3321      	adds	r3, #33	; 0x21
 80152a0:	f107 0210 	add.w	r2, r7, #16
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	440b      	add	r3, r1
 80152a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80152ac:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80152b6:	647b      	str	r3, [r7, #68]	; 0x44
 80152b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152ba:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	68fa      	ldr	r2, [r7, #12]
 80152c2:	4413      	add	r3, r2
 80152c4:	ed93 7a00 	vldr	s14, [r3]
 80152c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152ca:	edd3 7a00 	vldr	s15, [r3]
 80152ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	00db      	lsls	r3, r3, #3
 80152d6:	68fa      	ldr	r2, [r7, #12]
 80152d8:	4413      	add	r3, r2
 80152da:	edd3 6a01 	vldr	s13, [r3, #4]
 80152de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80152e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80152e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152ec:	edc7 7a08 	vstr	s15, [r7, #32]
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	00db      	lsls	r3, r3, #3
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	4413      	add	r3, r2
 80152f8:	ed93 7a00 	vldr	s14, [r3]
 80152fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8015302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	68fa      	ldr	r2, [r7, #12]
 801530c:	4413      	add	r3, r2
 801530e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015314:	edd3 7a00 	vldr	s15, [r3]
 8015318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801531c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015320:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8015324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015326:	00db      	lsls	r3, r3, #3
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	4413      	add	r3, r2
 801532c:	ed93 7a00 	vldr	s14, [r3]
 8015330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015332:	edd3 7a00 	vldr	s15, [r3]
 8015336:	ee27 7a27 	vmul.f32	s14, s14, s15
 801533a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801533c:	00db      	lsls	r3, r3, #3
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	4413      	add	r3, r2
 8015342:	edd3 6a01 	vldr	s13, [r3, #4]
 8015346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015348:	edd3 7a01 	vldr	s15, [r3, #4]
 801534c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015354:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801535a:	00db      	lsls	r3, r3, #3
 801535c:	68fa      	ldr	r2, [r7, #12]
 801535e:	4413      	add	r3, r2
 8015360:	ed93 7a00 	vldr	s14, [r3]
 8015364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015366:	edd3 7a01 	vldr	s15, [r3, #4]
 801536a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801536e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	68fa      	ldr	r2, [r7, #12]
 8015374:	4413      	add	r3, r2
 8015376:	edd3 6a01 	vldr	s13, [r3, #4]
 801537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801537c:	edd3 7a00 	vldr	s15, [r3]
 8015380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015388:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 801538c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015390:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015398:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 801539c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80153a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80153a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 80153ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80153b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80153b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153b8:	edc7 7a06 	vstr	s15, [r7, #24]
 80153bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80153c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80153c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153c8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	00db      	lsls	r3, r3, #3
 80153d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80153d2:	4413      	add	r3, r2
 80153d4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	011b      	lsls	r3, r3, #4
 80153da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80153dc:	4413      	add	r3, r2
 80153de:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7eb f8df 	bl	80005a8 <__aeabi_f2d>
 80153ea:	4604      	mov	r4, r0
 80153ec:	460d      	mov	r5, r1
 80153ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7eb f8d9 	bl	80005a8 <__aeabi_f2d>
 80153f6:	f04f 0200 	mov.w	r2, #0
 80153fa:	4b57      	ldr	r3, [pc, #348]	; (8015558 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 80153fc:	f7eb f92c 	bl	8000658 <__aeabi_dmul>
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	4620      	mov	r0, r4
 8015406:	4629      	mov	r1, r5
 8015408:	f7ea ff6e 	bl	80002e8 <__aeabi_dsub>
 801540c:	4602      	mov	r2, r0
 801540e:	460b      	mov	r3, r1
 8015410:	4610      	mov	r0, r2
 8015412:	4619      	mov	r1, r3
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	00db      	lsls	r3, r3, #3
 8015418:	68fa      	ldr	r2, [r7, #12]
 801541a:	18d4      	adds	r4, r2, r3
 801541c:	f7eb fc14 	bl	8000c48 <__aeabi_d2f>
 8015420:	4603      	mov	r3, r0
 8015422:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	4618      	mov	r0, r3
 801542a:	f7eb f8bd 	bl	80005a8 <__aeabi_f2d>
 801542e:	4604      	mov	r4, r0
 8015430:	460d      	mov	r5, r1
 8015432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015434:	4618      	mov	r0, r3
 8015436:	f7eb f8b7 	bl	80005a8 <__aeabi_f2d>
 801543a:	f04f 0200 	mov.w	r2, #0
 801543e:	4b46      	ldr	r3, [pc, #280]	; (8015558 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8015440:	f7eb f90a 	bl	8000658 <__aeabi_dmul>
 8015444:	4602      	mov	r2, r0
 8015446:	460b      	mov	r3, r1
 8015448:	4620      	mov	r0, r4
 801544a:	4629      	mov	r1, r5
 801544c:	f7ea ff4c 	bl	80002e8 <__aeabi_dsub>
 8015450:	4602      	mov	r2, r0
 8015452:	460b      	mov	r3, r1
 8015454:	4610      	mov	r0, r2
 8015456:	4619      	mov	r1, r3
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	00db      	lsls	r3, r3, #3
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	18d4      	adds	r4, r2, r3
 8015460:	f7eb fbf2 	bl	8000c48 <__aeabi_d2f>
 8015464:	4603      	mov	r3, r0
 8015466:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8015468:	ed97 7a06 	vldr	s14, [r7, #24]
 801546c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015474:	edc7 7a06 	vstr	s15, [r7, #24]
 8015478:	ed97 7a07 	vldr	s14, [r7, #28]
 801547c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015484:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	ed93 7a00 	vldr	s14, [r3]
 801548e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	edc3 7a00 	vstr	s15, [r3]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	ed93 7a01 	vldr	s14, [r3, #4]
 80154a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80154a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	00db      	lsls	r3, r3, #3
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	4413      	add	r3, r2
 80154b8:	ed93 7a00 	vldr	s14, [r3]
 80154bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80154c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154cc:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	00db      	lsls	r3, r3, #3
 80154d4:	68fa      	ldr	r2, [r7, #12]
 80154d6:	4413      	add	r3, r2
 80154d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80154dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80154e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154e2:	00db      	lsls	r3, r3, #3
 80154e4:	68fa      	ldr	r2, [r7, #12]
 80154e6:	4413      	add	r3, r2
 80154e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154ec:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	00db      	lsls	r3, r3, #3
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	4413      	add	r3, r2
 80154f8:	ed93 7a00 	vldr	s14, [r3]
 80154fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	4413      	add	r3, r2
 8015508:	ee77 7a67 	vsub.f32	s15, s14, s15
 801550c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	00db      	lsls	r3, r3, #3
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	4413      	add	r3, r2
 8015518:	ed93 7a01 	vldr	s14, [r3, #4]
 801551c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	4413      	add	r3, r2
 8015528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801552c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	3308      	adds	r3, #8
 8015534:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8015536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015538:	3b01      	subs	r3, #1
 801553a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801553c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801553e:	2b00      	cmp	r3, #0
 8015540:	bf14      	ite	ne
 8015542:	2301      	movne	r3, #1
 8015544:	2300      	moveq	r3, #0
 8015546:	b2db      	uxtb	r3, r3
 8015548:	2b00      	cmp	r3, #0
 801554a:	f47f aeb7 	bne.w	80152bc <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 801554e:	bf00      	nop
 8015550:	bf00      	nop
 8015552:	3750      	adds	r7, #80	; 0x50
 8015554:	46bd      	mov	sp, r7
 8015556:	bdb0      	pop	{r4, r5, r7, pc}
 8015558:	3fe00000 	.word	0x3fe00000

0801555c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801555c:	b480      	push	{r7}
 801555e:	b0ab      	sub	sp, #172	; 0xac
 8015560:	af00      	add	r7, sp, #0
 8015562:	60f8      	str	r0, [r7, #12]
 8015564:	60b9      	str	r1, [r7, #8]
 8015566:	607a      	str	r2, [r7, #4]
 8015568:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	68ba      	ldr	r2, [r7, #8]
 8015578:	fb02 f303 	mul.w	r3, r2, r3
 801557c:	00db      	lsls	r3, r3, #3
 801557e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015582:	441a      	add	r2, r3
 8015584:	f107 0318 	add.w	r3, r7, #24
 8015588:	e892 0003 	ldmia.w	r2, {r0, r1}
 801558c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	fb02 f303 	mul.w	r3, r2, r3
 8015598:	011b      	lsls	r3, r3, #4
 801559a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801559e:	441a      	add	r2, r3
 80155a0:	f107 0310 	add.w	r3, r7, #16
 80155a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80155a8:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	00db      	lsls	r3, r3, #3
 80155b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80155ba:	4413      	add	r3, r2
 80155bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	011b      	lsls	r3, r3, #4
 80155c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80155c8:	4413      	add	r3, r2
 80155ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 80155ce:	683a      	ldr	r2, [r7, #0]
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	461a      	mov	r2, r3
 80155da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80155de:	4413      	add	r3, r2
 80155e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	015b      	lsls	r3, r3, #5
 80155e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80155ec:	4413      	add	r3, r2
 80155ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80155f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 80155fc:	2300      	movs	r3, #0
 80155fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015602:	e2a7      	b.n	8015b54 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 8015604:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015608:	f107 0320 	add.w	r3, r7, #32
 801560c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015610:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 8015614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015618:	ed93 7a00 	vldr	s14, [r3]
 801561c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015620:	68ba      	ldr	r2, [r7, #8]
 8015622:	fb02 f303 	mul.w	r3, r2, r3
 8015626:	00db      	lsls	r3, r3, #3
 8015628:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801562c:	4413      	add	r3, r2
 801562e:	edd3 7a00 	vldr	s15, [r3]
 8015632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801563a:	edd3 6a01 	vldr	s13, [r3, #4]
 801563e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015642:	68ba      	ldr	r2, [r7, #8]
 8015644:	fb02 f303 	mul.w	r3, r2, r3
 8015648:	00db      	lsls	r3, r3, #3
 801564a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801564e:	4413      	add	r3, r2
 8015650:	edd3 7a01 	vldr	s15, [r3, #4]
 8015654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015658:	ee77 7a67 	vsub.f32	s15, s14, s15
 801565c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015664:	ed93 7a00 	vldr	s14, [r3]
 8015668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801566c:	68ba      	ldr	r2, [r7, #8]
 801566e:	fb02 f303 	mul.w	r3, r2, r3
 8015672:	00db      	lsls	r3, r3, #3
 8015674:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015678:	4413      	add	r3, r2
 801567a:	edd3 7a01 	vldr	s15, [r3, #4]
 801567e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015686:	edd3 6a01 	vldr	s13, [r3, #4]
 801568a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801568e:	68ba      	ldr	r2, [r7, #8]
 8015690:	fb02 f303 	mul.w	r3, r2, r3
 8015694:	00db      	lsls	r3, r3, #3
 8015696:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801569a:	4413      	add	r3, r2
 801569c:	edd3 7a00 	vldr	s15, [r3]
 80156a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80156a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 80156ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156b0:	ed93 7a00 	vldr	s14, [r3]
 80156b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156b8:	68ba      	ldr	r2, [r7, #8]
 80156ba:	fb02 f303 	mul.w	r3, r2, r3
 80156be:	011b      	lsls	r3, r3, #4
 80156c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80156c4:	4413      	add	r3, r2
 80156c6:	edd3 7a00 	vldr	s15, [r3]
 80156ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80156ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80156d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80156da:	68ba      	ldr	r2, [r7, #8]
 80156dc:	fb02 f303 	mul.w	r3, r2, r3
 80156e0:	011b      	lsls	r3, r3, #4
 80156e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80156e6:	4413      	add	r3, r2
 80156e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80156ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80156f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80156f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80156fc:	ed93 7a00 	vldr	s14, [r3]
 8015700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015704:	68ba      	ldr	r2, [r7, #8]
 8015706:	fb02 f303 	mul.w	r3, r2, r3
 801570a:	011b      	lsls	r3, r3, #4
 801570c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015710:	4413      	add	r3, r2
 8015712:	edd3 7a01 	vldr	s15, [r3, #4]
 8015716:	ee27 7a27 	vmul.f32	s14, s14, s15
 801571a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801571e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	fb02 f303 	mul.w	r3, r2, r3
 801572c:	011b      	lsls	r3, r3, #4
 801572e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015732:	4413      	add	r3, r2
 8015734:	edd3 7a00 	vldr	s15, [r3]
 8015738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801573c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015740:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8015744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015748:	ed93 7a00 	vldr	s14, [r3]
 801574c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015750:	68ba      	ldr	r2, [r7, #8]
 8015752:	fb03 f202 	mul.w	r2, r3, r2
 8015756:	4613      	mov	r3, r2
 8015758:	005b      	lsls	r3, r3, #1
 801575a:	4413      	add	r3, r2
 801575c:	00db      	lsls	r3, r3, #3
 801575e:	461a      	mov	r2, r3
 8015760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015764:	4413      	add	r3, r2
 8015766:	edd3 7a00 	vldr	s15, [r3]
 801576a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801576e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015772:	edd3 6a01 	vldr	s13, [r3, #4]
 8015776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801577a:	68ba      	ldr	r2, [r7, #8]
 801577c:	fb03 f202 	mul.w	r2, r3, r2
 8015780:	4613      	mov	r3, r2
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	4413      	add	r3, r2
 8015786:	00db      	lsls	r3, r3, #3
 8015788:	461a      	mov	r2, r3
 801578a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801578e:	4413      	add	r3, r2
 8015790:	edd3 7a01 	vldr	s15, [r3, #4]
 8015794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015798:	ee77 7a67 	vsub.f32	s15, s14, s15
 801579c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80157a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80157a4:	ed93 7a00 	vldr	s14, [r3]
 80157a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	fb03 f202 	mul.w	r2, r3, r2
 80157b2:	4613      	mov	r3, r2
 80157b4:	005b      	lsls	r3, r3, #1
 80157b6:	4413      	add	r3, r2
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	461a      	mov	r2, r3
 80157bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157c0:	4413      	add	r3, r2
 80157c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80157c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80157ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80157d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157d6:	68ba      	ldr	r2, [r7, #8]
 80157d8:	fb03 f202 	mul.w	r2, r3, r2
 80157dc:	4613      	mov	r3, r2
 80157de:	005b      	lsls	r3, r3, #1
 80157e0:	4413      	add	r3, r2
 80157e2:	00db      	lsls	r3, r3, #3
 80157e4:	461a      	mov	r2, r3
 80157e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80157ea:	4413      	add	r3, r2
 80157ec:	edd3 7a00 	vldr	s15, [r3]
 80157f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80157f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157f8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80157fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015800:	ed93 7a00 	vldr	s14, [r3]
 8015804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015808:	68ba      	ldr	r2, [r7, #8]
 801580a:	fb02 f303 	mul.w	r3, r2, r3
 801580e:	015b      	lsls	r3, r3, #5
 8015810:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015814:	4413      	add	r3, r2
 8015816:	edd3 7a00 	vldr	s15, [r3]
 801581a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801581e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015822:	edd3 6a01 	vldr	s13, [r3, #4]
 8015826:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801582a:	68ba      	ldr	r2, [r7, #8]
 801582c:	fb02 f303 	mul.w	r3, r2, r3
 8015830:	015b      	lsls	r3, r3, #5
 8015832:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015836:	4413      	add	r3, r2
 8015838:	edd3 7a01 	vldr	s15, [r3, #4]
 801583c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015844:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8015848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801584c:	ed93 7a00 	vldr	s14, [r3]
 8015850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015854:	68ba      	ldr	r2, [r7, #8]
 8015856:	fb02 f303 	mul.w	r3, r2, r3
 801585a:	015b      	lsls	r3, r3, #5
 801585c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015860:	4413      	add	r3, r2
 8015862:	edd3 7a01 	vldr	s15, [r3, #4]
 8015866:	ee27 7a27 	vmul.f32	s14, s14, s15
 801586a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801586e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015876:	68ba      	ldr	r2, [r7, #8]
 8015878:	fb02 f303 	mul.w	r3, r2, r3
 801587c:	015b      	lsls	r3, r3, #5
 801587e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015882:	4413      	add	r3, r2
 8015884:	edd3 7a00 	vldr	s15, [r3]
 8015888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801588c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015890:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8015894:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015898:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801589c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158a0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80158a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80158a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80158ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158b0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 80158b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80158b8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80158bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158c0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 80158c4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80158c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80158cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158d0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 80158d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80158d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80158dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80158e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80158e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80158ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158f0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80158f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80158f8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80158fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015900:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8015904:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8015908:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801590c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015910:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8015914:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015918:	ed93 7a00 	vldr	s14, [r3]
 801591c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015920:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015928:	ee77 7a27 	vadd.f32	s15, s14, s15
 801592c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015930:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8015934:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015938:	ed93 7a01 	vldr	s14, [r3, #4]
 801593c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015940:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801594c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015950:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8015954:	ed97 7a08 	vldr	s14, [r7, #32]
 8015958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801595c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015968:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801596c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015978:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801597c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015980:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015984:	edd7 7a06 	vldr	s15, [r7, #24]
 8015988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801598c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015990:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8015994:	edd7 7a04 	vldr	s15, [r7, #16]
 8015998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801599c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159a0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 80159a4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80159a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80159ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80159b0:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80159b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80159b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 80159c4:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80159c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80159cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80159d0:	eeb1 7a67 	vneg.f32	s14, s15
 80159d4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80159d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80159dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80159e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80159ec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80159f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80159f8:	edc3 7a00 	vstr	s15, [r3]
 80159fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015a00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015a0c:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8015a10:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015a14:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a20:	edc3 7a00 	vstr	s15, [r3]
 8015a24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015a28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a34:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8015a38:	ed97 7a08 	vldr	s14, [r7, #32]
 8015a3c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015a4c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8015a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8015a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a5c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8015a60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015a64:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8015a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015a74:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8015a78:	edd7 7a06 	vldr	s15, [r7, #24]
 8015a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a84:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8015a88:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8015a8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a94:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8015a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8015a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015aa4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8015aa8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8015aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8015ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ab4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8015ab8:	edd7 7a07 	vldr	s15, [r7, #28]
 8015abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ac4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8015ac8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8015acc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ad8:	edc3 7a00 	vstr	s15, [r3]
 8015adc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015ae0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015aec:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8015af0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8015af4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b00:	edc3 7a00 	vstr	s15, [r3]
 8015b04:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015b08:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b14:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8015b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015b1c:	3308      	adds	r3, #8
 8015b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015b26:	3308      	adds	r3, #8
 8015b28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015b30:	3308      	adds	r3, #8
 8015b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015b3a:	3308      	adds	r3, #8
 8015b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015b44:	3308      	adds	r3, #8
 8015b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8015b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015b4e:	3301      	adds	r3, #1
 8015b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015b54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	f6ff ad52 	blt.w	8015604 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 8015b60:	bf00      	nop
 8015b62:	bf00      	nop
 8015b64:	37ac      	adds	r7, #172	; 0xac
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr

08015b6e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b08e      	sub	sp, #56	; 0x38
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	60f8      	str	r0, [r7, #12]
 8015b76:	60b9      	str	r1, [r7, #8]
 8015b78:	607a      	str	r2, [r7, #4]
 8015b7a:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015b82:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8015b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b8c:	00db      	lsls	r3, r3, #3
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f000 fe92 	bl	80168b8 <_Z9ei_mallocj>
 8015b94:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8015b96:	2300      	movs	r3, #0
 8015b98:	637b      	str	r3, [r7, #52]	; 0x34
 8015b9a:	e0b4      	b.n	8015d06 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 8015b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b9e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ba4:	e013      	b.n	8015bce <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	68fa      	ldr	r2, [r7, #12]
 8015bac:	18d1      	adds	r1, r2, r3
 8015bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb0:	00db      	lsls	r3, r3, #3
 8015bb2:	69ba      	ldr	r2, [r7, #24]
 8015bb4:	4413      	add	r3, r2
 8015bb6:	460a      	mov	r2, r1
 8015bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bbc:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8015bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	4413      	add	r3, r2
 8015bc6:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bca:	3301      	adds	r3, #1
 8015bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	dbe7      	blt.n	8015ba6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 8015bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bd8:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015bda:	2300      	movs	r3, #0
 8015bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015bde:	e08a      	b.n	8015cf6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 8015be0:	2300      	movs	r3, #0
 8015be2:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8015be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be6:	00db      	lsls	r3, r3, #3
 8015be8:	68fa      	ldr	r2, [r7, #12]
 8015bea:	4413      	add	r3, r2
 8015bec:	69ba      	ldr	r2, [r7, #24]
 8015bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bf2:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015bfa:	e071      	b.n	8015ce0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 8015bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfe:	68ba      	ldr	r2, [r7, #8]
 8015c00:	fb03 f202 	mul.w	r2, r3, r2
 8015c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c06:	4413      	add	r3, r2
 8015c08:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8015c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c0c:	69fb      	ldr	r3, [r7, #28]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	db03      	blt.n	8015c1a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 8015c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8015c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1c:	00db      	lsls	r3, r3, #3
 8015c1e:	69ba      	ldr	r2, [r7, #24]
 8015c20:	4413      	add	r3, r2
 8015c22:	ed93 7a00 	vldr	s14, [r3]
 8015c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	6a3a      	ldr	r2, [r7, #32]
 8015c2c:	4413      	add	r3, r2
 8015c2e:	edd3 7a00 	vldr	s15, [r3]
 8015c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	69ba      	ldr	r2, [r7, #24]
 8015c3c:	4413      	add	r3, r2
 8015c3e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	6a3a      	ldr	r2, [r7, #32]
 8015c48:	4413      	add	r3, r2
 8015c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8015c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c56:	edc7 7a04 	vstr	s15, [r7, #16]
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	00db      	lsls	r3, r3, #3
 8015c5e:	69ba      	ldr	r2, [r7, #24]
 8015c60:	4413      	add	r3, r2
 8015c62:	ed93 7a00 	vldr	s14, [r3]
 8015c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c68:	00db      	lsls	r3, r3, #3
 8015c6a:	6a3a      	ldr	r2, [r7, #32]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	69ba      	ldr	r2, [r7, #24]
 8015c7c:	4413      	add	r3, r2
 8015c7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c84:	00db      	lsls	r3, r3, #3
 8015c86:	6a3a      	ldr	r2, [r7, #32]
 8015c88:	4413      	add	r3, r2
 8015c8a:	edd3 7a00 	vldr	s15, [r3]
 8015c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c96:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8015c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	68fa      	ldr	r2, [r7, #12]
 8015ca0:	4413      	add	r3, r2
 8015ca2:	ed93 7a00 	vldr	s14, [r3]
 8015ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8015caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cac:	00db      	lsls	r3, r3, #3
 8015cae:	68fa      	ldr	r2, [r7, #12]
 8015cb0:	4413      	add	r3, r2
 8015cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cb6:	edc3 7a00 	vstr	s15, [r3]
 8015cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8015cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	00db      	lsls	r3, r3, #3
 8015cce:	68fa      	ldr	r2, [r7, #12]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cd6:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8015cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cdc:	3301      	adds	r3, #1
 8015cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	db89      	blt.n	8015bfc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 8015ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cea:	683b      	ldr	r3, [r7, #0]
 8015cec:	4413      	add	r3, r2
 8015cee:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	f6ff af70 	blt.w	8015be0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 8015d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d02:	3301      	adds	r3, #1
 8015d04:	637b      	str	r3, [r7, #52]	; 0x34
 8015d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	f6ff af46 	blt.w	8015b9c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8015d10:	69b8      	ldr	r0, [r7, #24]
 8015d12:	f000 fdeb 	bl	80168ec <_Z7ei_freePv>
}
 8015d16:	bf00      	nop
 8015d18:	3738      	adds	r7, #56	; 0x38
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
	...

08015d20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b08a      	sub	sp, #40	; 0x28
 8015d24:	af02      	add	r7, sp, #8
 8015d26:	60f8      	str	r0, [r7, #12]
 8015d28:	60b9      	str	r1, [r7, #8]
 8015d2a:	607a      	str	r2, [r7, #4]
 8015d2c:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8015d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d34:	1d1a      	adds	r2, r3, #4
 8015d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8015d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3e:	1d1a      	adds	r2, r3, #4
 8015d40:	62ba      	str	r2, [r7, #40]	; 0x28
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	697a      	ldr	r2, [r7, #20]
 8015d4a:	fb02 f303 	mul.w	r3, r2, r3
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	4413      	add	r3, r2
 8015d54:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	2b01      	cmp	r3, #1
 8015d5a:	d11a      	bne.n	8015d92 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	68ba      	ldr	r2, [r7, #8]
 8015d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d64:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	687a      	ldr	r2, [r7, #4]
 8015d6c:	fb02 f303 	mul.w	r3, r2, r3
 8015d70:	00db      	lsls	r3, r3, #3
 8015d72:	68ba      	ldr	r2, [r7, #8]
 8015d74:	4413      	add	r3, r2
 8015d76:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	3308      	adds	r3, #8
 8015d7c:	60fb      	str	r3, [r7, #12]
 8015d7e:	68fa      	ldr	r2, [r7, #12]
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	bf14      	ite	ne
 8015d86:	2301      	movne	r3, #1
 8015d88:	2300      	moveq	r3, #0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d1e5      	bne.n	8015d5c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 8015d90:	e022      	b.n	8015dd8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	fb03 f202 	mul.w	r2, r3, r2
 8015d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9c:	9301      	str	r3, [sp, #4]
 8015d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da0:	9300      	str	r3, [sp, #0]
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	68b9      	ldr	r1, [r7, #8]
 8015da6:	68f8      	ldr	r0, [r7, #12]
 8015da8:	f7ff ffba 	bl	8015d20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	fb02 f303 	mul.w	r3, r2, r3
 8015db4:	00db      	lsls	r3, r3, #3
 8015db6:	68ba      	ldr	r2, [r7, #8]
 8015db8:	4413      	add	r3, r2
 8015dba:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	00db      	lsls	r3, r3, #3
 8015dc0:	68fa      	ldr	r2, [r7, #12]
 8015dc2:	4413      	add	r3, r2
 8015dc4:	60fb      	str	r3, [r7, #12]
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	bf14      	ite	ne
 8015dce:	2301      	movne	r3, #1
 8015dd0:	2300      	moveq	r3, #0
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1dc      	bne.n	8015d92 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8015ddc:	69bb      	ldr	r3, [r7, #24]
 8015dde:	3b02      	subs	r3, #2
 8015de0:	2b03      	cmp	r3, #3
 8015de2:	d827      	bhi.n	8015e34 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 8015de4:	a201      	add	r2, pc, #4	; (adr r2, 8015dec <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 8015de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dea:	bf00      	nop
 8015dec:	08015dfd 	.word	0x08015dfd
 8015df0:	08015e0b 	.word	0x08015e0b
 8015df4:	08015e19 	.word	0x08015e19
 8015df8:	08015e27 	.word	0x08015e27
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e00:	6879      	ldr	r1, [r7, #4]
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7ff f805 	bl	8014e12 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 8015e08:	e01d      	b.n	8015e46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e0e:	6879      	ldr	r1, [r7, #4]
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f7ff fa33 	bl	801527c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 8015e16:	e016      	b.n	8015e46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e1c:	6879      	ldr	r1, [r7, #4]
 8015e1e:	68f8      	ldr	r0, [r7, #12]
 8015e20:	f7ff f874 	bl	8014f0c <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8015e24:	e00f      	b.n	8015e46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e2a:	6879      	ldr	r1, [r7, #4]
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	f7ff fb95 	bl	801555c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8015e32:	e008      	b.n	8015e46 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015e3c:	6879      	ldr	r1, [r7, #4]
 8015e3e:	68f8      	ldr	r0, [r7, #12]
 8015e40:	f7ff fe95 	bl	8015b6e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8015e44:	bf00      	nop
    }
}
 8015e46:	bf00      	nop
 8015e48:	3720      	adds	r7, #32
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop

08015e50 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b086      	sub	sp, #24
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
    int p=4;
 8015e5a:	2304      	movs	r3, #4
 8015e5c:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7ea fb90 	bl	8000584 <__aeabi_i2d>
 8015e64:	4602      	mov	r2, r0
 8015e66:	460b      	mov	r3, r1
 8015e68:	ec43 2b10 	vmov	d0, r2, r3
 8015e6c:	f003 fc56 	bl	801971c <sqrt>
 8015e70:	eeb0 7a40 	vmov.f32	s14, s0
 8015e74:	eef0 7a60 	vmov.f32	s15, s1
 8015e78:	eeb0 0a47 	vmov.f32	s0, s14
 8015e7c:	eef0 0a67 	vmov.f32	s1, s15
 8015e80:	f003 ff92 	bl	8019da8 <floor>
 8015e84:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8015e88:	e01e      	b.n	8015ec8 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	2b02      	cmp	r3, #2
 8015e8e:	d005      	beq.n	8015e9c <_ZL9kf_factoriPi+0x4c>
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	2b04      	cmp	r3, #4
 8015e94:	d105      	bne.n	8015ea2 <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 8015e96:	2302      	movs	r3, #2
 8015e98:	617b      	str	r3, [r7, #20]
 8015e9a:	e006      	b.n	8015eaa <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 8015e9c:	2303      	movs	r3, #3
 8015e9e:	617b      	str	r3, [r7, #20]
 8015ea0:	e003      	b.n	8015eaa <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 8015ea2:	697b      	ldr	r3, [r7, #20]
 8015ea4:	3302      	adds	r3, #2
 8015ea6:	617b      	str	r3, [r7, #20]
 8015ea8:	bf00      	nop
            }
            if (p > floor_sqrt)
 8015eaa:	6978      	ldr	r0, [r7, #20]
 8015eac:	f7ea fb6a 	bl	8000584 <__aeabi_i2d>
 8015eb0:	4602      	mov	r2, r0
 8015eb2:	460b      	mov	r3, r1
 8015eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015eb8:	f7ea fe40 	bl	8000b3c <__aeabi_dcmplt>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d100      	bne.n	8015ec4 <_ZL9kf_factoriPi+0x74>
 8015ec2:	e001      	b.n	8015ec8 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	697a      	ldr	r2, [r7, #20]
 8015ecc:	fb93 f2f2 	sdiv	r2, r3, r2
 8015ed0:	6979      	ldr	r1, [r7, #20]
 8015ed2:	fb01 f202 	mul.w	r2, r1, r2
 8015ed6:	1a9b      	subs	r3, r3, r2
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d1d6      	bne.n	8015e8a <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ee4:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	1d1a      	adds	r2, r3, #4
 8015eea:	603a      	str	r2, [r7, #0]
 8015eec:	697a      	ldr	r2, [r7, #20]
 8015eee:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	1d1a      	adds	r2, r3, #4
 8015ef4:	603a      	str	r2, [r7, #0]
 8015ef6:	687a      	ldr	r2, [r7, #4]
 8015ef8:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	dce3      	bgt.n	8015ec8 <_ZL9kf_factoriPi+0x78>
}
 8015f00:	bf00      	nop
 8015f02:	bf00      	nop
 8015f04:	3718      	adds	r7, #24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	0000      	movs	r0, r0
 8015f0c:	0000      	movs	r0, r0
	...

08015f10 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 8015f10:	b5b0      	push	{r4, r5, r7, lr}
 8015f12:	b090      	sub	sp, #64	; 0x40
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	60f8      	str	r0, [r7, #12]
 8015f18:	60b9      	str	r1, [r7, #8]
 8015f1a:	607a      	str	r2, [r7, #4]
 8015f1c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 8015f26:	00db      	lsls	r3, r3, #3
 8015f28:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d104      	bne.n	8015f3a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8015f30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f32:	f000 fcc1 	bl	80168b8 <_Z9ei_mallocj>
 8015f36:	63f8      	str	r0, [r7, #60]	; 0x3c
 8015f38:	e00c      	b.n	8015f54 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d006      	beq.n	8015f4e <kiss_fft_alloc+0x3e>
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f46:	429a      	cmp	r2, r3
 8015f48:	d801      	bhi.n	8015f4e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f52:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8015f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f000 80a0 	beq.w	801609c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8015f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f5e:	68fa      	ldr	r2, [r7, #12]
 8015f60:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8015f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f64:	68ba      	ldr	r2, [r7, #8]
 8015f66:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d048      	beq.n	8016000 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8015f6e:	2300      	movs	r3, #0
 8015f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f72:	e040      	b.n	8015ff6 <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8015f74:	a350      	add	r3, pc, #320	; (adr r3, 80160b8 <kiss_fft_alloc+0x1a8>)
 8015f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8015f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015f80:	f7ea fb00 	bl	8000584 <__aeabi_i2d>
 8015f84:	a34e      	add	r3, pc, #312	; (adr r3, 80160c0 <kiss_fft_alloc+0x1b0>)
 8015f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8a:	f7ea fb65 	bl	8000658 <__aeabi_dmul>
 8015f8e:	4602      	mov	r2, r0
 8015f90:	460b      	mov	r3, r1
 8015f92:	4614      	mov	r4, r2
 8015f94:	461d      	mov	r5, r3
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	f7ea faf4 	bl	8000584 <__aeabi_i2d>
 8015f9c:	4602      	mov	r2, r0
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	4620      	mov	r0, r4
 8015fa2:	4629      	mov	r1, r5
 8015fa4:	f7ea fc82 	bl	80008ac <__aeabi_ddiv>
 8015fa8:	4602      	mov	r2, r0
 8015faa:	460b      	mov	r3, r1
 8015fac:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8015fb0:	ed97 0b04 	vldr	d0, [r7, #16]
 8015fb4:	f003 fbe0 	bl	8019778 <cos>
 8015fb8:	ec51 0b10 	vmov	r0, r1, d0
 8015fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fbe:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8015fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	18d4      	adds	r4, r2, r3
 8015fc8:	f7ea fe3e 	bl	8000c48 <__aeabi_d2f>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	6023      	str	r3, [r4, #0]
 8015fd0:	ed97 0b04 	vldr	d0, [r7, #16]
 8015fd4:	f003 fc5c 	bl	8019890 <sin>
 8015fd8:	ec51 0b10 	vmov	r0, r1, d0
 8015fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fde:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8015fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe4:	00db      	lsls	r3, r3, #3
 8015fe6:	18d4      	adds	r4, r2, r3
 8015fe8:	f7ea fe2e 	bl	8000c48 <__aeabi_d2f>
 8015fec:	4603      	mov	r3, r0
 8015fee:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8015ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	dbba      	blt.n	8015f74 <kiss_fft_alloc+0x64>
 8015ffe:	e047      	b.n	8016090 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8016000:	2300      	movs	r3, #0
 8016002:	63bb      	str	r3, [r7, #56]	; 0x38
 8016004:	e040      	b.n	8016088 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8016006:	a32c      	add	r3, pc, #176	; (adr r3, 80160b8 <kiss_fft_alloc+0x1a8>)
 8016008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801600c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8016010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016012:	f7ea fab7 	bl	8000584 <__aeabi_i2d>
 8016016:	a32c      	add	r3, pc, #176	; (adr r3, 80160c8 <kiss_fft_alloc+0x1b8>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea fb1c 	bl	8000658 <__aeabi_dmul>
 8016020:	4602      	mov	r2, r0
 8016022:	460b      	mov	r3, r1
 8016024:	4614      	mov	r4, r2
 8016026:	461d      	mov	r5, r3
 8016028:	68f8      	ldr	r0, [r7, #12]
 801602a:	f7ea faab 	bl	8000584 <__aeabi_i2d>
 801602e:	4602      	mov	r2, r0
 8016030:	460b      	mov	r3, r1
 8016032:	4620      	mov	r0, r4
 8016034:	4629      	mov	r1, r5
 8016036:	f7ea fc39 	bl	80008ac <__aeabi_ddiv>
 801603a:	4602      	mov	r2, r0
 801603c:	460b      	mov	r3, r1
 801603e:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8016042:	ed97 0b08 	vldr	d0, [r7, #32]
 8016046:	f003 fb97 	bl	8019778 <cos>
 801604a:	ec51 0b10 	vmov	r0, r1, d0
 801604e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016050:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016056:	00db      	lsls	r3, r3, #3
 8016058:	18d4      	adds	r4, r2, r3
 801605a:	f7ea fdf5 	bl	8000c48 <__aeabi_d2f>
 801605e:	4603      	mov	r3, r0
 8016060:	6023      	str	r3, [r4, #0]
 8016062:	ed97 0b08 	vldr	d0, [r7, #32]
 8016066:	f003 fc13 	bl	8019890 <sin>
 801606a:	ec51 0b10 	vmov	r0, r1, d0
 801606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016070:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016076:	00db      	lsls	r3, r3, #3
 8016078:	18d4      	adds	r4, r2, r3
 801607a:	f7ea fde5 	bl	8000c48 <__aeabi_d2f>
 801607e:	4603      	mov	r3, r0
 8016080:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8016082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016084:	3301      	adds	r3, #1
 8016086:	63bb      	str	r3, [r7, #56]	; 0x38
 8016088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	429a      	cmp	r2, r3
 801608e:	dbba      	blt.n	8016006 <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 8016090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016092:	3308      	adds	r3, #8
 8016094:	4619      	mov	r1, r3
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7ff feda 	bl	8015e50 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 801609c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d002      	beq.n	80160a8 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 80160a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160a6:	601a      	str	r2, [r3, #0]
    }

    return st;
 80160a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3740      	adds	r7, #64	; 0x40
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bdb0      	pop	{r4, r5, r7, pc}
 80160b2:	bf00      	nop
 80160b4:	f3af 8000 	nop.w
 80160b8:	54442d18 	.word	0x54442d18
 80160bc:	400921fb 	.word	0x400921fb
 80160c0:	54442d18 	.word	0x54442d18
 80160c4:	401921fb 	.word	0x401921fb
 80160c8:	54442d18 	.word	0x54442d18
 80160cc:	c01921fb 	.word	0xc01921fb

080160d0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b088      	sub	sp, #32
 80160d4:	af02      	add	r7, sp, #8
 80160d6:	60f8      	str	r0, [r7, #12]
 80160d8:	60b9      	str	r1, [r7, #8]
 80160da:	607a      	str	r2, [r7, #4]
 80160dc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	429a      	cmp	r2, r3
 80160e4:	d11d      	bne.n	8016122 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	00db      	lsls	r3, r3, #3
 80160ec:	4618      	mov	r0, r3
 80160ee:	f000 fbe3 	bl	80168b8 <_Z9ei_mallocj>
 80160f2:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	3308      	adds	r3, #8
 80160f8:	68fa      	ldr	r2, [r7, #12]
 80160fa:	9201      	str	r2, [sp, #4]
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	2201      	movs	r2, #1
 8016102:	68b9      	ldr	r1, [r7, #8]
 8016104:	6978      	ldr	r0, [r7, #20]
 8016106:	f7ff fe0b 	bl	8015d20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	00db      	lsls	r3, r3, #3
 8016110:	461a      	mov	r2, r3
 8016112:	6979      	ldr	r1, [r7, #20]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f007 f976 	bl	801d406 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 801611a:	6978      	ldr	r0, [r7, #20]
 801611c:	f000 fbe6 	bl	80168ec <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8016120:	e00a      	b.n	8016138 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	3308      	adds	r3, #8
 8016126:	68fa      	ldr	r2, [r7, #12]
 8016128:	9201      	str	r2, [sp, #4]
 801612a:	9300      	str	r3, [sp, #0]
 801612c:	683b      	ldr	r3, [r7, #0]
 801612e:	2201      	movs	r2, #1
 8016130:	68b9      	ldr	r1, [r7, #8]
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7ff fdf4 	bl	8015d20 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8016138:	bf00      	nop
 801613a:	3718      	adds	r7, #24
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}

08016140 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	60f8      	str	r0, [r7, #12]
 8016148:	60b9      	str	r1, [r7, #8]
 801614a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 801614c:	2301      	movs	r3, #1
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	68b9      	ldr	r1, [r7, #8]
 8016152:	68f8      	ldr	r0, [r7, #12]
 8016154:	f7ff ffbc 	bl	80160d0 <kiss_fft_stride>
}
 8016158:	bf00      	nop
 801615a:	3710      	adds	r7, #16
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}

08016160 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8016160:	b5b0      	push	{r4, r5, r7, lr}
 8016162:	b090      	sub	sp, #64	; 0x40
 8016164:	af02      	add	r7, sp, #8
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
 801616c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 801616e:	2300      	movs	r3, #0
 8016170:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8016172:	2300      	movs	r3, #0
 8016174:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f003 0301 	and.w	r3, r3, #1
 801617c:	2b00      	cmp	r3, #0
 801617e:	d004      	beq.n	801618a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8016180:	4887      	ldr	r0, [pc, #540]	; (80163a0 <kiss_fftr_alloc+0x240>)
 8016182:	f7f2 fe47 	bl	8008e14 <_Z9ei_printfPKcz>
        return NULL;
 8016186:	2300      	movs	r3, #0
 8016188:	e0fc      	b.n	8016384 <kiss_fftr_alloc+0x224>
    }
    nfft >>= 1;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	105b      	asrs	r3, r3, #1
 801618e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8016190:	f107 0314 	add.w	r3, r7, #20
 8016194:	2200      	movs	r2, #0
 8016196:	9200      	str	r2, [sp, #0]
 8016198:	2200      	movs	r2, #0
 801619a:	68b9      	ldr	r1, [r7, #8]
 801619c:	68f8      	ldr	r0, [r7, #12]
 801619e:	f7ff feb7 	bl	8015f10 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	4613      	mov	r3, r2
 80161a6:	005b      	lsls	r3, r3, #1
 80161a8:	4413      	add	r3, r2
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	da00      	bge.n	80161b0 <kiss_fftr_alloc+0x50>
 80161ae:	3301      	adds	r3, #1
 80161b0:	105b      	asrs	r3, r3, #1
 80161b2:	00da      	lsls	r2, r3, #3
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	4413      	add	r3, r2
 80161b8:	330c      	adds	r3, #12
 80161ba:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d104      	bne.n	80161cc <kiss_fftr_alloc+0x6c>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 80161c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161c4:	f000 fb78 	bl	80168b8 <_Z9ei_mallocj>
 80161c8:	6338      	str	r0, [r7, #48]	; 0x30
 80161ca:	e009      	b.n	80161e0 <kiss_fftr_alloc+0x80>
    } else {
        if (*lenmem >= memneeded)
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d801      	bhi.n	80161da <kiss_fftr_alloc+0x7a>
            st = (kiss_fftr_cfg) mem;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161de:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 80161e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d101      	bne.n	80161ea <kiss_fftr_alloc+0x8a>
        return NULL;
 80161e6:	2300      	movs	r3, #0
 80161e8:	e0cc      	b.n	8016384 <kiss_fftr_alloc+0x224>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80161ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ec:	f103 020c 	add.w	r2, r3, #12
 80161f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f2:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80161f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f6:	681a      	ldr	r2, [r3, #0]
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	441a      	add	r2, r3
 80161fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fe:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8016200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016202:	685a      	ldr	r2, [r3, #4]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	00db      	lsls	r3, r3, #3
 8016208:	441a      	add	r2, r3
 801620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801620c:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 801620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016210:	681a      	ldr	r2, [r3, #0]
 8016212:	f107 0314 	add.w	r3, r7, #20
 8016216:	2100      	movs	r1, #0
 8016218:	9100      	str	r1, [sp, #0]
 801621a:	68b9      	ldr	r1, [r7, #8]
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	f7ff fe77 	bl	8015f10 <kiss_fft_alloc>

    if (inverse_fft) {
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d053      	beq.n	80162d0 <kiss_fftr_alloc+0x170>
        for (i = 0; i < nfft/2; ++i) {
 8016228:	2300      	movs	r3, #0
 801622a:	637b      	str	r3, [r7, #52]	; 0x34
 801622c:	e046      	b.n	80162bc <kiss_fftr_alloc+0x15c>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016230:	3301      	adds	r3, #1
 8016232:	4618      	mov	r0, r3
 8016234:	f7ea f9a6 	bl	8000584 <__aeabi_i2d>
 8016238:	4604      	mov	r4, r0
 801623a:	460d      	mov	r5, r1
 801623c:	68f8      	ldr	r0, [r7, #12]
 801623e:	f7ea f9a1 	bl	8000584 <__aeabi_i2d>
 8016242:	4602      	mov	r2, r0
 8016244:	460b      	mov	r3, r1
 8016246:	4620      	mov	r0, r4
 8016248:	4629      	mov	r1, r5
 801624a:	f7ea fb2f 	bl	80008ac <__aeabi_ddiv>
 801624e:	4602      	mov	r2, r0
 8016250:	460b      	mov	r3, r1
 8016252:	4610      	mov	r0, r2
 8016254:	4619      	mov	r1, r3
 8016256:	f04f 0200 	mov.w	r2, #0
 801625a:	4b52      	ldr	r3, [pc, #328]	; (80163a4 <kiss_fftr_alloc+0x244>)
 801625c:	f7ea f846 	bl	80002ec <__adddf3>
 8016260:	4602      	mov	r2, r0
 8016262:	460b      	mov	r3, r1
 8016264:	4610      	mov	r0, r2
 8016266:	4619      	mov	r1, r3
            double phase =
 8016268:	a349      	add	r3, pc, #292	; (adr r3, 8016390 <kiss_fftr_alloc+0x230>)
 801626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801626e:	f7ea f9f3 	bl	8000658 <__aeabi_dmul>
 8016272:	4602      	mov	r2, r0
 8016274:	460b      	mov	r3, r1
 8016276:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 801627a:	ed97 0b06 	vldr	d0, [r7, #24]
 801627e:	f003 fa7b 	bl	8019778 <cos>
 8016282:	ec51 0b10 	vmov	r0, r1, d0
 8016286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016288:	689a      	ldr	r2, [r3, #8]
 801628a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	18d4      	adds	r4, r2, r3
 8016290:	f7ea fcda 	bl	8000c48 <__aeabi_d2f>
 8016294:	4603      	mov	r3, r0
 8016296:	6023      	str	r3, [r4, #0]
 8016298:	ed97 0b06 	vldr	d0, [r7, #24]
 801629c:	f003 faf8 	bl	8019890 <sin>
 80162a0:	ec51 0b10 	vmov	r0, r1, d0
 80162a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a6:	689a      	ldr	r2, [r3, #8]
 80162a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162aa:	00db      	lsls	r3, r3, #3
 80162ac:	18d4      	adds	r4, r2, r3
 80162ae:	f7ea fccb 	bl	8000c48 <__aeabi_d2f>
 80162b2:	4603      	mov	r3, r0
 80162b4:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 80162b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b8:	3301      	adds	r3, #1
 80162ba:	637b      	str	r3, [r7, #52]	; 0x34
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	da00      	bge.n	80162c4 <kiss_fftr_alloc+0x164>
 80162c2:	3301      	adds	r3, #1
 80162c4:	105b      	asrs	r3, r3, #1
 80162c6:	461a      	mov	r2, r3
 80162c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ca:	4293      	cmp	r3, r2
 80162cc:	dbaf      	blt.n	801622e <kiss_fftr_alloc+0xce>
 80162ce:	e052      	b.n	8016376 <kiss_fftr_alloc+0x216>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 80162d0:	2300      	movs	r3, #0
 80162d2:	637b      	str	r3, [r7, #52]	; 0x34
 80162d4:	e046      	b.n	8016364 <kiss_fftr_alloc+0x204>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80162d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d8:	3301      	adds	r3, #1
 80162da:	4618      	mov	r0, r3
 80162dc:	f7ea f952 	bl	8000584 <__aeabi_i2d>
 80162e0:	4604      	mov	r4, r0
 80162e2:	460d      	mov	r5, r1
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f7ea f94d 	bl	8000584 <__aeabi_i2d>
 80162ea:	4602      	mov	r2, r0
 80162ec:	460b      	mov	r3, r1
 80162ee:	4620      	mov	r0, r4
 80162f0:	4629      	mov	r1, r5
 80162f2:	f7ea fadb 	bl	80008ac <__aeabi_ddiv>
 80162f6:	4602      	mov	r2, r0
 80162f8:	460b      	mov	r3, r1
 80162fa:	4610      	mov	r0, r2
 80162fc:	4619      	mov	r1, r3
 80162fe:	f04f 0200 	mov.w	r2, #0
 8016302:	4b28      	ldr	r3, [pc, #160]	; (80163a4 <kiss_fftr_alloc+0x244>)
 8016304:	f7e9 fff2 	bl	80002ec <__adddf3>
 8016308:	4602      	mov	r2, r0
 801630a:	460b      	mov	r3, r1
 801630c:	4610      	mov	r0, r2
 801630e:	4619      	mov	r1, r3
            double phase =
 8016310:	a321      	add	r3, pc, #132	; (adr r3, 8016398 <kiss_fftr_alloc+0x238>)
 8016312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016316:	f7ea f99f 	bl	8000658 <__aeabi_dmul>
 801631a:	4602      	mov	r2, r0
 801631c:	460b      	mov	r3, r1
 801631e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8016322:	ed97 0b08 	vldr	d0, [r7, #32]
 8016326:	f003 fa27 	bl	8019778 <cos>
 801632a:	ec51 0b10 	vmov	r0, r1, d0
 801632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016330:	689a      	ldr	r2, [r3, #8]
 8016332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016334:	00db      	lsls	r3, r3, #3
 8016336:	18d4      	adds	r4, r2, r3
 8016338:	f7ea fc86 	bl	8000c48 <__aeabi_d2f>
 801633c:	4603      	mov	r3, r0
 801633e:	6023      	str	r3, [r4, #0]
 8016340:	ed97 0b08 	vldr	d0, [r7, #32]
 8016344:	f003 faa4 	bl	8019890 <sin>
 8016348:	ec51 0b10 	vmov	r0, r1, d0
 801634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634e:	689a      	ldr	r2, [r3, #8]
 8016350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016352:	00db      	lsls	r3, r3, #3
 8016354:	18d4      	adds	r4, r2, r3
 8016356:	f7ea fc77 	bl	8000c48 <__aeabi_d2f>
 801635a:	4603      	mov	r3, r0
 801635c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016360:	3301      	adds	r3, #1
 8016362:	637b      	str	r3, [r7, #52]	; 0x34
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2b00      	cmp	r3, #0
 8016368:	da00      	bge.n	801636c <kiss_fftr_alloc+0x20c>
 801636a:	3301      	adds	r3, #1
 801636c:	105b      	asrs	r3, r3, #1
 801636e:	461a      	mov	r2, r3
 8016370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016372:	4293      	cmp	r3, r2
 8016374:	dbaf      	blt.n	80162d6 <kiss_fftr_alloc+0x176>
        }
    }

    if (memallocated != NULL) {
 8016376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016378:	2b00      	cmp	r3, #0
 801637a:	d002      	beq.n	8016382 <kiss_fftr_alloc+0x222>
        *memallocated = memneeded;
 801637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801637e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016380:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8016384:	4618      	mov	r0, r3
 8016386:	3738      	adds	r7, #56	; 0x38
 8016388:	46bd      	mov	sp, r7
 801638a:	bdb0      	pop	{r4, r5, r7, pc}
 801638c:	f3af 8000 	nop.w
 8016390:	54442d18 	.word	0x54442d18
 8016394:	400921fb 	.word	0x400921fb
 8016398:	54442d18 	.word	0x54442d18
 801639c:	c00921fb 	.word	0xc00921fb
 80163a0:	080204d8 	.word	0x080204d8
 80163a4:	3fe00000 	.word	0x3fe00000

080163a8 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b092      	sub	sp, #72	; 0x48
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d002      	beq.n	80163c4 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 80163be:	4888      	ldr	r0, [pc, #544]	; (80165e0 <kiss_fftr+0x238>)
 80163c0:	f7f2 fd28 	bl	8008e14 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	6818      	ldr	r0, [r3, #0]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	461a      	mov	r2, r3
 80163d6:	68b9      	ldr	r1, [r7, #8]
 80163d8:	f7ff feb2 	bl	8016140 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	685b      	ldr	r3, [r3, #4]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 80163ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80163f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80163f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 80163fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8016402:	edd7 7a05 	vldr	s15, [r7, #20]
 8016406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016408:	00db      	lsls	r3, r3, #3
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	4413      	add	r3, r2
 801640e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016412:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f04f 0200 	mov.w	r2, #0
 801641c:	605a      	str	r2, [r3, #4]
 801641e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016420:	00db      	lsls	r3, r3, #3
 8016422:	687a      	ldr	r2, [r7, #4]
 8016424:	4413      	add	r3, r2
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	6852      	ldr	r2, [r2, #4]
 801642a:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 801642c:	2301      	movs	r3, #1
 801642e:	647b      	str	r3, [r7, #68]	; 0x44
 8016430:	e0c7      	b.n	80165c2 <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	685a      	ldr	r2, [r3, #4]
 8016436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016438:	00db      	lsls	r3, r3, #3
 801643a:	441a      	add	r2, r3
 801643c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016444:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	685a      	ldr	r2, [r3, #4]
 801644c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801644e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016450:	1acb      	subs	r3, r1, r3
 8016452:	00db      	lsls	r3, r3, #3
 8016454:	4413      	add	r3, r2
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	685a      	ldr	r2, [r3, #4]
 801645e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016462:	1acb      	subs	r3, r1, r3
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	4413      	add	r3, r2
 8016468:	edd3 7a01 	vldr	s15, [r3, #4]
 801646c:	eef1 7a67 	vneg.f32	s15, s15
 8016470:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8016474:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016478:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801647c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016480:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016484:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016488:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801648c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016490:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8016494:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016498:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801649c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164a0:	edc7 7a08 	vstr	s15, [r7, #32]
 80164a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80164a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80164ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 80164b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	689a      	ldr	r2, [r3, #8]
 80164bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80164be:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80164c2:	440b      	add	r3, r1
 80164c4:	00db      	lsls	r3, r3, #3
 80164c6:	4413      	add	r3, r2
 80164c8:	edd3 7a00 	vldr	s15, [r3]
 80164cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	689a      	ldr	r2, [r3, #8]
 80164d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80164da:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80164de:	440b      	add	r3, r1
 80164e0:	00db      	lsls	r3, r3, #3
 80164e2:	4413      	add	r3, r2
 80164e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80164e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80164ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164f0:	edc7 7a06 	vstr	s15, [r7, #24]
 80164f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	689a      	ldr	r2, [r3, #8]
 80164fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80164fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016502:	440b      	add	r3, r1
 8016504:	00db      	lsls	r3, r3, #3
 8016506:	4413      	add	r3, r2
 8016508:	edd3 7a01 	vldr	s15, [r3, #4]
 801650c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016510:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	689a      	ldr	r2, [r3, #8]
 8016518:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801651a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801651e:	440b      	add	r3, r1
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	4413      	add	r3, r2
 8016524:	edd3 7a00 	vldr	s15, [r3]
 8016528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801652c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016530:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8016534:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016538:	edd7 7a06 	vldr	s15, [r7, #24]
 801653c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	4413      	add	r3, r2
 8016548:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801654c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016550:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8016554:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016558:	edd7 7a07 	vldr	s15, [r7, #28]
 801655c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016562:	00db      	lsls	r3, r3, #3
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	4413      	add	r3, r2
 8016568:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801656c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016570:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8016574:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016578:	edd7 7a06 	vldr	s15, [r7, #24]
 801657c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016584:	1ad3      	subs	r3, r2, r3
 8016586:	00db      	lsls	r3, r3, #3
 8016588:	687a      	ldr	r2, [r7, #4]
 801658a:	4413      	add	r3, r2
 801658c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016594:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8016598:	ed97 7a07 	vldr	s14, [r7, #28]
 801659c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80165a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80165a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	4413      	add	r3, r2
 80165b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80165b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165b8:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 80165bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165be:	3301      	adds	r3, #1
 80165c0:	647b      	str	r3, [r7, #68]	; 0x44
 80165c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	da00      	bge.n	80165ca <kiss_fftr+0x222>
 80165c8:	3301      	adds	r3, #1
 80165ca:	105b      	asrs	r3, r3, #1
 80165cc:	461a      	mov	r2, r3
 80165ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165d0:	4293      	cmp	r3, r2
 80165d2:	f77f af2e 	ble.w	8016432 <kiss_fftr+0x8a>
    }
}
 80165d6:	bf00      	nop
 80165d8:	bf00      	nop
 80165da:	3748      	adds	r7, #72	; 0x48
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	080204f4 	.word	0x080204f4

080165e4 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b082      	sub	sp, #8
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80165ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80165f2:	f003 fa3d 	bl	8019a70 <log10f>
 80165f6:	eef0 7a40 	vmov.f32	s15, s0
 80165fa:	eeb0 0a67 	vmov.f32	s0, s15
 80165fe:	3708      	adds	r7, #8
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}

08016604 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 8016604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
 801660a:	ed87 0b00 	vstr	d0, [r7]
 801660e:	683c      	ldr	r4, [r7, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8016616:	2301      	movs	r3, #1
 8016618:	461e      	mov	r6, r3
 801661a:	f04f 32ff 	mov.w	r2, #4294967295
 801661e:	4b10      	ldr	r3, [pc, #64]	; (8016660 <_ZSt5isinfd+0x5c>)
 8016620:	4620      	mov	r0, r4
 8016622:	4629      	mov	r1, r5
 8016624:	f7ea fab2 	bl	8000b8c <__aeabi_dcmpun>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d10b      	bne.n	8016646 <_ZSt5isinfd+0x42>
 801662e:	f04f 32ff 	mov.w	r2, #4294967295
 8016632:	4b0b      	ldr	r3, [pc, #44]	; (8016660 <_ZSt5isinfd+0x5c>)
 8016634:	4620      	mov	r0, r4
 8016636:	4629      	mov	r1, r5
 8016638:	f7ea fa8a 	bl	8000b50 <__aeabi_dcmple>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d101      	bne.n	8016646 <_ZSt5isinfd+0x42>
 8016642:	2300      	movs	r3, #0
 8016644:	461e      	mov	r6, r3
 8016646:	b2f3      	uxtb	r3, r6
 8016648:	f083 0301 	eor.w	r3, r3, #1
 801664c:	b2db      	uxtb	r3, r3
 801664e:	2b00      	cmp	r3, #0
 8016650:	bf14      	ite	ne
 8016652:	2301      	movne	r3, #1
 8016654:	2300      	moveq	r3, #0
 8016656:	b2db      	uxtb	r3, r3
 8016658:	4618      	mov	r0, r3
 801665a:	370c      	adds	r7, #12
 801665c:	46bd      	mov	sp, r7
 801665e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016660:	7fefffff 	.word	0x7fefffff

08016664 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8016664:	b480      	push	{r7}
 8016666:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8016668:	2300      	movs	r3, #0
}
 801666a:	4618      	mov	r0, r3
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr

08016674 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8016674:	b5b0      	push	{r4, r5, r7, lr}
 8016676:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8016678:	f7f9 ff36 	bl	80104e8 <HAL_GetTick>
 801667c:	4603      	mov	r3, r0
 801667e:	2200      	movs	r2, #0
 8016680:	461c      	mov	r4, r3
 8016682:	4615      	mov	r5, r2
 8016684:	4622      	mov	r2, r4
 8016686:	462b      	mov	r3, r5
}
 8016688:	4610      	mov	r0, r2
 801668a:	4619      	mov	r1, r3
 801668c:	bdb0      	pop	{r4, r5, r7, pc}

0801668e <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 801668e:	b5b0      	push	{r4, r5, r7, lr}
 8016690:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8016692:	f7f9 ff29 	bl	80104e8 <HAL_GetTick>
 8016696:	4603      	mov	r3, r0
 8016698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801669c:	fb02 f303 	mul.w	r3, r2, r3
 80166a0:	2200      	movs	r2, #0
 80166a2:	461c      	mov	r4, r3
 80166a4:	4615      	mov	r5, r2
 80166a6:	4622      	mov	r2, r4
 80166a8:	462b      	mov	r3, r5
}
 80166aa:	4610      	mov	r0, r2
 80166ac:	4619      	mov	r1, r3
 80166ae:	bdb0      	pop	{r4, r5, r7, pc}

080166b0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 80166b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166b4:	b08c      	sub	sp, #48	; 0x30
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 80166bc:	466b      	mov	r3, sp
 80166be:	4698      	mov	r8, r3
    float n = f;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 80166c4:	4b78      	ldr	r3, [pc, #480]	; (80168a8 <_Z15ei_printf_floatf+0x1f8>)
 80166c6:	681e      	ldr	r6, [r3, #0]
 80166c8:	1e73      	subs	r3, r6, #1
 80166ca:	623b      	str	r3, [r7, #32]
 80166cc:	4632      	mov	r2, r6
 80166ce:	2300      	movs	r3, #0
 80166d0:	4614      	mov	r4, r2
 80166d2:	461d      	mov	r5, r3
 80166d4:	f04f 0200 	mov.w	r2, #0
 80166d8:	f04f 0300 	mov.w	r3, #0
 80166dc:	00eb      	lsls	r3, r5, #3
 80166de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80166e2:	00e2      	lsls	r2, r4, #3
 80166e4:	4632      	mov	r2, r6
 80166e6:	2300      	movs	r3, #0
 80166e8:	4610      	mov	r0, r2
 80166ea:	4619      	mov	r1, r3
 80166ec:	f04f 0200 	mov.w	r2, #0
 80166f0:	f04f 0300 	mov.w	r3, #0
 80166f4:	00cb      	lsls	r3, r1, #3
 80166f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80166fa:	00c2      	lsls	r2, r0, #3
 80166fc:	4633      	mov	r3, r6
 80166fe:	3307      	adds	r3, #7
 8016700:	08db      	lsrs	r3, r3, #3
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	ebad 0d03 	sub.w	sp, sp, r3
 8016708:	466b      	mov	r3, sp
 801670a:	3300      	adds	r3, #0
 801670c:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 801670e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016712:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671a:	d106      	bne.n	801672a <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	4963      	ldr	r1, [pc, #396]	; (80168ac <_Z15ei_printf_floatf+0x1fc>)
 8016720:	461a      	mov	r2, r3
 8016722:	460b      	mov	r3, r1
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	8013      	strh	r3, [r2, #0]
 8016728:	e0ad      	b.n	8016886 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 801672a:	69fb      	ldr	r3, [r7, #28]
 801672c:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 801672e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016732:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673a:	bf4c      	ite	mi
 801673c:	2301      	movmi	r3, #1
 801673e:	2300      	movpl	r3, #0
 8016740:	b2db      	uxtb	r3, r3
 8016742:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8016744:	69bb      	ldr	r3, [r7, #24]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d005      	beq.n	8016756 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 801674a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801674e:	eef1 7a67 	vneg.f32	s15, s15
 8016752:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 8016756:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 801675a:	f7ff ff43 	bl	80165e4 <_ZSt5log10f>
 801675e:	eef0 7a40 	vmov.f32	s15, s0
 8016762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016766:	ee17 3a90 	vmov	r3, s15
 801676a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801676c:	69bb      	ldr	r3, [r7, #24]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d004      	beq.n	801677c <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8016772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016774:	1c5a      	adds	r2, r3, #1
 8016776:	627a      	str	r2, [r7, #36]	; 0x24
 8016778:	222d      	movs	r2, #45	; 0x2d
 801677a:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801677e:	2b00      	cmp	r3, #0
 8016780:	dc70      	bgt.n	8016864 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8016786:	e06d      	b.n	8016864 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8016788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801678a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80168a0 <_Z15ei_printf_floatf+0x1f0>
 801678e:	f000 f8b8 	bl	8016902 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8016792:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8016796:	f04f 0200 	mov.w	r2, #0
 801679a:	f04f 0300 	mov.w	r3, #0
 801679e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80167a2:	f7ea f9e9 	bl	8000b78 <__aeabi_dcmpgt>
 80167a6:	4603      	mov	r3, r0
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00b      	beq.n	80167c4 <_Z15ei_printf_floatf+0x114>
 80167ac:	ed97 0b04 	vldr	d0, [r7, #16]
 80167b0:	f7ff ff28 	bl	8016604 <_ZSt5isinfd>
 80167b4:	4603      	mov	r3, r0
 80167b6:	f083 0301 	eor.w	r3, r3, #1
 80167ba:	b2db      	uxtb	r3, r3
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d001      	beq.n	80167c4 <_Z15ei_printf_floatf+0x114>
 80167c0:	2301      	movs	r3, #1
 80167c2:	e000      	b.n	80167c6 <_Z15ei_printf_floatf+0x116>
 80167c4:	2300      	movs	r3, #0
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d03a      	beq.n	8016840 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 80167ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167cc:	f7e9 feec 	bl	80005a8 <__aeabi_f2d>
 80167d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80167d4:	f7ea f86a 	bl	80008ac <__aeabi_ddiv>
 80167d8:	4602      	mov	r2, r0
 80167da:	460b      	mov	r3, r1
 80167dc:	ec43 2b17 	vmov	d7, r2, r3
 80167e0:	eeb0 0a47 	vmov.f32	s0, s14
 80167e4:	eef0 0a67 	vmov.f32	s1, s15
 80167e8:	f003 fade 	bl	8019da8 <floor>
 80167ec:	ec53 2b10 	vmov	r2, r3, d0
 80167f0:	4610      	mov	r0, r2
 80167f2:	4619      	mov	r1, r3
 80167f4:	f7ea f9e0 	bl	8000bb8 <__aeabi_d2iz>
 80167f8:	4603      	mov	r3, r0
 80167fa:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80167fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167fe:	f7e9 fed3 	bl	80005a8 <__aeabi_f2d>
 8016802:	4604      	mov	r4, r0
 8016804:	460d      	mov	r5, r1
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f7e9 febc 	bl	8000584 <__aeabi_i2d>
 801680c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016810:	f7e9 ff22 	bl	8000658 <__aeabi_dmul>
 8016814:	4602      	mov	r2, r0
 8016816:	460b      	mov	r3, r1
 8016818:	4620      	mov	r0, r4
 801681a:	4629      	mov	r1, r5
 801681c:	f7e9 fd64 	bl	80002e8 <__aeabi_dsub>
 8016820:	4602      	mov	r2, r0
 8016822:	460b      	mov	r3, r1
 8016824:	4610      	mov	r0, r2
 8016826:	4619      	mov	r1, r3
 8016828:	f7ea fa0e 	bl	8000c48 <__aeabi_d2f>
 801682c:	4603      	mov	r3, r0
 801682e:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	b2da      	uxtb	r2, r3
 8016834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016836:	1c59      	adds	r1, r3, #1
 8016838:	6279      	str	r1, [r7, #36]	; 0x24
 801683a:	3230      	adds	r2, #48	; 0x30
 801683c:	b2d2      	uxtb	r2, r2
 801683e:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8016840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016842:	2b00      	cmp	r3, #0
 8016844:	d10b      	bne.n	801685e <_Z15ei_printf_floatf+0x1ae>
 8016846:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801684a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016852:	dd04      	ble.n	801685e <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8016854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016856:	1c5a      	adds	r2, r3, #1
 8016858:	627a      	str	r2, [r7, #36]	; 0x24
 801685a:	222e      	movs	r2, #46	; 0x2e
 801685c:	701a      	strb	r2, [r3, #0]
            m--;
 801685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016860:	3b01      	subs	r3, #1
 8016862:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8016864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016866:	f7e9 fe9f 	bl	80005a8 <__aeabi_f2d>
 801686a:	4b11      	ldr	r3, [pc, #68]	; (80168b0 <_Z15ei_printf_floatf+0x200>)
 801686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016870:	f7ea f982 	bl	8000b78 <__aeabi_dcmpgt>
 8016874:	4603      	mov	r3, r0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d186      	bne.n	8016788 <_Z15ei_printf_floatf+0xd8>
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	2b00      	cmp	r3, #0
 801687e:	da83      	bge.n	8016788 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8016880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016882:	2200      	movs	r2, #0
 8016884:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8016886:	69f9      	ldr	r1, [r7, #28]
 8016888:	480a      	ldr	r0, [pc, #40]	; (80168b4 <_Z15ei_printf_floatf+0x204>)
 801688a:	f7f2 fac3 	bl	8008e14 <_Z9ei_printfPKcz>
 801688e:	46c5      	mov	sp, r8
}
 8016890:	bf00      	nop
 8016892:	3730      	adds	r7, #48	; 0x30
 8016894:	46bd      	mov	sp, r7
 8016896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801689a:	bf00      	nop
 801689c:	f3af 8000 	nop.w
 80168a0:	00000000 	.word	0x00000000
 80168a4:	40240000 	.word	0x40240000
 80168a8:	20000fa0 	.word	0x20000fa0
 80168ac:	0802051c 	.word	0x0802051c
 80168b0:	20000f98 	.word	0x20000f98
 80168b4:	08020520 	.word	0x08020520

080168b8 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
    return malloc(size);
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f005 fc67 	bl	801c194 <malloc>
 80168c6:	4603      	mov	r3, r0
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3708      	adds	r7, #8
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}

080168d0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 80168da:	6839      	ldr	r1, [r7, #0]
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f005 fc3b 	bl	801c158 <calloc>
 80168e2:	4603      	mov	r3, r0
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
    free(ptr);
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f005 fc55 	bl	801c1a4 <free>
}
 80168fa:	bf00      	nop
 80168fc:	3708      	adds	r7, #8
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8016902:	b580      	push	{r7, lr}
 8016904:	b084      	sub	sp, #16
 8016906:	af00      	add	r7, sp, #0
 8016908:	ed87 0b02 	vstr	d0, [r7, #8]
 801690c:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7e9 fe38 	bl	8000584 <__aeabi_i2d>
 8016914:	4602      	mov	r2, r0
 8016916:	460b      	mov	r3, r1
 8016918:	ec43 2b11 	vmov	d1, r2, r3
 801691c:	ed97 0b02 	vldr	d0, [r7, #8]
 8016920:	f002 fe8c 	bl	801963c <pow>
 8016924:	eeb0 7a40 	vmov.f32	s14, s0
 8016928:	eef0 7a60 	vmov.f32	s15, s1
    }
 801692c:	eeb0 0a47 	vmov.f32	s0, s14
 8016930:	eef0 0a67 	vmov.f32	s1, s15
 8016934:	3710      	adds	r7, #16
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
	...

0801693c <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801693c:	b480      	push	{r7}
 801693e:	b083      	sub	sp, #12
 8016940:	af00      	add	r7, sp, #0
 8016942:	4603      	mov	r3, r0
 8016944:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8016946:	79fb      	ldrb	r3, [r7, #7]
 8016948:	2b12      	cmp	r3, #18
 801694a:	d84f      	bhi.n	80169ec <TfLiteTypeGetName+0xb0>
 801694c:	a201      	add	r2, pc, #4	; (adr r2, 8016954 <TfLiteTypeGetName+0x18>)
 801694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016952:	bf00      	nop
 8016954:	080169a1 	.word	0x080169a1
 8016958:	080169a5 	.word	0x080169a5
 801695c:	080169b1 	.word	0x080169b1
 8016960:	080169b9 	.word	0x080169b9
 8016964:	080169c1 	.word	0x080169c1
 8016968:	080169d5 	.word	0x080169d5
 801696c:	080169c9 	.word	0x080169c9
 8016970:	080169ad 	.word	0x080169ad
 8016974:	080169cd 	.word	0x080169cd
 8016978:	080169bd 	.word	0x080169bd
 801697c:	080169d9 	.word	0x080169d9
 8016980:	080169dd 	.word	0x080169dd
 8016984:	080169d1 	.word	0x080169d1
 8016988:	080169c5 	.word	0x080169c5
 801698c:	080169e1 	.word	0x080169e1
 8016990:	080169e5 	.word	0x080169e5
 8016994:	080169b5 	.word	0x080169b5
 8016998:	080169a9 	.word	0x080169a9
 801699c:	080169e9 	.word	0x080169e9
    case kTfLiteNoType:
      return "NOTYPE";
 80169a0:	4b16      	ldr	r3, [pc, #88]	; (80169fc <TfLiteTypeGetName+0xc0>)
 80169a2:	e024      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 80169a4:	4b16      	ldr	r3, [pc, #88]	; (8016a00 <TfLiteTypeGetName+0xc4>)
 80169a6:	e022      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 80169a8:	4b16      	ldr	r3, [pc, #88]	; (8016a04 <TfLiteTypeGetName+0xc8>)
 80169aa:	e020      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 80169ac:	4b16      	ldr	r3, [pc, #88]	; (8016a08 <TfLiteTypeGetName+0xcc>)
 80169ae:	e01e      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 80169b0:	4b16      	ldr	r3, [pc, #88]	; (8016a0c <TfLiteTypeGetName+0xd0>)
 80169b2:	e01c      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 80169b4:	4b16      	ldr	r3, [pc, #88]	; (8016a10 <TfLiteTypeGetName+0xd4>)
 80169b6:	e01a      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 80169b8:	4b16      	ldr	r3, [pc, #88]	; (8016a14 <TfLiteTypeGetName+0xd8>)
 80169ba:	e018      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 80169bc:	4b16      	ldr	r3, [pc, #88]	; (8016a18 <TfLiteTypeGetName+0xdc>)
 80169be:	e016      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 80169c0:	4b16      	ldr	r3, [pc, #88]	; (8016a1c <TfLiteTypeGetName+0xe0>)
 80169c2:	e014      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 80169c4:	4b16      	ldr	r3, [pc, #88]	; (8016a20 <TfLiteTypeGetName+0xe4>)
 80169c6:	e012      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 80169c8:	4b16      	ldr	r3, [pc, #88]	; (8016a24 <TfLiteTypeGetName+0xe8>)
 80169ca:	e010      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80169cc:	4b16      	ldr	r3, [pc, #88]	; (8016a28 <TfLiteTypeGetName+0xec>)
 80169ce:	e00e      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80169d0:	4b16      	ldr	r3, [pc, #88]	; (8016a2c <TfLiteTypeGetName+0xf0>)
 80169d2:	e00c      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 80169d4:	4b16      	ldr	r3, [pc, #88]	; (8016a30 <TfLiteTypeGetName+0xf4>)
 80169d6:	e00a      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80169d8:	4b16      	ldr	r3, [pc, #88]	; (8016a34 <TfLiteTypeGetName+0xf8>)
 80169da:	e008      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80169dc:	4b16      	ldr	r3, [pc, #88]	; (8016a38 <TfLiteTypeGetName+0xfc>)
 80169de:	e006      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 80169e0:	4b16      	ldr	r3, [pc, #88]	; (8016a3c <TfLiteTypeGetName+0x100>)
 80169e2:	e004      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 80169e4:	4b16      	ldr	r3, [pc, #88]	; (8016a40 <TfLiteTypeGetName+0x104>)
 80169e6:	e002      	b.n	80169ee <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 80169e8:	4b16      	ldr	r3, [pc, #88]	; (8016a44 <TfLiteTypeGetName+0x108>)
 80169ea:	e000      	b.n	80169ee <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 80169ec:	4b16      	ldr	r3, [pc, #88]	; (8016a48 <TfLiteTypeGetName+0x10c>)
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	370c      	adds	r7, #12
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop
 80169fc:	08020524 	.word	0x08020524
 8016a00:	0802052c 	.word	0x0802052c
 8016a04:	08020534 	.word	0x08020534
 8016a08:	0802053c 	.word	0x0802053c
 8016a0c:	08020544 	.word	0x08020544
 8016a10:	0802054c 	.word	0x0802054c
 8016a14:	08020554 	.word	0x08020554
 8016a18:	0802055c 	.word	0x0802055c
 8016a1c:	08020564 	.word	0x08020564
 8016a20:	0802056c 	.word	0x0802056c
 8016a24:	08020574 	.word	0x08020574
 8016a28:	0802057c 	.word	0x0802057c
 8016a2c:	08020588 	.word	0x08020588
 8016a30:	08020594 	.word	0x08020594
 8016a34:	0802059c 	.word	0x0802059c
 8016a38:	080205a4 	.word	0x080205a4
 8016a3c:	080205ac 	.word	0x080205ac
 8016a40:	080205b8 	.word	0x080205b8
 8016a44:	080205c0 	.word	0x080205c0
 8016a48:	080205c8 	.word	0x080205c8

08016a4c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	601a      	str	r2, [r3, #0]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	370c      	adds	r7, #12
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr

08016a68 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b084      	sub	sp, #16
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	68ba      	ldr	r2, [r7, #8]
 8016a78:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8016a7a:	687a      	ldr	r2, [r7, #4]
 8016a7c:	68b9      	ldr	r1, [r7, #8]
 8016a7e:	68f8      	ldr	r0, [r7, #12]
 8016a80:	f000 f828 	bl	8016ad4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	4618      	mov	r0, r3
 8016a88:	3710      	adds	r7, #16
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 8016a8e:	b480      	push	{r7}
 8016a90:	b083      	sub	sp, #12
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	370c      	adds	r7, #12
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	3304      	adds	r3, #4
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	370c      	adds	r7, #12
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aba:	4770      	bx	lr

08016abc <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8016abc:	b480      	push	{r7}
 8016abe:	b083      	sub	sp, #12
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	3304      	adds	r3, #4
 8016ac8:	4618      	mov	r0, r3
 8016aca:	370c      	adds	r7, #12
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr

08016ad4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b086      	sub	sp, #24
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	60f8      	str	r0, [r7, #12]
 8016adc:	60b9      	str	r1, [r7, #8]
 8016ade:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	68ba      	ldr	r2, [r7, #8]
 8016ae4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f7ff ffdc 	bl	8016aa4 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8016aec:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	009b      	lsls	r3, r3, #2
 8016af2:	461a      	mov	r2, r3
 8016af4:	6879      	ldr	r1, [r7, #4]
 8016af6:	6978      	ldr	r0, [r7, #20]
 8016af8:	f006 fc85 	bl	801d406 <memcpy>
  }
 8016afc:	bf00      	nop
 8016afe:	3718      	adds	r7, #24
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b086      	sub	sp, #24
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f7ff ffd3 	bl	8016abc <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8016b16:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8016b18:	2300      	movs	r3, #0
 8016b1a:	613b      	str	r3, [r7, #16]
 8016b1c:	e00b      	b.n	8016b36 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	009b      	lsls	r3, r3, #2
 8016b22:	68fa      	ldr	r2, [r7, #12]
 8016b24:	4413      	add	r3, r2
 8016b26:	681a      	ldr	r2, [r3, #0]
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	fb02 f303 	mul.w	r3, r2, r3
 8016b2e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	3301      	adds	r3, #1
 8016b34:	613b      	str	r3, [r7, #16]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	693a      	ldr	r2, [r7, #16]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	dbee      	blt.n	8016b1e <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8016b40:	697b      	ldr	r3, [r7, #20]
  }
 8016b42:	4618      	mov	r0, r3
 8016b44:	3718      	adds	r7, #24
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8016b4a:	b580      	push	{r7, lr}
 8016b4c:	b086      	sub	sp, #24
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	6078      	str	r0, [r7, #4]
 8016b52:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d103      	bne.n	8016b62 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f7ff ff76 	bl	8016a4c <_ZN6tflite12RuntimeShapeC1Ev>
 8016b60:	e00d      	b.n	8016b7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	689b      	ldr	r3, [r3, #8]
 8016b66:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8016b68:	697b      	ldr	r3, [r7, #20]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	3304      	adds	r3, #4
 8016b72:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8016b74:	68fa      	ldr	r2, [r7, #12]
 8016b76:	6939      	ldr	r1, [r7, #16]
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f7ff ff75 	bl	8016a68 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	3718      	adds	r7, #24
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}

08016b86 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8016b86:	b480      	push	{r7}
 8016b88:	b083      	sub	sp, #12
 8016b8a:	af00      	add	r7, sp, #0
 8016b8c:	6078      	str	r0, [r7, #4]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	689b      	ldr	r3, [r3, #8]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	4618      	mov	r0, r3
 8016b96:	370c      	adds	r7, #12
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr

08016ba0 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d003      	beq.n	8016bb8 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	e000      	b.n	8016bba <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8016bb8:	2300      	movs	r3, #0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	370c      	adds	r7, #12
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8016bc6:	b480      	push	{r7}
 8016bc8:	b083      	sub	sp, #12
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d003      	beq.n	8016bde <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	e000      	b.n	8016be0 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	370c      	adds	r7, #12
 8016be4:	46bd      	mov	sp, r7
 8016be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bea:	4770      	bx	lr

08016bec <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8016bec:	b480      	push	{r7}
 8016bee:	b087      	sub	sp, #28
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	60f8      	str	r0, [r7, #12]
 8016bf4:	60b9      	str	r1, [r7, #8]
 8016bf6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	617b      	str	r3, [r7, #20]
 8016bfc:	e02a      	b.n	8016c54 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	da00      	bge.n	8016c06 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 8016c04:	3301      	adds	r3, #1
 8016c06:	105b      	asrs	r3, r3, #1
 8016c08:	461a      	mov	r2, r3
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8016c12:	011b      	lsls	r3, r3, #4
 8016c14:	b25a      	sxtb	r2, r3
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	6879      	ldr	r1, [r7, #4]
 8016c1a:	440b      	add	r3, r1
 8016c1c:	1112      	asrs	r2, r2, #4
 8016c1e:	b252      	sxtb	r2, r2
 8016c20:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	3301      	adds	r3, #1
 8016c26:	68ba      	ldr	r2, [r7, #8]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d018      	beq.n	8016c5e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 8016c2c:	697b      	ldr	r3, [r7, #20]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	da00      	bge.n	8016c34 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8016c32:	3301      	adds	r3, #1
 8016c34:	105b      	asrs	r3, r3, #1
 8016c36:	461a      	mov	r2, r3
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	4413      	add	r3, r2
 8016c3c:	f993 2000 	ldrsb.w	r2, [r3]
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	3301      	adds	r3, #1
 8016c44:	6879      	ldr	r1, [r7, #4]
 8016c46:	440b      	add	r3, r1
 8016c48:	1112      	asrs	r2, r2, #4
 8016c4a:	b252      	sxtb	r2, r2
 8016c4c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	3302      	adds	r3, #2
 8016c52:	617b      	str	r3, [r7, #20]
 8016c54:	697a      	ldr	r2, [r7, #20]
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	dbd0      	blt.n	8016bfe <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 8016c5c:	e000      	b.n	8016c60 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 8016c5e:	bf00      	nop
}
 8016c60:	bf00      	nop
 8016c62:	371c      	adds	r7, #28
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	ed93 7a00 	vldr	s14, [r3]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	edd3 7a00 	vldr	s15, [r3]
 8016c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8a:	d501      	bpl.n	8016c90 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	e000      	b.n	8016c92 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8016c90:	687b      	ldr	r3, [r7, #4]
    }
 8016c92:	4618      	mov	r0, r3
 8016c94:	370c      	adds	r7, #12
 8016c96:	46bd      	mov	sp, r7
 8016c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9c:	4770      	bx	lr

08016c9e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8016c9e:	b480      	push	{r7}
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr

08016cb0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8016cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016cb4:	b088      	sub	sp, #32
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	ed87 0b02 	vstr	d0, [r7, #8]
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8016cc0:	f04f 0200 	mov.w	r2, #0
 8016cc4:	f04f 0300 	mov.w	r3, #0
 8016cc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016ccc:	f7e9 ff2c 	bl	8000b28 <__aeabi_dcmpeq>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d006      	beq.n	8016ce4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	601a      	str	r2, [r3, #0]
    return;
 8016ce2:	e068      	b.n	8016db6 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8016ce4:	6838      	ldr	r0, [r7, #0]
 8016ce6:	ed97 0b02 	vldr	d0, [r7, #8]
 8016cea:	f002 fd99 	bl	8019820 <frexp>
 8016cee:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8016cf2:	f04f 0200 	mov.w	r2, #0
 8016cf6:	4b32      	ldr	r3, [pc, #200]	; (8016dc0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8016cf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016cfc:	f7e9 fcac 	bl	8000658 <__aeabi_dmul>
 8016d00:	4602      	mov	r2, r0
 8016d02:	460b      	mov	r3, r1
 8016d04:	ec43 2b17 	vmov	d7, r2, r3
 8016d08:	eeb0 0a47 	vmov.f32	s0, s14
 8016d0c:	eef0 0a67 	vmov.f32	s1, s15
 8016d10:	f000 f85a 	bl	8016dc8 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8016d14:	ec53 2b10 	vmov	r2, r3, d0
 8016d18:	4610      	mov	r0, r2
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	f7ea f84c 	bl	8000db8 <__aeabi_d2lz>
 8016d20:	4602      	mov	r2, r0
 8016d22:	460b      	mov	r3, r1
 8016d24:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8016d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016d2c:	4925      	ldr	r1, [pc, #148]	; (8016dc4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8016d2e:	428a      	cmp	r2, r1
 8016d30:	f173 0300 	sbcs.w	r3, r3, #0
 8016d34:	db01      	blt.n	8016d3a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8016d36:	f005 f9e5 	bl	801c104 <abort>
  if (q_fixed == (1LL << 31)) {
 8016d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016d3e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8016d42:	430b      	orrs	r3, r1
 8016d44:	d118      	bne.n	8016d78 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8016d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	da05      	bge.n	8016d5a <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 8016d4e:	f112 0801 	adds.w	r8, r2, #1
 8016d52:	f143 0900 	adc.w	r9, r3, #0
 8016d56:	4642      	mov	r2, r8
 8016d58:	464b      	mov	r3, r9
 8016d5a:	f04f 0000 	mov.w	r0, #0
 8016d5e:	f04f 0100 	mov.w	r1, #0
 8016d62:	0850      	lsrs	r0, r2, #1
 8016d64:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8016d68:	1059      	asrs	r1, r3, #1
 8016d6a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	1c5a      	adds	r2, r3, #1
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8016d78:	f7ff ff91 	bl	8016c9e <_ZNSt14numeric_limitsIlE3maxEv>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	17da      	asrs	r2, r3, #31
 8016d80:	461c      	mov	r4, r3
 8016d82:	4615      	mov	r5, r2
 8016d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016d88:	4294      	cmp	r4, r2
 8016d8a:	eb75 0303 	sbcs.w	r3, r5, r3
 8016d8e:	da01      	bge.n	8016d94 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8016d90:	f005 f9b8 	bl	801c104 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f113 0f1f 	cmn.w	r3, #31
 8016d9c:	da08      	bge.n	8016db0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8016d9e:	683b      	ldr	r3, [r7, #0]
 8016da0:	2200      	movs	r2, #0
 8016da2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8016da4:	f04f 0200 	mov.w	r2, #0
 8016da8:	f04f 0300 	mov.w	r3, #0
 8016dac:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8016db0:	69ba      	ldr	r2, [r7, #24]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	601a      	str	r2, [r3, #0]
}
 8016db6:	3720      	adds	r7, #32
 8016db8:	46bd      	mov	sp, r7
 8016dba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016dbe:	bf00      	nop
 8016dc0:	41e00000 	.word	0x41e00000
 8016dc4:	80000001 	.word	0x80000001

08016dc8 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	ed87 0b00 	vstr	d0, [r7]
 8016dd2:	ed97 0b00 	vldr	d0, [r7]
 8016dd6:	f003 f867 	bl	8019ea8 <round>
 8016dda:	eeb0 7a40 	vmov.f32	s14, s0
 8016dde:	eef0 7a60 	vmov.f32	s15, s1
 8016de2:	eeb0 0a47 	vmov.f32	s0, s14
 8016de6:	eef0 0a67 	vmov.f32	s1, s15
 8016dea:	3708      	adds	r7, #8
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	ed87 0a01 	vstr	s0, [r7, #4]
 8016dfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8016dfe:	f7ea fbf7 	bl	80015f0 <_ZSt5roundf>
 8016e02:	eef0 7a40 	vmov.f32	s15, s0
 8016e06:	eeb0 0a67 	vmov.f32	s0, s15
 8016e0a:	3708      	adds	r7, #8
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8016e10:	b480      	push	{r7}
 8016e12:	b083      	sub	sp, #12
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	ed87 0b00 	vstr	d0, [r7]
 8016e1a:	683a      	ldr	r2, [r7, #0]
 8016e1c:	6879      	ldr	r1, [r7, #4]
 8016e1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e22:	ec43 2b17 	vmov	d7, r2, r3
 8016e26:	eeb0 0a47 	vmov.f32	s0, s14
 8016e2a:	eef0 0a67 	vmov.f32	s1, s15
 8016e2e:	370c      	adds	r7, #12
 8016e30:	46bd      	mov	sp, r7
 8016e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e36:	4770      	bx	lr

08016e38 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8016e38:	b480      	push	{r7}
 8016e3a:	af00      	add	r7, sp, #0
 8016e3c:	4b02      	ldr	r3, [pc, #8]	; (8016e48 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8016e3e:	4618      	mov	r0, r3
 8016e40:	46bd      	mov	sp, r7
 8016e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e46:	4770      	bx	lr
 8016e48:	ffff8000 	.word	0xffff8000

08016e4c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8016e4c:	b480      	push	{r7}
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016e54:	4618      	mov	r0, r3
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr

08016e5e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8016e5e:	b480      	push	{r7}
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016e66:	4618      	mov	r0, r3
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6e:	4770      	bx	lr

08016e70 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8016e70:	b480      	push	{r7}
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8016e78:	4618      	mov	r0, r3
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr

08016e82 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8016e82:	b480      	push	{r7}
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	237f      	movs	r3, #127	; 0x7f
 8016e88:	4618      	mov	r0, r3
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e90:	4770      	bx	lr

08016e92 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8016e92:	b480      	push	{r7}
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	2300      	movs	r3, #0
 8016e98:	4618      	mov	r0, r3
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr

08016ea2 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8016ea2:	b480      	push	{r7}
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	23ff      	movs	r3, #255	; 0xff
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb0:	4770      	bx	lr
 8016eb2:	0000      	movs	r0, r0
 8016eb4:	0000      	movs	r0, r0
	...

08016eb8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8016eb8:	b5b0      	push	{r4, r5, r7, lr}
 8016eba:	b08e      	sub	sp, #56	; 0x38
 8016ebc:	af02      	add	r7, sp, #8
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
 8016ec4:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8016ec6:	68bb      	ldr	r3, [r7, #8]
 8016ec8:	68db      	ldr	r3, [r3, #12]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7e9 fb6c 	bl	80005a8 <__aeabi_f2d>
 8016ed0:	4604      	mov	r4, r0
 8016ed2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	68db      	ldr	r3, [r3, #12]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7e9 fb65 	bl	80005a8 <__aeabi_f2d>
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	4629      	mov	r1, r5
 8016ee6:	f7e9 fbb7 	bl	8000658 <__aeabi_dmul>
 8016eea:	4602      	mov	r2, r0
 8016eec:	460b      	mov	r3, r1
 8016eee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d04b      	beq.n	8016f90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7e9 fb53 	bl	80005a8 <__aeabi_f2d>
 8016f02:	4602      	mov	r2, r0
 8016f04:	460b      	mov	r3, r1
 8016f06:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8016f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016f12:	f7e9 f9e9 	bl	80002e8 <__aeabi_dsub>
 8016f16:	4602      	mov	r2, r0
 8016f18:	460b      	mov	r3, r1
 8016f1a:	ec43 2b17 	vmov	d7, r2, r3
 8016f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8016f22:	eef0 0a67 	vmov.f32	s1, s15
 8016f26:	f7ff ff73 	bl	8016e10 <_ZSt3absd>
 8016f2a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 8016f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f30:	68db      	ldr	r3, [r3, #12]
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7e9 fb38 	bl	80005a8 <__aeabi_f2d>
 8016f38:	4602      	mov	r2, r0
 8016f3a:	460b      	mov	r3, r1
 8016f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8016f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016f44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8016f48:	f7e9 fcb0 	bl	80008ac <__aeabi_ddiv>
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	460b      	mov	r3, r1
 8016f50:	4610      	mov	r0, r2
 8016f52:	4619      	mov	r1, r3
 8016f54:	2301      	movs	r3, #1
 8016f56:	461c      	mov	r4, r3
 8016f58:	a318      	add	r3, pc, #96	; (adr r3, 8016fbc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8016f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f5e:	f7e9 fdf7 	bl	8000b50 <__aeabi_dcmple>
 8016f62:	4603      	mov	r3, r0
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d101      	bne.n	8016f6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8016f68:	2300      	movs	r3, #0
 8016f6a:	461c      	mov	r4, r3
 8016f6c:	b2e3      	uxtb	r3, r4
 8016f6e:	f083 0301 	eor.w	r3, r3, #1
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d00b      	beq.n	8016f90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	691c      	ldr	r4, [r3, #16]
 8016f7c:	4b0c      	ldr	r3, [pc, #48]	; (8016fb0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8016f7e:	9300      	str	r3, [sp, #0]
 8016f80:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8016f84:	4a0b      	ldr	r2, [pc, #44]	; (8016fb4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8016f86:	490c      	ldr	r1, [pc, #48]	; (8016fb8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8016f88:	68f8      	ldr	r0, [r7, #12]
 8016f8a:	47a0      	blx	r4
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	e009      	b.n	8016fa4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8016f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f92:	9300      	str	r3, [sp, #0]
 8016f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	68b9      	ldr	r1, [r7, #8]
 8016f9a:	68f8      	ldr	r0, [r7, #12]
 8016f9c:	f000 f812 	bl	8016fc4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8016fa0:	4603      	mov	r3, r0
                                          multiplier);
 8016fa2:	bf00      	nop
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3730      	adds	r7, #48	; 0x30
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bdb0      	pop	{r4, r5, r7, pc}
 8016fac:	f3af 8000 	nop.w
 8016fb0:	08020870 	.word	0x08020870
 8016fb4:	08020638 	.word	0x08020638
 8016fb8:	0802073c 	.word	0x0802073c
 8016fbc:	47ae147b 	.word	0x47ae147b
 8016fc0:	3f947ae1 	.word	0x3f947ae1

08016fc4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8016fc4:	b590      	push	{r4, r7, lr}
 8016fc6:	b089      	sub	sp, #36	; 0x24
 8016fc8:	af02      	add	r7, sp, #8
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8016fde:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8016fe2:	ee17 0a90 	vmov	r0, s15
 8016fe6:	f7e9 fadf 	bl	80005a8 <__aeabi_f2d>
 8016fea:	4602      	mov	r2, r0
 8016fec:	460b      	mov	r3, r1
 8016fee:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	461c      	mov	r4, r3
 8016ff6:	f04f 0200 	mov.w	r2, #0
 8016ffa:	f04f 0300 	mov.w	r3, #0
 8016ffe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017002:	f7e9 fdaf 	bl	8000b64 <__aeabi_dcmpge>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d101      	bne.n	8017010 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 801700c:	2300      	movs	r3, #0
 801700e:	461c      	mov	r4, r3
 8017010:	b2e3      	uxtb	r3, r4
 8017012:	f083 0301 	eor.w	r3, r3, #1
 8017016:	b2db      	uxtb	r3, r3
 8017018:	2b00      	cmp	r3, #0
 801701a:	d00b      	beq.n	8017034 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	691c      	ldr	r4, [r3, #16]
 8017020:	4b0f      	ldr	r3, [pc, #60]	; (8017060 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	f240 1349 	movw	r3, #329	; 0x149
 8017028:	4a0e      	ldr	r2, [pc, #56]	; (8017064 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 801702a:	490f      	ldr	r1, [pc, #60]	; (8017068 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 801702c:	68f8      	ldr	r0, [r7, #12]
 801702e:	47a0      	blx	r4
 8017030:	2301      	movs	r3, #1
 8017032:	e010      	b.n	8017056 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	4618      	mov	r0, r3
 801703a:	f7e9 fab5 	bl	80005a8 <__aeabi_f2d>
 801703e:	4602      	mov	r2, r0
 8017040:	460b      	mov	r3, r1
 8017042:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017046:	f7e9 fc31 	bl	80008ac <__aeabi_ddiv>
 801704a:	4602      	mov	r2, r0
 801704c:	460b      	mov	r3, r1
 801704e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017050:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8017054:	2300      	movs	r3, #0
}
 8017056:	4618      	mov	r0, r3
 8017058:	371c      	adds	r7, #28
 801705a:	46bd      	mov	sp, r7
 801705c:	bd90      	pop	{r4, r7, pc}
 801705e:	bf00      	nop
 8017060:	08020894 	.word	0x08020894
 8017064:	08020638 	.word	0x08020638
 8017068:	0802073c 	.word	0x0802073c

0801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 801706c:	b590      	push	{r4, r7, lr}
 801706e:	b08b      	sub	sp, #44	; 0x2c
 8017070:	af02      	add	r7, sp, #8
 8017072:	6178      	str	r0, [r7, #20]
 8017074:	ed87 0a04 	vstr	s0, [r7, #16]
 8017078:	60f9      	str	r1, [r7, #12]
 801707a:	edc7 0a02 	vstr	s1, [r7, #8]
 801707e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8017080:	ed97 7a02 	vldr	s14, [r7, #8]
 8017084:	edd7 7a04 	vldr	s15, [r7, #16]
 8017088:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801708c:	eeb0 0a66 	vmov.f32	s0, s13
 8017090:	f7ff feae 	bl	8016df0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017094:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017098:	f7ff fee1 	bl	8016e5e <_ZNSt14numeric_limitsIlE3minEv>
 801709c:	ee07 0a90 	vmov	s15, r0
 80170a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80170a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80170ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170b0:	db0e      	blt.n	80170d0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80170b2:	f7ff fdf4 	bl	8016c9e <_ZNSt14numeric_limitsIlE3maxEv>
 80170b6:	ee07 0a90 	vmov	s15, r0
 80170ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 80170be:	ed97 7a07 	vldr	s14, [r7, #28]
 80170c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80170c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ca:	d801      	bhi.n	80170d0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 80170cc:	2301      	movs	r3, #1
 80170ce:	e000      	b.n	80170d2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 80170d0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 80170d2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 80170d4:	7efb      	ldrb	r3, [r7, #27]
 80170d6:	f083 0301 	eor.w	r3, r3, #1
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d00b      	beq.n	80170f8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	691c      	ldr	r4, [r3, #16]
 80170e4:	4b0c      	ldr	r3, [pc, #48]	; (8017118 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 80170e6:	9300      	str	r3, [sp, #0]
 80170e8:	f240 1357 	movw	r3, #343	; 0x157
 80170ec:	4a0b      	ldr	r2, [pc, #44]	; (801711c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80170ee:	490c      	ldr	r1, [pc, #48]	; (8017120 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80170f0:	6978      	ldr	r0, [r7, #20]
 80170f2:	47a0      	blx	r4
 80170f4:	2301      	movs	r3, #1
 80170f6:	e00a      	b.n	801710e <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80170f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80170fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017100:	ee17 2a90 	vmov	r2, s15
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	441a      	add	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801710c:	2300      	movs	r3, #0
}
 801710e:	4618      	mov	r0, r3
 8017110:	3724      	adds	r7, #36	; 0x24
 8017112:	46bd      	mov	sp, r7
 8017114:	bd90      	pop	{r4, r7, pc}
 8017116:	bf00      	nop
 8017118:	080208b0 	.word	0x080208b0
 801711c:	08020638 	.word	0x08020638
 8017120:	0802073c 	.word	0x0802073c

08017124 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8017124:	b580      	push	{r7, lr}
 8017126:	b08a      	sub	sp, #40	; 0x28
 8017128:	af00      	add	r7, sp, #0
 801712a:	60f8      	str	r0, [r7, #12]
 801712c:	607a      	str	r2, [r7, #4]
 801712e:	603b      	str	r3, [r7, #0]
 8017130:	460b      	mov	r3, r1
 8017132:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8017134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	691b      	ldr	r3, [r3, #16]
 801713e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8017140:	7afb      	ldrb	r3, [r7, #11]
 8017142:	2b01      	cmp	r3, #1
 8017144:	d120      	bne.n	8017188 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8017146:	f107 0314 	add.w	r3, r7, #20
 801714a:	461a      	mov	r2, r3
 801714c:	eddf 0a52 	vldr	s1, [pc, #328]	; 8017298 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017150:	6a39      	ldr	r1, [r7, #32]
 8017152:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017156:	68f8      	ldr	r0, [r7, #12]
 8017158:	f7ff ff88 	bl	801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 801715c:	4603      	mov	r3, r0
 801715e:	76fb      	strb	r3, [r7, #27]
 8017160:	7efb      	ldrb	r3, [r7, #27]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d001      	beq.n	801716a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8017166:	7efb      	ldrb	r3, [r7, #27]
 8017168:	e091      	b.n	801728e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 801716a:	f107 0214 	add.w	r2, r7, #20
 801716e:	1d3b      	adds	r3, r7, #4
 8017170:	4611      	mov	r1, r2
 8017172:	4618      	mov	r0, r3
 8017174:	f7f3 ff1f 	bl	800afb6 <_ZSt3maxIlERKT_S2_S2_>
 8017178:	4603      	mov	r3, r0
 801717a:	681a      	ldr	r2, [r3, #0]
 801717c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801717e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017180:	683a      	ldr	r2, [r7, #0]
 8017182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017184:	601a      	str	r2, [r3, #0]
 8017186:	e081      	b.n	801728c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8017188:	7afb      	ldrb	r3, [r7, #11]
 801718a:	2b03      	cmp	r3, #3
 801718c:	d13a      	bne.n	8017204 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 801718e:	f107 0314 	add.w	r3, r7, #20
 8017192:	461a      	mov	r2, r3
 8017194:	eddf 0a40 	vldr	s1, [pc, #256]	; 8017298 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017198:	6a39      	ldr	r1, [r7, #32]
 801719a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff ff64 	bl	801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80171a4:	4603      	mov	r3, r0
 80171a6:	777b      	strb	r3, [r7, #29]
 80171a8:	7f7b      	ldrb	r3, [r7, #29]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d001      	beq.n	80171b2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 80171ae:	7f7b      	ldrb	r3, [r7, #29]
 80171b0:	e06d      	b.n	801728e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80171b2:	f107 0214 	add.w	r2, r7, #20
 80171b6:	1d3b      	adds	r3, r7, #4
 80171b8:	4611      	mov	r1, r2
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7f3 fefb 	bl	800afb6 <_ZSt3maxIlERKT_S2_S2_>
 80171c0:	4603      	mov	r3, r0
 80171c2:	681a      	ldr	r2, [r3, #0]
 80171c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c6:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80171c8:	f107 0314 	add.w	r3, r7, #20
 80171cc:	461a      	mov	r2, r3
 80171ce:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80171d2:	6a39      	ldr	r1, [r7, #32]
 80171d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	f7ff ff47 	bl	801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80171de:	4603      	mov	r3, r0
 80171e0:	773b      	strb	r3, [r7, #28]
 80171e2:	7f3b      	ldrb	r3, [r7, #28]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d001      	beq.n	80171ec <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80171e8:	7f3b      	ldrb	r3, [r7, #28]
 80171ea:	e050      	b.n	801728e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80171ec:	f107 0214 	add.w	r2, r7, #20
 80171f0:	463b      	mov	r3, r7
 80171f2:	4611      	mov	r1, r2
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f3 feca 	bl	800af8e <_ZSt3minIlERKT_S2_S2_>
 80171fa:	4603      	mov	r3, r0
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017200:	601a      	str	r2, [r3, #0]
 8017202:	e043      	b.n	801728c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8017204:	7afb      	ldrb	r3, [r7, #11]
 8017206:	2b02      	cmp	r3, #2
 8017208:	d13a      	bne.n	8017280 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 801720a:	f107 0314 	add.w	r3, r7, #20
 801720e:	461a      	mov	r2, r3
 8017210:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8017214:	6a39      	ldr	r1, [r7, #32]
 8017216:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f7ff ff26 	bl	801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017220:	4603      	mov	r3, r0
 8017222:	77fb      	strb	r3, [r7, #31]
 8017224:	7ffb      	ldrb	r3, [r7, #31]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d001      	beq.n	801722e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 801722a:	7ffb      	ldrb	r3, [r7, #31]
 801722c:	e02f      	b.n	801728e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 801722e:	f107 0214 	add.w	r2, r7, #20
 8017232:	1d3b      	adds	r3, r7, #4
 8017234:	4611      	mov	r1, r2
 8017236:	4618      	mov	r0, r3
 8017238:	f7f3 febd 	bl	800afb6 <_ZSt3maxIlERKT_S2_S2_>
 801723c:	4603      	mov	r3, r0
 801723e:	681a      	ldr	r2, [r3, #0]
 8017240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017242:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017244:	f107 0314 	add.w	r3, r7, #20
 8017248:	461a      	mov	r2, r3
 801724a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801724e:	6a39      	ldr	r1, [r7, #32]
 8017250:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017254:	68f8      	ldr	r0, [r7, #12]
 8017256:	f7ff ff09 	bl	801706c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 801725a:	4603      	mov	r3, r0
 801725c:	77bb      	strb	r3, [r7, #30]
 801725e:	7fbb      	ldrb	r3, [r7, #30]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d001      	beq.n	8017268 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8017264:	7fbb      	ldrb	r3, [r7, #30]
 8017266:	e012      	b.n	801728e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017268:	f107 0214 	add.w	r2, r7, #20
 801726c:	463b      	mov	r3, r7
 801726e:	4611      	mov	r1, r2
 8017270:	4618      	mov	r0, r3
 8017272:	f7f3 fe8c 	bl	800af8e <_ZSt3minIlERKT_S2_S2_>
 8017276:	4603      	mov	r3, r0
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801727c:	601a      	str	r2, [r3, #0]
 801727e:	e005      	b.n	801728c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8017280:	687a      	ldr	r2, [r7, #4]
 8017282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017284:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017286:	683a      	ldr	r2, [r7, #0]
 8017288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801728a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 801728c:	2300      	movs	r3, #0
}
 801728e:	4618      	mov	r0, r3
 8017290:	3728      	adds	r7, #40	; 0x28
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}
 8017296:	bf00      	nop
 8017298:	00000000 	.word	0x00000000

0801729c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 801729c:	b590      	push	{r4, r7, lr}
 801729e:	b08b      	sub	sp, #44	; 0x2c
 80172a0:	af04      	add	r7, sp, #16
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	607a      	str	r2, [r7, #4]
 80172a6:	603b      	str	r3, [r7, #0]
 80172a8:	460b      	mov	r3, r1
 80172aa:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 80172ac:	2300      	movs	r3, #0
 80172ae:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 80172b0:	2300      	movs	r3, #0
 80172b2:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	2b03      	cmp	r3, #3
 80172ba:	d108      	bne.n	80172ce <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80172bc:	f7ff fde9 	bl	8016e92 <_ZNSt14numeric_limitsIhE3minEv>
 80172c0:	4603      	mov	r3, r0
 80172c2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80172c4:	f7ff fded 	bl	8016ea2 <_ZNSt14numeric_limitsIhE3maxEv>
 80172c8:	4603      	mov	r3, r0
 80172ca:	613b      	str	r3, [r7, #16]
 80172cc:	e025      	b.n	801731a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	2b09      	cmp	r3, #9
 80172d4:	d108      	bne.n	80172e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80172d6:	f7ff fdcb 	bl	8016e70 <_ZNSt14numeric_limitsIaE3minEv>
 80172da:	4603      	mov	r3, r0
 80172dc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80172de:	f7ff fdd0 	bl	8016e82 <_ZNSt14numeric_limitsIaE3maxEv>
 80172e2:	4603      	mov	r3, r0
 80172e4:	613b      	str	r3, [r7, #16]
 80172e6:	e018      	b.n	801731a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	2b07      	cmp	r3, #7
 80172ee:	d108      	bne.n	8017302 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80172f0:	f7ff fda2 	bl	8016e38 <_ZNSt14numeric_limitsIsE3minEv>
 80172f4:	4603      	mov	r3, r0
 80172f6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80172f8:	f7ff fda8 	bl	8016e4c <_ZNSt14numeric_limitsIsE3maxEv>
 80172fc:	4603      	mov	r3, r0
 80172fe:	613b      	str	r3, [r7, #16]
 8017300:	e00b      	b.n	801731a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	691c      	ldr	r4, [r3, #16]
 8017306:	4b0e      	ldr	r3, [pc, #56]	; (8017340 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8017308:	9300      	str	r3, [sp, #0]
 801730a:	f240 138f 	movw	r3, #399	; 0x18f
 801730e:	4a0d      	ldr	r2, [pc, #52]	; (8017344 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8017310:	490d      	ldr	r1, [pc, #52]	; (8017348 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8017312:	68f8      	ldr	r0, [r7, #12]
 8017314:	47a0      	blx	r4
 8017316:	2301      	movs	r3, #1
 8017318:	e00d      	b.n	8017336 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 801731a:	7af9      	ldrb	r1, [r7, #11]
 801731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801731e:	9302      	str	r3, [sp, #8]
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	9301      	str	r3, [sp, #4]
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	9300      	str	r3, [sp, #0]
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	697a      	ldr	r2, [r7, #20]
 801732c:	68f8      	ldr	r0, [r7, #12]
 801732e:	f7ff fef9 	bl	8017124 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8017332:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8017334:	bf00      	nop
}
 8017336:	4618      	mov	r0, r3
 8017338:	371c      	adds	r7, #28
 801733a:	46bd      	mov	sp, r7
 801733c:	bd90      	pop	{r4, r7, pc}
 801733e:	bf00      	nop
 8017340:	080208d8 	.word	0x080208d8
 8017344:	08020638 	.word	0x08020638
 8017348:	0802073c 	.word	0x0802073c

0801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	4618      	mov	r0, r3
 801735a:	370c      	adds	r7, #12
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr

08017364 <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8017364:	b480      	push	{r7}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8017372:	683a      	ldr	r2, [r7, #0]
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	4413      	add	r3, r2
 8017378:	1e5a      	subs	r2, r3, #1
 801737a:	683b      	ldr	r3, [r7, #0]
 801737c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017380:	683a      	ldr	r2, [r7, #0]
 8017382:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8017386:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8017388:	68bb      	ldr	r3, [r7, #8]
}
 801738a:	4618      	mov	r0, r3
 801738c:	3714      	adds	r7, #20
 801738e:	46bd      	mov	sp, r7
 8017390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017394:	4770      	bx	lr
	...

08017398 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8017398:	b580      	push	{r7, lr}
 801739a:	b088      	sub	sp, #32
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	60b9      	str	r1, [r7, #8]
 80173a2:	607a      	str	r2, [r7, #4]
 80173a4:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 80173a6:	68f8      	ldr	r0, [r7, #12]
 80173a8:	f000 f854 	bl	8017454 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80173ac:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 80173ae:	2300      	movs	r3, #0
 80173b0:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80173b2:	2300      	movs	r3, #0
 80173b4:	61bb      	str	r3, [r7, #24]
 80173b6:	e011      	b.n	80173dc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80173b8:	69ba      	ldr	r2, [r7, #24]
 80173ba:	4613      	mov	r3, r2
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	4413      	add	r3, r2
 80173c0:	009b      	lsls	r3, r3, #2
 80173c2:	461a      	mov	r2, r3
 80173c4:	697b      	ldr	r3, [r7, #20]
 80173c6:	4413      	add	r3, r2
 80173c8:	685b      	ldr	r3, [r3, #4]
 80173ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173ce:	d102      	bne.n	80173d6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 80173d0:	69fb      	ldr	r3, [r7, #28]
 80173d2:	3301      	adds	r3, #1
 80173d4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80173d6:	69bb      	ldr	r3, [r7, #24]
 80173d8:	3301      	adds	r3, #1
 80173da:	61bb      	str	r3, [r7, #24]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	699b      	ldr	r3, [r3, #24]
 80173e0:	69ba      	ldr	r2, [r7, #24]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d3e8      	bcc.n	80173b8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	2b0b      	cmp	r3, #11
 80173ea:	d905      	bls.n	80173f8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 80173ec:	4917      	ldr	r1, [pc, #92]	; (801744c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 80173ee:	4818      	ldr	r0, [pc, #96]	; (8017450 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 80173f0:	f000 f83f 	bl	8017472 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 80173f4:	2301      	movs	r3, #1
 80173f6:	e024      	b.n	8017442 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	699a      	ldr	r2, [r3, #24]
 80173fc:	4613      	mov	r3, r2
 80173fe:	005b      	lsls	r3, r3, #1
 8017400:	4413      	add	r3, r2
 8017402:	009b      	lsls	r3, r3, #2
 8017404:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 8017406:	697b      	ldr	r3, [r7, #20]
 8017408:	4413      	add	r3, r2
 801740a:	613b      	str	r3, [r7, #16]
  *current_request = {};
 801740c:	693b      	ldr	r3, [r7, #16]
 801740e:	461a      	mov	r2, r3
 8017410:	2300      	movs	r3, #0
 8017412:	6013      	str	r3, [r2, #0]
 8017414:	6053      	str	r3, [r2, #4]
 8017416:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	68ba      	ldr	r2, [r7, #8]
 801741c:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	f04f 32ff 	mov.w	r2, #4294967295
 8017424:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	687a      	ldr	r2, [r7, #4]
 801742a:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	699b      	ldr	r3, [r3, #24]
 8017430:	461a      	mov	r2, r3
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	699b      	ldr	r3, [r3, #24]
 801743a:	1c5a      	adds	r2, r3, #1
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8017440:	2300      	movs	r3, #0
}
 8017442:	4618      	mov	r0, r3
 8017444:	3720      	adds	r7, #32
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	08023230 	.word	0x08023230
 8017450:	08020abc 	.word	0x08020abc

08017454 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	69db      	ldr	r3, [r3, #28]
 8017460:	2104      	movs	r1, #4
 8017462:	4618      	mov	r0, r3
 8017464:	f7ff ff7e 	bl	8017364 <_ZN6tflite14AlignPointerUpEPhj>
 8017468:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 801746a:	4618      	mov	r0, r3
 801746c:	3708      	adds	r7, #8
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 8017472:	b480      	push	{r7}
 8017474:	b083      	sub	sp, #12
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
 801747a:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 801747c:	bf00      	nop
 801747e:	370c      	adds	r7, #12
 8017480:	46bd      	mov	sp, r7
 8017482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017486:	4770      	bx	lr

08017488 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8017488:	b480      	push	{r7}
 801748a:	b083      	sub	sp, #12
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	4618      	mov	r0, r3
 8017496:	370c      	adds	r7, #12
 8017498:	46bd      	mov	sp, r7
 801749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749e:	4770      	bx	lr

080174a0 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	691b      	ldr	r3, [r3, #16]
 80174ac:	4618      	mov	r0, r3
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr

080174b8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 80174b8:	b480      	push	{r7}
 80174ba:	b085      	sub	sp, #20
 80174bc:	af00      	add	r7, sp, #0
 80174be:	60f8      	str	r0, [r7, #12]
 80174c0:	60b9      	str	r1, [r7, #8]
 80174c2:	607a      	str	r2, [r7, #4]
 80174c4:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 80174c6:	4a0c      	ldr	r2, [pc, #48]	; (80174f8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	601a      	str	r2, [r3, #0]
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	68ba      	ldr	r2, [r7, #8]
 80174d0:	605a      	str	r2, [r3, #4]
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	683a      	ldr	r2, [r7, #0]
 80174d6:	609a      	str	r2, [r3, #8]
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	60da      	str	r2, [r3, #12]
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	2200      	movs	r2, #0
 80174e2:	611a      	str	r2, [r3, #16]
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2200      	movs	r2, #0
 80174e8:	615a      	str	r2, [r3, #20]
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	4618      	mov	r0, r3
 80174ee:	3714      	adds	r7, #20
 80174f0:	46bd      	mov	sp, r7
 80174f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f6:	4770      	bx	lr
 80174f8:	0802323c 	.word	0x0802323c

080174fc <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 80174fc:	b480      	push	{r7}
 80174fe:	b083      	sub	sp, #12
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	4a04      	ldr	r2, [pc, #16]	; (8017518 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	601a      	str	r2, [r3, #0]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	4618      	mov	r0, r3
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr
 8017518:	0802323c 	.word	0x0802323c

0801751c <_ZN6tflite12MicroContextD0Ev>:
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	6878      	ldr	r0, [r7, #4]
 8017526:	f7ff ffe9 	bl	80174fc <_ZN6tflite12MicroContextD1Ev>
 801752a:	2118      	movs	r1, #24
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f002 f85b 	bl	80195e8 <_ZdlPvj>
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	4618      	mov	r0, r3
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	685a      	ldr	r2, [r3, #4]
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	3314      	adds	r3, #20
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	6839      	ldr	r1, [r7, #0]
 8017556:	4610      	mov	r0, r2
 8017558:	4798      	blx	r3
 801755a:	4603      	mov	r3, r0
}
 801755c:	4618      	mov	r0, r3
 801755e:	3708      	adds	r7, #8
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}

08017564 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 8017564:	b590      	push	{r4, r7, lr}
 8017566:	b085      	sub	sp, #20
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8017578:	4618      	mov	r0, r3
 801757a:	f7ff ff85 	bl	8017488 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 801757e:	4602      	mov	r2, r0
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	68b9      	ldr	r1, [r7, #8]
 8017584:	4620      	mov	r0, r4
 8017586:	f7ff ff07 	bl	8017398 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 801758a:	4603      	mov	r3, r0
}
 801758c:	4618      	mov	r0, r3
 801758e:	3714      	adds	r7, #20
 8017590:	46bd      	mov	sp, r7
 8017592:	bd90      	pop	{r4, r7, pc}

08017594 <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 8017594:	b480      	push	{r7}
 8017596:	b085      	sub	sp, #20
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	691a      	ldr	r2, [r3, #16]
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	4413      	add	r3, r2
 80175a8:	60fb      	str	r3, [r7, #12]
  return handle->data;
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	681b      	ldr	r3, [r3, #0]
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3714      	adds	r7, #20
 80175b2:	46bd      	mov	sp, r7
 80175b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b8:	4770      	bx	lr

080175ba <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 80175ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af02      	add	r7, sp, #8
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	685d      	ldr	r5, [r3, #4]
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	3304      	adds	r3, #4
 80175d2:	681c      	ldr	r4, [r3, #0]
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	68de      	ldr	r6, [r3, #12]
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	689b      	ldr	r3, [r3, #8]
 80175dc:	4618      	mov	r0, r3
 80175de:	f7ff ff5f 	bl	80174a0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80175e2:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7ff ff4d 	bl	8017488 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80175ee:	4603      	mov	r3, r0
 80175f0:	9300      	str	r3, [sp, #0]
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	4642      	mov	r2, r8
 80175f6:	4631      	mov	r1, r6
 80175f8:	4628      	mov	r0, r5
 80175fa:	47a0      	blx	r4
 80175fc:	4603      	mov	r3, r0
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017608 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 8017608:	b480      	push	{r7}
 801760a:	b087      	sub	sp, #28
 801760c:	af00      	add	r7, sp, #0
 801760e:	60f8      	str	r0, [r7, #12]
 8017610:	60b9      	str	r1, [r7, #8]
 8017612:	607a      	str	r2, [r7, #4]
 8017614:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	2b00      	cmp	r3, #0
 801761a:	db0f      	blt.n	801763c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 801761c:	68ba      	ldr	r2, [r7, #8]
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	429a      	cmp	r2, r3
 8017622:	da0b      	bge.n	801763c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8017624:	68bb      	ldr	r3, [r7, #8]
 8017626:	009b      	lsls	r3, r3, #2
 8017628:	683a      	ldr	r2, [r7, #0]
 801762a:	4413      	add	r3, r2
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017636:	d001      	beq.n	801763c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	e001      	b.n	8017640 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 801763c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017640:	4618      	mov	r0, r3
 8017642:	371c      	adds	r7, #28
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr

0801764c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 801764c:	b580      	push	{r7, lr}
 801764e:	b086      	sub	sp, #24
 8017650:	af00      	add	r7, sp, #0
 8017652:	60f8      	str	r0, [r7, #12]
 8017654:	60b9      	str	r1, [r7, #8]
 8017656:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	3304      	adds	r3, #4
 8017664:	6879      	ldr	r1, [r7, #4]
 8017666:	68f8      	ldr	r0, [r7, #12]
 8017668:	f7ff ffce 	bl	8017608 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 801766c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	2b00      	cmp	r3, #0
 8017672:	da01      	bge.n	8017678 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8017674:	2300      	movs	r3, #0
 8017676:	e008      	b.n	801768a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	3314      	adds	r3, #20
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	6979      	ldr	r1, [r7, #20]
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	4798      	blx	r3
 8017686:	4603      	mov	r3, r0
 8017688:	bf00      	nop
}
 801768a:	4618      	mov	r0, r3
 801768c:	3718      	adds	r7, #24
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}

08017692 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8017692:	b580      	push	{r7, lr}
 8017694:	b086      	sub	sp, #24
 8017696:	af00      	add	r7, sp, #0
 8017698:	60f8      	str	r0, [r7, #12]
 801769a:	60b9      	str	r1, [r7, #8]
 801769c:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	685b      	ldr	r3, [r3, #4]
 80176a8:	3304      	adds	r3, #4
 80176aa:	6879      	ldr	r1, [r7, #4]
 80176ac:	68f8      	ldr	r0, [r7, #12]
 80176ae:	f7ff ffab 	bl	8017608 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80176b2:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	da01      	bge.n	80176be <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80176ba:	2300      	movs	r3, #0
 80176bc:	e008      	b.n	80176d0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	3314      	adds	r3, #20
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	6979      	ldr	r1, [r7, #20]
 80176c8:	68f8      	ldr	r0, [r7, #12]
 80176ca:	4798      	blx	r3
 80176cc:	4603      	mov	r3, r0
 80176ce:	bf00      	nop
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3718      	adds	r7, #24
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 80176d8:	b580      	push	{r7, lr}
 80176da:	b086      	sub	sp, #24
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	689b      	ldr	r3, [r3, #8]
 80176e8:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	689b      	ldr	r3, [r3, #8]
 80176ee:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80176f0:	6879      	ldr	r1, [r7, #4]
 80176f2:	68f8      	ldr	r0, [r7, #12]
 80176f4:	f7ff ff88 	bl	8017608 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80176f8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80176fa:	697b      	ldr	r3, [r7, #20]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	da01      	bge.n	8017704 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8017700:	2300      	movs	r3, #0
 8017702:	e008      	b.n	8017716 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	3314      	adds	r3, #20
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	6979      	ldr	r1, [r7, #20]
 801770e:	68f8      	ldr	r0, [r7, #12]
 8017710:	4798      	blx	r3
 8017712:	4603      	mov	r3, r0
 8017714:	bf00      	nop
}
 8017716:	4618      	mov	r0, r3
 8017718:	3718      	adds	r7, #24
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 801771e:	b580      	push	{r7, lr}
 8017720:	b082      	sub	sp, #8
 8017722:	af00      	add	r7, sp, #0
 8017724:	6078      	str	r0, [r7, #4]
 8017726:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	685a      	ldr	r2, [r3, #4]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	3308      	adds	r3, #8
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	6839      	ldr	r1, [r7, #0]
 8017738:	4610      	mov	r0, r2
 801773a:	4798      	blx	r3
 801773c:	bf00      	nop
}
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 8017744:	b590      	push	{r4, r7, lr}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
 801774c:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	689b      	ldr	r3, [r3, #8]
 8017752:	4618      	mov	r0, r3
 8017754:	f7ff fea4 	bl	80174a0 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8017758:	4604      	mov	r4, r0
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	689b      	ldr	r3, [r3, #8]
 801775e:	4618      	mov	r0, r3
 8017760:	f7ff fe92 	bl	8017488 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8017764:	4603      	mov	r3, r0
 8017766:	00db      	lsls	r3, r3, #3
 8017768:	4423      	add	r3, r4
              .tensors[tensor_idx];
 801776a:	6859      	ldr	r1, [r3, #4]
 801776c:	683a      	ldr	r2, [r7, #0]
 801776e:	4613      	mov	r3, r2
 8017770:	005b      	lsls	r3, r3, #1
 8017772:	4413      	add	r3, r2
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	440b      	add	r3, r1
}
 8017778:	4618      	mov	r0, r3
 801777a:	370c      	adds	r7, #12
 801777c:	46bd      	mov	sp, r7
 801777e:	bd90      	pop	{r4, r7, pc}

08017780 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8017780:	b40e      	push	{r1, r2, r3}
 8017782:	b580      	push	{r7, lr}
 8017784:	b085      	sub	sp, #20
 8017786:	af00      	add	r7, sp, #0
 8017788:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 801778a:	f107 0320 	add.w	r3, r7, #32
 801778e:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8017790:	68f9      	ldr	r1, [r7, #12]
 8017792:	69f8      	ldr	r0, [r7, #28]
 8017794:	f000 f81e 	bl	80177d4 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8017798:	bf00      	nop
 801779a:	3714      	adds	r7, #20
 801779c:	46bd      	mov	sp, r7
 801779e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80177a2:	b003      	add	sp, #12
 80177a4:	4770      	bx	lr

080177a6 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 80177a6:	b480      	push	{r7}
 80177a8:	b083      	sub	sp, #12
 80177aa:	af00      	add	r7, sp, #0
 80177ac:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	689b      	ldr	r3, [r3, #8]
}
 80177b2:	4618      	mov	r0, r3
 80177b4:	370c      	adds	r7, #12
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr

080177be <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 80177be:	b480      	push	{r7}
 80177c0:	b083      	sub	sp, #12
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	6078      	str	r0, [r7, #4]
 80177c6:	6039      	str	r1, [r7, #0]
}
 80177c8:	bf00      	nop
 80177ca:	370c      	adds	r7, #12
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr

080177d4 <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 80177d4:	b480      	push	{r7}
 80177d6:	b083      	sub	sp, #12
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 80177de:	bf00      	nop
 80177e0:	370c      	adds	r7, #12
 80177e2:	46bd      	mov	sp, r7
 80177e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e8:	4770      	bx	lr

080177ea <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80177ea:	b580      	push	{r7, lr}
 80177ec:	b082      	sub	sp, #8
 80177ee:	af00      	add	r7, sp, #0
 80177f0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d101      	bne.n	80177fc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80177f8:	f004 fc84 	bl	801c104 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
}
 8017800:	4618      	mov	r0, r3
 8017802:	3708      	adds	r7, #8
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8017808:	b580      	push	{r7, lr}
 801780a:	b082      	sub	sp, #8
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d101      	bne.n	801781a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 8017816:	f004 fc75 	bl	801c104 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	681b      	ldr	r3, [r3, #0]
}
 801781e:	4618      	mov	r0, r3
 8017820:	3708      	adds	r7, #8
 8017822:	46bd      	mov	sp, r7
 8017824:	bd80      	pop	{r7, pc}

08017826 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 8017826:	b580      	push	{r7, lr}
 8017828:	b082      	sub	sp, #8
 801782a:	af00      	add	r7, sp, #0
 801782c:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d101      	bne.n	8017838 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8017834:	f004 fc66 	bl	801c104 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
}
 801783c:	4618      	mov	r0, r3
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8017844:	b580      	push	{r7, lr}
 8017846:	b082      	sub	sp, #8
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d101      	bne.n	8017856 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8017852:	f004 fc57 	bl	801c104 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
}
 801785a:	4618      	mov	r0, r3
 801785c:	3708      	adds	r7, #8
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}

08017862 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8017862:	b580      	push	{r7, lr}
 8017864:	b082      	sub	sp, #8
 8017866:	af00      	add	r7, sp, #0
 8017868:	6078      	str	r0, [r7, #4]
 801786a:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	2b00      	cmp	r3, #0
 8017870:	da01      	bge.n	8017876 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8017872:	f004 fc47 	bl	801c104 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	683a      	ldr	r2, [r7, #0]
 801787c:	429a      	cmp	r2, r3
 801787e:	db01      	blt.n	8017884 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8017880:	f004 fc40 	bl	801c104 <abort>
    return dims_[i];
 8017884:	687a      	ldr	r2, [r7, #4]
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	009b      	lsls	r3, r3, #2
 801788a:	4413      	add	r3, r2
 801788c:	685b      	ldr	r3, [r3, #4]
  }
 801788e:	4618      	mov	r0, r3
 8017890:	3708      	adds	r7, #8
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}
	...

08017898 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8017898:	b480      	push	{r7}
 801789a:	af00      	add	r7, sp, #0
 801789c:	4b04      	ldr	r3, [pc, #16]	; (80178b0 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 801789e:	ee07 3a90 	vmov	s15, r3
 80178a2:	eeb0 0a67 	vmov.f32	s0, s15
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	7f7fffff 	.word	0x7f7fffff

080178b4 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 80178b4:	b480      	push	{r7}
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80178bc:	ee07 3a90 	vmov	s15, r3
 80178c0:	eeb0 0a67 	vmov.f32	s0, s15
 80178c4:	46bd      	mov	sp, r7
 80178c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ca:	4770      	bx	lr

080178cc <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80178d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80178da:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 80178de:	f107 0208 	add.w	r2, r7, #8
 80178e2:	f107 030c 	add.w	r3, r7, #12
 80178e6:	4611      	mov	r1, r2
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7f2 f95b 	bl	8009ba4 <_ZSt3maxIfERKT_S2_S2_>
 80178ee:	4602      	mov	r2, r0
 80178f0:	1d3b      	adds	r3, r7, #4
 80178f2:	4619      	mov	r1, r3
 80178f4:	4610      	mov	r0, r2
 80178f6:	f7ff f9b9 	bl	8016c6c <_ZSt3minIfERKT_S2_S2_>
 80178fa:	4603      	mov	r3, r0
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	ee07 3a90 	vmov	s15, r3
}
 8017902:	eeb0 0a67 	vmov.f32	s0, s15
 8017906:	3710      	adds	r7, #16
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 801790c:	b580      	push	{r7, lr}
 801790e:	b084      	sub	sp, #16
 8017910:	af00      	add	r7, sp, #0
 8017912:	4603      	mov	r3, r0
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 801791a:	7bfb      	ldrb	r3, [r7, #15]
 801791c:	2b01      	cmp	r3, #1
 801791e:	d10b      	bne.n	8017938 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	f04f 0200 	mov.w	r2, #0
 8017926:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8017928:	f7ff ffb6 	bl	8017898 <_ZNSt14numeric_limitsIfE3maxEv>
 801792c:	eef0 7a40 	vmov.f32	s15, s0
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8017936:	e023      	b.n	8017980 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8017938:	7bfb      	ldrb	r3, [r7, #15]
 801793a:	2b03      	cmp	r3, #3
 801793c:	d107      	bne.n	801794e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801793e:	68bb      	ldr	r3, [r7, #8]
 8017940:	f04f 0200 	mov.w	r2, #0
 8017944:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	4a0f      	ldr	r2, [pc, #60]	; (8017988 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801794a:	601a      	str	r2, [r3, #0]
}
 801794c:	e018      	b.n	8017980 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801794e:	7bfb      	ldrb	r3, [r7, #15]
 8017950:	2b02      	cmp	r3, #2
 8017952:	d107      	bne.n	8017964 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	4a0d      	ldr	r2, [pc, #52]	; (801798c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8017958:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017960:	601a      	str	r2, [r3, #0]
}
 8017962:	e00d      	b.n	8017980 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8017964:	f7ff ffa6 	bl	80178b4 <_ZNSt14numeric_limitsIfE6lowestEv>
 8017968:	eef0 7a40 	vmov.f32	s15, s0
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8017972:	f7ff ff91 	bl	8017898 <_ZNSt14numeric_limitsIfE3maxEv>
 8017976:	eef0 7a40 	vmov.f32	s15, s0
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	edc3 7a00 	vstr	s15, [r3]
}
 8017980:	bf00      	nop
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}
 8017988:	40c00000 	.word	0x40c00000
 801798c:	bf800000 	.word	0xbf800000

08017990 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8017990:	b480      	push	{r7}
 8017992:	b085      	sub	sp, #20
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
}
 801799c:	bf00      	nop
 801799e:	3714      	adds	r7, #20
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr

080179a8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 80179a8:	b590      	push	{r4, r7, lr}
 80179aa:	b087      	sub	sp, #28
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
 80179b4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 80179b6:	68b9      	ldr	r1, [r7, #8]
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f7ff ff52 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 80179be:	4604      	mov	r4, r0
 80179c0:	6839      	ldr	r1, [r7, #0]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f7ff ff4d 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 80179c8:	4603      	mov	r3, r0
 80179ca:	429c      	cmp	r4, r3
 80179cc:	d001      	beq.n	80179d2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80179ce:	f004 fb99 	bl	801c104 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80179d2:	68b9      	ldr	r1, [r7, #8]
 80179d4:	68f8      	ldr	r0, [r7, #12]
 80179d6:	f7ff ff44 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 80179da:	4603      	mov	r3, r0
 80179dc:	613b      	str	r3, [r7, #16]
 80179de:	6839      	ldr	r1, [r7, #0]
 80179e0:	6878      	ldr	r0, [r7, #4]
 80179e2:	f7ff ff3e 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 80179e6:	4603      	mov	r3, r0
 80179e8:	617b      	str	r3, [r7, #20]
 80179ea:	f107 0214 	add.w	r2, r7, #20
 80179ee:	f107 0310 	add.w	r3, r7, #16
 80179f2:	4611      	mov	r1, r2
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7f3 faca 	bl	800af8e <_ZSt3minIlERKT_S2_S2_>
 80179fa:	4603      	mov	r3, r0
 80179fc:	681b      	ldr	r3, [r3, #0]
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	371c      	adds	r7, #28
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd90      	pop	{r4, r7, pc}

08017a06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8017a06:	b580      	push	{r7, lr}
 8017a08:	b086      	sub	sp, #24
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	6078      	str	r0, [r7, #4]
 8017a0e:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f7ff fc9b 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a16:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	db03      	blt.n	8017a26 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8017a1e:	683a      	ldr	r2, [r7, #0]
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	db01      	blt.n	8017a2a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8017a26:	f004 fb6d 	bl	801c104 <abort>
  const auto* dims_data = shape.DimsData();
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f7ff f846 	bl	8016abc <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8017a30:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8017a32:	2301      	movs	r3, #1
 8017a34:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8017a36:	2300      	movs	r3, #0
 8017a38:	613b      	str	r3, [r7, #16]
 8017a3a:	e011      	b.n	8017a60 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8017a3c:	693a      	ldr	r2, [r7, #16]
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d005      	beq.n	8017a50 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8017a44:	693b      	ldr	r3, [r7, #16]
 8017a46:	009b      	lsls	r3, r3, #2
 8017a48:	68ba      	ldr	r2, [r7, #8]
 8017a4a:	4413      	add	r3, r2
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	e000      	b.n	8017a52 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8017a50:	2301      	movs	r3, #1
 8017a52:	697a      	ldr	r2, [r7, #20]
 8017a54:	fb02 f303 	mul.w	r3, r2, r3
 8017a58:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	613b      	str	r3, [r7, #16]
 8017a60:	693a      	ldr	r2, [r7, #16]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	dbe9      	blt.n	8017a3c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8017a68:	697b      	ldr	r3, [r7, #20]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3718      	adds	r7, #24
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}

08017a72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8017a72:	b590      	push	{r4, r7, lr}
 8017a74:	b091      	sub	sp, #68	; 0x44
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	60f8      	str	r0, [r7, #12]
 8017a7a:	60b9      	str	r1, [r7, #8]
 8017a7c:	607a      	str	r2, [r7, #4]
 8017a7e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	69db      	ldr	r3, [r3, #28]
 8017a84:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	6a1b      	ldr	r3, [r3, #32]
 8017a8a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8017a8c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017a8e:	f7ff fc5d 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a92:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8017a94:	6838      	ldr	r0, [r7, #0]
 8017a96:	f7ff fc59 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017a9a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8017a9c:	6a3b      	ldr	r3, [r7, #32]
 8017a9e:	3b01      	subs	r3, #1
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017aa4:	f7ff ffaf 	bl	8017a06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8017aa8:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	1e99      	subs	r1, r3, #2
 8017aae:	6a3b      	ldr	r3, [r7, #32]
 8017ab0:	3b01      	subs	r3, #1
 8017ab2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017ab4:	6838      	ldr	r0, [r7, #0]
 8017ab6:	f7ff ff77 	bl	80179a8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017aba:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	3b01      	subs	r3, #1
 8017ac0:	4619      	mov	r1, r3
 8017ac2:	6838      	ldr	r0, [r7, #0]
 8017ac4:	f7ff fecd 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017ac8:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8017aca:	2300      	movs	r3, #0
 8017acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ace:	e05e      	b.n	8017b8e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8017ad4:	e054      	b.n	8017b80 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8017ad6:	f04f 0300 	mov.w	r3, #0
 8017ada:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8017adc:	2300      	movs	r3, #0
 8017ade:	633b      	str	r3, [r7, #48]	; 0x30
 8017ae0:	e020      	b.n	8017b24 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8017ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ae4:	693a      	ldr	r2, [r7, #16]
 8017ae6:	fb03 f202 	mul.w	r2, r3, r2
 8017aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aec:	4413      	add	r3, r2
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	687a      	ldr	r2, [r7, #4]
 8017af2:	4413      	add	r3, r2
 8017af4:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8017af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afa:	693a      	ldr	r2, [r7, #16]
 8017afc:	fb03 f202 	mul.w	r2, r3, r2
 8017b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b02:	4413      	add	r3, r2
 8017b04:	009b      	lsls	r3, r3, #2
 8017b06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017b08:	4413      	add	r3, r2
 8017b0a:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8017b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b1a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8017b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b20:	3301      	adds	r3, #1
 8017b22:	633b      	str	r3, [r7, #48]	; 0x30
 8017b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b26:	693b      	ldr	r3, [r7, #16]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	dbda      	blt.n	8017ae2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8017b2c:	f04f 0300 	mov.w	r3, #0
 8017b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8017b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d005      	beq.n	8017b44 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8017b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3a:	009b      	lsls	r3, r3, #2
 8017b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017b3e:	4413      	add	r3, r2
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8017b44:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017b48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b54:	fb03 f202 	mul.w	r2, r3, r2
 8017b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b5a:	4413      	add	r3, r2
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017b60:	18d4      	adds	r4, r2, r3
 8017b62:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8017b66:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8017b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8017b6e:	f7ff fead 	bl	80178cc <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8017b72:	eef0 7a40 	vmov.f32	s15, s0
 8017b76:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	3301      	adds	r3, #1
 8017b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	dba6      	blt.n	8017ad6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8017b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b8a:	3301      	adds	r3, #1
 8017b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b90:	69bb      	ldr	r3, [r7, #24]
 8017b92:	429a      	cmp	r2, r3
 8017b94:	db9c      	blt.n	8017ad0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8017b96:	bf00      	nop
 8017b98:	bf00      	nop
 8017b9a:	3744      	adds	r7, #68	; 0x44
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd90      	pop	{r4, r7, pc}

08017ba0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d101      	bne.n	8017bb8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8017bb4:	f004 faa6 	bl	801c104 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bbc:	213c      	movs	r1, #60	; 0x3c
 8017bbe:	68f8      	ldr	r0, [r7, #12]
 8017bc0:	4798      	blx	r3
 8017bc2:	4603      	mov	r3, r0
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3710      	adds	r7, #16
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8017bcc:	b5b0      	push	{r4, r5, r7, lr}
 8017bce:	b0b2      	sub	sp, #200	; 0xc8
 8017bd0:	af04      	add	r7, sp, #16
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	691b      	ldr	r3, [r3, #16]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d101      	bne.n	8017be2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8017bde:	f004 fa91 	bl	801c104 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	695b      	ldr	r3, [r3, #20]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d101      	bne.n	8017bee <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8017bea:	f004 fa8b 	bl	801c104 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto params =
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	695b      	ldr	r3, [r3, #20]
 8017bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f7ff fdd1 	bl	80177a6 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8017c04:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8017c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	3318      	adds	r3, #24
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	4ab7      	ldr	r2, [pc, #732]	; (8017ef0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8017c14:	6812      	ldr	r2, [r2, #0]
 8017c16:	6839      	ldr	r1, [r7, #0]
 8017c18:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017c1c:	4798      	blx	r3
 8017c1e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8017c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d10a      	bne.n	8017c40 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	691c      	ldr	r4, [r3, #16]
 8017c2e:	4bb1      	ldr	r3, [pc, #708]	; (8017ef4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8017c30:	9300      	str	r3, [sp, #0]
 8017c32:	2347      	movs	r3, #71	; 0x47
 8017c34:	4ab0      	ldr	r2, [pc, #704]	; (8017ef8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017c36:	49b1      	ldr	r1, [pc, #708]	; (8017efc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	47a0      	blx	r4
 8017c3c:	2401      	movs	r4, #1
 8017c3e:	e1a8      	b.n	8017f92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8017c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	3318      	adds	r3, #24
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4aad      	ldr	r2, [pc, #692]	; (8017f00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 8017c4c:	6812      	ldr	r2, [r2, #0]
 8017c4e:	6839      	ldr	r1, [r7, #0]
 8017c50:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017c54:	4798      	blx	r3
 8017c56:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8017c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d10a      	bne.n	8017c78 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	691c      	ldr	r4, [r3, #16]
 8017c66:	4ba7      	ldr	r3, [pc, #668]	; (8017f04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	234a      	movs	r3, #74	; 0x4a
 8017c6c:	4aa2      	ldr	r2, [pc, #648]	; (8017ef8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017c6e:	49a3      	ldr	r1, [pc, #652]	; (8017efc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	47a0      	blx	r4
 8017c74:	2401      	movs	r4, #1
 8017c76:	e18c      	b.n	8017f92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8017c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	3318      	adds	r3, #24
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	4aa1      	ldr	r2, [pc, #644]	; (8017f08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8017c84:	6812      	ldr	r2, [r2, #0]
 8017c86:	6839      	ldr	r1, [r7, #0]
 8017c88:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017c8c:	4798      	blx	r3
 8017c8e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8017c92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	331c      	adds	r3, #28
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	4a9b      	ldr	r2, [pc, #620]	; (8017f0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8017c9e:	6812      	ldr	r2, [r2, #0]
 8017ca0:	6839      	ldr	r1, [r7, #0]
 8017ca2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017ca6:	4798      	blx	r3
 8017ca8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8017cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d10a      	bne.n	8017cca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	691c      	ldr	r4, [r3, #16]
 8017cb8:	4b95      	ldr	r3, [pc, #596]	; (8017f10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 8017cba:	9300      	str	r3, [sp, #0]
 8017cbc:	234f      	movs	r3, #79	; 0x4f
 8017cbe:	4a8e      	ldr	r2, [pc, #568]	; (8017ef8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017cc0:	498e      	ldr	r1, [pc, #568]	; (8017efc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	47a0      	blx	r4
 8017cc6:	2401      	movs	r4, #1
 8017cc8:	e163      	b.n	8017f92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8017cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017cce:	781a      	ldrb	r2, [r3, #0]
 8017cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d01c      	beq.n	8017d14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	691c      	ldr	r4, [r3, #16]
 8017cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7fe fe29 	bl	801693c <TfLiteTypeGetName>
 8017cea:	4605      	mov	r5, r0
 8017cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7fe fe22 	bl	801693c <TfLiteTypeGetName>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	9303      	str	r3, [sp, #12]
 8017cfc:	9502      	str	r5, [sp, #8]
 8017cfe:	4b85      	ldr	r3, [pc, #532]	; (8017f14 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	4b85      	ldr	r3, [pc, #532]	; (8017f18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8017d04:	9300      	str	r3, [sp, #0]
 8017d06:	2351      	movs	r3, #81	; 0x51
 8017d08:	4a7b      	ldr	r2, [pc, #492]	; (8017ef8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017d0a:	4984      	ldr	r1, [pc, #528]	; (8017f1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	47a0      	blx	r4
 8017d10:	2401      	movs	r4, #1
 8017d12:	e13e      	b.n	8017f92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 8017d14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d18:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7fe ff14 	bl	8016b4a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8017d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017d26:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7fe ff0d 	bl	8016b4a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8017d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d34:	4618      	mov	r0, r3
 8017d36:	f7ff fb09 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017d3a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 8017d3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017d42:	4618      	mov	r0, r3
 8017d44:	f7ff fb02 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017d48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8017d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017d50:	1e5a      	subs	r2, r3, #1
 8017d52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d56:	4611      	mov	r1, r2
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7ff fd82 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.h = 1;
 8017d62:	2301      	movs	r3, #1
 8017d64:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_dims.w = 1;
 8017d66:	2301      	movs	r3, #1
 8017d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8017d6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017d6e:	1e5a      	subs	r2, r3, #1
 8017d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017d74:	4611      	mov	r1, r2
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7ff fd73 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	633b      	str	r3, [r7, #48]	; 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8017d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017d84:	1e5a      	subs	r2, r3, #1
 8017d86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d8a:	4611      	mov	r1, r2
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7ff fd68 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017d92:	4602      	mov	r2, r0
 8017d94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017d98:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8017d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017d9e:	1e5a      	subs	r2, r3, #1
 8017da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017da4:	4611      	mov	r1, r2
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7ff fe2d 	bl	8017a06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8017dac:	4602      	mov	r2, r0
 8017dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017db2:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8017db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017db8:	1e5a      	subs	r2, r3, #1
 8017dba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017dbe:	4611      	mov	r1, r2
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7ff fd4e 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8017dc6:	4602      	mov	r2, r0
 8017dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017dcc:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8017dce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8017dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017ddc:	7819      	ldrb	r1, [r3, #0]
 8017dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017de2:	781a      	ldrb	r2, [r3, #0]
 8017de4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017de8:	9303      	str	r3, [sp, #12]
 8017dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017dee:	9302      	str	r3, [sp, #8]
 8017df0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017df4:	9301      	str	r3, [sp, #4]
 8017df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017dfa:	9300      	str	r3, [sp, #0]
 8017dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f000 fa31 	bl	8018268 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8017e06:	4603      	mov	r3, r0
 8017e08:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8017e0c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d002      	beq.n	8017e1a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 8017e14:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8017e18:	e0b1      	b.n	8017f7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if (input->type == kTfLiteInt16) {
 8017e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	2b07      	cmp	r3, #7
 8017e28:	d10f      	bne.n	8017e4a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 8017e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e2e:	781b      	ldrb	r3, [r3, #0]
 8017e30:	4618      	mov	r0, r3
 8017e32:	f7fe fd83 	bl	801693c <TfLiteTypeGetName>
 8017e36:	4603      	mov	r3, r0
 8017e38:	667b      	str	r3, [r7, #100]	; 0x64
 8017e3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017e3e:	4619      	mov	r1, r3
 8017e40:	4837      	ldr	r0, [pc, #220]	; (8017f20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8017e42:	f7ff fcbc 	bl	80177be <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8017e46:	2401      	movs	r4, #1
 8017e48:	e099      	b.n	8017f7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 8017e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	2b09      	cmp	r3, #9
 8017e52:	d10f      	bne.n	8017e74 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 8017e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f7fe fd6e 	bl	801693c <TfLiteTypeGetName>
 8017e60:	4603      	mov	r3, r0
 8017e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8017e64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8017e68:	4619      	mov	r1, r3
 8017e6a:	482d      	ldr	r0, [pc, #180]	; (8017f20 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8017e6c:	f7ff fca7 	bl	80177be <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8017e70:	2401      	movs	r4, #1
 8017e72:	e084      	b.n	8017f7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 8017e74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	2b12      	cmp	r3, #18
 8017e7c:	d121      	bne.n	8017ec2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 8017e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e82:	689b      	ldr	r3, [r3, #8]
 8017e84:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8017e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e8a:	689b      	ldr	r3, [r3, #8]
 8017e8c:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 8017e8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7fe fde8 	bl	8016a68 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8017e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7fe fe31 	bl	8016b04 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8017ea2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        RuntimeShape(filter->dims->size,
 8017ea6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fe fdef 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eb4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8017eb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017ebc:	3220      	adds	r2, #32
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 8017ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	dd2c      	ble.n	8017f24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ece:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8017ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017ed6:	322c      	adds	r2, #44	; 0x2c
 8017ed8:	6878      	ldr	r0, [r7, #4]
 8017eda:	4798      	blx	r3
 8017edc:	4603      	mov	r3, r0
 8017ede:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8017ee2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d01c      	beq.n	8017f24 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 8017eea:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 8017eee:	e046      	b.n	8017f7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 8017ef0:	08023268 	.word	0x08023268
 8017ef4:	08021238 	.word	0x08021238
 8017ef8:	08021188 	.word	0x08021188
 8017efc:	08021220 	.word	0x08021220
 8017f00:	0802326c 	.word	0x0802326c
 8017f04:	0802124c 	.word	0x0802124c
 8017f08:	08023270 	.word	0x08023270
 8017f0c:	08023274 	.word	0x08023274
 8017f10:	08021260 	.word	0x08021260
 8017f14:	08021290 	.word	0x08021290
 8017f18:	080212a0 	.word	0x080212a0
 8017f1c:	08021274 	.word	0x08021274
 8017f20:	080212ac 	.word	0x080212ac
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 8017f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	3324      	adds	r3, #36	; 0x24
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8017f32:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017f36:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8017f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	3324      	adds	r3, #36	; 0x24
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8017f46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017f4a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8017f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	3324      	adds	r3, #36	; 0x24
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017f5a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017f5e:	4798      	blx	r3
  if (bias != nullptr) {
 8017f60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d009      	beq.n	8017f7c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8017f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	3324      	adds	r3, #36	; 0x24
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8017f76:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017f7a:	4798      	blx	r3
  }

  return kTfLiteOk;
 8017f7c:	2400      	movs	r4, #0
}
 8017f7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fe fd83 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
 8017f88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f7fe fd7e 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
 8017f92:	4623      	mov	r3, r4
 8017f94:	4618      	mov	r0, r3
 8017f96:	37b8      	adds	r7, #184	; 0xb8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bdb0      	pop	{r4, r5, r7, pc}

08017f9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8017f9c:	b5b0      	push	{r4, r5, r7, lr}
 8017f9e:	b0b8      	sub	sp, #224	; 0xe0
 8017fa0:	af06      	add	r7, sp, #24
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	695b      	ldr	r3, [r3, #20]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d101      	bne.n	8017fb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8017fae:	f004 f8a9 	bl	801c104 <abort>
  const auto* params =
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	695b      	ldr	r3, [r3, #20]
 8017fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8017fba:	4b7f      	ldr	r3, [pc, #508]	; (80181b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	461a      	mov	r2, r3
 8017fc0:	6839      	ldr	r1, [r7, #0]
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f000 fa21 	bl	801840a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017fc8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8017fcc:	4b7b      	ldr	r3, [pc, #492]	; (80181bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	461a      	mov	r2, r3
 8017fd2:	6839      	ldr	r1, [r7, #0]
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 fa18 	bl	801840a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017fda:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8017fde:	4b78      	ldr	r3, [pc, #480]	; (80181c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	6839      	ldr	r1, [r7, #0]
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f000 fa0f 	bl	801840a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8017fec:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8017ff0:	4b74      	ldr	r3, [pc, #464]	; (80181c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	461a      	mov	r2, r3
 8017ff6:	6839      	ldr	r1, [r7, #0]
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f000 fa16 	bl	801842a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8017ffe:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d101      	bne.n	801800e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 801800a:	f004 f87b 	bl	801c104 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	691b      	ldr	r3, [r3, #16]
 8018012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 8018016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801801a:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 801801c:	f107 0008 	add.w	r0, r7, #8
 8018020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018024:	6879      	ldr	r1, [r7, #4]
 8018026:	f000 fa42 	bl	80184ae <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801802a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801802e:	7a1b      	ldrb	r3, [r3, #8]
 8018030:	2b09      	cmp	r3, #9
 8018032:	d06e      	beq.n	8018112 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 8018034:	2b09      	cmp	r3, #9
 8018036:	f300 80a6 	bgt.w	8018186 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 801803a:	2b01      	cmp	r3, #1
 801803c:	d003      	beq.n	8018046 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 801803e:	2b07      	cmp	r3, #7
 8018040:	f000 8090 	beq.w	8018164 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8018044:	e09f      	b.n	8018186 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 8018046:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801804a:	f000 f8db 	bl	8018204 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801804e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8018052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018056:	781a      	ldrb	r2, [r3, #0]
 8018058:	f107 0314 	add.w	r3, r7, #20
 801805c:	4611      	mov	r1, r2
 801805e:	4618      	mov	r0, r3
 8018060:	f000 f8ed 	bl	801823e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8018064:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018068:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801806c:	4618      	mov	r0, r3
 801806e:	f000 f9fc 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018072:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018076:	f7ff fbb8 	bl	80177ea <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801807a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 801807c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018080:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8018084:	4618      	mov	r0, r3
 8018086:	f000 f9f0 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 801808a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801808e:	f7ff fbac 	bl	80177ea <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018092:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 8018094:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018098:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801809c:	4618      	mov	r0, r3
 801809e:	f000 f9e4 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 80180a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80180a6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80180aa:	4618      	mov	r0, r3
 80180ac:	f000 f9dd 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 80180b0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80180b4:	f7ff fba8 	bl	8017808 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80180b8:	4603      	mov	r3, r0
 80180ba:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80180be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80180c2:	f107 0014 	add.w	r0, r7, #20
 80180c6:	9304      	str	r3, [sp, #16]
 80180c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80180cc:	9303      	str	r3, [sp, #12]
 80180ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80180d2:	9302      	str	r3, [sp, #8]
 80180d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80180d8:	9301      	str	r3, [sp, #4]
 80180da:	9400      	str	r4, [sp, #0]
 80180dc:	4613      	mov	r3, r2
 80180de:	462a      	mov	r2, r5
 80180e0:	f7ff fcc7 	bl	8017a72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 80180e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80180e8:	4618      	mov	r0, r3
 80180ea:	f7fe fcd0 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 80180ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fe fccb 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80180f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fe fcc6 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018102:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018106:	4618      	mov	r0, r3
 8018108:	f7fe fcc1 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 801810c:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 801810e:	2300      	movs	r3, #0
 8018110:	e04d      	b.n	80181ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 8018112:	7c3b      	ldrb	r3, [r7, #16]
 8018114:	2b09      	cmp	r3, #9
 8018116:	d110      	bne.n	801813a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8018118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801811c:	7a1b      	ldrb	r3, [r3, #8]
 801811e:	4618      	mov	r0, r3
 8018120:	f7fe fc0c 	bl	801693c <TfLiteTypeGetName>
 8018124:	4603      	mov	r3, r0
 8018126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801812a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801812e:	4619      	mov	r1, r3
 8018130:	4825      	ldr	r0, [pc, #148]	; (80181c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018132:	f7ff fb44 	bl	80177be <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018136:	2301      	movs	r3, #1
 8018138:	e039      	b.n	80181ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 801813a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801813e:	7a1b      	ldrb	r3, [r3, #8]
 8018140:	4618      	mov	r0, r3
 8018142:	f7fe fbfb 	bl	801693c <TfLiteTypeGetName>
 8018146:	4603      	mov	r3, r0
 8018148:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801814c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018150:	f103 0208 	add.w	r2, r3, #8
 8018154:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018158:	4619      	mov	r1, r3
 801815a:	481c      	ldr	r0, [pc, #112]	; (80181cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 801815c:	f000 f863 	bl	8018226 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8018160:	2301      	movs	r3, #1
 8018162:	e024      	b.n	80181ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 8018164:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018168:	7a1b      	ldrb	r3, [r3, #8]
 801816a:	4618      	mov	r0, r3
 801816c:	f7fe fbe6 	bl	801693c <TfLiteTypeGetName>
 8018170:	4603      	mov	r3, r0
 8018172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018176:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801817a:	4619      	mov	r1, r3
 801817c:	4812      	ldr	r0, [pc, #72]	; (80181c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 801817e:	f7ff fb1e 	bl	80177be <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018182:	2301      	movs	r3, #1
 8018184:	e013      	b.n	80181ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801818a:	7a1b      	ldrb	r3, [r3, #8]
 801818c:	4618      	mov	r0, r3
 801818e:	f7fe fbd5 	bl	801693c <TfLiteTypeGetName>
 8018192:	4603      	mov	r3, r0
 8018194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018198:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801819c:	f103 0208 	add.w	r2, r3, #8
 80181a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80181a4:	4619      	mov	r1, r3
 80181a6:	480a      	ldr	r0, [pc, #40]	; (80181d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 80181a8:	f7ff fbf2 	bl	8017990 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 80181ac:	2301      	movs	r3, #1
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	37c8      	adds	r7, #200	; 0xc8
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bdb0      	pop	{r4, r5, r7, pc}
 80181b6:	bf00      	nop
 80181b8:	08023268 	.word	0x08023268
 80181bc:	0802326c 	.word	0x0802326c
 80181c0:	08023270 	.word	0x08023270
 80181c4:	08023274 	.word	0x08023274
 80181c8:	080212ac 	.word	0x080212ac
 80181cc:	0802151c 	.word	0x0802151c
 80181d0:	08021540 	.word	0x08021540

080181d4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b084      	sub	sp, #16
 80181d8:	af02      	add	r7, sp, #8
 80181da:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	2300      	movs	r3, #0
 80181e0:	9300      	str	r3, [sp, #0]
 80181e2:	4b05      	ldr	r3, [pc, #20]	; (80181f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 80181e4:	4a05      	ldr	r2, [pc, #20]	; (80181fc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 80181e6:	4906      	ldr	r1, [pc, #24]	; (8018200 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 80181e8:	f000 f8b6 	bl	8018358 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 80181ec:	bf00      	nop
}
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	3708      	adds	r7, #8
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	bf00      	nop
 80181f8:	08017f9d 	.word	0x08017f9d
 80181fc:	08017bcd 	.word	0x08017bcd
 8018200:	08017ba1 	.word	0x08017ba1

08018204 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 8018204:	b480      	push	{r7}
 8018206:	b083      	sub	sp, #12
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d002      	beq.n	8018218 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 8018216:	e000      	b.n	801821a <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8018218:	2300      	movs	r3, #0
}
 801821a:	4618      	mov	r0, r3
 801821c:	370c      	adds	r7, #12
 801821e:	46bd      	mov	sp, r7
 8018220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018224:	4770      	bx	lr

08018226 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8018226:	b480      	push	{r7}
 8018228:	b085      	sub	sp, #20
 801822a:	af00      	add	r7, sp, #0
 801822c:	60f8      	str	r0, [r7, #12]
 801822e:	60b9      	str	r1, [r7, #8]
 8018230:	607a      	str	r2, [r7, #4]
}
 8018232:	bf00      	nop
 8018234:	3714      	adds	r7, #20
 8018236:	46bd      	mov	sp, r7
 8018238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823c:	4770      	bx	lr

0801823e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 801823e:	b580      	push	{r7, lr}
 8018240:	b082      	sub	sp, #8
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
 8018246:	460b      	mov	r3, r1
 8018248:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f103 0220 	add.w	r2, r3, #32
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f103 011c 	add.w	r1, r3, #28
 8018256:	78fb      	ldrb	r3, [r7, #3]
 8018258:	4618      	mov	r0, r3
 801825a:	f7ff fb57 	bl	801790c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 801825e:	bf00      	nop
}
 8018260:	6878      	ldr	r0, [r7, #4]
 8018262:	3708      	adds	r7, #8
 8018264:	46bd      	mov	sp, r7
 8018266:	bd80      	pop	{r7, pc}

08018268 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8018268:	b580      	push	{r7, lr}
 801826a:	b08a      	sub	sp, #40	; 0x28
 801826c:	af02      	add	r7, sp, #8
 801826e:	60f8      	str	r0, [r7, #12]
 8018270:	607b      	str	r3, [r7, #4]
 8018272:	460b      	mov	r3, r1
 8018274:	72fb      	strb	r3, [r7, #11]
 8018276:	4613      	mov	r3, r2
 8018278:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 801827a:	7abb      	ldrb	r3, [r7, #10]
 801827c:	2b01      	cmp	r3, #1
 801827e:	d044      	beq.n	801830a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8018280:	f04f 0200 	mov.w	r2, #0
 8018284:	f04f 0300 	mov.w	r3, #0
 8018288:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801828c:	f107 0310 	add.w	r3, r7, #16
 8018290:	9301      	str	r3, [sp, #4]
 8018292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018294:	9300      	str	r3, [sp, #0]
 8018296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801829a:	6879      	ldr	r1, [r7, #4]
 801829c:	68f8      	ldr	r0, [r7, #12]
 801829e:	f7fe fe0b 	bl	8016eb8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 80182a2:	4603      	mov	r3, r0
 80182a4:	77fb      	strb	r3, [r7, #31]
 80182a6:	7ffb      	ldrb	r3, [r7, #31]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d001      	beq.n	80182b0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 80182ac:	7ffb      	ldrb	r3, [r7, #31]
 80182ae:	e02d      	b.n	801830c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 80182b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80182b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182b8:	3304      	adds	r3, #4
 80182ba:	4619      	mov	r1, r3
 80182bc:	4610      	mov	r0, r2
 80182be:	eeb0 0a47 	vmov.f32	s0, s14
 80182c2:	eef0 0a67 	vmov.f32	s1, s15
 80182c6:	f7fe fcf3 	bl	8016cb0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	691a      	ldr	r2, [r3, #16]
 80182ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182d0:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 80182d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d4:	691b      	ldr	r3, [r3, #16]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d001      	beq.n	80182de <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 80182da:	f003 ff13 	bl	801c104 <abort>
    data->filter_zero_point = filter->params.zero_point;
 80182de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e0:	691a      	ldr	r2, [r3, #16]
 80182e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182e4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 80182e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e8:	691a      	ldr	r2, [r3, #16]
 80182ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ec:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80182ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182f0:	f103 0208 	add.w	r2, r3, #8
 80182f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182f6:	330c      	adds	r3, #12
 80182f8:	7af9      	ldrb	r1, [r7, #11]
 80182fa:	9300      	str	r3, [sp, #0]
 80182fc:	4613      	mov	r3, r2
 80182fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018300:	68f8      	ldr	r0, [r7, #12]
 8018302:	f7fe ffcb 	bl	801729c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8018306:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8018308:	e000      	b.n	801830c <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 801830a:	2300      	movs	r3, #0
}
 801830c:	4618      	mov	r0, r3
 801830e:	3720      	adds	r7, #32
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8018314:	b480      	push	{r7}
 8018316:	b087      	sub	sp, #28
 8018318:	af00      	add	r7, sp, #0
 801831a:	60f8      	str	r0, [r7, #12]
 801831c:	60b9      	str	r1, [r7, #8]
 801831e:	607a      	str	r2, [r7, #4]
 8018320:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	2b00      	cmp	r3, #0
 8018326:	db0f      	blt.n	8018348 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8018328:	68ba      	ldr	r2, [r7, #8]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	429a      	cmp	r2, r3
 801832e:	da0b      	bge.n	8018348 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	009b      	lsls	r3, r3, #2
 8018334:	683a      	ldr	r2, [r7, #0]
 8018336:	4413      	add	r3, r2
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 801833c:	697b      	ldr	r3, [r7, #20]
 801833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018342:	d001      	beq.n	8018348 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	e001      	b.n	801834c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8018348:	f04f 33ff 	mov.w	r3, #4294967295
}
 801834c:	4618      	mov	r0, r3
 801834e:	371c      	adds	r7, #28
 8018350:	46bd      	mov	sp, r7
 8018352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018356:	4770      	bx	lr

08018358 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8018358:	b480      	push	{r7}
 801835a:	b085      	sub	sp, #20
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	60b9      	str	r1, [r7, #8]
 8018362:	607a      	str	r2, [r7, #4]
 8018364:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	68ba      	ldr	r2, [r7, #8]
 801836a:	601a      	str	r2, [r3, #0]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	69ba      	ldr	r2, [r7, #24]
 8018370:	605a      	str	r2, [r3, #4]
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	687a      	ldr	r2, [r7, #4]
 8018376:	609a      	str	r2, [r3, #8]
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	683a      	ldr	r2, [r7, #0]
 801837c:	60da      	str	r2, [r3, #12]
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2200      	movs	r2, #0
 8018382:	611a      	str	r2, [r3, #16]
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	2200      	movs	r2, #0
 8018388:	615a      	str	r2, [r3, #20]
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	2200      	movs	r2, #0
 801838e:	619a      	str	r2, [r3, #24]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	2200      	movs	r2, #0
 8018394:	61da      	str	r2, [r3, #28]
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	2200      	movs	r2, #0
 801839a:	621a      	str	r2, [r3, #32]
}
 801839c:	68f8      	ldr	r0, [r7, #12]
 801839e:	3714      	adds	r7, #20
 80183a0:	46bd      	mov	sp, r7
 80183a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a6:	4770      	bx	lr

080183a8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b086      	sub	sp, #24
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d101      	bne.n	80183be <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80183ba:	f003 fea3 	bl	801c104 <abort>
  TFLITE_DCHECK(node != nullptr);
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d101      	bne.n	80183c8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80183c4:	f003 fe9e 	bl	801c104 <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80183cc:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80183d4:	6879      	ldr	r1, [r7, #4]
 80183d6:	68f8      	ldr	r0, [r7, #12]
 80183d8:	f7ff ff9c 	bl	8018314 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80183dc:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	da01      	bge.n	80183e8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 80183e4:	2300      	movs	r3, #0
 80183e6:	e00c      	b.n	8018402 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	6819      	ldr	r1, [r3, #0]
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	440b      	add	r3, r1
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	4619      	mov	r1, r3
 80183fa:	68f8      	ldr	r0, [r7, #12]
 80183fc:	4790      	blx	r2
 80183fe:	4603      	mov	r3, r0
 8018400:	bf00      	nop
}
 8018402:	4618      	mov	r0, r3
 8018404:	3718      	adds	r7, #24
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}

0801840a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 801840a:	b580      	push	{r7, lr}
 801840c:	b084      	sub	sp, #16
 801840e:	af00      	add	r7, sp, #0
 8018410:	60f8      	str	r0, [r7, #12]
 8018412:	60b9      	str	r1, [r7, #8]
 8018414:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	68b9      	ldr	r1, [r7, #8]
 801841a:	68f8      	ldr	r0, [r7, #12]
 801841c:	f7ff ffc4 	bl	80183a8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018420:	4603      	mov	r3, r0
}
 8018422:	4618      	mov	r0, r3
 8018424:	3710      	adds	r7, #16
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}

0801842a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 801842a:	b580      	push	{r7, lr}
 801842c:	b084      	sub	sp, #16
 801842e:	af00      	add	r7, sp, #0
 8018430:	60f8      	str	r0, [r7, #12]
 8018432:	60b9      	str	r1, [r7, #8]
 8018434:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d101      	bne.n	8018440 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 801843c:	f003 fe62 	bl	801c104 <abort>
  TFLITE_DCHECK(node != nullptr);
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d101      	bne.n	801844a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8018446:	f003 fe5d 	bl	801c104 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	6859      	ldr	r1, [r3, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	009b      	lsls	r3, r3, #2
 8018456:	440b      	add	r3, r1
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	4619      	mov	r1, r3
 801845c:	68f8      	ldr	r0, [r7, #12]
 801845e:	4790      	blx	r2
 8018460:	4603      	mov	r3, r0
}
 8018462:	4618      	mov	r0, r3
 8018464:	3710      	adds	r7, #16
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}

0801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 801846a:	b580      	push	{r7, lr}
 801846c:	b086      	sub	sp, #24
 801846e:	af00      	add	r7, sp, #0
 8018470:	6078      	str	r0, [r7, #4]
 8018472:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d003      	beq.n	8018482 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d103      	bne.n	801848a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f7fe fae2 	bl	8016a4c <_ZN6tflite12RuntimeShapeC1Ev>
 8018488:	e00d      	b.n	80184a6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	685b      	ldr	r3, [r3, #4]
 801848e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	3304      	adds	r3, #4
 801849a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 801849c:	68fa      	ldr	r2, [r7, #12]
 801849e:	6939      	ldr	r1, [r7, #16]
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7fe fae1 	bl	8016a68 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 80184a6:	6878      	ldr	r0, [r7, #4]
 80184a8:	3718      	adds	r7, #24
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}

080184ae <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 80184ae:	b5b0      	push	{r4, r5, r7, lr}
 80184b0:	b08e      	sub	sp, #56	; 0x38
 80184b2:	af00      	add	r7, sp, #0
 80184b4:	60f8      	str	r0, [r7, #12]
 80184b6:	60b9      	str	r1, [r7, #8]
 80184b8:	607a      	str	r2, [r7, #4]
 80184ba:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	7a1b      	ldrb	r3, [r3, #8]
 80184c0:	2b12      	cmp	r3, #18
 80184c2:	d005      	beq.n	80184d0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	683a      	ldr	r2, [r7, #0]
 80184c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80184ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80184ce:	e033      	b.n	8018538 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184d4:	6879      	ldr	r1, [r7, #4]
 80184d6:	68b8      	ldr	r0, [r7, #8]
 80184d8:	4798      	blx	r3
 80184da:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 80184dc:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	685b      	ldr	r3, [r3, #4]
 80184e2:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 80184e4:	2309      	movs	r3, #9
 80184e6:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80184e8:	6838      	ldr	r0, [r7, #0]
 80184ea:	f7ff f99c 	bl	8017826 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80184ee:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80184f0:	f107 0320 	add.w	r3, r7, #32
 80184f4:	6839      	ldr	r1, [r7, #0]
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7ff ffb7 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80184fc:	f107 0320 	add.w	r3, r7, #32
 8018500:	4618      	mov	r0, r3
 8018502:	f7fe faff 	bl	8016b04 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018506:	4605      	mov	r5, r0
 8018508:	f107 0314 	add.w	r3, r7, #20
 801850c:	4618      	mov	r0, r3
 801850e:	f7ff f999 	bl	8017844 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018512:	4603      	mov	r3, r0
 8018514:	461a      	mov	r2, r3
 8018516:	4629      	mov	r1, r5
 8018518:	4620      	mov	r0, r4
 801851a:	f7fe fb67 	bl	8016bec <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 801851e:	f107 0320 	add.w	r3, r7, #32
 8018522:	4618      	mov	r0, r3
 8018524:	f7fe fab3 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	461c      	mov	r4, r3
 801852c:	f107 0314 	add.w	r3, r7, #20
 8018530:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	3738      	adds	r7, #56	; 0x38
 801853c:	46bd      	mov	sp, r7
 801853e:	bdb0      	pop	{r4, r5, r7, pc}

08018540 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8018540:	b590      	push	{r4, r7, lr}
 8018542:	b087      	sub	sp, #28
 8018544:	af00      	add	r7, sp, #0
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801854c:	68f8      	ldr	r0, [r7, #12]
 801854e:	f7fe fefd 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018552:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8018554:	2300      	movs	r3, #0
 8018556:	617b      	str	r3, [r7, #20]
 8018558:	e014      	b.n	8018584 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 801855a:	697a      	ldr	r2, [r7, #20]
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	429a      	cmp	r2, r3
 8018560:	d00d      	beq.n	801857e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8018562:	6979      	ldr	r1, [r7, #20]
 8018564:	68f8      	ldr	r0, [r7, #12]
 8018566:	f7ff f97c 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 801856a:	4604      	mov	r4, r0
 801856c:	6979      	ldr	r1, [r7, #20]
 801856e:	6878      	ldr	r0, [r7, #4]
 8018570:	f7ff f977 	bl	8017862 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018574:	4603      	mov	r3, r0
 8018576:	429c      	cmp	r4, r3
 8018578:	d001      	beq.n	801857e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 801857a:	f003 fdc3 	bl	801c104 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	3301      	adds	r3, #1
 8018582:	617b      	str	r3, [r7, #20]
 8018584:	697a      	ldr	r2, [r7, #20]
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	429a      	cmp	r2, r3
 801858a:	dbe6      	blt.n	801855a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801858c:	68b9      	ldr	r1, [r7, #8]
 801858e:	68f8      	ldr	r0, [r7, #12]
 8018590:	f7ff fa39 	bl	8017a06 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8018594:	4603      	mov	r3, r0
}
 8018596:	4618      	mov	r0, r3
 8018598:	371c      	adds	r7, #28
 801859a:	46bd      	mov	sp, r7
 801859c:	bd90      	pop	{r4, r7, pc}

0801859e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801859e:	b580      	push	{r7, lr}
 80185a0:	ed2d 8b02 	vpush	{d8}
 80185a4:	b08e      	sub	sp, #56	; 0x38
 80185a6:	af00      	add	r7, sp, #0
 80185a8:	60f8      	str	r0, [r7, #12]
 80185aa:	60b9      	str	r1, [r7, #8]
 80185ac:	607a      	str	r2, [r7, #4]
 80185ae:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80185b0:	68b8      	ldr	r0, [r7, #8]
 80185b2:	f7fe fecb 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80185b6:	4603      	mov	r3, r0
 80185b8:	3b01      	subs	r3, #1
 80185ba:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80185bc:	683a      	ldr	r2, [r7, #0]
 80185be:	6a39      	ldr	r1, [r7, #32]
 80185c0:	68b8      	ldr	r0, [r7, #8]
 80185c2:	f7ff ffbd 	bl	8018540 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80185c6:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80185c8:	6a3b      	ldr	r3, [r7, #32]
 80185ca:	683a      	ldr	r2, [r7, #0]
 80185cc:	6a39      	ldr	r1, [r7, #32]
 80185ce:	68b8      	ldr	r0, [r7, #8]
 80185d0:	f7ff f9ea 	bl	80179a8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80185d4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80185d6:	2300      	movs	r3, #0
 80185d8:	637b      	str	r3, [r7, #52]	; 0x34
 80185da:	e085      	b.n	80186e8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80185dc:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80185e0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80185e2:	2300      	movs	r3, #0
 80185e4:	633b      	str	r3, [r7, #48]	; 0x30
 80185e6:	e014      	b.n	8018612 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80185e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ea:	69ba      	ldr	r2, [r7, #24]
 80185ec:	fb03 f202 	mul.w	r2, r3, r2
 80185f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f2:	4413      	add	r3, r2
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	687a      	ldr	r2, [r7, #4]
 80185f8:	441a      	add	r2, r3
 80185fa:	f107 0310 	add.w	r3, r7, #16
 80185fe:	4611      	mov	r1, r2
 8018600:	4618      	mov	r0, r3
 8018602:	f7f1 facf 	bl	8009ba4 <_ZSt3maxIfERKT_S2_S2_>
 8018606:	4603      	mov	r3, r0
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860e:	3301      	adds	r3, #1
 8018610:	633b      	str	r3, [r7, #48]	; 0x30
 8018612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018614:	69bb      	ldr	r3, [r7, #24]
 8018616:	429a      	cmp	r2, r3
 8018618:	dbe6      	blt.n	80185e8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 801861a:	f04f 0300 	mov.w	r3, #0
 801861e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8018620:	2300      	movs	r3, #0
 8018622:	62bb      	str	r3, [r7, #40]	; 0x28
 8018624:	e035      	b.n	8018692 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8018626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018628:	69ba      	ldr	r2, [r7, #24]
 801862a:	fb03 f202 	mul.w	r2, r3, r2
 801862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018630:	4413      	add	r3, r2
 8018632:	009b      	lsls	r3, r3, #2
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	4413      	add	r3, r2
 8018638:	ed93 7a00 	vldr	s14, [r3]
 801863c:	edd7 7a04 	vldr	s15, [r7, #16]
 8018640:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801864a:	4610      	mov	r0, r2
 801864c:	4619      	mov	r1, r3
 801864e:	f7e8 fafb 	bl	8000c48 <__aeabi_d2f>
 8018652:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8018656:	ee68 7a27 	vmul.f32	s15, s16, s15
 801865a:	eeb0 0a67 	vmov.f32	s0, s15
 801865e:	f7e8 ff87 	bl	8001570 <_ZSt3expf>
 8018662:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8018666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018668:	69ba      	ldr	r2, [r7, #24]
 801866a:	fb03 f202 	mul.w	r2, r3, r2
 801866e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018670:	4413      	add	r3, r2
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018676:	4413      	add	r3, r2
 8018678:	697a      	ldr	r2, [r7, #20]
 801867a:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801867c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018680:	edd7 7a05 	vldr	s15, [r7, #20]
 8018684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018688:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801868e:	3301      	adds	r3, #1
 8018690:	62bb      	str	r3, [r7, #40]	; 0x28
 8018692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018694:	69bb      	ldr	r3, [r7, #24]
 8018696:	429a      	cmp	r2, r3
 8018698:	dbc5      	blt.n	8018626 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801869a:	2300      	movs	r3, #0
 801869c:	627b      	str	r3, [r7, #36]	; 0x24
 801869e:	e01c      	b.n	80186da <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 80186a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a2:	69ba      	ldr	r2, [r7, #24]
 80186a4:	fb03 f202 	mul.w	r2, r3, r2
 80186a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186aa:	4413      	add	r3, r2
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80186b0:	4413      	add	r3, r2
 80186b2:	edd3 6a00 	vldr	s13, [r3]
 80186b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186b8:	69ba      	ldr	r2, [r7, #24]
 80186ba:	fb03 f202 	mul.w	r2, r3, r2
 80186be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c0:	4413      	add	r3, r2
 80186c2:	009b      	lsls	r3, r3, #2
 80186c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80186c6:	4413      	add	r3, r2
 80186c8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80186cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80186d0:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80186d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d6:	3301      	adds	r3, #1
 80186d8:	627b      	str	r3, [r7, #36]	; 0x24
 80186da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186dc:	69bb      	ldr	r3, [r7, #24]
 80186de:	429a      	cmp	r2, r3
 80186e0:	dbde      	blt.n	80186a0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 80186e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186e4:	3301      	adds	r3, #1
 80186e6:	637b      	str	r3, [r7, #52]	; 0x34
 80186e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80186ea:	69fb      	ldr	r3, [r7, #28]
 80186ec:	429a      	cmp	r2, r3
 80186ee:	f6ff af75 	blt.w	80185dc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80186f2:	bf00      	nop
 80186f4:	bf00      	nop
 80186f6:	3738      	adds	r7, #56	; 0x38
 80186f8:	46bd      	mov	sp, r7
 80186fa:	ecbd 8b02 	vpop	{d8}
 80186fe:	bd80      	pop	{r7, pc}

08018700 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8018700:	b580      	push	{r7, lr}
 8018702:	b084      	sub	sp, #16
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018710:	2b00      	cmp	r3, #0
 8018712:	d101      	bne.n	8018718 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018714:	f003 fcf6 	bl	801c104 <abort>
  return context->AllocatePersistentBuffer(context,
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801871c:	2140      	movs	r1, #64	; 0x40
 801871e:	68f8      	ldr	r0, [r7, #12]
 8018720:	4798      	blx	r3
 8018722:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 8018724:	4618      	mov	r0, r3
 8018726:	3710      	adds	r7, #16
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801872c:	b590      	push	{r4, r7, lr}
 801872e:	b09d      	sub	sp, #116	; 0x74
 8018730:	af04      	add	r7, sp, #16
 8018732:	6078      	str	r0, [r7, #4]
 8018734:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f7ff f835 	bl	80177a6 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 801873c:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801873e:	6838      	ldr	r0, [r7, #0]
 8018740:	f7fe fa2e 	bl	8016ba0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8018744:	4603      	mov	r3, r0
 8018746:	2b01      	cmp	r3, #1
 8018748:	bf14      	ite	ne
 801874a:	2301      	movne	r3, #1
 801874c:	2300      	moveq	r3, #0
 801874e:	b2db      	uxtb	r3, r3
 8018750:	2b00      	cmp	r3, #0
 8018752:	d013      	beq.n	801877c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	691c      	ldr	r4, [r3, #16]
 8018758:	6838      	ldr	r0, [r7, #0]
 801875a:	f7fe fa21 	bl	8016ba0 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801875e:	4603      	mov	r3, r0
 8018760:	2201      	movs	r2, #1
 8018762:	9203      	str	r2, [sp, #12]
 8018764:	9302      	str	r3, [sp, #8]
 8018766:	4b6c      	ldr	r3, [pc, #432]	; (8018918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8018768:	9301      	str	r3, [sp, #4]
 801876a:	4b6c      	ldr	r3, [pc, #432]	; (801891c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	2334      	movs	r3, #52	; 0x34
 8018770:	4a6b      	ldr	r2, [pc, #428]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018772:	496c      	ldr	r1, [pc, #432]	; (8018924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8018774:	6878      	ldr	r0, [r7, #4]
 8018776:	47a0      	blx	r4
 8018778:	2401      	movs	r4, #1
 801877a:	e0c8      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801877c:	6838      	ldr	r0, [r7, #0]
 801877e:	f7fe fa22 	bl	8016bc6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8018782:	4603      	mov	r3, r0
 8018784:	2b01      	cmp	r3, #1
 8018786:	bf14      	ite	ne
 8018788:	2301      	movne	r3, #1
 801878a:	2300      	moveq	r3, #0
 801878c:	b2db      	uxtb	r3, r3
 801878e:	2b00      	cmp	r3, #0
 8018790:	d013      	beq.n	80187ba <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	691c      	ldr	r4, [r3, #16]
 8018796:	6838      	ldr	r0, [r7, #0]
 8018798:	f7fe fa15 	bl	8016bc6 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801879c:	4603      	mov	r3, r0
 801879e:	2201      	movs	r2, #1
 80187a0:	9203      	str	r2, [sp, #12]
 80187a2:	9302      	str	r3, [sp, #8]
 80187a4:	4b5c      	ldr	r3, [pc, #368]	; (8018918 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 80187a6:	9301      	str	r3, [sp, #4]
 80187a8:	4b5f      	ldr	r3, [pc, #380]	; (8018928 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	2335      	movs	r3, #53	; 0x35
 80187ae:	4a5c      	ldr	r2, [pc, #368]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80187b0:	495c      	ldr	r1, [pc, #368]	; (8018924 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	47a0      	blx	r4
 80187b6:	2401      	movs	r4, #1
 80187b8:	e0a9      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 80187ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	3318      	adds	r3, #24
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2200      	movs	r2, #0
 80187c4:	6839      	ldr	r1, [r7, #0]
 80187c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80187c8:	4798      	blx	r3
 80187ca:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 80187cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d10a      	bne.n	80187e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	691c      	ldr	r4, [r3, #16]
 80187d6:	4b55      	ldr	r3, [pc, #340]	; (801892c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	2337      	movs	r3, #55	; 0x37
 80187dc:	4a50      	ldr	r2, [pc, #320]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80187de:	4954      	ldr	r1, [pc, #336]	; (8018930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	47a0      	blx	r4
 80187e4:	2401      	movs	r4, #1
 80187e6:	e092      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80187e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80187ea:	f7fe f9cc 	bl	8016b86 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	bfd4      	ite	le
 80187f4:	2301      	movle	r3, #1
 80187f6:	2300      	movgt	r3, #0
 80187f8:	b2db      	uxtb	r3, r3
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d00a      	beq.n	8018814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	691c      	ldr	r4, [r3, #16]
 8018802:	4b4c      	ldr	r3, [pc, #304]	; (8018934 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 8018804:	9300      	str	r3, [sp, #0]
 8018806:	2338      	movs	r3, #56	; 0x38
 8018808:	4a45      	ldr	r2, [pc, #276]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801880a:	4949      	ldr	r1, [pc, #292]	; (8018930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	47a0      	blx	r4
 8018810:	2401      	movs	r4, #1
 8018812:	e07c      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 8018814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	331c      	adds	r3, #28
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	2200      	movs	r2, #0
 801881e:	6839      	ldr	r1, [r7, #0]
 8018820:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018822:	4798      	blx	r3
 8018824:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 8018826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018828:	2b00      	cmp	r3, #0
 801882a:	d10a      	bne.n	8018842 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	691c      	ldr	r4, [r3, #16]
 8018830:	4b41      	ldr	r3, [pc, #260]	; (8018938 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8018832:	9300      	str	r3, [sp, #0]
 8018834:	233a      	movs	r3, #58	; 0x3a
 8018836:	4a3a      	ldr	r2, [pc, #232]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018838:	493d      	ldr	r1, [pc, #244]	; (8018930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	47a0      	blx	r4
 801883e:	2401      	movs	r4, #1
 8018840:	e065      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	691b      	ldr	r3, [r3, #16]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d10a      	bne.n	8018860 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	691c      	ldr	r4, [r3, #16]
 801884e:	4b3b      	ldr	r3, [pc, #236]	; (801893c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8018850:	9300      	str	r3, [sp, #0]
 8018852:	233c      	movs	r3, #60	; 0x3c
 8018854:	4a32      	ldr	r2, [pc, #200]	; (8018920 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018856:	4936      	ldr	r1, [pc, #216]	; (8018930 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	47a0      	blx	r4
 801885c:	2401      	movs	r4, #1
 801885e:	e056      	b.n	801890e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	691b      	ldr	r3, [r3, #16]
 8018864:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	695b      	ldr	r3, [r3, #20]
 801886a:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 801886c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801886e:	9300      	str	r3, [sp, #0]
 8018870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018872:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018874:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f000 f920 	bl	8018abc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801887c:	4603      	mov	r3, r0
 801887e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8018882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018888:	4618      	mov	r0, r3
 801888a:	f7fe f95e 	bl	8016b4a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 801888e:	f107 030c 	add.w	r3, r7, #12
 8018892:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018894:	4618      	mov	r0, r3
 8018896:	f7fe f958 	bl	8016b4a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801889a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801889e:	4618      	mov	r0, r3
 80188a0:	f7fe fd54 	bl	801734c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80188a4:	4603      	mov	r3, r0
 80188a6:	3b01      	subs	r3, #1
 80188a8:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80188aa:	f107 020c 	add.w	r2, r7, #12
 80188ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80188b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7ff fe43 	bl	8018540 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80188ba:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80188bc:	f107 020c 	add.w	r2, r7, #12
 80188c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80188c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80188c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80188c8:	f7ff f86e 	bl	80179a8 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80188cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 80188ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80188d2:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 80188d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80188d8:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 80188da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	3324      	adds	r3, #36	; 0x24
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80188e4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80188e6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80188e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	3324      	adds	r3, #36	; 0x24
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80188f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80188f4:	4798      	blx	r3
  return ret_val;
 80188f6:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 80188fa:	f107 030c 	add.w	r3, r7, #12
 80188fe:	4618      	mov	r0, r3
 8018900:	f7fe f8c5 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
 8018904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018908:	4618      	mov	r0, r3
 801890a:	f7fe f8c0 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
 801890e:	4623      	mov	r3, r4
 8018910:	4618      	mov	r0, r3
 8018912:	3764      	adds	r7, #100	; 0x64
 8018914:	46bd      	mov	sp, r7
 8018916:	bd90      	pop	{r4, r7, pc}
 8018918:	08021608 	.word	0x08021608
 801891c:	0802160c 	.word	0x0802160c
 8018920:	0802155c 	.word	0x0802155c
 8018924:	080215ec 	.word	0x080215ec
 8018928:	0802161c 	.word	0x0802161c
 801892c:	08021648 	.word	0x08021648
 8018930:	08021630 	.word	0x08021630
 8018934:	0802165c 	.word	0x0802165c
 8018938:	08021678 	.word	0x08021678
 801893c:	0802168c 	.word	0x0802168c

08018940 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8018940:	b5b0      	push	{r4, r5, r7, lr}
 8018942:	b0aa      	sub	sp, #168	; 0xa8
 8018944:	af02      	add	r7, sp, #8
 8018946:	6078      	str	r0, [r7, #4]
 8018948:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801894a:	2200      	movs	r2, #0
 801894c:	6839      	ldr	r1, [r7, #0]
 801894e:	6878      	ldr	r0, [r7, #4]
 8018950:	f7ff fd5b 	bl	801840a <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018954:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8018958:	2200      	movs	r2, #0
 801895a:	6839      	ldr	r1, [r7, #0]
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7ff fd64 	bl	801842a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018962:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8018966:	683b      	ldr	r3, [r7, #0]
 8018968:	691b      	ldr	r3, [r3, #16]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d101      	bne.n	8018972 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 801896e:	f003 fbc9 	bl	801c104 <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8018976:	f107 0410 	add.w	r4, r7, #16
 801897a:	461d      	mov	r5, r3
 801897c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801897e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018988:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801898c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8018990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018994:	7a1b      	ldrb	r3, [r3, #8]
 8018996:	2b09      	cmp	r3, #9
 8018998:	d034      	beq.n	8018a04 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 801899a:	2b09      	cmp	r3, #9
 801899c:	dc5c      	bgt.n	8018a58 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 801899e:	2b01      	cmp	r3, #1
 80189a0:	d002      	beq.n	80189a8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 80189a2:	2b07      	cmp	r3, #7
 80189a4:	d043      	beq.n	8018a2e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 80189a6:	e057      	b.n	8018a58 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 80189a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80189ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7ff fd5a 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80189b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80189ba:	f7fe ff16 	bl	80177ea <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80189be:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 80189c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80189c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80189c8:	4618      	mov	r0, r3
 80189ca:	f7ff fd4e 	bl	801846a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 80189ce:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80189d2:	f7fe ff19 	bl	8017808 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80189d6:	4602      	mov	r2, r0
 80189d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80189dc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80189e0:	f107 0010 	add.w	r0, r7, #16
 80189e4:	9200      	str	r2, [sp, #0]
 80189e6:	4622      	mov	r2, r4
 80189e8:	f7ff fdd9 	bl	801859e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 80189ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7fe f84c 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 80189f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fe f847 	bl	8016a8e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8018a00:	2300      	movs	r3, #0
 8018a02:	e03d      	b.n	8018a80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a08:	7a1b      	ldrb	r3, [r3, #8]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7fd ff96 	bl	801693c <TfLiteTypeGetName>
 8018a10:	4603      	mov	r3, r0
 8018a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018a16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a1a:	f103 0208 	add.w	r2, r3, #8
 8018a1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018a22:	4619      	mov	r1, r3
 8018a24:	4818      	ldr	r0, [pc, #96]	; (8018a88 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018a26:	f7fe ffb3 	bl	8017990 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	e028      	b.n	8018a80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a32:	7a1b      	ldrb	r3, [r3, #8]
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7fd ff81 	bl	801693c <TfLiteTypeGetName>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a44:	f103 0208 	add.w	r2, r3, #8
 8018a48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018a4c:	4619      	mov	r1, r3
 8018a4e:	480e      	ldr	r0, [pc, #56]	; (8018a88 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018a50:	f7fe ff9e 	bl	8017990 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018a54:	2301      	movs	r3, #1
 8018a56:	e013      	b.n	8018a80 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a5c:	7a1b      	ldrb	r3, [r3, #8]
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f7fd ff6c 	bl	801693c <TfLiteTypeGetName>
 8018a64:	4603      	mov	r3, r0
 8018a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018a6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018a6e:	f103 0208 	add.w	r2, r3, #8
 8018a72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018a76:	4619      	mov	r1, r3
 8018a78:	4803      	ldr	r0, [pc, #12]	; (8018a88 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018a7a:	f7fe ff89 	bl	8017990 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018a7e:	2301      	movs	r3, #1
  }
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	37a0      	adds	r7, #160	; 0xa0
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bdb0      	pop	{r4, r5, r7, pc}
 8018a88:	080216a8 	.word	0x080216a8

08018a8c <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af02      	add	r7, sp, #8
 8018a92:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8018a94:	6878      	ldr	r0, [r7, #4]
 8018a96:	2300      	movs	r3, #0
 8018a98:	9300      	str	r3, [sp, #0]
 8018a9a:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 8018a9c:	4a05      	ldr	r2, [pc, #20]	; (8018ab4 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8018a9e:	4906      	ldr	r1, [pc, #24]	; (8018ab8 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8018aa0:	f7ff fc5a 	bl	8018358 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8018aa4:	bf00      	nop
}
 8018aa6:	6878      	ldr	r0, [r7, #4]
 8018aa8:	3708      	adds	r7, #8
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	08018941 	.word	0x08018941
 8018ab4:	0801872d 	.word	0x0801872d
 8018ab8:	08018701 	.word	0x08018701

08018abc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8018abc:	b5b0      	push	{r4, r5, r7, lr}
 8018abe:	b08a      	sub	sp, #40	; 0x28
 8018ac0:	af04      	add	r7, sp, #16
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
 8018ac8:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	781b      	ldrb	r3, [r3, #0]
 8018ace:	2b09      	cmp	r3, #9
 8018ad0:	d003      	beq.n	8018ada <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	2b07      	cmp	r3, #7
 8018ad8:	d121      	bne.n	8018b1e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	2b07      	cmp	r3, #7
 8018ae0:	d10e      	bne.n	8018b00 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	691c      	ldr	r4, [r3, #16]
 8018ae6:	68bb      	ldr	r3, [r7, #8]
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7fd ff26 	bl	801693c <TfLiteTypeGetName>
 8018af0:	4602      	mov	r2, r0
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	492e      	ldr	r1, [pc, #184]	; (8018bb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8018af8:	68f8      	ldr	r0, [r7, #12]
 8018afa:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018afc:	2301      	movs	r3, #1
 8018afe:	e053      	b.n	8018ba8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	691c      	ldr	r4, [r3, #16]
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7fd ff17 	bl	801693c <TfLiteTypeGetName>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	4926      	ldr	r1, [pc, #152]	; (8018bb0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8018b16:	68f8      	ldr	r0, [r7, #12]
 8018b18:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	e044      	b.n	8018ba8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	781b      	ldrb	r3, [r3, #0]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d018      	beq.n	8018b58 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	691c      	ldr	r4, [r3, #16]
 8018b2a:	68bb      	ldr	r3, [r7, #8]
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f7fd ff04 	bl	801693c <TfLiteTypeGetName>
 8018b34:	4605      	mov	r5, r0
 8018b36:	2001      	movs	r0, #1
 8018b38:	f7fd ff00 	bl	801693c <TfLiteTypeGetName>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	9303      	str	r3, [sp, #12]
 8018b40:	9502      	str	r5, [sp, #8]
 8018b42:	4b1c      	ldr	r3, [pc, #112]	; (8018bb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8018b44:	9301      	str	r3, [sp, #4]
 8018b46:	4b1c      	ldr	r3, [pc, #112]	; (8018bb8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	23a0      	movs	r3, #160	; 0xa0
 8018b4c:	4a1b      	ldr	r2, [pc, #108]	; (8018bbc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8018b4e:	491c      	ldr	r1, [pc, #112]	; (8018bc0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8018b50:	68f8      	ldr	r0, [r7, #12]
 8018b52:	47a0      	blx	r4
 8018b54:	2301      	movs	r3, #1
 8018b56:	e027      	b.n	8018ba8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	2b01      	cmp	r3, #1
 8018b5e:	d018      	beq.n	8018b92 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	691c      	ldr	r4, [r3, #16]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7fd fee7 	bl	801693c <TfLiteTypeGetName>
 8018b6e:	4605      	mov	r5, r0
 8018b70:	2001      	movs	r0, #1
 8018b72:	f7fd fee3 	bl	801693c <TfLiteTypeGetName>
 8018b76:	4603      	mov	r3, r0
 8018b78:	9303      	str	r3, [sp, #12]
 8018b7a:	9502      	str	r5, [sp, #8]
 8018b7c:	4b0d      	ldr	r3, [pc, #52]	; (8018bb4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8018b7e:	9301      	str	r3, [sp, #4]
 8018b80:	4b10      	ldr	r3, [pc, #64]	; (8018bc4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8018b82:	9300      	str	r3, [sp, #0]
 8018b84:	23a1      	movs	r3, #161	; 0xa1
 8018b86:	4a0d      	ldr	r2, [pc, #52]	; (8018bbc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8018b88:	490d      	ldr	r1, [pc, #52]	; (8018bc0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8018b8a:	68f8      	ldr	r0, [r7, #12]
 8018b8c:	47a0      	blx	r4
 8018b8e:	2301      	movs	r3, #1
 8018b90:	e00a      	b.n	8018ba8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	4618      	mov	r0, r3
 8018b98:	f7e7 fd06 	bl	80005a8 <__aeabi_f2d>
 8018b9c:	4602      	mov	r2, r0
 8018b9e:	460b      	mov	r3, r1
 8018ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018ba2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8018ba6:	2300      	movs	r3, #0
}
 8018ba8:	4618      	mov	r0, r3
 8018baa:	3718      	adds	r7, #24
 8018bac:	46bd      	mov	sp, r7
 8018bae:	bdb0      	pop	{r4, r5, r7, pc}
 8018bb0:	08021844 	.word	0x08021844
 8018bb4:	0802187c 	.word	0x0802187c
 8018bb8:	08021818 	.word	0x08021818
 8018bbc:	080216c4 	.word	0x080216c4
 8018bc0:	08021860 	.word	0x08021860
 8018bc4:	08021808 	.word	0x08021808

08018bc8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8018bc8:	b480      	push	{r7}
 8018bca:	b085      	sub	sp, #20
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
 8018bd0:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 8018be0:	4a1d      	ldr	r2, [pc, #116]	; (8018c58 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	011b      	lsls	r3, r3, #4
 8018be6:	4413      	add	r3, r2
 8018be8:	781a      	ldrb	r2, [r3, #0]
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 8018bee:	4a1a      	ldr	r2, [pc, #104]	; (8018c58 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	011b      	lsls	r3, r3, #4
 8018bf4:	4413      	add	r3, r2
 8018bf6:	330c      	adds	r3, #12
 8018bf8:	681a      	ldr	r2, [r3, #0]
 8018bfa:	683b      	ldr	r3, [r7, #0]
 8018bfc:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 8018bfe:	4a16      	ldr	r2, [pc, #88]	; (8018c58 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	011b      	lsls	r3, r3, #4
 8018c04:	4413      	add	r3, r2
 8018c06:	3308      	adds	r3, #8
 8018c08:	681a      	ldr	r2, [r3, #0]
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	7d1b      	ldrb	r3, [r3, #20]
 8018c12:	2b02      	cmp	r3, #2
 8018c14:	d10e      	bne.n	8018c34 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8018c16:	4a10      	ldr	r2, [pc, #64]	; (8018c58 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	011b      	lsls	r3, r3, #4
 8018c1c:	4413      	add	r3, r2
 8018c1e:	3304      	adds	r3, #4
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	461a      	mov	r2, r3
 8018c24:	4b0d      	ldr	r3, [pc, #52]	; (8018c5c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	4413      	add	r3, r2
 8018c2a:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	68fa      	ldr	r2, [r7, #12]
 8018c30:	605a      	str	r2, [r3, #4]
 8018c32:	e007      	b.n	8018c44 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8018c34:	4a08      	ldr	r2, [pc, #32]	; (8018c58 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	011b      	lsls	r3, r3, #4
 8018c3a:	4413      	add	r3, r2
 8018c3c:	3304      	adds	r3, #4
 8018c3e:	681a      	ldr	r2, [r3, #0]
 8018c40:	683b      	ldr	r3, [r7, #0]
 8018c42:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	2200      	movs	r2, #0
 8018c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 8018c4c:	bf00      	nop
 8018c4e:	3714      	adds	r7, #20
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr
 8018c58:	20000fa4 	.word	0x20000fa4
 8018c5c:	2000133c 	.word	0x2000133c

08018c60 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8018c60:	b480      	push	{r7}
 8018c62:	b085      	sub	sp, #20
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	2201      	movs	r2, #1
 8018c6e:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8018c70:	4a16      	ldr	r2, [pc, #88]	; (8018ccc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	011b      	lsls	r3, r3, #4
 8018c76:	4413      	add	r3, r2
 8018c78:	3308      	adds	r3, #8
 8018c7a:	681a      	ldr	r2, [r3, #0]
 8018c7c:	683b      	ldr	r3, [r7, #0]
 8018c7e:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8018c80:	4a12      	ldr	r2, [pc, #72]	; (8018ccc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	011b      	lsls	r3, r3, #4
 8018c86:	4413      	add	r3, r2
 8018c88:	781b      	ldrb	r3, [r3, #0]
 8018c8a:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 8018c8c:	7bfb      	ldrb	r3, [r7, #15]
 8018c8e:	2b02      	cmp	r3, #2
 8018c90:	d10e      	bne.n	8018cb0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8018c92:	4a0e      	ldr	r2, [pc, #56]	; (8018ccc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	011b      	lsls	r3, r3, #4
 8018c98:	4413      	add	r3, r2
 8018c9a:	3304      	adds	r3, #4
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	4b0b      	ldr	r3, [pc, #44]	; (8018cd0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	4413      	add	r3, r2
 8018ca6:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	68ba      	ldr	r2, [r7, #8]
 8018cac:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 8018cae:	e007      	b.n	8018cc0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8018cb0:	4a06      	ldr	r2, [pc, #24]	; (8018ccc <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	011b      	lsls	r3, r3, #4
 8018cb6:	4413      	add	r3, r2
 8018cb8:	3304      	adds	r3, #4
 8018cba:	681a      	ldr	r2, [r3, #0]
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	601a      	str	r2, [r3, #0]
}
 8018cc0:	bf00      	nop
 8018cc2:	3714      	adds	r7, #20
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr
 8018ccc:	20000fa4 	.word	0x20000fa4
 8018cd0:	2000133c 	.word	0x2000133c

08018cd4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b084      	sub	sp, #16
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
 8018cdc:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	f003 030f 	and.w	r3, r3, #15
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d005      	beq.n	8018cf4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	f003 030f 	and.w	r3, r3, #15
 8018cee:	f1c3 0310 	rsb	r3, r3, #16
 8018cf2:	e000      	b.n	8018cf6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 8018cf8:	4b29      	ldr	r3, [pc, #164]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	6839      	ldr	r1, [r7, #0]
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	440b      	add	r3, r1
 8018d02:	425b      	negs	r3, r3
 8018d04:	441a      	add	r2, r3
 8018d06:	4b27      	ldr	r3, [pc, #156]	; (8018da4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d224      	bcs.n	8018d58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8018d0e:	4b26      	ldr	r3, [pc, #152]	; (8018da8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	2b09      	cmp	r3, #9
 8018d14:	d906      	bls.n	8018d24 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	4619      	mov	r1, r3
 8018d1a:	4824      	ldr	r0, [pc, #144]	; (8018dac <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 8018d1c:	f7f0 f87a 	bl	8008e14 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8018d20:	2300      	movs	r3, #0
 8018d22:	e039      	b.n	8018d98 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8018d24:	2101      	movs	r1, #1
 8018d26:	6838      	ldr	r0, [r7, #0]
 8018d28:	f7fd fdd2 	bl	80168d0 <_Z9ei_callocjj>
 8018d2c:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 8018d2e:	68bb      	ldr	r3, [r7, #8]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d106      	bne.n	8018d42 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	4619      	mov	r1, r3
 8018d38:	481d      	ldr	r0, [pc, #116]	; (8018db0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 8018d3a:	f7f0 f86b 	bl	8008e14 <_Z9ei_printfPKcz>
      return NULL;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	e02a      	b.n	8018d98 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8018d42:	4b19      	ldr	r3, [pc, #100]	; (8018da8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	1c5a      	adds	r2, r3, #1
 8018d48:	4917      	ldr	r1, [pc, #92]	; (8018da8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018d4a:	600a      	str	r2, [r1, #0]
 8018d4c:	4919      	ldr	r1, [pc, #100]	; (8018db4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 8018d4e:	68ba      	ldr	r2, [r7, #8]
 8018d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	e01f      	b.n	8018d98 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 8018d58:	4b11      	ldr	r3, [pc, #68]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	425b      	negs	r3, r3
 8018d60:	4413      	add	r3, r2
 8018d62:	4a0f      	ldr	r2, [pc, #60]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d64:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 8018d66:	4b0e      	ldr	r3, [pc, #56]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	3b0f      	subs	r3, #15
 8018d6c:	4a0c      	ldr	r2, [pc, #48]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d6e:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 8018d70:	4b0b      	ldr	r3, [pc, #44]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d72:	681a      	ldr	r2, [r3, #0]
 8018d74:	4b0a      	ldr	r3, [pc, #40]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	f003 030f 	and.w	r3, r3, #15
 8018d7c:	f1c3 0310 	rsb	r3, r3, #16
 8018d80:	4413      	add	r3, r2
 8018d82:	4a07      	ldr	r2, [pc, #28]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d84:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8018d86:	4b06      	ldr	r3, [pc, #24]	; (8018da0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 8018d8c:	683a      	ldr	r2, [r7, #0]
 8018d8e:	2100      	movs	r1, #0
 8018d90:	68b8      	ldr	r0, [r7, #8]
 8018d92:	f004 fa57 	bl	801d244 <memset>

  return ptr;
 8018d96:	68bb      	ldr	r3, [r7, #8]
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3710      	adds	r7, #16
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	20001344 	.word	0x20001344
 8018da4:	20001340 	.word	0x20001340
 8018da8:	20001564 	.word	0x20001564
 8018dac:	08021914 	.word	0x08021914
 8018db0:	08021994 	.word	0x08021994
 8018db4:	2000153c 	.word	0x2000153c

08018db8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b086      	sub	sp, #24
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	60f8      	str	r0, [r7, #12]
 8018dc0:	60b9      	str	r1, [r7, #8]
 8018dc2:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8018dc4:	4b1b      	ldr	r3, [pc, #108]	; (8018e34 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	2b03      	cmp	r3, #3
 8018dca:	d906      	bls.n	8018dda <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8018dcc:	68bb      	ldr	r3, [r7, #8]
 8018dce:	4619      	mov	r1, r3
 8018dd0:	4819      	ldr	r0, [pc, #100]	; (8018e38 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 8018dd2:	f7f0 f81f 	bl	8008e14 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	e028      	b.n	8018e2c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 8018dde:	693b      	ldr	r3, [r7, #16]
 8018de0:	4619      	mov	r1, r3
 8018de2:	68f8      	ldr	r0, [r7, #12]
 8018de4:	f7ff ff76 	bl	8018cd4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8018de8:	4603      	mov	r3, r0
 8018dea:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d106      	bne.n	8018e00 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	4619      	mov	r1, r3
 8018df6:	4811      	ldr	r0, [pc, #68]	; (8018e3c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 8018df8:	f7f0 f80c 	bl	8008e14 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	e015      	b.n	8018e2c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8018e00:	4b0c      	ldr	r3, [pc, #48]	; (8018e34 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a0e      	ldr	r2, [pc, #56]	; (8018e40 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 8018e06:	00db      	lsls	r3, r3, #3
 8018e08:	4413      	add	r3, r2
 8018e0a:	f107 0210 	add.w	r2, r7, #16
 8018e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e12:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8018e16:	4b07      	ldr	r3, [pc, #28]	; (8018e34 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	461a      	mov	r2, r3
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8018e20:	4b04      	ldr	r3, [pc, #16]	; (8018e34 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	3301      	adds	r3, #1
 8018e26:	4a03      	ldr	r2, [pc, #12]	; (8018e34 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018e28:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8018e2a:	2300      	movs	r3, #0
}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	3718      	adds	r7, #24
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bd80      	pop	{r7, pc}
 8018e34:	20001588 	.word	0x20001588
 8018e38:	080219cc 	.word	0x080219cc
 8018e3c:	08021a24 	.word	0x08021a24
 8018e40:	20001568 	.word	0x20001568

08018e44 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 8018e44:	b480      	push	{r7}
 8018e46:	b083      	sub	sp, #12
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8018e4e:	4b09      	ldr	r3, [pc, #36]	; (8018e74 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	461a      	mov	r2, r3
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	4293      	cmp	r3, r2
 8018e58:	dd01      	ble.n	8018e5e <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	e004      	b.n	8018e68 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8018e5e:	4a06      	ldr	r2, [pc, #24]	; (8018e78 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	00db      	lsls	r3, r3, #3
 8018e64:	4413      	add	r3, r2
 8018e66:	685b      	ldr	r3, [r3, #4]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	370c      	adds	r7, #12
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e72:	4770      	bx	lr
 8018e74:	20001588 	.word	0x20001588
 8018e78:	20001568 	.word	0x20001568

08018e7c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 8018e7c:	b480      	push	{r7}
 8018e7e:	b083      	sub	sp, #12
 8018e80:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8018e82:	2300      	movs	r3, #0
 8018e84:	607b      	str	r3, [r7, #4]
 8018e86:	e00d      	b.n	8018ea4 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 8018e88:	4914      	ldr	r1, [pc, #80]	; (8018edc <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	4613      	mov	r3, r2
 8018e8e:	011b      	lsls	r3, r3, #4
 8018e90:	4413      	add	r3, r2
 8018e92:	009b      	lsls	r3, r3, #2
 8018e94:	440b      	add	r3, r1
 8018e96:	3340      	adds	r3, #64	; 0x40
 8018e98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018e9c:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	3301      	adds	r3, #1
 8018ea2:	607b      	str	r3, [r7, #4]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b03      	cmp	r3, #3
 8018ea8:	d9ee      	bls.n	8018e88 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8018eaa:	2300      	movs	r3, #0
 8018eac:	603b      	str	r3, [r7, #0]
 8018eae:	e00a      	b.n	8018ec6 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 8018eb0:	4a0b      	ldr	r2, [pc, #44]	; (8018ee0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	011b      	lsls	r3, r3, #4
 8018eb6:	4413      	add	r3, r2
 8018eb8:	330c      	adds	r3, #12
 8018eba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018ebe:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8018ec0:	683b      	ldr	r3, [r7, #0]
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	603b      	str	r3, [r7, #0]
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	2b03      	cmp	r3, #3
 8018eca:	d9f1      	bls.n	8018eb0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 8018ecc:	bf00      	nop
 8018ece:	bf00      	nop
 8018ed0:	370c      	adds	r7, #12
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed8:	4770      	bx	lr
 8018eda:	bf00      	nop
 8018edc:	200013a0 	.word	0x200013a0
 8018ee0:	200014b0 	.word	0x200014b0

08018ee4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b084      	sub	sp, #16
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8018eee:	4b2e      	ldr	r3, [pc, #184]	; (8018fa8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	4a2e      	ldr	r2, [pc, #184]	; (8018fac <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 8018ef4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	4413      	add	r3, r2
 8018efc:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8018efe:	2300      	movs	r3, #0
 8018f00:	60fb      	str	r3, [r7, #12]
 8018f02:	e045      	b.n	8018f90 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 8018f04:	492a      	ldr	r1, [pc, #168]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f06:	68fa      	ldr	r2, [r7, #12]
 8018f08:	4613      	mov	r3, r2
 8018f0a:	011b      	lsls	r3, r3, #4
 8018f0c:	4413      	add	r3, r2
 8018f0e:	009b      	lsls	r3, r3, #2
 8018f10:	440b      	add	r3, r1
 8018f12:	3340      	adds	r3, #64	; 0x40
 8018f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f18:	461a      	mov	r2, r3
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d107      	bne.n	8018f30 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 8018f20:	68fa      	ldr	r2, [r7, #12]
 8018f22:	4613      	mov	r3, r2
 8018f24:	011b      	lsls	r3, r3, #4
 8018f26:	4413      	add	r3, r2
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	4a21      	ldr	r2, [pc, #132]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f2c:	4413      	add	r3, r2
 8018f2e:	e037      	b.n	8018fa0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 8018f30:	491f      	ldr	r1, [pc, #124]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f32:	68fa      	ldr	r2, [r7, #12]
 8018f34:	4613      	mov	r3, r2
 8018f36:	011b      	lsls	r3, r3, #4
 8018f38:	4413      	add	r3, r2
 8018f3a:	009b      	lsls	r3, r3, #2
 8018f3c:	440b      	add	r3, r1
 8018f3e:	3340      	adds	r3, #64	; 0x40
 8018f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018f48:	4293      	cmp	r3, r2
 8018f4a:	d11e      	bne.n	8018f8a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 8018f4c:	6838      	ldr	r0, [r7, #0]
 8018f4e:	68fa      	ldr	r2, [r7, #12]
 8018f50:	4613      	mov	r3, r2
 8018f52:	011b      	lsls	r3, r3, #4
 8018f54:	4413      	add	r3, r2
 8018f56:	009b      	lsls	r3, r3, #2
 8018f58:	4a15      	ldr	r2, [pc, #84]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f5a:	4413      	add	r3, r2
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	f7ff fe33 	bl	8018bc8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	b218      	sxth	r0, r3
 8018f66:	4912      	ldr	r1, [pc, #72]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f68:	68fa      	ldr	r2, [r7, #12]
 8018f6a:	4613      	mov	r3, r2
 8018f6c:	011b      	lsls	r3, r3, #4
 8018f6e:	4413      	add	r3, r2
 8018f70:	009b      	lsls	r3, r3, #2
 8018f72:	440b      	add	r3, r1
 8018f74:	3340      	adds	r3, #64	; 0x40
 8018f76:	4602      	mov	r2, r0
 8018f78:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	011b      	lsls	r3, r3, #4
 8018f80:	4413      	add	r3, r2
 8018f82:	009b      	lsls	r3, r3, #2
 8018f84:	4a0a      	ldr	r2, [pc, #40]	; (8018fb0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8018f86:	4413      	add	r3, r2
 8018f88:	e00a      	b.n	8018fa0 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	3301      	adds	r3, #1
 8018f8e:	60fb      	str	r3, [r7, #12]
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	2b03      	cmp	r3, #3
 8018f94:	d9b6      	bls.n	8018f04 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 8018f96:	2104      	movs	r1, #4
 8018f98:	4806      	ldr	r0, [pc, #24]	; (8018fb4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 8018f9a:	f7ef ff3b 	bl	8008e14 <_Z9ei_printfPKcz>
  return nullptr;
 8018f9e:	2300      	movs	r3, #0
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3710      	adds	r7, #16
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}
 8018fa8:	20001538 	.word	0x20001538
 8018fac:	08027b6c 	.word	0x08027b6c
 8018fb0:	200013a0 	.word	0x200013a0
 8018fb4:	08021a58 	.word	0x08021a58

08018fb8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b084      	sub	sp, #16
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
 8018fc0:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8018fc2:	4b25      	ldr	r3, [pc, #148]	; (8019058 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	4a25      	ldr	r2, [pc, #148]	; (801905c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 8018fc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	4413      	add	r3, r2
 8018fd0:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	60fb      	str	r3, [r7, #12]
 8018fd6:	e033      	b.n	8019040 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 8018fd8:	4a21      	ldr	r2, [pc, #132]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	011b      	lsls	r3, r3, #4
 8018fde:	4413      	add	r3, r2
 8018fe0:	330c      	adds	r3, #12
 8018fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fe6:	461a      	mov	r2, r3
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	4293      	cmp	r3, r2
 8018fec:	d104      	bne.n	8018ff8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	011b      	lsls	r3, r3, #4
 8018ff2:	4a1b      	ldr	r2, [pc, #108]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8018ff4:	4413      	add	r3, r2
 8018ff6:	e02b      	b.n	8019050 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 8018ff8:	4a19      	ldr	r2, [pc, #100]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	011b      	lsls	r3, r3, #4
 8018ffe:	4413      	add	r3, r2
 8019000:	330c      	adds	r3, #12
 8019002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019006:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801900a:	4293      	cmp	r3, r2
 801900c:	d115      	bne.n	801903a <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	011b      	lsls	r3, r3, #4
 8019012:	4a13      	ldr	r2, [pc, #76]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019014:	4413      	add	r3, r2
 8019016:	4619      	mov	r1, r3
 8019018:	6838      	ldr	r0, [r7, #0]
 801901a:	f7ff fe21 	bl	8018c60 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	b219      	sxth	r1, r3
 8019022:	4a0f      	ldr	r2, [pc, #60]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	011b      	lsls	r3, r3, #4
 8019028:	4413      	add	r3, r2
 801902a:	330c      	adds	r3, #12
 801902c:	460a      	mov	r2, r1
 801902e:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	011b      	lsls	r3, r3, #4
 8019034:	4a0a      	ldr	r2, [pc, #40]	; (8019060 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019036:	4413      	add	r3, r2
 8019038:	e00a      	b.n	8019050 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	3301      	adds	r3, #1
 801903e:	60fb      	str	r3, [r7, #12]
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	2b03      	cmp	r3, #3
 8019044:	d9c8      	bls.n	8018fd8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 8019046:	2104      	movs	r1, #4
 8019048:	4806      	ldr	r0, [pc, #24]	; (8019064 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 801904a:	f7ef fee3 	bl	8008e14 <_Z9ei_printfPKcz>
  return nullptr;
 801904e:	2300      	movs	r3, #0
}
 8019050:	4618      	mov	r0, r3
 8019052:	3710      	adds	r7, #16
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	20001538 	.word	0x20001538
 801905c:	08027b6c 	.word	0x08027b6c
 8019060:	200014b0 	.word	0x200014b0
 8019064:	08021a90 	.word	0x08021a90

08019068 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	6878      	ldr	r0, [r7, #4]
 8019072:	2300      	movs	r3, #0
 8019074:	2200      	movs	r2, #0
 8019076:	2100      	movs	r1, #0
 8019078:	f7fe fa1e 	bl	80174b8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 801907c:	4a03      	ldr	r2, [pc, #12]	; (801908c <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	601a      	str	r2, [r3, #0]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	4618      	mov	r0, r3
 8019086:	3708      	adds	r7, #8
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	08027b84 	.word	0x08027b84

08019090 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 8019090:	b580      	push	{r7, lr}
 8019092:	b082      	sub	sp, #8
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
 8019098:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 801909a:	6839      	ldr	r1, [r7, #0]
 801909c:	2000      	movs	r0, #0
 801909e:	f7ff fe19 	bl	8018cd4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 80190a2:	4603      	mov	r3, r0
  }
 80190a4:	4618      	mov	r0, r3
 80190a6:	3708      	adds	r7, #8
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}

080190ac <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b084      	sub	sp, #16
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	60f8      	str	r0, [r7, #12]
 80190b4:	60b9      	str	r1, [r7, #8]
 80190b6:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 80190b8:	687a      	ldr	r2, [r7, #4]
 80190ba:	68b9      	ldr	r1, [r7, #8]
 80190bc:	2000      	movs	r0, #0
 80190be:	f7ff fe7b 	bl	8018db8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 80190c2:	4603      	mov	r3, r0
  }
 80190c4:	4618      	mov	r0, r3
 80190c6:	3710      	adds	r7, #16
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b082      	sub	sp, #8
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
 80190d4:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 80190d6:	6839      	ldr	r1, [r7, #0]
 80190d8:	2000      	movs	r0, #0
 80190da:	f7ff feb3 	bl	8018e44 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 80190de:	4603      	mov	r3, r0
  }
 80190e0:	4618      	mov	r0, r3
 80190e2:	3708      	adds	r7, #8
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}

080190e8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b082      	sub	sp, #8
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
 80190f0:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 80190f2:	6839      	ldr	r1, [r7, #0]
 80190f4:	2000      	movs	r0, #0
 80190f6:	f7ff fef5 	bl	8018ee4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 80190fa:	4603      	mov	r3, r0
  }
 80190fc:	4618      	mov	r0, r3
 80190fe:	3708      	adds	r7, #8
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}

08019104 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8019104:	b480      	push	{r7}
 8019106:	b083      	sub	sp, #12
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
 801910c:	6039      	str	r1, [r7, #0]
    return;
 801910e:	bf00      	nop
  }
 8019110:	370c      	adds	r7, #12
 8019112:	46bd      	mov	sp, r7
 8019114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019118:	4770      	bx	lr

0801911a <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 801911a:	b580      	push	{r7, lr}
 801911c:	b082      	sub	sp, #8
 801911e:	af00      	add	r7, sp, #0
 8019120:	6078      	str	r0, [r7, #4]
 8019122:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 8019124:	6839      	ldr	r1, [r7, #0]
 8019126:	2000      	movs	r0, #0
 8019128:	f7ff ff46 	bl	8018fb8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 801912c:	4603      	mov	r3, r0
  }
 801912e:	4618      	mov	r0, r3
 8019130:	3708      	adds	r7, #8
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
	...

08019138 <_Z19tflite_learn_6_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8019138:	b5b0      	push	{r4, r5, r7, lr}
 801913a:	b0aa      	sub	sp, #168	; 0xa8
 801913c:	af00      	add	r7, sp, #0
 801913e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8019140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019142:	f44f 7144 	mov.w	r1, #784	; 0x310
 8019146:	2010      	movs	r0, #16
 8019148:	4798      	blx	r3
 801914a:	4603      	mov	r3, r0
 801914c:	4aa7      	ldr	r2, [pc, #668]	; (80193ec <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 801914e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8019150:	4ba6      	ldr	r3, [pc, #664]	; (80193ec <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d104      	bne.n	8019162 <_Z19tflite_learn_6_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8019158:	48a5      	ldr	r0, [pc, #660]	; (80193f0 <_Z19tflite_learn_6_initPFPvjjE+0x2b8>)
 801915a:	f7ef fe5b 	bl	8008e14 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801915e:	2401      	movs	r4, #1
 8019160:	e13f      	b.n	80193e2 <_Z19tflite_learn_6_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8019162:	4ba2      	ldr	r3, [pc, #648]	; (80193ec <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	4aa3      	ldr	r2, [pc, #652]	; (80193f4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019168:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801916a:	4ba0      	ldr	r3, [pc, #640]	; (80193ec <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8019172:	4aa1      	ldr	r2, [pc, #644]	; (80193f8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019174:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 8019176:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801917a:	4618      	mov	r0, r3
 801917c:	f7ff ff74 	bl	8019068 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 8019180:	4a9e      	ldr	r2, [pc, #632]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019182:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019186:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 8019188:	4b9c      	ldr	r3, [pc, #624]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801918a:	4a9d      	ldr	r2, [pc, #628]	; (8019400 <_Z19tflite_learn_6_initPFPvjjE+0x2c8>)
 801918c:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 801918e:	4b9b      	ldr	r3, [pc, #620]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019190:	4a9c      	ldr	r2, [pc, #624]	; (8019404 <_Z19tflite_learn_6_initPFPvjjE+0x2cc>)
 8019192:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 8019194:	4b99      	ldr	r3, [pc, #612]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019196:	4a9c      	ldr	r2, [pc, #624]	; (8019408 <_Z19tflite_learn_6_initPFPvjjE+0x2d0>)
 8019198:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 801919a:	4b98      	ldr	r3, [pc, #608]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801919c:	4a9b      	ldr	r2, [pc, #620]	; (801940c <_Z19tflite_learn_6_initPFPvjjE+0x2d4>)
 801919e:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 80191a0:	4b96      	ldr	r3, [pc, #600]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 80191a2:	4a9b      	ldr	r2, [pc, #620]	; (8019410 <_Z19tflite_learn_6_initPFPvjjE+0x2d8>)
 80191a4:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 80191a6:	4b95      	ldr	r3, [pc, #596]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 80191a8:	4a9a      	ldr	r2, [pc, #616]	; (8019414 <_Z19tflite_learn_6_initPFPvjjE+0x2dc>)
 80191aa:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 8;
 80191ac:	4b93      	ldr	r3, [pc, #588]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 80191ae:	2208      	movs	r2, #8
 80191b0:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 8; ++i) {
 80191b2:	2300      	movs	r3, #0
 80191b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80191b8:	e024      	b.n	8019204 <_Z19tflite_learn_6_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 80191ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80191be:	4619      	mov	r1, r3
 80191c0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80191c4:	f7ff fd00 	bl	8018bc8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 80191c8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80191cc:	2b02      	cmp	r3, #2
 80191ce:	d114      	bne.n	80191fa <_Z19tflite_learn_6_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 80191d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80191d2:	4991      	ldr	r1, [pc, #580]	; (8019418 <_Z19tflite_learn_6_initPFPvjjE+0x2e0>)
 80191d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80191d8:	011b      	lsls	r3, r3, #4
 80191da:	440b      	add	r3, r1
 80191dc:	330c      	adds	r3, #12
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	4413      	add	r3, r2
 80191e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 80191e6:	4b83      	ldr	r3, [pc, #524]	; (80193f4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80191ee:	429a      	cmp	r2, r3
 80191f0:	d903      	bls.n	80191fa <_Z19tflite_learn_6_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 80191f2:	4a80      	ldr	r2, [pc, #512]	; (80193f4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 80191f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80191f8:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 8; ++i) {
 80191fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80191fe:	3301      	adds	r3, #1
 8019200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019204:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019208:	2b07      	cmp	r3, #7
 801920a:	d9d6      	bls.n	80191ba <_Z19tflite_learn_6_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 801920c:	4b79      	ldr	r3, [pc, #484]	; (80193f4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 801920e:	681a      	ldr	r2, [r3, #0]
 8019210:	4b79      	ldr	r3, [pc, #484]	; (80193f8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	429a      	cmp	r2, r3
 8019216:	d904      	bls.n	8019222 <_Z19tflite_learn_6_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8019218:	4880      	ldr	r0, [pc, #512]	; (801941c <_Z19tflite_learn_6_initPFPvjjE+0x2e4>)
 801921a:	f7ef fdfb 	bl	8008e14 <_Z9ei_printfPKcz>
    return kTfLiteError;
 801921e:	2401      	movs	r4, #1
 8019220:	e0da      	b.n	80193d8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8019222:	4c7f      	ldr	r4, [pc, #508]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019224:	463b      	mov	r3, r7
 8019226:	4618      	mov	r0, r3
 8019228:	f7fe ffd4 	bl	80181d4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 801922c:	4625      	mov	r5, r4
 801922e:	463c      	mov	r4, r7
 8019230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019238:	6823      	ldr	r3, [r4, #0]
 801923a:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 801923c:	4c78      	ldr	r4, [pc, #480]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 801923e:	463b      	mov	r3, r7
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff fc23 	bl	8018a8c <_ZN6tflite16Register_SOFTMAXEv>
 8019246:	3424      	adds	r4, #36	; 0x24
 8019248:	463d      	mov	r5, r7
 801924a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801924c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801924e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019252:	682b      	ldr	r3, [r5, #0]
 8019254:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 8019256:	2300      	movs	r3, #0
 8019258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801925c:	e054      	b.n	8019308 <_Z19tflite_learn_6_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 801925e:	4a71      	ldr	r2, [pc, #452]	; (8019424 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019264:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019266:	4a70      	ldr	r2, [pc, #448]	; (8019428 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801926c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019274:	e039      	b.n	80192ea <_Z19tflite_learn_6_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 8019276:	4a6d      	ldr	r2, [pc, #436]	; (801942c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801927c:	4413      	add	r3, r2
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	4619      	mov	r1, r3
 8019282:	4a67      	ldr	r2, [pc, #412]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019284:	460b      	mov	r3, r1
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	440b      	add	r3, r1
 801928a:	009b      	lsls	r3, r3, #2
 801928c:	4413      	add	r3, r2
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d025      	beq.n	80192e0 <_Z19tflite_learn_6_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8019294:	4a65      	ldr	r2, [pc, #404]	; (801942c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801929a:	4413      	add	r3, r2
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	4619      	mov	r1, r3
 80192a0:	4a5f      	ldr	r2, [pc, #380]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 80192a2:	460b      	mov	r3, r1
 80192a4:	00db      	lsls	r3, r3, #3
 80192a6:	440b      	add	r3, r1
 80192a8:	009b      	lsls	r3, r3, #2
 80192aa:	4413      	add	r3, r2
 80192ac:	681c      	ldr	r4, [r3, #0]
 80192ae:	4960      	ldr	r1, [pc, #384]	; (8019430 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 80192b0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80192b4:	4613      	mov	r3, r2
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	4413      	add	r3, r2
 80192ba:	00db      	lsls	r3, r3, #3
 80192bc:	440b      	add	r3, r1
 80192be:	3314      	adds	r3, #20
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	2200      	movs	r2, #0
 80192c4:	4619      	mov	r1, r3
 80192c6:	484d      	ldr	r0, [pc, #308]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 80192c8:	47a0      	blx	r4
 80192ca:	4601      	mov	r1, r0
 80192cc:	4858      	ldr	r0, [pc, #352]	; (8019430 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 80192ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80192d2:	4613      	mov	r3, r2
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	4413      	add	r3, r2
 80192d8:	00db      	lsls	r3, r3, #3
 80192da:	4403      	add	r3, r0
 80192dc:	3310      	adds	r3, #16
 80192de:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 80192e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80192e4:	3301      	adds	r3, #1
 80192e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80192ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80192ee:	3301      	adds	r3, #1
 80192f0:	4a4d      	ldr	r2, [pc, #308]	; (8019428 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 80192f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192f6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d3bb      	bcc.n	8019276 <_Z19tflite_learn_6_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 80192fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019302:	3301      	adds	r3, #1
 8019304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019308:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801930c:	2b00      	cmp	r3, #0
 801930e:	d0a6      	beq.n	801925e <_Z19tflite_learn_6_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 8019310:	4b44      	ldr	r3, [pc, #272]	; (8019424 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019312:	2200      	movs	r2, #0
 8019314:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 8019316:	2300      	movs	r3, #0
 8019318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801931c:	e054      	b.n	80193c8 <_Z19tflite_learn_6_initPFPvjjE+0x290>
    current_subgraph_index = g;
 801931e:	4a41      	ldr	r2, [pc, #260]	; (8019424 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019324:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019326:	4a40      	ldr	r2, [pc, #256]	; (8019428 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801932c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019334:	e039      	b.n	80193aa <_Z19tflite_learn_6_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 8019336:	4a3d      	ldr	r2, [pc, #244]	; (801942c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801933c:	4413      	add	r3, r2
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	4619      	mov	r1, r3
 8019342:	4a37      	ldr	r2, [pc, #220]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019344:	460b      	mov	r3, r1
 8019346:	00db      	lsls	r3, r3, #3
 8019348:	440b      	add	r3, r1
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	4413      	add	r3, r2
 801934e:	3308      	adds	r3, #8
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d024      	beq.n	80193a0 <_Z19tflite_learn_6_initPFPvjjE+0x268>
        ResetTensors();
 8019356:	f7ff fd91 	bl	8018e7c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 801935a:	4a34      	ldr	r2, [pc, #208]	; (801942c <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 801935c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019360:	4413      	add	r3, r2
 8019362:	781b      	ldrb	r3, [r3, #0]
 8019364:	4619      	mov	r1, r3
 8019366:	4a2e      	ldr	r2, [pc, #184]	; (8019420 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019368:	460b      	mov	r3, r1
 801936a:	00db      	lsls	r3, r3, #3
 801936c:	440b      	add	r3, r1
 801936e:	009b      	lsls	r3, r3, #2
 8019370:	4413      	add	r3, r2
 8019372:	3308      	adds	r3, #8
 8019374:	681c      	ldr	r4, [r3, #0]
 8019376:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801937a:	4613      	mov	r3, r2
 801937c:	009b      	lsls	r3, r3, #2
 801937e:	4413      	add	r3, r2
 8019380:	00db      	lsls	r3, r3, #3
 8019382:	4a2b      	ldr	r2, [pc, #172]	; (8019430 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019384:	4413      	add	r3, r2
 8019386:	4619      	mov	r1, r3
 8019388:	481c      	ldr	r0, [pc, #112]	; (80193fc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801938a:	47a0      	blx	r4
 801938c:	4603      	mov	r3, r0
 801938e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 8019392:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8019396:	2b00      	cmp	r3, #0
 8019398:	d002      	beq.n	80193a0 <_Z19tflite_learn_6_initPFPvjjE+0x268>
          return status;
 801939a:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 801939e:	e01b      	b.n	80193d8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 80193a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80193a4:	3301      	adds	r3, #1
 80193a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80193aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80193ae:	3301      	adds	r3, #1
 80193b0:	4a1d      	ldr	r2, [pc, #116]	; (8019428 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 80193b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80193b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d3bb      	bcc.n	8019336 <_Z19tflite_learn_6_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 80193be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80193c2:	3301      	adds	r3, #1
 80193c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80193c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d0a6      	beq.n	801931e <_Z19tflite_learn_6_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 80193d0:	4b14      	ldr	r3, [pc, #80]	; (8019424 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 80193d2:	2200      	movs	r2, #0
 80193d4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 80193d6:	2400      	movs	r4, #0
}
 80193d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80193dc:	4618      	mov	r0, r3
 80193de:	f000 f8af 	bl	8019540 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 80193e2:	4623      	mov	r3, r4
 80193e4:	4618      	mov	r0, r3
 80193e6:	37a8      	adds	r7, #168	; 0xa8
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bdb0      	pop	{r4, r5, r7, pc}
 80193ec:	2000133c 	.word	0x2000133c
 80193f0:	08021ac8 	.word	0x08021ac8
 80193f4:	20001340 	.word	0x20001340
 80193f8:	20001344 	.word	0x20001344
 80193fc:	20001348 	.word	0x20001348
 8019400:	08018cd5 	.word	0x08018cd5
 8019404:	08018db9 	.word	0x08018db9
 8019408:	08018e45 	.word	0x08018e45
 801940c:	08018ee5 	.word	0x08018ee5
 8019410:	08018fb9 	.word	0x08018fb9
 8019414:	08017781 	.word	0x08017781
 8019418:	20000fa4 	.word	0x20000fa4
 801941c:	08021af0 	.word	0x08021af0
 8019420:	200014f0 	.word	0x200014f0
 8019424:	20001538 	.word	0x20001538
 8019428:	08027b74 	.word	0x08027b74
 801942c:	2000109c 	.word	0x2000109c
 8019430:	20001024 	.word	0x20001024

08019434 <_Z20tflite_learn_6_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
 8019434:	b580      	push	{r7, lr}
 8019436:	b082      	sub	sp, #8
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 801943e:	2300      	movs	r3, #0
 8019440:	6839      	ldr	r1, [r7, #0]
 8019442:	4618      	mov	r0, r3
 8019444:	f7ff fbc0 	bl	8018bc8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019448:	2300      	movs	r3, #0
}
 801944a:	4618      	mov	r0, r3
 801944c:	3708      	adds	r7, #8
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}

08019452 <_Z21tflite_learn_6_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
 8019452:	b580      	push	{r7, lr}
 8019454:	b082      	sub	sp, #8
 8019456:	af00      	add	r7, sp, #0
 8019458:	6078      	str	r0, [r7, #4]
 801945a:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 801945c:	2307      	movs	r3, #7
 801945e:	6839      	ldr	r1, [r7, #0]
 8019460:	4618      	mov	r0, r3
 8019462:	f7ff fbb1 	bl	8018bc8 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019466:	2300      	movs	r3, #0
}
 8019468:	4618      	mov	r0, r3
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <_Z21tflite_learn_6_invokev>:

TfLiteStatus tflite_learn_6_invoke() {
 8019470:	b590      	push	{r4, r7, lr}
 8019472:	b083      	sub	sp, #12
 8019474:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 3; ++i) {
 8019476:	2300      	movs	r3, #0
 8019478:	607b      	str	r3, [r7, #4]
 801947a:	e022      	b.n	80194c2 <_Z21tflite_learn_6_invokev+0x52>
    ResetTensors();
 801947c:	f7ff fcfe 	bl	8018e7c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 8019480:	4a14      	ldr	r2, [pc, #80]	; (80194d4 <_Z21tflite_learn_6_invokev+0x64>)
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	4413      	add	r3, r2
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	4619      	mov	r1, r3
 801948a:	4a13      	ldr	r2, [pc, #76]	; (80194d8 <_Z21tflite_learn_6_invokev+0x68>)
 801948c:	460b      	mov	r3, r1
 801948e:	00db      	lsls	r3, r3, #3
 8019490:	440b      	add	r3, r1
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	4413      	add	r3, r2
 8019496:	330c      	adds	r3, #12
 8019498:	681c      	ldr	r4, [r3, #0]
 801949a:	687a      	ldr	r2, [r7, #4]
 801949c:	4613      	mov	r3, r2
 801949e:	009b      	lsls	r3, r3, #2
 80194a0:	4413      	add	r3, r2
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	4a0d      	ldr	r2, [pc, #52]	; (80194dc <_Z21tflite_learn_6_invokev+0x6c>)
 80194a6:	4413      	add	r3, r2
 80194a8:	4619      	mov	r1, r3
 80194aa:	480d      	ldr	r0, [pc, #52]	; (80194e0 <_Z21tflite_learn_6_invokev+0x70>)
 80194ac:	47a0      	blx	r4
 80194ae:	4603      	mov	r3, r0
 80194b0:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 80194b2:	78fb      	ldrb	r3, [r7, #3]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d001      	beq.n	80194bc <_Z21tflite_learn_6_invokev+0x4c>
      return status;
 80194b8:	78fb      	ldrb	r3, [r7, #3]
 80194ba:	e006      	b.n	80194ca <_Z21tflite_learn_6_invokev+0x5a>
  for (size_t i = 0; i < 3; ++i) {
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	3301      	adds	r3, #1
 80194c0:	607b      	str	r3, [r7, #4]
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	2b02      	cmp	r3, #2
 80194c6:	d9d9      	bls.n	801947c <_Z21tflite_learn_6_invokev+0xc>
    }
  }
  return kTfLiteOk;
 80194c8:	2300      	movs	r3, #0
}
 80194ca:	4618      	mov	r0, r3
 80194cc:	370c      	adds	r7, #12
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bd90      	pop	{r4, r7, pc}
 80194d2:	bf00      	nop
 80194d4:	2000109c 	.word	0x2000109c
 80194d8:	200014f0 	.word	0x200014f0
 80194dc:	20001024 	.word	0x20001024
 80194e0:	20001348 	.word	0x20001348

080194e4 <_Z20tflite_learn_6_resetPFvPvE>:

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 80194ec:	4b10      	ldr	r3, [pc, #64]	; (8019530 <_Z20tflite_learn_6_resetPFvPvE+0x4c>)
 80194ee:	681a      	ldr	r2, [r3, #0]
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	4610      	mov	r0, r2
 80194f4:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 80194f6:	4b0f      	ldr	r3, [pc, #60]	; (8019534 <_Z20tflite_learn_6_resetPFvPvE+0x50>)
 80194f8:	2200      	movs	r2, #0
 80194fa:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80194fc:	2300      	movs	r3, #0
 80194fe:	60fb      	str	r3, [r7, #12]
 8019500:	e009      	b.n	8019516 <_Z20tflite_learn_6_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 8019502:	4a0d      	ldr	r2, [pc, #52]	; (8019538 <_Z20tflite_learn_6_resetPFvPvE+0x54>)
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801950a:	4618      	mov	r0, r3
 801950c:	f7fd f9ee 	bl	80168ec <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	3301      	adds	r3, #1
 8019514:	60fb      	str	r3, [r7, #12]
 8019516:	4b09      	ldr	r3, [pc, #36]	; (801953c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	68fa      	ldr	r2, [r7, #12]
 801951c:	429a      	cmp	r2, r3
 801951e:	d3f0      	bcc.n	8019502 <_Z20tflite_learn_6_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 8019520:	4b06      	ldr	r3, [pc, #24]	; (801953c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 8019522:	2200      	movs	r2, #0
 8019524:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8019526:	2300      	movs	r3, #0
}
 8019528:	4618      	mov	r0, r3
 801952a:	3710      	adds	r7, #16
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}
 8019530:	2000133c 	.word	0x2000133c
 8019534:	20001588 	.word	0x20001588
 8019538:	2000153c 	.word	0x2000153c
 801953c:	20001564 	.word	0x20001564

08019540 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	4a05      	ldr	r2, [pc, #20]	; (8019560 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	601a      	str	r2, [r3, #0]
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	4618      	mov	r0, r3
 8019552:	f7fd ffd3 	bl	80174fc <_ZN6tflite12MicroContextD1Ev>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	4618      	mov	r0, r3
 801955a:	3708      	adds	r7, #8
 801955c:	46bd      	mov	sp, r7
 801955e:	bd80      	pop	{r7, pc}
 8019560:	08027b84 	.word	0x08027b84

08019564 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6878      	ldr	r0, [r7, #4]
 801956e:	f7ff ffe7 	bl	8019540 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 8019572:	2118      	movs	r1, #24
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f000 f837 	bl	80195e8 <_ZdlPvj>
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	4618      	mov	r0, r3
 801957e:	3708      	adds	r7, #8
 8019580:	46bd      	mov	sp, r7
 8019582:	bd80      	pop	{r7, pc}

08019584 <_Z41__static_initialization_and_destruction_0ii>:
}
 8019584:	b480      	push	{r7}
 8019586:	b083      	sub	sp, #12
 8019588:	af00      	add	r7, sp, #0
 801958a:	6078      	str	r0, [r7, #4]
 801958c:	6039      	str	r1, [r7, #0]
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	2b01      	cmp	r3, #1
 8019592:	d117      	bne.n	80195c4 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801959a:	4293      	cmp	r3, r2
 801959c:	d112      	bne.n	80195c4 <_Z41__static_initialization_and_destruction_0ii+0x40>
};
 801959e:	4b0c      	ldr	r3, [pc, #48]	; (80195d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	4a0c      	ldr	r2, [pc, #48]	; (80195d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80195a4:	6053      	str	r3, [r2, #4]
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 304), (TfLiteIntArray*)&g0::tensor_dimension5, 240, },
 80195a6:	4b0a      	ldr	r3, [pc, #40]	; (80195d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	f503 7398 	add.w	r3, r3, #304	; 0x130
};
 80195ae:	4a09      	ldr	r2, [pc, #36]	; (80195d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80195b0:	6553      	str	r3, [r2, #84]	; 0x54
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension6, 8, },
 80195b2:	4b07      	ldr	r3, [pc, #28]	; (80195d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	3310      	adds	r3, #16
};
 80195b8:	4a06      	ldr	r2, [pc, #24]	; (80195d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80195ba:	6653      	str	r3, [r2, #100]	; 0x64
 80195bc:	4b04      	ldr	r3, [pc, #16]	; (80195d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	4a04      	ldr	r2, [pc, #16]	; (80195d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80195c2:	6753      	str	r3, [r2, #116]	; 0x74
}
 80195c4:	bf00      	nop
 80195c6:	370c      	adds	r7, #12
 80195c8:	46bd      	mov	sp, r7
 80195ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ce:	4770      	bx	lr
 80195d0:	2000133c 	.word	0x2000133c
 80195d4:	20000fa4 	.word	0x20000fa4

080195d8 <_GLOBAL__sub_I__Z19tflite_learn_6_initPFPvjjE>:
 80195d8:	b580      	push	{r7, lr}
 80195da:	af00      	add	r7, sp, #0
 80195dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80195e0:	2001      	movs	r0, #1
 80195e2:	f7ff ffcf 	bl	8019584 <_Z41__static_initialization_and_destruction_0ii>
 80195e6:	bd80      	pop	{r7, pc}

080195e8 <_ZdlPvj>:
 80195e8:	f000 b81d 	b.w	8019626 <_ZdlPv>

080195ec <_ZdaPv>:
 80195ec:	f000 b81b 	b.w	8019626 <_ZdlPv>

080195f0 <_ZdaPvj>:
 80195f0:	f7ff bffc 	b.w	80195ec <_ZdaPv>

080195f4 <_Znwj>:
 80195f4:	2801      	cmp	r0, #1
 80195f6:	bf38      	it	cc
 80195f8:	2001      	movcc	r0, #1
 80195fa:	b510      	push	{r4, lr}
 80195fc:	4604      	mov	r4, r0
 80195fe:	4620      	mov	r0, r4
 8019600:	f002 fdc8 	bl	801c194 <malloc>
 8019604:	b100      	cbz	r0, 8019608 <_Znwj+0x14>
 8019606:	bd10      	pop	{r4, pc}
 8019608:	f000 f810 	bl	801962c <_ZSt15get_new_handlerv>
 801960c:	b908      	cbnz	r0, 8019612 <_Znwj+0x1e>
 801960e:	f002 fd79 	bl	801c104 <abort>
 8019612:	4780      	blx	r0
 8019614:	e7f3      	b.n	80195fe <_Znwj+0xa>

08019616 <_Znaj>:
 8019616:	f7ff bfed 	b.w	80195f4 <_Znwj>

0801961a <_ZSt20__throw_length_errorPKc>:
 801961a:	b508      	push	{r3, lr}
 801961c:	f002 fd72 	bl	801c104 <abort>

08019620 <_ZSt25__throw_bad_function_callv>:
 8019620:	b508      	push	{r3, lr}
 8019622:	f002 fd6f 	bl	801c104 <abort>

08019626 <_ZdlPv>:
 8019626:	f002 bdbd 	b.w	801c1a4 <free>
	...

0801962c <_ZSt15get_new_handlerv>:
 801962c:	4b02      	ldr	r3, [pc, #8]	; (8019638 <_ZSt15get_new_handlerv+0xc>)
 801962e:	6818      	ldr	r0, [r3, #0]
 8019630:	f3bf 8f5b 	dmb	ish
 8019634:	4770      	bx	lr
 8019636:	bf00      	nop
 8019638:	2000158c 	.word	0x2000158c

0801963c <pow>:
 801963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801963e:	ed2d 8b02 	vpush	{d8}
 8019642:	eeb0 8a40 	vmov.f32	s16, s0
 8019646:	eef0 8a60 	vmov.f32	s17, s1
 801964a:	ec55 4b11 	vmov	r4, r5, d1
 801964e:	f001 f807 	bl	801a660 <__ieee754_pow>
 8019652:	4622      	mov	r2, r4
 8019654:	462b      	mov	r3, r5
 8019656:	4620      	mov	r0, r4
 8019658:	4629      	mov	r1, r5
 801965a:	ec57 6b10 	vmov	r6, r7, d0
 801965e:	f7e7 fa95 	bl	8000b8c <__aeabi_dcmpun>
 8019662:	2800      	cmp	r0, #0
 8019664:	d13b      	bne.n	80196de <pow+0xa2>
 8019666:	ec51 0b18 	vmov	r0, r1, d8
 801966a:	2200      	movs	r2, #0
 801966c:	2300      	movs	r3, #0
 801966e:	f7e7 fa5b 	bl	8000b28 <__aeabi_dcmpeq>
 8019672:	b1b8      	cbz	r0, 80196a4 <pow+0x68>
 8019674:	2200      	movs	r2, #0
 8019676:	2300      	movs	r3, #0
 8019678:	4620      	mov	r0, r4
 801967a:	4629      	mov	r1, r5
 801967c:	f7e7 fa54 	bl	8000b28 <__aeabi_dcmpeq>
 8019680:	2800      	cmp	r0, #0
 8019682:	d146      	bne.n	8019712 <pow+0xd6>
 8019684:	ec45 4b10 	vmov	d0, r4, r5
 8019688:	f000 fa64 	bl	8019b54 <finite>
 801968c:	b338      	cbz	r0, 80196de <pow+0xa2>
 801968e:	2200      	movs	r2, #0
 8019690:	2300      	movs	r3, #0
 8019692:	4620      	mov	r0, r4
 8019694:	4629      	mov	r1, r5
 8019696:	f7e7 fa51 	bl	8000b3c <__aeabi_dcmplt>
 801969a:	b300      	cbz	r0, 80196de <pow+0xa2>
 801969c:	f003 fe86 	bl	801d3ac <__errno>
 80196a0:	2322      	movs	r3, #34	; 0x22
 80196a2:	e01b      	b.n	80196dc <pow+0xa0>
 80196a4:	ec47 6b10 	vmov	d0, r6, r7
 80196a8:	f000 fa54 	bl	8019b54 <finite>
 80196ac:	b9e0      	cbnz	r0, 80196e8 <pow+0xac>
 80196ae:	eeb0 0a48 	vmov.f32	s0, s16
 80196b2:	eef0 0a68 	vmov.f32	s1, s17
 80196b6:	f000 fa4d 	bl	8019b54 <finite>
 80196ba:	b1a8      	cbz	r0, 80196e8 <pow+0xac>
 80196bc:	ec45 4b10 	vmov	d0, r4, r5
 80196c0:	f000 fa48 	bl	8019b54 <finite>
 80196c4:	b180      	cbz	r0, 80196e8 <pow+0xac>
 80196c6:	4632      	mov	r2, r6
 80196c8:	463b      	mov	r3, r7
 80196ca:	4630      	mov	r0, r6
 80196cc:	4639      	mov	r1, r7
 80196ce:	f7e7 fa5d 	bl	8000b8c <__aeabi_dcmpun>
 80196d2:	2800      	cmp	r0, #0
 80196d4:	d0e2      	beq.n	801969c <pow+0x60>
 80196d6:	f003 fe69 	bl	801d3ac <__errno>
 80196da:	2321      	movs	r3, #33	; 0x21
 80196dc:	6003      	str	r3, [r0, #0]
 80196de:	ecbd 8b02 	vpop	{d8}
 80196e2:	ec47 6b10 	vmov	d0, r6, r7
 80196e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196e8:	2200      	movs	r2, #0
 80196ea:	2300      	movs	r3, #0
 80196ec:	4630      	mov	r0, r6
 80196ee:	4639      	mov	r1, r7
 80196f0:	f7e7 fa1a 	bl	8000b28 <__aeabi_dcmpeq>
 80196f4:	2800      	cmp	r0, #0
 80196f6:	d0f2      	beq.n	80196de <pow+0xa2>
 80196f8:	eeb0 0a48 	vmov.f32	s0, s16
 80196fc:	eef0 0a68 	vmov.f32	s1, s17
 8019700:	f000 fa28 	bl	8019b54 <finite>
 8019704:	2800      	cmp	r0, #0
 8019706:	d0ea      	beq.n	80196de <pow+0xa2>
 8019708:	ec45 4b10 	vmov	d0, r4, r5
 801970c:	f000 fa22 	bl	8019b54 <finite>
 8019710:	e7c3      	b.n	801969a <pow+0x5e>
 8019712:	4f01      	ldr	r7, [pc, #4]	; (8019718 <pow+0xdc>)
 8019714:	2600      	movs	r6, #0
 8019716:	e7e2      	b.n	80196de <pow+0xa2>
 8019718:	3ff00000 	.word	0x3ff00000

0801971c <sqrt>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	ed2d 8b02 	vpush	{d8}
 8019722:	ec55 4b10 	vmov	r4, r5, d0
 8019726:	f000 fa61 	bl	8019bec <__ieee754_sqrt>
 801972a:	4622      	mov	r2, r4
 801972c:	462b      	mov	r3, r5
 801972e:	4620      	mov	r0, r4
 8019730:	4629      	mov	r1, r5
 8019732:	eeb0 8a40 	vmov.f32	s16, s0
 8019736:	eef0 8a60 	vmov.f32	s17, s1
 801973a:	f7e7 fa27 	bl	8000b8c <__aeabi_dcmpun>
 801973e:	b990      	cbnz	r0, 8019766 <sqrt+0x4a>
 8019740:	2200      	movs	r2, #0
 8019742:	2300      	movs	r3, #0
 8019744:	4620      	mov	r0, r4
 8019746:	4629      	mov	r1, r5
 8019748:	f7e7 f9f8 	bl	8000b3c <__aeabi_dcmplt>
 801974c:	b158      	cbz	r0, 8019766 <sqrt+0x4a>
 801974e:	f003 fe2d 	bl	801d3ac <__errno>
 8019752:	2321      	movs	r3, #33	; 0x21
 8019754:	6003      	str	r3, [r0, #0]
 8019756:	2200      	movs	r2, #0
 8019758:	2300      	movs	r3, #0
 801975a:	4610      	mov	r0, r2
 801975c:	4619      	mov	r1, r3
 801975e:	f7e7 f8a5 	bl	80008ac <__aeabi_ddiv>
 8019762:	ec41 0b18 	vmov	d8, r0, r1
 8019766:	eeb0 0a48 	vmov.f32	s0, s16
 801976a:	eef0 0a68 	vmov.f32	s1, s17
 801976e:	ecbd 8b02 	vpop	{d8}
 8019772:	bd38      	pop	{r3, r4, r5, pc}
 8019774:	0000      	movs	r0, r0
	...

08019778 <cos>:
 8019778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801977a:	ec53 2b10 	vmov	r2, r3, d0
 801977e:	4826      	ldr	r0, [pc, #152]	; (8019818 <cos+0xa0>)
 8019780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019784:	4281      	cmp	r1, r0
 8019786:	dc06      	bgt.n	8019796 <cos+0x1e>
 8019788:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019810 <cos+0x98>
 801978c:	b005      	add	sp, #20
 801978e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019792:	f000 bbd1 	b.w	8019f38 <__kernel_cos>
 8019796:	4821      	ldr	r0, [pc, #132]	; (801981c <cos+0xa4>)
 8019798:	4281      	cmp	r1, r0
 801979a:	dd09      	ble.n	80197b0 <cos+0x38>
 801979c:	ee10 0a10 	vmov	r0, s0
 80197a0:	4619      	mov	r1, r3
 80197a2:	f7e6 fda1 	bl	80002e8 <__aeabi_dsub>
 80197a6:	ec41 0b10 	vmov	d0, r0, r1
 80197aa:	b005      	add	sp, #20
 80197ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80197b0:	4668      	mov	r0, sp
 80197b2:	f001 fc81 	bl	801b0b8 <__ieee754_rem_pio2>
 80197b6:	f000 0003 	and.w	r0, r0, #3
 80197ba:	2801      	cmp	r0, #1
 80197bc:	d00b      	beq.n	80197d6 <cos+0x5e>
 80197be:	2802      	cmp	r0, #2
 80197c0:	d016      	beq.n	80197f0 <cos+0x78>
 80197c2:	b9e0      	cbnz	r0, 80197fe <cos+0x86>
 80197c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197c8:	ed9d 0b00 	vldr	d0, [sp]
 80197cc:	f000 fbb4 	bl	8019f38 <__kernel_cos>
 80197d0:	ec51 0b10 	vmov	r0, r1, d0
 80197d4:	e7e7      	b.n	80197a6 <cos+0x2e>
 80197d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197da:	ed9d 0b00 	vldr	d0, [sp]
 80197de:	f000 fc73 	bl	801a0c8 <__kernel_sin>
 80197e2:	ec53 2b10 	vmov	r2, r3, d0
 80197e6:	ee10 0a10 	vmov	r0, s0
 80197ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197ee:	e7da      	b.n	80197a6 <cos+0x2e>
 80197f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197f4:	ed9d 0b00 	vldr	d0, [sp]
 80197f8:	f000 fb9e 	bl	8019f38 <__kernel_cos>
 80197fc:	e7f1      	b.n	80197e2 <cos+0x6a>
 80197fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019802:	ed9d 0b00 	vldr	d0, [sp]
 8019806:	2001      	movs	r0, #1
 8019808:	f000 fc5e 	bl	801a0c8 <__kernel_sin>
 801980c:	e7e0      	b.n	80197d0 <cos+0x58>
 801980e:	bf00      	nop
	...
 8019818:	3fe921fb 	.word	0x3fe921fb
 801981c:	7fefffff 	.word	0x7fefffff

08019820 <frexp>:
 8019820:	b570      	push	{r4, r5, r6, lr}
 8019822:	2100      	movs	r1, #0
 8019824:	ec55 4b10 	vmov	r4, r5, d0
 8019828:	6001      	str	r1, [r0, #0]
 801982a:	4916      	ldr	r1, [pc, #88]	; (8019884 <frexp+0x64>)
 801982c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8019830:	428a      	cmp	r2, r1
 8019832:	4606      	mov	r6, r0
 8019834:	462b      	mov	r3, r5
 8019836:	dc22      	bgt.n	801987e <frexp+0x5e>
 8019838:	ee10 1a10 	vmov	r1, s0
 801983c:	4311      	orrs	r1, r2
 801983e:	d01e      	beq.n	801987e <frexp+0x5e>
 8019840:	4911      	ldr	r1, [pc, #68]	; (8019888 <frexp+0x68>)
 8019842:	4029      	ands	r1, r5
 8019844:	b969      	cbnz	r1, 8019862 <frexp+0x42>
 8019846:	4b11      	ldr	r3, [pc, #68]	; (801988c <frexp+0x6c>)
 8019848:	2200      	movs	r2, #0
 801984a:	ee10 0a10 	vmov	r0, s0
 801984e:	4629      	mov	r1, r5
 8019850:	f7e6 ff02 	bl	8000658 <__aeabi_dmul>
 8019854:	460b      	mov	r3, r1
 8019856:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801985a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801985e:	4604      	mov	r4, r0
 8019860:	6031      	str	r1, [r6, #0]
 8019862:	6831      	ldr	r1, [r6, #0]
 8019864:	1512      	asrs	r2, r2, #20
 8019866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801986a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801986e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019872:	4411      	add	r1, r2
 8019874:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8019878:	6031      	str	r1, [r6, #0]
 801987a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801987e:	ec45 4b10 	vmov	d0, r4, r5
 8019882:	bd70      	pop	{r4, r5, r6, pc}
 8019884:	7fefffff 	.word	0x7fefffff
 8019888:	7ff00000 	.word	0x7ff00000
 801988c:	43500000 	.word	0x43500000

08019890 <sin>:
 8019890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019892:	ec53 2b10 	vmov	r2, r3, d0
 8019896:	4828      	ldr	r0, [pc, #160]	; (8019938 <sin+0xa8>)
 8019898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801989c:	4281      	cmp	r1, r0
 801989e:	dc07      	bgt.n	80198b0 <sin+0x20>
 80198a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019930 <sin+0xa0>
 80198a4:	2000      	movs	r0, #0
 80198a6:	b005      	add	sp, #20
 80198a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80198ac:	f000 bc0c 	b.w	801a0c8 <__kernel_sin>
 80198b0:	4822      	ldr	r0, [pc, #136]	; (801993c <sin+0xac>)
 80198b2:	4281      	cmp	r1, r0
 80198b4:	dd09      	ble.n	80198ca <sin+0x3a>
 80198b6:	ee10 0a10 	vmov	r0, s0
 80198ba:	4619      	mov	r1, r3
 80198bc:	f7e6 fd14 	bl	80002e8 <__aeabi_dsub>
 80198c0:	ec41 0b10 	vmov	d0, r0, r1
 80198c4:	b005      	add	sp, #20
 80198c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80198ca:	4668      	mov	r0, sp
 80198cc:	f001 fbf4 	bl	801b0b8 <__ieee754_rem_pio2>
 80198d0:	f000 0003 	and.w	r0, r0, #3
 80198d4:	2801      	cmp	r0, #1
 80198d6:	d00c      	beq.n	80198f2 <sin+0x62>
 80198d8:	2802      	cmp	r0, #2
 80198da:	d011      	beq.n	8019900 <sin+0x70>
 80198dc:	b9f0      	cbnz	r0, 801991c <sin+0x8c>
 80198de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198e2:	ed9d 0b00 	vldr	d0, [sp]
 80198e6:	2001      	movs	r0, #1
 80198e8:	f000 fbee 	bl	801a0c8 <__kernel_sin>
 80198ec:	ec51 0b10 	vmov	r0, r1, d0
 80198f0:	e7e6      	b.n	80198c0 <sin+0x30>
 80198f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198f6:	ed9d 0b00 	vldr	d0, [sp]
 80198fa:	f000 fb1d 	bl	8019f38 <__kernel_cos>
 80198fe:	e7f5      	b.n	80198ec <sin+0x5c>
 8019900:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019904:	ed9d 0b00 	vldr	d0, [sp]
 8019908:	2001      	movs	r0, #1
 801990a:	f000 fbdd 	bl	801a0c8 <__kernel_sin>
 801990e:	ec53 2b10 	vmov	r2, r3, d0
 8019912:	ee10 0a10 	vmov	r0, s0
 8019916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801991a:	e7d1      	b.n	80198c0 <sin+0x30>
 801991c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019920:	ed9d 0b00 	vldr	d0, [sp]
 8019924:	f000 fb08 	bl	8019f38 <__kernel_cos>
 8019928:	e7f1      	b.n	801990e <sin+0x7e>
 801992a:	bf00      	nop
 801992c:	f3af 8000 	nop.w
	...
 8019938:	3fe921fb 	.word	0x3fe921fb
 801993c:	7fefffff 	.word	0x7fefffff

08019940 <tan>:
 8019940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019942:	ec53 2b10 	vmov	r2, r3, d0
 8019946:	4816      	ldr	r0, [pc, #88]	; (80199a0 <tan+0x60>)
 8019948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801994c:	4281      	cmp	r1, r0
 801994e:	dc07      	bgt.n	8019960 <tan+0x20>
 8019950:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8019998 <tan+0x58>
 8019954:	2001      	movs	r0, #1
 8019956:	b005      	add	sp, #20
 8019958:	f85d eb04 	ldr.w	lr, [sp], #4
 801995c:	f000 bc74 	b.w	801a248 <__kernel_tan>
 8019960:	4810      	ldr	r0, [pc, #64]	; (80199a4 <tan+0x64>)
 8019962:	4281      	cmp	r1, r0
 8019964:	dd09      	ble.n	801997a <tan+0x3a>
 8019966:	ee10 0a10 	vmov	r0, s0
 801996a:	4619      	mov	r1, r3
 801996c:	f7e6 fcbc 	bl	80002e8 <__aeabi_dsub>
 8019970:	ec41 0b10 	vmov	d0, r0, r1
 8019974:	b005      	add	sp, #20
 8019976:	f85d fb04 	ldr.w	pc, [sp], #4
 801997a:	4668      	mov	r0, sp
 801997c:	f001 fb9c 	bl	801b0b8 <__ieee754_rem_pio2>
 8019980:	0040      	lsls	r0, r0, #1
 8019982:	f000 0002 	and.w	r0, r0, #2
 8019986:	ed9d 1b02 	vldr	d1, [sp, #8]
 801998a:	ed9d 0b00 	vldr	d0, [sp]
 801998e:	f1c0 0001 	rsb	r0, r0, #1
 8019992:	f000 fc59 	bl	801a248 <__kernel_tan>
 8019996:	e7ed      	b.n	8019974 <tan+0x34>
	...
 80199a0:	3fe921fb 	.word	0x3fe921fb
 80199a4:	7fefffff 	.word	0x7fefffff

080199a8 <expf>:
 80199a8:	b508      	push	{r3, lr}
 80199aa:	ed2d 8b02 	vpush	{d8}
 80199ae:	eef0 8a40 	vmov.f32	s17, s0
 80199b2:	f001 fd91 	bl	801b4d8 <__ieee754_expf>
 80199b6:	eeb0 8a40 	vmov.f32	s16, s0
 80199ba:	eeb0 0a68 	vmov.f32	s0, s17
 80199be:	f000 f8df 	bl	8019b80 <finitef>
 80199c2:	b160      	cbz	r0, 80199de <expf+0x36>
 80199c4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019a04 <expf+0x5c>
 80199c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80199cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d0:	dd0a      	ble.n	80199e8 <expf+0x40>
 80199d2:	f003 fceb 	bl	801d3ac <__errno>
 80199d6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019a08 <expf+0x60>
 80199da:	2322      	movs	r3, #34	; 0x22
 80199dc:	6003      	str	r3, [r0, #0]
 80199de:	eeb0 0a48 	vmov.f32	s0, s16
 80199e2:	ecbd 8b02 	vpop	{d8}
 80199e6:	bd08      	pop	{r3, pc}
 80199e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019a0c <expf+0x64>
 80199ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 80199f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f4:	d5f3      	bpl.n	80199de <expf+0x36>
 80199f6:	f003 fcd9 	bl	801d3ac <__errno>
 80199fa:	2322      	movs	r3, #34	; 0x22
 80199fc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019a10 <expf+0x68>
 8019a00:	6003      	str	r3, [r0, #0]
 8019a02:	e7ec      	b.n	80199de <expf+0x36>
 8019a04:	42b17217 	.word	0x42b17217
 8019a08:	7f800000 	.word	0x7f800000
 8019a0c:	c2cff1b5 	.word	0xc2cff1b5
 8019a10:	00000000 	.word	0x00000000

08019a14 <logf>:
 8019a14:	b508      	push	{r3, lr}
 8019a16:	ed2d 8b02 	vpush	{d8}
 8019a1a:	eeb0 8a40 	vmov.f32	s16, s0
 8019a1e:	f001 fe29 	bl	801b674 <__ieee754_logf>
 8019a22:	eeb4 8a48 	vcmp.f32	s16, s16
 8019a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a2a:	d60f      	bvs.n	8019a4c <logf+0x38>
 8019a2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a34:	dc0a      	bgt.n	8019a4c <logf+0x38>
 8019a36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a3e:	d108      	bne.n	8019a52 <logf+0x3e>
 8019a40:	f003 fcb4 	bl	801d3ac <__errno>
 8019a44:	2322      	movs	r3, #34	; 0x22
 8019a46:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019a68 <logf+0x54>
 8019a4a:	6003      	str	r3, [r0, #0]
 8019a4c:	ecbd 8b02 	vpop	{d8}
 8019a50:	bd08      	pop	{r3, pc}
 8019a52:	f003 fcab 	bl	801d3ac <__errno>
 8019a56:	ecbd 8b02 	vpop	{d8}
 8019a5a:	2321      	movs	r3, #33	; 0x21
 8019a5c:	6003      	str	r3, [r0, #0]
 8019a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019a62:	4802      	ldr	r0, [pc, #8]	; (8019a6c <logf+0x58>)
 8019a64:	f000 b89a 	b.w	8019b9c <nanf>
 8019a68:	ff800000 	.word	0xff800000
 8019a6c:	08027e0b 	.word	0x08027e0b

08019a70 <log10f>:
 8019a70:	b508      	push	{r3, lr}
 8019a72:	ed2d 8b02 	vpush	{d8}
 8019a76:	eeb0 8a40 	vmov.f32	s16, s0
 8019a7a:	f001 feed 	bl	801b858 <__ieee754_log10f>
 8019a7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a86:	d60f      	bvs.n	8019aa8 <log10f+0x38>
 8019a88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a90:	d80a      	bhi.n	8019aa8 <log10f+0x38>
 8019a92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a9a:	d108      	bne.n	8019aae <log10f+0x3e>
 8019a9c:	f003 fc86 	bl	801d3ac <__errno>
 8019aa0:	2322      	movs	r3, #34	; 0x22
 8019aa2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019ac4 <log10f+0x54>
 8019aa6:	6003      	str	r3, [r0, #0]
 8019aa8:	ecbd 8b02 	vpop	{d8}
 8019aac:	bd08      	pop	{r3, pc}
 8019aae:	f003 fc7d 	bl	801d3ac <__errno>
 8019ab2:	ecbd 8b02 	vpop	{d8}
 8019ab6:	2321      	movs	r3, #33	; 0x21
 8019ab8:	6003      	str	r3, [r0, #0]
 8019aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019abe:	4802      	ldr	r0, [pc, #8]	; (8019ac8 <log10f+0x58>)
 8019ac0:	f000 b86c 	b.w	8019b9c <nanf>
 8019ac4:	ff800000 	.word	0xff800000
 8019ac8:	08027e0b 	.word	0x08027e0b

08019acc <sqrtf>:
 8019acc:	b508      	push	{r3, lr}
 8019ace:	ed2d 8b02 	vpush	{d8}
 8019ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8019ad6:	f000 f963 	bl	8019da0 <__ieee754_sqrtf>
 8019ada:	eeb4 8a48 	vcmp.f32	s16, s16
 8019ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ae2:	d60c      	bvs.n	8019afe <sqrtf+0x32>
 8019ae4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019b04 <sqrtf+0x38>
 8019ae8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af0:	d505      	bpl.n	8019afe <sqrtf+0x32>
 8019af2:	f003 fc5b 	bl	801d3ac <__errno>
 8019af6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019afa:	2321      	movs	r3, #33	; 0x21
 8019afc:	6003      	str	r3, [r0, #0]
 8019afe:	ecbd 8b02 	vpop	{d8}
 8019b02:	bd08      	pop	{r3, pc}
 8019b04:	00000000 	.word	0x00000000

08019b08 <frexpf>:
 8019b08:	ee10 3a10 	vmov	r3, s0
 8019b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019b10:	2100      	movs	r1, #0
 8019b12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019b16:	6001      	str	r1, [r0, #0]
 8019b18:	da19      	bge.n	8019b4e <frexpf+0x46>
 8019b1a:	b1c2      	cbz	r2, 8019b4e <frexpf+0x46>
 8019b1c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019b20:	d10a      	bne.n	8019b38 <frexpf+0x30>
 8019b22:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019b50 <frexpf+0x48>
 8019b26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019b2a:	f06f 0118 	mvn.w	r1, #24
 8019b2e:	ee17 3a90 	vmov	r3, s15
 8019b32:	6001      	str	r1, [r0, #0]
 8019b34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019b38:	6801      	ldr	r1, [r0, #0]
 8019b3a:	15d2      	asrs	r2, r2, #23
 8019b3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019b40:	3a7e      	subs	r2, #126	; 0x7e
 8019b42:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8019b46:	4411      	add	r1, r2
 8019b48:	ee00 3a10 	vmov	s0, r3
 8019b4c:	6001      	str	r1, [r0, #0]
 8019b4e:	4770      	bx	lr
 8019b50:	4c000000 	.word	0x4c000000

08019b54 <finite>:
 8019b54:	b082      	sub	sp, #8
 8019b56:	ed8d 0b00 	vstr	d0, [sp]
 8019b5a:	9801      	ldr	r0, [sp, #4]
 8019b5c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019b60:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019b64:	0fc0      	lsrs	r0, r0, #31
 8019b66:	b002      	add	sp, #8
 8019b68:	4770      	bx	lr
 8019b6a:	0000      	movs	r0, r0
 8019b6c:	0000      	movs	r0, r0
	...

08019b70 <nan>:
 8019b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019b78 <nan+0x8>
 8019b74:	4770      	bx	lr
 8019b76:	bf00      	nop
 8019b78:	00000000 	.word	0x00000000
 8019b7c:	7ff80000 	.word	0x7ff80000

08019b80 <finitef>:
 8019b80:	b082      	sub	sp, #8
 8019b82:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019b86:	9801      	ldr	r0, [sp, #4]
 8019b88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019b8c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019b90:	bfac      	ite	ge
 8019b92:	2000      	movge	r0, #0
 8019b94:	2001      	movlt	r0, #1
 8019b96:	b002      	add	sp, #8
 8019b98:	4770      	bx	lr
	...

08019b9c <nanf>:
 8019b9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019ba4 <nanf+0x8>
 8019ba0:	4770      	bx	lr
 8019ba2:	bf00      	nop
 8019ba4:	7fc00000 	.word	0x7fc00000

08019ba8 <with_errnof>:
 8019ba8:	b513      	push	{r0, r1, r4, lr}
 8019baa:	4604      	mov	r4, r0
 8019bac:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019bb0:	f003 fbfc 	bl	801d3ac <__errno>
 8019bb4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019bb8:	6004      	str	r4, [r0, #0]
 8019bba:	b002      	add	sp, #8
 8019bbc:	bd10      	pop	{r4, pc}

08019bbe <xflowf>:
 8019bbe:	b130      	cbz	r0, 8019bce <xflowf+0x10>
 8019bc0:	eef1 7a40 	vneg.f32	s15, s0
 8019bc4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019bc8:	2022      	movs	r0, #34	; 0x22
 8019bca:	f7ff bfed 	b.w	8019ba8 <with_errnof>
 8019bce:	eef0 7a40 	vmov.f32	s15, s0
 8019bd2:	e7f7      	b.n	8019bc4 <xflowf+0x6>

08019bd4 <__math_uflowf>:
 8019bd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019bdc <__math_uflowf+0x8>
 8019bd8:	f7ff bff1 	b.w	8019bbe <xflowf>
 8019bdc:	10000000 	.word	0x10000000

08019be0 <__math_oflowf>:
 8019be0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019be8 <__math_oflowf+0x8>
 8019be4:	f7ff bfeb 	b.w	8019bbe <xflowf>
 8019be8:	70000000 	.word	0x70000000

08019bec <__ieee754_sqrt>:
 8019bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf0:	ec55 4b10 	vmov	r4, r5, d0
 8019bf4:	4e67      	ldr	r6, [pc, #412]	; (8019d94 <__ieee754_sqrt+0x1a8>)
 8019bf6:	43ae      	bics	r6, r5
 8019bf8:	ee10 0a10 	vmov	r0, s0
 8019bfc:	ee10 2a10 	vmov	r2, s0
 8019c00:	4629      	mov	r1, r5
 8019c02:	462b      	mov	r3, r5
 8019c04:	d10d      	bne.n	8019c22 <__ieee754_sqrt+0x36>
 8019c06:	f7e6 fd27 	bl	8000658 <__aeabi_dmul>
 8019c0a:	4602      	mov	r2, r0
 8019c0c:	460b      	mov	r3, r1
 8019c0e:	4620      	mov	r0, r4
 8019c10:	4629      	mov	r1, r5
 8019c12:	f7e6 fb6b 	bl	80002ec <__adddf3>
 8019c16:	4604      	mov	r4, r0
 8019c18:	460d      	mov	r5, r1
 8019c1a:	ec45 4b10 	vmov	d0, r4, r5
 8019c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c22:	2d00      	cmp	r5, #0
 8019c24:	dc0b      	bgt.n	8019c3e <__ieee754_sqrt+0x52>
 8019c26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c2a:	4326      	orrs	r6, r4
 8019c2c:	d0f5      	beq.n	8019c1a <__ieee754_sqrt+0x2e>
 8019c2e:	b135      	cbz	r5, 8019c3e <__ieee754_sqrt+0x52>
 8019c30:	f7e6 fb5a 	bl	80002e8 <__aeabi_dsub>
 8019c34:	4602      	mov	r2, r0
 8019c36:	460b      	mov	r3, r1
 8019c38:	f7e6 fe38 	bl	80008ac <__aeabi_ddiv>
 8019c3c:	e7eb      	b.n	8019c16 <__ieee754_sqrt+0x2a>
 8019c3e:	1509      	asrs	r1, r1, #20
 8019c40:	f000 808d 	beq.w	8019d5e <__ieee754_sqrt+0x172>
 8019c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019c50:	07c9      	lsls	r1, r1, #31
 8019c52:	bf5c      	itt	pl
 8019c54:	005b      	lslpl	r3, r3, #1
 8019c56:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019c5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c5e:	bf58      	it	pl
 8019c60:	0052      	lslpl	r2, r2, #1
 8019c62:	2500      	movs	r5, #0
 8019c64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019c68:	1076      	asrs	r6, r6, #1
 8019c6a:	0052      	lsls	r2, r2, #1
 8019c6c:	f04f 0e16 	mov.w	lr, #22
 8019c70:	46ac      	mov	ip, r5
 8019c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019c76:	eb0c 0001 	add.w	r0, ip, r1
 8019c7a:	4298      	cmp	r0, r3
 8019c7c:	bfde      	ittt	le
 8019c7e:	1a1b      	suble	r3, r3, r0
 8019c80:	eb00 0c01 	addle.w	ip, r0, r1
 8019c84:	186d      	addle	r5, r5, r1
 8019c86:	005b      	lsls	r3, r3, #1
 8019c88:	f1be 0e01 	subs.w	lr, lr, #1
 8019c8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019c90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019c94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019c98:	d1ed      	bne.n	8019c76 <__ieee754_sqrt+0x8a>
 8019c9a:	4674      	mov	r4, lr
 8019c9c:	2720      	movs	r7, #32
 8019c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019ca2:	4563      	cmp	r3, ip
 8019ca4:	eb01 000e 	add.w	r0, r1, lr
 8019ca8:	dc02      	bgt.n	8019cb0 <__ieee754_sqrt+0xc4>
 8019caa:	d113      	bne.n	8019cd4 <__ieee754_sqrt+0xe8>
 8019cac:	4290      	cmp	r0, r2
 8019cae:	d811      	bhi.n	8019cd4 <__ieee754_sqrt+0xe8>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	eb00 0e01 	add.w	lr, r0, r1
 8019cb6:	da57      	bge.n	8019d68 <__ieee754_sqrt+0x17c>
 8019cb8:	f1be 0f00 	cmp.w	lr, #0
 8019cbc:	db54      	blt.n	8019d68 <__ieee754_sqrt+0x17c>
 8019cbe:	f10c 0801 	add.w	r8, ip, #1
 8019cc2:	eba3 030c 	sub.w	r3, r3, ip
 8019cc6:	4290      	cmp	r0, r2
 8019cc8:	bf88      	it	hi
 8019cca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019cce:	1a12      	subs	r2, r2, r0
 8019cd0:	440c      	add	r4, r1
 8019cd2:	46c4      	mov	ip, r8
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	3f01      	subs	r7, #1
 8019cd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019cdc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019ce0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019ce4:	d1dd      	bne.n	8019ca2 <__ieee754_sqrt+0xb6>
 8019ce6:	4313      	orrs	r3, r2
 8019ce8:	d01b      	beq.n	8019d22 <__ieee754_sqrt+0x136>
 8019cea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019d98 <__ieee754_sqrt+0x1ac>
 8019cee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019d9c <__ieee754_sqrt+0x1b0>
 8019cf2:	e9da 0100 	ldrd	r0, r1, [sl]
 8019cf6:	e9db 2300 	ldrd	r2, r3, [fp]
 8019cfa:	f7e6 faf5 	bl	80002e8 <__aeabi_dsub>
 8019cfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8019d02:	4602      	mov	r2, r0
 8019d04:	460b      	mov	r3, r1
 8019d06:	4640      	mov	r0, r8
 8019d08:	4649      	mov	r1, r9
 8019d0a:	f7e6 ff21 	bl	8000b50 <__aeabi_dcmple>
 8019d0e:	b140      	cbz	r0, 8019d22 <__ieee754_sqrt+0x136>
 8019d10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019d14:	e9da 0100 	ldrd	r0, r1, [sl]
 8019d18:	e9db 2300 	ldrd	r2, r3, [fp]
 8019d1c:	d126      	bne.n	8019d6c <__ieee754_sqrt+0x180>
 8019d1e:	3501      	adds	r5, #1
 8019d20:	463c      	mov	r4, r7
 8019d22:	106a      	asrs	r2, r5, #1
 8019d24:	0863      	lsrs	r3, r4, #1
 8019d26:	07e9      	lsls	r1, r5, #31
 8019d28:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019d2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019d30:	bf48      	it	mi
 8019d32:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019d36:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019d3a:	461c      	mov	r4, r3
 8019d3c:	e76d      	b.n	8019c1a <__ieee754_sqrt+0x2e>
 8019d3e:	0ad3      	lsrs	r3, r2, #11
 8019d40:	3815      	subs	r0, #21
 8019d42:	0552      	lsls	r2, r2, #21
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d0fa      	beq.n	8019d3e <__ieee754_sqrt+0x152>
 8019d48:	02dc      	lsls	r4, r3, #11
 8019d4a:	d50a      	bpl.n	8019d62 <__ieee754_sqrt+0x176>
 8019d4c:	f1c1 0420 	rsb	r4, r1, #32
 8019d50:	fa22 f404 	lsr.w	r4, r2, r4
 8019d54:	1e4d      	subs	r5, r1, #1
 8019d56:	408a      	lsls	r2, r1
 8019d58:	4323      	orrs	r3, r4
 8019d5a:	1b41      	subs	r1, r0, r5
 8019d5c:	e772      	b.n	8019c44 <__ieee754_sqrt+0x58>
 8019d5e:	4608      	mov	r0, r1
 8019d60:	e7f0      	b.n	8019d44 <__ieee754_sqrt+0x158>
 8019d62:	005b      	lsls	r3, r3, #1
 8019d64:	3101      	adds	r1, #1
 8019d66:	e7ef      	b.n	8019d48 <__ieee754_sqrt+0x15c>
 8019d68:	46e0      	mov	r8, ip
 8019d6a:	e7aa      	b.n	8019cc2 <__ieee754_sqrt+0xd6>
 8019d6c:	f7e6 fabe 	bl	80002ec <__adddf3>
 8019d70:	e9da 8900 	ldrd	r8, r9, [sl]
 8019d74:	4602      	mov	r2, r0
 8019d76:	460b      	mov	r3, r1
 8019d78:	4640      	mov	r0, r8
 8019d7a:	4649      	mov	r1, r9
 8019d7c:	f7e6 fede 	bl	8000b3c <__aeabi_dcmplt>
 8019d80:	b120      	cbz	r0, 8019d8c <__ieee754_sqrt+0x1a0>
 8019d82:	1ca0      	adds	r0, r4, #2
 8019d84:	bf08      	it	eq
 8019d86:	3501      	addeq	r5, #1
 8019d88:	3402      	adds	r4, #2
 8019d8a:	e7ca      	b.n	8019d22 <__ieee754_sqrt+0x136>
 8019d8c:	3401      	adds	r4, #1
 8019d8e:	f024 0401 	bic.w	r4, r4, #1
 8019d92:	e7c6      	b.n	8019d22 <__ieee754_sqrt+0x136>
 8019d94:	7ff00000 	.word	0x7ff00000
 8019d98:	200010a0 	.word	0x200010a0
 8019d9c:	200010a8 	.word	0x200010a8

08019da0 <__ieee754_sqrtf>:
 8019da0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019da4:	4770      	bx	lr
	...

08019da8 <floor>:
 8019da8:	ec51 0b10 	vmov	r0, r1, d0
 8019dac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019db4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019db8:	2e13      	cmp	r6, #19
 8019dba:	ee10 5a10 	vmov	r5, s0
 8019dbe:	ee10 8a10 	vmov	r8, s0
 8019dc2:	460c      	mov	r4, r1
 8019dc4:	dc31      	bgt.n	8019e2a <floor+0x82>
 8019dc6:	2e00      	cmp	r6, #0
 8019dc8:	da14      	bge.n	8019df4 <floor+0x4c>
 8019dca:	a333      	add	r3, pc, #204	; (adr r3, 8019e98 <floor+0xf0>)
 8019dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd0:	f7e6 fa8c 	bl	80002ec <__adddf3>
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	f7e6 fece 	bl	8000b78 <__aeabi_dcmpgt>
 8019ddc:	b138      	cbz	r0, 8019dee <floor+0x46>
 8019dde:	2c00      	cmp	r4, #0
 8019de0:	da53      	bge.n	8019e8a <floor+0xe2>
 8019de2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8019de6:	4325      	orrs	r5, r4
 8019de8:	d052      	beq.n	8019e90 <floor+0xe8>
 8019dea:	4c2d      	ldr	r4, [pc, #180]	; (8019ea0 <floor+0xf8>)
 8019dec:	2500      	movs	r5, #0
 8019dee:	4621      	mov	r1, r4
 8019df0:	4628      	mov	r0, r5
 8019df2:	e024      	b.n	8019e3e <floor+0x96>
 8019df4:	4f2b      	ldr	r7, [pc, #172]	; (8019ea4 <floor+0xfc>)
 8019df6:	4137      	asrs	r7, r6
 8019df8:	ea01 0307 	and.w	r3, r1, r7
 8019dfc:	4303      	orrs	r3, r0
 8019dfe:	d01e      	beq.n	8019e3e <floor+0x96>
 8019e00:	a325      	add	r3, pc, #148	; (adr r3, 8019e98 <floor+0xf0>)
 8019e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e06:	f7e6 fa71 	bl	80002ec <__adddf3>
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	f7e6 feb3 	bl	8000b78 <__aeabi_dcmpgt>
 8019e12:	2800      	cmp	r0, #0
 8019e14:	d0eb      	beq.n	8019dee <floor+0x46>
 8019e16:	2c00      	cmp	r4, #0
 8019e18:	bfbe      	ittt	lt
 8019e1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019e1e:	4133      	asrlt	r3, r6
 8019e20:	18e4      	addlt	r4, r4, r3
 8019e22:	ea24 0407 	bic.w	r4, r4, r7
 8019e26:	2500      	movs	r5, #0
 8019e28:	e7e1      	b.n	8019dee <floor+0x46>
 8019e2a:	2e33      	cmp	r6, #51	; 0x33
 8019e2c:	dd0b      	ble.n	8019e46 <floor+0x9e>
 8019e2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019e32:	d104      	bne.n	8019e3e <floor+0x96>
 8019e34:	ee10 2a10 	vmov	r2, s0
 8019e38:	460b      	mov	r3, r1
 8019e3a:	f7e6 fa57 	bl	80002ec <__adddf3>
 8019e3e:	ec41 0b10 	vmov	d0, r0, r1
 8019e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e46:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8019e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8019e4e:	40df      	lsrs	r7, r3
 8019e50:	4238      	tst	r0, r7
 8019e52:	d0f4      	beq.n	8019e3e <floor+0x96>
 8019e54:	a310      	add	r3, pc, #64	; (adr r3, 8019e98 <floor+0xf0>)
 8019e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e5a:	f7e6 fa47 	bl	80002ec <__adddf3>
 8019e5e:	2200      	movs	r2, #0
 8019e60:	2300      	movs	r3, #0
 8019e62:	f7e6 fe89 	bl	8000b78 <__aeabi_dcmpgt>
 8019e66:	2800      	cmp	r0, #0
 8019e68:	d0c1      	beq.n	8019dee <floor+0x46>
 8019e6a:	2c00      	cmp	r4, #0
 8019e6c:	da0a      	bge.n	8019e84 <floor+0xdc>
 8019e6e:	2e14      	cmp	r6, #20
 8019e70:	d101      	bne.n	8019e76 <floor+0xce>
 8019e72:	3401      	adds	r4, #1
 8019e74:	e006      	b.n	8019e84 <floor+0xdc>
 8019e76:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	40b3      	lsls	r3, r6
 8019e7e:	441d      	add	r5, r3
 8019e80:	45a8      	cmp	r8, r5
 8019e82:	d8f6      	bhi.n	8019e72 <floor+0xca>
 8019e84:	ea25 0507 	bic.w	r5, r5, r7
 8019e88:	e7b1      	b.n	8019dee <floor+0x46>
 8019e8a:	2500      	movs	r5, #0
 8019e8c:	462c      	mov	r4, r5
 8019e8e:	e7ae      	b.n	8019dee <floor+0x46>
 8019e90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019e94:	e7ab      	b.n	8019dee <floor+0x46>
 8019e96:	bf00      	nop
 8019e98:	8800759c 	.word	0x8800759c
 8019e9c:	7e37e43c 	.word	0x7e37e43c
 8019ea0:	bff00000 	.word	0xbff00000
 8019ea4:	000fffff 	.word	0x000fffff

08019ea8 <round>:
 8019ea8:	ec53 2b10 	vmov	r2, r3, d0
 8019eac:	b570      	push	{r4, r5, r6, lr}
 8019eae:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8019eb2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8019eb6:	2813      	cmp	r0, #19
 8019eb8:	ee10 5a10 	vmov	r5, s0
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	dc18      	bgt.n	8019ef2 <round+0x4a>
 8019ec0:	2800      	cmp	r0, #0
 8019ec2:	da09      	bge.n	8019ed8 <round+0x30>
 8019ec4:	3001      	adds	r0, #1
 8019ec6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8019eca:	d103      	bne.n	8019ed4 <round+0x2c>
 8019ecc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8019ed0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	e02a      	b.n	8019f2e <round+0x86>
 8019ed8:	4c16      	ldr	r4, [pc, #88]	; (8019f34 <round+0x8c>)
 8019eda:	4104      	asrs	r4, r0
 8019edc:	ea03 0604 	and.w	r6, r3, r4
 8019ee0:	4316      	orrs	r6, r2
 8019ee2:	d011      	beq.n	8019f08 <round+0x60>
 8019ee4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019ee8:	4103      	asrs	r3, r0
 8019eea:	440b      	add	r3, r1
 8019eec:	ea23 0104 	bic.w	r1, r3, r4
 8019ef0:	e7f0      	b.n	8019ed4 <round+0x2c>
 8019ef2:	2833      	cmp	r0, #51	; 0x33
 8019ef4:	dd0b      	ble.n	8019f0e <round+0x66>
 8019ef6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019efa:	d105      	bne.n	8019f08 <round+0x60>
 8019efc:	ee10 0a10 	vmov	r0, s0
 8019f00:	f7e6 f9f4 	bl	80002ec <__adddf3>
 8019f04:	4602      	mov	r2, r0
 8019f06:	460b      	mov	r3, r1
 8019f08:	ec43 2b10 	vmov	d0, r2, r3
 8019f0c:	bd70      	pop	{r4, r5, r6, pc}
 8019f0e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8019f12:	f04f 34ff 	mov.w	r4, #4294967295
 8019f16:	40f4      	lsrs	r4, r6
 8019f18:	4214      	tst	r4, r2
 8019f1a:	d0f5      	beq.n	8019f08 <round+0x60>
 8019f1c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8019f20:	2301      	movs	r3, #1
 8019f22:	4083      	lsls	r3, r0
 8019f24:	195b      	adds	r3, r3, r5
 8019f26:	bf28      	it	cs
 8019f28:	3101      	addcs	r1, #1
 8019f2a:	ea23 0304 	bic.w	r3, r3, r4
 8019f2e:	461a      	mov	r2, r3
 8019f30:	460b      	mov	r3, r1
 8019f32:	e7e9      	b.n	8019f08 <round+0x60>
 8019f34:	000fffff 	.word	0x000fffff

08019f38 <__kernel_cos>:
 8019f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f3c:	ec57 6b10 	vmov	r6, r7, d0
 8019f40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019f44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019f48:	ed8d 1b00 	vstr	d1, [sp]
 8019f4c:	da07      	bge.n	8019f5e <__kernel_cos+0x26>
 8019f4e:	ee10 0a10 	vmov	r0, s0
 8019f52:	4639      	mov	r1, r7
 8019f54:	f7e6 fe30 	bl	8000bb8 <__aeabi_d2iz>
 8019f58:	2800      	cmp	r0, #0
 8019f5a:	f000 8088 	beq.w	801a06e <__kernel_cos+0x136>
 8019f5e:	4632      	mov	r2, r6
 8019f60:	463b      	mov	r3, r7
 8019f62:	4630      	mov	r0, r6
 8019f64:	4639      	mov	r1, r7
 8019f66:	f7e6 fb77 	bl	8000658 <__aeabi_dmul>
 8019f6a:	4b51      	ldr	r3, [pc, #324]	; (801a0b0 <__kernel_cos+0x178>)
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	4604      	mov	r4, r0
 8019f70:	460d      	mov	r5, r1
 8019f72:	f7e6 fb71 	bl	8000658 <__aeabi_dmul>
 8019f76:	a340      	add	r3, pc, #256	; (adr r3, 801a078 <__kernel_cos+0x140>)
 8019f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7c:	4682      	mov	sl, r0
 8019f7e:	468b      	mov	fp, r1
 8019f80:	4620      	mov	r0, r4
 8019f82:	4629      	mov	r1, r5
 8019f84:	f7e6 fb68 	bl	8000658 <__aeabi_dmul>
 8019f88:	a33d      	add	r3, pc, #244	; (adr r3, 801a080 <__kernel_cos+0x148>)
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	f7e6 f9ad 	bl	80002ec <__adddf3>
 8019f92:	4622      	mov	r2, r4
 8019f94:	462b      	mov	r3, r5
 8019f96:	f7e6 fb5f 	bl	8000658 <__aeabi_dmul>
 8019f9a:	a33b      	add	r3, pc, #236	; (adr r3, 801a088 <__kernel_cos+0x150>)
 8019f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa0:	f7e6 f9a2 	bl	80002e8 <__aeabi_dsub>
 8019fa4:	4622      	mov	r2, r4
 8019fa6:	462b      	mov	r3, r5
 8019fa8:	f7e6 fb56 	bl	8000658 <__aeabi_dmul>
 8019fac:	a338      	add	r3, pc, #224	; (adr r3, 801a090 <__kernel_cos+0x158>)
 8019fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb2:	f7e6 f99b 	bl	80002ec <__adddf3>
 8019fb6:	4622      	mov	r2, r4
 8019fb8:	462b      	mov	r3, r5
 8019fba:	f7e6 fb4d 	bl	8000658 <__aeabi_dmul>
 8019fbe:	a336      	add	r3, pc, #216	; (adr r3, 801a098 <__kernel_cos+0x160>)
 8019fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc4:	f7e6 f990 	bl	80002e8 <__aeabi_dsub>
 8019fc8:	4622      	mov	r2, r4
 8019fca:	462b      	mov	r3, r5
 8019fcc:	f7e6 fb44 	bl	8000658 <__aeabi_dmul>
 8019fd0:	a333      	add	r3, pc, #204	; (adr r3, 801a0a0 <__kernel_cos+0x168>)
 8019fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd6:	f7e6 f989 	bl	80002ec <__adddf3>
 8019fda:	4622      	mov	r2, r4
 8019fdc:	462b      	mov	r3, r5
 8019fde:	f7e6 fb3b 	bl	8000658 <__aeabi_dmul>
 8019fe2:	4622      	mov	r2, r4
 8019fe4:	462b      	mov	r3, r5
 8019fe6:	f7e6 fb37 	bl	8000658 <__aeabi_dmul>
 8019fea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019fee:	4604      	mov	r4, r0
 8019ff0:	460d      	mov	r5, r1
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	4639      	mov	r1, r7
 8019ff6:	f7e6 fb2f 	bl	8000658 <__aeabi_dmul>
 8019ffa:	460b      	mov	r3, r1
 8019ffc:	4602      	mov	r2, r0
 8019ffe:	4629      	mov	r1, r5
 801a000:	4620      	mov	r0, r4
 801a002:	f7e6 f971 	bl	80002e8 <__aeabi_dsub>
 801a006:	4b2b      	ldr	r3, [pc, #172]	; (801a0b4 <__kernel_cos+0x17c>)
 801a008:	4598      	cmp	r8, r3
 801a00a:	4606      	mov	r6, r0
 801a00c:	460f      	mov	r7, r1
 801a00e:	dc10      	bgt.n	801a032 <__kernel_cos+0xfa>
 801a010:	4602      	mov	r2, r0
 801a012:	460b      	mov	r3, r1
 801a014:	4650      	mov	r0, sl
 801a016:	4659      	mov	r1, fp
 801a018:	f7e6 f966 	bl	80002e8 <__aeabi_dsub>
 801a01c:	460b      	mov	r3, r1
 801a01e:	4926      	ldr	r1, [pc, #152]	; (801a0b8 <__kernel_cos+0x180>)
 801a020:	4602      	mov	r2, r0
 801a022:	2000      	movs	r0, #0
 801a024:	f7e6 f960 	bl	80002e8 <__aeabi_dsub>
 801a028:	ec41 0b10 	vmov	d0, r0, r1
 801a02c:	b003      	add	sp, #12
 801a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a032:	4b22      	ldr	r3, [pc, #136]	; (801a0bc <__kernel_cos+0x184>)
 801a034:	4920      	ldr	r1, [pc, #128]	; (801a0b8 <__kernel_cos+0x180>)
 801a036:	4598      	cmp	r8, r3
 801a038:	bfcc      	ite	gt
 801a03a:	4d21      	ldrgt	r5, [pc, #132]	; (801a0c0 <__kernel_cos+0x188>)
 801a03c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a040:	2400      	movs	r4, #0
 801a042:	4622      	mov	r2, r4
 801a044:	462b      	mov	r3, r5
 801a046:	2000      	movs	r0, #0
 801a048:	f7e6 f94e 	bl	80002e8 <__aeabi_dsub>
 801a04c:	4622      	mov	r2, r4
 801a04e:	4680      	mov	r8, r0
 801a050:	4689      	mov	r9, r1
 801a052:	462b      	mov	r3, r5
 801a054:	4650      	mov	r0, sl
 801a056:	4659      	mov	r1, fp
 801a058:	f7e6 f946 	bl	80002e8 <__aeabi_dsub>
 801a05c:	4632      	mov	r2, r6
 801a05e:	463b      	mov	r3, r7
 801a060:	f7e6 f942 	bl	80002e8 <__aeabi_dsub>
 801a064:	4602      	mov	r2, r0
 801a066:	460b      	mov	r3, r1
 801a068:	4640      	mov	r0, r8
 801a06a:	4649      	mov	r1, r9
 801a06c:	e7da      	b.n	801a024 <__kernel_cos+0xec>
 801a06e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a0a8 <__kernel_cos+0x170>
 801a072:	e7db      	b.n	801a02c <__kernel_cos+0xf4>
 801a074:	f3af 8000 	nop.w
 801a078:	be8838d4 	.word	0xbe8838d4
 801a07c:	bda8fae9 	.word	0xbda8fae9
 801a080:	bdb4b1c4 	.word	0xbdb4b1c4
 801a084:	3e21ee9e 	.word	0x3e21ee9e
 801a088:	809c52ad 	.word	0x809c52ad
 801a08c:	3e927e4f 	.word	0x3e927e4f
 801a090:	19cb1590 	.word	0x19cb1590
 801a094:	3efa01a0 	.word	0x3efa01a0
 801a098:	16c15177 	.word	0x16c15177
 801a09c:	3f56c16c 	.word	0x3f56c16c
 801a0a0:	5555554c 	.word	0x5555554c
 801a0a4:	3fa55555 	.word	0x3fa55555
 801a0a8:	00000000 	.word	0x00000000
 801a0ac:	3ff00000 	.word	0x3ff00000
 801a0b0:	3fe00000 	.word	0x3fe00000
 801a0b4:	3fd33332 	.word	0x3fd33332
 801a0b8:	3ff00000 	.word	0x3ff00000
 801a0bc:	3fe90000 	.word	0x3fe90000
 801a0c0:	3fd20000 	.word	0x3fd20000
 801a0c4:	00000000 	.word	0x00000000

0801a0c8 <__kernel_sin>:
 801a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0cc:	ed2d 8b04 	vpush	{d8-d9}
 801a0d0:	eeb0 8a41 	vmov.f32	s16, s2
 801a0d4:	eef0 8a61 	vmov.f32	s17, s3
 801a0d8:	ec55 4b10 	vmov	r4, r5, d0
 801a0dc:	b083      	sub	sp, #12
 801a0de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a0e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a0e6:	9001      	str	r0, [sp, #4]
 801a0e8:	da06      	bge.n	801a0f8 <__kernel_sin+0x30>
 801a0ea:	ee10 0a10 	vmov	r0, s0
 801a0ee:	4629      	mov	r1, r5
 801a0f0:	f7e6 fd62 	bl	8000bb8 <__aeabi_d2iz>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	d051      	beq.n	801a19c <__kernel_sin+0xd4>
 801a0f8:	4622      	mov	r2, r4
 801a0fa:	462b      	mov	r3, r5
 801a0fc:	4620      	mov	r0, r4
 801a0fe:	4629      	mov	r1, r5
 801a100:	f7e6 faaa 	bl	8000658 <__aeabi_dmul>
 801a104:	4682      	mov	sl, r0
 801a106:	468b      	mov	fp, r1
 801a108:	4602      	mov	r2, r0
 801a10a:	460b      	mov	r3, r1
 801a10c:	4620      	mov	r0, r4
 801a10e:	4629      	mov	r1, r5
 801a110:	f7e6 faa2 	bl	8000658 <__aeabi_dmul>
 801a114:	a341      	add	r3, pc, #260	; (adr r3, 801a21c <__kernel_sin+0x154>)
 801a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a11a:	4680      	mov	r8, r0
 801a11c:	4689      	mov	r9, r1
 801a11e:	4650      	mov	r0, sl
 801a120:	4659      	mov	r1, fp
 801a122:	f7e6 fa99 	bl	8000658 <__aeabi_dmul>
 801a126:	a33f      	add	r3, pc, #252	; (adr r3, 801a224 <__kernel_sin+0x15c>)
 801a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a12c:	f7e6 f8dc 	bl	80002e8 <__aeabi_dsub>
 801a130:	4652      	mov	r2, sl
 801a132:	465b      	mov	r3, fp
 801a134:	f7e6 fa90 	bl	8000658 <__aeabi_dmul>
 801a138:	a33c      	add	r3, pc, #240	; (adr r3, 801a22c <__kernel_sin+0x164>)
 801a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13e:	f7e6 f8d5 	bl	80002ec <__adddf3>
 801a142:	4652      	mov	r2, sl
 801a144:	465b      	mov	r3, fp
 801a146:	f7e6 fa87 	bl	8000658 <__aeabi_dmul>
 801a14a:	a33a      	add	r3, pc, #232	; (adr r3, 801a234 <__kernel_sin+0x16c>)
 801a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a150:	f7e6 f8ca 	bl	80002e8 <__aeabi_dsub>
 801a154:	4652      	mov	r2, sl
 801a156:	465b      	mov	r3, fp
 801a158:	f7e6 fa7e 	bl	8000658 <__aeabi_dmul>
 801a15c:	a337      	add	r3, pc, #220	; (adr r3, 801a23c <__kernel_sin+0x174>)
 801a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a162:	f7e6 f8c3 	bl	80002ec <__adddf3>
 801a166:	9b01      	ldr	r3, [sp, #4]
 801a168:	4606      	mov	r6, r0
 801a16a:	460f      	mov	r7, r1
 801a16c:	b9eb      	cbnz	r3, 801a1aa <__kernel_sin+0xe2>
 801a16e:	4602      	mov	r2, r0
 801a170:	460b      	mov	r3, r1
 801a172:	4650      	mov	r0, sl
 801a174:	4659      	mov	r1, fp
 801a176:	f7e6 fa6f 	bl	8000658 <__aeabi_dmul>
 801a17a:	a325      	add	r3, pc, #148	; (adr r3, 801a210 <__kernel_sin+0x148>)
 801a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a180:	f7e6 f8b2 	bl	80002e8 <__aeabi_dsub>
 801a184:	4642      	mov	r2, r8
 801a186:	464b      	mov	r3, r9
 801a188:	f7e6 fa66 	bl	8000658 <__aeabi_dmul>
 801a18c:	4602      	mov	r2, r0
 801a18e:	460b      	mov	r3, r1
 801a190:	4620      	mov	r0, r4
 801a192:	4629      	mov	r1, r5
 801a194:	f7e6 f8aa 	bl	80002ec <__adddf3>
 801a198:	4604      	mov	r4, r0
 801a19a:	460d      	mov	r5, r1
 801a19c:	ec45 4b10 	vmov	d0, r4, r5
 801a1a0:	b003      	add	sp, #12
 801a1a2:	ecbd 8b04 	vpop	{d8-d9}
 801a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1aa:	4b1b      	ldr	r3, [pc, #108]	; (801a218 <__kernel_sin+0x150>)
 801a1ac:	ec51 0b18 	vmov	r0, r1, d8
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	f7e6 fa51 	bl	8000658 <__aeabi_dmul>
 801a1b6:	4632      	mov	r2, r6
 801a1b8:	ec41 0b19 	vmov	d9, r0, r1
 801a1bc:	463b      	mov	r3, r7
 801a1be:	4640      	mov	r0, r8
 801a1c0:	4649      	mov	r1, r9
 801a1c2:	f7e6 fa49 	bl	8000658 <__aeabi_dmul>
 801a1c6:	4602      	mov	r2, r0
 801a1c8:	460b      	mov	r3, r1
 801a1ca:	ec51 0b19 	vmov	r0, r1, d9
 801a1ce:	f7e6 f88b 	bl	80002e8 <__aeabi_dsub>
 801a1d2:	4652      	mov	r2, sl
 801a1d4:	465b      	mov	r3, fp
 801a1d6:	f7e6 fa3f 	bl	8000658 <__aeabi_dmul>
 801a1da:	ec53 2b18 	vmov	r2, r3, d8
 801a1de:	f7e6 f883 	bl	80002e8 <__aeabi_dsub>
 801a1e2:	a30b      	add	r3, pc, #44	; (adr r3, 801a210 <__kernel_sin+0x148>)
 801a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e8:	4606      	mov	r6, r0
 801a1ea:	460f      	mov	r7, r1
 801a1ec:	4640      	mov	r0, r8
 801a1ee:	4649      	mov	r1, r9
 801a1f0:	f7e6 fa32 	bl	8000658 <__aeabi_dmul>
 801a1f4:	4602      	mov	r2, r0
 801a1f6:	460b      	mov	r3, r1
 801a1f8:	4630      	mov	r0, r6
 801a1fa:	4639      	mov	r1, r7
 801a1fc:	f7e6 f876 	bl	80002ec <__adddf3>
 801a200:	4602      	mov	r2, r0
 801a202:	460b      	mov	r3, r1
 801a204:	4620      	mov	r0, r4
 801a206:	4629      	mov	r1, r5
 801a208:	f7e6 f86e 	bl	80002e8 <__aeabi_dsub>
 801a20c:	e7c4      	b.n	801a198 <__kernel_sin+0xd0>
 801a20e:	bf00      	nop
 801a210:	55555549 	.word	0x55555549
 801a214:	3fc55555 	.word	0x3fc55555
 801a218:	3fe00000 	.word	0x3fe00000
 801a21c:	5acfd57c 	.word	0x5acfd57c
 801a220:	3de5d93a 	.word	0x3de5d93a
 801a224:	8a2b9ceb 	.word	0x8a2b9ceb
 801a228:	3e5ae5e6 	.word	0x3e5ae5e6
 801a22c:	57b1fe7d 	.word	0x57b1fe7d
 801a230:	3ec71de3 	.word	0x3ec71de3
 801a234:	19c161d5 	.word	0x19c161d5
 801a238:	3f2a01a0 	.word	0x3f2a01a0
 801a23c:	1110f8a6 	.word	0x1110f8a6
 801a240:	3f811111 	.word	0x3f811111
 801a244:	00000000 	.word	0x00000000

0801a248 <__kernel_tan>:
 801a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a24c:	ed2d 8b06 	vpush	{d8-d10}
 801a250:	ec5b ab10 	vmov	sl, fp, d0
 801a254:	4be0      	ldr	r3, [pc, #896]	; (801a5d8 <__kernel_tan+0x390>)
 801a256:	b083      	sub	sp, #12
 801a258:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801a25c:	429f      	cmp	r7, r3
 801a25e:	ec59 8b11 	vmov	r8, r9, d1
 801a262:	4606      	mov	r6, r0
 801a264:	f8cd b000 	str.w	fp, [sp]
 801a268:	dc61      	bgt.n	801a32e <__kernel_tan+0xe6>
 801a26a:	ee10 0a10 	vmov	r0, s0
 801a26e:	4659      	mov	r1, fp
 801a270:	f7e6 fca2 	bl	8000bb8 <__aeabi_d2iz>
 801a274:	4605      	mov	r5, r0
 801a276:	2800      	cmp	r0, #0
 801a278:	f040 8083 	bne.w	801a382 <__kernel_tan+0x13a>
 801a27c:	1c73      	adds	r3, r6, #1
 801a27e:	4652      	mov	r2, sl
 801a280:	4313      	orrs	r3, r2
 801a282:	433b      	orrs	r3, r7
 801a284:	d112      	bne.n	801a2ac <__kernel_tan+0x64>
 801a286:	ec4b ab10 	vmov	d0, sl, fp
 801a28a:	f001 f91b 	bl	801b4c4 <fabs>
 801a28e:	49d3      	ldr	r1, [pc, #844]	; (801a5dc <__kernel_tan+0x394>)
 801a290:	ec53 2b10 	vmov	r2, r3, d0
 801a294:	2000      	movs	r0, #0
 801a296:	f7e6 fb09 	bl	80008ac <__aeabi_ddiv>
 801a29a:	4682      	mov	sl, r0
 801a29c:	468b      	mov	fp, r1
 801a29e:	ec4b ab10 	vmov	d0, sl, fp
 801a2a2:	b003      	add	sp, #12
 801a2a4:	ecbd 8b06 	vpop	{d8-d10}
 801a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ac:	2e01      	cmp	r6, #1
 801a2ae:	d0f6      	beq.n	801a29e <__kernel_tan+0x56>
 801a2b0:	4642      	mov	r2, r8
 801a2b2:	464b      	mov	r3, r9
 801a2b4:	4650      	mov	r0, sl
 801a2b6:	4659      	mov	r1, fp
 801a2b8:	f7e6 f818 	bl	80002ec <__adddf3>
 801a2bc:	4602      	mov	r2, r0
 801a2be:	460b      	mov	r3, r1
 801a2c0:	460f      	mov	r7, r1
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	49c6      	ldr	r1, [pc, #792]	; (801a5e0 <__kernel_tan+0x398>)
 801a2c6:	f7e6 faf1 	bl	80008ac <__aeabi_ddiv>
 801a2ca:	e9cd 0100 	strd	r0, r1, [sp]
 801a2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a2d2:	462e      	mov	r6, r5
 801a2d4:	4652      	mov	r2, sl
 801a2d6:	462c      	mov	r4, r5
 801a2d8:	4630      	mov	r0, r6
 801a2da:	461d      	mov	r5, r3
 801a2dc:	4639      	mov	r1, r7
 801a2de:	465b      	mov	r3, fp
 801a2e0:	f7e6 f802 	bl	80002e8 <__aeabi_dsub>
 801a2e4:	4602      	mov	r2, r0
 801a2e6:	460b      	mov	r3, r1
 801a2e8:	4640      	mov	r0, r8
 801a2ea:	4649      	mov	r1, r9
 801a2ec:	f7e5 fffc 	bl	80002e8 <__aeabi_dsub>
 801a2f0:	4632      	mov	r2, r6
 801a2f2:	462b      	mov	r3, r5
 801a2f4:	f7e6 f9b0 	bl	8000658 <__aeabi_dmul>
 801a2f8:	4632      	mov	r2, r6
 801a2fa:	4680      	mov	r8, r0
 801a2fc:	4689      	mov	r9, r1
 801a2fe:	462b      	mov	r3, r5
 801a300:	4630      	mov	r0, r6
 801a302:	4639      	mov	r1, r7
 801a304:	f7e6 f9a8 	bl	8000658 <__aeabi_dmul>
 801a308:	4bb4      	ldr	r3, [pc, #720]	; (801a5dc <__kernel_tan+0x394>)
 801a30a:	2200      	movs	r2, #0
 801a30c:	f7e5 ffee 	bl	80002ec <__adddf3>
 801a310:	4602      	mov	r2, r0
 801a312:	460b      	mov	r3, r1
 801a314:	4640      	mov	r0, r8
 801a316:	4649      	mov	r1, r9
 801a318:	f7e5 ffe8 	bl	80002ec <__adddf3>
 801a31c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a320:	f7e6 f99a 	bl	8000658 <__aeabi_dmul>
 801a324:	4622      	mov	r2, r4
 801a326:	462b      	mov	r3, r5
 801a328:	f7e5 ffe0 	bl	80002ec <__adddf3>
 801a32c:	e7b5      	b.n	801a29a <__kernel_tan+0x52>
 801a32e:	4bad      	ldr	r3, [pc, #692]	; (801a5e4 <__kernel_tan+0x39c>)
 801a330:	429f      	cmp	r7, r3
 801a332:	dd26      	ble.n	801a382 <__kernel_tan+0x13a>
 801a334:	9b00      	ldr	r3, [sp, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	da09      	bge.n	801a34e <__kernel_tan+0x106>
 801a33a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a33e:	469b      	mov	fp, r3
 801a340:	ee10 aa10 	vmov	sl, s0
 801a344:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a348:	ee11 8a10 	vmov	r8, s2
 801a34c:	4699      	mov	r9, r3
 801a34e:	4652      	mov	r2, sl
 801a350:	465b      	mov	r3, fp
 801a352:	a183      	add	r1, pc, #524	; (adr r1, 801a560 <__kernel_tan+0x318>)
 801a354:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a358:	f7e5 ffc6 	bl	80002e8 <__aeabi_dsub>
 801a35c:	4642      	mov	r2, r8
 801a35e:	464b      	mov	r3, r9
 801a360:	4604      	mov	r4, r0
 801a362:	460d      	mov	r5, r1
 801a364:	a180      	add	r1, pc, #512	; (adr r1, 801a568 <__kernel_tan+0x320>)
 801a366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a36a:	f7e5 ffbd 	bl	80002e8 <__aeabi_dsub>
 801a36e:	4622      	mov	r2, r4
 801a370:	462b      	mov	r3, r5
 801a372:	f7e5 ffbb 	bl	80002ec <__adddf3>
 801a376:	f04f 0800 	mov.w	r8, #0
 801a37a:	4682      	mov	sl, r0
 801a37c:	468b      	mov	fp, r1
 801a37e:	f04f 0900 	mov.w	r9, #0
 801a382:	4652      	mov	r2, sl
 801a384:	465b      	mov	r3, fp
 801a386:	4650      	mov	r0, sl
 801a388:	4659      	mov	r1, fp
 801a38a:	f7e6 f965 	bl	8000658 <__aeabi_dmul>
 801a38e:	4602      	mov	r2, r0
 801a390:	460b      	mov	r3, r1
 801a392:	ec43 2b18 	vmov	d8, r2, r3
 801a396:	f7e6 f95f 	bl	8000658 <__aeabi_dmul>
 801a39a:	ec53 2b18 	vmov	r2, r3, d8
 801a39e:	4604      	mov	r4, r0
 801a3a0:	460d      	mov	r5, r1
 801a3a2:	4650      	mov	r0, sl
 801a3a4:	4659      	mov	r1, fp
 801a3a6:	f7e6 f957 	bl	8000658 <__aeabi_dmul>
 801a3aa:	a371      	add	r3, pc, #452	; (adr r3, 801a570 <__kernel_tan+0x328>)
 801a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b0:	ec41 0b19 	vmov	d9, r0, r1
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	4629      	mov	r1, r5
 801a3b8:	f7e6 f94e 	bl	8000658 <__aeabi_dmul>
 801a3bc:	a36e      	add	r3, pc, #440	; (adr r3, 801a578 <__kernel_tan+0x330>)
 801a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c2:	f7e5 ff93 	bl	80002ec <__adddf3>
 801a3c6:	4622      	mov	r2, r4
 801a3c8:	462b      	mov	r3, r5
 801a3ca:	f7e6 f945 	bl	8000658 <__aeabi_dmul>
 801a3ce:	a36c      	add	r3, pc, #432	; (adr r3, 801a580 <__kernel_tan+0x338>)
 801a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3d4:	f7e5 ff8a 	bl	80002ec <__adddf3>
 801a3d8:	4622      	mov	r2, r4
 801a3da:	462b      	mov	r3, r5
 801a3dc:	f7e6 f93c 	bl	8000658 <__aeabi_dmul>
 801a3e0:	a369      	add	r3, pc, #420	; (adr r3, 801a588 <__kernel_tan+0x340>)
 801a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3e6:	f7e5 ff81 	bl	80002ec <__adddf3>
 801a3ea:	4622      	mov	r2, r4
 801a3ec:	462b      	mov	r3, r5
 801a3ee:	f7e6 f933 	bl	8000658 <__aeabi_dmul>
 801a3f2:	a367      	add	r3, pc, #412	; (adr r3, 801a590 <__kernel_tan+0x348>)
 801a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f8:	f7e5 ff78 	bl	80002ec <__adddf3>
 801a3fc:	4622      	mov	r2, r4
 801a3fe:	462b      	mov	r3, r5
 801a400:	f7e6 f92a 	bl	8000658 <__aeabi_dmul>
 801a404:	a364      	add	r3, pc, #400	; (adr r3, 801a598 <__kernel_tan+0x350>)
 801a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a40a:	f7e5 ff6f 	bl	80002ec <__adddf3>
 801a40e:	ec53 2b18 	vmov	r2, r3, d8
 801a412:	f7e6 f921 	bl	8000658 <__aeabi_dmul>
 801a416:	a362      	add	r3, pc, #392	; (adr r3, 801a5a0 <__kernel_tan+0x358>)
 801a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a41c:	ec41 0b1a 	vmov	d10, r0, r1
 801a420:	4620      	mov	r0, r4
 801a422:	4629      	mov	r1, r5
 801a424:	f7e6 f918 	bl	8000658 <__aeabi_dmul>
 801a428:	a35f      	add	r3, pc, #380	; (adr r3, 801a5a8 <__kernel_tan+0x360>)
 801a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42e:	f7e5 ff5d 	bl	80002ec <__adddf3>
 801a432:	4622      	mov	r2, r4
 801a434:	462b      	mov	r3, r5
 801a436:	f7e6 f90f 	bl	8000658 <__aeabi_dmul>
 801a43a:	a35d      	add	r3, pc, #372	; (adr r3, 801a5b0 <__kernel_tan+0x368>)
 801a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a440:	f7e5 ff54 	bl	80002ec <__adddf3>
 801a444:	4622      	mov	r2, r4
 801a446:	462b      	mov	r3, r5
 801a448:	f7e6 f906 	bl	8000658 <__aeabi_dmul>
 801a44c:	a35a      	add	r3, pc, #360	; (adr r3, 801a5b8 <__kernel_tan+0x370>)
 801a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a452:	f7e5 ff4b 	bl	80002ec <__adddf3>
 801a456:	4622      	mov	r2, r4
 801a458:	462b      	mov	r3, r5
 801a45a:	f7e6 f8fd 	bl	8000658 <__aeabi_dmul>
 801a45e:	a358      	add	r3, pc, #352	; (adr r3, 801a5c0 <__kernel_tan+0x378>)
 801a460:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a464:	f7e5 ff42 	bl	80002ec <__adddf3>
 801a468:	4622      	mov	r2, r4
 801a46a:	462b      	mov	r3, r5
 801a46c:	f7e6 f8f4 	bl	8000658 <__aeabi_dmul>
 801a470:	a355      	add	r3, pc, #340	; (adr r3, 801a5c8 <__kernel_tan+0x380>)
 801a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a476:	f7e5 ff39 	bl	80002ec <__adddf3>
 801a47a:	4602      	mov	r2, r0
 801a47c:	460b      	mov	r3, r1
 801a47e:	ec51 0b1a 	vmov	r0, r1, d10
 801a482:	f7e5 ff33 	bl	80002ec <__adddf3>
 801a486:	ec53 2b19 	vmov	r2, r3, d9
 801a48a:	f7e6 f8e5 	bl	8000658 <__aeabi_dmul>
 801a48e:	4642      	mov	r2, r8
 801a490:	464b      	mov	r3, r9
 801a492:	f7e5 ff2b 	bl	80002ec <__adddf3>
 801a496:	ec53 2b18 	vmov	r2, r3, d8
 801a49a:	f7e6 f8dd 	bl	8000658 <__aeabi_dmul>
 801a49e:	4642      	mov	r2, r8
 801a4a0:	464b      	mov	r3, r9
 801a4a2:	f7e5 ff23 	bl	80002ec <__adddf3>
 801a4a6:	a34a      	add	r3, pc, #296	; (adr r3, 801a5d0 <__kernel_tan+0x388>)
 801a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ac:	4604      	mov	r4, r0
 801a4ae:	460d      	mov	r5, r1
 801a4b0:	ec51 0b19 	vmov	r0, r1, d9
 801a4b4:	f7e6 f8d0 	bl	8000658 <__aeabi_dmul>
 801a4b8:	4622      	mov	r2, r4
 801a4ba:	462b      	mov	r3, r5
 801a4bc:	f7e5 ff16 	bl	80002ec <__adddf3>
 801a4c0:	460b      	mov	r3, r1
 801a4c2:	ec41 0b18 	vmov	d8, r0, r1
 801a4c6:	4602      	mov	r2, r0
 801a4c8:	4659      	mov	r1, fp
 801a4ca:	4650      	mov	r0, sl
 801a4cc:	f7e5 ff0e 	bl	80002ec <__adddf3>
 801a4d0:	4b44      	ldr	r3, [pc, #272]	; (801a5e4 <__kernel_tan+0x39c>)
 801a4d2:	429f      	cmp	r7, r3
 801a4d4:	4604      	mov	r4, r0
 801a4d6:	460d      	mov	r5, r1
 801a4d8:	f340 8086 	ble.w	801a5e8 <__kernel_tan+0x3a0>
 801a4dc:	4630      	mov	r0, r6
 801a4de:	f7e6 f851 	bl	8000584 <__aeabi_i2d>
 801a4e2:	4622      	mov	r2, r4
 801a4e4:	4680      	mov	r8, r0
 801a4e6:	4689      	mov	r9, r1
 801a4e8:	462b      	mov	r3, r5
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	4629      	mov	r1, r5
 801a4ee:	f7e6 f8b3 	bl	8000658 <__aeabi_dmul>
 801a4f2:	4642      	mov	r2, r8
 801a4f4:	4606      	mov	r6, r0
 801a4f6:	460f      	mov	r7, r1
 801a4f8:	464b      	mov	r3, r9
 801a4fa:	4620      	mov	r0, r4
 801a4fc:	4629      	mov	r1, r5
 801a4fe:	f7e5 fef5 	bl	80002ec <__adddf3>
 801a502:	4602      	mov	r2, r0
 801a504:	460b      	mov	r3, r1
 801a506:	4630      	mov	r0, r6
 801a508:	4639      	mov	r1, r7
 801a50a:	f7e6 f9cf 	bl	80008ac <__aeabi_ddiv>
 801a50e:	ec53 2b18 	vmov	r2, r3, d8
 801a512:	f7e5 fee9 	bl	80002e8 <__aeabi_dsub>
 801a516:	4602      	mov	r2, r0
 801a518:	460b      	mov	r3, r1
 801a51a:	4650      	mov	r0, sl
 801a51c:	4659      	mov	r1, fp
 801a51e:	f7e5 fee3 	bl	80002e8 <__aeabi_dsub>
 801a522:	4602      	mov	r2, r0
 801a524:	460b      	mov	r3, r1
 801a526:	f7e5 fee1 	bl	80002ec <__adddf3>
 801a52a:	4602      	mov	r2, r0
 801a52c:	460b      	mov	r3, r1
 801a52e:	4640      	mov	r0, r8
 801a530:	4649      	mov	r1, r9
 801a532:	f7e5 fed9 	bl	80002e8 <__aeabi_dsub>
 801a536:	9b00      	ldr	r3, [sp, #0]
 801a538:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801a53c:	f00a 0a02 	and.w	sl, sl, #2
 801a540:	4604      	mov	r4, r0
 801a542:	f1ca 0001 	rsb	r0, sl, #1
 801a546:	460d      	mov	r5, r1
 801a548:	f7e6 f81c 	bl	8000584 <__aeabi_i2d>
 801a54c:	4602      	mov	r2, r0
 801a54e:	460b      	mov	r3, r1
 801a550:	4620      	mov	r0, r4
 801a552:	4629      	mov	r1, r5
 801a554:	f7e6 f880 	bl	8000658 <__aeabi_dmul>
 801a558:	e69f      	b.n	801a29a <__kernel_tan+0x52>
 801a55a:	bf00      	nop
 801a55c:	f3af 8000 	nop.w
 801a560:	54442d18 	.word	0x54442d18
 801a564:	3fe921fb 	.word	0x3fe921fb
 801a568:	33145c07 	.word	0x33145c07
 801a56c:	3c81a626 	.word	0x3c81a626
 801a570:	74bf7ad4 	.word	0x74bf7ad4
 801a574:	3efb2a70 	.word	0x3efb2a70
 801a578:	32f0a7e9 	.word	0x32f0a7e9
 801a57c:	3f12b80f 	.word	0x3f12b80f
 801a580:	1a8d1068 	.word	0x1a8d1068
 801a584:	3f3026f7 	.word	0x3f3026f7
 801a588:	fee08315 	.word	0xfee08315
 801a58c:	3f57dbc8 	.word	0x3f57dbc8
 801a590:	e96e8493 	.word	0xe96e8493
 801a594:	3f8226e3 	.word	0x3f8226e3
 801a598:	1bb341fe 	.word	0x1bb341fe
 801a59c:	3faba1ba 	.word	0x3faba1ba
 801a5a0:	db605373 	.word	0xdb605373
 801a5a4:	bef375cb 	.word	0xbef375cb
 801a5a8:	a03792a6 	.word	0xa03792a6
 801a5ac:	3f147e88 	.word	0x3f147e88
 801a5b0:	f2f26501 	.word	0xf2f26501
 801a5b4:	3f4344d8 	.word	0x3f4344d8
 801a5b8:	c9560328 	.word	0xc9560328
 801a5bc:	3f6d6d22 	.word	0x3f6d6d22
 801a5c0:	8406d637 	.word	0x8406d637
 801a5c4:	3f9664f4 	.word	0x3f9664f4
 801a5c8:	1110fe7a 	.word	0x1110fe7a
 801a5cc:	3fc11111 	.word	0x3fc11111
 801a5d0:	55555563 	.word	0x55555563
 801a5d4:	3fd55555 	.word	0x3fd55555
 801a5d8:	3e2fffff 	.word	0x3e2fffff
 801a5dc:	3ff00000 	.word	0x3ff00000
 801a5e0:	bff00000 	.word	0xbff00000
 801a5e4:	3fe59427 	.word	0x3fe59427
 801a5e8:	2e01      	cmp	r6, #1
 801a5ea:	d02f      	beq.n	801a64c <__kernel_tan+0x404>
 801a5ec:	460f      	mov	r7, r1
 801a5ee:	4602      	mov	r2, r0
 801a5f0:	460b      	mov	r3, r1
 801a5f2:	4689      	mov	r9, r1
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	4917      	ldr	r1, [pc, #92]	; (801a654 <__kernel_tan+0x40c>)
 801a5f8:	f7e6 f958 	bl	80008ac <__aeabi_ddiv>
 801a5fc:	2600      	movs	r6, #0
 801a5fe:	e9cd 0100 	strd	r0, r1, [sp]
 801a602:	4652      	mov	r2, sl
 801a604:	465b      	mov	r3, fp
 801a606:	4630      	mov	r0, r6
 801a608:	4639      	mov	r1, r7
 801a60a:	f7e5 fe6d 	bl	80002e8 <__aeabi_dsub>
 801a60e:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a612:	4602      	mov	r2, r0
 801a614:	460b      	mov	r3, r1
 801a616:	ec51 0b18 	vmov	r0, r1, d8
 801a61a:	f7e5 fe65 	bl	80002e8 <__aeabi_dsub>
 801a61e:	4632      	mov	r2, r6
 801a620:	462b      	mov	r3, r5
 801a622:	f7e6 f819 	bl	8000658 <__aeabi_dmul>
 801a626:	46b0      	mov	r8, r6
 801a628:	460f      	mov	r7, r1
 801a62a:	4642      	mov	r2, r8
 801a62c:	462b      	mov	r3, r5
 801a62e:	4634      	mov	r4, r6
 801a630:	4649      	mov	r1, r9
 801a632:	4606      	mov	r6, r0
 801a634:	4640      	mov	r0, r8
 801a636:	f7e6 f80f 	bl	8000658 <__aeabi_dmul>
 801a63a:	4b07      	ldr	r3, [pc, #28]	; (801a658 <__kernel_tan+0x410>)
 801a63c:	2200      	movs	r2, #0
 801a63e:	f7e5 fe55 	bl	80002ec <__adddf3>
 801a642:	4602      	mov	r2, r0
 801a644:	460b      	mov	r3, r1
 801a646:	4630      	mov	r0, r6
 801a648:	4639      	mov	r1, r7
 801a64a:	e665      	b.n	801a318 <__kernel_tan+0xd0>
 801a64c:	4682      	mov	sl, r0
 801a64e:	468b      	mov	fp, r1
 801a650:	e625      	b.n	801a29e <__kernel_tan+0x56>
 801a652:	bf00      	nop
 801a654:	bff00000 	.word	0xbff00000
 801a658:	3ff00000 	.word	0x3ff00000
 801a65c:	00000000 	.word	0x00000000

0801a660 <__ieee754_pow>:
 801a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a664:	ed2d 8b06 	vpush	{d8-d10}
 801a668:	b089      	sub	sp, #36	; 0x24
 801a66a:	ed8d 1b00 	vstr	d1, [sp]
 801a66e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a672:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a676:	ea58 0102 	orrs.w	r1, r8, r2
 801a67a:	ec57 6b10 	vmov	r6, r7, d0
 801a67e:	d115      	bne.n	801a6ac <__ieee754_pow+0x4c>
 801a680:	19b3      	adds	r3, r6, r6
 801a682:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801a686:	4152      	adcs	r2, r2
 801a688:	4299      	cmp	r1, r3
 801a68a:	4b89      	ldr	r3, [pc, #548]	; (801a8b0 <__ieee754_pow+0x250>)
 801a68c:	4193      	sbcs	r3, r2
 801a68e:	f080 84d1 	bcs.w	801b034 <__ieee754_pow+0x9d4>
 801a692:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a696:	4630      	mov	r0, r6
 801a698:	4639      	mov	r1, r7
 801a69a:	f7e5 fe27 	bl	80002ec <__adddf3>
 801a69e:	ec41 0b10 	vmov	d0, r0, r1
 801a6a2:	b009      	add	sp, #36	; 0x24
 801a6a4:	ecbd 8b06 	vpop	{d8-d10}
 801a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ac:	4b81      	ldr	r3, [pc, #516]	; (801a8b4 <__ieee754_pow+0x254>)
 801a6ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a6b2:	429c      	cmp	r4, r3
 801a6b4:	ee10 aa10 	vmov	sl, s0
 801a6b8:	463d      	mov	r5, r7
 801a6ba:	dc06      	bgt.n	801a6ca <__ieee754_pow+0x6a>
 801a6bc:	d101      	bne.n	801a6c2 <__ieee754_pow+0x62>
 801a6be:	2e00      	cmp	r6, #0
 801a6c0:	d1e7      	bne.n	801a692 <__ieee754_pow+0x32>
 801a6c2:	4598      	cmp	r8, r3
 801a6c4:	dc01      	bgt.n	801a6ca <__ieee754_pow+0x6a>
 801a6c6:	d10f      	bne.n	801a6e8 <__ieee754_pow+0x88>
 801a6c8:	b172      	cbz	r2, 801a6e8 <__ieee754_pow+0x88>
 801a6ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801a6ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801a6d2:	ea55 050a 	orrs.w	r5, r5, sl
 801a6d6:	d1dc      	bne.n	801a692 <__ieee754_pow+0x32>
 801a6d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a6dc:	18db      	adds	r3, r3, r3
 801a6de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801a6e2:	4152      	adcs	r2, r2
 801a6e4:	429d      	cmp	r5, r3
 801a6e6:	e7d0      	b.n	801a68a <__ieee754_pow+0x2a>
 801a6e8:	2d00      	cmp	r5, #0
 801a6ea:	da3b      	bge.n	801a764 <__ieee754_pow+0x104>
 801a6ec:	4b72      	ldr	r3, [pc, #456]	; (801a8b8 <__ieee754_pow+0x258>)
 801a6ee:	4598      	cmp	r8, r3
 801a6f0:	dc51      	bgt.n	801a796 <__ieee754_pow+0x136>
 801a6f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a6f6:	4598      	cmp	r8, r3
 801a6f8:	f340 84ab 	ble.w	801b052 <__ieee754_pow+0x9f2>
 801a6fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a700:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a704:	2b14      	cmp	r3, #20
 801a706:	dd0f      	ble.n	801a728 <__ieee754_pow+0xc8>
 801a708:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a70c:	fa22 f103 	lsr.w	r1, r2, r3
 801a710:	fa01 f303 	lsl.w	r3, r1, r3
 801a714:	4293      	cmp	r3, r2
 801a716:	f040 849c 	bne.w	801b052 <__ieee754_pow+0x9f2>
 801a71a:	f001 0101 	and.w	r1, r1, #1
 801a71e:	f1c1 0302 	rsb	r3, r1, #2
 801a722:	9304      	str	r3, [sp, #16]
 801a724:	b182      	cbz	r2, 801a748 <__ieee754_pow+0xe8>
 801a726:	e05f      	b.n	801a7e8 <__ieee754_pow+0x188>
 801a728:	2a00      	cmp	r2, #0
 801a72a:	d15b      	bne.n	801a7e4 <__ieee754_pow+0x184>
 801a72c:	f1c3 0314 	rsb	r3, r3, #20
 801a730:	fa48 f103 	asr.w	r1, r8, r3
 801a734:	fa01 f303 	lsl.w	r3, r1, r3
 801a738:	4543      	cmp	r3, r8
 801a73a:	f040 8487 	bne.w	801b04c <__ieee754_pow+0x9ec>
 801a73e:	f001 0101 	and.w	r1, r1, #1
 801a742:	f1c1 0302 	rsb	r3, r1, #2
 801a746:	9304      	str	r3, [sp, #16]
 801a748:	4b5c      	ldr	r3, [pc, #368]	; (801a8bc <__ieee754_pow+0x25c>)
 801a74a:	4598      	cmp	r8, r3
 801a74c:	d132      	bne.n	801a7b4 <__ieee754_pow+0x154>
 801a74e:	f1b9 0f00 	cmp.w	r9, #0
 801a752:	f280 8477 	bge.w	801b044 <__ieee754_pow+0x9e4>
 801a756:	4959      	ldr	r1, [pc, #356]	; (801a8bc <__ieee754_pow+0x25c>)
 801a758:	4632      	mov	r2, r6
 801a75a:	463b      	mov	r3, r7
 801a75c:	2000      	movs	r0, #0
 801a75e:	f7e6 f8a5 	bl	80008ac <__aeabi_ddiv>
 801a762:	e79c      	b.n	801a69e <__ieee754_pow+0x3e>
 801a764:	2300      	movs	r3, #0
 801a766:	9304      	str	r3, [sp, #16]
 801a768:	2a00      	cmp	r2, #0
 801a76a:	d13d      	bne.n	801a7e8 <__ieee754_pow+0x188>
 801a76c:	4b51      	ldr	r3, [pc, #324]	; (801a8b4 <__ieee754_pow+0x254>)
 801a76e:	4598      	cmp	r8, r3
 801a770:	d1ea      	bne.n	801a748 <__ieee754_pow+0xe8>
 801a772:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a776:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a77a:	ea53 030a 	orrs.w	r3, r3, sl
 801a77e:	f000 8459 	beq.w	801b034 <__ieee754_pow+0x9d4>
 801a782:	4b4f      	ldr	r3, [pc, #316]	; (801a8c0 <__ieee754_pow+0x260>)
 801a784:	429c      	cmp	r4, r3
 801a786:	dd08      	ble.n	801a79a <__ieee754_pow+0x13a>
 801a788:	f1b9 0f00 	cmp.w	r9, #0
 801a78c:	f2c0 8456 	blt.w	801b03c <__ieee754_pow+0x9dc>
 801a790:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a794:	e783      	b.n	801a69e <__ieee754_pow+0x3e>
 801a796:	2302      	movs	r3, #2
 801a798:	e7e5      	b.n	801a766 <__ieee754_pow+0x106>
 801a79a:	f1b9 0f00 	cmp.w	r9, #0
 801a79e:	f04f 0000 	mov.w	r0, #0
 801a7a2:	f04f 0100 	mov.w	r1, #0
 801a7a6:	f6bf af7a 	bge.w	801a69e <__ieee754_pow+0x3e>
 801a7aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a7ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a7b2:	e774      	b.n	801a69e <__ieee754_pow+0x3e>
 801a7b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a7b8:	d106      	bne.n	801a7c8 <__ieee754_pow+0x168>
 801a7ba:	4632      	mov	r2, r6
 801a7bc:	463b      	mov	r3, r7
 801a7be:	4630      	mov	r0, r6
 801a7c0:	4639      	mov	r1, r7
 801a7c2:	f7e5 ff49 	bl	8000658 <__aeabi_dmul>
 801a7c6:	e76a      	b.n	801a69e <__ieee754_pow+0x3e>
 801a7c8:	4b3e      	ldr	r3, [pc, #248]	; (801a8c4 <__ieee754_pow+0x264>)
 801a7ca:	4599      	cmp	r9, r3
 801a7cc:	d10c      	bne.n	801a7e8 <__ieee754_pow+0x188>
 801a7ce:	2d00      	cmp	r5, #0
 801a7d0:	db0a      	blt.n	801a7e8 <__ieee754_pow+0x188>
 801a7d2:	ec47 6b10 	vmov	d0, r6, r7
 801a7d6:	b009      	add	sp, #36	; 0x24
 801a7d8:	ecbd 8b06 	vpop	{d8-d10}
 801a7dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e0:	f7ff ba04 	b.w	8019bec <__ieee754_sqrt>
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	9304      	str	r3, [sp, #16]
 801a7e8:	ec47 6b10 	vmov	d0, r6, r7
 801a7ec:	f000 fe6a 	bl	801b4c4 <fabs>
 801a7f0:	ec51 0b10 	vmov	r0, r1, d0
 801a7f4:	f1ba 0f00 	cmp.w	sl, #0
 801a7f8:	d129      	bne.n	801a84e <__ieee754_pow+0x1ee>
 801a7fa:	b124      	cbz	r4, 801a806 <__ieee754_pow+0x1a6>
 801a7fc:	4b2f      	ldr	r3, [pc, #188]	; (801a8bc <__ieee754_pow+0x25c>)
 801a7fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a802:	429a      	cmp	r2, r3
 801a804:	d123      	bne.n	801a84e <__ieee754_pow+0x1ee>
 801a806:	f1b9 0f00 	cmp.w	r9, #0
 801a80a:	da05      	bge.n	801a818 <__ieee754_pow+0x1b8>
 801a80c:	4602      	mov	r2, r0
 801a80e:	460b      	mov	r3, r1
 801a810:	2000      	movs	r0, #0
 801a812:	492a      	ldr	r1, [pc, #168]	; (801a8bc <__ieee754_pow+0x25c>)
 801a814:	f7e6 f84a 	bl	80008ac <__aeabi_ddiv>
 801a818:	2d00      	cmp	r5, #0
 801a81a:	f6bf af40 	bge.w	801a69e <__ieee754_pow+0x3e>
 801a81e:	9b04      	ldr	r3, [sp, #16]
 801a820:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a824:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a828:	431c      	orrs	r4, r3
 801a82a:	d108      	bne.n	801a83e <__ieee754_pow+0x1de>
 801a82c:	4602      	mov	r2, r0
 801a82e:	460b      	mov	r3, r1
 801a830:	4610      	mov	r0, r2
 801a832:	4619      	mov	r1, r3
 801a834:	f7e5 fd58 	bl	80002e8 <__aeabi_dsub>
 801a838:	4602      	mov	r2, r0
 801a83a:	460b      	mov	r3, r1
 801a83c:	e78f      	b.n	801a75e <__ieee754_pow+0xfe>
 801a83e:	9b04      	ldr	r3, [sp, #16]
 801a840:	2b01      	cmp	r3, #1
 801a842:	f47f af2c 	bne.w	801a69e <__ieee754_pow+0x3e>
 801a846:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a84a:	4619      	mov	r1, r3
 801a84c:	e727      	b.n	801a69e <__ieee754_pow+0x3e>
 801a84e:	0feb      	lsrs	r3, r5, #31
 801a850:	3b01      	subs	r3, #1
 801a852:	9306      	str	r3, [sp, #24]
 801a854:	9a06      	ldr	r2, [sp, #24]
 801a856:	9b04      	ldr	r3, [sp, #16]
 801a858:	4313      	orrs	r3, r2
 801a85a:	d102      	bne.n	801a862 <__ieee754_pow+0x202>
 801a85c:	4632      	mov	r2, r6
 801a85e:	463b      	mov	r3, r7
 801a860:	e7e6      	b.n	801a830 <__ieee754_pow+0x1d0>
 801a862:	4b19      	ldr	r3, [pc, #100]	; (801a8c8 <__ieee754_pow+0x268>)
 801a864:	4598      	cmp	r8, r3
 801a866:	f340 80fb 	ble.w	801aa60 <__ieee754_pow+0x400>
 801a86a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a86e:	4598      	cmp	r8, r3
 801a870:	4b13      	ldr	r3, [pc, #76]	; (801a8c0 <__ieee754_pow+0x260>)
 801a872:	dd0c      	ble.n	801a88e <__ieee754_pow+0x22e>
 801a874:	429c      	cmp	r4, r3
 801a876:	dc0f      	bgt.n	801a898 <__ieee754_pow+0x238>
 801a878:	f1b9 0f00 	cmp.w	r9, #0
 801a87c:	da0f      	bge.n	801a89e <__ieee754_pow+0x23e>
 801a87e:	2000      	movs	r0, #0
 801a880:	b009      	add	sp, #36	; 0x24
 801a882:	ecbd 8b06 	vpop	{d8-d10}
 801a886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a88a:	f001 b8e2 	b.w	801ba52 <__math_oflow>
 801a88e:	429c      	cmp	r4, r3
 801a890:	dbf2      	blt.n	801a878 <__ieee754_pow+0x218>
 801a892:	4b0a      	ldr	r3, [pc, #40]	; (801a8bc <__ieee754_pow+0x25c>)
 801a894:	429c      	cmp	r4, r3
 801a896:	dd19      	ble.n	801a8cc <__ieee754_pow+0x26c>
 801a898:	f1b9 0f00 	cmp.w	r9, #0
 801a89c:	dcef      	bgt.n	801a87e <__ieee754_pow+0x21e>
 801a89e:	2000      	movs	r0, #0
 801a8a0:	b009      	add	sp, #36	; 0x24
 801a8a2:	ecbd 8b06 	vpop	{d8-d10}
 801a8a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8aa:	f001 b8c9 	b.w	801ba40 <__math_uflow>
 801a8ae:	bf00      	nop
 801a8b0:	fff00000 	.word	0xfff00000
 801a8b4:	7ff00000 	.word	0x7ff00000
 801a8b8:	433fffff 	.word	0x433fffff
 801a8bc:	3ff00000 	.word	0x3ff00000
 801a8c0:	3fefffff 	.word	0x3fefffff
 801a8c4:	3fe00000 	.word	0x3fe00000
 801a8c8:	41e00000 	.word	0x41e00000
 801a8cc:	4b60      	ldr	r3, [pc, #384]	; (801aa50 <__ieee754_pow+0x3f0>)
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	f7e5 fd0a 	bl	80002e8 <__aeabi_dsub>
 801a8d4:	a354      	add	r3, pc, #336	; (adr r3, 801aa28 <__ieee754_pow+0x3c8>)
 801a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8da:	4604      	mov	r4, r0
 801a8dc:	460d      	mov	r5, r1
 801a8de:	f7e5 febb 	bl	8000658 <__aeabi_dmul>
 801a8e2:	a353      	add	r3, pc, #332	; (adr r3, 801aa30 <__ieee754_pow+0x3d0>)
 801a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8e8:	4606      	mov	r6, r0
 801a8ea:	460f      	mov	r7, r1
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	4629      	mov	r1, r5
 801a8f0:	f7e5 feb2 	bl	8000658 <__aeabi_dmul>
 801a8f4:	4b57      	ldr	r3, [pc, #348]	; (801aa54 <__ieee754_pow+0x3f4>)
 801a8f6:	4682      	mov	sl, r0
 801a8f8:	468b      	mov	fp, r1
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	4620      	mov	r0, r4
 801a8fe:	4629      	mov	r1, r5
 801a900:	f7e5 feaa 	bl	8000658 <__aeabi_dmul>
 801a904:	4602      	mov	r2, r0
 801a906:	460b      	mov	r3, r1
 801a908:	a14b      	add	r1, pc, #300	; (adr r1, 801aa38 <__ieee754_pow+0x3d8>)
 801a90a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a90e:	f7e5 fceb 	bl	80002e8 <__aeabi_dsub>
 801a912:	4622      	mov	r2, r4
 801a914:	462b      	mov	r3, r5
 801a916:	f7e5 fe9f 	bl	8000658 <__aeabi_dmul>
 801a91a:	4602      	mov	r2, r0
 801a91c:	460b      	mov	r3, r1
 801a91e:	2000      	movs	r0, #0
 801a920:	494d      	ldr	r1, [pc, #308]	; (801aa58 <__ieee754_pow+0x3f8>)
 801a922:	f7e5 fce1 	bl	80002e8 <__aeabi_dsub>
 801a926:	4622      	mov	r2, r4
 801a928:	4680      	mov	r8, r0
 801a92a:	4689      	mov	r9, r1
 801a92c:	462b      	mov	r3, r5
 801a92e:	4620      	mov	r0, r4
 801a930:	4629      	mov	r1, r5
 801a932:	f7e5 fe91 	bl	8000658 <__aeabi_dmul>
 801a936:	4602      	mov	r2, r0
 801a938:	460b      	mov	r3, r1
 801a93a:	4640      	mov	r0, r8
 801a93c:	4649      	mov	r1, r9
 801a93e:	f7e5 fe8b 	bl	8000658 <__aeabi_dmul>
 801a942:	a33f      	add	r3, pc, #252	; (adr r3, 801aa40 <__ieee754_pow+0x3e0>)
 801a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a948:	f7e5 fe86 	bl	8000658 <__aeabi_dmul>
 801a94c:	4602      	mov	r2, r0
 801a94e:	460b      	mov	r3, r1
 801a950:	4650      	mov	r0, sl
 801a952:	4659      	mov	r1, fp
 801a954:	f7e5 fcc8 	bl	80002e8 <__aeabi_dsub>
 801a958:	4602      	mov	r2, r0
 801a95a:	460b      	mov	r3, r1
 801a95c:	4680      	mov	r8, r0
 801a95e:	4689      	mov	r9, r1
 801a960:	4630      	mov	r0, r6
 801a962:	4639      	mov	r1, r7
 801a964:	f7e5 fcc2 	bl	80002ec <__adddf3>
 801a968:	2000      	movs	r0, #0
 801a96a:	4632      	mov	r2, r6
 801a96c:	463b      	mov	r3, r7
 801a96e:	4604      	mov	r4, r0
 801a970:	460d      	mov	r5, r1
 801a972:	f7e5 fcb9 	bl	80002e8 <__aeabi_dsub>
 801a976:	4602      	mov	r2, r0
 801a978:	460b      	mov	r3, r1
 801a97a:	4640      	mov	r0, r8
 801a97c:	4649      	mov	r1, r9
 801a97e:	f7e5 fcb3 	bl	80002e8 <__aeabi_dsub>
 801a982:	9b04      	ldr	r3, [sp, #16]
 801a984:	9a06      	ldr	r2, [sp, #24]
 801a986:	3b01      	subs	r3, #1
 801a988:	4313      	orrs	r3, r2
 801a98a:	4682      	mov	sl, r0
 801a98c:	468b      	mov	fp, r1
 801a98e:	f040 81e7 	bne.w	801ad60 <__ieee754_pow+0x700>
 801a992:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801aa48 <__ieee754_pow+0x3e8>
 801a996:	eeb0 8a47 	vmov.f32	s16, s14
 801a99a:	eef0 8a67 	vmov.f32	s17, s15
 801a99e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a9a2:	2600      	movs	r6, #0
 801a9a4:	4632      	mov	r2, r6
 801a9a6:	463b      	mov	r3, r7
 801a9a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9ac:	f7e5 fc9c 	bl	80002e8 <__aeabi_dsub>
 801a9b0:	4622      	mov	r2, r4
 801a9b2:	462b      	mov	r3, r5
 801a9b4:	f7e5 fe50 	bl	8000658 <__aeabi_dmul>
 801a9b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a9bc:	4680      	mov	r8, r0
 801a9be:	4689      	mov	r9, r1
 801a9c0:	4650      	mov	r0, sl
 801a9c2:	4659      	mov	r1, fp
 801a9c4:	f7e5 fe48 	bl	8000658 <__aeabi_dmul>
 801a9c8:	4602      	mov	r2, r0
 801a9ca:	460b      	mov	r3, r1
 801a9cc:	4640      	mov	r0, r8
 801a9ce:	4649      	mov	r1, r9
 801a9d0:	f7e5 fc8c 	bl	80002ec <__adddf3>
 801a9d4:	4632      	mov	r2, r6
 801a9d6:	463b      	mov	r3, r7
 801a9d8:	4680      	mov	r8, r0
 801a9da:	4689      	mov	r9, r1
 801a9dc:	4620      	mov	r0, r4
 801a9de:	4629      	mov	r1, r5
 801a9e0:	f7e5 fe3a 	bl	8000658 <__aeabi_dmul>
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	460d      	mov	r5, r1
 801a9ea:	4602      	mov	r2, r0
 801a9ec:	4649      	mov	r1, r9
 801a9ee:	4640      	mov	r0, r8
 801a9f0:	f7e5 fc7c 	bl	80002ec <__adddf3>
 801a9f4:	4b19      	ldr	r3, [pc, #100]	; (801aa5c <__ieee754_pow+0x3fc>)
 801a9f6:	4299      	cmp	r1, r3
 801a9f8:	ec45 4b19 	vmov	d9, r4, r5
 801a9fc:	4606      	mov	r6, r0
 801a9fe:	460f      	mov	r7, r1
 801aa00:	468b      	mov	fp, r1
 801aa02:	f340 82f0 	ble.w	801afe6 <__ieee754_pow+0x986>
 801aa06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801aa0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801aa0e:	4303      	orrs	r3, r0
 801aa10:	f000 81e4 	beq.w	801addc <__ieee754_pow+0x77c>
 801aa14:	ec51 0b18 	vmov	r0, r1, d8
 801aa18:	2200      	movs	r2, #0
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	f7e6 f88e 	bl	8000b3c <__aeabi_dcmplt>
 801aa20:	3800      	subs	r0, #0
 801aa22:	bf18      	it	ne
 801aa24:	2001      	movne	r0, #1
 801aa26:	e72b      	b.n	801a880 <__ieee754_pow+0x220>
 801aa28:	60000000 	.word	0x60000000
 801aa2c:	3ff71547 	.word	0x3ff71547
 801aa30:	f85ddf44 	.word	0xf85ddf44
 801aa34:	3e54ae0b 	.word	0x3e54ae0b
 801aa38:	55555555 	.word	0x55555555
 801aa3c:	3fd55555 	.word	0x3fd55555
 801aa40:	652b82fe 	.word	0x652b82fe
 801aa44:	3ff71547 	.word	0x3ff71547
 801aa48:	00000000 	.word	0x00000000
 801aa4c:	bff00000 	.word	0xbff00000
 801aa50:	3ff00000 	.word	0x3ff00000
 801aa54:	3fd00000 	.word	0x3fd00000
 801aa58:	3fe00000 	.word	0x3fe00000
 801aa5c:	408fffff 	.word	0x408fffff
 801aa60:	4bd5      	ldr	r3, [pc, #852]	; (801adb8 <__ieee754_pow+0x758>)
 801aa62:	402b      	ands	r3, r5
 801aa64:	2200      	movs	r2, #0
 801aa66:	b92b      	cbnz	r3, 801aa74 <__ieee754_pow+0x414>
 801aa68:	4bd4      	ldr	r3, [pc, #848]	; (801adbc <__ieee754_pow+0x75c>)
 801aa6a:	f7e5 fdf5 	bl	8000658 <__aeabi_dmul>
 801aa6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801aa72:	460c      	mov	r4, r1
 801aa74:	1523      	asrs	r3, r4, #20
 801aa76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801aa7a:	4413      	add	r3, r2
 801aa7c:	9305      	str	r3, [sp, #20]
 801aa7e:	4bd0      	ldr	r3, [pc, #832]	; (801adc0 <__ieee754_pow+0x760>)
 801aa80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801aa84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801aa88:	429c      	cmp	r4, r3
 801aa8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801aa8e:	dd08      	ble.n	801aaa2 <__ieee754_pow+0x442>
 801aa90:	4bcc      	ldr	r3, [pc, #816]	; (801adc4 <__ieee754_pow+0x764>)
 801aa92:	429c      	cmp	r4, r3
 801aa94:	f340 8162 	ble.w	801ad5c <__ieee754_pow+0x6fc>
 801aa98:	9b05      	ldr	r3, [sp, #20]
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	9305      	str	r3, [sp, #20]
 801aa9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801aaa2:	2400      	movs	r4, #0
 801aaa4:	00e3      	lsls	r3, r4, #3
 801aaa6:	9307      	str	r3, [sp, #28]
 801aaa8:	4bc7      	ldr	r3, [pc, #796]	; (801adc8 <__ieee754_pow+0x768>)
 801aaaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aaae:	ed93 7b00 	vldr	d7, [r3]
 801aab2:	4629      	mov	r1, r5
 801aab4:	ec53 2b17 	vmov	r2, r3, d7
 801aab8:	eeb0 9a47 	vmov.f32	s18, s14
 801aabc:	eef0 9a67 	vmov.f32	s19, s15
 801aac0:	4682      	mov	sl, r0
 801aac2:	f7e5 fc11 	bl	80002e8 <__aeabi_dsub>
 801aac6:	4652      	mov	r2, sl
 801aac8:	4606      	mov	r6, r0
 801aaca:	460f      	mov	r7, r1
 801aacc:	462b      	mov	r3, r5
 801aace:	ec51 0b19 	vmov	r0, r1, d9
 801aad2:	f7e5 fc0b 	bl	80002ec <__adddf3>
 801aad6:	4602      	mov	r2, r0
 801aad8:	460b      	mov	r3, r1
 801aada:	2000      	movs	r0, #0
 801aadc:	49bb      	ldr	r1, [pc, #748]	; (801adcc <__ieee754_pow+0x76c>)
 801aade:	f7e5 fee5 	bl	80008ac <__aeabi_ddiv>
 801aae2:	ec41 0b1a 	vmov	d10, r0, r1
 801aae6:	4602      	mov	r2, r0
 801aae8:	460b      	mov	r3, r1
 801aaea:	4630      	mov	r0, r6
 801aaec:	4639      	mov	r1, r7
 801aaee:	f7e5 fdb3 	bl	8000658 <__aeabi_dmul>
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aaf8:	9302      	str	r3, [sp, #8]
 801aafa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801aafe:	46ab      	mov	fp, r5
 801ab00:	106d      	asrs	r5, r5, #1
 801ab02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ab06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ab0a:	ec41 0b18 	vmov	d8, r0, r1
 801ab0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ab12:	2200      	movs	r2, #0
 801ab14:	4640      	mov	r0, r8
 801ab16:	4649      	mov	r1, r9
 801ab18:	4614      	mov	r4, r2
 801ab1a:	461d      	mov	r5, r3
 801ab1c:	f7e5 fd9c 	bl	8000658 <__aeabi_dmul>
 801ab20:	4602      	mov	r2, r0
 801ab22:	460b      	mov	r3, r1
 801ab24:	4630      	mov	r0, r6
 801ab26:	4639      	mov	r1, r7
 801ab28:	f7e5 fbde 	bl	80002e8 <__aeabi_dsub>
 801ab2c:	ec53 2b19 	vmov	r2, r3, d9
 801ab30:	4606      	mov	r6, r0
 801ab32:	460f      	mov	r7, r1
 801ab34:	4620      	mov	r0, r4
 801ab36:	4629      	mov	r1, r5
 801ab38:	f7e5 fbd6 	bl	80002e8 <__aeabi_dsub>
 801ab3c:	4602      	mov	r2, r0
 801ab3e:	460b      	mov	r3, r1
 801ab40:	4650      	mov	r0, sl
 801ab42:	4659      	mov	r1, fp
 801ab44:	f7e5 fbd0 	bl	80002e8 <__aeabi_dsub>
 801ab48:	4642      	mov	r2, r8
 801ab4a:	464b      	mov	r3, r9
 801ab4c:	f7e5 fd84 	bl	8000658 <__aeabi_dmul>
 801ab50:	4602      	mov	r2, r0
 801ab52:	460b      	mov	r3, r1
 801ab54:	4630      	mov	r0, r6
 801ab56:	4639      	mov	r1, r7
 801ab58:	f7e5 fbc6 	bl	80002e8 <__aeabi_dsub>
 801ab5c:	ec53 2b1a 	vmov	r2, r3, d10
 801ab60:	f7e5 fd7a 	bl	8000658 <__aeabi_dmul>
 801ab64:	ec53 2b18 	vmov	r2, r3, d8
 801ab68:	ec41 0b19 	vmov	d9, r0, r1
 801ab6c:	ec51 0b18 	vmov	r0, r1, d8
 801ab70:	f7e5 fd72 	bl	8000658 <__aeabi_dmul>
 801ab74:	a37c      	add	r3, pc, #496	; (adr r3, 801ad68 <__ieee754_pow+0x708>)
 801ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7a:	4604      	mov	r4, r0
 801ab7c:	460d      	mov	r5, r1
 801ab7e:	f7e5 fd6b 	bl	8000658 <__aeabi_dmul>
 801ab82:	a37b      	add	r3, pc, #492	; (adr r3, 801ad70 <__ieee754_pow+0x710>)
 801ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab88:	f7e5 fbb0 	bl	80002ec <__adddf3>
 801ab8c:	4622      	mov	r2, r4
 801ab8e:	462b      	mov	r3, r5
 801ab90:	f7e5 fd62 	bl	8000658 <__aeabi_dmul>
 801ab94:	a378      	add	r3, pc, #480	; (adr r3, 801ad78 <__ieee754_pow+0x718>)
 801ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9a:	f7e5 fba7 	bl	80002ec <__adddf3>
 801ab9e:	4622      	mov	r2, r4
 801aba0:	462b      	mov	r3, r5
 801aba2:	f7e5 fd59 	bl	8000658 <__aeabi_dmul>
 801aba6:	a376      	add	r3, pc, #472	; (adr r3, 801ad80 <__ieee754_pow+0x720>)
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	f7e5 fb9e 	bl	80002ec <__adddf3>
 801abb0:	4622      	mov	r2, r4
 801abb2:	462b      	mov	r3, r5
 801abb4:	f7e5 fd50 	bl	8000658 <__aeabi_dmul>
 801abb8:	a373      	add	r3, pc, #460	; (adr r3, 801ad88 <__ieee754_pow+0x728>)
 801abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbe:	f7e5 fb95 	bl	80002ec <__adddf3>
 801abc2:	4622      	mov	r2, r4
 801abc4:	462b      	mov	r3, r5
 801abc6:	f7e5 fd47 	bl	8000658 <__aeabi_dmul>
 801abca:	a371      	add	r3, pc, #452	; (adr r3, 801ad90 <__ieee754_pow+0x730>)
 801abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd0:	f7e5 fb8c 	bl	80002ec <__adddf3>
 801abd4:	4622      	mov	r2, r4
 801abd6:	4606      	mov	r6, r0
 801abd8:	460f      	mov	r7, r1
 801abda:	462b      	mov	r3, r5
 801abdc:	4620      	mov	r0, r4
 801abde:	4629      	mov	r1, r5
 801abe0:	f7e5 fd3a 	bl	8000658 <__aeabi_dmul>
 801abe4:	4602      	mov	r2, r0
 801abe6:	460b      	mov	r3, r1
 801abe8:	4630      	mov	r0, r6
 801abea:	4639      	mov	r1, r7
 801abec:	f7e5 fd34 	bl	8000658 <__aeabi_dmul>
 801abf0:	4642      	mov	r2, r8
 801abf2:	4604      	mov	r4, r0
 801abf4:	460d      	mov	r5, r1
 801abf6:	464b      	mov	r3, r9
 801abf8:	ec51 0b18 	vmov	r0, r1, d8
 801abfc:	f7e5 fb76 	bl	80002ec <__adddf3>
 801ac00:	ec53 2b19 	vmov	r2, r3, d9
 801ac04:	f7e5 fd28 	bl	8000658 <__aeabi_dmul>
 801ac08:	4622      	mov	r2, r4
 801ac0a:	462b      	mov	r3, r5
 801ac0c:	f7e5 fb6e 	bl	80002ec <__adddf3>
 801ac10:	4642      	mov	r2, r8
 801ac12:	4682      	mov	sl, r0
 801ac14:	468b      	mov	fp, r1
 801ac16:	464b      	mov	r3, r9
 801ac18:	4640      	mov	r0, r8
 801ac1a:	4649      	mov	r1, r9
 801ac1c:	f7e5 fd1c 	bl	8000658 <__aeabi_dmul>
 801ac20:	4b6b      	ldr	r3, [pc, #428]	; (801add0 <__ieee754_pow+0x770>)
 801ac22:	2200      	movs	r2, #0
 801ac24:	4606      	mov	r6, r0
 801ac26:	460f      	mov	r7, r1
 801ac28:	f7e5 fb60 	bl	80002ec <__adddf3>
 801ac2c:	4652      	mov	r2, sl
 801ac2e:	465b      	mov	r3, fp
 801ac30:	f7e5 fb5c 	bl	80002ec <__adddf3>
 801ac34:	2000      	movs	r0, #0
 801ac36:	4604      	mov	r4, r0
 801ac38:	460d      	mov	r5, r1
 801ac3a:	4602      	mov	r2, r0
 801ac3c:	460b      	mov	r3, r1
 801ac3e:	4640      	mov	r0, r8
 801ac40:	4649      	mov	r1, r9
 801ac42:	f7e5 fd09 	bl	8000658 <__aeabi_dmul>
 801ac46:	4b62      	ldr	r3, [pc, #392]	; (801add0 <__ieee754_pow+0x770>)
 801ac48:	4680      	mov	r8, r0
 801ac4a:	4689      	mov	r9, r1
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	4620      	mov	r0, r4
 801ac50:	4629      	mov	r1, r5
 801ac52:	f7e5 fb49 	bl	80002e8 <__aeabi_dsub>
 801ac56:	4632      	mov	r2, r6
 801ac58:	463b      	mov	r3, r7
 801ac5a:	f7e5 fb45 	bl	80002e8 <__aeabi_dsub>
 801ac5e:	4602      	mov	r2, r0
 801ac60:	460b      	mov	r3, r1
 801ac62:	4650      	mov	r0, sl
 801ac64:	4659      	mov	r1, fp
 801ac66:	f7e5 fb3f 	bl	80002e8 <__aeabi_dsub>
 801ac6a:	ec53 2b18 	vmov	r2, r3, d8
 801ac6e:	f7e5 fcf3 	bl	8000658 <__aeabi_dmul>
 801ac72:	4622      	mov	r2, r4
 801ac74:	4606      	mov	r6, r0
 801ac76:	460f      	mov	r7, r1
 801ac78:	462b      	mov	r3, r5
 801ac7a:	ec51 0b19 	vmov	r0, r1, d9
 801ac7e:	f7e5 fceb 	bl	8000658 <__aeabi_dmul>
 801ac82:	4602      	mov	r2, r0
 801ac84:	460b      	mov	r3, r1
 801ac86:	4630      	mov	r0, r6
 801ac88:	4639      	mov	r1, r7
 801ac8a:	f7e5 fb2f 	bl	80002ec <__adddf3>
 801ac8e:	4606      	mov	r6, r0
 801ac90:	460f      	mov	r7, r1
 801ac92:	4602      	mov	r2, r0
 801ac94:	460b      	mov	r3, r1
 801ac96:	4640      	mov	r0, r8
 801ac98:	4649      	mov	r1, r9
 801ac9a:	f7e5 fb27 	bl	80002ec <__adddf3>
 801ac9e:	a33e      	add	r3, pc, #248	; (adr r3, 801ad98 <__ieee754_pow+0x738>)
 801aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca4:	2000      	movs	r0, #0
 801aca6:	4604      	mov	r4, r0
 801aca8:	460d      	mov	r5, r1
 801acaa:	f7e5 fcd5 	bl	8000658 <__aeabi_dmul>
 801acae:	4642      	mov	r2, r8
 801acb0:	ec41 0b18 	vmov	d8, r0, r1
 801acb4:	464b      	mov	r3, r9
 801acb6:	4620      	mov	r0, r4
 801acb8:	4629      	mov	r1, r5
 801acba:	f7e5 fb15 	bl	80002e8 <__aeabi_dsub>
 801acbe:	4602      	mov	r2, r0
 801acc0:	460b      	mov	r3, r1
 801acc2:	4630      	mov	r0, r6
 801acc4:	4639      	mov	r1, r7
 801acc6:	f7e5 fb0f 	bl	80002e8 <__aeabi_dsub>
 801acca:	a335      	add	r3, pc, #212	; (adr r3, 801ada0 <__ieee754_pow+0x740>)
 801accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd0:	f7e5 fcc2 	bl	8000658 <__aeabi_dmul>
 801acd4:	a334      	add	r3, pc, #208	; (adr r3, 801ada8 <__ieee754_pow+0x748>)
 801acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acda:	4606      	mov	r6, r0
 801acdc:	460f      	mov	r7, r1
 801acde:	4620      	mov	r0, r4
 801ace0:	4629      	mov	r1, r5
 801ace2:	f7e5 fcb9 	bl	8000658 <__aeabi_dmul>
 801ace6:	4602      	mov	r2, r0
 801ace8:	460b      	mov	r3, r1
 801acea:	4630      	mov	r0, r6
 801acec:	4639      	mov	r1, r7
 801acee:	f7e5 fafd 	bl	80002ec <__adddf3>
 801acf2:	9a07      	ldr	r2, [sp, #28]
 801acf4:	4b37      	ldr	r3, [pc, #220]	; (801add4 <__ieee754_pow+0x774>)
 801acf6:	4413      	add	r3, r2
 801acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acfc:	f7e5 faf6 	bl	80002ec <__adddf3>
 801ad00:	4682      	mov	sl, r0
 801ad02:	9805      	ldr	r0, [sp, #20]
 801ad04:	468b      	mov	fp, r1
 801ad06:	f7e5 fc3d 	bl	8000584 <__aeabi_i2d>
 801ad0a:	9a07      	ldr	r2, [sp, #28]
 801ad0c:	4b32      	ldr	r3, [pc, #200]	; (801add8 <__ieee754_pow+0x778>)
 801ad0e:	4413      	add	r3, r2
 801ad10:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ad14:	4606      	mov	r6, r0
 801ad16:	460f      	mov	r7, r1
 801ad18:	4652      	mov	r2, sl
 801ad1a:	465b      	mov	r3, fp
 801ad1c:	ec51 0b18 	vmov	r0, r1, d8
 801ad20:	f7e5 fae4 	bl	80002ec <__adddf3>
 801ad24:	4642      	mov	r2, r8
 801ad26:	464b      	mov	r3, r9
 801ad28:	f7e5 fae0 	bl	80002ec <__adddf3>
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	463b      	mov	r3, r7
 801ad30:	f7e5 fadc 	bl	80002ec <__adddf3>
 801ad34:	2000      	movs	r0, #0
 801ad36:	4632      	mov	r2, r6
 801ad38:	463b      	mov	r3, r7
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	460d      	mov	r5, r1
 801ad3e:	f7e5 fad3 	bl	80002e8 <__aeabi_dsub>
 801ad42:	4642      	mov	r2, r8
 801ad44:	464b      	mov	r3, r9
 801ad46:	f7e5 facf 	bl	80002e8 <__aeabi_dsub>
 801ad4a:	ec53 2b18 	vmov	r2, r3, d8
 801ad4e:	f7e5 facb 	bl	80002e8 <__aeabi_dsub>
 801ad52:	4602      	mov	r2, r0
 801ad54:	460b      	mov	r3, r1
 801ad56:	4650      	mov	r0, sl
 801ad58:	4659      	mov	r1, fp
 801ad5a:	e610      	b.n	801a97e <__ieee754_pow+0x31e>
 801ad5c:	2401      	movs	r4, #1
 801ad5e:	e6a1      	b.n	801aaa4 <__ieee754_pow+0x444>
 801ad60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801adb0 <__ieee754_pow+0x750>
 801ad64:	e617      	b.n	801a996 <__ieee754_pow+0x336>
 801ad66:	bf00      	nop
 801ad68:	4a454eef 	.word	0x4a454eef
 801ad6c:	3fca7e28 	.word	0x3fca7e28
 801ad70:	93c9db65 	.word	0x93c9db65
 801ad74:	3fcd864a 	.word	0x3fcd864a
 801ad78:	a91d4101 	.word	0xa91d4101
 801ad7c:	3fd17460 	.word	0x3fd17460
 801ad80:	518f264d 	.word	0x518f264d
 801ad84:	3fd55555 	.word	0x3fd55555
 801ad88:	db6fabff 	.word	0xdb6fabff
 801ad8c:	3fdb6db6 	.word	0x3fdb6db6
 801ad90:	33333303 	.word	0x33333303
 801ad94:	3fe33333 	.word	0x3fe33333
 801ad98:	e0000000 	.word	0xe0000000
 801ad9c:	3feec709 	.word	0x3feec709
 801ada0:	dc3a03fd 	.word	0xdc3a03fd
 801ada4:	3feec709 	.word	0x3feec709
 801ada8:	145b01f5 	.word	0x145b01f5
 801adac:	be3e2fe0 	.word	0xbe3e2fe0
 801adb0:	00000000 	.word	0x00000000
 801adb4:	3ff00000 	.word	0x3ff00000
 801adb8:	7ff00000 	.word	0x7ff00000
 801adbc:	43400000 	.word	0x43400000
 801adc0:	0003988e 	.word	0x0003988e
 801adc4:	000bb679 	.word	0x000bb679
 801adc8:	08027bb0 	.word	0x08027bb0
 801adcc:	3ff00000 	.word	0x3ff00000
 801add0:	40080000 	.word	0x40080000
 801add4:	08027bd0 	.word	0x08027bd0
 801add8:	08027bc0 	.word	0x08027bc0
 801addc:	a3b3      	add	r3, pc, #716	; (adr r3, 801b0ac <__ieee754_pow+0xa4c>)
 801adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade2:	4640      	mov	r0, r8
 801ade4:	4649      	mov	r1, r9
 801ade6:	f7e5 fa81 	bl	80002ec <__adddf3>
 801adea:	4622      	mov	r2, r4
 801adec:	ec41 0b1a 	vmov	d10, r0, r1
 801adf0:	462b      	mov	r3, r5
 801adf2:	4630      	mov	r0, r6
 801adf4:	4639      	mov	r1, r7
 801adf6:	f7e5 fa77 	bl	80002e8 <__aeabi_dsub>
 801adfa:	4602      	mov	r2, r0
 801adfc:	460b      	mov	r3, r1
 801adfe:	ec51 0b1a 	vmov	r0, r1, d10
 801ae02:	f7e5 feb9 	bl	8000b78 <__aeabi_dcmpgt>
 801ae06:	2800      	cmp	r0, #0
 801ae08:	f47f ae04 	bne.w	801aa14 <__ieee754_pow+0x3b4>
 801ae0c:	4aa2      	ldr	r2, [pc, #648]	; (801b098 <__ieee754_pow+0xa38>)
 801ae0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae12:	4293      	cmp	r3, r2
 801ae14:	f340 8107 	ble.w	801b026 <__ieee754_pow+0x9c6>
 801ae18:	151b      	asrs	r3, r3, #20
 801ae1a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ae1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ae22:	fa4a fa03 	asr.w	sl, sl, r3
 801ae26:	44da      	add	sl, fp
 801ae28:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801ae2c:	489b      	ldr	r0, [pc, #620]	; (801b09c <__ieee754_pow+0xa3c>)
 801ae2e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ae32:	4108      	asrs	r0, r1
 801ae34:	ea00 030a 	and.w	r3, r0, sl
 801ae38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801ae3c:	f1c1 0114 	rsb	r1, r1, #20
 801ae40:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ae44:	fa4a fa01 	asr.w	sl, sl, r1
 801ae48:	f1bb 0f00 	cmp.w	fp, #0
 801ae4c:	f04f 0200 	mov.w	r2, #0
 801ae50:	4620      	mov	r0, r4
 801ae52:	4629      	mov	r1, r5
 801ae54:	bfb8      	it	lt
 801ae56:	f1ca 0a00 	rsblt	sl, sl, #0
 801ae5a:	f7e5 fa45 	bl	80002e8 <__aeabi_dsub>
 801ae5e:	ec41 0b19 	vmov	d9, r0, r1
 801ae62:	4642      	mov	r2, r8
 801ae64:	464b      	mov	r3, r9
 801ae66:	ec51 0b19 	vmov	r0, r1, d9
 801ae6a:	f7e5 fa3f 	bl	80002ec <__adddf3>
 801ae6e:	a37a      	add	r3, pc, #488	; (adr r3, 801b058 <__ieee754_pow+0x9f8>)
 801ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae74:	2000      	movs	r0, #0
 801ae76:	4604      	mov	r4, r0
 801ae78:	460d      	mov	r5, r1
 801ae7a:	f7e5 fbed 	bl	8000658 <__aeabi_dmul>
 801ae7e:	ec53 2b19 	vmov	r2, r3, d9
 801ae82:	4606      	mov	r6, r0
 801ae84:	460f      	mov	r7, r1
 801ae86:	4620      	mov	r0, r4
 801ae88:	4629      	mov	r1, r5
 801ae8a:	f7e5 fa2d 	bl	80002e8 <__aeabi_dsub>
 801ae8e:	4602      	mov	r2, r0
 801ae90:	460b      	mov	r3, r1
 801ae92:	4640      	mov	r0, r8
 801ae94:	4649      	mov	r1, r9
 801ae96:	f7e5 fa27 	bl	80002e8 <__aeabi_dsub>
 801ae9a:	a371      	add	r3, pc, #452	; (adr r3, 801b060 <__ieee754_pow+0xa00>)
 801ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea0:	f7e5 fbda 	bl	8000658 <__aeabi_dmul>
 801aea4:	a370      	add	r3, pc, #448	; (adr r3, 801b068 <__ieee754_pow+0xa08>)
 801aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeaa:	4680      	mov	r8, r0
 801aeac:	4689      	mov	r9, r1
 801aeae:	4620      	mov	r0, r4
 801aeb0:	4629      	mov	r1, r5
 801aeb2:	f7e5 fbd1 	bl	8000658 <__aeabi_dmul>
 801aeb6:	4602      	mov	r2, r0
 801aeb8:	460b      	mov	r3, r1
 801aeba:	4640      	mov	r0, r8
 801aebc:	4649      	mov	r1, r9
 801aebe:	f7e5 fa15 	bl	80002ec <__adddf3>
 801aec2:	4604      	mov	r4, r0
 801aec4:	460d      	mov	r5, r1
 801aec6:	4602      	mov	r2, r0
 801aec8:	460b      	mov	r3, r1
 801aeca:	4630      	mov	r0, r6
 801aecc:	4639      	mov	r1, r7
 801aece:	f7e5 fa0d 	bl	80002ec <__adddf3>
 801aed2:	4632      	mov	r2, r6
 801aed4:	463b      	mov	r3, r7
 801aed6:	4680      	mov	r8, r0
 801aed8:	4689      	mov	r9, r1
 801aeda:	f7e5 fa05 	bl	80002e8 <__aeabi_dsub>
 801aede:	4602      	mov	r2, r0
 801aee0:	460b      	mov	r3, r1
 801aee2:	4620      	mov	r0, r4
 801aee4:	4629      	mov	r1, r5
 801aee6:	f7e5 f9ff 	bl	80002e8 <__aeabi_dsub>
 801aeea:	4642      	mov	r2, r8
 801aeec:	4606      	mov	r6, r0
 801aeee:	460f      	mov	r7, r1
 801aef0:	464b      	mov	r3, r9
 801aef2:	4640      	mov	r0, r8
 801aef4:	4649      	mov	r1, r9
 801aef6:	f7e5 fbaf 	bl	8000658 <__aeabi_dmul>
 801aefa:	a35d      	add	r3, pc, #372	; (adr r3, 801b070 <__ieee754_pow+0xa10>)
 801aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af00:	4604      	mov	r4, r0
 801af02:	460d      	mov	r5, r1
 801af04:	f7e5 fba8 	bl	8000658 <__aeabi_dmul>
 801af08:	a35b      	add	r3, pc, #364	; (adr r3, 801b078 <__ieee754_pow+0xa18>)
 801af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af0e:	f7e5 f9eb 	bl	80002e8 <__aeabi_dsub>
 801af12:	4622      	mov	r2, r4
 801af14:	462b      	mov	r3, r5
 801af16:	f7e5 fb9f 	bl	8000658 <__aeabi_dmul>
 801af1a:	a359      	add	r3, pc, #356	; (adr r3, 801b080 <__ieee754_pow+0xa20>)
 801af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af20:	f7e5 f9e4 	bl	80002ec <__adddf3>
 801af24:	4622      	mov	r2, r4
 801af26:	462b      	mov	r3, r5
 801af28:	f7e5 fb96 	bl	8000658 <__aeabi_dmul>
 801af2c:	a356      	add	r3, pc, #344	; (adr r3, 801b088 <__ieee754_pow+0xa28>)
 801af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af32:	f7e5 f9d9 	bl	80002e8 <__aeabi_dsub>
 801af36:	4622      	mov	r2, r4
 801af38:	462b      	mov	r3, r5
 801af3a:	f7e5 fb8d 	bl	8000658 <__aeabi_dmul>
 801af3e:	a354      	add	r3, pc, #336	; (adr r3, 801b090 <__ieee754_pow+0xa30>)
 801af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af44:	f7e5 f9d2 	bl	80002ec <__adddf3>
 801af48:	4622      	mov	r2, r4
 801af4a:	462b      	mov	r3, r5
 801af4c:	f7e5 fb84 	bl	8000658 <__aeabi_dmul>
 801af50:	4602      	mov	r2, r0
 801af52:	460b      	mov	r3, r1
 801af54:	4640      	mov	r0, r8
 801af56:	4649      	mov	r1, r9
 801af58:	f7e5 f9c6 	bl	80002e8 <__aeabi_dsub>
 801af5c:	4604      	mov	r4, r0
 801af5e:	460d      	mov	r5, r1
 801af60:	4602      	mov	r2, r0
 801af62:	460b      	mov	r3, r1
 801af64:	4640      	mov	r0, r8
 801af66:	4649      	mov	r1, r9
 801af68:	f7e5 fb76 	bl	8000658 <__aeabi_dmul>
 801af6c:	2200      	movs	r2, #0
 801af6e:	ec41 0b19 	vmov	d9, r0, r1
 801af72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801af76:	4620      	mov	r0, r4
 801af78:	4629      	mov	r1, r5
 801af7a:	f7e5 f9b5 	bl	80002e8 <__aeabi_dsub>
 801af7e:	4602      	mov	r2, r0
 801af80:	460b      	mov	r3, r1
 801af82:	ec51 0b19 	vmov	r0, r1, d9
 801af86:	f7e5 fc91 	bl	80008ac <__aeabi_ddiv>
 801af8a:	4632      	mov	r2, r6
 801af8c:	4604      	mov	r4, r0
 801af8e:	460d      	mov	r5, r1
 801af90:	463b      	mov	r3, r7
 801af92:	4640      	mov	r0, r8
 801af94:	4649      	mov	r1, r9
 801af96:	f7e5 fb5f 	bl	8000658 <__aeabi_dmul>
 801af9a:	4632      	mov	r2, r6
 801af9c:	463b      	mov	r3, r7
 801af9e:	f7e5 f9a5 	bl	80002ec <__adddf3>
 801afa2:	4602      	mov	r2, r0
 801afa4:	460b      	mov	r3, r1
 801afa6:	4620      	mov	r0, r4
 801afa8:	4629      	mov	r1, r5
 801afaa:	f7e5 f99d 	bl	80002e8 <__aeabi_dsub>
 801afae:	4642      	mov	r2, r8
 801afb0:	464b      	mov	r3, r9
 801afb2:	f7e5 f999 	bl	80002e8 <__aeabi_dsub>
 801afb6:	460b      	mov	r3, r1
 801afb8:	4602      	mov	r2, r0
 801afba:	4939      	ldr	r1, [pc, #228]	; (801b0a0 <__ieee754_pow+0xa40>)
 801afbc:	2000      	movs	r0, #0
 801afbe:	f7e5 f993 	bl	80002e8 <__aeabi_dsub>
 801afc2:	ec41 0b10 	vmov	d0, r0, r1
 801afc6:	ee10 3a90 	vmov	r3, s1
 801afca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801afce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801afd2:	da2b      	bge.n	801b02c <__ieee754_pow+0x9cc>
 801afd4:	4650      	mov	r0, sl
 801afd6:	f000 fc97 	bl	801b908 <scalbn>
 801afda:	ec51 0b10 	vmov	r0, r1, d0
 801afde:	ec53 2b18 	vmov	r2, r3, d8
 801afe2:	f7ff bbee 	b.w	801a7c2 <__ieee754_pow+0x162>
 801afe6:	4b2f      	ldr	r3, [pc, #188]	; (801b0a4 <__ieee754_pow+0xa44>)
 801afe8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801afec:	429e      	cmp	r6, r3
 801afee:	f77f af0d 	ble.w	801ae0c <__ieee754_pow+0x7ac>
 801aff2:	4b2d      	ldr	r3, [pc, #180]	; (801b0a8 <__ieee754_pow+0xa48>)
 801aff4:	440b      	add	r3, r1
 801aff6:	4303      	orrs	r3, r0
 801aff8:	d009      	beq.n	801b00e <__ieee754_pow+0x9ae>
 801affa:	ec51 0b18 	vmov	r0, r1, d8
 801affe:	2200      	movs	r2, #0
 801b000:	2300      	movs	r3, #0
 801b002:	f7e5 fd9b 	bl	8000b3c <__aeabi_dcmplt>
 801b006:	3800      	subs	r0, #0
 801b008:	bf18      	it	ne
 801b00a:	2001      	movne	r0, #1
 801b00c:	e448      	b.n	801a8a0 <__ieee754_pow+0x240>
 801b00e:	4622      	mov	r2, r4
 801b010:	462b      	mov	r3, r5
 801b012:	f7e5 f969 	bl	80002e8 <__aeabi_dsub>
 801b016:	4642      	mov	r2, r8
 801b018:	464b      	mov	r3, r9
 801b01a:	f7e5 fda3 	bl	8000b64 <__aeabi_dcmpge>
 801b01e:	2800      	cmp	r0, #0
 801b020:	f43f aef4 	beq.w	801ae0c <__ieee754_pow+0x7ac>
 801b024:	e7e9      	b.n	801affa <__ieee754_pow+0x99a>
 801b026:	f04f 0a00 	mov.w	sl, #0
 801b02a:	e71a      	b.n	801ae62 <__ieee754_pow+0x802>
 801b02c:	ec51 0b10 	vmov	r0, r1, d0
 801b030:	4619      	mov	r1, r3
 801b032:	e7d4      	b.n	801afde <__ieee754_pow+0x97e>
 801b034:	491a      	ldr	r1, [pc, #104]	; (801b0a0 <__ieee754_pow+0xa40>)
 801b036:	2000      	movs	r0, #0
 801b038:	f7ff bb31 	b.w	801a69e <__ieee754_pow+0x3e>
 801b03c:	2000      	movs	r0, #0
 801b03e:	2100      	movs	r1, #0
 801b040:	f7ff bb2d 	b.w	801a69e <__ieee754_pow+0x3e>
 801b044:	4630      	mov	r0, r6
 801b046:	4639      	mov	r1, r7
 801b048:	f7ff bb29 	b.w	801a69e <__ieee754_pow+0x3e>
 801b04c:	9204      	str	r2, [sp, #16]
 801b04e:	f7ff bb7b 	b.w	801a748 <__ieee754_pow+0xe8>
 801b052:	2300      	movs	r3, #0
 801b054:	f7ff bb65 	b.w	801a722 <__ieee754_pow+0xc2>
 801b058:	00000000 	.word	0x00000000
 801b05c:	3fe62e43 	.word	0x3fe62e43
 801b060:	fefa39ef 	.word	0xfefa39ef
 801b064:	3fe62e42 	.word	0x3fe62e42
 801b068:	0ca86c39 	.word	0x0ca86c39
 801b06c:	be205c61 	.word	0xbe205c61
 801b070:	72bea4d0 	.word	0x72bea4d0
 801b074:	3e663769 	.word	0x3e663769
 801b078:	c5d26bf1 	.word	0xc5d26bf1
 801b07c:	3ebbbd41 	.word	0x3ebbbd41
 801b080:	af25de2c 	.word	0xaf25de2c
 801b084:	3f11566a 	.word	0x3f11566a
 801b088:	16bebd93 	.word	0x16bebd93
 801b08c:	3f66c16c 	.word	0x3f66c16c
 801b090:	5555553e 	.word	0x5555553e
 801b094:	3fc55555 	.word	0x3fc55555
 801b098:	3fe00000 	.word	0x3fe00000
 801b09c:	fff00000 	.word	0xfff00000
 801b0a0:	3ff00000 	.word	0x3ff00000
 801b0a4:	4090cbff 	.word	0x4090cbff
 801b0a8:	3f6f3400 	.word	0x3f6f3400
 801b0ac:	652b82fe 	.word	0x652b82fe
 801b0b0:	3c971547 	.word	0x3c971547
 801b0b4:	00000000 	.word	0x00000000

0801b0b8 <__ieee754_rem_pio2>:
 801b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0bc:	ed2d 8b02 	vpush	{d8}
 801b0c0:	ec55 4b10 	vmov	r4, r5, d0
 801b0c4:	4bca      	ldr	r3, [pc, #808]	; (801b3f0 <__ieee754_rem_pio2+0x338>)
 801b0c6:	b08b      	sub	sp, #44	; 0x2c
 801b0c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b0cc:	4598      	cmp	r8, r3
 801b0ce:	4682      	mov	sl, r0
 801b0d0:	9502      	str	r5, [sp, #8]
 801b0d2:	dc08      	bgt.n	801b0e6 <__ieee754_rem_pio2+0x2e>
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	ed80 0b00 	vstr	d0, [r0]
 801b0dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b0e0:	f04f 0b00 	mov.w	fp, #0
 801b0e4:	e028      	b.n	801b138 <__ieee754_rem_pio2+0x80>
 801b0e6:	4bc3      	ldr	r3, [pc, #780]	; (801b3f4 <__ieee754_rem_pio2+0x33c>)
 801b0e8:	4598      	cmp	r8, r3
 801b0ea:	dc78      	bgt.n	801b1de <__ieee754_rem_pio2+0x126>
 801b0ec:	9b02      	ldr	r3, [sp, #8]
 801b0ee:	4ec2      	ldr	r6, [pc, #776]	; (801b3f8 <__ieee754_rem_pio2+0x340>)
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	ee10 0a10 	vmov	r0, s0
 801b0f6:	a3b0      	add	r3, pc, #704	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x300>)
 801b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	dd39      	ble.n	801b174 <__ieee754_rem_pio2+0xbc>
 801b100:	f7e5 f8f2 	bl	80002e8 <__aeabi_dsub>
 801b104:	45b0      	cmp	r8, r6
 801b106:	4604      	mov	r4, r0
 801b108:	460d      	mov	r5, r1
 801b10a:	d01b      	beq.n	801b144 <__ieee754_rem_pio2+0x8c>
 801b10c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x308>)
 801b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b112:	f7e5 f8e9 	bl	80002e8 <__aeabi_dsub>
 801b116:	4602      	mov	r2, r0
 801b118:	460b      	mov	r3, r1
 801b11a:	e9ca 2300 	strd	r2, r3, [sl]
 801b11e:	4620      	mov	r0, r4
 801b120:	4629      	mov	r1, r5
 801b122:	f7e5 f8e1 	bl	80002e8 <__aeabi_dsub>
 801b126:	a3a6      	add	r3, pc, #664	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x308>)
 801b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12c:	f7e5 f8dc 	bl	80002e8 <__aeabi_dsub>
 801b130:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b134:	f04f 0b01 	mov.w	fp, #1
 801b138:	4658      	mov	r0, fp
 801b13a:	b00b      	add	sp, #44	; 0x2c
 801b13c:	ecbd 8b02 	vpop	{d8}
 801b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b144:	a3a0      	add	r3, pc, #640	; (adr r3, 801b3c8 <__ieee754_rem_pio2+0x310>)
 801b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14a:	f7e5 f8cd 	bl	80002e8 <__aeabi_dsub>
 801b14e:	a3a0      	add	r3, pc, #640	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x318>)
 801b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b154:	4604      	mov	r4, r0
 801b156:	460d      	mov	r5, r1
 801b158:	f7e5 f8c6 	bl	80002e8 <__aeabi_dsub>
 801b15c:	4602      	mov	r2, r0
 801b15e:	460b      	mov	r3, r1
 801b160:	e9ca 2300 	strd	r2, r3, [sl]
 801b164:	4620      	mov	r0, r4
 801b166:	4629      	mov	r1, r5
 801b168:	f7e5 f8be 	bl	80002e8 <__aeabi_dsub>
 801b16c:	a398      	add	r3, pc, #608	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x318>)
 801b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b172:	e7db      	b.n	801b12c <__ieee754_rem_pio2+0x74>
 801b174:	f7e5 f8ba 	bl	80002ec <__adddf3>
 801b178:	45b0      	cmp	r8, r6
 801b17a:	4604      	mov	r4, r0
 801b17c:	460d      	mov	r5, r1
 801b17e:	d016      	beq.n	801b1ae <__ieee754_rem_pio2+0xf6>
 801b180:	a38f      	add	r3, pc, #572	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x308>)
 801b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b186:	f7e5 f8b1 	bl	80002ec <__adddf3>
 801b18a:	4602      	mov	r2, r0
 801b18c:	460b      	mov	r3, r1
 801b18e:	e9ca 2300 	strd	r2, r3, [sl]
 801b192:	4620      	mov	r0, r4
 801b194:	4629      	mov	r1, r5
 801b196:	f7e5 f8a7 	bl	80002e8 <__aeabi_dsub>
 801b19a:	a389      	add	r3, pc, #548	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x308>)
 801b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a0:	f7e5 f8a4 	bl	80002ec <__adddf3>
 801b1a4:	f04f 3bff 	mov.w	fp, #4294967295
 801b1a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b1ac:	e7c4      	b.n	801b138 <__ieee754_rem_pio2+0x80>
 801b1ae:	a386      	add	r3, pc, #536	; (adr r3, 801b3c8 <__ieee754_rem_pio2+0x310>)
 801b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b4:	f7e5 f89a 	bl	80002ec <__adddf3>
 801b1b8:	a385      	add	r3, pc, #532	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x318>)
 801b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1be:	4604      	mov	r4, r0
 801b1c0:	460d      	mov	r5, r1
 801b1c2:	f7e5 f893 	bl	80002ec <__adddf3>
 801b1c6:	4602      	mov	r2, r0
 801b1c8:	460b      	mov	r3, r1
 801b1ca:	e9ca 2300 	strd	r2, r3, [sl]
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	4629      	mov	r1, r5
 801b1d2:	f7e5 f889 	bl	80002e8 <__aeabi_dsub>
 801b1d6:	a37e      	add	r3, pc, #504	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x318>)
 801b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1dc:	e7e0      	b.n	801b1a0 <__ieee754_rem_pio2+0xe8>
 801b1de:	4b87      	ldr	r3, [pc, #540]	; (801b3fc <__ieee754_rem_pio2+0x344>)
 801b1e0:	4598      	cmp	r8, r3
 801b1e2:	f300 80d8 	bgt.w	801b396 <__ieee754_rem_pio2+0x2de>
 801b1e6:	f000 f96d 	bl	801b4c4 <fabs>
 801b1ea:	ec55 4b10 	vmov	r4, r5, d0
 801b1ee:	ee10 0a10 	vmov	r0, s0
 801b1f2:	a379      	add	r3, pc, #484	; (adr r3, 801b3d8 <__ieee754_rem_pio2+0x320>)
 801b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f8:	4629      	mov	r1, r5
 801b1fa:	f7e5 fa2d 	bl	8000658 <__aeabi_dmul>
 801b1fe:	4b80      	ldr	r3, [pc, #512]	; (801b400 <__ieee754_rem_pio2+0x348>)
 801b200:	2200      	movs	r2, #0
 801b202:	f7e5 f873 	bl	80002ec <__adddf3>
 801b206:	f7e5 fcd7 	bl	8000bb8 <__aeabi_d2iz>
 801b20a:	4683      	mov	fp, r0
 801b20c:	f7e5 f9ba 	bl	8000584 <__aeabi_i2d>
 801b210:	4602      	mov	r2, r0
 801b212:	460b      	mov	r3, r1
 801b214:	ec43 2b18 	vmov	d8, r2, r3
 801b218:	a367      	add	r3, pc, #412	; (adr r3, 801b3b8 <__ieee754_rem_pio2+0x300>)
 801b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21e:	f7e5 fa1b 	bl	8000658 <__aeabi_dmul>
 801b222:	4602      	mov	r2, r0
 801b224:	460b      	mov	r3, r1
 801b226:	4620      	mov	r0, r4
 801b228:	4629      	mov	r1, r5
 801b22a:	f7e5 f85d 	bl	80002e8 <__aeabi_dsub>
 801b22e:	a364      	add	r3, pc, #400	; (adr r3, 801b3c0 <__ieee754_rem_pio2+0x308>)
 801b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b234:	4606      	mov	r6, r0
 801b236:	460f      	mov	r7, r1
 801b238:	ec51 0b18 	vmov	r0, r1, d8
 801b23c:	f7e5 fa0c 	bl	8000658 <__aeabi_dmul>
 801b240:	f1bb 0f1f 	cmp.w	fp, #31
 801b244:	4604      	mov	r4, r0
 801b246:	460d      	mov	r5, r1
 801b248:	dc0d      	bgt.n	801b266 <__ieee754_rem_pio2+0x1ae>
 801b24a:	4b6e      	ldr	r3, [pc, #440]	; (801b404 <__ieee754_rem_pio2+0x34c>)
 801b24c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b254:	4543      	cmp	r3, r8
 801b256:	d006      	beq.n	801b266 <__ieee754_rem_pio2+0x1ae>
 801b258:	4622      	mov	r2, r4
 801b25a:	462b      	mov	r3, r5
 801b25c:	4630      	mov	r0, r6
 801b25e:	4639      	mov	r1, r7
 801b260:	f7e5 f842 	bl	80002e8 <__aeabi_dsub>
 801b264:	e00e      	b.n	801b284 <__ieee754_rem_pio2+0x1cc>
 801b266:	462b      	mov	r3, r5
 801b268:	4622      	mov	r2, r4
 801b26a:	4630      	mov	r0, r6
 801b26c:	4639      	mov	r1, r7
 801b26e:	f7e5 f83b 	bl	80002e8 <__aeabi_dsub>
 801b272:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b276:	9303      	str	r3, [sp, #12]
 801b278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b27c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801b280:	2b10      	cmp	r3, #16
 801b282:	dc02      	bgt.n	801b28a <__ieee754_rem_pio2+0x1d2>
 801b284:	e9ca 0100 	strd	r0, r1, [sl]
 801b288:	e039      	b.n	801b2fe <__ieee754_rem_pio2+0x246>
 801b28a:	a34f      	add	r3, pc, #316	; (adr r3, 801b3c8 <__ieee754_rem_pio2+0x310>)
 801b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b290:	ec51 0b18 	vmov	r0, r1, d8
 801b294:	f7e5 f9e0 	bl	8000658 <__aeabi_dmul>
 801b298:	4604      	mov	r4, r0
 801b29a:	460d      	mov	r5, r1
 801b29c:	4602      	mov	r2, r0
 801b29e:	460b      	mov	r3, r1
 801b2a0:	4630      	mov	r0, r6
 801b2a2:	4639      	mov	r1, r7
 801b2a4:	f7e5 f820 	bl	80002e8 <__aeabi_dsub>
 801b2a8:	4602      	mov	r2, r0
 801b2aa:	460b      	mov	r3, r1
 801b2ac:	4680      	mov	r8, r0
 801b2ae:	4689      	mov	r9, r1
 801b2b0:	4630      	mov	r0, r6
 801b2b2:	4639      	mov	r1, r7
 801b2b4:	f7e5 f818 	bl	80002e8 <__aeabi_dsub>
 801b2b8:	4622      	mov	r2, r4
 801b2ba:	462b      	mov	r3, r5
 801b2bc:	f7e5 f814 	bl	80002e8 <__aeabi_dsub>
 801b2c0:	a343      	add	r3, pc, #268	; (adr r3, 801b3d0 <__ieee754_rem_pio2+0x318>)
 801b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	460d      	mov	r5, r1
 801b2ca:	ec51 0b18 	vmov	r0, r1, d8
 801b2ce:	f7e5 f9c3 	bl	8000658 <__aeabi_dmul>
 801b2d2:	4622      	mov	r2, r4
 801b2d4:	462b      	mov	r3, r5
 801b2d6:	f7e5 f807 	bl	80002e8 <__aeabi_dsub>
 801b2da:	4602      	mov	r2, r0
 801b2dc:	460b      	mov	r3, r1
 801b2de:	4604      	mov	r4, r0
 801b2e0:	460d      	mov	r5, r1
 801b2e2:	4640      	mov	r0, r8
 801b2e4:	4649      	mov	r1, r9
 801b2e6:	f7e4 ffff 	bl	80002e8 <__aeabi_dsub>
 801b2ea:	9a03      	ldr	r2, [sp, #12]
 801b2ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b2f0:	1ad3      	subs	r3, r2, r3
 801b2f2:	2b31      	cmp	r3, #49	; 0x31
 801b2f4:	dc24      	bgt.n	801b340 <__ieee754_rem_pio2+0x288>
 801b2f6:	e9ca 0100 	strd	r0, r1, [sl]
 801b2fa:	4646      	mov	r6, r8
 801b2fc:	464f      	mov	r7, r9
 801b2fe:	e9da 8900 	ldrd	r8, r9, [sl]
 801b302:	4630      	mov	r0, r6
 801b304:	4642      	mov	r2, r8
 801b306:	464b      	mov	r3, r9
 801b308:	4639      	mov	r1, r7
 801b30a:	f7e4 ffed 	bl	80002e8 <__aeabi_dsub>
 801b30e:	462b      	mov	r3, r5
 801b310:	4622      	mov	r2, r4
 801b312:	f7e4 ffe9 	bl	80002e8 <__aeabi_dsub>
 801b316:	9b02      	ldr	r3, [sp, #8]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b31e:	f6bf af0b 	bge.w	801b138 <__ieee754_rem_pio2+0x80>
 801b322:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b326:	f8ca 3004 	str.w	r3, [sl, #4]
 801b32a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b32e:	f8ca 8000 	str.w	r8, [sl]
 801b332:	f8ca 0008 	str.w	r0, [sl, #8]
 801b336:	f8ca 300c 	str.w	r3, [sl, #12]
 801b33a:	f1cb 0b00 	rsb	fp, fp, #0
 801b33e:	e6fb      	b.n	801b138 <__ieee754_rem_pio2+0x80>
 801b340:	a327      	add	r3, pc, #156	; (adr r3, 801b3e0 <__ieee754_rem_pio2+0x328>)
 801b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b346:	ec51 0b18 	vmov	r0, r1, d8
 801b34a:	f7e5 f985 	bl	8000658 <__aeabi_dmul>
 801b34e:	4604      	mov	r4, r0
 801b350:	460d      	mov	r5, r1
 801b352:	4602      	mov	r2, r0
 801b354:	460b      	mov	r3, r1
 801b356:	4640      	mov	r0, r8
 801b358:	4649      	mov	r1, r9
 801b35a:	f7e4 ffc5 	bl	80002e8 <__aeabi_dsub>
 801b35e:	4602      	mov	r2, r0
 801b360:	460b      	mov	r3, r1
 801b362:	4606      	mov	r6, r0
 801b364:	460f      	mov	r7, r1
 801b366:	4640      	mov	r0, r8
 801b368:	4649      	mov	r1, r9
 801b36a:	f7e4 ffbd 	bl	80002e8 <__aeabi_dsub>
 801b36e:	4622      	mov	r2, r4
 801b370:	462b      	mov	r3, r5
 801b372:	f7e4 ffb9 	bl	80002e8 <__aeabi_dsub>
 801b376:	a31c      	add	r3, pc, #112	; (adr r3, 801b3e8 <__ieee754_rem_pio2+0x330>)
 801b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b37c:	4604      	mov	r4, r0
 801b37e:	460d      	mov	r5, r1
 801b380:	ec51 0b18 	vmov	r0, r1, d8
 801b384:	f7e5 f968 	bl	8000658 <__aeabi_dmul>
 801b388:	4622      	mov	r2, r4
 801b38a:	462b      	mov	r3, r5
 801b38c:	f7e4 ffac 	bl	80002e8 <__aeabi_dsub>
 801b390:	4604      	mov	r4, r0
 801b392:	460d      	mov	r5, r1
 801b394:	e760      	b.n	801b258 <__ieee754_rem_pio2+0x1a0>
 801b396:	4b1c      	ldr	r3, [pc, #112]	; (801b408 <__ieee754_rem_pio2+0x350>)
 801b398:	4598      	cmp	r8, r3
 801b39a:	dd37      	ble.n	801b40c <__ieee754_rem_pio2+0x354>
 801b39c:	ee10 2a10 	vmov	r2, s0
 801b3a0:	462b      	mov	r3, r5
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	4629      	mov	r1, r5
 801b3a6:	f7e4 ff9f 	bl	80002e8 <__aeabi_dsub>
 801b3aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b3ae:	e9ca 0100 	strd	r0, r1, [sl]
 801b3b2:	e695      	b.n	801b0e0 <__ieee754_rem_pio2+0x28>
 801b3b4:	f3af 8000 	nop.w
 801b3b8:	54400000 	.word	0x54400000
 801b3bc:	3ff921fb 	.word	0x3ff921fb
 801b3c0:	1a626331 	.word	0x1a626331
 801b3c4:	3dd0b461 	.word	0x3dd0b461
 801b3c8:	1a600000 	.word	0x1a600000
 801b3cc:	3dd0b461 	.word	0x3dd0b461
 801b3d0:	2e037073 	.word	0x2e037073
 801b3d4:	3ba3198a 	.word	0x3ba3198a
 801b3d8:	6dc9c883 	.word	0x6dc9c883
 801b3dc:	3fe45f30 	.word	0x3fe45f30
 801b3e0:	2e000000 	.word	0x2e000000
 801b3e4:	3ba3198a 	.word	0x3ba3198a
 801b3e8:	252049c1 	.word	0x252049c1
 801b3ec:	397b839a 	.word	0x397b839a
 801b3f0:	3fe921fb 	.word	0x3fe921fb
 801b3f4:	4002d97b 	.word	0x4002d97b
 801b3f8:	3ff921fb 	.word	0x3ff921fb
 801b3fc:	413921fb 	.word	0x413921fb
 801b400:	3fe00000 	.word	0x3fe00000
 801b404:	08027be0 	.word	0x08027be0
 801b408:	7fefffff 	.word	0x7fefffff
 801b40c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801b410:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801b414:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801b418:	4620      	mov	r0, r4
 801b41a:	460d      	mov	r5, r1
 801b41c:	f7e5 fbcc 	bl	8000bb8 <__aeabi_d2iz>
 801b420:	f7e5 f8b0 	bl	8000584 <__aeabi_i2d>
 801b424:	4602      	mov	r2, r0
 801b426:	460b      	mov	r3, r1
 801b428:	4620      	mov	r0, r4
 801b42a:	4629      	mov	r1, r5
 801b42c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b430:	f7e4 ff5a 	bl	80002e8 <__aeabi_dsub>
 801b434:	4b21      	ldr	r3, [pc, #132]	; (801b4bc <__ieee754_rem_pio2+0x404>)
 801b436:	2200      	movs	r2, #0
 801b438:	f7e5 f90e 	bl	8000658 <__aeabi_dmul>
 801b43c:	460d      	mov	r5, r1
 801b43e:	4604      	mov	r4, r0
 801b440:	f7e5 fbba 	bl	8000bb8 <__aeabi_d2iz>
 801b444:	f7e5 f89e 	bl	8000584 <__aeabi_i2d>
 801b448:	4602      	mov	r2, r0
 801b44a:	460b      	mov	r3, r1
 801b44c:	4620      	mov	r0, r4
 801b44e:	4629      	mov	r1, r5
 801b450:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b454:	f7e4 ff48 	bl	80002e8 <__aeabi_dsub>
 801b458:	4b18      	ldr	r3, [pc, #96]	; (801b4bc <__ieee754_rem_pio2+0x404>)
 801b45a:	2200      	movs	r2, #0
 801b45c:	f7e5 f8fc 	bl	8000658 <__aeabi_dmul>
 801b460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b464:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b468:	2703      	movs	r7, #3
 801b46a:	2400      	movs	r4, #0
 801b46c:	2500      	movs	r5, #0
 801b46e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801b472:	4622      	mov	r2, r4
 801b474:	462b      	mov	r3, r5
 801b476:	46b9      	mov	r9, r7
 801b478:	3f01      	subs	r7, #1
 801b47a:	f7e5 fb55 	bl	8000b28 <__aeabi_dcmpeq>
 801b47e:	2800      	cmp	r0, #0
 801b480:	d1f5      	bne.n	801b46e <__ieee754_rem_pio2+0x3b6>
 801b482:	4b0f      	ldr	r3, [pc, #60]	; (801b4c0 <__ieee754_rem_pio2+0x408>)
 801b484:	9301      	str	r3, [sp, #4]
 801b486:	2302      	movs	r3, #2
 801b488:	9300      	str	r3, [sp, #0]
 801b48a:	4632      	mov	r2, r6
 801b48c:	464b      	mov	r3, r9
 801b48e:	4651      	mov	r1, sl
 801b490:	a804      	add	r0, sp, #16
 801b492:	f000 fae9 	bl	801ba68 <__kernel_rem_pio2>
 801b496:	9b02      	ldr	r3, [sp, #8]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	4683      	mov	fp, r0
 801b49c:	f6bf ae4c 	bge.w	801b138 <__ieee754_rem_pio2+0x80>
 801b4a0:	e9da 2100 	ldrd	r2, r1, [sl]
 801b4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4a8:	e9ca 2300 	strd	r2, r3, [sl]
 801b4ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b4b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b4b8:	e73f      	b.n	801b33a <__ieee754_rem_pio2+0x282>
 801b4ba:	bf00      	nop
 801b4bc:	41700000 	.word	0x41700000
 801b4c0:	08027c60 	.word	0x08027c60

0801b4c4 <fabs>:
 801b4c4:	ec51 0b10 	vmov	r0, r1, d0
 801b4c8:	ee10 2a10 	vmov	r2, s0
 801b4cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b4d0:	ec43 2b10 	vmov	d0, r2, r3
 801b4d4:	4770      	bx	lr
	...

0801b4d8 <__ieee754_expf>:
 801b4d8:	ee10 2a10 	vmov	r2, s0
 801b4dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b4e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b4e4:	d902      	bls.n	801b4ec <__ieee754_expf+0x14>
 801b4e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b4ea:	4770      	bx	lr
 801b4ec:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801b4f0:	d106      	bne.n	801b500 <__ieee754_expf+0x28>
 801b4f2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b62c <__ieee754_expf+0x154>
 801b4f6:	2900      	cmp	r1, #0
 801b4f8:	bf18      	it	ne
 801b4fa:	eeb0 0a67 	vmovne.f32	s0, s15
 801b4fe:	4770      	bx	lr
 801b500:	484b      	ldr	r0, [pc, #300]	; (801b630 <__ieee754_expf+0x158>)
 801b502:	4282      	cmp	r2, r0
 801b504:	dd02      	ble.n	801b50c <__ieee754_expf+0x34>
 801b506:	2000      	movs	r0, #0
 801b508:	f7fe bb6a 	b.w	8019be0 <__math_oflowf>
 801b50c:	2a00      	cmp	r2, #0
 801b50e:	da05      	bge.n	801b51c <__ieee754_expf+0x44>
 801b510:	4a48      	ldr	r2, [pc, #288]	; (801b634 <__ieee754_expf+0x15c>)
 801b512:	4293      	cmp	r3, r2
 801b514:	d902      	bls.n	801b51c <__ieee754_expf+0x44>
 801b516:	2000      	movs	r0, #0
 801b518:	f7fe bb5c 	b.w	8019bd4 <__math_uflowf>
 801b51c:	4a46      	ldr	r2, [pc, #280]	; (801b638 <__ieee754_expf+0x160>)
 801b51e:	4293      	cmp	r3, r2
 801b520:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b524:	d952      	bls.n	801b5cc <__ieee754_expf+0xf4>
 801b526:	4a45      	ldr	r2, [pc, #276]	; (801b63c <__ieee754_expf+0x164>)
 801b528:	4293      	cmp	r3, r2
 801b52a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801b52e:	d834      	bhi.n	801b59a <__ieee754_expf+0xc2>
 801b530:	4b43      	ldr	r3, [pc, #268]	; (801b640 <__ieee754_expf+0x168>)
 801b532:	4413      	add	r3, r2
 801b534:	ed93 7a00 	vldr	s14, [r3]
 801b538:	4b42      	ldr	r3, [pc, #264]	; (801b644 <__ieee754_expf+0x16c>)
 801b53a:	4413      	add	r3, r2
 801b53c:	ee30 7a47 	vsub.f32	s14, s0, s14
 801b540:	f1c1 0201 	rsb	r2, r1, #1
 801b544:	edd3 7a00 	vldr	s15, [r3]
 801b548:	1a52      	subs	r2, r2, r1
 801b54a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801b54e:	ee20 6a00 	vmul.f32	s12, s0, s0
 801b552:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801b648 <__ieee754_expf+0x170>
 801b556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b64c <__ieee754_expf+0x174>
 801b55a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801b55e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801b650 <__ieee754_expf+0x178>
 801b562:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b566:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801b654 <__ieee754_expf+0x17c>
 801b56a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801b56e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801b658 <__ieee754_expf+0x180>
 801b572:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b576:	eef0 6a40 	vmov.f32	s13, s0
 801b57a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801b57e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b582:	ee20 5a26 	vmul.f32	s10, s0, s13
 801b586:	bb92      	cbnz	r2, 801b5ee <__ieee754_expf+0x116>
 801b588:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801b58c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801b590:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b594:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801b598:	4770      	bx	lr
 801b59a:	4b30      	ldr	r3, [pc, #192]	; (801b65c <__ieee754_expf+0x184>)
 801b59c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801b660 <__ieee754_expf+0x188>
 801b5a0:	eddf 6a30 	vldr	s13, [pc, #192]	; 801b664 <__ieee754_expf+0x18c>
 801b5a4:	4413      	add	r3, r2
 801b5a6:	edd3 7a00 	vldr	s15, [r3]
 801b5aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b5ae:	eeb0 7a40 	vmov.f32	s14, s0
 801b5b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b5b6:	ee17 2a90 	vmov	r2, s15
 801b5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b5be:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b5c2:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b668 <__ieee754_expf+0x190>
 801b5c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b5ca:	e7be      	b.n	801b54a <__ieee754_expf+0x72>
 801b5cc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801b5d0:	d20b      	bcs.n	801b5ea <__ieee754_expf+0x112>
 801b5d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 801b66c <__ieee754_expf+0x194>
 801b5d6:	ee70 6a26 	vadd.f32	s13, s0, s13
 801b5da:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5e2:	dd02      	ble.n	801b5ea <__ieee754_expf+0x112>
 801b5e4:	ee30 0a25 	vadd.f32	s0, s0, s11
 801b5e8:	4770      	bx	lr
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	e7af      	b.n	801b54e <__ieee754_expf+0x76>
 801b5ee:	ee36 6a66 	vsub.f32	s12, s12, s13
 801b5f2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801b5f6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801b5fa:	bfb8      	it	lt
 801b5fc:	3264      	addlt	r2, #100	; 0x64
 801b5fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b606:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801b60a:	ee17 3a90 	vmov	r3, s15
 801b60e:	bfab      	itete	ge
 801b610:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801b614:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801b618:	ee00 3a10 	vmovge	s0, r3
 801b61c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801b670 <__ieee754_expf+0x198>
 801b620:	bfbc      	itt	lt
 801b622:	ee00 3a10 	vmovlt	s0, r3
 801b626:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801b62a:	4770      	bx	lr
 801b62c:	00000000 	.word	0x00000000
 801b630:	42b17217 	.word	0x42b17217
 801b634:	42cff1b5 	.word	0x42cff1b5
 801b638:	3eb17218 	.word	0x3eb17218
 801b63c:	3f851591 	.word	0x3f851591
 801b640:	08027d70 	.word	0x08027d70
 801b644:	08027d78 	.word	0x08027d78
 801b648:	3331bb4c 	.word	0x3331bb4c
 801b64c:	b5ddea0e 	.word	0xb5ddea0e
 801b650:	388ab355 	.word	0x388ab355
 801b654:	bb360b61 	.word	0xbb360b61
 801b658:	3e2aaaab 	.word	0x3e2aaaab
 801b65c:	08027d68 	.word	0x08027d68
 801b660:	3fb8aa3b 	.word	0x3fb8aa3b
 801b664:	3f317180 	.word	0x3f317180
 801b668:	3717f7d1 	.word	0x3717f7d1
 801b66c:	7149f2ca 	.word	0x7149f2ca
 801b670:	0d800000 	.word	0x0d800000

0801b674 <__ieee754_logf>:
 801b674:	ee10 3a10 	vmov	r3, s0
 801b678:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b67c:	d106      	bne.n	801b68c <__ieee754_logf+0x18>
 801b67e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801b818 <__ieee754_logf+0x1a4>
 801b682:	eddf 7a66 	vldr	s15, [pc, #408]	; 801b81c <__ieee754_logf+0x1a8>
 801b686:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b68a:	4770      	bx	lr
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	da02      	bge.n	801b696 <__ieee754_logf+0x22>
 801b690:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b694:	e7f5      	b.n	801b682 <__ieee754_logf+0xe>
 801b696:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b69a:	db02      	blt.n	801b6a2 <__ieee754_logf+0x2e>
 801b69c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b6a0:	4770      	bx	lr
 801b6a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b6a6:	bfb8      	it	lt
 801b6a8:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801b820 <__ieee754_logf+0x1ac>
 801b6ac:	485d      	ldr	r0, [pc, #372]	; (801b824 <__ieee754_logf+0x1b0>)
 801b6ae:	bfbe      	ittt	lt
 801b6b0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801b6b4:	f06f 0118 	mvnlt.w	r1, #24
 801b6b8:	ee17 3a90 	vmovlt	r3, s15
 801b6bc:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801b6c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b6c4:	4418      	add	r0, r3
 801b6c6:	bfa8      	it	ge
 801b6c8:	2100      	movge	r1, #0
 801b6ca:	3a7f      	subs	r2, #127	; 0x7f
 801b6cc:	440a      	add	r2, r1
 801b6ce:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801b6d2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801b6d6:	4319      	orrs	r1, r3
 801b6d8:	ee00 1a10 	vmov	s0, r1
 801b6dc:	4952      	ldr	r1, [pc, #328]	; (801b828 <__ieee754_logf+0x1b4>)
 801b6de:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801b6e2:	f103 000f 	add.w	r0, r3, #15
 801b6e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b6ea:	4001      	ands	r1, r0
 801b6ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b6f0:	bb89      	cbnz	r1, 801b756 <__ieee754_logf+0xe2>
 801b6f2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801b6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6fa:	d10f      	bne.n	801b71c <__ieee754_logf+0xa8>
 801b6fc:	2a00      	cmp	r2, #0
 801b6fe:	f000 8087 	beq.w	801b810 <__ieee754_logf+0x19c>
 801b702:	ee07 2a90 	vmov	s15, r2
 801b706:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801b82c <__ieee754_logf+0x1b8>
 801b70a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b830 <__ieee754_logf+0x1bc>
 801b70e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b712:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b716:	eea7 0a87 	vfma.f32	s0, s15, s14
 801b71a:	4770      	bx	lr
 801b71c:	eddf 6a45 	vldr	s13, [pc, #276]	; 801b834 <__ieee754_logf+0x1c0>
 801b720:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b724:	eee0 7a66 	vfms.f32	s15, s0, s13
 801b728:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b72c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b730:	b912      	cbnz	r2, 801b738 <__ieee754_logf+0xc4>
 801b732:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b736:	4770      	bx	lr
 801b738:	ee07 2a90 	vmov	s15, r2
 801b73c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801b82c <__ieee754_logf+0x1b8>
 801b740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b744:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b748:	ee37 0a40 	vsub.f32	s0, s14, s0
 801b74c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b830 <__ieee754_logf+0x1bc>
 801b750:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801b754:	4770      	bx	lr
 801b756:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b75a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b75e:	eddf 5a36 	vldr	s11, [pc, #216]	; 801b838 <__ieee754_logf+0x1c4>
 801b762:	eddf 4a36 	vldr	s9, [pc, #216]	; 801b83c <__ieee754_logf+0x1c8>
 801b766:	4936      	ldr	r1, [pc, #216]	; (801b840 <__ieee754_logf+0x1cc>)
 801b768:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801b76c:	4419      	add	r1, r3
 801b76e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801b772:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801b776:	430b      	orrs	r3, r1
 801b778:	2b00      	cmp	r3, #0
 801b77a:	ee07 2a90 	vmov	s15, r2
 801b77e:	ee26 5a06 	vmul.f32	s10, s12, s12
 801b782:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b786:	ee25 7a05 	vmul.f32	s14, s10, s10
 801b78a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801b844 <__ieee754_logf+0x1d0>
 801b78e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b792:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801b848 <__ieee754_logf+0x1d4>
 801b796:	eee7 5a87 	vfma.f32	s11, s15, s14
 801b79a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801b84c <__ieee754_logf+0x1d8>
 801b79e:	eee7 7a24 	vfma.f32	s15, s14, s9
 801b7a2:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801b850 <__ieee754_logf+0x1dc>
 801b7a6:	eee7 4a87 	vfma.f32	s9, s15, s14
 801b7aa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801b854 <__ieee754_logf+0x1e0>
 801b7ae:	eee4 7a87 	vfma.f32	s15, s9, s14
 801b7b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 801b7b6:	eee5 7a87 	vfma.f32	s15, s11, s14
 801b7ba:	dd1a      	ble.n	801b7f2 <__ieee754_logf+0x17e>
 801b7bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b7c0:	ee20 7a07 	vmul.f32	s14, s0, s14
 801b7c4:	ee27 7a00 	vmul.f32	s14, s14, s0
 801b7c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b7cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b7d0:	b912      	cbnz	r2, 801b7d8 <__ieee754_logf+0x164>
 801b7d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b7d6:	e7ac      	b.n	801b732 <__ieee754_logf+0xbe>
 801b7d8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801b82c <__ieee754_logf+0x1b8>
 801b7dc:	eee6 7a86 	vfma.f32	s15, s13, s12
 801b7e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b7e4:	ee37 0a40 	vsub.f32	s0, s14, s0
 801b7e8:	eddf 7a11 	vldr	s15, [pc, #68]	; 801b830 <__ieee754_logf+0x1bc>
 801b7ec:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801b7f0:	4770      	bx	lr
 801b7f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b7f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b7fa:	b912      	cbnz	r2, 801b802 <__ieee754_logf+0x18e>
 801b7fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b800:	4770      	bx	lr
 801b802:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b82c <__ieee754_logf+0x1b8>
 801b806:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801b80a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b80e:	e7eb      	b.n	801b7e8 <__ieee754_logf+0x174>
 801b810:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801b81c <__ieee754_logf+0x1a8>
 801b814:	4770      	bx	lr
 801b816:	bf00      	nop
 801b818:	cc000000 	.word	0xcc000000
 801b81c:	00000000 	.word	0x00000000
 801b820:	4c000000 	.word	0x4c000000
 801b824:	004afb20 	.word	0x004afb20
 801b828:	007ffff0 	.word	0x007ffff0
 801b82c:	3717f7d1 	.word	0x3717f7d1
 801b830:	3f317180 	.word	0x3f317180
 801b834:	3eaaaaab 	.word	0x3eaaaaab
 801b838:	3e1cd04f 	.word	0x3e1cd04f
 801b83c:	3e178897 	.word	0x3e178897
 801b840:	ffcf5c30 	.word	0xffcf5c30
 801b844:	3e638e29 	.word	0x3e638e29
 801b848:	3ecccccd 	.word	0x3ecccccd
 801b84c:	3e3a3325 	.word	0x3e3a3325
 801b850:	3e924925 	.word	0x3e924925
 801b854:	3f2aaaab 	.word	0x3f2aaaab

0801b858 <__ieee754_log10f>:
 801b858:	b508      	push	{r3, lr}
 801b85a:	ee10 2a10 	vmov	r2, s0
 801b85e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801b862:	ed2d 8b02 	vpush	{d8}
 801b866:	d108      	bne.n	801b87a <__ieee754_log10f+0x22>
 801b868:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801b8f0 <__ieee754_log10f+0x98>
 801b86c:	eddf 7a21 	vldr	s15, [pc, #132]	; 801b8f4 <__ieee754_log10f+0x9c>
 801b870:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801b874:	ecbd 8b02 	vpop	{d8}
 801b878:	bd08      	pop	{r3, pc}
 801b87a:	2a00      	cmp	r2, #0
 801b87c:	da02      	bge.n	801b884 <__ieee754_log10f+0x2c>
 801b87e:	ee30 7a40 	vsub.f32	s14, s0, s0
 801b882:	e7f3      	b.n	801b86c <__ieee754_log10f+0x14>
 801b884:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b888:	db02      	blt.n	801b890 <__ieee754_log10f+0x38>
 801b88a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b88e:	e7f1      	b.n	801b874 <__ieee754_log10f+0x1c>
 801b890:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801b894:	bfbf      	itttt	lt
 801b896:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801b8f8 <__ieee754_log10f+0xa0>
 801b89a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801b89e:	f06f 0118 	mvnlt.w	r1, #24
 801b8a2:	ee17 2a90 	vmovlt	r2, s15
 801b8a6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801b8aa:	bfa8      	it	ge
 801b8ac:	2100      	movge	r1, #0
 801b8ae:	3b7f      	subs	r3, #127	; 0x7f
 801b8b0:	440b      	add	r3, r1
 801b8b2:	0fd9      	lsrs	r1, r3, #31
 801b8b4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b8b8:	ee07 3a90 	vmov	s15, r3
 801b8bc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801b8c0:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801b8c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801b8c8:	ee00 3a10 	vmov	s0, r3
 801b8cc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801b8d0:	f7ff fed0 	bl	801b674 <__ieee754_logf>
 801b8d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b8fc <__ieee754_log10f+0xa4>
 801b8d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b8dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b900 <__ieee754_log10f+0xa8>
 801b8e0:	eea8 0a27 	vfma.f32	s0, s16, s15
 801b8e4:	eddf 7a07 	vldr	s15, [pc, #28]	; 801b904 <__ieee754_log10f+0xac>
 801b8e8:	eea8 0a27 	vfma.f32	s0, s16, s15
 801b8ec:	e7c2      	b.n	801b874 <__ieee754_log10f+0x1c>
 801b8ee:	bf00      	nop
 801b8f0:	cc000000 	.word	0xcc000000
 801b8f4:	00000000 	.word	0x00000000
 801b8f8:	4c000000 	.word	0x4c000000
 801b8fc:	3ede5bd9 	.word	0x3ede5bd9
 801b900:	355427db 	.word	0x355427db
 801b904:	3e9a2080 	.word	0x3e9a2080

0801b908 <scalbn>:
 801b908:	b570      	push	{r4, r5, r6, lr}
 801b90a:	ec55 4b10 	vmov	r4, r5, d0
 801b90e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b912:	4606      	mov	r6, r0
 801b914:	462b      	mov	r3, r5
 801b916:	b999      	cbnz	r1, 801b940 <scalbn+0x38>
 801b918:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b91c:	4323      	orrs	r3, r4
 801b91e:	d03f      	beq.n	801b9a0 <scalbn+0x98>
 801b920:	4b35      	ldr	r3, [pc, #212]	; (801b9f8 <scalbn+0xf0>)
 801b922:	4629      	mov	r1, r5
 801b924:	ee10 0a10 	vmov	r0, s0
 801b928:	2200      	movs	r2, #0
 801b92a:	f7e4 fe95 	bl	8000658 <__aeabi_dmul>
 801b92e:	4b33      	ldr	r3, [pc, #204]	; (801b9fc <scalbn+0xf4>)
 801b930:	429e      	cmp	r6, r3
 801b932:	4604      	mov	r4, r0
 801b934:	460d      	mov	r5, r1
 801b936:	da10      	bge.n	801b95a <scalbn+0x52>
 801b938:	a327      	add	r3, pc, #156	; (adr r3, 801b9d8 <scalbn+0xd0>)
 801b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93e:	e01f      	b.n	801b980 <scalbn+0x78>
 801b940:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801b944:	4291      	cmp	r1, r2
 801b946:	d10c      	bne.n	801b962 <scalbn+0x5a>
 801b948:	ee10 2a10 	vmov	r2, s0
 801b94c:	4620      	mov	r0, r4
 801b94e:	4629      	mov	r1, r5
 801b950:	f7e4 fccc 	bl	80002ec <__adddf3>
 801b954:	4604      	mov	r4, r0
 801b956:	460d      	mov	r5, r1
 801b958:	e022      	b.n	801b9a0 <scalbn+0x98>
 801b95a:	460b      	mov	r3, r1
 801b95c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b960:	3936      	subs	r1, #54	; 0x36
 801b962:	f24c 3250 	movw	r2, #50000	; 0xc350
 801b966:	4296      	cmp	r6, r2
 801b968:	dd0d      	ble.n	801b986 <scalbn+0x7e>
 801b96a:	2d00      	cmp	r5, #0
 801b96c:	a11c      	add	r1, pc, #112	; (adr r1, 801b9e0 <scalbn+0xd8>)
 801b96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b972:	da02      	bge.n	801b97a <scalbn+0x72>
 801b974:	a11c      	add	r1, pc, #112	; (adr r1, 801b9e8 <scalbn+0xe0>)
 801b976:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b97a:	a319      	add	r3, pc, #100	; (adr r3, 801b9e0 <scalbn+0xd8>)
 801b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b980:	f7e4 fe6a 	bl	8000658 <__aeabi_dmul>
 801b984:	e7e6      	b.n	801b954 <scalbn+0x4c>
 801b986:	1872      	adds	r2, r6, r1
 801b988:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b98c:	428a      	cmp	r2, r1
 801b98e:	dcec      	bgt.n	801b96a <scalbn+0x62>
 801b990:	2a00      	cmp	r2, #0
 801b992:	dd08      	ble.n	801b9a6 <scalbn+0x9e>
 801b994:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b99c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b9a0:	ec45 4b10 	vmov	d0, r4, r5
 801b9a4:	bd70      	pop	{r4, r5, r6, pc}
 801b9a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b9aa:	da08      	bge.n	801b9be <scalbn+0xb6>
 801b9ac:	2d00      	cmp	r5, #0
 801b9ae:	a10a      	add	r1, pc, #40	; (adr r1, 801b9d8 <scalbn+0xd0>)
 801b9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9b4:	dac0      	bge.n	801b938 <scalbn+0x30>
 801b9b6:	a10e      	add	r1, pc, #56	; (adr r1, 801b9f0 <scalbn+0xe8>)
 801b9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9bc:	e7bc      	b.n	801b938 <scalbn+0x30>
 801b9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b9c2:	3236      	adds	r2, #54	; 0x36
 801b9c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b9c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	4b0c      	ldr	r3, [pc, #48]	; (801ba00 <scalbn+0xf8>)
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	e7d5      	b.n	801b980 <scalbn+0x78>
 801b9d4:	f3af 8000 	nop.w
 801b9d8:	c2f8f359 	.word	0xc2f8f359
 801b9dc:	01a56e1f 	.word	0x01a56e1f
 801b9e0:	8800759c 	.word	0x8800759c
 801b9e4:	7e37e43c 	.word	0x7e37e43c
 801b9e8:	8800759c 	.word	0x8800759c
 801b9ec:	fe37e43c 	.word	0xfe37e43c
 801b9f0:	c2f8f359 	.word	0xc2f8f359
 801b9f4:	81a56e1f 	.word	0x81a56e1f
 801b9f8:	43500000 	.word	0x43500000
 801b9fc:	ffff3cb0 	.word	0xffff3cb0
 801ba00:	3c900000 	.word	0x3c900000

0801ba04 <with_errno>:
 801ba04:	b570      	push	{r4, r5, r6, lr}
 801ba06:	4604      	mov	r4, r0
 801ba08:	460d      	mov	r5, r1
 801ba0a:	4616      	mov	r6, r2
 801ba0c:	f001 fcce 	bl	801d3ac <__errno>
 801ba10:	4629      	mov	r1, r5
 801ba12:	6006      	str	r6, [r0, #0]
 801ba14:	4620      	mov	r0, r4
 801ba16:	bd70      	pop	{r4, r5, r6, pc}

0801ba18 <xflow>:
 801ba18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba1a:	4614      	mov	r4, r2
 801ba1c:	461d      	mov	r5, r3
 801ba1e:	b108      	cbz	r0, 801ba24 <xflow+0xc>
 801ba20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801ba24:	e9cd 2300 	strd	r2, r3, [sp]
 801ba28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	4629      	mov	r1, r5
 801ba30:	f7e4 fe12 	bl	8000658 <__aeabi_dmul>
 801ba34:	2222      	movs	r2, #34	; 0x22
 801ba36:	b003      	add	sp, #12
 801ba38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba3c:	f7ff bfe2 	b.w	801ba04 <with_errno>

0801ba40 <__math_uflow>:
 801ba40:	b508      	push	{r3, lr}
 801ba42:	2200      	movs	r2, #0
 801ba44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ba48:	f7ff ffe6 	bl	801ba18 <xflow>
 801ba4c:	ec41 0b10 	vmov	d0, r0, r1
 801ba50:	bd08      	pop	{r3, pc}

0801ba52 <__math_oflow>:
 801ba52:	b508      	push	{r3, lr}
 801ba54:	2200      	movs	r2, #0
 801ba56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ba5a:	f7ff ffdd 	bl	801ba18 <xflow>
 801ba5e:	ec41 0b10 	vmov	d0, r0, r1
 801ba62:	bd08      	pop	{r3, pc}
 801ba64:	0000      	movs	r0, r0
	...

0801ba68 <__kernel_rem_pio2>:
 801ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba6c:	ed2d 8b02 	vpush	{d8}
 801ba70:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ba74:	f112 0f14 	cmn.w	r2, #20
 801ba78:	9306      	str	r3, [sp, #24]
 801ba7a:	9104      	str	r1, [sp, #16]
 801ba7c:	4bc2      	ldr	r3, [pc, #776]	; (801bd88 <__kernel_rem_pio2+0x320>)
 801ba7e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ba80:	9009      	str	r0, [sp, #36]	; 0x24
 801ba82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ba86:	9300      	str	r3, [sp, #0]
 801ba88:	9b06      	ldr	r3, [sp, #24]
 801ba8a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ba8e:	bfa8      	it	ge
 801ba90:	1ed4      	subge	r4, r2, #3
 801ba92:	9305      	str	r3, [sp, #20]
 801ba94:	bfb2      	itee	lt
 801ba96:	2400      	movlt	r4, #0
 801ba98:	2318      	movge	r3, #24
 801ba9a:	fb94 f4f3 	sdivge	r4, r4, r3
 801ba9e:	f06f 0317 	mvn.w	r3, #23
 801baa2:	fb04 3303 	mla	r3, r4, r3, r3
 801baa6:	eb03 0a02 	add.w	sl, r3, r2
 801baaa:	9b00      	ldr	r3, [sp, #0]
 801baac:	9a05      	ldr	r2, [sp, #20]
 801baae:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801bd78 <__kernel_rem_pio2+0x310>
 801bab2:	eb03 0802 	add.w	r8, r3, r2
 801bab6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801bab8:	1aa7      	subs	r7, r4, r2
 801baba:	ae20      	add	r6, sp, #128	; 0x80
 801babc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801bac0:	2500      	movs	r5, #0
 801bac2:	4545      	cmp	r5, r8
 801bac4:	dd13      	ble.n	801baee <__kernel_rem_pio2+0x86>
 801bac6:	9b06      	ldr	r3, [sp, #24]
 801bac8:	aa20      	add	r2, sp, #128	; 0x80
 801baca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801bace:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801bad2:	f04f 0800 	mov.w	r8, #0
 801bad6:	9b00      	ldr	r3, [sp, #0]
 801bad8:	4598      	cmp	r8, r3
 801bada:	dc31      	bgt.n	801bb40 <__kernel_rem_pio2+0xd8>
 801badc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801bd78 <__kernel_rem_pio2+0x310>
 801bae0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bae8:	462f      	mov	r7, r5
 801baea:	2600      	movs	r6, #0
 801baec:	e01b      	b.n	801bb26 <__kernel_rem_pio2+0xbe>
 801baee:	42ef      	cmn	r7, r5
 801baf0:	d407      	bmi.n	801bb02 <__kernel_rem_pio2+0x9a>
 801baf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801baf6:	f7e4 fd45 	bl	8000584 <__aeabi_i2d>
 801bafa:	e8e6 0102 	strd	r0, r1, [r6], #8
 801bafe:	3501      	adds	r5, #1
 801bb00:	e7df      	b.n	801bac2 <__kernel_rem_pio2+0x5a>
 801bb02:	ec51 0b18 	vmov	r0, r1, d8
 801bb06:	e7f8      	b.n	801bafa <__kernel_rem_pio2+0x92>
 801bb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801bb10:	f7e4 fda2 	bl	8000658 <__aeabi_dmul>
 801bb14:	4602      	mov	r2, r0
 801bb16:	460b      	mov	r3, r1
 801bb18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb1c:	f7e4 fbe6 	bl	80002ec <__adddf3>
 801bb20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb24:	3601      	adds	r6, #1
 801bb26:	9b05      	ldr	r3, [sp, #20]
 801bb28:	429e      	cmp	r6, r3
 801bb2a:	f1a7 0708 	sub.w	r7, r7, #8
 801bb2e:	ddeb      	ble.n	801bb08 <__kernel_rem_pio2+0xa0>
 801bb30:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb34:	f108 0801 	add.w	r8, r8, #1
 801bb38:	ecab 7b02 	vstmia	fp!, {d7}
 801bb3c:	3508      	adds	r5, #8
 801bb3e:	e7ca      	b.n	801bad6 <__kernel_rem_pio2+0x6e>
 801bb40:	9b00      	ldr	r3, [sp, #0]
 801bb42:	aa0c      	add	r2, sp, #48	; 0x30
 801bb44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bb48:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb4a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801bb4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801bb50:	9c00      	ldr	r4, [sp, #0]
 801bb52:	930a      	str	r3, [sp, #40]	; 0x28
 801bb54:	00e3      	lsls	r3, r4, #3
 801bb56:	9308      	str	r3, [sp, #32]
 801bb58:	ab98      	add	r3, sp, #608	; 0x260
 801bb5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bb5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801bb62:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801bb66:	ab70      	add	r3, sp, #448	; 0x1c0
 801bb68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801bb6c:	46c3      	mov	fp, r8
 801bb6e:	46a1      	mov	r9, r4
 801bb70:	f1b9 0f00 	cmp.w	r9, #0
 801bb74:	f1a5 0508 	sub.w	r5, r5, #8
 801bb78:	dc77      	bgt.n	801bc6a <__kernel_rem_pio2+0x202>
 801bb7a:	ec47 6b10 	vmov	d0, r6, r7
 801bb7e:	4650      	mov	r0, sl
 801bb80:	f7ff fec2 	bl	801b908 <scalbn>
 801bb84:	ec57 6b10 	vmov	r6, r7, d0
 801bb88:	2200      	movs	r2, #0
 801bb8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801bb8e:	ee10 0a10 	vmov	r0, s0
 801bb92:	4639      	mov	r1, r7
 801bb94:	f7e4 fd60 	bl	8000658 <__aeabi_dmul>
 801bb98:	ec41 0b10 	vmov	d0, r0, r1
 801bb9c:	f7fe f904 	bl	8019da8 <floor>
 801bba0:	4b7a      	ldr	r3, [pc, #488]	; (801bd8c <__kernel_rem_pio2+0x324>)
 801bba2:	ec51 0b10 	vmov	r0, r1, d0
 801bba6:	2200      	movs	r2, #0
 801bba8:	f7e4 fd56 	bl	8000658 <__aeabi_dmul>
 801bbac:	4602      	mov	r2, r0
 801bbae:	460b      	mov	r3, r1
 801bbb0:	4630      	mov	r0, r6
 801bbb2:	4639      	mov	r1, r7
 801bbb4:	f7e4 fb98 	bl	80002e8 <__aeabi_dsub>
 801bbb8:	460f      	mov	r7, r1
 801bbba:	4606      	mov	r6, r0
 801bbbc:	f7e4 fffc 	bl	8000bb8 <__aeabi_d2iz>
 801bbc0:	9002      	str	r0, [sp, #8]
 801bbc2:	f7e4 fcdf 	bl	8000584 <__aeabi_i2d>
 801bbc6:	4602      	mov	r2, r0
 801bbc8:	460b      	mov	r3, r1
 801bbca:	4630      	mov	r0, r6
 801bbcc:	4639      	mov	r1, r7
 801bbce:	f7e4 fb8b 	bl	80002e8 <__aeabi_dsub>
 801bbd2:	f1ba 0f00 	cmp.w	sl, #0
 801bbd6:	4606      	mov	r6, r0
 801bbd8:	460f      	mov	r7, r1
 801bbda:	dd6d      	ble.n	801bcb8 <__kernel_rem_pio2+0x250>
 801bbdc:	1e61      	subs	r1, r4, #1
 801bbde:	ab0c      	add	r3, sp, #48	; 0x30
 801bbe0:	9d02      	ldr	r5, [sp, #8]
 801bbe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bbe6:	f1ca 0018 	rsb	r0, sl, #24
 801bbea:	fa43 f200 	asr.w	r2, r3, r0
 801bbee:	4415      	add	r5, r2
 801bbf0:	4082      	lsls	r2, r0
 801bbf2:	1a9b      	subs	r3, r3, r2
 801bbf4:	aa0c      	add	r2, sp, #48	; 0x30
 801bbf6:	9502      	str	r5, [sp, #8]
 801bbf8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801bbfc:	f1ca 0217 	rsb	r2, sl, #23
 801bc00:	fa43 fb02 	asr.w	fp, r3, r2
 801bc04:	f1bb 0f00 	cmp.w	fp, #0
 801bc08:	dd65      	ble.n	801bcd6 <__kernel_rem_pio2+0x26e>
 801bc0a:	9b02      	ldr	r3, [sp, #8]
 801bc0c:	2200      	movs	r2, #0
 801bc0e:	3301      	adds	r3, #1
 801bc10:	9302      	str	r3, [sp, #8]
 801bc12:	4615      	mov	r5, r2
 801bc14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801bc18:	4294      	cmp	r4, r2
 801bc1a:	f300 809f 	bgt.w	801bd5c <__kernel_rem_pio2+0x2f4>
 801bc1e:	f1ba 0f00 	cmp.w	sl, #0
 801bc22:	dd07      	ble.n	801bc34 <__kernel_rem_pio2+0x1cc>
 801bc24:	f1ba 0f01 	cmp.w	sl, #1
 801bc28:	f000 80c1 	beq.w	801bdae <__kernel_rem_pio2+0x346>
 801bc2c:	f1ba 0f02 	cmp.w	sl, #2
 801bc30:	f000 80c7 	beq.w	801bdc2 <__kernel_rem_pio2+0x35a>
 801bc34:	f1bb 0f02 	cmp.w	fp, #2
 801bc38:	d14d      	bne.n	801bcd6 <__kernel_rem_pio2+0x26e>
 801bc3a:	4632      	mov	r2, r6
 801bc3c:	463b      	mov	r3, r7
 801bc3e:	4954      	ldr	r1, [pc, #336]	; (801bd90 <__kernel_rem_pio2+0x328>)
 801bc40:	2000      	movs	r0, #0
 801bc42:	f7e4 fb51 	bl	80002e8 <__aeabi_dsub>
 801bc46:	4606      	mov	r6, r0
 801bc48:	460f      	mov	r7, r1
 801bc4a:	2d00      	cmp	r5, #0
 801bc4c:	d043      	beq.n	801bcd6 <__kernel_rem_pio2+0x26e>
 801bc4e:	4650      	mov	r0, sl
 801bc50:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801bd80 <__kernel_rem_pio2+0x318>
 801bc54:	f7ff fe58 	bl	801b908 <scalbn>
 801bc58:	4630      	mov	r0, r6
 801bc5a:	4639      	mov	r1, r7
 801bc5c:	ec53 2b10 	vmov	r2, r3, d0
 801bc60:	f7e4 fb42 	bl	80002e8 <__aeabi_dsub>
 801bc64:	4606      	mov	r6, r0
 801bc66:	460f      	mov	r7, r1
 801bc68:	e035      	b.n	801bcd6 <__kernel_rem_pio2+0x26e>
 801bc6a:	4b4a      	ldr	r3, [pc, #296]	; (801bd94 <__kernel_rem_pio2+0x32c>)
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	4630      	mov	r0, r6
 801bc70:	4639      	mov	r1, r7
 801bc72:	f7e4 fcf1 	bl	8000658 <__aeabi_dmul>
 801bc76:	f7e4 ff9f 	bl	8000bb8 <__aeabi_d2iz>
 801bc7a:	f7e4 fc83 	bl	8000584 <__aeabi_i2d>
 801bc7e:	4602      	mov	r2, r0
 801bc80:	460b      	mov	r3, r1
 801bc82:	ec43 2b18 	vmov	d8, r2, r3
 801bc86:	4b44      	ldr	r3, [pc, #272]	; (801bd98 <__kernel_rem_pio2+0x330>)
 801bc88:	2200      	movs	r2, #0
 801bc8a:	f7e4 fce5 	bl	8000658 <__aeabi_dmul>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	460b      	mov	r3, r1
 801bc92:	4630      	mov	r0, r6
 801bc94:	4639      	mov	r1, r7
 801bc96:	f7e4 fb27 	bl	80002e8 <__aeabi_dsub>
 801bc9a:	f7e4 ff8d 	bl	8000bb8 <__aeabi_d2iz>
 801bc9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bca2:	f84b 0b04 	str.w	r0, [fp], #4
 801bca6:	ec51 0b18 	vmov	r0, r1, d8
 801bcaa:	f7e4 fb1f 	bl	80002ec <__adddf3>
 801bcae:	f109 39ff 	add.w	r9, r9, #4294967295
 801bcb2:	4606      	mov	r6, r0
 801bcb4:	460f      	mov	r7, r1
 801bcb6:	e75b      	b.n	801bb70 <__kernel_rem_pio2+0x108>
 801bcb8:	d106      	bne.n	801bcc8 <__kernel_rem_pio2+0x260>
 801bcba:	1e63      	subs	r3, r4, #1
 801bcbc:	aa0c      	add	r2, sp, #48	; 0x30
 801bcbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcc2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801bcc6:	e79d      	b.n	801bc04 <__kernel_rem_pio2+0x19c>
 801bcc8:	4b34      	ldr	r3, [pc, #208]	; (801bd9c <__kernel_rem_pio2+0x334>)
 801bcca:	2200      	movs	r2, #0
 801bccc:	f7e4 ff4a 	bl	8000b64 <__aeabi_dcmpge>
 801bcd0:	2800      	cmp	r0, #0
 801bcd2:	d140      	bne.n	801bd56 <__kernel_rem_pio2+0x2ee>
 801bcd4:	4683      	mov	fp, r0
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	2300      	movs	r3, #0
 801bcda:	4630      	mov	r0, r6
 801bcdc:	4639      	mov	r1, r7
 801bcde:	f7e4 ff23 	bl	8000b28 <__aeabi_dcmpeq>
 801bce2:	2800      	cmp	r0, #0
 801bce4:	f000 80c1 	beq.w	801be6a <__kernel_rem_pio2+0x402>
 801bce8:	1e65      	subs	r5, r4, #1
 801bcea:	462b      	mov	r3, r5
 801bcec:	2200      	movs	r2, #0
 801bcee:	9900      	ldr	r1, [sp, #0]
 801bcf0:	428b      	cmp	r3, r1
 801bcf2:	da6d      	bge.n	801bdd0 <__kernel_rem_pio2+0x368>
 801bcf4:	2a00      	cmp	r2, #0
 801bcf6:	f000 808a 	beq.w	801be0e <__kernel_rem_pio2+0x3a6>
 801bcfa:	ab0c      	add	r3, sp, #48	; 0x30
 801bcfc:	f1aa 0a18 	sub.w	sl, sl, #24
 801bd00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	f000 80ae 	beq.w	801be66 <__kernel_rem_pio2+0x3fe>
 801bd0a:	4650      	mov	r0, sl
 801bd0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801bd80 <__kernel_rem_pio2+0x318>
 801bd10:	f7ff fdfa 	bl	801b908 <scalbn>
 801bd14:	1c6b      	adds	r3, r5, #1
 801bd16:	00da      	lsls	r2, r3, #3
 801bd18:	9205      	str	r2, [sp, #20]
 801bd1a:	ec57 6b10 	vmov	r6, r7, d0
 801bd1e:	aa70      	add	r2, sp, #448	; 0x1c0
 801bd20:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801bd94 <__kernel_rem_pio2+0x32c>
 801bd24:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801bd28:	462c      	mov	r4, r5
 801bd2a:	f04f 0800 	mov.w	r8, #0
 801bd2e:	2c00      	cmp	r4, #0
 801bd30:	f280 80d4 	bge.w	801bedc <__kernel_rem_pio2+0x474>
 801bd34:	462c      	mov	r4, r5
 801bd36:	2c00      	cmp	r4, #0
 801bd38:	f2c0 8102 	blt.w	801bf40 <__kernel_rem_pio2+0x4d8>
 801bd3c:	4b18      	ldr	r3, [pc, #96]	; (801bda0 <__kernel_rem_pio2+0x338>)
 801bd3e:	461e      	mov	r6, r3
 801bd40:	ab70      	add	r3, sp, #448	; 0x1c0
 801bd42:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801bd46:	1b2b      	subs	r3, r5, r4
 801bd48:	f04f 0900 	mov.w	r9, #0
 801bd4c:	f04f 0a00 	mov.w	sl, #0
 801bd50:	2700      	movs	r7, #0
 801bd52:	9306      	str	r3, [sp, #24]
 801bd54:	e0e6      	b.n	801bf24 <__kernel_rem_pio2+0x4bc>
 801bd56:	f04f 0b02 	mov.w	fp, #2
 801bd5a:	e756      	b.n	801bc0a <__kernel_rem_pio2+0x1a2>
 801bd5c:	f8d8 3000 	ldr.w	r3, [r8]
 801bd60:	bb05      	cbnz	r5, 801bda4 <__kernel_rem_pio2+0x33c>
 801bd62:	b123      	cbz	r3, 801bd6e <__kernel_rem_pio2+0x306>
 801bd64:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bd68:	f8c8 3000 	str.w	r3, [r8]
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	3201      	adds	r2, #1
 801bd70:	f108 0804 	add.w	r8, r8, #4
 801bd74:	461d      	mov	r5, r3
 801bd76:	e74f      	b.n	801bc18 <__kernel_rem_pio2+0x1b0>
	...
 801bd84:	3ff00000 	.word	0x3ff00000
 801bd88:	08027dc0 	.word	0x08027dc0
 801bd8c:	40200000 	.word	0x40200000
 801bd90:	3ff00000 	.word	0x3ff00000
 801bd94:	3e700000 	.word	0x3e700000
 801bd98:	41700000 	.word	0x41700000
 801bd9c:	3fe00000 	.word	0x3fe00000
 801bda0:	08027d80 	.word	0x08027d80
 801bda4:	1acb      	subs	r3, r1, r3
 801bda6:	f8c8 3000 	str.w	r3, [r8]
 801bdaa:	462b      	mov	r3, r5
 801bdac:	e7df      	b.n	801bd6e <__kernel_rem_pio2+0x306>
 801bdae:	1e62      	subs	r2, r4, #1
 801bdb0:	ab0c      	add	r3, sp, #48	; 0x30
 801bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bdba:	a90c      	add	r1, sp, #48	; 0x30
 801bdbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bdc0:	e738      	b.n	801bc34 <__kernel_rem_pio2+0x1cc>
 801bdc2:	1e62      	subs	r2, r4, #1
 801bdc4:	ab0c      	add	r3, sp, #48	; 0x30
 801bdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bdce:	e7f4      	b.n	801bdba <__kernel_rem_pio2+0x352>
 801bdd0:	a90c      	add	r1, sp, #48	; 0x30
 801bdd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bdd6:	3b01      	subs	r3, #1
 801bdd8:	430a      	orrs	r2, r1
 801bdda:	e788      	b.n	801bcee <__kernel_rem_pio2+0x286>
 801bddc:	3301      	adds	r3, #1
 801bdde:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bde2:	2900      	cmp	r1, #0
 801bde4:	d0fa      	beq.n	801bddc <__kernel_rem_pio2+0x374>
 801bde6:	9a08      	ldr	r2, [sp, #32]
 801bde8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801bdec:	446a      	add	r2, sp
 801bdee:	3a98      	subs	r2, #152	; 0x98
 801bdf0:	9208      	str	r2, [sp, #32]
 801bdf2:	9a06      	ldr	r2, [sp, #24]
 801bdf4:	a920      	add	r1, sp, #128	; 0x80
 801bdf6:	18a2      	adds	r2, r4, r2
 801bdf8:	18e3      	adds	r3, r4, r3
 801bdfa:	f104 0801 	add.w	r8, r4, #1
 801bdfe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801be02:	9302      	str	r3, [sp, #8]
 801be04:	9b02      	ldr	r3, [sp, #8]
 801be06:	4543      	cmp	r3, r8
 801be08:	da04      	bge.n	801be14 <__kernel_rem_pio2+0x3ac>
 801be0a:	461c      	mov	r4, r3
 801be0c:	e6a2      	b.n	801bb54 <__kernel_rem_pio2+0xec>
 801be0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be10:	2301      	movs	r3, #1
 801be12:	e7e4      	b.n	801bdde <__kernel_rem_pio2+0x376>
 801be14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801be1a:	f7e4 fbb3 	bl	8000584 <__aeabi_i2d>
 801be1e:	e8e5 0102 	strd	r0, r1, [r5], #8
 801be22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be24:	46ab      	mov	fp, r5
 801be26:	461c      	mov	r4, r3
 801be28:	f04f 0900 	mov.w	r9, #0
 801be2c:	2600      	movs	r6, #0
 801be2e:	2700      	movs	r7, #0
 801be30:	9b05      	ldr	r3, [sp, #20]
 801be32:	4599      	cmp	r9, r3
 801be34:	dd06      	ble.n	801be44 <__kernel_rem_pio2+0x3dc>
 801be36:	9b08      	ldr	r3, [sp, #32]
 801be38:	e8e3 6702 	strd	r6, r7, [r3], #8
 801be3c:	f108 0801 	add.w	r8, r8, #1
 801be40:	9308      	str	r3, [sp, #32]
 801be42:	e7df      	b.n	801be04 <__kernel_rem_pio2+0x39c>
 801be44:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801be48:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801be4c:	f7e4 fc04 	bl	8000658 <__aeabi_dmul>
 801be50:	4602      	mov	r2, r0
 801be52:	460b      	mov	r3, r1
 801be54:	4630      	mov	r0, r6
 801be56:	4639      	mov	r1, r7
 801be58:	f7e4 fa48 	bl	80002ec <__adddf3>
 801be5c:	f109 0901 	add.w	r9, r9, #1
 801be60:	4606      	mov	r6, r0
 801be62:	460f      	mov	r7, r1
 801be64:	e7e4      	b.n	801be30 <__kernel_rem_pio2+0x3c8>
 801be66:	3d01      	subs	r5, #1
 801be68:	e747      	b.n	801bcfa <__kernel_rem_pio2+0x292>
 801be6a:	ec47 6b10 	vmov	d0, r6, r7
 801be6e:	f1ca 0000 	rsb	r0, sl, #0
 801be72:	f7ff fd49 	bl	801b908 <scalbn>
 801be76:	ec57 6b10 	vmov	r6, r7, d0
 801be7a:	4ba0      	ldr	r3, [pc, #640]	; (801c0fc <__kernel_rem_pio2+0x694>)
 801be7c:	ee10 0a10 	vmov	r0, s0
 801be80:	2200      	movs	r2, #0
 801be82:	4639      	mov	r1, r7
 801be84:	f7e4 fe6e 	bl	8000b64 <__aeabi_dcmpge>
 801be88:	b1f8      	cbz	r0, 801beca <__kernel_rem_pio2+0x462>
 801be8a:	4b9d      	ldr	r3, [pc, #628]	; (801c100 <__kernel_rem_pio2+0x698>)
 801be8c:	2200      	movs	r2, #0
 801be8e:	4630      	mov	r0, r6
 801be90:	4639      	mov	r1, r7
 801be92:	f7e4 fbe1 	bl	8000658 <__aeabi_dmul>
 801be96:	f7e4 fe8f 	bl	8000bb8 <__aeabi_d2iz>
 801be9a:	4680      	mov	r8, r0
 801be9c:	f7e4 fb72 	bl	8000584 <__aeabi_i2d>
 801bea0:	4b96      	ldr	r3, [pc, #600]	; (801c0fc <__kernel_rem_pio2+0x694>)
 801bea2:	2200      	movs	r2, #0
 801bea4:	f7e4 fbd8 	bl	8000658 <__aeabi_dmul>
 801bea8:	460b      	mov	r3, r1
 801beaa:	4602      	mov	r2, r0
 801beac:	4639      	mov	r1, r7
 801beae:	4630      	mov	r0, r6
 801beb0:	f7e4 fa1a 	bl	80002e8 <__aeabi_dsub>
 801beb4:	f7e4 fe80 	bl	8000bb8 <__aeabi_d2iz>
 801beb8:	1c65      	adds	r5, r4, #1
 801beba:	ab0c      	add	r3, sp, #48	; 0x30
 801bebc:	f10a 0a18 	add.w	sl, sl, #24
 801bec0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bec4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801bec8:	e71f      	b.n	801bd0a <__kernel_rem_pio2+0x2a2>
 801beca:	4630      	mov	r0, r6
 801becc:	4639      	mov	r1, r7
 801bece:	f7e4 fe73 	bl	8000bb8 <__aeabi_d2iz>
 801bed2:	ab0c      	add	r3, sp, #48	; 0x30
 801bed4:	4625      	mov	r5, r4
 801bed6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801beda:	e716      	b.n	801bd0a <__kernel_rem_pio2+0x2a2>
 801bedc:	ab0c      	add	r3, sp, #48	; 0x30
 801bede:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801bee2:	f7e4 fb4f 	bl	8000584 <__aeabi_i2d>
 801bee6:	4632      	mov	r2, r6
 801bee8:	463b      	mov	r3, r7
 801beea:	f7e4 fbb5 	bl	8000658 <__aeabi_dmul>
 801beee:	4642      	mov	r2, r8
 801bef0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801bef4:	464b      	mov	r3, r9
 801bef6:	4630      	mov	r0, r6
 801bef8:	4639      	mov	r1, r7
 801befa:	f7e4 fbad 	bl	8000658 <__aeabi_dmul>
 801befe:	3c01      	subs	r4, #1
 801bf00:	4606      	mov	r6, r0
 801bf02:	460f      	mov	r7, r1
 801bf04:	e713      	b.n	801bd2e <__kernel_rem_pio2+0x2c6>
 801bf06:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801bf0a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801bf0e:	f7e4 fba3 	bl	8000658 <__aeabi_dmul>
 801bf12:	4602      	mov	r2, r0
 801bf14:	460b      	mov	r3, r1
 801bf16:	4648      	mov	r0, r9
 801bf18:	4651      	mov	r1, sl
 801bf1a:	f7e4 f9e7 	bl	80002ec <__adddf3>
 801bf1e:	3701      	adds	r7, #1
 801bf20:	4681      	mov	r9, r0
 801bf22:	468a      	mov	sl, r1
 801bf24:	9b00      	ldr	r3, [sp, #0]
 801bf26:	429f      	cmp	r7, r3
 801bf28:	dc02      	bgt.n	801bf30 <__kernel_rem_pio2+0x4c8>
 801bf2a:	9b06      	ldr	r3, [sp, #24]
 801bf2c:	429f      	cmp	r7, r3
 801bf2e:	ddea      	ble.n	801bf06 <__kernel_rem_pio2+0x49e>
 801bf30:	9a06      	ldr	r2, [sp, #24]
 801bf32:	ab48      	add	r3, sp, #288	; 0x120
 801bf34:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801bf38:	e9c6 9a00 	strd	r9, sl, [r6]
 801bf3c:	3c01      	subs	r4, #1
 801bf3e:	e6fa      	b.n	801bd36 <__kernel_rem_pio2+0x2ce>
 801bf40:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bf42:	2b02      	cmp	r3, #2
 801bf44:	dc0b      	bgt.n	801bf5e <__kernel_rem_pio2+0x4f6>
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	dc39      	bgt.n	801bfbe <__kernel_rem_pio2+0x556>
 801bf4a:	d05d      	beq.n	801c008 <__kernel_rem_pio2+0x5a0>
 801bf4c:	9b02      	ldr	r3, [sp, #8]
 801bf4e:	f003 0007 	and.w	r0, r3, #7
 801bf52:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801bf56:	ecbd 8b02 	vpop	{d8}
 801bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf5e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801bf60:	2b03      	cmp	r3, #3
 801bf62:	d1f3      	bne.n	801bf4c <__kernel_rem_pio2+0x4e4>
 801bf64:	9b05      	ldr	r3, [sp, #20]
 801bf66:	9500      	str	r5, [sp, #0]
 801bf68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801bf6c:	eb0d 0403 	add.w	r4, sp, r3
 801bf70:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801bf74:	46a2      	mov	sl, r4
 801bf76:	9b00      	ldr	r3, [sp, #0]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	f1aa 0a08 	sub.w	sl, sl, #8
 801bf7e:	dc69      	bgt.n	801c054 <__kernel_rem_pio2+0x5ec>
 801bf80:	46aa      	mov	sl, r5
 801bf82:	f1ba 0f01 	cmp.w	sl, #1
 801bf86:	f1a4 0408 	sub.w	r4, r4, #8
 801bf8a:	f300 8083 	bgt.w	801c094 <__kernel_rem_pio2+0x62c>
 801bf8e:	9c05      	ldr	r4, [sp, #20]
 801bf90:	ab48      	add	r3, sp, #288	; 0x120
 801bf92:	441c      	add	r4, r3
 801bf94:	2000      	movs	r0, #0
 801bf96:	2100      	movs	r1, #0
 801bf98:	2d01      	cmp	r5, #1
 801bf9a:	f300 809a 	bgt.w	801c0d2 <__kernel_rem_pio2+0x66a>
 801bf9e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801bfa2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801bfa6:	f1bb 0f00 	cmp.w	fp, #0
 801bfaa:	f040 8098 	bne.w	801c0de <__kernel_rem_pio2+0x676>
 801bfae:	9b04      	ldr	r3, [sp, #16]
 801bfb0:	e9c3 7800 	strd	r7, r8, [r3]
 801bfb4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801bfb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801bfbc:	e7c6      	b.n	801bf4c <__kernel_rem_pio2+0x4e4>
 801bfbe:	9e05      	ldr	r6, [sp, #20]
 801bfc0:	ab48      	add	r3, sp, #288	; 0x120
 801bfc2:	441e      	add	r6, r3
 801bfc4:	462c      	mov	r4, r5
 801bfc6:	2000      	movs	r0, #0
 801bfc8:	2100      	movs	r1, #0
 801bfca:	2c00      	cmp	r4, #0
 801bfcc:	da33      	bge.n	801c036 <__kernel_rem_pio2+0x5ce>
 801bfce:	f1bb 0f00 	cmp.w	fp, #0
 801bfd2:	d036      	beq.n	801c042 <__kernel_rem_pio2+0x5da>
 801bfd4:	4602      	mov	r2, r0
 801bfd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfda:	9c04      	ldr	r4, [sp, #16]
 801bfdc:	e9c4 2300 	strd	r2, r3, [r4]
 801bfe0:	4602      	mov	r2, r0
 801bfe2:	460b      	mov	r3, r1
 801bfe4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801bfe8:	f7e4 f97e 	bl	80002e8 <__aeabi_dsub>
 801bfec:	ae4a      	add	r6, sp, #296	; 0x128
 801bfee:	2401      	movs	r4, #1
 801bff0:	42a5      	cmp	r5, r4
 801bff2:	da29      	bge.n	801c048 <__kernel_rem_pio2+0x5e0>
 801bff4:	f1bb 0f00 	cmp.w	fp, #0
 801bff8:	d002      	beq.n	801c000 <__kernel_rem_pio2+0x598>
 801bffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bffe:	4619      	mov	r1, r3
 801c000:	9b04      	ldr	r3, [sp, #16]
 801c002:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c006:	e7a1      	b.n	801bf4c <__kernel_rem_pio2+0x4e4>
 801c008:	9c05      	ldr	r4, [sp, #20]
 801c00a:	ab48      	add	r3, sp, #288	; 0x120
 801c00c:	441c      	add	r4, r3
 801c00e:	2000      	movs	r0, #0
 801c010:	2100      	movs	r1, #0
 801c012:	2d00      	cmp	r5, #0
 801c014:	da09      	bge.n	801c02a <__kernel_rem_pio2+0x5c2>
 801c016:	f1bb 0f00 	cmp.w	fp, #0
 801c01a:	d002      	beq.n	801c022 <__kernel_rem_pio2+0x5ba>
 801c01c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c020:	4619      	mov	r1, r3
 801c022:	9b04      	ldr	r3, [sp, #16]
 801c024:	e9c3 0100 	strd	r0, r1, [r3]
 801c028:	e790      	b.n	801bf4c <__kernel_rem_pio2+0x4e4>
 801c02a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c02e:	f7e4 f95d 	bl	80002ec <__adddf3>
 801c032:	3d01      	subs	r5, #1
 801c034:	e7ed      	b.n	801c012 <__kernel_rem_pio2+0x5aa>
 801c036:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801c03a:	f7e4 f957 	bl	80002ec <__adddf3>
 801c03e:	3c01      	subs	r4, #1
 801c040:	e7c3      	b.n	801bfca <__kernel_rem_pio2+0x562>
 801c042:	4602      	mov	r2, r0
 801c044:	460b      	mov	r3, r1
 801c046:	e7c8      	b.n	801bfda <__kernel_rem_pio2+0x572>
 801c048:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801c04c:	f7e4 f94e 	bl	80002ec <__adddf3>
 801c050:	3401      	adds	r4, #1
 801c052:	e7cd      	b.n	801bff0 <__kernel_rem_pio2+0x588>
 801c054:	e9da 8900 	ldrd	r8, r9, [sl]
 801c058:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c05c:	9b00      	ldr	r3, [sp, #0]
 801c05e:	3b01      	subs	r3, #1
 801c060:	9300      	str	r3, [sp, #0]
 801c062:	4632      	mov	r2, r6
 801c064:	463b      	mov	r3, r7
 801c066:	4640      	mov	r0, r8
 801c068:	4649      	mov	r1, r9
 801c06a:	f7e4 f93f 	bl	80002ec <__adddf3>
 801c06e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c072:	4602      	mov	r2, r0
 801c074:	460b      	mov	r3, r1
 801c076:	4640      	mov	r0, r8
 801c078:	4649      	mov	r1, r9
 801c07a:	f7e4 f935 	bl	80002e8 <__aeabi_dsub>
 801c07e:	4632      	mov	r2, r6
 801c080:	463b      	mov	r3, r7
 801c082:	f7e4 f933 	bl	80002ec <__adddf3>
 801c086:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c08a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c08e:	ed8a 7b00 	vstr	d7, [sl]
 801c092:	e770      	b.n	801bf76 <__kernel_rem_pio2+0x50e>
 801c094:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c098:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801c09c:	4640      	mov	r0, r8
 801c09e:	4632      	mov	r2, r6
 801c0a0:	463b      	mov	r3, r7
 801c0a2:	4649      	mov	r1, r9
 801c0a4:	f7e4 f922 	bl	80002ec <__adddf3>
 801c0a8:	e9cd 0100 	strd	r0, r1, [sp]
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	460b      	mov	r3, r1
 801c0b0:	4640      	mov	r0, r8
 801c0b2:	4649      	mov	r1, r9
 801c0b4:	f7e4 f918 	bl	80002e8 <__aeabi_dsub>
 801c0b8:	4632      	mov	r2, r6
 801c0ba:	463b      	mov	r3, r7
 801c0bc:	f7e4 f916 	bl	80002ec <__adddf3>
 801c0c0:	ed9d 7b00 	vldr	d7, [sp]
 801c0c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c0c8:	ed84 7b00 	vstr	d7, [r4]
 801c0cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0d0:	e757      	b.n	801bf82 <__kernel_rem_pio2+0x51a>
 801c0d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c0d6:	f7e4 f909 	bl	80002ec <__adddf3>
 801c0da:	3d01      	subs	r5, #1
 801c0dc:	e75c      	b.n	801bf98 <__kernel_rem_pio2+0x530>
 801c0de:	9b04      	ldr	r3, [sp, #16]
 801c0e0:	9a04      	ldr	r2, [sp, #16]
 801c0e2:	601f      	str	r7, [r3, #0]
 801c0e4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801c0e8:	605c      	str	r4, [r3, #4]
 801c0ea:	609d      	str	r5, [r3, #8]
 801c0ec:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c0f0:	60d3      	str	r3, [r2, #12]
 801c0f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c0f6:	6110      	str	r0, [r2, #16]
 801c0f8:	6153      	str	r3, [r2, #20]
 801c0fa:	e727      	b.n	801bf4c <__kernel_rem_pio2+0x4e4>
 801c0fc:	41700000 	.word	0x41700000
 801c100:	3e700000 	.word	0x3e700000

0801c104 <abort>:
 801c104:	b508      	push	{r3, lr}
 801c106:	2006      	movs	r0, #6
 801c108:	f001 f8de 	bl	801d2c8 <raise>
 801c10c:	2001      	movs	r0, #1
 801c10e:	f7f4 f8b1 	bl	8010274 <_exit>
	...

0801c114 <__assert_func>:
 801c114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c116:	4614      	mov	r4, r2
 801c118:	461a      	mov	r2, r3
 801c11a:	4b09      	ldr	r3, [pc, #36]	; (801c140 <__assert_func+0x2c>)
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	4605      	mov	r5, r0
 801c120:	68d8      	ldr	r0, [r3, #12]
 801c122:	b14c      	cbz	r4, 801c138 <__assert_func+0x24>
 801c124:	4b07      	ldr	r3, [pc, #28]	; (801c144 <__assert_func+0x30>)
 801c126:	9100      	str	r1, [sp, #0]
 801c128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c12c:	4906      	ldr	r1, [pc, #24]	; (801c148 <__assert_func+0x34>)
 801c12e:	462b      	mov	r3, r5
 801c130:	f000 ffda 	bl	801d0e8 <fiprintf>
 801c134:	f7ff ffe6 	bl	801c104 <abort>
 801c138:	4b04      	ldr	r3, [pc, #16]	; (801c14c <__assert_func+0x38>)
 801c13a:	461c      	mov	r4, r3
 801c13c:	e7f3      	b.n	801c126 <__assert_func+0x12>
 801c13e:	bf00      	nop
 801c140:	20001274 	.word	0x20001274
 801c144:	08027dd0 	.word	0x08027dd0
 801c148:	08027ddd 	.word	0x08027ddd
 801c14c:	08027e0b 	.word	0x08027e0b

0801c150 <atof>:
 801c150:	2100      	movs	r1, #0
 801c152:	f000 bf19 	b.w	801cf88 <strtod>
	...

0801c158 <calloc>:
 801c158:	4b02      	ldr	r3, [pc, #8]	; (801c164 <calloc+0xc>)
 801c15a:	460a      	mov	r2, r1
 801c15c:	4601      	mov	r1, r0
 801c15e:	6818      	ldr	r0, [r3, #0]
 801c160:	f000 b802 	b.w	801c168 <_calloc_r>
 801c164:	20001274 	.word	0x20001274

0801c168 <_calloc_r>:
 801c168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c16a:	fba1 2402 	umull	r2, r4, r1, r2
 801c16e:	b94c      	cbnz	r4, 801c184 <_calloc_r+0x1c>
 801c170:	4611      	mov	r1, r2
 801c172:	9201      	str	r2, [sp, #4]
 801c174:	f000 f83e 	bl	801c1f4 <_malloc_r>
 801c178:	9a01      	ldr	r2, [sp, #4]
 801c17a:	4605      	mov	r5, r0
 801c17c:	b930      	cbnz	r0, 801c18c <_calloc_r+0x24>
 801c17e:	4628      	mov	r0, r5
 801c180:	b003      	add	sp, #12
 801c182:	bd30      	pop	{r4, r5, pc}
 801c184:	220c      	movs	r2, #12
 801c186:	6002      	str	r2, [r0, #0]
 801c188:	2500      	movs	r5, #0
 801c18a:	e7f8      	b.n	801c17e <_calloc_r+0x16>
 801c18c:	4621      	mov	r1, r4
 801c18e:	f001 f859 	bl	801d244 <memset>
 801c192:	e7f4      	b.n	801c17e <_calloc_r+0x16>

0801c194 <malloc>:
 801c194:	4b02      	ldr	r3, [pc, #8]	; (801c1a0 <malloc+0xc>)
 801c196:	4601      	mov	r1, r0
 801c198:	6818      	ldr	r0, [r3, #0]
 801c19a:	f000 b82b 	b.w	801c1f4 <_malloc_r>
 801c19e:	bf00      	nop
 801c1a0:	20001274 	.word	0x20001274

0801c1a4 <free>:
 801c1a4:	4b02      	ldr	r3, [pc, #8]	; (801c1b0 <free+0xc>)
 801c1a6:	4601      	mov	r1, r0
 801c1a8:	6818      	ldr	r0, [r3, #0]
 801c1aa:	f001 b93b 	b.w	801d424 <_free_r>
 801c1ae:	bf00      	nop
 801c1b0:	20001274 	.word	0x20001274

0801c1b4 <sbrk_aligned>:
 801c1b4:	b570      	push	{r4, r5, r6, lr}
 801c1b6:	4e0e      	ldr	r6, [pc, #56]	; (801c1f0 <sbrk_aligned+0x3c>)
 801c1b8:	460c      	mov	r4, r1
 801c1ba:	6831      	ldr	r1, [r6, #0]
 801c1bc:	4605      	mov	r5, r0
 801c1be:	b911      	cbnz	r1, 801c1c6 <sbrk_aligned+0x12>
 801c1c0:	f001 f8d2 	bl	801d368 <_sbrk_r>
 801c1c4:	6030      	str	r0, [r6, #0]
 801c1c6:	4621      	mov	r1, r4
 801c1c8:	4628      	mov	r0, r5
 801c1ca:	f001 f8cd 	bl	801d368 <_sbrk_r>
 801c1ce:	1c43      	adds	r3, r0, #1
 801c1d0:	d00a      	beq.n	801c1e8 <sbrk_aligned+0x34>
 801c1d2:	1cc4      	adds	r4, r0, #3
 801c1d4:	f024 0403 	bic.w	r4, r4, #3
 801c1d8:	42a0      	cmp	r0, r4
 801c1da:	d007      	beq.n	801c1ec <sbrk_aligned+0x38>
 801c1dc:	1a21      	subs	r1, r4, r0
 801c1de:	4628      	mov	r0, r5
 801c1e0:	f001 f8c2 	bl	801d368 <_sbrk_r>
 801c1e4:	3001      	adds	r0, #1
 801c1e6:	d101      	bne.n	801c1ec <sbrk_aligned+0x38>
 801c1e8:	f04f 34ff 	mov.w	r4, #4294967295
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	bd70      	pop	{r4, r5, r6, pc}
 801c1f0:	20001594 	.word	0x20001594

0801c1f4 <_malloc_r>:
 801c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1f8:	1ccd      	adds	r5, r1, #3
 801c1fa:	f025 0503 	bic.w	r5, r5, #3
 801c1fe:	3508      	adds	r5, #8
 801c200:	2d0c      	cmp	r5, #12
 801c202:	bf38      	it	cc
 801c204:	250c      	movcc	r5, #12
 801c206:	2d00      	cmp	r5, #0
 801c208:	4607      	mov	r7, r0
 801c20a:	db01      	blt.n	801c210 <_malloc_r+0x1c>
 801c20c:	42a9      	cmp	r1, r5
 801c20e:	d905      	bls.n	801c21c <_malloc_r+0x28>
 801c210:	230c      	movs	r3, #12
 801c212:	603b      	str	r3, [r7, #0]
 801c214:	2600      	movs	r6, #0
 801c216:	4630      	mov	r0, r6
 801c218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c21c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c2f0 <_malloc_r+0xfc>
 801c220:	f000 f868 	bl	801c2f4 <__malloc_lock>
 801c224:	f8d8 3000 	ldr.w	r3, [r8]
 801c228:	461c      	mov	r4, r3
 801c22a:	bb5c      	cbnz	r4, 801c284 <_malloc_r+0x90>
 801c22c:	4629      	mov	r1, r5
 801c22e:	4638      	mov	r0, r7
 801c230:	f7ff ffc0 	bl	801c1b4 <sbrk_aligned>
 801c234:	1c43      	adds	r3, r0, #1
 801c236:	4604      	mov	r4, r0
 801c238:	d155      	bne.n	801c2e6 <_malloc_r+0xf2>
 801c23a:	f8d8 4000 	ldr.w	r4, [r8]
 801c23e:	4626      	mov	r6, r4
 801c240:	2e00      	cmp	r6, #0
 801c242:	d145      	bne.n	801c2d0 <_malloc_r+0xdc>
 801c244:	2c00      	cmp	r4, #0
 801c246:	d048      	beq.n	801c2da <_malloc_r+0xe6>
 801c248:	6823      	ldr	r3, [r4, #0]
 801c24a:	4631      	mov	r1, r6
 801c24c:	4638      	mov	r0, r7
 801c24e:	eb04 0903 	add.w	r9, r4, r3
 801c252:	f001 f889 	bl	801d368 <_sbrk_r>
 801c256:	4581      	cmp	r9, r0
 801c258:	d13f      	bne.n	801c2da <_malloc_r+0xe6>
 801c25a:	6821      	ldr	r1, [r4, #0]
 801c25c:	1a6d      	subs	r5, r5, r1
 801c25e:	4629      	mov	r1, r5
 801c260:	4638      	mov	r0, r7
 801c262:	f7ff ffa7 	bl	801c1b4 <sbrk_aligned>
 801c266:	3001      	adds	r0, #1
 801c268:	d037      	beq.n	801c2da <_malloc_r+0xe6>
 801c26a:	6823      	ldr	r3, [r4, #0]
 801c26c:	442b      	add	r3, r5
 801c26e:	6023      	str	r3, [r4, #0]
 801c270:	f8d8 3000 	ldr.w	r3, [r8]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d038      	beq.n	801c2ea <_malloc_r+0xf6>
 801c278:	685a      	ldr	r2, [r3, #4]
 801c27a:	42a2      	cmp	r2, r4
 801c27c:	d12b      	bne.n	801c2d6 <_malloc_r+0xe2>
 801c27e:	2200      	movs	r2, #0
 801c280:	605a      	str	r2, [r3, #4]
 801c282:	e00f      	b.n	801c2a4 <_malloc_r+0xb0>
 801c284:	6822      	ldr	r2, [r4, #0]
 801c286:	1b52      	subs	r2, r2, r5
 801c288:	d41f      	bmi.n	801c2ca <_malloc_r+0xd6>
 801c28a:	2a0b      	cmp	r2, #11
 801c28c:	d917      	bls.n	801c2be <_malloc_r+0xca>
 801c28e:	1961      	adds	r1, r4, r5
 801c290:	42a3      	cmp	r3, r4
 801c292:	6025      	str	r5, [r4, #0]
 801c294:	bf18      	it	ne
 801c296:	6059      	strne	r1, [r3, #4]
 801c298:	6863      	ldr	r3, [r4, #4]
 801c29a:	bf08      	it	eq
 801c29c:	f8c8 1000 	streq.w	r1, [r8]
 801c2a0:	5162      	str	r2, [r4, r5]
 801c2a2:	604b      	str	r3, [r1, #4]
 801c2a4:	4638      	mov	r0, r7
 801c2a6:	f104 060b 	add.w	r6, r4, #11
 801c2aa:	f000 f829 	bl	801c300 <__malloc_unlock>
 801c2ae:	f026 0607 	bic.w	r6, r6, #7
 801c2b2:	1d23      	adds	r3, r4, #4
 801c2b4:	1af2      	subs	r2, r6, r3
 801c2b6:	d0ae      	beq.n	801c216 <_malloc_r+0x22>
 801c2b8:	1b9b      	subs	r3, r3, r6
 801c2ba:	50a3      	str	r3, [r4, r2]
 801c2bc:	e7ab      	b.n	801c216 <_malloc_r+0x22>
 801c2be:	42a3      	cmp	r3, r4
 801c2c0:	6862      	ldr	r2, [r4, #4]
 801c2c2:	d1dd      	bne.n	801c280 <_malloc_r+0x8c>
 801c2c4:	f8c8 2000 	str.w	r2, [r8]
 801c2c8:	e7ec      	b.n	801c2a4 <_malloc_r+0xb0>
 801c2ca:	4623      	mov	r3, r4
 801c2cc:	6864      	ldr	r4, [r4, #4]
 801c2ce:	e7ac      	b.n	801c22a <_malloc_r+0x36>
 801c2d0:	4634      	mov	r4, r6
 801c2d2:	6876      	ldr	r6, [r6, #4]
 801c2d4:	e7b4      	b.n	801c240 <_malloc_r+0x4c>
 801c2d6:	4613      	mov	r3, r2
 801c2d8:	e7cc      	b.n	801c274 <_malloc_r+0x80>
 801c2da:	230c      	movs	r3, #12
 801c2dc:	603b      	str	r3, [r7, #0]
 801c2de:	4638      	mov	r0, r7
 801c2e0:	f000 f80e 	bl	801c300 <__malloc_unlock>
 801c2e4:	e797      	b.n	801c216 <_malloc_r+0x22>
 801c2e6:	6025      	str	r5, [r4, #0]
 801c2e8:	e7dc      	b.n	801c2a4 <_malloc_r+0xb0>
 801c2ea:	605b      	str	r3, [r3, #4]
 801c2ec:	deff      	udf	#255	; 0xff
 801c2ee:	bf00      	nop
 801c2f0:	20001590 	.word	0x20001590

0801c2f4 <__malloc_lock>:
 801c2f4:	4801      	ldr	r0, [pc, #4]	; (801c2fc <__malloc_lock+0x8>)
 801c2f6:	f001 b884 	b.w	801d402 <__retarget_lock_acquire_recursive>
 801c2fa:	bf00      	nop
 801c2fc:	200016d8 	.word	0x200016d8

0801c300 <__malloc_unlock>:
 801c300:	4801      	ldr	r0, [pc, #4]	; (801c308 <__malloc_unlock+0x8>)
 801c302:	f001 b87f 	b.w	801d404 <__retarget_lock_release_recursive>
 801c306:	bf00      	nop
 801c308:	200016d8 	.word	0x200016d8

0801c30c <_realloc_r>:
 801c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c310:	4680      	mov	r8, r0
 801c312:	4614      	mov	r4, r2
 801c314:	460e      	mov	r6, r1
 801c316:	b921      	cbnz	r1, 801c322 <_realloc_r+0x16>
 801c318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c31c:	4611      	mov	r1, r2
 801c31e:	f7ff bf69 	b.w	801c1f4 <_malloc_r>
 801c322:	b92a      	cbnz	r2, 801c330 <_realloc_r+0x24>
 801c324:	f001 f87e 	bl	801d424 <_free_r>
 801c328:	4625      	mov	r5, r4
 801c32a:	4628      	mov	r0, r5
 801c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c330:	f002 f8db 	bl	801e4ea <_malloc_usable_size_r>
 801c334:	4284      	cmp	r4, r0
 801c336:	4607      	mov	r7, r0
 801c338:	d802      	bhi.n	801c340 <_realloc_r+0x34>
 801c33a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c33e:	d812      	bhi.n	801c366 <_realloc_r+0x5a>
 801c340:	4621      	mov	r1, r4
 801c342:	4640      	mov	r0, r8
 801c344:	f7ff ff56 	bl	801c1f4 <_malloc_r>
 801c348:	4605      	mov	r5, r0
 801c34a:	2800      	cmp	r0, #0
 801c34c:	d0ed      	beq.n	801c32a <_realloc_r+0x1e>
 801c34e:	42bc      	cmp	r4, r7
 801c350:	4622      	mov	r2, r4
 801c352:	4631      	mov	r1, r6
 801c354:	bf28      	it	cs
 801c356:	463a      	movcs	r2, r7
 801c358:	f001 f855 	bl	801d406 <memcpy>
 801c35c:	4631      	mov	r1, r6
 801c35e:	4640      	mov	r0, r8
 801c360:	f001 f860 	bl	801d424 <_free_r>
 801c364:	e7e1      	b.n	801c32a <_realloc_r+0x1e>
 801c366:	4635      	mov	r5, r6
 801c368:	e7df      	b.n	801c32a <_realloc_r+0x1e>

0801c36a <sulp>:
 801c36a:	b570      	push	{r4, r5, r6, lr}
 801c36c:	4604      	mov	r4, r0
 801c36e:	460d      	mov	r5, r1
 801c370:	ec45 4b10 	vmov	d0, r4, r5
 801c374:	4616      	mov	r6, r2
 801c376:	f001 ff77 	bl	801e268 <__ulp>
 801c37a:	ec51 0b10 	vmov	r0, r1, d0
 801c37e:	b17e      	cbz	r6, 801c3a0 <sulp+0x36>
 801c380:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c384:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c388:	2b00      	cmp	r3, #0
 801c38a:	dd09      	ble.n	801c3a0 <sulp+0x36>
 801c38c:	051b      	lsls	r3, r3, #20
 801c38e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c392:	2400      	movs	r4, #0
 801c394:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c398:	4622      	mov	r2, r4
 801c39a:	462b      	mov	r3, r5
 801c39c:	f7e4 f95c 	bl	8000658 <__aeabi_dmul>
 801c3a0:	bd70      	pop	{r4, r5, r6, pc}
 801c3a2:	0000      	movs	r0, r0
 801c3a4:	0000      	movs	r0, r0
	...

0801c3a8 <_strtod_l>:
 801c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3ac:	ed2d 8b02 	vpush	{d8}
 801c3b0:	b09b      	sub	sp, #108	; 0x6c
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	9213      	str	r2, [sp, #76]	; 0x4c
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	9216      	str	r2, [sp, #88]	; 0x58
 801c3ba:	460d      	mov	r5, r1
 801c3bc:	f04f 0800 	mov.w	r8, #0
 801c3c0:	f04f 0900 	mov.w	r9, #0
 801c3c4:	460a      	mov	r2, r1
 801c3c6:	9215      	str	r2, [sp, #84]	; 0x54
 801c3c8:	7811      	ldrb	r1, [r2, #0]
 801c3ca:	292b      	cmp	r1, #43	; 0x2b
 801c3cc:	d04c      	beq.n	801c468 <_strtod_l+0xc0>
 801c3ce:	d83a      	bhi.n	801c446 <_strtod_l+0x9e>
 801c3d0:	290d      	cmp	r1, #13
 801c3d2:	d834      	bhi.n	801c43e <_strtod_l+0x96>
 801c3d4:	2908      	cmp	r1, #8
 801c3d6:	d834      	bhi.n	801c442 <_strtod_l+0x9a>
 801c3d8:	2900      	cmp	r1, #0
 801c3da:	d03d      	beq.n	801c458 <_strtod_l+0xb0>
 801c3dc:	2200      	movs	r2, #0
 801c3de:	920a      	str	r2, [sp, #40]	; 0x28
 801c3e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801c3e2:	7832      	ldrb	r2, [r6, #0]
 801c3e4:	2a30      	cmp	r2, #48	; 0x30
 801c3e6:	f040 80b4 	bne.w	801c552 <_strtod_l+0x1aa>
 801c3ea:	7872      	ldrb	r2, [r6, #1]
 801c3ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801c3f0:	2a58      	cmp	r2, #88	; 0x58
 801c3f2:	d170      	bne.n	801c4d6 <_strtod_l+0x12e>
 801c3f4:	9302      	str	r3, [sp, #8]
 801c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3f8:	9301      	str	r3, [sp, #4]
 801c3fa:	ab16      	add	r3, sp, #88	; 0x58
 801c3fc:	9300      	str	r3, [sp, #0]
 801c3fe:	4a8e      	ldr	r2, [pc, #568]	; (801c638 <_strtod_l+0x290>)
 801c400:	ab17      	add	r3, sp, #92	; 0x5c
 801c402:	a915      	add	r1, sp, #84	; 0x54
 801c404:	4620      	mov	r0, r4
 801c406:	f001 f8c1 	bl	801d58c <__gethex>
 801c40a:	f010 070f 	ands.w	r7, r0, #15
 801c40e:	4605      	mov	r5, r0
 801c410:	d005      	beq.n	801c41e <_strtod_l+0x76>
 801c412:	2f06      	cmp	r7, #6
 801c414:	d12a      	bne.n	801c46c <_strtod_l+0xc4>
 801c416:	3601      	adds	r6, #1
 801c418:	2300      	movs	r3, #0
 801c41a:	9615      	str	r6, [sp, #84]	; 0x54
 801c41c:	930a      	str	r3, [sp, #40]	; 0x28
 801c41e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c420:	2b00      	cmp	r3, #0
 801c422:	f040 857f 	bne.w	801cf24 <_strtod_l+0xb7c>
 801c426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c428:	b1db      	cbz	r3, 801c462 <_strtod_l+0xba>
 801c42a:	4642      	mov	r2, r8
 801c42c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c430:	ec43 2b10 	vmov	d0, r2, r3
 801c434:	b01b      	add	sp, #108	; 0x6c
 801c436:	ecbd 8b02 	vpop	{d8}
 801c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c43e:	2920      	cmp	r1, #32
 801c440:	d1cc      	bne.n	801c3dc <_strtod_l+0x34>
 801c442:	3201      	adds	r2, #1
 801c444:	e7bf      	b.n	801c3c6 <_strtod_l+0x1e>
 801c446:	292d      	cmp	r1, #45	; 0x2d
 801c448:	d1c8      	bne.n	801c3dc <_strtod_l+0x34>
 801c44a:	2101      	movs	r1, #1
 801c44c:	910a      	str	r1, [sp, #40]	; 0x28
 801c44e:	1c51      	adds	r1, r2, #1
 801c450:	9115      	str	r1, [sp, #84]	; 0x54
 801c452:	7852      	ldrb	r2, [r2, #1]
 801c454:	2a00      	cmp	r2, #0
 801c456:	d1c3      	bne.n	801c3e0 <_strtod_l+0x38>
 801c458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c45a:	9515      	str	r5, [sp, #84]	; 0x54
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	f040 855f 	bne.w	801cf20 <_strtod_l+0xb78>
 801c462:	4642      	mov	r2, r8
 801c464:	464b      	mov	r3, r9
 801c466:	e7e3      	b.n	801c430 <_strtod_l+0x88>
 801c468:	2100      	movs	r1, #0
 801c46a:	e7ef      	b.n	801c44c <_strtod_l+0xa4>
 801c46c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c46e:	b13a      	cbz	r2, 801c480 <_strtod_l+0xd8>
 801c470:	2135      	movs	r1, #53	; 0x35
 801c472:	a818      	add	r0, sp, #96	; 0x60
 801c474:	f001 fff5 	bl	801e462 <__copybits>
 801c478:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c47a:	4620      	mov	r0, r4
 801c47c:	f001 fbc8 	bl	801dc10 <_Bfree>
 801c480:	3f01      	subs	r7, #1
 801c482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c484:	2f04      	cmp	r7, #4
 801c486:	d806      	bhi.n	801c496 <_strtod_l+0xee>
 801c488:	e8df f007 	tbb	[pc, r7]
 801c48c:	201d0314 	.word	0x201d0314
 801c490:	14          	.byte	0x14
 801c491:	00          	.byte	0x00
 801c492:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801c496:	05e9      	lsls	r1, r5, #23
 801c498:	bf48      	it	mi
 801c49a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801c49e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c4a2:	0d1b      	lsrs	r3, r3, #20
 801c4a4:	051b      	lsls	r3, r3, #20
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d1b9      	bne.n	801c41e <_strtod_l+0x76>
 801c4aa:	f000 ff7f 	bl	801d3ac <__errno>
 801c4ae:	2322      	movs	r3, #34	; 0x22
 801c4b0:	6003      	str	r3, [r0, #0]
 801c4b2:	e7b4      	b.n	801c41e <_strtod_l+0x76>
 801c4b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801c4b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c4bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c4c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c4c4:	e7e7      	b.n	801c496 <_strtod_l+0xee>
 801c4c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801c640 <_strtod_l+0x298>
 801c4ca:	e7e4      	b.n	801c496 <_strtod_l+0xee>
 801c4cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c4d0:	f04f 38ff 	mov.w	r8, #4294967295
 801c4d4:	e7df      	b.n	801c496 <_strtod_l+0xee>
 801c4d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4d8:	1c5a      	adds	r2, r3, #1
 801c4da:	9215      	str	r2, [sp, #84]	; 0x54
 801c4dc:	785b      	ldrb	r3, [r3, #1]
 801c4de:	2b30      	cmp	r3, #48	; 0x30
 801c4e0:	d0f9      	beq.n	801c4d6 <_strtod_l+0x12e>
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d09b      	beq.n	801c41e <_strtod_l+0x76>
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	f04f 0a00 	mov.w	sl, #0
 801c4ec:	9304      	str	r3, [sp, #16]
 801c4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4f0:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c4f6:	46d3      	mov	fp, sl
 801c4f8:	220a      	movs	r2, #10
 801c4fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c4fc:	7806      	ldrb	r6, [r0, #0]
 801c4fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c502:	b2d9      	uxtb	r1, r3
 801c504:	2909      	cmp	r1, #9
 801c506:	d926      	bls.n	801c556 <_strtod_l+0x1ae>
 801c508:	494c      	ldr	r1, [pc, #304]	; (801c63c <_strtod_l+0x294>)
 801c50a:	2201      	movs	r2, #1
 801c50c:	f000 fea2 	bl	801d254 <strncmp>
 801c510:	2800      	cmp	r0, #0
 801c512:	d030      	beq.n	801c576 <_strtod_l+0x1ce>
 801c514:	2000      	movs	r0, #0
 801c516:	4632      	mov	r2, r6
 801c518:	9005      	str	r0, [sp, #20]
 801c51a:	465e      	mov	r6, fp
 801c51c:	4603      	mov	r3, r0
 801c51e:	2a65      	cmp	r2, #101	; 0x65
 801c520:	d001      	beq.n	801c526 <_strtod_l+0x17e>
 801c522:	2a45      	cmp	r2, #69	; 0x45
 801c524:	d113      	bne.n	801c54e <_strtod_l+0x1a6>
 801c526:	b91e      	cbnz	r6, 801c530 <_strtod_l+0x188>
 801c528:	9a04      	ldr	r2, [sp, #16]
 801c52a:	4302      	orrs	r2, r0
 801c52c:	d094      	beq.n	801c458 <_strtod_l+0xb0>
 801c52e:	2600      	movs	r6, #0
 801c530:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801c532:	1c6a      	adds	r2, r5, #1
 801c534:	9215      	str	r2, [sp, #84]	; 0x54
 801c536:	786a      	ldrb	r2, [r5, #1]
 801c538:	2a2b      	cmp	r2, #43	; 0x2b
 801c53a:	d074      	beq.n	801c626 <_strtod_l+0x27e>
 801c53c:	2a2d      	cmp	r2, #45	; 0x2d
 801c53e:	d078      	beq.n	801c632 <_strtod_l+0x28a>
 801c540:	f04f 0c00 	mov.w	ip, #0
 801c544:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c548:	2909      	cmp	r1, #9
 801c54a:	d97f      	bls.n	801c64c <_strtod_l+0x2a4>
 801c54c:	9515      	str	r5, [sp, #84]	; 0x54
 801c54e:	2700      	movs	r7, #0
 801c550:	e09e      	b.n	801c690 <_strtod_l+0x2e8>
 801c552:	2300      	movs	r3, #0
 801c554:	e7c8      	b.n	801c4e8 <_strtod_l+0x140>
 801c556:	f1bb 0f08 	cmp.w	fp, #8
 801c55a:	bfd8      	it	le
 801c55c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801c55e:	f100 0001 	add.w	r0, r0, #1
 801c562:	bfda      	itte	le
 801c564:	fb02 3301 	mlale	r3, r2, r1, r3
 801c568:	9309      	strle	r3, [sp, #36]	; 0x24
 801c56a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801c56e:	f10b 0b01 	add.w	fp, fp, #1
 801c572:	9015      	str	r0, [sp, #84]	; 0x54
 801c574:	e7c1      	b.n	801c4fa <_strtod_l+0x152>
 801c576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c578:	1c5a      	adds	r2, r3, #1
 801c57a:	9215      	str	r2, [sp, #84]	; 0x54
 801c57c:	785a      	ldrb	r2, [r3, #1]
 801c57e:	f1bb 0f00 	cmp.w	fp, #0
 801c582:	d037      	beq.n	801c5f4 <_strtod_l+0x24c>
 801c584:	9005      	str	r0, [sp, #20]
 801c586:	465e      	mov	r6, fp
 801c588:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c58c:	2b09      	cmp	r3, #9
 801c58e:	d912      	bls.n	801c5b6 <_strtod_l+0x20e>
 801c590:	2301      	movs	r3, #1
 801c592:	e7c4      	b.n	801c51e <_strtod_l+0x176>
 801c594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c596:	1c5a      	adds	r2, r3, #1
 801c598:	9215      	str	r2, [sp, #84]	; 0x54
 801c59a:	785a      	ldrb	r2, [r3, #1]
 801c59c:	3001      	adds	r0, #1
 801c59e:	2a30      	cmp	r2, #48	; 0x30
 801c5a0:	d0f8      	beq.n	801c594 <_strtod_l+0x1ec>
 801c5a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c5a6:	2b08      	cmp	r3, #8
 801c5a8:	f200 84c1 	bhi.w	801cf2e <_strtod_l+0xb86>
 801c5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5ae:	9005      	str	r0, [sp, #20]
 801c5b0:	2000      	movs	r0, #0
 801c5b2:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5b4:	4606      	mov	r6, r0
 801c5b6:	3a30      	subs	r2, #48	; 0x30
 801c5b8:	f100 0301 	add.w	r3, r0, #1
 801c5bc:	d014      	beq.n	801c5e8 <_strtod_l+0x240>
 801c5be:	9905      	ldr	r1, [sp, #20]
 801c5c0:	4419      	add	r1, r3
 801c5c2:	9105      	str	r1, [sp, #20]
 801c5c4:	4633      	mov	r3, r6
 801c5c6:	eb00 0c06 	add.w	ip, r0, r6
 801c5ca:	210a      	movs	r1, #10
 801c5cc:	4563      	cmp	r3, ip
 801c5ce:	d113      	bne.n	801c5f8 <_strtod_l+0x250>
 801c5d0:	1833      	adds	r3, r6, r0
 801c5d2:	2b08      	cmp	r3, #8
 801c5d4:	f106 0601 	add.w	r6, r6, #1
 801c5d8:	4406      	add	r6, r0
 801c5da:	dc1a      	bgt.n	801c612 <_strtod_l+0x26a>
 801c5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c5de:	230a      	movs	r3, #10
 801c5e0:	fb03 2301 	mla	r3, r3, r1, r2
 801c5e4:	9309      	str	r3, [sp, #36]	; 0x24
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c5ea:	1c51      	adds	r1, r2, #1
 801c5ec:	9115      	str	r1, [sp, #84]	; 0x54
 801c5ee:	7852      	ldrb	r2, [r2, #1]
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	e7c9      	b.n	801c588 <_strtod_l+0x1e0>
 801c5f4:	4658      	mov	r0, fp
 801c5f6:	e7d2      	b.n	801c59e <_strtod_l+0x1f6>
 801c5f8:	2b08      	cmp	r3, #8
 801c5fa:	f103 0301 	add.w	r3, r3, #1
 801c5fe:	dc03      	bgt.n	801c608 <_strtod_l+0x260>
 801c600:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c602:	434f      	muls	r7, r1
 801c604:	9709      	str	r7, [sp, #36]	; 0x24
 801c606:	e7e1      	b.n	801c5cc <_strtod_l+0x224>
 801c608:	2b10      	cmp	r3, #16
 801c60a:	bfd8      	it	le
 801c60c:	fb01 fa0a 	mulle.w	sl, r1, sl
 801c610:	e7dc      	b.n	801c5cc <_strtod_l+0x224>
 801c612:	2e10      	cmp	r6, #16
 801c614:	bfdc      	itt	le
 801c616:	230a      	movle	r3, #10
 801c618:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801c61c:	e7e3      	b.n	801c5e6 <_strtod_l+0x23e>
 801c61e:	2300      	movs	r3, #0
 801c620:	9305      	str	r3, [sp, #20]
 801c622:	2301      	movs	r3, #1
 801c624:	e780      	b.n	801c528 <_strtod_l+0x180>
 801c626:	f04f 0c00 	mov.w	ip, #0
 801c62a:	1caa      	adds	r2, r5, #2
 801c62c:	9215      	str	r2, [sp, #84]	; 0x54
 801c62e:	78aa      	ldrb	r2, [r5, #2]
 801c630:	e788      	b.n	801c544 <_strtod_l+0x19c>
 801c632:	f04f 0c01 	mov.w	ip, #1
 801c636:	e7f8      	b.n	801c62a <_strtod_l+0x282>
 801c638:	08027e1c 	.word	0x08027e1c
 801c63c:	08027e0c 	.word	0x08027e0c
 801c640:	7ff00000 	.word	0x7ff00000
 801c644:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c646:	1c51      	adds	r1, r2, #1
 801c648:	9115      	str	r1, [sp, #84]	; 0x54
 801c64a:	7852      	ldrb	r2, [r2, #1]
 801c64c:	2a30      	cmp	r2, #48	; 0x30
 801c64e:	d0f9      	beq.n	801c644 <_strtod_l+0x29c>
 801c650:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c654:	2908      	cmp	r1, #8
 801c656:	f63f af7a 	bhi.w	801c54e <_strtod_l+0x1a6>
 801c65a:	3a30      	subs	r2, #48	; 0x30
 801c65c:	9208      	str	r2, [sp, #32]
 801c65e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c660:	920c      	str	r2, [sp, #48]	; 0x30
 801c662:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c664:	1c57      	adds	r7, r2, #1
 801c666:	9715      	str	r7, [sp, #84]	; 0x54
 801c668:	7852      	ldrb	r2, [r2, #1]
 801c66a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c66e:	f1be 0f09 	cmp.w	lr, #9
 801c672:	d938      	bls.n	801c6e6 <_strtod_l+0x33e>
 801c674:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c676:	1a7f      	subs	r7, r7, r1
 801c678:	2f08      	cmp	r7, #8
 801c67a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801c67e:	dc03      	bgt.n	801c688 <_strtod_l+0x2e0>
 801c680:	9908      	ldr	r1, [sp, #32]
 801c682:	428f      	cmp	r7, r1
 801c684:	bfa8      	it	ge
 801c686:	460f      	movge	r7, r1
 801c688:	f1bc 0f00 	cmp.w	ip, #0
 801c68c:	d000      	beq.n	801c690 <_strtod_l+0x2e8>
 801c68e:	427f      	negs	r7, r7
 801c690:	2e00      	cmp	r6, #0
 801c692:	d14f      	bne.n	801c734 <_strtod_l+0x38c>
 801c694:	9904      	ldr	r1, [sp, #16]
 801c696:	4301      	orrs	r1, r0
 801c698:	f47f aec1 	bne.w	801c41e <_strtod_l+0x76>
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	f47f aedb 	bne.w	801c458 <_strtod_l+0xb0>
 801c6a2:	2a69      	cmp	r2, #105	; 0x69
 801c6a4:	d029      	beq.n	801c6fa <_strtod_l+0x352>
 801c6a6:	dc26      	bgt.n	801c6f6 <_strtod_l+0x34e>
 801c6a8:	2a49      	cmp	r2, #73	; 0x49
 801c6aa:	d026      	beq.n	801c6fa <_strtod_l+0x352>
 801c6ac:	2a4e      	cmp	r2, #78	; 0x4e
 801c6ae:	f47f aed3 	bne.w	801c458 <_strtod_l+0xb0>
 801c6b2:	499b      	ldr	r1, [pc, #620]	; (801c920 <_strtod_l+0x578>)
 801c6b4:	a815      	add	r0, sp, #84	; 0x54
 801c6b6:	f001 f9a9 	bl	801da0c <__match>
 801c6ba:	2800      	cmp	r0, #0
 801c6bc:	f43f aecc 	beq.w	801c458 <_strtod_l+0xb0>
 801c6c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c6c2:	781b      	ldrb	r3, [r3, #0]
 801c6c4:	2b28      	cmp	r3, #40	; 0x28
 801c6c6:	d12f      	bne.n	801c728 <_strtod_l+0x380>
 801c6c8:	4996      	ldr	r1, [pc, #600]	; (801c924 <_strtod_l+0x57c>)
 801c6ca:	aa18      	add	r2, sp, #96	; 0x60
 801c6cc:	a815      	add	r0, sp, #84	; 0x54
 801c6ce:	f001 f9b1 	bl	801da34 <__hexnan>
 801c6d2:	2805      	cmp	r0, #5
 801c6d4:	d128      	bne.n	801c728 <_strtod_l+0x380>
 801c6d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c6d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c6dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801c6e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801c6e4:	e69b      	b.n	801c41e <_strtod_l+0x76>
 801c6e6:	9f08      	ldr	r7, [sp, #32]
 801c6e8:	210a      	movs	r1, #10
 801c6ea:	fb01 2107 	mla	r1, r1, r7, r2
 801c6ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801c6f2:	9208      	str	r2, [sp, #32]
 801c6f4:	e7b5      	b.n	801c662 <_strtod_l+0x2ba>
 801c6f6:	2a6e      	cmp	r2, #110	; 0x6e
 801c6f8:	e7d9      	b.n	801c6ae <_strtod_l+0x306>
 801c6fa:	498b      	ldr	r1, [pc, #556]	; (801c928 <_strtod_l+0x580>)
 801c6fc:	a815      	add	r0, sp, #84	; 0x54
 801c6fe:	f001 f985 	bl	801da0c <__match>
 801c702:	2800      	cmp	r0, #0
 801c704:	f43f aea8 	beq.w	801c458 <_strtod_l+0xb0>
 801c708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c70a:	4988      	ldr	r1, [pc, #544]	; (801c92c <_strtod_l+0x584>)
 801c70c:	3b01      	subs	r3, #1
 801c70e:	a815      	add	r0, sp, #84	; 0x54
 801c710:	9315      	str	r3, [sp, #84]	; 0x54
 801c712:	f001 f97b 	bl	801da0c <__match>
 801c716:	b910      	cbnz	r0, 801c71e <_strtod_l+0x376>
 801c718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c71a:	3301      	adds	r3, #1
 801c71c:	9315      	str	r3, [sp, #84]	; 0x54
 801c71e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801c93c <_strtod_l+0x594>
 801c722:	f04f 0800 	mov.w	r8, #0
 801c726:	e67a      	b.n	801c41e <_strtod_l+0x76>
 801c728:	4881      	ldr	r0, [pc, #516]	; (801c930 <_strtod_l+0x588>)
 801c72a:	f7fd fa21 	bl	8019b70 <nan>
 801c72e:	ec59 8b10 	vmov	r8, r9, d0
 801c732:	e674      	b.n	801c41e <_strtod_l+0x76>
 801c734:	9b05      	ldr	r3, [sp, #20]
 801c736:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c738:	1afb      	subs	r3, r7, r3
 801c73a:	f1bb 0f00 	cmp.w	fp, #0
 801c73e:	bf08      	it	eq
 801c740:	46b3      	moveq	fp, r6
 801c742:	2e10      	cmp	r6, #16
 801c744:	9308      	str	r3, [sp, #32]
 801c746:	4635      	mov	r5, r6
 801c748:	bfa8      	it	ge
 801c74a:	2510      	movge	r5, #16
 801c74c:	f7e3 ff0a 	bl	8000564 <__aeabi_ui2d>
 801c750:	2e09      	cmp	r6, #9
 801c752:	4680      	mov	r8, r0
 801c754:	4689      	mov	r9, r1
 801c756:	dd13      	ble.n	801c780 <_strtod_l+0x3d8>
 801c758:	4b76      	ldr	r3, [pc, #472]	; (801c934 <_strtod_l+0x58c>)
 801c75a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c75e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801c762:	f7e3 ff79 	bl	8000658 <__aeabi_dmul>
 801c766:	4680      	mov	r8, r0
 801c768:	4650      	mov	r0, sl
 801c76a:	4689      	mov	r9, r1
 801c76c:	f7e3 fefa 	bl	8000564 <__aeabi_ui2d>
 801c770:	4602      	mov	r2, r0
 801c772:	460b      	mov	r3, r1
 801c774:	4640      	mov	r0, r8
 801c776:	4649      	mov	r1, r9
 801c778:	f7e3 fdb8 	bl	80002ec <__adddf3>
 801c77c:	4680      	mov	r8, r0
 801c77e:	4689      	mov	r9, r1
 801c780:	2e0f      	cmp	r6, #15
 801c782:	dc38      	bgt.n	801c7f6 <_strtod_l+0x44e>
 801c784:	9b08      	ldr	r3, [sp, #32]
 801c786:	2b00      	cmp	r3, #0
 801c788:	f43f ae49 	beq.w	801c41e <_strtod_l+0x76>
 801c78c:	dd24      	ble.n	801c7d8 <_strtod_l+0x430>
 801c78e:	2b16      	cmp	r3, #22
 801c790:	dc0b      	bgt.n	801c7aa <_strtod_l+0x402>
 801c792:	4968      	ldr	r1, [pc, #416]	; (801c934 <_strtod_l+0x58c>)
 801c794:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c79c:	4642      	mov	r2, r8
 801c79e:	464b      	mov	r3, r9
 801c7a0:	f7e3 ff5a 	bl	8000658 <__aeabi_dmul>
 801c7a4:	4680      	mov	r8, r0
 801c7a6:	4689      	mov	r9, r1
 801c7a8:	e639      	b.n	801c41e <_strtod_l+0x76>
 801c7aa:	9a08      	ldr	r2, [sp, #32]
 801c7ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801c7b0:	4293      	cmp	r3, r2
 801c7b2:	db20      	blt.n	801c7f6 <_strtod_l+0x44e>
 801c7b4:	4c5f      	ldr	r4, [pc, #380]	; (801c934 <_strtod_l+0x58c>)
 801c7b6:	f1c6 060f 	rsb	r6, r6, #15
 801c7ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801c7be:	4642      	mov	r2, r8
 801c7c0:	464b      	mov	r3, r9
 801c7c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c7c6:	f7e3 ff47 	bl	8000658 <__aeabi_dmul>
 801c7ca:	9b08      	ldr	r3, [sp, #32]
 801c7cc:	1b9e      	subs	r6, r3, r6
 801c7ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801c7d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c7d6:	e7e3      	b.n	801c7a0 <_strtod_l+0x3f8>
 801c7d8:	9b08      	ldr	r3, [sp, #32]
 801c7da:	3316      	adds	r3, #22
 801c7dc:	db0b      	blt.n	801c7f6 <_strtod_l+0x44e>
 801c7de:	9b05      	ldr	r3, [sp, #20]
 801c7e0:	1bdf      	subs	r7, r3, r7
 801c7e2:	4b54      	ldr	r3, [pc, #336]	; (801c934 <_strtod_l+0x58c>)
 801c7e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801c7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c7ec:	4640      	mov	r0, r8
 801c7ee:	4649      	mov	r1, r9
 801c7f0:	f7e4 f85c 	bl	80008ac <__aeabi_ddiv>
 801c7f4:	e7d6      	b.n	801c7a4 <_strtod_l+0x3fc>
 801c7f6:	9b08      	ldr	r3, [sp, #32]
 801c7f8:	1b75      	subs	r5, r6, r5
 801c7fa:	441d      	add	r5, r3
 801c7fc:	2d00      	cmp	r5, #0
 801c7fe:	dd70      	ble.n	801c8e2 <_strtod_l+0x53a>
 801c800:	f015 030f 	ands.w	r3, r5, #15
 801c804:	d00a      	beq.n	801c81c <_strtod_l+0x474>
 801c806:	494b      	ldr	r1, [pc, #300]	; (801c934 <_strtod_l+0x58c>)
 801c808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c80c:	4642      	mov	r2, r8
 801c80e:	464b      	mov	r3, r9
 801c810:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c814:	f7e3 ff20 	bl	8000658 <__aeabi_dmul>
 801c818:	4680      	mov	r8, r0
 801c81a:	4689      	mov	r9, r1
 801c81c:	f035 050f 	bics.w	r5, r5, #15
 801c820:	d04d      	beq.n	801c8be <_strtod_l+0x516>
 801c822:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801c826:	dd22      	ble.n	801c86e <_strtod_l+0x4c6>
 801c828:	2500      	movs	r5, #0
 801c82a:	46ab      	mov	fp, r5
 801c82c:	9509      	str	r5, [sp, #36]	; 0x24
 801c82e:	9505      	str	r5, [sp, #20]
 801c830:	2322      	movs	r3, #34	; 0x22
 801c832:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801c93c <_strtod_l+0x594>
 801c836:	6023      	str	r3, [r4, #0]
 801c838:	f04f 0800 	mov.w	r8, #0
 801c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c83e:	2b00      	cmp	r3, #0
 801c840:	f43f aded 	beq.w	801c41e <_strtod_l+0x76>
 801c844:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c846:	4620      	mov	r0, r4
 801c848:	f001 f9e2 	bl	801dc10 <_Bfree>
 801c84c:	9905      	ldr	r1, [sp, #20]
 801c84e:	4620      	mov	r0, r4
 801c850:	f001 f9de 	bl	801dc10 <_Bfree>
 801c854:	4659      	mov	r1, fp
 801c856:	4620      	mov	r0, r4
 801c858:	f001 f9da 	bl	801dc10 <_Bfree>
 801c85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c85e:	4620      	mov	r0, r4
 801c860:	f001 f9d6 	bl	801dc10 <_Bfree>
 801c864:	4629      	mov	r1, r5
 801c866:	4620      	mov	r0, r4
 801c868:	f001 f9d2 	bl	801dc10 <_Bfree>
 801c86c:	e5d7      	b.n	801c41e <_strtod_l+0x76>
 801c86e:	4b32      	ldr	r3, [pc, #200]	; (801c938 <_strtod_l+0x590>)
 801c870:	9304      	str	r3, [sp, #16]
 801c872:	2300      	movs	r3, #0
 801c874:	112d      	asrs	r5, r5, #4
 801c876:	4640      	mov	r0, r8
 801c878:	4649      	mov	r1, r9
 801c87a:	469a      	mov	sl, r3
 801c87c:	2d01      	cmp	r5, #1
 801c87e:	dc21      	bgt.n	801c8c4 <_strtod_l+0x51c>
 801c880:	b10b      	cbz	r3, 801c886 <_strtod_l+0x4de>
 801c882:	4680      	mov	r8, r0
 801c884:	4689      	mov	r9, r1
 801c886:	492c      	ldr	r1, [pc, #176]	; (801c938 <_strtod_l+0x590>)
 801c888:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c88c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801c890:	4642      	mov	r2, r8
 801c892:	464b      	mov	r3, r9
 801c894:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c898:	f7e3 fede 	bl	8000658 <__aeabi_dmul>
 801c89c:	4b27      	ldr	r3, [pc, #156]	; (801c93c <_strtod_l+0x594>)
 801c89e:	460a      	mov	r2, r1
 801c8a0:	400b      	ands	r3, r1
 801c8a2:	4927      	ldr	r1, [pc, #156]	; (801c940 <_strtod_l+0x598>)
 801c8a4:	428b      	cmp	r3, r1
 801c8a6:	4680      	mov	r8, r0
 801c8a8:	d8be      	bhi.n	801c828 <_strtod_l+0x480>
 801c8aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801c8ae:	428b      	cmp	r3, r1
 801c8b0:	bf86      	itte	hi
 801c8b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801c944 <_strtod_l+0x59c>
 801c8b6:	f04f 38ff 	movhi.w	r8, #4294967295
 801c8ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801c8be:	2300      	movs	r3, #0
 801c8c0:	9304      	str	r3, [sp, #16]
 801c8c2:	e07b      	b.n	801c9bc <_strtod_l+0x614>
 801c8c4:	07ea      	lsls	r2, r5, #31
 801c8c6:	d505      	bpl.n	801c8d4 <_strtod_l+0x52c>
 801c8c8:	9b04      	ldr	r3, [sp, #16]
 801c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ce:	f7e3 fec3 	bl	8000658 <__aeabi_dmul>
 801c8d2:	2301      	movs	r3, #1
 801c8d4:	9a04      	ldr	r2, [sp, #16]
 801c8d6:	3208      	adds	r2, #8
 801c8d8:	f10a 0a01 	add.w	sl, sl, #1
 801c8dc:	106d      	asrs	r5, r5, #1
 801c8de:	9204      	str	r2, [sp, #16]
 801c8e0:	e7cc      	b.n	801c87c <_strtod_l+0x4d4>
 801c8e2:	d0ec      	beq.n	801c8be <_strtod_l+0x516>
 801c8e4:	426d      	negs	r5, r5
 801c8e6:	f015 020f 	ands.w	r2, r5, #15
 801c8ea:	d00a      	beq.n	801c902 <_strtod_l+0x55a>
 801c8ec:	4b11      	ldr	r3, [pc, #68]	; (801c934 <_strtod_l+0x58c>)
 801c8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c8f2:	4640      	mov	r0, r8
 801c8f4:	4649      	mov	r1, r9
 801c8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8fa:	f7e3 ffd7 	bl	80008ac <__aeabi_ddiv>
 801c8fe:	4680      	mov	r8, r0
 801c900:	4689      	mov	r9, r1
 801c902:	112d      	asrs	r5, r5, #4
 801c904:	d0db      	beq.n	801c8be <_strtod_l+0x516>
 801c906:	2d1f      	cmp	r5, #31
 801c908:	dd1e      	ble.n	801c948 <_strtod_l+0x5a0>
 801c90a:	2500      	movs	r5, #0
 801c90c:	46ab      	mov	fp, r5
 801c90e:	9509      	str	r5, [sp, #36]	; 0x24
 801c910:	9505      	str	r5, [sp, #20]
 801c912:	2322      	movs	r3, #34	; 0x22
 801c914:	f04f 0800 	mov.w	r8, #0
 801c918:	f04f 0900 	mov.w	r9, #0
 801c91c:	6023      	str	r3, [r4, #0]
 801c91e:	e78d      	b.n	801c83c <_strtod_l+0x494>
 801c920:	08027e17 	.word	0x08027e17
 801c924:	08027e30 	.word	0x08027e30
 801c928:	08027e0e 	.word	0x08027e0e
 801c92c:	08027e11 	.word	0x08027e11
 801c930:	08027e0b 	.word	0x08027e0b
 801c934:	08028088 	.word	0x08028088
 801c938:	08028060 	.word	0x08028060
 801c93c:	7ff00000 	.word	0x7ff00000
 801c940:	7ca00000 	.word	0x7ca00000
 801c944:	7fefffff 	.word	0x7fefffff
 801c948:	f015 0310 	ands.w	r3, r5, #16
 801c94c:	bf18      	it	ne
 801c94e:	236a      	movne	r3, #106	; 0x6a
 801c950:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801ccf4 <_strtod_l+0x94c>
 801c954:	9304      	str	r3, [sp, #16]
 801c956:	4640      	mov	r0, r8
 801c958:	4649      	mov	r1, r9
 801c95a:	2300      	movs	r3, #0
 801c95c:	07ea      	lsls	r2, r5, #31
 801c95e:	d504      	bpl.n	801c96a <_strtod_l+0x5c2>
 801c960:	e9da 2300 	ldrd	r2, r3, [sl]
 801c964:	f7e3 fe78 	bl	8000658 <__aeabi_dmul>
 801c968:	2301      	movs	r3, #1
 801c96a:	106d      	asrs	r5, r5, #1
 801c96c:	f10a 0a08 	add.w	sl, sl, #8
 801c970:	d1f4      	bne.n	801c95c <_strtod_l+0x5b4>
 801c972:	b10b      	cbz	r3, 801c978 <_strtod_l+0x5d0>
 801c974:	4680      	mov	r8, r0
 801c976:	4689      	mov	r9, r1
 801c978:	9b04      	ldr	r3, [sp, #16]
 801c97a:	b1bb      	cbz	r3, 801c9ac <_strtod_l+0x604>
 801c97c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801c980:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c984:	2b00      	cmp	r3, #0
 801c986:	4649      	mov	r1, r9
 801c988:	dd10      	ble.n	801c9ac <_strtod_l+0x604>
 801c98a:	2b1f      	cmp	r3, #31
 801c98c:	f340 811e 	ble.w	801cbcc <_strtod_l+0x824>
 801c990:	2b34      	cmp	r3, #52	; 0x34
 801c992:	bfde      	ittt	le
 801c994:	f04f 33ff 	movle.w	r3, #4294967295
 801c998:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801c99c:	4093      	lslle	r3, r2
 801c99e:	f04f 0800 	mov.w	r8, #0
 801c9a2:	bfcc      	ite	gt
 801c9a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c9a8:	ea03 0901 	andle.w	r9, r3, r1
 801c9ac:	2200      	movs	r2, #0
 801c9ae:	2300      	movs	r3, #0
 801c9b0:	4640      	mov	r0, r8
 801c9b2:	4649      	mov	r1, r9
 801c9b4:	f7e4 f8b8 	bl	8000b28 <__aeabi_dcmpeq>
 801c9b8:	2800      	cmp	r0, #0
 801c9ba:	d1a6      	bne.n	801c90a <_strtod_l+0x562>
 801c9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9be:	9300      	str	r3, [sp, #0]
 801c9c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c9c2:	4633      	mov	r3, r6
 801c9c4:	465a      	mov	r2, fp
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f001 f98a 	bl	801dce0 <__s2b>
 801c9cc:	9009      	str	r0, [sp, #36]	; 0x24
 801c9ce:	2800      	cmp	r0, #0
 801c9d0:	f43f af2a 	beq.w	801c828 <_strtod_l+0x480>
 801c9d4:	9a08      	ldr	r2, [sp, #32]
 801c9d6:	9b05      	ldr	r3, [sp, #20]
 801c9d8:	2a00      	cmp	r2, #0
 801c9da:	eba3 0307 	sub.w	r3, r3, r7
 801c9de:	bfa8      	it	ge
 801c9e0:	2300      	movge	r3, #0
 801c9e2:	930c      	str	r3, [sp, #48]	; 0x30
 801c9e4:	2500      	movs	r5, #0
 801c9e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c9ea:	9312      	str	r3, [sp, #72]	; 0x48
 801c9ec:	46ab      	mov	fp, r5
 801c9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	6859      	ldr	r1, [r3, #4]
 801c9f4:	f001 f8cc 	bl	801db90 <_Balloc>
 801c9f8:	9005      	str	r0, [sp, #20]
 801c9fa:	2800      	cmp	r0, #0
 801c9fc:	f43f af18 	beq.w	801c830 <_strtod_l+0x488>
 801ca00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca02:	691a      	ldr	r2, [r3, #16]
 801ca04:	3202      	adds	r2, #2
 801ca06:	f103 010c 	add.w	r1, r3, #12
 801ca0a:	0092      	lsls	r2, r2, #2
 801ca0c:	300c      	adds	r0, #12
 801ca0e:	f000 fcfa 	bl	801d406 <memcpy>
 801ca12:	ec49 8b10 	vmov	d0, r8, r9
 801ca16:	aa18      	add	r2, sp, #96	; 0x60
 801ca18:	a917      	add	r1, sp, #92	; 0x5c
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	f001 fc94 	bl	801e348 <__d2b>
 801ca20:	ec49 8b18 	vmov	d8, r8, r9
 801ca24:	9016      	str	r0, [sp, #88]	; 0x58
 801ca26:	2800      	cmp	r0, #0
 801ca28:	f43f af02 	beq.w	801c830 <_strtod_l+0x488>
 801ca2c:	2101      	movs	r1, #1
 801ca2e:	4620      	mov	r0, r4
 801ca30:	f001 f9ee 	bl	801de10 <__i2b>
 801ca34:	4683      	mov	fp, r0
 801ca36:	2800      	cmp	r0, #0
 801ca38:	f43f aefa 	beq.w	801c830 <_strtod_l+0x488>
 801ca3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801ca3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ca40:	2e00      	cmp	r6, #0
 801ca42:	bfab      	itete	ge
 801ca44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801ca46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801ca48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ca4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801ca4e:	bfac      	ite	ge
 801ca50:	eb06 0a03 	addge.w	sl, r6, r3
 801ca54:	1b9f      	sublt	r7, r3, r6
 801ca56:	9b04      	ldr	r3, [sp, #16]
 801ca58:	1af6      	subs	r6, r6, r3
 801ca5a:	4416      	add	r6, r2
 801ca5c:	4ba0      	ldr	r3, [pc, #640]	; (801cce0 <_strtod_l+0x938>)
 801ca5e:	3e01      	subs	r6, #1
 801ca60:	429e      	cmp	r6, r3
 801ca62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ca66:	f280 80c4 	bge.w	801cbf2 <_strtod_l+0x84a>
 801ca6a:	1b9b      	subs	r3, r3, r6
 801ca6c:	2b1f      	cmp	r3, #31
 801ca6e:	eba2 0203 	sub.w	r2, r2, r3
 801ca72:	f04f 0101 	mov.w	r1, #1
 801ca76:	f300 80b0 	bgt.w	801cbda <_strtod_l+0x832>
 801ca7a:	fa01 f303 	lsl.w	r3, r1, r3
 801ca7e:	930e      	str	r3, [sp, #56]	; 0x38
 801ca80:	2300      	movs	r3, #0
 801ca82:	930d      	str	r3, [sp, #52]	; 0x34
 801ca84:	eb0a 0602 	add.w	r6, sl, r2
 801ca88:	9b04      	ldr	r3, [sp, #16]
 801ca8a:	45b2      	cmp	sl, r6
 801ca8c:	4417      	add	r7, r2
 801ca8e:	441f      	add	r7, r3
 801ca90:	4653      	mov	r3, sl
 801ca92:	bfa8      	it	ge
 801ca94:	4633      	movge	r3, r6
 801ca96:	42bb      	cmp	r3, r7
 801ca98:	bfa8      	it	ge
 801ca9a:	463b      	movge	r3, r7
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	bfc2      	ittt	gt
 801caa0:	1af6      	subgt	r6, r6, r3
 801caa2:	1aff      	subgt	r7, r7, r3
 801caa4:	ebaa 0a03 	subgt.w	sl, sl, r3
 801caa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801caaa:	2b00      	cmp	r3, #0
 801caac:	dd17      	ble.n	801cade <_strtod_l+0x736>
 801caae:	4659      	mov	r1, fp
 801cab0:	461a      	mov	r2, r3
 801cab2:	4620      	mov	r0, r4
 801cab4:	f001 fa6c 	bl	801df90 <__pow5mult>
 801cab8:	4683      	mov	fp, r0
 801caba:	2800      	cmp	r0, #0
 801cabc:	f43f aeb8 	beq.w	801c830 <_strtod_l+0x488>
 801cac0:	4601      	mov	r1, r0
 801cac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cac4:	4620      	mov	r0, r4
 801cac6:	f001 f9b9 	bl	801de3c <__multiply>
 801caca:	900b      	str	r0, [sp, #44]	; 0x2c
 801cacc:	2800      	cmp	r0, #0
 801cace:	f43f aeaf 	beq.w	801c830 <_strtod_l+0x488>
 801cad2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cad4:	4620      	mov	r0, r4
 801cad6:	f001 f89b 	bl	801dc10 <_Bfree>
 801cada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cadc:	9316      	str	r3, [sp, #88]	; 0x58
 801cade:	2e00      	cmp	r6, #0
 801cae0:	f300 808c 	bgt.w	801cbfc <_strtod_l+0x854>
 801cae4:	9b08      	ldr	r3, [sp, #32]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	dd08      	ble.n	801cafc <_strtod_l+0x754>
 801caea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801caec:	9905      	ldr	r1, [sp, #20]
 801caee:	4620      	mov	r0, r4
 801caf0:	f001 fa4e 	bl	801df90 <__pow5mult>
 801caf4:	9005      	str	r0, [sp, #20]
 801caf6:	2800      	cmp	r0, #0
 801caf8:	f43f ae9a 	beq.w	801c830 <_strtod_l+0x488>
 801cafc:	2f00      	cmp	r7, #0
 801cafe:	dd08      	ble.n	801cb12 <_strtod_l+0x76a>
 801cb00:	9905      	ldr	r1, [sp, #20]
 801cb02:	463a      	mov	r2, r7
 801cb04:	4620      	mov	r0, r4
 801cb06:	f001 fa9d 	bl	801e044 <__lshift>
 801cb0a:	9005      	str	r0, [sp, #20]
 801cb0c:	2800      	cmp	r0, #0
 801cb0e:	f43f ae8f 	beq.w	801c830 <_strtod_l+0x488>
 801cb12:	f1ba 0f00 	cmp.w	sl, #0
 801cb16:	dd08      	ble.n	801cb2a <_strtod_l+0x782>
 801cb18:	4659      	mov	r1, fp
 801cb1a:	4652      	mov	r2, sl
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f001 fa91 	bl	801e044 <__lshift>
 801cb22:	4683      	mov	fp, r0
 801cb24:	2800      	cmp	r0, #0
 801cb26:	f43f ae83 	beq.w	801c830 <_strtod_l+0x488>
 801cb2a:	9a05      	ldr	r2, [sp, #20]
 801cb2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cb2e:	4620      	mov	r0, r4
 801cb30:	f001 fb10 	bl	801e154 <__mdiff>
 801cb34:	4605      	mov	r5, r0
 801cb36:	2800      	cmp	r0, #0
 801cb38:	f43f ae7a 	beq.w	801c830 <_strtod_l+0x488>
 801cb3c:	68c3      	ldr	r3, [r0, #12]
 801cb3e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb40:	2300      	movs	r3, #0
 801cb42:	60c3      	str	r3, [r0, #12]
 801cb44:	4659      	mov	r1, fp
 801cb46:	f001 fae9 	bl	801e11c <__mcmp>
 801cb4a:	2800      	cmp	r0, #0
 801cb4c:	da60      	bge.n	801cc10 <_strtod_l+0x868>
 801cb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb50:	ea53 0308 	orrs.w	r3, r3, r8
 801cb54:	f040 8084 	bne.w	801cc60 <_strtod_l+0x8b8>
 801cb58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d17f      	bne.n	801cc60 <_strtod_l+0x8b8>
 801cb60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cb64:	0d1b      	lsrs	r3, r3, #20
 801cb66:	051b      	lsls	r3, r3, #20
 801cb68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801cb6c:	d978      	bls.n	801cc60 <_strtod_l+0x8b8>
 801cb6e:	696b      	ldr	r3, [r5, #20]
 801cb70:	b913      	cbnz	r3, 801cb78 <_strtod_l+0x7d0>
 801cb72:	692b      	ldr	r3, [r5, #16]
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	dd73      	ble.n	801cc60 <_strtod_l+0x8b8>
 801cb78:	4629      	mov	r1, r5
 801cb7a:	2201      	movs	r2, #1
 801cb7c:	4620      	mov	r0, r4
 801cb7e:	f001 fa61 	bl	801e044 <__lshift>
 801cb82:	4659      	mov	r1, fp
 801cb84:	4605      	mov	r5, r0
 801cb86:	f001 fac9 	bl	801e11c <__mcmp>
 801cb8a:	2800      	cmp	r0, #0
 801cb8c:	dd68      	ble.n	801cc60 <_strtod_l+0x8b8>
 801cb8e:	9904      	ldr	r1, [sp, #16]
 801cb90:	4a54      	ldr	r2, [pc, #336]	; (801cce4 <_strtod_l+0x93c>)
 801cb92:	464b      	mov	r3, r9
 801cb94:	2900      	cmp	r1, #0
 801cb96:	f000 8084 	beq.w	801cca2 <_strtod_l+0x8fa>
 801cb9a:	ea02 0109 	and.w	r1, r2, r9
 801cb9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801cba2:	dc7e      	bgt.n	801cca2 <_strtod_l+0x8fa>
 801cba4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cba8:	f77f aeb3 	ble.w	801c912 <_strtod_l+0x56a>
 801cbac:	4b4e      	ldr	r3, [pc, #312]	; (801cce8 <_strtod_l+0x940>)
 801cbae:	4640      	mov	r0, r8
 801cbb0:	4649      	mov	r1, r9
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	f7e3 fd50 	bl	8000658 <__aeabi_dmul>
 801cbb8:	4b4a      	ldr	r3, [pc, #296]	; (801cce4 <_strtod_l+0x93c>)
 801cbba:	400b      	ands	r3, r1
 801cbbc:	4680      	mov	r8, r0
 801cbbe:	4689      	mov	r9, r1
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	f47f ae3f 	bne.w	801c844 <_strtod_l+0x49c>
 801cbc6:	2322      	movs	r3, #34	; 0x22
 801cbc8:	6023      	str	r3, [r4, #0]
 801cbca:	e63b      	b.n	801c844 <_strtod_l+0x49c>
 801cbcc:	f04f 32ff 	mov.w	r2, #4294967295
 801cbd0:	fa02 f303 	lsl.w	r3, r2, r3
 801cbd4:	ea03 0808 	and.w	r8, r3, r8
 801cbd8:	e6e8      	b.n	801c9ac <_strtod_l+0x604>
 801cbda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801cbde:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801cbe2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801cbe6:	36e2      	adds	r6, #226	; 0xe2
 801cbe8:	fa01 f306 	lsl.w	r3, r1, r6
 801cbec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801cbf0:	e748      	b.n	801ca84 <_strtod_l+0x6dc>
 801cbf2:	2100      	movs	r1, #0
 801cbf4:	2301      	movs	r3, #1
 801cbf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801cbfa:	e743      	b.n	801ca84 <_strtod_l+0x6dc>
 801cbfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cbfe:	4632      	mov	r2, r6
 801cc00:	4620      	mov	r0, r4
 801cc02:	f001 fa1f 	bl	801e044 <__lshift>
 801cc06:	9016      	str	r0, [sp, #88]	; 0x58
 801cc08:	2800      	cmp	r0, #0
 801cc0a:	f47f af6b 	bne.w	801cae4 <_strtod_l+0x73c>
 801cc0e:	e60f      	b.n	801c830 <_strtod_l+0x488>
 801cc10:	46ca      	mov	sl, r9
 801cc12:	d171      	bne.n	801ccf8 <_strtod_l+0x950>
 801cc14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cc1a:	b352      	cbz	r2, 801cc72 <_strtod_l+0x8ca>
 801cc1c:	4a33      	ldr	r2, [pc, #204]	; (801ccec <_strtod_l+0x944>)
 801cc1e:	4293      	cmp	r3, r2
 801cc20:	d12a      	bne.n	801cc78 <_strtod_l+0x8d0>
 801cc22:	9b04      	ldr	r3, [sp, #16]
 801cc24:	4641      	mov	r1, r8
 801cc26:	b1fb      	cbz	r3, 801cc68 <_strtod_l+0x8c0>
 801cc28:	4b2e      	ldr	r3, [pc, #184]	; (801cce4 <_strtod_l+0x93c>)
 801cc2a:	ea09 0303 	and.w	r3, r9, r3
 801cc2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cc32:	f04f 32ff 	mov.w	r2, #4294967295
 801cc36:	d81a      	bhi.n	801cc6e <_strtod_l+0x8c6>
 801cc38:	0d1b      	lsrs	r3, r3, #20
 801cc3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cc3e:	fa02 f303 	lsl.w	r3, r2, r3
 801cc42:	4299      	cmp	r1, r3
 801cc44:	d118      	bne.n	801cc78 <_strtod_l+0x8d0>
 801cc46:	4b2a      	ldr	r3, [pc, #168]	; (801ccf0 <_strtod_l+0x948>)
 801cc48:	459a      	cmp	sl, r3
 801cc4a:	d102      	bne.n	801cc52 <_strtod_l+0x8aa>
 801cc4c:	3101      	adds	r1, #1
 801cc4e:	f43f adef 	beq.w	801c830 <_strtod_l+0x488>
 801cc52:	4b24      	ldr	r3, [pc, #144]	; (801cce4 <_strtod_l+0x93c>)
 801cc54:	ea0a 0303 	and.w	r3, sl, r3
 801cc58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801cc5c:	f04f 0800 	mov.w	r8, #0
 801cc60:	9b04      	ldr	r3, [sp, #16]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d1a2      	bne.n	801cbac <_strtod_l+0x804>
 801cc66:	e5ed      	b.n	801c844 <_strtod_l+0x49c>
 801cc68:	f04f 33ff 	mov.w	r3, #4294967295
 801cc6c:	e7e9      	b.n	801cc42 <_strtod_l+0x89a>
 801cc6e:	4613      	mov	r3, r2
 801cc70:	e7e7      	b.n	801cc42 <_strtod_l+0x89a>
 801cc72:	ea53 0308 	orrs.w	r3, r3, r8
 801cc76:	d08a      	beq.n	801cb8e <_strtod_l+0x7e6>
 801cc78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc7a:	b1e3      	cbz	r3, 801ccb6 <_strtod_l+0x90e>
 801cc7c:	ea13 0f0a 	tst.w	r3, sl
 801cc80:	d0ee      	beq.n	801cc60 <_strtod_l+0x8b8>
 801cc82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc84:	9a04      	ldr	r2, [sp, #16]
 801cc86:	4640      	mov	r0, r8
 801cc88:	4649      	mov	r1, r9
 801cc8a:	b1c3      	cbz	r3, 801ccbe <_strtod_l+0x916>
 801cc8c:	f7ff fb6d 	bl	801c36a <sulp>
 801cc90:	4602      	mov	r2, r0
 801cc92:	460b      	mov	r3, r1
 801cc94:	ec51 0b18 	vmov	r0, r1, d8
 801cc98:	f7e3 fb28 	bl	80002ec <__adddf3>
 801cc9c:	4680      	mov	r8, r0
 801cc9e:	4689      	mov	r9, r1
 801cca0:	e7de      	b.n	801cc60 <_strtod_l+0x8b8>
 801cca2:	4013      	ands	r3, r2
 801cca4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cca8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801ccac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801ccb0:	f04f 38ff 	mov.w	r8, #4294967295
 801ccb4:	e7d4      	b.n	801cc60 <_strtod_l+0x8b8>
 801ccb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ccb8:	ea13 0f08 	tst.w	r3, r8
 801ccbc:	e7e0      	b.n	801cc80 <_strtod_l+0x8d8>
 801ccbe:	f7ff fb54 	bl	801c36a <sulp>
 801ccc2:	4602      	mov	r2, r0
 801ccc4:	460b      	mov	r3, r1
 801ccc6:	ec51 0b18 	vmov	r0, r1, d8
 801ccca:	f7e3 fb0d 	bl	80002e8 <__aeabi_dsub>
 801ccce:	2200      	movs	r2, #0
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	4680      	mov	r8, r0
 801ccd4:	4689      	mov	r9, r1
 801ccd6:	f7e3 ff27 	bl	8000b28 <__aeabi_dcmpeq>
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	d0c0      	beq.n	801cc60 <_strtod_l+0x8b8>
 801ccde:	e618      	b.n	801c912 <_strtod_l+0x56a>
 801cce0:	fffffc02 	.word	0xfffffc02
 801cce4:	7ff00000 	.word	0x7ff00000
 801cce8:	39500000 	.word	0x39500000
 801ccec:	000fffff 	.word	0x000fffff
 801ccf0:	7fefffff 	.word	0x7fefffff
 801ccf4:	08027e48 	.word	0x08027e48
 801ccf8:	4659      	mov	r1, fp
 801ccfa:	4628      	mov	r0, r5
 801ccfc:	f001 fb7e 	bl	801e3fc <__ratio>
 801cd00:	ec57 6b10 	vmov	r6, r7, d0
 801cd04:	ee10 0a10 	vmov	r0, s0
 801cd08:	2200      	movs	r2, #0
 801cd0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801cd0e:	4639      	mov	r1, r7
 801cd10:	f7e3 ff1e 	bl	8000b50 <__aeabi_dcmple>
 801cd14:	2800      	cmp	r0, #0
 801cd16:	d071      	beq.n	801cdfc <_strtod_l+0xa54>
 801cd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d17c      	bne.n	801ce18 <_strtod_l+0xa70>
 801cd1e:	f1b8 0f00 	cmp.w	r8, #0
 801cd22:	d15a      	bne.n	801cdda <_strtod_l+0xa32>
 801cd24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d15d      	bne.n	801cde8 <_strtod_l+0xa40>
 801cd2c:	4b90      	ldr	r3, [pc, #576]	; (801cf70 <_strtod_l+0xbc8>)
 801cd2e:	2200      	movs	r2, #0
 801cd30:	4630      	mov	r0, r6
 801cd32:	4639      	mov	r1, r7
 801cd34:	f7e3 ff02 	bl	8000b3c <__aeabi_dcmplt>
 801cd38:	2800      	cmp	r0, #0
 801cd3a:	d15c      	bne.n	801cdf6 <_strtod_l+0xa4e>
 801cd3c:	4630      	mov	r0, r6
 801cd3e:	4639      	mov	r1, r7
 801cd40:	4b8c      	ldr	r3, [pc, #560]	; (801cf74 <_strtod_l+0xbcc>)
 801cd42:	2200      	movs	r2, #0
 801cd44:	f7e3 fc88 	bl	8000658 <__aeabi_dmul>
 801cd48:	4606      	mov	r6, r0
 801cd4a:	460f      	mov	r7, r1
 801cd4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801cd50:	9606      	str	r6, [sp, #24]
 801cd52:	9307      	str	r3, [sp, #28]
 801cd54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801cd5c:	4b86      	ldr	r3, [pc, #536]	; (801cf78 <_strtod_l+0xbd0>)
 801cd5e:	ea0a 0303 	and.w	r3, sl, r3
 801cd62:	930d      	str	r3, [sp, #52]	; 0x34
 801cd64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd66:	4b85      	ldr	r3, [pc, #532]	; (801cf7c <_strtod_l+0xbd4>)
 801cd68:	429a      	cmp	r2, r3
 801cd6a:	f040 8090 	bne.w	801ce8e <_strtod_l+0xae6>
 801cd6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801cd72:	ec49 8b10 	vmov	d0, r8, r9
 801cd76:	f001 fa77 	bl	801e268 <__ulp>
 801cd7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd7e:	ec51 0b10 	vmov	r0, r1, d0
 801cd82:	f7e3 fc69 	bl	8000658 <__aeabi_dmul>
 801cd86:	4642      	mov	r2, r8
 801cd88:	464b      	mov	r3, r9
 801cd8a:	f7e3 faaf 	bl	80002ec <__adddf3>
 801cd8e:	460b      	mov	r3, r1
 801cd90:	4979      	ldr	r1, [pc, #484]	; (801cf78 <_strtod_l+0xbd0>)
 801cd92:	4a7b      	ldr	r2, [pc, #492]	; (801cf80 <_strtod_l+0xbd8>)
 801cd94:	4019      	ands	r1, r3
 801cd96:	4291      	cmp	r1, r2
 801cd98:	4680      	mov	r8, r0
 801cd9a:	d944      	bls.n	801ce26 <_strtod_l+0xa7e>
 801cd9c:	ee18 2a90 	vmov	r2, s17
 801cda0:	4b78      	ldr	r3, [pc, #480]	; (801cf84 <_strtod_l+0xbdc>)
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d104      	bne.n	801cdb0 <_strtod_l+0xa08>
 801cda6:	ee18 3a10 	vmov	r3, s16
 801cdaa:	3301      	adds	r3, #1
 801cdac:	f43f ad40 	beq.w	801c830 <_strtod_l+0x488>
 801cdb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801cf84 <_strtod_l+0xbdc>
 801cdb4:	f04f 38ff 	mov.w	r8, #4294967295
 801cdb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cdba:	4620      	mov	r0, r4
 801cdbc:	f000 ff28 	bl	801dc10 <_Bfree>
 801cdc0:	9905      	ldr	r1, [sp, #20]
 801cdc2:	4620      	mov	r0, r4
 801cdc4:	f000 ff24 	bl	801dc10 <_Bfree>
 801cdc8:	4659      	mov	r1, fp
 801cdca:	4620      	mov	r0, r4
 801cdcc:	f000 ff20 	bl	801dc10 <_Bfree>
 801cdd0:	4629      	mov	r1, r5
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	f000 ff1c 	bl	801dc10 <_Bfree>
 801cdd8:	e609      	b.n	801c9ee <_strtod_l+0x646>
 801cdda:	f1b8 0f01 	cmp.w	r8, #1
 801cdde:	d103      	bne.n	801cde8 <_strtod_l+0xa40>
 801cde0:	f1b9 0f00 	cmp.w	r9, #0
 801cde4:	f43f ad95 	beq.w	801c912 <_strtod_l+0x56a>
 801cde8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801cf40 <_strtod_l+0xb98>
 801cdec:	4f60      	ldr	r7, [pc, #384]	; (801cf70 <_strtod_l+0xbc8>)
 801cdee:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cdf2:	2600      	movs	r6, #0
 801cdf4:	e7ae      	b.n	801cd54 <_strtod_l+0x9ac>
 801cdf6:	4f5f      	ldr	r7, [pc, #380]	; (801cf74 <_strtod_l+0xbcc>)
 801cdf8:	2600      	movs	r6, #0
 801cdfa:	e7a7      	b.n	801cd4c <_strtod_l+0x9a4>
 801cdfc:	4b5d      	ldr	r3, [pc, #372]	; (801cf74 <_strtod_l+0xbcc>)
 801cdfe:	4630      	mov	r0, r6
 801ce00:	4639      	mov	r1, r7
 801ce02:	2200      	movs	r2, #0
 801ce04:	f7e3 fc28 	bl	8000658 <__aeabi_dmul>
 801ce08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce0a:	4606      	mov	r6, r0
 801ce0c:	460f      	mov	r7, r1
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d09c      	beq.n	801cd4c <_strtod_l+0x9a4>
 801ce12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ce16:	e79d      	b.n	801cd54 <_strtod_l+0x9ac>
 801ce18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801cf48 <_strtod_l+0xba0>
 801ce1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce20:	ec57 6b17 	vmov	r6, r7, d7
 801ce24:	e796      	b.n	801cd54 <_strtod_l+0x9ac>
 801ce26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801ce2a:	9b04      	ldr	r3, [sp, #16]
 801ce2c:	46ca      	mov	sl, r9
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d1c2      	bne.n	801cdb8 <_strtod_l+0xa10>
 801ce32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ce36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce38:	0d1b      	lsrs	r3, r3, #20
 801ce3a:	051b      	lsls	r3, r3, #20
 801ce3c:	429a      	cmp	r2, r3
 801ce3e:	d1bb      	bne.n	801cdb8 <_strtod_l+0xa10>
 801ce40:	4630      	mov	r0, r6
 801ce42:	4639      	mov	r1, r7
 801ce44:	f7e3 ffb8 	bl	8000db8 <__aeabi_d2lz>
 801ce48:	f7e3 fbd8 	bl	80005fc <__aeabi_l2d>
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	460b      	mov	r3, r1
 801ce50:	4630      	mov	r0, r6
 801ce52:	4639      	mov	r1, r7
 801ce54:	f7e3 fa48 	bl	80002e8 <__aeabi_dsub>
 801ce58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ce5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ce5e:	ea43 0308 	orr.w	r3, r3, r8
 801ce62:	4313      	orrs	r3, r2
 801ce64:	4606      	mov	r6, r0
 801ce66:	460f      	mov	r7, r1
 801ce68:	d054      	beq.n	801cf14 <_strtod_l+0xb6c>
 801ce6a:	a339      	add	r3, pc, #228	; (adr r3, 801cf50 <_strtod_l+0xba8>)
 801ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce70:	f7e3 fe64 	bl	8000b3c <__aeabi_dcmplt>
 801ce74:	2800      	cmp	r0, #0
 801ce76:	f47f ace5 	bne.w	801c844 <_strtod_l+0x49c>
 801ce7a:	a337      	add	r3, pc, #220	; (adr r3, 801cf58 <_strtod_l+0xbb0>)
 801ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce80:	4630      	mov	r0, r6
 801ce82:	4639      	mov	r1, r7
 801ce84:	f7e3 fe78 	bl	8000b78 <__aeabi_dcmpgt>
 801ce88:	2800      	cmp	r0, #0
 801ce8a:	d095      	beq.n	801cdb8 <_strtod_l+0xa10>
 801ce8c:	e4da      	b.n	801c844 <_strtod_l+0x49c>
 801ce8e:	9b04      	ldr	r3, [sp, #16]
 801ce90:	b333      	cbz	r3, 801cee0 <_strtod_l+0xb38>
 801ce92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ce98:	d822      	bhi.n	801cee0 <_strtod_l+0xb38>
 801ce9a:	a331      	add	r3, pc, #196	; (adr r3, 801cf60 <_strtod_l+0xbb8>)
 801ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea0:	4630      	mov	r0, r6
 801cea2:	4639      	mov	r1, r7
 801cea4:	f7e3 fe54 	bl	8000b50 <__aeabi_dcmple>
 801cea8:	b1a0      	cbz	r0, 801ced4 <_strtod_l+0xb2c>
 801ceaa:	4639      	mov	r1, r7
 801ceac:	4630      	mov	r0, r6
 801ceae:	f7e3 feab 	bl	8000c08 <__aeabi_d2uiz>
 801ceb2:	2801      	cmp	r0, #1
 801ceb4:	bf38      	it	cc
 801ceb6:	2001      	movcc	r0, #1
 801ceb8:	f7e3 fb54 	bl	8000564 <__aeabi_ui2d>
 801cebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cebe:	4606      	mov	r6, r0
 801cec0:	460f      	mov	r7, r1
 801cec2:	bb23      	cbnz	r3, 801cf0e <_strtod_l+0xb66>
 801cec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cec8:	9010      	str	r0, [sp, #64]	; 0x40
 801ceca:	9311      	str	r3, [sp, #68]	; 0x44
 801cecc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ced0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801ced4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ced6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ced8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801cedc:	1a9b      	subs	r3, r3, r2
 801cede:	930f      	str	r3, [sp, #60]	; 0x3c
 801cee0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cee4:	eeb0 0a48 	vmov.f32	s0, s16
 801cee8:	eef0 0a68 	vmov.f32	s1, s17
 801ceec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801cef0:	f001 f9ba 	bl	801e268 <__ulp>
 801cef4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801cef8:	ec53 2b10 	vmov	r2, r3, d0
 801cefc:	f7e3 fbac 	bl	8000658 <__aeabi_dmul>
 801cf00:	ec53 2b18 	vmov	r2, r3, d8
 801cf04:	f7e3 f9f2 	bl	80002ec <__adddf3>
 801cf08:	4680      	mov	r8, r0
 801cf0a:	4689      	mov	r9, r1
 801cf0c:	e78d      	b.n	801ce2a <_strtod_l+0xa82>
 801cf0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801cf12:	e7db      	b.n	801cecc <_strtod_l+0xb24>
 801cf14:	a314      	add	r3, pc, #80	; (adr r3, 801cf68 <_strtod_l+0xbc0>)
 801cf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf1a:	f7e3 fe0f 	bl	8000b3c <__aeabi_dcmplt>
 801cf1e:	e7b3      	b.n	801ce88 <_strtod_l+0xae0>
 801cf20:	2300      	movs	r3, #0
 801cf22:	930a      	str	r3, [sp, #40]	; 0x28
 801cf24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cf26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cf28:	6013      	str	r3, [r2, #0]
 801cf2a:	f7ff ba7c 	b.w	801c426 <_strtod_l+0x7e>
 801cf2e:	2a65      	cmp	r2, #101	; 0x65
 801cf30:	f43f ab75 	beq.w	801c61e <_strtod_l+0x276>
 801cf34:	2a45      	cmp	r2, #69	; 0x45
 801cf36:	f43f ab72 	beq.w	801c61e <_strtod_l+0x276>
 801cf3a:	2301      	movs	r3, #1
 801cf3c:	f7ff bbaa 	b.w	801c694 <_strtod_l+0x2ec>
 801cf40:	00000000 	.word	0x00000000
 801cf44:	bff00000 	.word	0xbff00000
 801cf48:	00000000 	.word	0x00000000
 801cf4c:	3ff00000 	.word	0x3ff00000
 801cf50:	94a03595 	.word	0x94a03595
 801cf54:	3fdfffff 	.word	0x3fdfffff
 801cf58:	35afe535 	.word	0x35afe535
 801cf5c:	3fe00000 	.word	0x3fe00000
 801cf60:	ffc00000 	.word	0xffc00000
 801cf64:	41dfffff 	.word	0x41dfffff
 801cf68:	94a03595 	.word	0x94a03595
 801cf6c:	3fcfffff 	.word	0x3fcfffff
 801cf70:	3ff00000 	.word	0x3ff00000
 801cf74:	3fe00000 	.word	0x3fe00000
 801cf78:	7ff00000 	.word	0x7ff00000
 801cf7c:	7fe00000 	.word	0x7fe00000
 801cf80:	7c9fffff 	.word	0x7c9fffff
 801cf84:	7fefffff 	.word	0x7fefffff

0801cf88 <strtod>:
 801cf88:	460a      	mov	r2, r1
 801cf8a:	4601      	mov	r1, r0
 801cf8c:	4802      	ldr	r0, [pc, #8]	; (801cf98 <strtod+0x10>)
 801cf8e:	4b03      	ldr	r3, [pc, #12]	; (801cf9c <strtod+0x14>)
 801cf90:	6800      	ldr	r0, [r0, #0]
 801cf92:	f7ff ba09 	b.w	801c3a8 <_strtod_l>
 801cf96:	bf00      	nop
 801cf98:	20001274 	.word	0x20001274
 801cf9c:	200010bc 	.word	0x200010bc

0801cfa0 <std>:
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	b510      	push	{r4, lr}
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	e9c0 3300 	strd	r3, r3, [r0]
 801cfaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cfae:	6083      	str	r3, [r0, #8]
 801cfb0:	8181      	strh	r1, [r0, #12]
 801cfb2:	6643      	str	r3, [r0, #100]	; 0x64
 801cfb4:	81c2      	strh	r2, [r0, #14]
 801cfb6:	6183      	str	r3, [r0, #24]
 801cfb8:	4619      	mov	r1, r3
 801cfba:	2208      	movs	r2, #8
 801cfbc:	305c      	adds	r0, #92	; 0x5c
 801cfbe:	f000 f941 	bl	801d244 <memset>
 801cfc2:	4b0d      	ldr	r3, [pc, #52]	; (801cff8 <std+0x58>)
 801cfc4:	6263      	str	r3, [r4, #36]	; 0x24
 801cfc6:	4b0d      	ldr	r3, [pc, #52]	; (801cffc <std+0x5c>)
 801cfc8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cfca:	4b0d      	ldr	r3, [pc, #52]	; (801d000 <std+0x60>)
 801cfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cfce:	4b0d      	ldr	r3, [pc, #52]	; (801d004 <std+0x64>)
 801cfd0:	6323      	str	r3, [r4, #48]	; 0x30
 801cfd2:	4b0d      	ldr	r3, [pc, #52]	; (801d008 <std+0x68>)
 801cfd4:	6224      	str	r4, [r4, #32]
 801cfd6:	429c      	cmp	r4, r3
 801cfd8:	d006      	beq.n	801cfe8 <std+0x48>
 801cfda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cfde:	4294      	cmp	r4, r2
 801cfe0:	d002      	beq.n	801cfe8 <std+0x48>
 801cfe2:	33d0      	adds	r3, #208	; 0xd0
 801cfe4:	429c      	cmp	r4, r3
 801cfe6:	d105      	bne.n	801cff4 <std+0x54>
 801cfe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cff0:	f000 ba06 	b.w	801d400 <__retarget_lock_init_recursive>
 801cff4:	bd10      	pop	{r4, pc}
 801cff6:	bf00      	nop
 801cff8:	0801d149 	.word	0x0801d149
 801cffc:	0801d16b 	.word	0x0801d16b
 801d000:	0801d1a3 	.word	0x0801d1a3
 801d004:	0801d1c7 	.word	0x0801d1c7
 801d008:	20001598 	.word	0x20001598

0801d00c <stdio_exit_handler>:
 801d00c:	4a02      	ldr	r2, [pc, #8]	; (801d018 <stdio_exit_handler+0xc>)
 801d00e:	4903      	ldr	r1, [pc, #12]	; (801d01c <stdio_exit_handler+0x10>)
 801d010:	4803      	ldr	r0, [pc, #12]	; (801d020 <stdio_exit_handler+0x14>)
 801d012:	f000 b87b 	b.w	801d10c <_fwalk_sglue>
 801d016:	bf00      	nop
 801d018:	200010b0 	.word	0x200010b0
 801d01c:	0801ee79 	.word	0x0801ee79
 801d020:	20001228 	.word	0x20001228

0801d024 <cleanup_stdio>:
 801d024:	6841      	ldr	r1, [r0, #4]
 801d026:	4b0c      	ldr	r3, [pc, #48]	; (801d058 <cleanup_stdio+0x34>)
 801d028:	4299      	cmp	r1, r3
 801d02a:	b510      	push	{r4, lr}
 801d02c:	4604      	mov	r4, r0
 801d02e:	d001      	beq.n	801d034 <cleanup_stdio+0x10>
 801d030:	f001 ff22 	bl	801ee78 <_fflush_r>
 801d034:	68a1      	ldr	r1, [r4, #8]
 801d036:	4b09      	ldr	r3, [pc, #36]	; (801d05c <cleanup_stdio+0x38>)
 801d038:	4299      	cmp	r1, r3
 801d03a:	d002      	beq.n	801d042 <cleanup_stdio+0x1e>
 801d03c:	4620      	mov	r0, r4
 801d03e:	f001 ff1b 	bl	801ee78 <_fflush_r>
 801d042:	68e1      	ldr	r1, [r4, #12]
 801d044:	4b06      	ldr	r3, [pc, #24]	; (801d060 <cleanup_stdio+0x3c>)
 801d046:	4299      	cmp	r1, r3
 801d048:	d004      	beq.n	801d054 <cleanup_stdio+0x30>
 801d04a:	4620      	mov	r0, r4
 801d04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d050:	f001 bf12 	b.w	801ee78 <_fflush_r>
 801d054:	bd10      	pop	{r4, pc}
 801d056:	bf00      	nop
 801d058:	20001598 	.word	0x20001598
 801d05c:	20001600 	.word	0x20001600
 801d060:	20001668 	.word	0x20001668

0801d064 <global_stdio_init.part.0>:
 801d064:	b510      	push	{r4, lr}
 801d066:	4b0b      	ldr	r3, [pc, #44]	; (801d094 <global_stdio_init.part.0+0x30>)
 801d068:	4c0b      	ldr	r4, [pc, #44]	; (801d098 <global_stdio_init.part.0+0x34>)
 801d06a:	4a0c      	ldr	r2, [pc, #48]	; (801d09c <global_stdio_init.part.0+0x38>)
 801d06c:	601a      	str	r2, [r3, #0]
 801d06e:	4620      	mov	r0, r4
 801d070:	2200      	movs	r2, #0
 801d072:	2104      	movs	r1, #4
 801d074:	f7ff ff94 	bl	801cfa0 <std>
 801d078:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d07c:	2201      	movs	r2, #1
 801d07e:	2109      	movs	r1, #9
 801d080:	f7ff ff8e 	bl	801cfa0 <std>
 801d084:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d088:	2202      	movs	r2, #2
 801d08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d08e:	2112      	movs	r1, #18
 801d090:	f7ff bf86 	b.w	801cfa0 <std>
 801d094:	200016d0 	.word	0x200016d0
 801d098:	20001598 	.word	0x20001598
 801d09c:	0801d00d 	.word	0x0801d00d

0801d0a0 <__sfp_lock_acquire>:
 801d0a0:	4801      	ldr	r0, [pc, #4]	; (801d0a8 <__sfp_lock_acquire+0x8>)
 801d0a2:	f000 b9ae 	b.w	801d402 <__retarget_lock_acquire_recursive>
 801d0a6:	bf00      	nop
 801d0a8:	200016d9 	.word	0x200016d9

0801d0ac <__sfp_lock_release>:
 801d0ac:	4801      	ldr	r0, [pc, #4]	; (801d0b4 <__sfp_lock_release+0x8>)
 801d0ae:	f000 b9a9 	b.w	801d404 <__retarget_lock_release_recursive>
 801d0b2:	bf00      	nop
 801d0b4:	200016d9 	.word	0x200016d9

0801d0b8 <__sinit>:
 801d0b8:	b510      	push	{r4, lr}
 801d0ba:	4604      	mov	r4, r0
 801d0bc:	f7ff fff0 	bl	801d0a0 <__sfp_lock_acquire>
 801d0c0:	6a23      	ldr	r3, [r4, #32]
 801d0c2:	b11b      	cbz	r3, 801d0cc <__sinit+0x14>
 801d0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0c8:	f7ff bff0 	b.w	801d0ac <__sfp_lock_release>
 801d0cc:	4b04      	ldr	r3, [pc, #16]	; (801d0e0 <__sinit+0x28>)
 801d0ce:	6223      	str	r3, [r4, #32]
 801d0d0:	4b04      	ldr	r3, [pc, #16]	; (801d0e4 <__sinit+0x2c>)
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d1f5      	bne.n	801d0c4 <__sinit+0xc>
 801d0d8:	f7ff ffc4 	bl	801d064 <global_stdio_init.part.0>
 801d0dc:	e7f2      	b.n	801d0c4 <__sinit+0xc>
 801d0de:	bf00      	nop
 801d0e0:	0801d025 	.word	0x0801d025
 801d0e4:	200016d0 	.word	0x200016d0

0801d0e8 <fiprintf>:
 801d0e8:	b40e      	push	{r1, r2, r3}
 801d0ea:	b503      	push	{r0, r1, lr}
 801d0ec:	4601      	mov	r1, r0
 801d0ee:	ab03      	add	r3, sp, #12
 801d0f0:	4805      	ldr	r0, [pc, #20]	; (801d108 <fiprintf+0x20>)
 801d0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0f6:	6800      	ldr	r0, [r0, #0]
 801d0f8:	9301      	str	r3, [sp, #4]
 801d0fa:	f001 fb8d 	bl	801e818 <_vfiprintf_r>
 801d0fe:	b002      	add	sp, #8
 801d100:	f85d eb04 	ldr.w	lr, [sp], #4
 801d104:	b003      	add	sp, #12
 801d106:	4770      	bx	lr
 801d108:	20001274 	.word	0x20001274

0801d10c <_fwalk_sglue>:
 801d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d110:	4607      	mov	r7, r0
 801d112:	4688      	mov	r8, r1
 801d114:	4614      	mov	r4, r2
 801d116:	2600      	movs	r6, #0
 801d118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d11c:	f1b9 0901 	subs.w	r9, r9, #1
 801d120:	d505      	bpl.n	801d12e <_fwalk_sglue+0x22>
 801d122:	6824      	ldr	r4, [r4, #0]
 801d124:	2c00      	cmp	r4, #0
 801d126:	d1f7      	bne.n	801d118 <_fwalk_sglue+0xc>
 801d128:	4630      	mov	r0, r6
 801d12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d12e:	89ab      	ldrh	r3, [r5, #12]
 801d130:	2b01      	cmp	r3, #1
 801d132:	d907      	bls.n	801d144 <_fwalk_sglue+0x38>
 801d134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d138:	3301      	adds	r3, #1
 801d13a:	d003      	beq.n	801d144 <_fwalk_sglue+0x38>
 801d13c:	4629      	mov	r1, r5
 801d13e:	4638      	mov	r0, r7
 801d140:	47c0      	blx	r8
 801d142:	4306      	orrs	r6, r0
 801d144:	3568      	adds	r5, #104	; 0x68
 801d146:	e7e9      	b.n	801d11c <_fwalk_sglue+0x10>

0801d148 <__sread>:
 801d148:	b510      	push	{r4, lr}
 801d14a:	460c      	mov	r4, r1
 801d14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d150:	f000 f8e4 	bl	801d31c <_read_r>
 801d154:	2800      	cmp	r0, #0
 801d156:	bfab      	itete	ge
 801d158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d15a:	89a3      	ldrhlt	r3, [r4, #12]
 801d15c:	181b      	addge	r3, r3, r0
 801d15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d162:	bfac      	ite	ge
 801d164:	6563      	strge	r3, [r4, #84]	; 0x54
 801d166:	81a3      	strhlt	r3, [r4, #12]
 801d168:	bd10      	pop	{r4, pc}

0801d16a <__swrite>:
 801d16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d16e:	461f      	mov	r7, r3
 801d170:	898b      	ldrh	r3, [r1, #12]
 801d172:	05db      	lsls	r3, r3, #23
 801d174:	4605      	mov	r5, r0
 801d176:	460c      	mov	r4, r1
 801d178:	4616      	mov	r6, r2
 801d17a:	d505      	bpl.n	801d188 <__swrite+0x1e>
 801d17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d180:	2302      	movs	r3, #2
 801d182:	2200      	movs	r2, #0
 801d184:	f000 f8b8 	bl	801d2f8 <_lseek_r>
 801d188:	89a3      	ldrh	r3, [r4, #12]
 801d18a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d18e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d192:	81a3      	strh	r3, [r4, #12]
 801d194:	4632      	mov	r2, r6
 801d196:	463b      	mov	r3, r7
 801d198:	4628      	mov	r0, r5
 801d19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d19e:	f000 b8f3 	b.w	801d388 <_write_r>

0801d1a2 <__sseek>:
 801d1a2:	b510      	push	{r4, lr}
 801d1a4:	460c      	mov	r4, r1
 801d1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1aa:	f000 f8a5 	bl	801d2f8 <_lseek_r>
 801d1ae:	1c43      	adds	r3, r0, #1
 801d1b0:	89a3      	ldrh	r3, [r4, #12]
 801d1b2:	bf15      	itete	ne
 801d1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d1be:	81a3      	strheq	r3, [r4, #12]
 801d1c0:	bf18      	it	ne
 801d1c2:	81a3      	strhne	r3, [r4, #12]
 801d1c4:	bd10      	pop	{r4, pc}

0801d1c6 <__sclose>:
 801d1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1ca:	f000 b885 	b.w	801d2d8 <_close_r>
	...

0801d1d0 <_vsiprintf_r>:
 801d1d0:	b500      	push	{lr}
 801d1d2:	b09b      	sub	sp, #108	; 0x6c
 801d1d4:	9100      	str	r1, [sp, #0]
 801d1d6:	9104      	str	r1, [sp, #16]
 801d1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d1dc:	9105      	str	r1, [sp, #20]
 801d1de:	9102      	str	r1, [sp, #8]
 801d1e0:	4905      	ldr	r1, [pc, #20]	; (801d1f8 <_vsiprintf_r+0x28>)
 801d1e2:	9103      	str	r1, [sp, #12]
 801d1e4:	4669      	mov	r1, sp
 801d1e6:	f001 f9ef 	bl	801e5c8 <_svfiprintf_r>
 801d1ea:	9b00      	ldr	r3, [sp, #0]
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	701a      	strb	r2, [r3, #0]
 801d1f0:	b01b      	add	sp, #108	; 0x6c
 801d1f2:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1f6:	bf00      	nop
 801d1f8:	ffff0208 	.word	0xffff0208

0801d1fc <vsiprintf>:
 801d1fc:	4613      	mov	r3, r2
 801d1fe:	460a      	mov	r2, r1
 801d200:	4601      	mov	r1, r0
 801d202:	4802      	ldr	r0, [pc, #8]	; (801d20c <vsiprintf+0x10>)
 801d204:	6800      	ldr	r0, [r0, #0]
 801d206:	f7ff bfe3 	b.w	801d1d0 <_vsiprintf_r>
 801d20a:	bf00      	nop
 801d20c:	20001274 	.word	0x20001274

0801d210 <memmove>:
 801d210:	4288      	cmp	r0, r1
 801d212:	b510      	push	{r4, lr}
 801d214:	eb01 0402 	add.w	r4, r1, r2
 801d218:	d902      	bls.n	801d220 <memmove+0x10>
 801d21a:	4284      	cmp	r4, r0
 801d21c:	4623      	mov	r3, r4
 801d21e:	d807      	bhi.n	801d230 <memmove+0x20>
 801d220:	1e43      	subs	r3, r0, #1
 801d222:	42a1      	cmp	r1, r4
 801d224:	d008      	beq.n	801d238 <memmove+0x28>
 801d226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d22e:	e7f8      	b.n	801d222 <memmove+0x12>
 801d230:	4402      	add	r2, r0
 801d232:	4601      	mov	r1, r0
 801d234:	428a      	cmp	r2, r1
 801d236:	d100      	bne.n	801d23a <memmove+0x2a>
 801d238:	bd10      	pop	{r4, pc}
 801d23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d242:	e7f7      	b.n	801d234 <memmove+0x24>

0801d244 <memset>:
 801d244:	4402      	add	r2, r0
 801d246:	4603      	mov	r3, r0
 801d248:	4293      	cmp	r3, r2
 801d24a:	d100      	bne.n	801d24e <memset+0xa>
 801d24c:	4770      	bx	lr
 801d24e:	f803 1b01 	strb.w	r1, [r3], #1
 801d252:	e7f9      	b.n	801d248 <memset+0x4>

0801d254 <strncmp>:
 801d254:	b510      	push	{r4, lr}
 801d256:	b16a      	cbz	r2, 801d274 <strncmp+0x20>
 801d258:	3901      	subs	r1, #1
 801d25a:	1884      	adds	r4, r0, r2
 801d25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d260:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d264:	429a      	cmp	r2, r3
 801d266:	d103      	bne.n	801d270 <strncmp+0x1c>
 801d268:	42a0      	cmp	r0, r4
 801d26a:	d001      	beq.n	801d270 <strncmp+0x1c>
 801d26c:	2a00      	cmp	r2, #0
 801d26e:	d1f5      	bne.n	801d25c <strncmp+0x8>
 801d270:	1ad0      	subs	r0, r2, r3
 801d272:	bd10      	pop	{r4, pc}
 801d274:	4610      	mov	r0, r2
 801d276:	e7fc      	b.n	801d272 <strncmp+0x1e>

0801d278 <_raise_r>:
 801d278:	291f      	cmp	r1, #31
 801d27a:	b538      	push	{r3, r4, r5, lr}
 801d27c:	4604      	mov	r4, r0
 801d27e:	460d      	mov	r5, r1
 801d280:	d904      	bls.n	801d28c <_raise_r+0x14>
 801d282:	2316      	movs	r3, #22
 801d284:	6003      	str	r3, [r0, #0]
 801d286:	f04f 30ff 	mov.w	r0, #4294967295
 801d28a:	bd38      	pop	{r3, r4, r5, pc}
 801d28c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d28e:	b112      	cbz	r2, 801d296 <_raise_r+0x1e>
 801d290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d294:	b94b      	cbnz	r3, 801d2aa <_raise_r+0x32>
 801d296:	4620      	mov	r0, r4
 801d298:	f000 f864 	bl	801d364 <_getpid_r>
 801d29c:	462a      	mov	r2, r5
 801d29e:	4601      	mov	r1, r0
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2a6:	f000 b84b 	b.w	801d340 <_kill_r>
 801d2aa:	2b01      	cmp	r3, #1
 801d2ac:	d00a      	beq.n	801d2c4 <_raise_r+0x4c>
 801d2ae:	1c59      	adds	r1, r3, #1
 801d2b0:	d103      	bne.n	801d2ba <_raise_r+0x42>
 801d2b2:	2316      	movs	r3, #22
 801d2b4:	6003      	str	r3, [r0, #0]
 801d2b6:	2001      	movs	r0, #1
 801d2b8:	e7e7      	b.n	801d28a <_raise_r+0x12>
 801d2ba:	2400      	movs	r4, #0
 801d2bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d2c0:	4628      	mov	r0, r5
 801d2c2:	4798      	blx	r3
 801d2c4:	2000      	movs	r0, #0
 801d2c6:	e7e0      	b.n	801d28a <_raise_r+0x12>

0801d2c8 <raise>:
 801d2c8:	4b02      	ldr	r3, [pc, #8]	; (801d2d4 <raise+0xc>)
 801d2ca:	4601      	mov	r1, r0
 801d2cc:	6818      	ldr	r0, [r3, #0]
 801d2ce:	f7ff bfd3 	b.w	801d278 <_raise_r>
 801d2d2:	bf00      	nop
 801d2d4:	20001274 	.word	0x20001274

0801d2d8 <_close_r>:
 801d2d8:	b538      	push	{r3, r4, r5, lr}
 801d2da:	4d06      	ldr	r5, [pc, #24]	; (801d2f4 <_close_r+0x1c>)
 801d2dc:	2300      	movs	r3, #0
 801d2de:	4604      	mov	r4, r0
 801d2e0:	4608      	mov	r0, r1
 801d2e2:	602b      	str	r3, [r5, #0]
 801d2e4:	f7f3 f809 	bl	80102fa <_close>
 801d2e8:	1c43      	adds	r3, r0, #1
 801d2ea:	d102      	bne.n	801d2f2 <_close_r+0x1a>
 801d2ec:	682b      	ldr	r3, [r5, #0]
 801d2ee:	b103      	cbz	r3, 801d2f2 <_close_r+0x1a>
 801d2f0:	6023      	str	r3, [r4, #0]
 801d2f2:	bd38      	pop	{r3, r4, r5, pc}
 801d2f4:	200016d4 	.word	0x200016d4

0801d2f8 <_lseek_r>:
 801d2f8:	b538      	push	{r3, r4, r5, lr}
 801d2fa:	4d07      	ldr	r5, [pc, #28]	; (801d318 <_lseek_r+0x20>)
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	4608      	mov	r0, r1
 801d300:	4611      	mov	r1, r2
 801d302:	2200      	movs	r2, #0
 801d304:	602a      	str	r2, [r5, #0]
 801d306:	461a      	mov	r2, r3
 801d308:	f7f3 f81e 	bl	8010348 <_lseek>
 801d30c:	1c43      	adds	r3, r0, #1
 801d30e:	d102      	bne.n	801d316 <_lseek_r+0x1e>
 801d310:	682b      	ldr	r3, [r5, #0]
 801d312:	b103      	cbz	r3, 801d316 <_lseek_r+0x1e>
 801d314:	6023      	str	r3, [r4, #0]
 801d316:	bd38      	pop	{r3, r4, r5, pc}
 801d318:	200016d4 	.word	0x200016d4

0801d31c <_read_r>:
 801d31c:	b538      	push	{r3, r4, r5, lr}
 801d31e:	4d07      	ldr	r5, [pc, #28]	; (801d33c <_read_r+0x20>)
 801d320:	4604      	mov	r4, r0
 801d322:	4608      	mov	r0, r1
 801d324:	4611      	mov	r1, r2
 801d326:	2200      	movs	r2, #0
 801d328:	602a      	str	r2, [r5, #0]
 801d32a:	461a      	mov	r2, r3
 801d32c:	f7f2 ffac 	bl	8010288 <_read>
 801d330:	1c43      	adds	r3, r0, #1
 801d332:	d102      	bne.n	801d33a <_read_r+0x1e>
 801d334:	682b      	ldr	r3, [r5, #0]
 801d336:	b103      	cbz	r3, 801d33a <_read_r+0x1e>
 801d338:	6023      	str	r3, [r4, #0]
 801d33a:	bd38      	pop	{r3, r4, r5, pc}
 801d33c:	200016d4 	.word	0x200016d4

0801d340 <_kill_r>:
 801d340:	b538      	push	{r3, r4, r5, lr}
 801d342:	4d07      	ldr	r5, [pc, #28]	; (801d360 <_kill_r+0x20>)
 801d344:	2300      	movs	r3, #0
 801d346:	4604      	mov	r4, r0
 801d348:	4608      	mov	r0, r1
 801d34a:	4611      	mov	r1, r2
 801d34c:	602b      	str	r3, [r5, #0]
 801d34e:	f7f2 ff81 	bl	8010254 <_kill>
 801d352:	1c43      	adds	r3, r0, #1
 801d354:	d102      	bne.n	801d35c <_kill_r+0x1c>
 801d356:	682b      	ldr	r3, [r5, #0]
 801d358:	b103      	cbz	r3, 801d35c <_kill_r+0x1c>
 801d35a:	6023      	str	r3, [r4, #0]
 801d35c:	bd38      	pop	{r3, r4, r5, pc}
 801d35e:	bf00      	nop
 801d360:	200016d4 	.word	0x200016d4

0801d364 <_getpid_r>:
 801d364:	f7f2 bf6e 	b.w	8010244 <_getpid>

0801d368 <_sbrk_r>:
 801d368:	b538      	push	{r3, r4, r5, lr}
 801d36a:	4d06      	ldr	r5, [pc, #24]	; (801d384 <_sbrk_r+0x1c>)
 801d36c:	2300      	movs	r3, #0
 801d36e:	4604      	mov	r4, r0
 801d370:	4608      	mov	r0, r1
 801d372:	602b      	str	r3, [r5, #0]
 801d374:	f7f2 fff6 	bl	8010364 <_sbrk>
 801d378:	1c43      	adds	r3, r0, #1
 801d37a:	d102      	bne.n	801d382 <_sbrk_r+0x1a>
 801d37c:	682b      	ldr	r3, [r5, #0]
 801d37e:	b103      	cbz	r3, 801d382 <_sbrk_r+0x1a>
 801d380:	6023      	str	r3, [r4, #0]
 801d382:	bd38      	pop	{r3, r4, r5, pc}
 801d384:	200016d4 	.word	0x200016d4

0801d388 <_write_r>:
 801d388:	b538      	push	{r3, r4, r5, lr}
 801d38a:	4d07      	ldr	r5, [pc, #28]	; (801d3a8 <_write_r+0x20>)
 801d38c:	4604      	mov	r4, r0
 801d38e:	4608      	mov	r0, r1
 801d390:	4611      	mov	r1, r2
 801d392:	2200      	movs	r2, #0
 801d394:	602a      	str	r2, [r5, #0]
 801d396:	461a      	mov	r2, r3
 801d398:	f7f2 ff93 	bl	80102c2 <_write>
 801d39c:	1c43      	adds	r3, r0, #1
 801d39e:	d102      	bne.n	801d3a6 <_write_r+0x1e>
 801d3a0:	682b      	ldr	r3, [r5, #0]
 801d3a2:	b103      	cbz	r3, 801d3a6 <_write_r+0x1e>
 801d3a4:	6023      	str	r3, [r4, #0]
 801d3a6:	bd38      	pop	{r3, r4, r5, pc}
 801d3a8:	200016d4 	.word	0x200016d4

0801d3ac <__errno>:
 801d3ac:	4b01      	ldr	r3, [pc, #4]	; (801d3b4 <__errno+0x8>)
 801d3ae:	6818      	ldr	r0, [r3, #0]
 801d3b0:	4770      	bx	lr
 801d3b2:	bf00      	nop
 801d3b4:	20001274 	.word	0x20001274

0801d3b8 <__libc_init_array>:
 801d3b8:	b570      	push	{r4, r5, r6, lr}
 801d3ba:	4d0d      	ldr	r5, [pc, #52]	; (801d3f0 <__libc_init_array+0x38>)
 801d3bc:	4c0d      	ldr	r4, [pc, #52]	; (801d3f4 <__libc_init_array+0x3c>)
 801d3be:	1b64      	subs	r4, r4, r5
 801d3c0:	10a4      	asrs	r4, r4, #2
 801d3c2:	2600      	movs	r6, #0
 801d3c4:	42a6      	cmp	r6, r4
 801d3c6:	d109      	bne.n	801d3dc <__libc_init_array+0x24>
 801d3c8:	4d0b      	ldr	r5, [pc, #44]	; (801d3f8 <__libc_init_array+0x40>)
 801d3ca:	4c0c      	ldr	r4, [pc, #48]	; (801d3fc <__libc_init_array+0x44>)
 801d3cc:	f001 fe96 	bl	801f0fc <_init>
 801d3d0:	1b64      	subs	r4, r4, r5
 801d3d2:	10a4      	asrs	r4, r4, #2
 801d3d4:	2600      	movs	r6, #0
 801d3d6:	42a6      	cmp	r6, r4
 801d3d8:	d105      	bne.n	801d3e6 <__libc_init_array+0x2e>
 801d3da:	bd70      	pop	{r4, r5, r6, pc}
 801d3dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801d3e0:	4798      	blx	r3
 801d3e2:	3601      	adds	r6, #1
 801d3e4:	e7ee      	b.n	801d3c4 <__libc_init_array+0xc>
 801d3e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d3ea:	4798      	blx	r3
 801d3ec:	3601      	adds	r6, #1
 801d3ee:	e7f2      	b.n	801d3d6 <__libc_init_array+0x1e>
 801d3f0:	08028198 	.word	0x08028198
 801d3f4:	08028198 	.word	0x08028198
 801d3f8:	08028198 	.word	0x08028198
 801d3fc:	080281a4 	.word	0x080281a4

0801d400 <__retarget_lock_init_recursive>:
 801d400:	4770      	bx	lr

0801d402 <__retarget_lock_acquire_recursive>:
 801d402:	4770      	bx	lr

0801d404 <__retarget_lock_release_recursive>:
 801d404:	4770      	bx	lr

0801d406 <memcpy>:
 801d406:	440a      	add	r2, r1
 801d408:	4291      	cmp	r1, r2
 801d40a:	f100 33ff 	add.w	r3, r0, #4294967295
 801d40e:	d100      	bne.n	801d412 <memcpy+0xc>
 801d410:	4770      	bx	lr
 801d412:	b510      	push	{r4, lr}
 801d414:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d418:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d41c:	4291      	cmp	r1, r2
 801d41e:	d1f9      	bne.n	801d414 <memcpy+0xe>
 801d420:	bd10      	pop	{r4, pc}
	...

0801d424 <_free_r>:
 801d424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d426:	2900      	cmp	r1, #0
 801d428:	d044      	beq.n	801d4b4 <_free_r+0x90>
 801d42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d42e:	9001      	str	r0, [sp, #4]
 801d430:	2b00      	cmp	r3, #0
 801d432:	f1a1 0404 	sub.w	r4, r1, #4
 801d436:	bfb8      	it	lt
 801d438:	18e4      	addlt	r4, r4, r3
 801d43a:	f7fe ff5b 	bl	801c2f4 <__malloc_lock>
 801d43e:	4a1e      	ldr	r2, [pc, #120]	; (801d4b8 <_free_r+0x94>)
 801d440:	9801      	ldr	r0, [sp, #4]
 801d442:	6813      	ldr	r3, [r2, #0]
 801d444:	b933      	cbnz	r3, 801d454 <_free_r+0x30>
 801d446:	6063      	str	r3, [r4, #4]
 801d448:	6014      	str	r4, [r2, #0]
 801d44a:	b003      	add	sp, #12
 801d44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d450:	f7fe bf56 	b.w	801c300 <__malloc_unlock>
 801d454:	42a3      	cmp	r3, r4
 801d456:	d908      	bls.n	801d46a <_free_r+0x46>
 801d458:	6825      	ldr	r5, [r4, #0]
 801d45a:	1961      	adds	r1, r4, r5
 801d45c:	428b      	cmp	r3, r1
 801d45e:	bf01      	itttt	eq
 801d460:	6819      	ldreq	r1, [r3, #0]
 801d462:	685b      	ldreq	r3, [r3, #4]
 801d464:	1949      	addeq	r1, r1, r5
 801d466:	6021      	streq	r1, [r4, #0]
 801d468:	e7ed      	b.n	801d446 <_free_r+0x22>
 801d46a:	461a      	mov	r2, r3
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	b10b      	cbz	r3, 801d474 <_free_r+0x50>
 801d470:	42a3      	cmp	r3, r4
 801d472:	d9fa      	bls.n	801d46a <_free_r+0x46>
 801d474:	6811      	ldr	r1, [r2, #0]
 801d476:	1855      	adds	r5, r2, r1
 801d478:	42a5      	cmp	r5, r4
 801d47a:	d10b      	bne.n	801d494 <_free_r+0x70>
 801d47c:	6824      	ldr	r4, [r4, #0]
 801d47e:	4421      	add	r1, r4
 801d480:	1854      	adds	r4, r2, r1
 801d482:	42a3      	cmp	r3, r4
 801d484:	6011      	str	r1, [r2, #0]
 801d486:	d1e0      	bne.n	801d44a <_free_r+0x26>
 801d488:	681c      	ldr	r4, [r3, #0]
 801d48a:	685b      	ldr	r3, [r3, #4]
 801d48c:	6053      	str	r3, [r2, #4]
 801d48e:	440c      	add	r4, r1
 801d490:	6014      	str	r4, [r2, #0]
 801d492:	e7da      	b.n	801d44a <_free_r+0x26>
 801d494:	d902      	bls.n	801d49c <_free_r+0x78>
 801d496:	230c      	movs	r3, #12
 801d498:	6003      	str	r3, [r0, #0]
 801d49a:	e7d6      	b.n	801d44a <_free_r+0x26>
 801d49c:	6825      	ldr	r5, [r4, #0]
 801d49e:	1961      	adds	r1, r4, r5
 801d4a0:	428b      	cmp	r3, r1
 801d4a2:	bf04      	itt	eq
 801d4a4:	6819      	ldreq	r1, [r3, #0]
 801d4a6:	685b      	ldreq	r3, [r3, #4]
 801d4a8:	6063      	str	r3, [r4, #4]
 801d4aa:	bf04      	itt	eq
 801d4ac:	1949      	addeq	r1, r1, r5
 801d4ae:	6021      	streq	r1, [r4, #0]
 801d4b0:	6054      	str	r4, [r2, #4]
 801d4b2:	e7ca      	b.n	801d44a <_free_r+0x26>
 801d4b4:	b003      	add	sp, #12
 801d4b6:	bd30      	pop	{r4, r5, pc}
 801d4b8:	20001590 	.word	0x20001590

0801d4bc <rshift>:
 801d4bc:	6903      	ldr	r3, [r0, #16]
 801d4be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d4c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d4c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d4ca:	f100 0414 	add.w	r4, r0, #20
 801d4ce:	dd45      	ble.n	801d55c <rshift+0xa0>
 801d4d0:	f011 011f 	ands.w	r1, r1, #31
 801d4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d4dc:	d10c      	bne.n	801d4f8 <rshift+0x3c>
 801d4de:	f100 0710 	add.w	r7, r0, #16
 801d4e2:	4629      	mov	r1, r5
 801d4e4:	42b1      	cmp	r1, r6
 801d4e6:	d334      	bcc.n	801d552 <rshift+0x96>
 801d4e8:	1a9b      	subs	r3, r3, r2
 801d4ea:	009b      	lsls	r3, r3, #2
 801d4ec:	1eea      	subs	r2, r5, #3
 801d4ee:	4296      	cmp	r6, r2
 801d4f0:	bf38      	it	cc
 801d4f2:	2300      	movcc	r3, #0
 801d4f4:	4423      	add	r3, r4
 801d4f6:	e015      	b.n	801d524 <rshift+0x68>
 801d4f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d4fc:	f1c1 0820 	rsb	r8, r1, #32
 801d500:	40cf      	lsrs	r7, r1
 801d502:	f105 0e04 	add.w	lr, r5, #4
 801d506:	46a1      	mov	r9, r4
 801d508:	4576      	cmp	r6, lr
 801d50a:	46f4      	mov	ip, lr
 801d50c:	d815      	bhi.n	801d53a <rshift+0x7e>
 801d50e:	1a9a      	subs	r2, r3, r2
 801d510:	0092      	lsls	r2, r2, #2
 801d512:	3a04      	subs	r2, #4
 801d514:	3501      	adds	r5, #1
 801d516:	42ae      	cmp	r6, r5
 801d518:	bf38      	it	cc
 801d51a:	2200      	movcc	r2, #0
 801d51c:	18a3      	adds	r3, r4, r2
 801d51e:	50a7      	str	r7, [r4, r2]
 801d520:	b107      	cbz	r7, 801d524 <rshift+0x68>
 801d522:	3304      	adds	r3, #4
 801d524:	1b1a      	subs	r2, r3, r4
 801d526:	42a3      	cmp	r3, r4
 801d528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d52c:	bf08      	it	eq
 801d52e:	2300      	moveq	r3, #0
 801d530:	6102      	str	r2, [r0, #16]
 801d532:	bf08      	it	eq
 801d534:	6143      	streq	r3, [r0, #20]
 801d536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d53a:	f8dc c000 	ldr.w	ip, [ip]
 801d53e:	fa0c fc08 	lsl.w	ip, ip, r8
 801d542:	ea4c 0707 	orr.w	r7, ip, r7
 801d546:	f849 7b04 	str.w	r7, [r9], #4
 801d54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d54e:	40cf      	lsrs	r7, r1
 801d550:	e7da      	b.n	801d508 <rshift+0x4c>
 801d552:	f851 cb04 	ldr.w	ip, [r1], #4
 801d556:	f847 cf04 	str.w	ip, [r7, #4]!
 801d55a:	e7c3      	b.n	801d4e4 <rshift+0x28>
 801d55c:	4623      	mov	r3, r4
 801d55e:	e7e1      	b.n	801d524 <rshift+0x68>

0801d560 <__hexdig_fun>:
 801d560:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d564:	2b09      	cmp	r3, #9
 801d566:	d802      	bhi.n	801d56e <__hexdig_fun+0xe>
 801d568:	3820      	subs	r0, #32
 801d56a:	b2c0      	uxtb	r0, r0
 801d56c:	4770      	bx	lr
 801d56e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d572:	2b05      	cmp	r3, #5
 801d574:	d801      	bhi.n	801d57a <__hexdig_fun+0x1a>
 801d576:	3847      	subs	r0, #71	; 0x47
 801d578:	e7f7      	b.n	801d56a <__hexdig_fun+0xa>
 801d57a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d57e:	2b05      	cmp	r3, #5
 801d580:	d801      	bhi.n	801d586 <__hexdig_fun+0x26>
 801d582:	3827      	subs	r0, #39	; 0x27
 801d584:	e7f1      	b.n	801d56a <__hexdig_fun+0xa>
 801d586:	2000      	movs	r0, #0
 801d588:	4770      	bx	lr
	...

0801d58c <__gethex>:
 801d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d590:	4617      	mov	r7, r2
 801d592:	680a      	ldr	r2, [r1, #0]
 801d594:	b085      	sub	sp, #20
 801d596:	f102 0b02 	add.w	fp, r2, #2
 801d59a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d59e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d5a2:	4681      	mov	r9, r0
 801d5a4:	468a      	mov	sl, r1
 801d5a6:	9302      	str	r3, [sp, #8]
 801d5a8:	32fe      	adds	r2, #254	; 0xfe
 801d5aa:	eb02 030b 	add.w	r3, r2, fp
 801d5ae:	46d8      	mov	r8, fp
 801d5b0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801d5b4:	9301      	str	r3, [sp, #4]
 801d5b6:	2830      	cmp	r0, #48	; 0x30
 801d5b8:	d0f7      	beq.n	801d5aa <__gethex+0x1e>
 801d5ba:	f7ff ffd1 	bl	801d560 <__hexdig_fun>
 801d5be:	4604      	mov	r4, r0
 801d5c0:	2800      	cmp	r0, #0
 801d5c2:	d138      	bne.n	801d636 <__gethex+0xaa>
 801d5c4:	49a7      	ldr	r1, [pc, #668]	; (801d864 <__gethex+0x2d8>)
 801d5c6:	2201      	movs	r2, #1
 801d5c8:	4640      	mov	r0, r8
 801d5ca:	f7ff fe43 	bl	801d254 <strncmp>
 801d5ce:	4606      	mov	r6, r0
 801d5d0:	2800      	cmp	r0, #0
 801d5d2:	d169      	bne.n	801d6a8 <__gethex+0x11c>
 801d5d4:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d5d8:	465d      	mov	r5, fp
 801d5da:	f7ff ffc1 	bl	801d560 <__hexdig_fun>
 801d5de:	2800      	cmp	r0, #0
 801d5e0:	d064      	beq.n	801d6ac <__gethex+0x120>
 801d5e2:	465a      	mov	r2, fp
 801d5e4:	7810      	ldrb	r0, [r2, #0]
 801d5e6:	2830      	cmp	r0, #48	; 0x30
 801d5e8:	4690      	mov	r8, r2
 801d5ea:	f102 0201 	add.w	r2, r2, #1
 801d5ee:	d0f9      	beq.n	801d5e4 <__gethex+0x58>
 801d5f0:	f7ff ffb6 	bl	801d560 <__hexdig_fun>
 801d5f4:	2301      	movs	r3, #1
 801d5f6:	fab0 f480 	clz	r4, r0
 801d5fa:	0964      	lsrs	r4, r4, #5
 801d5fc:	465e      	mov	r6, fp
 801d5fe:	9301      	str	r3, [sp, #4]
 801d600:	4642      	mov	r2, r8
 801d602:	4615      	mov	r5, r2
 801d604:	3201      	adds	r2, #1
 801d606:	7828      	ldrb	r0, [r5, #0]
 801d608:	f7ff ffaa 	bl	801d560 <__hexdig_fun>
 801d60c:	2800      	cmp	r0, #0
 801d60e:	d1f8      	bne.n	801d602 <__gethex+0x76>
 801d610:	4994      	ldr	r1, [pc, #592]	; (801d864 <__gethex+0x2d8>)
 801d612:	2201      	movs	r2, #1
 801d614:	4628      	mov	r0, r5
 801d616:	f7ff fe1d 	bl	801d254 <strncmp>
 801d61a:	b978      	cbnz	r0, 801d63c <__gethex+0xb0>
 801d61c:	b946      	cbnz	r6, 801d630 <__gethex+0xa4>
 801d61e:	1c6e      	adds	r6, r5, #1
 801d620:	4632      	mov	r2, r6
 801d622:	4615      	mov	r5, r2
 801d624:	3201      	adds	r2, #1
 801d626:	7828      	ldrb	r0, [r5, #0]
 801d628:	f7ff ff9a 	bl	801d560 <__hexdig_fun>
 801d62c:	2800      	cmp	r0, #0
 801d62e:	d1f8      	bne.n	801d622 <__gethex+0x96>
 801d630:	1b73      	subs	r3, r6, r5
 801d632:	009e      	lsls	r6, r3, #2
 801d634:	e004      	b.n	801d640 <__gethex+0xb4>
 801d636:	2400      	movs	r4, #0
 801d638:	4626      	mov	r6, r4
 801d63a:	e7e1      	b.n	801d600 <__gethex+0x74>
 801d63c:	2e00      	cmp	r6, #0
 801d63e:	d1f7      	bne.n	801d630 <__gethex+0xa4>
 801d640:	782b      	ldrb	r3, [r5, #0]
 801d642:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d646:	2b50      	cmp	r3, #80	; 0x50
 801d648:	d13d      	bne.n	801d6c6 <__gethex+0x13a>
 801d64a:	786b      	ldrb	r3, [r5, #1]
 801d64c:	2b2b      	cmp	r3, #43	; 0x2b
 801d64e:	d02f      	beq.n	801d6b0 <__gethex+0x124>
 801d650:	2b2d      	cmp	r3, #45	; 0x2d
 801d652:	d031      	beq.n	801d6b8 <__gethex+0x12c>
 801d654:	1c69      	adds	r1, r5, #1
 801d656:	f04f 0b00 	mov.w	fp, #0
 801d65a:	7808      	ldrb	r0, [r1, #0]
 801d65c:	f7ff ff80 	bl	801d560 <__hexdig_fun>
 801d660:	1e42      	subs	r2, r0, #1
 801d662:	b2d2      	uxtb	r2, r2
 801d664:	2a18      	cmp	r2, #24
 801d666:	d82e      	bhi.n	801d6c6 <__gethex+0x13a>
 801d668:	f1a0 0210 	sub.w	r2, r0, #16
 801d66c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d670:	f7ff ff76 	bl	801d560 <__hexdig_fun>
 801d674:	f100 3cff 	add.w	ip, r0, #4294967295
 801d678:	fa5f fc8c 	uxtb.w	ip, ip
 801d67c:	f1bc 0f18 	cmp.w	ip, #24
 801d680:	d91d      	bls.n	801d6be <__gethex+0x132>
 801d682:	f1bb 0f00 	cmp.w	fp, #0
 801d686:	d000      	beq.n	801d68a <__gethex+0xfe>
 801d688:	4252      	negs	r2, r2
 801d68a:	4416      	add	r6, r2
 801d68c:	f8ca 1000 	str.w	r1, [sl]
 801d690:	b1dc      	cbz	r4, 801d6ca <__gethex+0x13e>
 801d692:	9b01      	ldr	r3, [sp, #4]
 801d694:	2b00      	cmp	r3, #0
 801d696:	bf14      	ite	ne
 801d698:	f04f 0800 	movne.w	r8, #0
 801d69c:	f04f 0806 	moveq.w	r8, #6
 801d6a0:	4640      	mov	r0, r8
 801d6a2:	b005      	add	sp, #20
 801d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6a8:	4645      	mov	r5, r8
 801d6aa:	4626      	mov	r6, r4
 801d6ac:	2401      	movs	r4, #1
 801d6ae:	e7c7      	b.n	801d640 <__gethex+0xb4>
 801d6b0:	f04f 0b00 	mov.w	fp, #0
 801d6b4:	1ca9      	adds	r1, r5, #2
 801d6b6:	e7d0      	b.n	801d65a <__gethex+0xce>
 801d6b8:	f04f 0b01 	mov.w	fp, #1
 801d6bc:	e7fa      	b.n	801d6b4 <__gethex+0x128>
 801d6be:	230a      	movs	r3, #10
 801d6c0:	fb03 0002 	mla	r0, r3, r2, r0
 801d6c4:	e7d0      	b.n	801d668 <__gethex+0xdc>
 801d6c6:	4629      	mov	r1, r5
 801d6c8:	e7e0      	b.n	801d68c <__gethex+0x100>
 801d6ca:	eba5 0308 	sub.w	r3, r5, r8
 801d6ce:	3b01      	subs	r3, #1
 801d6d0:	4621      	mov	r1, r4
 801d6d2:	2b07      	cmp	r3, #7
 801d6d4:	dc0a      	bgt.n	801d6ec <__gethex+0x160>
 801d6d6:	4648      	mov	r0, r9
 801d6d8:	f000 fa5a 	bl	801db90 <_Balloc>
 801d6dc:	4604      	mov	r4, r0
 801d6de:	b940      	cbnz	r0, 801d6f2 <__gethex+0x166>
 801d6e0:	4b61      	ldr	r3, [pc, #388]	; (801d868 <__gethex+0x2dc>)
 801d6e2:	4602      	mov	r2, r0
 801d6e4:	21e4      	movs	r1, #228	; 0xe4
 801d6e6:	4861      	ldr	r0, [pc, #388]	; (801d86c <__gethex+0x2e0>)
 801d6e8:	f7fe fd14 	bl	801c114 <__assert_func>
 801d6ec:	3101      	adds	r1, #1
 801d6ee:	105b      	asrs	r3, r3, #1
 801d6f0:	e7ef      	b.n	801d6d2 <__gethex+0x146>
 801d6f2:	f100 0a14 	add.w	sl, r0, #20
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	495a      	ldr	r1, [pc, #360]	; (801d864 <__gethex+0x2d8>)
 801d6fa:	f8cd a004 	str.w	sl, [sp, #4]
 801d6fe:	469b      	mov	fp, r3
 801d700:	45a8      	cmp	r8, r5
 801d702:	d342      	bcc.n	801d78a <__gethex+0x1fe>
 801d704:	9801      	ldr	r0, [sp, #4]
 801d706:	f840 bb04 	str.w	fp, [r0], #4
 801d70a:	eba0 000a 	sub.w	r0, r0, sl
 801d70e:	1080      	asrs	r0, r0, #2
 801d710:	6120      	str	r0, [r4, #16]
 801d712:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801d716:	4658      	mov	r0, fp
 801d718:	f000 fb2c 	bl	801dd74 <__hi0bits>
 801d71c:	683d      	ldr	r5, [r7, #0]
 801d71e:	eba8 0000 	sub.w	r0, r8, r0
 801d722:	42a8      	cmp	r0, r5
 801d724:	dd59      	ble.n	801d7da <__gethex+0x24e>
 801d726:	eba0 0805 	sub.w	r8, r0, r5
 801d72a:	4641      	mov	r1, r8
 801d72c:	4620      	mov	r0, r4
 801d72e:	f000 febb 	bl	801e4a8 <__any_on>
 801d732:	4683      	mov	fp, r0
 801d734:	b1b8      	cbz	r0, 801d766 <__gethex+0x1da>
 801d736:	f108 33ff 	add.w	r3, r8, #4294967295
 801d73a:	1159      	asrs	r1, r3, #5
 801d73c:	f003 021f 	and.w	r2, r3, #31
 801d740:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d744:	f04f 0b01 	mov.w	fp, #1
 801d748:	fa0b f202 	lsl.w	r2, fp, r2
 801d74c:	420a      	tst	r2, r1
 801d74e:	d00a      	beq.n	801d766 <__gethex+0x1da>
 801d750:	455b      	cmp	r3, fp
 801d752:	dd06      	ble.n	801d762 <__gethex+0x1d6>
 801d754:	f1a8 0102 	sub.w	r1, r8, #2
 801d758:	4620      	mov	r0, r4
 801d75a:	f000 fea5 	bl	801e4a8 <__any_on>
 801d75e:	2800      	cmp	r0, #0
 801d760:	d138      	bne.n	801d7d4 <__gethex+0x248>
 801d762:	f04f 0b02 	mov.w	fp, #2
 801d766:	4641      	mov	r1, r8
 801d768:	4620      	mov	r0, r4
 801d76a:	f7ff fea7 	bl	801d4bc <rshift>
 801d76e:	4446      	add	r6, r8
 801d770:	68bb      	ldr	r3, [r7, #8]
 801d772:	42b3      	cmp	r3, r6
 801d774:	da41      	bge.n	801d7fa <__gethex+0x26e>
 801d776:	4621      	mov	r1, r4
 801d778:	4648      	mov	r0, r9
 801d77a:	f000 fa49 	bl	801dc10 <_Bfree>
 801d77e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d780:	2300      	movs	r3, #0
 801d782:	6013      	str	r3, [r2, #0]
 801d784:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801d788:	e78a      	b.n	801d6a0 <__gethex+0x114>
 801d78a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801d78e:	2a2e      	cmp	r2, #46	; 0x2e
 801d790:	d014      	beq.n	801d7bc <__gethex+0x230>
 801d792:	2b20      	cmp	r3, #32
 801d794:	d106      	bne.n	801d7a4 <__gethex+0x218>
 801d796:	9b01      	ldr	r3, [sp, #4]
 801d798:	f843 bb04 	str.w	fp, [r3], #4
 801d79c:	f04f 0b00 	mov.w	fp, #0
 801d7a0:	9301      	str	r3, [sp, #4]
 801d7a2:	465b      	mov	r3, fp
 801d7a4:	7828      	ldrb	r0, [r5, #0]
 801d7a6:	9303      	str	r3, [sp, #12]
 801d7a8:	f7ff feda 	bl	801d560 <__hexdig_fun>
 801d7ac:	9b03      	ldr	r3, [sp, #12]
 801d7ae:	f000 000f 	and.w	r0, r0, #15
 801d7b2:	4098      	lsls	r0, r3
 801d7b4:	ea4b 0b00 	orr.w	fp, fp, r0
 801d7b8:	3304      	adds	r3, #4
 801d7ba:	e7a1      	b.n	801d700 <__gethex+0x174>
 801d7bc:	45a8      	cmp	r8, r5
 801d7be:	d8e8      	bhi.n	801d792 <__gethex+0x206>
 801d7c0:	2201      	movs	r2, #1
 801d7c2:	4628      	mov	r0, r5
 801d7c4:	9303      	str	r3, [sp, #12]
 801d7c6:	f7ff fd45 	bl	801d254 <strncmp>
 801d7ca:	4926      	ldr	r1, [pc, #152]	; (801d864 <__gethex+0x2d8>)
 801d7cc:	9b03      	ldr	r3, [sp, #12]
 801d7ce:	2800      	cmp	r0, #0
 801d7d0:	d1df      	bne.n	801d792 <__gethex+0x206>
 801d7d2:	e795      	b.n	801d700 <__gethex+0x174>
 801d7d4:	f04f 0b03 	mov.w	fp, #3
 801d7d8:	e7c5      	b.n	801d766 <__gethex+0x1da>
 801d7da:	da0b      	bge.n	801d7f4 <__gethex+0x268>
 801d7dc:	eba5 0800 	sub.w	r8, r5, r0
 801d7e0:	4621      	mov	r1, r4
 801d7e2:	4642      	mov	r2, r8
 801d7e4:	4648      	mov	r0, r9
 801d7e6:	f000 fc2d 	bl	801e044 <__lshift>
 801d7ea:	eba6 0608 	sub.w	r6, r6, r8
 801d7ee:	4604      	mov	r4, r0
 801d7f0:	f100 0a14 	add.w	sl, r0, #20
 801d7f4:	f04f 0b00 	mov.w	fp, #0
 801d7f8:	e7ba      	b.n	801d770 <__gethex+0x1e4>
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	42b3      	cmp	r3, r6
 801d7fe:	dd73      	ble.n	801d8e8 <__gethex+0x35c>
 801d800:	1b9e      	subs	r6, r3, r6
 801d802:	42b5      	cmp	r5, r6
 801d804:	dc34      	bgt.n	801d870 <__gethex+0x2e4>
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	2b02      	cmp	r3, #2
 801d80a:	d023      	beq.n	801d854 <__gethex+0x2c8>
 801d80c:	2b03      	cmp	r3, #3
 801d80e:	d025      	beq.n	801d85c <__gethex+0x2d0>
 801d810:	2b01      	cmp	r3, #1
 801d812:	d115      	bne.n	801d840 <__gethex+0x2b4>
 801d814:	42b5      	cmp	r5, r6
 801d816:	d113      	bne.n	801d840 <__gethex+0x2b4>
 801d818:	2d01      	cmp	r5, #1
 801d81a:	d10b      	bne.n	801d834 <__gethex+0x2a8>
 801d81c:	9a02      	ldr	r2, [sp, #8]
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	6013      	str	r3, [r2, #0]
 801d822:	2301      	movs	r3, #1
 801d824:	6123      	str	r3, [r4, #16]
 801d826:	f8ca 3000 	str.w	r3, [sl]
 801d82a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d82c:	f04f 0862 	mov.w	r8, #98	; 0x62
 801d830:	601c      	str	r4, [r3, #0]
 801d832:	e735      	b.n	801d6a0 <__gethex+0x114>
 801d834:	1e69      	subs	r1, r5, #1
 801d836:	4620      	mov	r0, r4
 801d838:	f000 fe36 	bl	801e4a8 <__any_on>
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d1ed      	bne.n	801d81c <__gethex+0x290>
 801d840:	4621      	mov	r1, r4
 801d842:	4648      	mov	r0, r9
 801d844:	f000 f9e4 	bl	801dc10 <_Bfree>
 801d848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d84a:	2300      	movs	r3, #0
 801d84c:	6013      	str	r3, [r2, #0]
 801d84e:	f04f 0850 	mov.w	r8, #80	; 0x50
 801d852:	e725      	b.n	801d6a0 <__gethex+0x114>
 801d854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d856:	2b00      	cmp	r3, #0
 801d858:	d1f2      	bne.n	801d840 <__gethex+0x2b4>
 801d85a:	e7df      	b.n	801d81c <__gethex+0x290>
 801d85c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d1dc      	bne.n	801d81c <__gethex+0x290>
 801d862:	e7ed      	b.n	801d840 <__gethex+0x2b4>
 801d864:	08027e0c 	.word	0x08027e0c
 801d868:	08027f79 	.word	0x08027f79
 801d86c:	08027f8a 	.word	0x08027f8a
 801d870:	f106 38ff 	add.w	r8, r6, #4294967295
 801d874:	f1bb 0f00 	cmp.w	fp, #0
 801d878:	d133      	bne.n	801d8e2 <__gethex+0x356>
 801d87a:	f1b8 0f00 	cmp.w	r8, #0
 801d87e:	d004      	beq.n	801d88a <__gethex+0x2fe>
 801d880:	4641      	mov	r1, r8
 801d882:	4620      	mov	r0, r4
 801d884:	f000 fe10 	bl	801e4a8 <__any_on>
 801d888:	4683      	mov	fp, r0
 801d88a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801d88e:	2301      	movs	r3, #1
 801d890:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d894:	f008 081f 	and.w	r8, r8, #31
 801d898:	fa03 f308 	lsl.w	r3, r3, r8
 801d89c:	4213      	tst	r3, r2
 801d89e:	4631      	mov	r1, r6
 801d8a0:	4620      	mov	r0, r4
 801d8a2:	bf18      	it	ne
 801d8a4:	f04b 0b02 	orrne.w	fp, fp, #2
 801d8a8:	1bad      	subs	r5, r5, r6
 801d8aa:	f7ff fe07 	bl	801d4bc <rshift>
 801d8ae:	687e      	ldr	r6, [r7, #4]
 801d8b0:	f04f 0802 	mov.w	r8, #2
 801d8b4:	f1bb 0f00 	cmp.w	fp, #0
 801d8b8:	d04a      	beq.n	801d950 <__gethex+0x3c4>
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	2b02      	cmp	r3, #2
 801d8be:	d016      	beq.n	801d8ee <__gethex+0x362>
 801d8c0:	2b03      	cmp	r3, #3
 801d8c2:	d018      	beq.n	801d8f6 <__gethex+0x36a>
 801d8c4:	2b01      	cmp	r3, #1
 801d8c6:	d109      	bne.n	801d8dc <__gethex+0x350>
 801d8c8:	f01b 0f02 	tst.w	fp, #2
 801d8cc:	d006      	beq.n	801d8dc <__gethex+0x350>
 801d8ce:	f8da 3000 	ldr.w	r3, [sl]
 801d8d2:	ea4b 0b03 	orr.w	fp, fp, r3
 801d8d6:	f01b 0f01 	tst.w	fp, #1
 801d8da:	d10f      	bne.n	801d8fc <__gethex+0x370>
 801d8dc:	f048 0810 	orr.w	r8, r8, #16
 801d8e0:	e036      	b.n	801d950 <__gethex+0x3c4>
 801d8e2:	f04f 0b01 	mov.w	fp, #1
 801d8e6:	e7d0      	b.n	801d88a <__gethex+0x2fe>
 801d8e8:	f04f 0801 	mov.w	r8, #1
 801d8ec:	e7e2      	b.n	801d8b4 <__gethex+0x328>
 801d8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8f0:	f1c3 0301 	rsb	r3, r3, #1
 801d8f4:	930f      	str	r3, [sp, #60]	; 0x3c
 801d8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d0ef      	beq.n	801d8dc <__gethex+0x350>
 801d8fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d900:	f104 0214 	add.w	r2, r4, #20
 801d904:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801d908:	9301      	str	r3, [sp, #4]
 801d90a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801d90e:	2300      	movs	r3, #0
 801d910:	4694      	mov	ip, r2
 801d912:	f852 1b04 	ldr.w	r1, [r2], #4
 801d916:	f1b1 3fff 	cmp.w	r1, #4294967295
 801d91a:	d01e      	beq.n	801d95a <__gethex+0x3ce>
 801d91c:	3101      	adds	r1, #1
 801d91e:	f8cc 1000 	str.w	r1, [ip]
 801d922:	f1b8 0f02 	cmp.w	r8, #2
 801d926:	f104 0214 	add.w	r2, r4, #20
 801d92a:	d13d      	bne.n	801d9a8 <__gethex+0x41c>
 801d92c:	683b      	ldr	r3, [r7, #0]
 801d92e:	3b01      	subs	r3, #1
 801d930:	42ab      	cmp	r3, r5
 801d932:	d10b      	bne.n	801d94c <__gethex+0x3c0>
 801d934:	1169      	asrs	r1, r5, #5
 801d936:	2301      	movs	r3, #1
 801d938:	f005 051f 	and.w	r5, r5, #31
 801d93c:	fa03 f505 	lsl.w	r5, r3, r5
 801d940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d944:	421d      	tst	r5, r3
 801d946:	bf18      	it	ne
 801d948:	f04f 0801 	movne.w	r8, #1
 801d94c:	f048 0820 	orr.w	r8, r8, #32
 801d950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d952:	601c      	str	r4, [r3, #0]
 801d954:	9b02      	ldr	r3, [sp, #8]
 801d956:	601e      	str	r6, [r3, #0]
 801d958:	e6a2      	b.n	801d6a0 <__gethex+0x114>
 801d95a:	4290      	cmp	r0, r2
 801d95c:	f842 3c04 	str.w	r3, [r2, #-4]
 801d960:	d8d6      	bhi.n	801d910 <__gethex+0x384>
 801d962:	68a2      	ldr	r2, [r4, #8]
 801d964:	4593      	cmp	fp, r2
 801d966:	db17      	blt.n	801d998 <__gethex+0x40c>
 801d968:	6861      	ldr	r1, [r4, #4]
 801d96a:	4648      	mov	r0, r9
 801d96c:	3101      	adds	r1, #1
 801d96e:	f000 f90f 	bl	801db90 <_Balloc>
 801d972:	4682      	mov	sl, r0
 801d974:	b918      	cbnz	r0, 801d97e <__gethex+0x3f2>
 801d976:	4b1b      	ldr	r3, [pc, #108]	; (801d9e4 <__gethex+0x458>)
 801d978:	4602      	mov	r2, r0
 801d97a:	2184      	movs	r1, #132	; 0x84
 801d97c:	e6b3      	b.n	801d6e6 <__gethex+0x15a>
 801d97e:	6922      	ldr	r2, [r4, #16]
 801d980:	3202      	adds	r2, #2
 801d982:	f104 010c 	add.w	r1, r4, #12
 801d986:	0092      	lsls	r2, r2, #2
 801d988:	300c      	adds	r0, #12
 801d98a:	f7ff fd3c 	bl	801d406 <memcpy>
 801d98e:	4621      	mov	r1, r4
 801d990:	4648      	mov	r0, r9
 801d992:	f000 f93d 	bl	801dc10 <_Bfree>
 801d996:	4654      	mov	r4, sl
 801d998:	6922      	ldr	r2, [r4, #16]
 801d99a:	1c51      	adds	r1, r2, #1
 801d99c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d9a0:	6121      	str	r1, [r4, #16]
 801d9a2:	2101      	movs	r1, #1
 801d9a4:	6151      	str	r1, [r2, #20]
 801d9a6:	e7bc      	b.n	801d922 <__gethex+0x396>
 801d9a8:	6921      	ldr	r1, [r4, #16]
 801d9aa:	4559      	cmp	r1, fp
 801d9ac:	dd0b      	ble.n	801d9c6 <__gethex+0x43a>
 801d9ae:	2101      	movs	r1, #1
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	f7ff fd83 	bl	801d4bc <rshift>
 801d9b6:	68bb      	ldr	r3, [r7, #8]
 801d9b8:	3601      	adds	r6, #1
 801d9ba:	42b3      	cmp	r3, r6
 801d9bc:	f6ff aedb 	blt.w	801d776 <__gethex+0x1ea>
 801d9c0:	f04f 0801 	mov.w	r8, #1
 801d9c4:	e7c2      	b.n	801d94c <__gethex+0x3c0>
 801d9c6:	f015 051f 	ands.w	r5, r5, #31
 801d9ca:	d0f9      	beq.n	801d9c0 <__gethex+0x434>
 801d9cc:	9b01      	ldr	r3, [sp, #4]
 801d9ce:	441a      	add	r2, r3
 801d9d0:	f1c5 0520 	rsb	r5, r5, #32
 801d9d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801d9d8:	f000 f9cc 	bl	801dd74 <__hi0bits>
 801d9dc:	42a8      	cmp	r0, r5
 801d9de:	dbe6      	blt.n	801d9ae <__gethex+0x422>
 801d9e0:	e7ee      	b.n	801d9c0 <__gethex+0x434>
 801d9e2:	bf00      	nop
 801d9e4:	08027f79 	.word	0x08027f79

0801d9e8 <L_shift>:
 801d9e8:	f1c2 0208 	rsb	r2, r2, #8
 801d9ec:	0092      	lsls	r2, r2, #2
 801d9ee:	b570      	push	{r4, r5, r6, lr}
 801d9f0:	f1c2 0620 	rsb	r6, r2, #32
 801d9f4:	6843      	ldr	r3, [r0, #4]
 801d9f6:	6804      	ldr	r4, [r0, #0]
 801d9f8:	fa03 f506 	lsl.w	r5, r3, r6
 801d9fc:	432c      	orrs	r4, r5
 801d9fe:	40d3      	lsrs	r3, r2
 801da00:	6004      	str	r4, [r0, #0]
 801da02:	f840 3f04 	str.w	r3, [r0, #4]!
 801da06:	4288      	cmp	r0, r1
 801da08:	d3f4      	bcc.n	801d9f4 <L_shift+0xc>
 801da0a:	bd70      	pop	{r4, r5, r6, pc}

0801da0c <__match>:
 801da0c:	b530      	push	{r4, r5, lr}
 801da0e:	6803      	ldr	r3, [r0, #0]
 801da10:	3301      	adds	r3, #1
 801da12:	f811 4b01 	ldrb.w	r4, [r1], #1
 801da16:	b914      	cbnz	r4, 801da1e <__match+0x12>
 801da18:	6003      	str	r3, [r0, #0]
 801da1a:	2001      	movs	r0, #1
 801da1c:	bd30      	pop	{r4, r5, pc}
 801da1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801da26:	2d19      	cmp	r5, #25
 801da28:	bf98      	it	ls
 801da2a:	3220      	addls	r2, #32
 801da2c:	42a2      	cmp	r2, r4
 801da2e:	d0f0      	beq.n	801da12 <__match+0x6>
 801da30:	2000      	movs	r0, #0
 801da32:	e7f3      	b.n	801da1c <__match+0x10>

0801da34 <__hexnan>:
 801da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da38:	680b      	ldr	r3, [r1, #0]
 801da3a:	6801      	ldr	r1, [r0, #0]
 801da3c:	115e      	asrs	r6, r3, #5
 801da3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801da42:	f013 031f 	ands.w	r3, r3, #31
 801da46:	b087      	sub	sp, #28
 801da48:	bf18      	it	ne
 801da4a:	3604      	addne	r6, #4
 801da4c:	2500      	movs	r5, #0
 801da4e:	1f37      	subs	r7, r6, #4
 801da50:	4682      	mov	sl, r0
 801da52:	4690      	mov	r8, r2
 801da54:	9301      	str	r3, [sp, #4]
 801da56:	f846 5c04 	str.w	r5, [r6, #-4]
 801da5a:	46b9      	mov	r9, r7
 801da5c:	463c      	mov	r4, r7
 801da5e:	9502      	str	r5, [sp, #8]
 801da60:	46ab      	mov	fp, r5
 801da62:	784a      	ldrb	r2, [r1, #1]
 801da64:	1c4b      	adds	r3, r1, #1
 801da66:	9303      	str	r3, [sp, #12]
 801da68:	b342      	cbz	r2, 801dabc <__hexnan+0x88>
 801da6a:	4610      	mov	r0, r2
 801da6c:	9105      	str	r1, [sp, #20]
 801da6e:	9204      	str	r2, [sp, #16]
 801da70:	f7ff fd76 	bl	801d560 <__hexdig_fun>
 801da74:	2800      	cmp	r0, #0
 801da76:	d14f      	bne.n	801db18 <__hexnan+0xe4>
 801da78:	9a04      	ldr	r2, [sp, #16]
 801da7a:	9905      	ldr	r1, [sp, #20]
 801da7c:	2a20      	cmp	r2, #32
 801da7e:	d818      	bhi.n	801dab2 <__hexnan+0x7e>
 801da80:	9b02      	ldr	r3, [sp, #8]
 801da82:	459b      	cmp	fp, r3
 801da84:	dd13      	ble.n	801daae <__hexnan+0x7a>
 801da86:	454c      	cmp	r4, r9
 801da88:	d206      	bcs.n	801da98 <__hexnan+0x64>
 801da8a:	2d07      	cmp	r5, #7
 801da8c:	dc04      	bgt.n	801da98 <__hexnan+0x64>
 801da8e:	462a      	mov	r2, r5
 801da90:	4649      	mov	r1, r9
 801da92:	4620      	mov	r0, r4
 801da94:	f7ff ffa8 	bl	801d9e8 <L_shift>
 801da98:	4544      	cmp	r4, r8
 801da9a:	d950      	bls.n	801db3e <__hexnan+0x10a>
 801da9c:	2300      	movs	r3, #0
 801da9e:	f1a4 0904 	sub.w	r9, r4, #4
 801daa2:	f844 3c04 	str.w	r3, [r4, #-4]
 801daa6:	f8cd b008 	str.w	fp, [sp, #8]
 801daaa:	464c      	mov	r4, r9
 801daac:	461d      	mov	r5, r3
 801daae:	9903      	ldr	r1, [sp, #12]
 801dab0:	e7d7      	b.n	801da62 <__hexnan+0x2e>
 801dab2:	2a29      	cmp	r2, #41	; 0x29
 801dab4:	d155      	bne.n	801db62 <__hexnan+0x12e>
 801dab6:	3102      	adds	r1, #2
 801dab8:	f8ca 1000 	str.w	r1, [sl]
 801dabc:	f1bb 0f00 	cmp.w	fp, #0
 801dac0:	d04f      	beq.n	801db62 <__hexnan+0x12e>
 801dac2:	454c      	cmp	r4, r9
 801dac4:	d206      	bcs.n	801dad4 <__hexnan+0xa0>
 801dac6:	2d07      	cmp	r5, #7
 801dac8:	dc04      	bgt.n	801dad4 <__hexnan+0xa0>
 801daca:	462a      	mov	r2, r5
 801dacc:	4649      	mov	r1, r9
 801dace:	4620      	mov	r0, r4
 801dad0:	f7ff ff8a 	bl	801d9e8 <L_shift>
 801dad4:	4544      	cmp	r4, r8
 801dad6:	d934      	bls.n	801db42 <__hexnan+0x10e>
 801dad8:	f1a8 0204 	sub.w	r2, r8, #4
 801dadc:	4623      	mov	r3, r4
 801dade:	f853 1b04 	ldr.w	r1, [r3], #4
 801dae2:	f842 1f04 	str.w	r1, [r2, #4]!
 801dae6:	429f      	cmp	r7, r3
 801dae8:	d2f9      	bcs.n	801dade <__hexnan+0xaa>
 801daea:	1b3b      	subs	r3, r7, r4
 801daec:	f023 0303 	bic.w	r3, r3, #3
 801daf0:	3304      	adds	r3, #4
 801daf2:	3e03      	subs	r6, #3
 801daf4:	3401      	adds	r4, #1
 801daf6:	42a6      	cmp	r6, r4
 801daf8:	bf38      	it	cc
 801dafa:	2304      	movcc	r3, #4
 801dafc:	4443      	add	r3, r8
 801dafe:	2200      	movs	r2, #0
 801db00:	f843 2b04 	str.w	r2, [r3], #4
 801db04:	429f      	cmp	r7, r3
 801db06:	d2fb      	bcs.n	801db00 <__hexnan+0xcc>
 801db08:	683b      	ldr	r3, [r7, #0]
 801db0a:	b91b      	cbnz	r3, 801db14 <__hexnan+0xe0>
 801db0c:	4547      	cmp	r7, r8
 801db0e:	d126      	bne.n	801db5e <__hexnan+0x12a>
 801db10:	2301      	movs	r3, #1
 801db12:	603b      	str	r3, [r7, #0]
 801db14:	2005      	movs	r0, #5
 801db16:	e025      	b.n	801db64 <__hexnan+0x130>
 801db18:	3501      	adds	r5, #1
 801db1a:	2d08      	cmp	r5, #8
 801db1c:	f10b 0b01 	add.w	fp, fp, #1
 801db20:	dd06      	ble.n	801db30 <__hexnan+0xfc>
 801db22:	4544      	cmp	r4, r8
 801db24:	d9c3      	bls.n	801daae <__hexnan+0x7a>
 801db26:	2300      	movs	r3, #0
 801db28:	f844 3c04 	str.w	r3, [r4, #-4]
 801db2c:	2501      	movs	r5, #1
 801db2e:	3c04      	subs	r4, #4
 801db30:	6822      	ldr	r2, [r4, #0]
 801db32:	f000 000f 	and.w	r0, r0, #15
 801db36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801db3a:	6020      	str	r0, [r4, #0]
 801db3c:	e7b7      	b.n	801daae <__hexnan+0x7a>
 801db3e:	2508      	movs	r5, #8
 801db40:	e7b5      	b.n	801daae <__hexnan+0x7a>
 801db42:	9b01      	ldr	r3, [sp, #4]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d0df      	beq.n	801db08 <__hexnan+0xd4>
 801db48:	f1c3 0320 	rsb	r3, r3, #32
 801db4c:	f04f 32ff 	mov.w	r2, #4294967295
 801db50:	40da      	lsrs	r2, r3
 801db52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801db56:	4013      	ands	r3, r2
 801db58:	f846 3c04 	str.w	r3, [r6, #-4]
 801db5c:	e7d4      	b.n	801db08 <__hexnan+0xd4>
 801db5e:	3f04      	subs	r7, #4
 801db60:	e7d2      	b.n	801db08 <__hexnan+0xd4>
 801db62:	2004      	movs	r0, #4
 801db64:	b007      	add	sp, #28
 801db66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db6a <__ascii_mbtowc>:
 801db6a:	b082      	sub	sp, #8
 801db6c:	b901      	cbnz	r1, 801db70 <__ascii_mbtowc+0x6>
 801db6e:	a901      	add	r1, sp, #4
 801db70:	b142      	cbz	r2, 801db84 <__ascii_mbtowc+0x1a>
 801db72:	b14b      	cbz	r3, 801db88 <__ascii_mbtowc+0x1e>
 801db74:	7813      	ldrb	r3, [r2, #0]
 801db76:	600b      	str	r3, [r1, #0]
 801db78:	7812      	ldrb	r2, [r2, #0]
 801db7a:	1e10      	subs	r0, r2, #0
 801db7c:	bf18      	it	ne
 801db7e:	2001      	movne	r0, #1
 801db80:	b002      	add	sp, #8
 801db82:	4770      	bx	lr
 801db84:	4610      	mov	r0, r2
 801db86:	e7fb      	b.n	801db80 <__ascii_mbtowc+0x16>
 801db88:	f06f 0001 	mvn.w	r0, #1
 801db8c:	e7f8      	b.n	801db80 <__ascii_mbtowc+0x16>
	...

0801db90 <_Balloc>:
 801db90:	b570      	push	{r4, r5, r6, lr}
 801db92:	69c6      	ldr	r6, [r0, #28]
 801db94:	4604      	mov	r4, r0
 801db96:	460d      	mov	r5, r1
 801db98:	b976      	cbnz	r6, 801dbb8 <_Balloc+0x28>
 801db9a:	2010      	movs	r0, #16
 801db9c:	f7fe fafa 	bl	801c194 <malloc>
 801dba0:	4602      	mov	r2, r0
 801dba2:	61e0      	str	r0, [r4, #28]
 801dba4:	b920      	cbnz	r0, 801dbb0 <_Balloc+0x20>
 801dba6:	4b18      	ldr	r3, [pc, #96]	; (801dc08 <_Balloc+0x78>)
 801dba8:	4818      	ldr	r0, [pc, #96]	; (801dc0c <_Balloc+0x7c>)
 801dbaa:	216b      	movs	r1, #107	; 0x6b
 801dbac:	f7fe fab2 	bl	801c114 <__assert_func>
 801dbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dbb4:	6006      	str	r6, [r0, #0]
 801dbb6:	60c6      	str	r6, [r0, #12]
 801dbb8:	69e6      	ldr	r6, [r4, #28]
 801dbba:	68f3      	ldr	r3, [r6, #12]
 801dbbc:	b183      	cbz	r3, 801dbe0 <_Balloc+0x50>
 801dbbe:	69e3      	ldr	r3, [r4, #28]
 801dbc0:	68db      	ldr	r3, [r3, #12]
 801dbc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dbc6:	b9b8      	cbnz	r0, 801dbf8 <_Balloc+0x68>
 801dbc8:	2101      	movs	r1, #1
 801dbca:	fa01 f605 	lsl.w	r6, r1, r5
 801dbce:	1d72      	adds	r2, r6, #5
 801dbd0:	0092      	lsls	r2, r2, #2
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f7fe fac8 	bl	801c168 <_calloc_r>
 801dbd8:	b160      	cbz	r0, 801dbf4 <_Balloc+0x64>
 801dbda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dbde:	e00e      	b.n	801dbfe <_Balloc+0x6e>
 801dbe0:	2221      	movs	r2, #33	; 0x21
 801dbe2:	2104      	movs	r1, #4
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f7fe fabf 	bl	801c168 <_calloc_r>
 801dbea:	69e3      	ldr	r3, [r4, #28]
 801dbec:	60f0      	str	r0, [r6, #12]
 801dbee:	68db      	ldr	r3, [r3, #12]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d1e4      	bne.n	801dbbe <_Balloc+0x2e>
 801dbf4:	2000      	movs	r0, #0
 801dbf6:	bd70      	pop	{r4, r5, r6, pc}
 801dbf8:	6802      	ldr	r2, [r0, #0]
 801dbfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dbfe:	2300      	movs	r3, #0
 801dc00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dc04:	e7f7      	b.n	801dbf6 <_Balloc+0x66>
 801dc06:	bf00      	nop
 801dc08:	08027fea 	.word	0x08027fea
 801dc0c:	08028001 	.word	0x08028001

0801dc10 <_Bfree>:
 801dc10:	b570      	push	{r4, r5, r6, lr}
 801dc12:	69c6      	ldr	r6, [r0, #28]
 801dc14:	4605      	mov	r5, r0
 801dc16:	460c      	mov	r4, r1
 801dc18:	b976      	cbnz	r6, 801dc38 <_Bfree+0x28>
 801dc1a:	2010      	movs	r0, #16
 801dc1c:	f7fe faba 	bl	801c194 <malloc>
 801dc20:	4602      	mov	r2, r0
 801dc22:	61e8      	str	r0, [r5, #28]
 801dc24:	b920      	cbnz	r0, 801dc30 <_Bfree+0x20>
 801dc26:	4b09      	ldr	r3, [pc, #36]	; (801dc4c <_Bfree+0x3c>)
 801dc28:	4809      	ldr	r0, [pc, #36]	; (801dc50 <_Bfree+0x40>)
 801dc2a:	218f      	movs	r1, #143	; 0x8f
 801dc2c:	f7fe fa72 	bl	801c114 <__assert_func>
 801dc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dc34:	6006      	str	r6, [r0, #0]
 801dc36:	60c6      	str	r6, [r0, #12]
 801dc38:	b13c      	cbz	r4, 801dc4a <_Bfree+0x3a>
 801dc3a:	69eb      	ldr	r3, [r5, #28]
 801dc3c:	6862      	ldr	r2, [r4, #4]
 801dc3e:	68db      	ldr	r3, [r3, #12]
 801dc40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dc44:	6021      	str	r1, [r4, #0]
 801dc46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dc4a:	bd70      	pop	{r4, r5, r6, pc}
 801dc4c:	08027fea 	.word	0x08027fea
 801dc50:	08028001 	.word	0x08028001

0801dc54 <__multadd>:
 801dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc58:	690d      	ldr	r5, [r1, #16]
 801dc5a:	4607      	mov	r7, r0
 801dc5c:	460c      	mov	r4, r1
 801dc5e:	461e      	mov	r6, r3
 801dc60:	f101 0c14 	add.w	ip, r1, #20
 801dc64:	2000      	movs	r0, #0
 801dc66:	f8dc 3000 	ldr.w	r3, [ip]
 801dc6a:	b299      	uxth	r1, r3
 801dc6c:	fb02 6101 	mla	r1, r2, r1, r6
 801dc70:	0c1e      	lsrs	r6, r3, #16
 801dc72:	0c0b      	lsrs	r3, r1, #16
 801dc74:	fb02 3306 	mla	r3, r2, r6, r3
 801dc78:	b289      	uxth	r1, r1
 801dc7a:	3001      	adds	r0, #1
 801dc7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dc80:	4285      	cmp	r5, r0
 801dc82:	f84c 1b04 	str.w	r1, [ip], #4
 801dc86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dc8a:	dcec      	bgt.n	801dc66 <__multadd+0x12>
 801dc8c:	b30e      	cbz	r6, 801dcd2 <__multadd+0x7e>
 801dc8e:	68a3      	ldr	r3, [r4, #8]
 801dc90:	42ab      	cmp	r3, r5
 801dc92:	dc19      	bgt.n	801dcc8 <__multadd+0x74>
 801dc94:	6861      	ldr	r1, [r4, #4]
 801dc96:	4638      	mov	r0, r7
 801dc98:	3101      	adds	r1, #1
 801dc9a:	f7ff ff79 	bl	801db90 <_Balloc>
 801dc9e:	4680      	mov	r8, r0
 801dca0:	b928      	cbnz	r0, 801dcae <__multadd+0x5a>
 801dca2:	4602      	mov	r2, r0
 801dca4:	4b0c      	ldr	r3, [pc, #48]	; (801dcd8 <__multadd+0x84>)
 801dca6:	480d      	ldr	r0, [pc, #52]	; (801dcdc <__multadd+0x88>)
 801dca8:	21ba      	movs	r1, #186	; 0xba
 801dcaa:	f7fe fa33 	bl	801c114 <__assert_func>
 801dcae:	6922      	ldr	r2, [r4, #16]
 801dcb0:	3202      	adds	r2, #2
 801dcb2:	f104 010c 	add.w	r1, r4, #12
 801dcb6:	0092      	lsls	r2, r2, #2
 801dcb8:	300c      	adds	r0, #12
 801dcba:	f7ff fba4 	bl	801d406 <memcpy>
 801dcbe:	4621      	mov	r1, r4
 801dcc0:	4638      	mov	r0, r7
 801dcc2:	f7ff ffa5 	bl	801dc10 <_Bfree>
 801dcc6:	4644      	mov	r4, r8
 801dcc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dccc:	3501      	adds	r5, #1
 801dcce:	615e      	str	r6, [r3, #20]
 801dcd0:	6125      	str	r5, [r4, #16]
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcd8:	08027f79 	.word	0x08027f79
 801dcdc:	08028001 	.word	0x08028001

0801dce0 <__s2b>:
 801dce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dce4:	460c      	mov	r4, r1
 801dce6:	4615      	mov	r5, r2
 801dce8:	461f      	mov	r7, r3
 801dcea:	2209      	movs	r2, #9
 801dcec:	3308      	adds	r3, #8
 801dcee:	4606      	mov	r6, r0
 801dcf0:	fb93 f3f2 	sdiv	r3, r3, r2
 801dcf4:	2100      	movs	r1, #0
 801dcf6:	2201      	movs	r2, #1
 801dcf8:	429a      	cmp	r2, r3
 801dcfa:	db09      	blt.n	801dd10 <__s2b+0x30>
 801dcfc:	4630      	mov	r0, r6
 801dcfe:	f7ff ff47 	bl	801db90 <_Balloc>
 801dd02:	b940      	cbnz	r0, 801dd16 <__s2b+0x36>
 801dd04:	4602      	mov	r2, r0
 801dd06:	4b19      	ldr	r3, [pc, #100]	; (801dd6c <__s2b+0x8c>)
 801dd08:	4819      	ldr	r0, [pc, #100]	; (801dd70 <__s2b+0x90>)
 801dd0a:	21d3      	movs	r1, #211	; 0xd3
 801dd0c:	f7fe fa02 	bl	801c114 <__assert_func>
 801dd10:	0052      	lsls	r2, r2, #1
 801dd12:	3101      	adds	r1, #1
 801dd14:	e7f0      	b.n	801dcf8 <__s2b+0x18>
 801dd16:	9b08      	ldr	r3, [sp, #32]
 801dd18:	6143      	str	r3, [r0, #20]
 801dd1a:	2d09      	cmp	r5, #9
 801dd1c:	f04f 0301 	mov.w	r3, #1
 801dd20:	6103      	str	r3, [r0, #16]
 801dd22:	dd16      	ble.n	801dd52 <__s2b+0x72>
 801dd24:	f104 0909 	add.w	r9, r4, #9
 801dd28:	46c8      	mov	r8, r9
 801dd2a:	442c      	add	r4, r5
 801dd2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dd30:	4601      	mov	r1, r0
 801dd32:	3b30      	subs	r3, #48	; 0x30
 801dd34:	220a      	movs	r2, #10
 801dd36:	4630      	mov	r0, r6
 801dd38:	f7ff ff8c 	bl	801dc54 <__multadd>
 801dd3c:	45a0      	cmp	r8, r4
 801dd3e:	d1f5      	bne.n	801dd2c <__s2b+0x4c>
 801dd40:	f1a5 0408 	sub.w	r4, r5, #8
 801dd44:	444c      	add	r4, r9
 801dd46:	1b2d      	subs	r5, r5, r4
 801dd48:	1963      	adds	r3, r4, r5
 801dd4a:	42bb      	cmp	r3, r7
 801dd4c:	db04      	blt.n	801dd58 <__s2b+0x78>
 801dd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd52:	340a      	adds	r4, #10
 801dd54:	2509      	movs	r5, #9
 801dd56:	e7f6      	b.n	801dd46 <__s2b+0x66>
 801dd58:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dd5c:	4601      	mov	r1, r0
 801dd5e:	3b30      	subs	r3, #48	; 0x30
 801dd60:	220a      	movs	r2, #10
 801dd62:	4630      	mov	r0, r6
 801dd64:	f7ff ff76 	bl	801dc54 <__multadd>
 801dd68:	e7ee      	b.n	801dd48 <__s2b+0x68>
 801dd6a:	bf00      	nop
 801dd6c:	08027f79 	.word	0x08027f79
 801dd70:	08028001 	.word	0x08028001

0801dd74 <__hi0bits>:
 801dd74:	0c03      	lsrs	r3, r0, #16
 801dd76:	041b      	lsls	r3, r3, #16
 801dd78:	b9d3      	cbnz	r3, 801ddb0 <__hi0bits+0x3c>
 801dd7a:	0400      	lsls	r0, r0, #16
 801dd7c:	2310      	movs	r3, #16
 801dd7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dd82:	bf04      	itt	eq
 801dd84:	0200      	lsleq	r0, r0, #8
 801dd86:	3308      	addeq	r3, #8
 801dd88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dd8c:	bf04      	itt	eq
 801dd8e:	0100      	lsleq	r0, r0, #4
 801dd90:	3304      	addeq	r3, #4
 801dd92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dd96:	bf04      	itt	eq
 801dd98:	0080      	lsleq	r0, r0, #2
 801dd9a:	3302      	addeq	r3, #2
 801dd9c:	2800      	cmp	r0, #0
 801dd9e:	db05      	blt.n	801ddac <__hi0bits+0x38>
 801dda0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dda4:	f103 0301 	add.w	r3, r3, #1
 801dda8:	bf08      	it	eq
 801ddaa:	2320      	moveq	r3, #32
 801ddac:	4618      	mov	r0, r3
 801ddae:	4770      	bx	lr
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	e7e4      	b.n	801dd7e <__hi0bits+0xa>

0801ddb4 <__lo0bits>:
 801ddb4:	6803      	ldr	r3, [r0, #0]
 801ddb6:	f013 0207 	ands.w	r2, r3, #7
 801ddba:	d00c      	beq.n	801ddd6 <__lo0bits+0x22>
 801ddbc:	07d9      	lsls	r1, r3, #31
 801ddbe:	d422      	bmi.n	801de06 <__lo0bits+0x52>
 801ddc0:	079a      	lsls	r2, r3, #30
 801ddc2:	bf49      	itett	mi
 801ddc4:	085b      	lsrmi	r3, r3, #1
 801ddc6:	089b      	lsrpl	r3, r3, #2
 801ddc8:	6003      	strmi	r3, [r0, #0]
 801ddca:	2201      	movmi	r2, #1
 801ddcc:	bf5c      	itt	pl
 801ddce:	6003      	strpl	r3, [r0, #0]
 801ddd0:	2202      	movpl	r2, #2
 801ddd2:	4610      	mov	r0, r2
 801ddd4:	4770      	bx	lr
 801ddd6:	b299      	uxth	r1, r3
 801ddd8:	b909      	cbnz	r1, 801ddde <__lo0bits+0x2a>
 801ddda:	0c1b      	lsrs	r3, r3, #16
 801dddc:	2210      	movs	r2, #16
 801ddde:	b2d9      	uxtb	r1, r3
 801dde0:	b909      	cbnz	r1, 801dde6 <__lo0bits+0x32>
 801dde2:	3208      	adds	r2, #8
 801dde4:	0a1b      	lsrs	r3, r3, #8
 801dde6:	0719      	lsls	r1, r3, #28
 801dde8:	bf04      	itt	eq
 801ddea:	091b      	lsreq	r3, r3, #4
 801ddec:	3204      	addeq	r2, #4
 801ddee:	0799      	lsls	r1, r3, #30
 801ddf0:	bf04      	itt	eq
 801ddf2:	089b      	lsreq	r3, r3, #2
 801ddf4:	3202      	addeq	r2, #2
 801ddf6:	07d9      	lsls	r1, r3, #31
 801ddf8:	d403      	bmi.n	801de02 <__lo0bits+0x4e>
 801ddfa:	085b      	lsrs	r3, r3, #1
 801ddfc:	f102 0201 	add.w	r2, r2, #1
 801de00:	d003      	beq.n	801de0a <__lo0bits+0x56>
 801de02:	6003      	str	r3, [r0, #0]
 801de04:	e7e5      	b.n	801ddd2 <__lo0bits+0x1e>
 801de06:	2200      	movs	r2, #0
 801de08:	e7e3      	b.n	801ddd2 <__lo0bits+0x1e>
 801de0a:	2220      	movs	r2, #32
 801de0c:	e7e1      	b.n	801ddd2 <__lo0bits+0x1e>
	...

0801de10 <__i2b>:
 801de10:	b510      	push	{r4, lr}
 801de12:	460c      	mov	r4, r1
 801de14:	2101      	movs	r1, #1
 801de16:	f7ff febb 	bl	801db90 <_Balloc>
 801de1a:	4602      	mov	r2, r0
 801de1c:	b928      	cbnz	r0, 801de2a <__i2b+0x1a>
 801de1e:	4b05      	ldr	r3, [pc, #20]	; (801de34 <__i2b+0x24>)
 801de20:	4805      	ldr	r0, [pc, #20]	; (801de38 <__i2b+0x28>)
 801de22:	f240 1145 	movw	r1, #325	; 0x145
 801de26:	f7fe f975 	bl	801c114 <__assert_func>
 801de2a:	2301      	movs	r3, #1
 801de2c:	6144      	str	r4, [r0, #20]
 801de2e:	6103      	str	r3, [r0, #16]
 801de30:	bd10      	pop	{r4, pc}
 801de32:	bf00      	nop
 801de34:	08027f79 	.word	0x08027f79
 801de38:	08028001 	.word	0x08028001

0801de3c <__multiply>:
 801de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de40:	4691      	mov	r9, r2
 801de42:	690a      	ldr	r2, [r1, #16]
 801de44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de48:	429a      	cmp	r2, r3
 801de4a:	bfb8      	it	lt
 801de4c:	460b      	movlt	r3, r1
 801de4e:	460c      	mov	r4, r1
 801de50:	bfbc      	itt	lt
 801de52:	464c      	movlt	r4, r9
 801de54:	4699      	movlt	r9, r3
 801de56:	6927      	ldr	r7, [r4, #16]
 801de58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801de5c:	68a3      	ldr	r3, [r4, #8]
 801de5e:	6861      	ldr	r1, [r4, #4]
 801de60:	eb07 060a 	add.w	r6, r7, sl
 801de64:	42b3      	cmp	r3, r6
 801de66:	b085      	sub	sp, #20
 801de68:	bfb8      	it	lt
 801de6a:	3101      	addlt	r1, #1
 801de6c:	f7ff fe90 	bl	801db90 <_Balloc>
 801de70:	b930      	cbnz	r0, 801de80 <__multiply+0x44>
 801de72:	4602      	mov	r2, r0
 801de74:	4b44      	ldr	r3, [pc, #272]	; (801df88 <__multiply+0x14c>)
 801de76:	4845      	ldr	r0, [pc, #276]	; (801df8c <__multiply+0x150>)
 801de78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801de7c:	f7fe f94a 	bl	801c114 <__assert_func>
 801de80:	f100 0514 	add.w	r5, r0, #20
 801de84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801de88:	462b      	mov	r3, r5
 801de8a:	2200      	movs	r2, #0
 801de8c:	4543      	cmp	r3, r8
 801de8e:	d321      	bcc.n	801ded4 <__multiply+0x98>
 801de90:	f104 0314 	add.w	r3, r4, #20
 801de94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801de98:	f109 0314 	add.w	r3, r9, #20
 801de9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dea0:	9202      	str	r2, [sp, #8]
 801dea2:	1b3a      	subs	r2, r7, r4
 801dea4:	3a15      	subs	r2, #21
 801dea6:	f022 0203 	bic.w	r2, r2, #3
 801deaa:	3204      	adds	r2, #4
 801deac:	f104 0115 	add.w	r1, r4, #21
 801deb0:	428f      	cmp	r7, r1
 801deb2:	bf38      	it	cc
 801deb4:	2204      	movcc	r2, #4
 801deb6:	9201      	str	r2, [sp, #4]
 801deb8:	9a02      	ldr	r2, [sp, #8]
 801deba:	9303      	str	r3, [sp, #12]
 801debc:	429a      	cmp	r2, r3
 801debe:	d80c      	bhi.n	801deda <__multiply+0x9e>
 801dec0:	2e00      	cmp	r6, #0
 801dec2:	dd03      	ble.n	801decc <__multiply+0x90>
 801dec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d05b      	beq.n	801df84 <__multiply+0x148>
 801decc:	6106      	str	r6, [r0, #16]
 801dece:	b005      	add	sp, #20
 801ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ded4:	f843 2b04 	str.w	r2, [r3], #4
 801ded8:	e7d8      	b.n	801de8c <__multiply+0x50>
 801deda:	f8b3 a000 	ldrh.w	sl, [r3]
 801dede:	f1ba 0f00 	cmp.w	sl, #0
 801dee2:	d024      	beq.n	801df2e <__multiply+0xf2>
 801dee4:	f104 0e14 	add.w	lr, r4, #20
 801dee8:	46a9      	mov	r9, r5
 801deea:	f04f 0c00 	mov.w	ip, #0
 801deee:	f85e 2b04 	ldr.w	r2, [lr], #4
 801def2:	f8d9 1000 	ldr.w	r1, [r9]
 801def6:	fa1f fb82 	uxth.w	fp, r2
 801defa:	b289      	uxth	r1, r1
 801defc:	fb0a 110b 	mla	r1, sl, fp, r1
 801df00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801df04:	f8d9 2000 	ldr.w	r2, [r9]
 801df08:	4461      	add	r1, ip
 801df0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801df0e:	fb0a c20b 	mla	r2, sl, fp, ip
 801df12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801df16:	b289      	uxth	r1, r1
 801df18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801df1c:	4577      	cmp	r7, lr
 801df1e:	f849 1b04 	str.w	r1, [r9], #4
 801df22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801df26:	d8e2      	bhi.n	801deee <__multiply+0xb2>
 801df28:	9a01      	ldr	r2, [sp, #4]
 801df2a:	f845 c002 	str.w	ip, [r5, r2]
 801df2e:	9a03      	ldr	r2, [sp, #12]
 801df30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801df34:	3304      	adds	r3, #4
 801df36:	f1b9 0f00 	cmp.w	r9, #0
 801df3a:	d021      	beq.n	801df80 <__multiply+0x144>
 801df3c:	6829      	ldr	r1, [r5, #0]
 801df3e:	f104 0c14 	add.w	ip, r4, #20
 801df42:	46ae      	mov	lr, r5
 801df44:	f04f 0a00 	mov.w	sl, #0
 801df48:	f8bc b000 	ldrh.w	fp, [ip]
 801df4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801df50:	fb09 220b 	mla	r2, r9, fp, r2
 801df54:	4452      	add	r2, sl
 801df56:	b289      	uxth	r1, r1
 801df58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801df5c:	f84e 1b04 	str.w	r1, [lr], #4
 801df60:	f85c 1b04 	ldr.w	r1, [ip], #4
 801df64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df68:	f8be 1000 	ldrh.w	r1, [lr]
 801df6c:	fb09 110a 	mla	r1, r9, sl, r1
 801df70:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801df74:	4567      	cmp	r7, ip
 801df76:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df7a:	d8e5      	bhi.n	801df48 <__multiply+0x10c>
 801df7c:	9a01      	ldr	r2, [sp, #4]
 801df7e:	50a9      	str	r1, [r5, r2]
 801df80:	3504      	adds	r5, #4
 801df82:	e799      	b.n	801deb8 <__multiply+0x7c>
 801df84:	3e01      	subs	r6, #1
 801df86:	e79b      	b.n	801dec0 <__multiply+0x84>
 801df88:	08027f79 	.word	0x08027f79
 801df8c:	08028001 	.word	0x08028001

0801df90 <__pow5mult>:
 801df90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df94:	4615      	mov	r5, r2
 801df96:	f012 0203 	ands.w	r2, r2, #3
 801df9a:	4606      	mov	r6, r0
 801df9c:	460f      	mov	r7, r1
 801df9e:	d007      	beq.n	801dfb0 <__pow5mult+0x20>
 801dfa0:	4c25      	ldr	r4, [pc, #148]	; (801e038 <__pow5mult+0xa8>)
 801dfa2:	3a01      	subs	r2, #1
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dfaa:	f7ff fe53 	bl	801dc54 <__multadd>
 801dfae:	4607      	mov	r7, r0
 801dfb0:	10ad      	asrs	r5, r5, #2
 801dfb2:	d03d      	beq.n	801e030 <__pow5mult+0xa0>
 801dfb4:	69f4      	ldr	r4, [r6, #28]
 801dfb6:	b97c      	cbnz	r4, 801dfd8 <__pow5mult+0x48>
 801dfb8:	2010      	movs	r0, #16
 801dfba:	f7fe f8eb 	bl	801c194 <malloc>
 801dfbe:	4602      	mov	r2, r0
 801dfc0:	61f0      	str	r0, [r6, #28]
 801dfc2:	b928      	cbnz	r0, 801dfd0 <__pow5mult+0x40>
 801dfc4:	4b1d      	ldr	r3, [pc, #116]	; (801e03c <__pow5mult+0xac>)
 801dfc6:	481e      	ldr	r0, [pc, #120]	; (801e040 <__pow5mult+0xb0>)
 801dfc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801dfcc:	f7fe f8a2 	bl	801c114 <__assert_func>
 801dfd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dfd4:	6004      	str	r4, [r0, #0]
 801dfd6:	60c4      	str	r4, [r0, #12]
 801dfd8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801dfdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dfe0:	b94c      	cbnz	r4, 801dff6 <__pow5mult+0x66>
 801dfe2:	f240 2171 	movw	r1, #625	; 0x271
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	f7ff ff12 	bl	801de10 <__i2b>
 801dfec:	2300      	movs	r3, #0
 801dfee:	f8c8 0008 	str.w	r0, [r8, #8]
 801dff2:	4604      	mov	r4, r0
 801dff4:	6003      	str	r3, [r0, #0]
 801dff6:	f04f 0900 	mov.w	r9, #0
 801dffa:	07eb      	lsls	r3, r5, #31
 801dffc:	d50a      	bpl.n	801e014 <__pow5mult+0x84>
 801dffe:	4639      	mov	r1, r7
 801e000:	4622      	mov	r2, r4
 801e002:	4630      	mov	r0, r6
 801e004:	f7ff ff1a 	bl	801de3c <__multiply>
 801e008:	4639      	mov	r1, r7
 801e00a:	4680      	mov	r8, r0
 801e00c:	4630      	mov	r0, r6
 801e00e:	f7ff fdff 	bl	801dc10 <_Bfree>
 801e012:	4647      	mov	r7, r8
 801e014:	106d      	asrs	r5, r5, #1
 801e016:	d00b      	beq.n	801e030 <__pow5mult+0xa0>
 801e018:	6820      	ldr	r0, [r4, #0]
 801e01a:	b938      	cbnz	r0, 801e02c <__pow5mult+0x9c>
 801e01c:	4622      	mov	r2, r4
 801e01e:	4621      	mov	r1, r4
 801e020:	4630      	mov	r0, r6
 801e022:	f7ff ff0b 	bl	801de3c <__multiply>
 801e026:	6020      	str	r0, [r4, #0]
 801e028:	f8c0 9000 	str.w	r9, [r0]
 801e02c:	4604      	mov	r4, r0
 801e02e:	e7e4      	b.n	801dffa <__pow5mult+0x6a>
 801e030:	4638      	mov	r0, r7
 801e032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e036:	bf00      	nop
 801e038:	08028150 	.word	0x08028150
 801e03c:	08027fea 	.word	0x08027fea
 801e040:	08028001 	.word	0x08028001

0801e044 <__lshift>:
 801e044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e048:	460c      	mov	r4, r1
 801e04a:	6849      	ldr	r1, [r1, #4]
 801e04c:	6923      	ldr	r3, [r4, #16]
 801e04e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e052:	68a3      	ldr	r3, [r4, #8]
 801e054:	4607      	mov	r7, r0
 801e056:	4691      	mov	r9, r2
 801e058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e05c:	f108 0601 	add.w	r6, r8, #1
 801e060:	42b3      	cmp	r3, r6
 801e062:	db0b      	blt.n	801e07c <__lshift+0x38>
 801e064:	4638      	mov	r0, r7
 801e066:	f7ff fd93 	bl	801db90 <_Balloc>
 801e06a:	4605      	mov	r5, r0
 801e06c:	b948      	cbnz	r0, 801e082 <__lshift+0x3e>
 801e06e:	4602      	mov	r2, r0
 801e070:	4b28      	ldr	r3, [pc, #160]	; (801e114 <__lshift+0xd0>)
 801e072:	4829      	ldr	r0, [pc, #164]	; (801e118 <__lshift+0xd4>)
 801e074:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801e078:	f7fe f84c 	bl	801c114 <__assert_func>
 801e07c:	3101      	adds	r1, #1
 801e07e:	005b      	lsls	r3, r3, #1
 801e080:	e7ee      	b.n	801e060 <__lshift+0x1c>
 801e082:	2300      	movs	r3, #0
 801e084:	f100 0114 	add.w	r1, r0, #20
 801e088:	f100 0210 	add.w	r2, r0, #16
 801e08c:	4618      	mov	r0, r3
 801e08e:	4553      	cmp	r3, sl
 801e090:	db33      	blt.n	801e0fa <__lshift+0xb6>
 801e092:	6920      	ldr	r0, [r4, #16]
 801e094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e098:	f104 0314 	add.w	r3, r4, #20
 801e09c:	f019 091f 	ands.w	r9, r9, #31
 801e0a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e0a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e0a8:	d02b      	beq.n	801e102 <__lshift+0xbe>
 801e0aa:	f1c9 0e20 	rsb	lr, r9, #32
 801e0ae:	468a      	mov	sl, r1
 801e0b0:	2200      	movs	r2, #0
 801e0b2:	6818      	ldr	r0, [r3, #0]
 801e0b4:	fa00 f009 	lsl.w	r0, r0, r9
 801e0b8:	4310      	orrs	r0, r2
 801e0ba:	f84a 0b04 	str.w	r0, [sl], #4
 801e0be:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0c2:	459c      	cmp	ip, r3
 801e0c4:	fa22 f20e 	lsr.w	r2, r2, lr
 801e0c8:	d8f3      	bhi.n	801e0b2 <__lshift+0x6e>
 801e0ca:	ebac 0304 	sub.w	r3, ip, r4
 801e0ce:	3b15      	subs	r3, #21
 801e0d0:	f023 0303 	bic.w	r3, r3, #3
 801e0d4:	3304      	adds	r3, #4
 801e0d6:	f104 0015 	add.w	r0, r4, #21
 801e0da:	4584      	cmp	ip, r0
 801e0dc:	bf38      	it	cc
 801e0de:	2304      	movcc	r3, #4
 801e0e0:	50ca      	str	r2, [r1, r3]
 801e0e2:	b10a      	cbz	r2, 801e0e8 <__lshift+0xa4>
 801e0e4:	f108 0602 	add.w	r6, r8, #2
 801e0e8:	3e01      	subs	r6, #1
 801e0ea:	4638      	mov	r0, r7
 801e0ec:	612e      	str	r6, [r5, #16]
 801e0ee:	4621      	mov	r1, r4
 801e0f0:	f7ff fd8e 	bl	801dc10 <_Bfree>
 801e0f4:	4628      	mov	r0, r5
 801e0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0fa:	f842 0f04 	str.w	r0, [r2, #4]!
 801e0fe:	3301      	adds	r3, #1
 801e100:	e7c5      	b.n	801e08e <__lshift+0x4a>
 801e102:	3904      	subs	r1, #4
 801e104:	f853 2b04 	ldr.w	r2, [r3], #4
 801e108:	f841 2f04 	str.w	r2, [r1, #4]!
 801e10c:	459c      	cmp	ip, r3
 801e10e:	d8f9      	bhi.n	801e104 <__lshift+0xc0>
 801e110:	e7ea      	b.n	801e0e8 <__lshift+0xa4>
 801e112:	bf00      	nop
 801e114:	08027f79 	.word	0x08027f79
 801e118:	08028001 	.word	0x08028001

0801e11c <__mcmp>:
 801e11c:	b530      	push	{r4, r5, lr}
 801e11e:	6902      	ldr	r2, [r0, #16]
 801e120:	690c      	ldr	r4, [r1, #16]
 801e122:	1b12      	subs	r2, r2, r4
 801e124:	d10e      	bne.n	801e144 <__mcmp+0x28>
 801e126:	f100 0314 	add.w	r3, r0, #20
 801e12a:	3114      	adds	r1, #20
 801e12c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e130:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e134:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e138:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e13c:	42a5      	cmp	r5, r4
 801e13e:	d003      	beq.n	801e148 <__mcmp+0x2c>
 801e140:	d305      	bcc.n	801e14e <__mcmp+0x32>
 801e142:	2201      	movs	r2, #1
 801e144:	4610      	mov	r0, r2
 801e146:	bd30      	pop	{r4, r5, pc}
 801e148:	4283      	cmp	r3, r0
 801e14a:	d3f3      	bcc.n	801e134 <__mcmp+0x18>
 801e14c:	e7fa      	b.n	801e144 <__mcmp+0x28>
 801e14e:	f04f 32ff 	mov.w	r2, #4294967295
 801e152:	e7f7      	b.n	801e144 <__mcmp+0x28>

0801e154 <__mdiff>:
 801e154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e158:	460c      	mov	r4, r1
 801e15a:	4606      	mov	r6, r0
 801e15c:	4611      	mov	r1, r2
 801e15e:	4620      	mov	r0, r4
 801e160:	4690      	mov	r8, r2
 801e162:	f7ff ffdb 	bl	801e11c <__mcmp>
 801e166:	1e05      	subs	r5, r0, #0
 801e168:	d110      	bne.n	801e18c <__mdiff+0x38>
 801e16a:	4629      	mov	r1, r5
 801e16c:	4630      	mov	r0, r6
 801e16e:	f7ff fd0f 	bl	801db90 <_Balloc>
 801e172:	b930      	cbnz	r0, 801e182 <__mdiff+0x2e>
 801e174:	4b3a      	ldr	r3, [pc, #232]	; (801e260 <__mdiff+0x10c>)
 801e176:	4602      	mov	r2, r0
 801e178:	f240 2137 	movw	r1, #567	; 0x237
 801e17c:	4839      	ldr	r0, [pc, #228]	; (801e264 <__mdiff+0x110>)
 801e17e:	f7fd ffc9 	bl	801c114 <__assert_func>
 801e182:	2301      	movs	r3, #1
 801e184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e18c:	bfa4      	itt	ge
 801e18e:	4643      	movge	r3, r8
 801e190:	46a0      	movge	r8, r4
 801e192:	4630      	mov	r0, r6
 801e194:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e198:	bfa6      	itte	ge
 801e19a:	461c      	movge	r4, r3
 801e19c:	2500      	movge	r5, #0
 801e19e:	2501      	movlt	r5, #1
 801e1a0:	f7ff fcf6 	bl	801db90 <_Balloc>
 801e1a4:	b920      	cbnz	r0, 801e1b0 <__mdiff+0x5c>
 801e1a6:	4b2e      	ldr	r3, [pc, #184]	; (801e260 <__mdiff+0x10c>)
 801e1a8:	4602      	mov	r2, r0
 801e1aa:	f240 2145 	movw	r1, #581	; 0x245
 801e1ae:	e7e5      	b.n	801e17c <__mdiff+0x28>
 801e1b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e1b4:	6926      	ldr	r6, [r4, #16]
 801e1b6:	60c5      	str	r5, [r0, #12]
 801e1b8:	f104 0914 	add.w	r9, r4, #20
 801e1bc:	f108 0514 	add.w	r5, r8, #20
 801e1c0:	f100 0e14 	add.w	lr, r0, #20
 801e1c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e1c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e1cc:	f108 0210 	add.w	r2, r8, #16
 801e1d0:	46f2      	mov	sl, lr
 801e1d2:	2100      	movs	r1, #0
 801e1d4:	f859 3b04 	ldr.w	r3, [r9], #4
 801e1d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e1dc:	fa11 f88b 	uxtah	r8, r1, fp
 801e1e0:	b299      	uxth	r1, r3
 801e1e2:	0c1b      	lsrs	r3, r3, #16
 801e1e4:	eba8 0801 	sub.w	r8, r8, r1
 801e1e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e1ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e1f0:	fa1f f888 	uxth.w	r8, r8
 801e1f4:	1419      	asrs	r1, r3, #16
 801e1f6:	454e      	cmp	r6, r9
 801e1f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e1fc:	f84a 3b04 	str.w	r3, [sl], #4
 801e200:	d8e8      	bhi.n	801e1d4 <__mdiff+0x80>
 801e202:	1b33      	subs	r3, r6, r4
 801e204:	3b15      	subs	r3, #21
 801e206:	f023 0303 	bic.w	r3, r3, #3
 801e20a:	3304      	adds	r3, #4
 801e20c:	3415      	adds	r4, #21
 801e20e:	42a6      	cmp	r6, r4
 801e210:	bf38      	it	cc
 801e212:	2304      	movcc	r3, #4
 801e214:	441d      	add	r5, r3
 801e216:	4473      	add	r3, lr
 801e218:	469e      	mov	lr, r3
 801e21a:	462e      	mov	r6, r5
 801e21c:	4566      	cmp	r6, ip
 801e21e:	d30e      	bcc.n	801e23e <__mdiff+0xea>
 801e220:	f10c 0203 	add.w	r2, ip, #3
 801e224:	1b52      	subs	r2, r2, r5
 801e226:	f022 0203 	bic.w	r2, r2, #3
 801e22a:	3d03      	subs	r5, #3
 801e22c:	45ac      	cmp	ip, r5
 801e22e:	bf38      	it	cc
 801e230:	2200      	movcc	r2, #0
 801e232:	4413      	add	r3, r2
 801e234:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e238:	b17a      	cbz	r2, 801e25a <__mdiff+0x106>
 801e23a:	6107      	str	r7, [r0, #16]
 801e23c:	e7a4      	b.n	801e188 <__mdiff+0x34>
 801e23e:	f856 8b04 	ldr.w	r8, [r6], #4
 801e242:	fa11 f288 	uxtah	r2, r1, r8
 801e246:	1414      	asrs	r4, r2, #16
 801e248:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e24c:	b292      	uxth	r2, r2
 801e24e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e252:	f84e 2b04 	str.w	r2, [lr], #4
 801e256:	1421      	asrs	r1, r4, #16
 801e258:	e7e0      	b.n	801e21c <__mdiff+0xc8>
 801e25a:	3f01      	subs	r7, #1
 801e25c:	e7ea      	b.n	801e234 <__mdiff+0xe0>
 801e25e:	bf00      	nop
 801e260:	08027f79 	.word	0x08027f79
 801e264:	08028001 	.word	0x08028001

0801e268 <__ulp>:
 801e268:	b082      	sub	sp, #8
 801e26a:	ed8d 0b00 	vstr	d0, [sp]
 801e26e:	9a01      	ldr	r2, [sp, #4]
 801e270:	4b0f      	ldr	r3, [pc, #60]	; (801e2b0 <__ulp+0x48>)
 801e272:	4013      	ands	r3, r2
 801e274:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801e278:	2b00      	cmp	r3, #0
 801e27a:	dc08      	bgt.n	801e28e <__ulp+0x26>
 801e27c:	425b      	negs	r3, r3
 801e27e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801e282:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e286:	da04      	bge.n	801e292 <__ulp+0x2a>
 801e288:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801e28c:	4113      	asrs	r3, r2
 801e28e:	2200      	movs	r2, #0
 801e290:	e008      	b.n	801e2a4 <__ulp+0x3c>
 801e292:	f1a2 0314 	sub.w	r3, r2, #20
 801e296:	2b1e      	cmp	r3, #30
 801e298:	bfda      	itte	le
 801e29a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801e29e:	40da      	lsrle	r2, r3
 801e2a0:	2201      	movgt	r2, #1
 801e2a2:	2300      	movs	r3, #0
 801e2a4:	4619      	mov	r1, r3
 801e2a6:	4610      	mov	r0, r2
 801e2a8:	ec41 0b10 	vmov	d0, r0, r1
 801e2ac:	b002      	add	sp, #8
 801e2ae:	4770      	bx	lr
 801e2b0:	7ff00000 	.word	0x7ff00000

0801e2b4 <__b2d>:
 801e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e2b8:	6906      	ldr	r6, [r0, #16]
 801e2ba:	f100 0814 	add.w	r8, r0, #20
 801e2be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801e2c2:	1f37      	subs	r7, r6, #4
 801e2c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801e2c8:	4610      	mov	r0, r2
 801e2ca:	f7ff fd53 	bl	801dd74 <__hi0bits>
 801e2ce:	f1c0 0320 	rsb	r3, r0, #32
 801e2d2:	280a      	cmp	r0, #10
 801e2d4:	600b      	str	r3, [r1, #0]
 801e2d6:	491b      	ldr	r1, [pc, #108]	; (801e344 <__b2d+0x90>)
 801e2d8:	dc15      	bgt.n	801e306 <__b2d+0x52>
 801e2da:	f1c0 0c0b 	rsb	ip, r0, #11
 801e2de:	fa22 f30c 	lsr.w	r3, r2, ip
 801e2e2:	45b8      	cmp	r8, r7
 801e2e4:	ea43 0501 	orr.w	r5, r3, r1
 801e2e8:	bf34      	ite	cc
 801e2ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e2ee:	2300      	movcs	r3, #0
 801e2f0:	3015      	adds	r0, #21
 801e2f2:	fa02 f000 	lsl.w	r0, r2, r0
 801e2f6:	fa23 f30c 	lsr.w	r3, r3, ip
 801e2fa:	4303      	orrs	r3, r0
 801e2fc:	461c      	mov	r4, r3
 801e2fe:	ec45 4b10 	vmov	d0, r4, r5
 801e302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e306:	45b8      	cmp	r8, r7
 801e308:	bf3a      	itte	cc
 801e30a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801e30e:	f1a6 0708 	subcc.w	r7, r6, #8
 801e312:	2300      	movcs	r3, #0
 801e314:	380b      	subs	r0, #11
 801e316:	d012      	beq.n	801e33e <__b2d+0x8a>
 801e318:	f1c0 0120 	rsb	r1, r0, #32
 801e31c:	fa23 f401 	lsr.w	r4, r3, r1
 801e320:	4082      	lsls	r2, r0
 801e322:	4322      	orrs	r2, r4
 801e324:	4547      	cmp	r7, r8
 801e326:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801e32a:	bf8c      	ite	hi
 801e32c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801e330:	2200      	movls	r2, #0
 801e332:	4083      	lsls	r3, r0
 801e334:	40ca      	lsrs	r2, r1
 801e336:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e33a:	4313      	orrs	r3, r2
 801e33c:	e7de      	b.n	801e2fc <__b2d+0x48>
 801e33e:	ea42 0501 	orr.w	r5, r2, r1
 801e342:	e7db      	b.n	801e2fc <__b2d+0x48>
 801e344:	3ff00000 	.word	0x3ff00000

0801e348 <__d2b>:
 801e348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e34c:	460f      	mov	r7, r1
 801e34e:	2101      	movs	r1, #1
 801e350:	ec59 8b10 	vmov	r8, r9, d0
 801e354:	4616      	mov	r6, r2
 801e356:	f7ff fc1b 	bl	801db90 <_Balloc>
 801e35a:	4604      	mov	r4, r0
 801e35c:	b930      	cbnz	r0, 801e36c <__d2b+0x24>
 801e35e:	4602      	mov	r2, r0
 801e360:	4b24      	ldr	r3, [pc, #144]	; (801e3f4 <__d2b+0xac>)
 801e362:	4825      	ldr	r0, [pc, #148]	; (801e3f8 <__d2b+0xb0>)
 801e364:	f240 310f 	movw	r1, #783	; 0x30f
 801e368:	f7fd fed4 	bl	801c114 <__assert_func>
 801e36c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e374:	bb2d      	cbnz	r5, 801e3c2 <__d2b+0x7a>
 801e376:	9301      	str	r3, [sp, #4]
 801e378:	f1b8 0300 	subs.w	r3, r8, #0
 801e37c:	d026      	beq.n	801e3cc <__d2b+0x84>
 801e37e:	4668      	mov	r0, sp
 801e380:	9300      	str	r3, [sp, #0]
 801e382:	f7ff fd17 	bl	801ddb4 <__lo0bits>
 801e386:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e38a:	b1e8      	cbz	r0, 801e3c8 <__d2b+0x80>
 801e38c:	f1c0 0320 	rsb	r3, r0, #32
 801e390:	fa02 f303 	lsl.w	r3, r2, r3
 801e394:	430b      	orrs	r3, r1
 801e396:	40c2      	lsrs	r2, r0
 801e398:	6163      	str	r3, [r4, #20]
 801e39a:	9201      	str	r2, [sp, #4]
 801e39c:	9b01      	ldr	r3, [sp, #4]
 801e39e:	61a3      	str	r3, [r4, #24]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	bf14      	ite	ne
 801e3a4:	2202      	movne	r2, #2
 801e3a6:	2201      	moveq	r2, #1
 801e3a8:	6122      	str	r2, [r4, #16]
 801e3aa:	b1bd      	cbz	r5, 801e3dc <__d2b+0x94>
 801e3ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e3b0:	4405      	add	r5, r0
 801e3b2:	603d      	str	r5, [r7, #0]
 801e3b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e3b8:	6030      	str	r0, [r6, #0]
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	b003      	add	sp, #12
 801e3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e3c6:	e7d6      	b.n	801e376 <__d2b+0x2e>
 801e3c8:	6161      	str	r1, [r4, #20]
 801e3ca:	e7e7      	b.n	801e39c <__d2b+0x54>
 801e3cc:	a801      	add	r0, sp, #4
 801e3ce:	f7ff fcf1 	bl	801ddb4 <__lo0bits>
 801e3d2:	9b01      	ldr	r3, [sp, #4]
 801e3d4:	6163      	str	r3, [r4, #20]
 801e3d6:	3020      	adds	r0, #32
 801e3d8:	2201      	movs	r2, #1
 801e3da:	e7e5      	b.n	801e3a8 <__d2b+0x60>
 801e3dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e3e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e3e4:	6038      	str	r0, [r7, #0]
 801e3e6:	6918      	ldr	r0, [r3, #16]
 801e3e8:	f7ff fcc4 	bl	801dd74 <__hi0bits>
 801e3ec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e3f0:	e7e2      	b.n	801e3b8 <__d2b+0x70>
 801e3f2:	bf00      	nop
 801e3f4:	08027f79 	.word	0x08027f79
 801e3f8:	08028001 	.word	0x08028001

0801e3fc <__ratio>:
 801e3fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e400:	4688      	mov	r8, r1
 801e402:	4669      	mov	r1, sp
 801e404:	4681      	mov	r9, r0
 801e406:	f7ff ff55 	bl	801e2b4 <__b2d>
 801e40a:	a901      	add	r1, sp, #4
 801e40c:	4640      	mov	r0, r8
 801e40e:	ec55 4b10 	vmov	r4, r5, d0
 801e412:	f7ff ff4f 	bl	801e2b4 <__b2d>
 801e416:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e41a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801e41e:	eba3 0c02 	sub.w	ip, r3, r2
 801e422:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e426:	1a9b      	subs	r3, r3, r2
 801e428:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e42c:	ec51 0b10 	vmov	r0, r1, d0
 801e430:	2b00      	cmp	r3, #0
 801e432:	bfd6      	itet	le
 801e434:	460a      	movle	r2, r1
 801e436:	462a      	movgt	r2, r5
 801e438:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e43c:	468b      	mov	fp, r1
 801e43e:	462f      	mov	r7, r5
 801e440:	bfd4      	ite	le
 801e442:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801e446:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e44a:	4620      	mov	r0, r4
 801e44c:	ee10 2a10 	vmov	r2, s0
 801e450:	465b      	mov	r3, fp
 801e452:	4639      	mov	r1, r7
 801e454:	f7e2 fa2a 	bl	80008ac <__aeabi_ddiv>
 801e458:	ec41 0b10 	vmov	d0, r0, r1
 801e45c:	b003      	add	sp, #12
 801e45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e462 <__copybits>:
 801e462:	3901      	subs	r1, #1
 801e464:	b570      	push	{r4, r5, r6, lr}
 801e466:	1149      	asrs	r1, r1, #5
 801e468:	6914      	ldr	r4, [r2, #16]
 801e46a:	3101      	adds	r1, #1
 801e46c:	f102 0314 	add.w	r3, r2, #20
 801e470:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e474:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e478:	1f05      	subs	r5, r0, #4
 801e47a:	42a3      	cmp	r3, r4
 801e47c:	d30c      	bcc.n	801e498 <__copybits+0x36>
 801e47e:	1aa3      	subs	r3, r4, r2
 801e480:	3b11      	subs	r3, #17
 801e482:	f023 0303 	bic.w	r3, r3, #3
 801e486:	3211      	adds	r2, #17
 801e488:	42a2      	cmp	r2, r4
 801e48a:	bf88      	it	hi
 801e48c:	2300      	movhi	r3, #0
 801e48e:	4418      	add	r0, r3
 801e490:	2300      	movs	r3, #0
 801e492:	4288      	cmp	r0, r1
 801e494:	d305      	bcc.n	801e4a2 <__copybits+0x40>
 801e496:	bd70      	pop	{r4, r5, r6, pc}
 801e498:	f853 6b04 	ldr.w	r6, [r3], #4
 801e49c:	f845 6f04 	str.w	r6, [r5, #4]!
 801e4a0:	e7eb      	b.n	801e47a <__copybits+0x18>
 801e4a2:	f840 3b04 	str.w	r3, [r0], #4
 801e4a6:	e7f4      	b.n	801e492 <__copybits+0x30>

0801e4a8 <__any_on>:
 801e4a8:	f100 0214 	add.w	r2, r0, #20
 801e4ac:	6900      	ldr	r0, [r0, #16]
 801e4ae:	114b      	asrs	r3, r1, #5
 801e4b0:	4298      	cmp	r0, r3
 801e4b2:	b510      	push	{r4, lr}
 801e4b4:	db11      	blt.n	801e4da <__any_on+0x32>
 801e4b6:	dd0a      	ble.n	801e4ce <__any_on+0x26>
 801e4b8:	f011 011f 	ands.w	r1, r1, #31
 801e4bc:	d007      	beq.n	801e4ce <__any_on+0x26>
 801e4be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e4c2:	fa24 f001 	lsr.w	r0, r4, r1
 801e4c6:	fa00 f101 	lsl.w	r1, r0, r1
 801e4ca:	428c      	cmp	r4, r1
 801e4cc:	d10b      	bne.n	801e4e6 <__any_on+0x3e>
 801e4ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e4d2:	4293      	cmp	r3, r2
 801e4d4:	d803      	bhi.n	801e4de <__any_on+0x36>
 801e4d6:	2000      	movs	r0, #0
 801e4d8:	bd10      	pop	{r4, pc}
 801e4da:	4603      	mov	r3, r0
 801e4dc:	e7f7      	b.n	801e4ce <__any_on+0x26>
 801e4de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e4e2:	2900      	cmp	r1, #0
 801e4e4:	d0f5      	beq.n	801e4d2 <__any_on+0x2a>
 801e4e6:	2001      	movs	r0, #1
 801e4e8:	e7f6      	b.n	801e4d8 <__any_on+0x30>

0801e4ea <_malloc_usable_size_r>:
 801e4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4ee:	1f18      	subs	r0, r3, #4
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	bfbc      	itt	lt
 801e4f4:	580b      	ldrlt	r3, [r1, r0]
 801e4f6:	18c0      	addlt	r0, r0, r3
 801e4f8:	4770      	bx	lr

0801e4fa <__ascii_wctomb>:
 801e4fa:	b149      	cbz	r1, 801e510 <__ascii_wctomb+0x16>
 801e4fc:	2aff      	cmp	r2, #255	; 0xff
 801e4fe:	bf85      	ittet	hi
 801e500:	238a      	movhi	r3, #138	; 0x8a
 801e502:	6003      	strhi	r3, [r0, #0]
 801e504:	700a      	strbls	r2, [r1, #0]
 801e506:	f04f 30ff 	movhi.w	r0, #4294967295
 801e50a:	bf98      	it	ls
 801e50c:	2001      	movls	r0, #1
 801e50e:	4770      	bx	lr
 801e510:	4608      	mov	r0, r1
 801e512:	4770      	bx	lr

0801e514 <__ssputs_r>:
 801e514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e518:	688e      	ldr	r6, [r1, #8]
 801e51a:	461f      	mov	r7, r3
 801e51c:	42be      	cmp	r6, r7
 801e51e:	680b      	ldr	r3, [r1, #0]
 801e520:	4682      	mov	sl, r0
 801e522:	460c      	mov	r4, r1
 801e524:	4690      	mov	r8, r2
 801e526:	d82c      	bhi.n	801e582 <__ssputs_r+0x6e>
 801e528:	898a      	ldrh	r2, [r1, #12]
 801e52a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e52e:	d026      	beq.n	801e57e <__ssputs_r+0x6a>
 801e530:	6965      	ldr	r5, [r4, #20]
 801e532:	6909      	ldr	r1, [r1, #16]
 801e534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e538:	eba3 0901 	sub.w	r9, r3, r1
 801e53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e540:	1c7b      	adds	r3, r7, #1
 801e542:	444b      	add	r3, r9
 801e544:	106d      	asrs	r5, r5, #1
 801e546:	429d      	cmp	r5, r3
 801e548:	bf38      	it	cc
 801e54a:	461d      	movcc	r5, r3
 801e54c:	0553      	lsls	r3, r2, #21
 801e54e:	d527      	bpl.n	801e5a0 <__ssputs_r+0x8c>
 801e550:	4629      	mov	r1, r5
 801e552:	f7fd fe4f 	bl	801c1f4 <_malloc_r>
 801e556:	4606      	mov	r6, r0
 801e558:	b360      	cbz	r0, 801e5b4 <__ssputs_r+0xa0>
 801e55a:	6921      	ldr	r1, [r4, #16]
 801e55c:	464a      	mov	r2, r9
 801e55e:	f7fe ff52 	bl	801d406 <memcpy>
 801e562:	89a3      	ldrh	r3, [r4, #12]
 801e564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e56c:	81a3      	strh	r3, [r4, #12]
 801e56e:	6126      	str	r6, [r4, #16]
 801e570:	6165      	str	r5, [r4, #20]
 801e572:	444e      	add	r6, r9
 801e574:	eba5 0509 	sub.w	r5, r5, r9
 801e578:	6026      	str	r6, [r4, #0]
 801e57a:	60a5      	str	r5, [r4, #8]
 801e57c:	463e      	mov	r6, r7
 801e57e:	42be      	cmp	r6, r7
 801e580:	d900      	bls.n	801e584 <__ssputs_r+0x70>
 801e582:	463e      	mov	r6, r7
 801e584:	6820      	ldr	r0, [r4, #0]
 801e586:	4632      	mov	r2, r6
 801e588:	4641      	mov	r1, r8
 801e58a:	f7fe fe41 	bl	801d210 <memmove>
 801e58e:	68a3      	ldr	r3, [r4, #8]
 801e590:	1b9b      	subs	r3, r3, r6
 801e592:	60a3      	str	r3, [r4, #8]
 801e594:	6823      	ldr	r3, [r4, #0]
 801e596:	4433      	add	r3, r6
 801e598:	6023      	str	r3, [r4, #0]
 801e59a:	2000      	movs	r0, #0
 801e59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5a0:	462a      	mov	r2, r5
 801e5a2:	f7fd feb3 	bl	801c30c <_realloc_r>
 801e5a6:	4606      	mov	r6, r0
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	d1e0      	bne.n	801e56e <__ssputs_r+0x5a>
 801e5ac:	6921      	ldr	r1, [r4, #16]
 801e5ae:	4650      	mov	r0, sl
 801e5b0:	f7fe ff38 	bl	801d424 <_free_r>
 801e5b4:	230c      	movs	r3, #12
 801e5b6:	f8ca 3000 	str.w	r3, [sl]
 801e5ba:	89a3      	ldrh	r3, [r4, #12]
 801e5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5c0:	81a3      	strh	r3, [r4, #12]
 801e5c2:	f04f 30ff 	mov.w	r0, #4294967295
 801e5c6:	e7e9      	b.n	801e59c <__ssputs_r+0x88>

0801e5c8 <_svfiprintf_r>:
 801e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5cc:	4698      	mov	r8, r3
 801e5ce:	898b      	ldrh	r3, [r1, #12]
 801e5d0:	061b      	lsls	r3, r3, #24
 801e5d2:	b09d      	sub	sp, #116	; 0x74
 801e5d4:	4607      	mov	r7, r0
 801e5d6:	460d      	mov	r5, r1
 801e5d8:	4614      	mov	r4, r2
 801e5da:	d50e      	bpl.n	801e5fa <_svfiprintf_r+0x32>
 801e5dc:	690b      	ldr	r3, [r1, #16]
 801e5de:	b963      	cbnz	r3, 801e5fa <_svfiprintf_r+0x32>
 801e5e0:	2140      	movs	r1, #64	; 0x40
 801e5e2:	f7fd fe07 	bl	801c1f4 <_malloc_r>
 801e5e6:	6028      	str	r0, [r5, #0]
 801e5e8:	6128      	str	r0, [r5, #16]
 801e5ea:	b920      	cbnz	r0, 801e5f6 <_svfiprintf_r+0x2e>
 801e5ec:	230c      	movs	r3, #12
 801e5ee:	603b      	str	r3, [r7, #0]
 801e5f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5f4:	e0d0      	b.n	801e798 <_svfiprintf_r+0x1d0>
 801e5f6:	2340      	movs	r3, #64	; 0x40
 801e5f8:	616b      	str	r3, [r5, #20]
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	9309      	str	r3, [sp, #36]	; 0x24
 801e5fe:	2320      	movs	r3, #32
 801e600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e604:	f8cd 800c 	str.w	r8, [sp, #12]
 801e608:	2330      	movs	r3, #48	; 0x30
 801e60a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e7b0 <_svfiprintf_r+0x1e8>
 801e60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e612:	f04f 0901 	mov.w	r9, #1
 801e616:	4623      	mov	r3, r4
 801e618:	469a      	mov	sl, r3
 801e61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e61e:	b10a      	cbz	r2, 801e624 <_svfiprintf_r+0x5c>
 801e620:	2a25      	cmp	r2, #37	; 0x25
 801e622:	d1f9      	bne.n	801e618 <_svfiprintf_r+0x50>
 801e624:	ebba 0b04 	subs.w	fp, sl, r4
 801e628:	d00b      	beq.n	801e642 <_svfiprintf_r+0x7a>
 801e62a:	465b      	mov	r3, fp
 801e62c:	4622      	mov	r2, r4
 801e62e:	4629      	mov	r1, r5
 801e630:	4638      	mov	r0, r7
 801e632:	f7ff ff6f 	bl	801e514 <__ssputs_r>
 801e636:	3001      	adds	r0, #1
 801e638:	f000 80a9 	beq.w	801e78e <_svfiprintf_r+0x1c6>
 801e63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e63e:	445a      	add	r2, fp
 801e640:	9209      	str	r2, [sp, #36]	; 0x24
 801e642:	f89a 3000 	ldrb.w	r3, [sl]
 801e646:	2b00      	cmp	r3, #0
 801e648:	f000 80a1 	beq.w	801e78e <_svfiprintf_r+0x1c6>
 801e64c:	2300      	movs	r3, #0
 801e64e:	f04f 32ff 	mov.w	r2, #4294967295
 801e652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e656:	f10a 0a01 	add.w	sl, sl, #1
 801e65a:	9304      	str	r3, [sp, #16]
 801e65c:	9307      	str	r3, [sp, #28]
 801e65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e662:	931a      	str	r3, [sp, #104]	; 0x68
 801e664:	4654      	mov	r4, sl
 801e666:	2205      	movs	r2, #5
 801e668:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e66c:	4850      	ldr	r0, [pc, #320]	; (801e7b0 <_svfiprintf_r+0x1e8>)
 801e66e:	f7e1 fddf 	bl	8000230 <memchr>
 801e672:	9a04      	ldr	r2, [sp, #16]
 801e674:	b9d8      	cbnz	r0, 801e6ae <_svfiprintf_r+0xe6>
 801e676:	06d0      	lsls	r0, r2, #27
 801e678:	bf44      	itt	mi
 801e67a:	2320      	movmi	r3, #32
 801e67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e680:	0711      	lsls	r1, r2, #28
 801e682:	bf44      	itt	mi
 801e684:	232b      	movmi	r3, #43	; 0x2b
 801e686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e68a:	f89a 3000 	ldrb.w	r3, [sl]
 801e68e:	2b2a      	cmp	r3, #42	; 0x2a
 801e690:	d015      	beq.n	801e6be <_svfiprintf_r+0xf6>
 801e692:	9a07      	ldr	r2, [sp, #28]
 801e694:	4654      	mov	r4, sl
 801e696:	2000      	movs	r0, #0
 801e698:	f04f 0c0a 	mov.w	ip, #10
 801e69c:	4621      	mov	r1, r4
 801e69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e6a2:	3b30      	subs	r3, #48	; 0x30
 801e6a4:	2b09      	cmp	r3, #9
 801e6a6:	d94d      	bls.n	801e744 <_svfiprintf_r+0x17c>
 801e6a8:	b1b0      	cbz	r0, 801e6d8 <_svfiprintf_r+0x110>
 801e6aa:	9207      	str	r2, [sp, #28]
 801e6ac:	e014      	b.n	801e6d8 <_svfiprintf_r+0x110>
 801e6ae:	eba0 0308 	sub.w	r3, r0, r8
 801e6b2:	fa09 f303 	lsl.w	r3, r9, r3
 801e6b6:	4313      	orrs	r3, r2
 801e6b8:	9304      	str	r3, [sp, #16]
 801e6ba:	46a2      	mov	sl, r4
 801e6bc:	e7d2      	b.n	801e664 <_svfiprintf_r+0x9c>
 801e6be:	9b03      	ldr	r3, [sp, #12]
 801e6c0:	1d19      	adds	r1, r3, #4
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	9103      	str	r1, [sp, #12]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	bfbb      	ittet	lt
 801e6ca:	425b      	neglt	r3, r3
 801e6cc:	f042 0202 	orrlt.w	r2, r2, #2
 801e6d0:	9307      	strge	r3, [sp, #28]
 801e6d2:	9307      	strlt	r3, [sp, #28]
 801e6d4:	bfb8      	it	lt
 801e6d6:	9204      	strlt	r2, [sp, #16]
 801e6d8:	7823      	ldrb	r3, [r4, #0]
 801e6da:	2b2e      	cmp	r3, #46	; 0x2e
 801e6dc:	d10c      	bne.n	801e6f8 <_svfiprintf_r+0x130>
 801e6de:	7863      	ldrb	r3, [r4, #1]
 801e6e0:	2b2a      	cmp	r3, #42	; 0x2a
 801e6e2:	d134      	bne.n	801e74e <_svfiprintf_r+0x186>
 801e6e4:	9b03      	ldr	r3, [sp, #12]
 801e6e6:	1d1a      	adds	r2, r3, #4
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	9203      	str	r2, [sp, #12]
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	bfb8      	it	lt
 801e6f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e6f4:	3402      	adds	r4, #2
 801e6f6:	9305      	str	r3, [sp, #20]
 801e6f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e7c0 <_svfiprintf_r+0x1f8>
 801e6fc:	7821      	ldrb	r1, [r4, #0]
 801e6fe:	2203      	movs	r2, #3
 801e700:	4650      	mov	r0, sl
 801e702:	f7e1 fd95 	bl	8000230 <memchr>
 801e706:	b138      	cbz	r0, 801e718 <_svfiprintf_r+0x150>
 801e708:	9b04      	ldr	r3, [sp, #16]
 801e70a:	eba0 000a 	sub.w	r0, r0, sl
 801e70e:	2240      	movs	r2, #64	; 0x40
 801e710:	4082      	lsls	r2, r0
 801e712:	4313      	orrs	r3, r2
 801e714:	3401      	adds	r4, #1
 801e716:	9304      	str	r3, [sp, #16]
 801e718:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e71c:	4825      	ldr	r0, [pc, #148]	; (801e7b4 <_svfiprintf_r+0x1ec>)
 801e71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e722:	2206      	movs	r2, #6
 801e724:	f7e1 fd84 	bl	8000230 <memchr>
 801e728:	2800      	cmp	r0, #0
 801e72a:	d038      	beq.n	801e79e <_svfiprintf_r+0x1d6>
 801e72c:	4b22      	ldr	r3, [pc, #136]	; (801e7b8 <_svfiprintf_r+0x1f0>)
 801e72e:	bb1b      	cbnz	r3, 801e778 <_svfiprintf_r+0x1b0>
 801e730:	9b03      	ldr	r3, [sp, #12]
 801e732:	3307      	adds	r3, #7
 801e734:	f023 0307 	bic.w	r3, r3, #7
 801e738:	3308      	adds	r3, #8
 801e73a:	9303      	str	r3, [sp, #12]
 801e73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e73e:	4433      	add	r3, r6
 801e740:	9309      	str	r3, [sp, #36]	; 0x24
 801e742:	e768      	b.n	801e616 <_svfiprintf_r+0x4e>
 801e744:	fb0c 3202 	mla	r2, ip, r2, r3
 801e748:	460c      	mov	r4, r1
 801e74a:	2001      	movs	r0, #1
 801e74c:	e7a6      	b.n	801e69c <_svfiprintf_r+0xd4>
 801e74e:	2300      	movs	r3, #0
 801e750:	3401      	adds	r4, #1
 801e752:	9305      	str	r3, [sp, #20]
 801e754:	4619      	mov	r1, r3
 801e756:	f04f 0c0a 	mov.w	ip, #10
 801e75a:	4620      	mov	r0, r4
 801e75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e760:	3a30      	subs	r2, #48	; 0x30
 801e762:	2a09      	cmp	r2, #9
 801e764:	d903      	bls.n	801e76e <_svfiprintf_r+0x1a6>
 801e766:	2b00      	cmp	r3, #0
 801e768:	d0c6      	beq.n	801e6f8 <_svfiprintf_r+0x130>
 801e76a:	9105      	str	r1, [sp, #20]
 801e76c:	e7c4      	b.n	801e6f8 <_svfiprintf_r+0x130>
 801e76e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e772:	4604      	mov	r4, r0
 801e774:	2301      	movs	r3, #1
 801e776:	e7f0      	b.n	801e75a <_svfiprintf_r+0x192>
 801e778:	ab03      	add	r3, sp, #12
 801e77a:	9300      	str	r3, [sp, #0]
 801e77c:	462a      	mov	r2, r5
 801e77e:	4b0f      	ldr	r3, [pc, #60]	; (801e7bc <_svfiprintf_r+0x1f4>)
 801e780:	a904      	add	r1, sp, #16
 801e782:	4638      	mov	r0, r7
 801e784:	f3af 8000 	nop.w
 801e788:	1c42      	adds	r2, r0, #1
 801e78a:	4606      	mov	r6, r0
 801e78c:	d1d6      	bne.n	801e73c <_svfiprintf_r+0x174>
 801e78e:	89ab      	ldrh	r3, [r5, #12]
 801e790:	065b      	lsls	r3, r3, #25
 801e792:	f53f af2d 	bmi.w	801e5f0 <_svfiprintf_r+0x28>
 801e796:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e798:	b01d      	add	sp, #116	; 0x74
 801e79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e79e:	ab03      	add	r3, sp, #12
 801e7a0:	9300      	str	r3, [sp, #0]
 801e7a2:	462a      	mov	r2, r5
 801e7a4:	4b05      	ldr	r3, [pc, #20]	; (801e7bc <_svfiprintf_r+0x1f4>)
 801e7a6:	a904      	add	r1, sp, #16
 801e7a8:	4638      	mov	r0, r7
 801e7aa:	f000 f9bd 	bl	801eb28 <_printf_i>
 801e7ae:	e7eb      	b.n	801e788 <_svfiprintf_r+0x1c0>
 801e7b0:	0802815c 	.word	0x0802815c
 801e7b4:	08028166 	.word	0x08028166
 801e7b8:	00000000 	.word	0x00000000
 801e7bc:	0801e515 	.word	0x0801e515
 801e7c0:	08028162 	.word	0x08028162

0801e7c4 <__sfputc_r>:
 801e7c4:	6893      	ldr	r3, [r2, #8]
 801e7c6:	3b01      	subs	r3, #1
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	b410      	push	{r4}
 801e7cc:	6093      	str	r3, [r2, #8]
 801e7ce:	da08      	bge.n	801e7e2 <__sfputc_r+0x1e>
 801e7d0:	6994      	ldr	r4, [r2, #24]
 801e7d2:	42a3      	cmp	r3, r4
 801e7d4:	db01      	blt.n	801e7da <__sfputc_r+0x16>
 801e7d6:	290a      	cmp	r1, #10
 801e7d8:	d103      	bne.n	801e7e2 <__sfputc_r+0x1e>
 801e7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7de:	f000 bb73 	b.w	801eec8 <__swbuf_r>
 801e7e2:	6813      	ldr	r3, [r2, #0]
 801e7e4:	1c58      	adds	r0, r3, #1
 801e7e6:	6010      	str	r0, [r2, #0]
 801e7e8:	7019      	strb	r1, [r3, #0]
 801e7ea:	4608      	mov	r0, r1
 801e7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7f0:	4770      	bx	lr

0801e7f2 <__sfputs_r>:
 801e7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7f4:	4606      	mov	r6, r0
 801e7f6:	460f      	mov	r7, r1
 801e7f8:	4614      	mov	r4, r2
 801e7fa:	18d5      	adds	r5, r2, r3
 801e7fc:	42ac      	cmp	r4, r5
 801e7fe:	d101      	bne.n	801e804 <__sfputs_r+0x12>
 801e800:	2000      	movs	r0, #0
 801e802:	e007      	b.n	801e814 <__sfputs_r+0x22>
 801e804:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e808:	463a      	mov	r2, r7
 801e80a:	4630      	mov	r0, r6
 801e80c:	f7ff ffda 	bl	801e7c4 <__sfputc_r>
 801e810:	1c43      	adds	r3, r0, #1
 801e812:	d1f3      	bne.n	801e7fc <__sfputs_r+0xa>
 801e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e818 <_vfiprintf_r>:
 801e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e81c:	460d      	mov	r5, r1
 801e81e:	b09d      	sub	sp, #116	; 0x74
 801e820:	4614      	mov	r4, r2
 801e822:	4698      	mov	r8, r3
 801e824:	4606      	mov	r6, r0
 801e826:	b118      	cbz	r0, 801e830 <_vfiprintf_r+0x18>
 801e828:	6a03      	ldr	r3, [r0, #32]
 801e82a:	b90b      	cbnz	r3, 801e830 <_vfiprintf_r+0x18>
 801e82c:	f7fe fc44 	bl	801d0b8 <__sinit>
 801e830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e832:	07d9      	lsls	r1, r3, #31
 801e834:	d405      	bmi.n	801e842 <_vfiprintf_r+0x2a>
 801e836:	89ab      	ldrh	r3, [r5, #12]
 801e838:	059a      	lsls	r2, r3, #22
 801e83a:	d402      	bmi.n	801e842 <_vfiprintf_r+0x2a>
 801e83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e83e:	f7fe fde0 	bl	801d402 <__retarget_lock_acquire_recursive>
 801e842:	89ab      	ldrh	r3, [r5, #12]
 801e844:	071b      	lsls	r3, r3, #28
 801e846:	d501      	bpl.n	801e84c <_vfiprintf_r+0x34>
 801e848:	692b      	ldr	r3, [r5, #16]
 801e84a:	b99b      	cbnz	r3, 801e874 <_vfiprintf_r+0x5c>
 801e84c:	4629      	mov	r1, r5
 801e84e:	4630      	mov	r0, r6
 801e850:	f000 fb78 	bl	801ef44 <__swsetup_r>
 801e854:	b170      	cbz	r0, 801e874 <_vfiprintf_r+0x5c>
 801e856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e858:	07dc      	lsls	r4, r3, #31
 801e85a:	d504      	bpl.n	801e866 <_vfiprintf_r+0x4e>
 801e85c:	f04f 30ff 	mov.w	r0, #4294967295
 801e860:	b01d      	add	sp, #116	; 0x74
 801e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e866:	89ab      	ldrh	r3, [r5, #12]
 801e868:	0598      	lsls	r0, r3, #22
 801e86a:	d4f7      	bmi.n	801e85c <_vfiprintf_r+0x44>
 801e86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e86e:	f7fe fdc9 	bl	801d404 <__retarget_lock_release_recursive>
 801e872:	e7f3      	b.n	801e85c <_vfiprintf_r+0x44>
 801e874:	2300      	movs	r3, #0
 801e876:	9309      	str	r3, [sp, #36]	; 0x24
 801e878:	2320      	movs	r3, #32
 801e87a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e87e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e882:	2330      	movs	r3, #48	; 0x30
 801e884:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ea38 <_vfiprintf_r+0x220>
 801e888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e88c:	f04f 0901 	mov.w	r9, #1
 801e890:	4623      	mov	r3, r4
 801e892:	469a      	mov	sl, r3
 801e894:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e898:	b10a      	cbz	r2, 801e89e <_vfiprintf_r+0x86>
 801e89a:	2a25      	cmp	r2, #37	; 0x25
 801e89c:	d1f9      	bne.n	801e892 <_vfiprintf_r+0x7a>
 801e89e:	ebba 0b04 	subs.w	fp, sl, r4
 801e8a2:	d00b      	beq.n	801e8bc <_vfiprintf_r+0xa4>
 801e8a4:	465b      	mov	r3, fp
 801e8a6:	4622      	mov	r2, r4
 801e8a8:	4629      	mov	r1, r5
 801e8aa:	4630      	mov	r0, r6
 801e8ac:	f7ff ffa1 	bl	801e7f2 <__sfputs_r>
 801e8b0:	3001      	adds	r0, #1
 801e8b2:	f000 80a9 	beq.w	801ea08 <_vfiprintf_r+0x1f0>
 801e8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8b8:	445a      	add	r2, fp
 801e8ba:	9209      	str	r2, [sp, #36]	; 0x24
 801e8bc:	f89a 3000 	ldrb.w	r3, [sl]
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	f000 80a1 	beq.w	801ea08 <_vfiprintf_r+0x1f0>
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	f04f 32ff 	mov.w	r2, #4294967295
 801e8cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8d0:	f10a 0a01 	add.w	sl, sl, #1
 801e8d4:	9304      	str	r3, [sp, #16]
 801e8d6:	9307      	str	r3, [sp, #28]
 801e8d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e8dc:	931a      	str	r3, [sp, #104]	; 0x68
 801e8de:	4654      	mov	r4, sl
 801e8e0:	2205      	movs	r2, #5
 801e8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8e6:	4854      	ldr	r0, [pc, #336]	; (801ea38 <_vfiprintf_r+0x220>)
 801e8e8:	f7e1 fca2 	bl	8000230 <memchr>
 801e8ec:	9a04      	ldr	r2, [sp, #16]
 801e8ee:	b9d8      	cbnz	r0, 801e928 <_vfiprintf_r+0x110>
 801e8f0:	06d1      	lsls	r1, r2, #27
 801e8f2:	bf44      	itt	mi
 801e8f4:	2320      	movmi	r3, #32
 801e8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e8fa:	0713      	lsls	r3, r2, #28
 801e8fc:	bf44      	itt	mi
 801e8fe:	232b      	movmi	r3, #43	; 0x2b
 801e900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e904:	f89a 3000 	ldrb.w	r3, [sl]
 801e908:	2b2a      	cmp	r3, #42	; 0x2a
 801e90a:	d015      	beq.n	801e938 <_vfiprintf_r+0x120>
 801e90c:	9a07      	ldr	r2, [sp, #28]
 801e90e:	4654      	mov	r4, sl
 801e910:	2000      	movs	r0, #0
 801e912:	f04f 0c0a 	mov.w	ip, #10
 801e916:	4621      	mov	r1, r4
 801e918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e91c:	3b30      	subs	r3, #48	; 0x30
 801e91e:	2b09      	cmp	r3, #9
 801e920:	d94d      	bls.n	801e9be <_vfiprintf_r+0x1a6>
 801e922:	b1b0      	cbz	r0, 801e952 <_vfiprintf_r+0x13a>
 801e924:	9207      	str	r2, [sp, #28]
 801e926:	e014      	b.n	801e952 <_vfiprintf_r+0x13a>
 801e928:	eba0 0308 	sub.w	r3, r0, r8
 801e92c:	fa09 f303 	lsl.w	r3, r9, r3
 801e930:	4313      	orrs	r3, r2
 801e932:	9304      	str	r3, [sp, #16]
 801e934:	46a2      	mov	sl, r4
 801e936:	e7d2      	b.n	801e8de <_vfiprintf_r+0xc6>
 801e938:	9b03      	ldr	r3, [sp, #12]
 801e93a:	1d19      	adds	r1, r3, #4
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	9103      	str	r1, [sp, #12]
 801e940:	2b00      	cmp	r3, #0
 801e942:	bfbb      	ittet	lt
 801e944:	425b      	neglt	r3, r3
 801e946:	f042 0202 	orrlt.w	r2, r2, #2
 801e94a:	9307      	strge	r3, [sp, #28]
 801e94c:	9307      	strlt	r3, [sp, #28]
 801e94e:	bfb8      	it	lt
 801e950:	9204      	strlt	r2, [sp, #16]
 801e952:	7823      	ldrb	r3, [r4, #0]
 801e954:	2b2e      	cmp	r3, #46	; 0x2e
 801e956:	d10c      	bne.n	801e972 <_vfiprintf_r+0x15a>
 801e958:	7863      	ldrb	r3, [r4, #1]
 801e95a:	2b2a      	cmp	r3, #42	; 0x2a
 801e95c:	d134      	bne.n	801e9c8 <_vfiprintf_r+0x1b0>
 801e95e:	9b03      	ldr	r3, [sp, #12]
 801e960:	1d1a      	adds	r2, r3, #4
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	9203      	str	r2, [sp, #12]
 801e966:	2b00      	cmp	r3, #0
 801e968:	bfb8      	it	lt
 801e96a:	f04f 33ff 	movlt.w	r3, #4294967295
 801e96e:	3402      	adds	r4, #2
 801e970:	9305      	str	r3, [sp, #20]
 801e972:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ea48 <_vfiprintf_r+0x230>
 801e976:	7821      	ldrb	r1, [r4, #0]
 801e978:	2203      	movs	r2, #3
 801e97a:	4650      	mov	r0, sl
 801e97c:	f7e1 fc58 	bl	8000230 <memchr>
 801e980:	b138      	cbz	r0, 801e992 <_vfiprintf_r+0x17a>
 801e982:	9b04      	ldr	r3, [sp, #16]
 801e984:	eba0 000a 	sub.w	r0, r0, sl
 801e988:	2240      	movs	r2, #64	; 0x40
 801e98a:	4082      	lsls	r2, r0
 801e98c:	4313      	orrs	r3, r2
 801e98e:	3401      	adds	r4, #1
 801e990:	9304      	str	r3, [sp, #16]
 801e992:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e996:	4829      	ldr	r0, [pc, #164]	; (801ea3c <_vfiprintf_r+0x224>)
 801e998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e99c:	2206      	movs	r2, #6
 801e99e:	f7e1 fc47 	bl	8000230 <memchr>
 801e9a2:	2800      	cmp	r0, #0
 801e9a4:	d03f      	beq.n	801ea26 <_vfiprintf_r+0x20e>
 801e9a6:	4b26      	ldr	r3, [pc, #152]	; (801ea40 <_vfiprintf_r+0x228>)
 801e9a8:	bb1b      	cbnz	r3, 801e9f2 <_vfiprintf_r+0x1da>
 801e9aa:	9b03      	ldr	r3, [sp, #12]
 801e9ac:	3307      	adds	r3, #7
 801e9ae:	f023 0307 	bic.w	r3, r3, #7
 801e9b2:	3308      	adds	r3, #8
 801e9b4:	9303      	str	r3, [sp, #12]
 801e9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9b8:	443b      	add	r3, r7
 801e9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801e9bc:	e768      	b.n	801e890 <_vfiprintf_r+0x78>
 801e9be:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9c2:	460c      	mov	r4, r1
 801e9c4:	2001      	movs	r0, #1
 801e9c6:	e7a6      	b.n	801e916 <_vfiprintf_r+0xfe>
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	3401      	adds	r4, #1
 801e9cc:	9305      	str	r3, [sp, #20]
 801e9ce:	4619      	mov	r1, r3
 801e9d0:	f04f 0c0a 	mov.w	ip, #10
 801e9d4:	4620      	mov	r0, r4
 801e9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9da:	3a30      	subs	r2, #48	; 0x30
 801e9dc:	2a09      	cmp	r2, #9
 801e9de:	d903      	bls.n	801e9e8 <_vfiprintf_r+0x1d0>
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d0c6      	beq.n	801e972 <_vfiprintf_r+0x15a>
 801e9e4:	9105      	str	r1, [sp, #20]
 801e9e6:	e7c4      	b.n	801e972 <_vfiprintf_r+0x15a>
 801e9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9ec:	4604      	mov	r4, r0
 801e9ee:	2301      	movs	r3, #1
 801e9f0:	e7f0      	b.n	801e9d4 <_vfiprintf_r+0x1bc>
 801e9f2:	ab03      	add	r3, sp, #12
 801e9f4:	9300      	str	r3, [sp, #0]
 801e9f6:	462a      	mov	r2, r5
 801e9f8:	4b12      	ldr	r3, [pc, #72]	; (801ea44 <_vfiprintf_r+0x22c>)
 801e9fa:	a904      	add	r1, sp, #16
 801e9fc:	4630      	mov	r0, r6
 801e9fe:	f3af 8000 	nop.w
 801ea02:	4607      	mov	r7, r0
 801ea04:	1c78      	adds	r0, r7, #1
 801ea06:	d1d6      	bne.n	801e9b6 <_vfiprintf_r+0x19e>
 801ea08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea0a:	07d9      	lsls	r1, r3, #31
 801ea0c:	d405      	bmi.n	801ea1a <_vfiprintf_r+0x202>
 801ea0e:	89ab      	ldrh	r3, [r5, #12]
 801ea10:	059a      	lsls	r2, r3, #22
 801ea12:	d402      	bmi.n	801ea1a <_vfiprintf_r+0x202>
 801ea14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea16:	f7fe fcf5 	bl	801d404 <__retarget_lock_release_recursive>
 801ea1a:	89ab      	ldrh	r3, [r5, #12]
 801ea1c:	065b      	lsls	r3, r3, #25
 801ea1e:	f53f af1d 	bmi.w	801e85c <_vfiprintf_r+0x44>
 801ea22:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea24:	e71c      	b.n	801e860 <_vfiprintf_r+0x48>
 801ea26:	ab03      	add	r3, sp, #12
 801ea28:	9300      	str	r3, [sp, #0]
 801ea2a:	462a      	mov	r2, r5
 801ea2c:	4b05      	ldr	r3, [pc, #20]	; (801ea44 <_vfiprintf_r+0x22c>)
 801ea2e:	a904      	add	r1, sp, #16
 801ea30:	4630      	mov	r0, r6
 801ea32:	f000 f879 	bl	801eb28 <_printf_i>
 801ea36:	e7e4      	b.n	801ea02 <_vfiprintf_r+0x1ea>
 801ea38:	0802815c 	.word	0x0802815c
 801ea3c:	08028166 	.word	0x08028166
 801ea40:	00000000 	.word	0x00000000
 801ea44:	0801e7f3 	.word	0x0801e7f3
 801ea48:	08028162 	.word	0x08028162

0801ea4c <_printf_common>:
 801ea4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea50:	4616      	mov	r6, r2
 801ea52:	4699      	mov	r9, r3
 801ea54:	688a      	ldr	r2, [r1, #8]
 801ea56:	690b      	ldr	r3, [r1, #16]
 801ea58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ea5c:	4293      	cmp	r3, r2
 801ea5e:	bfb8      	it	lt
 801ea60:	4613      	movlt	r3, r2
 801ea62:	6033      	str	r3, [r6, #0]
 801ea64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ea68:	4607      	mov	r7, r0
 801ea6a:	460c      	mov	r4, r1
 801ea6c:	b10a      	cbz	r2, 801ea72 <_printf_common+0x26>
 801ea6e:	3301      	adds	r3, #1
 801ea70:	6033      	str	r3, [r6, #0]
 801ea72:	6823      	ldr	r3, [r4, #0]
 801ea74:	0699      	lsls	r1, r3, #26
 801ea76:	bf42      	ittt	mi
 801ea78:	6833      	ldrmi	r3, [r6, #0]
 801ea7a:	3302      	addmi	r3, #2
 801ea7c:	6033      	strmi	r3, [r6, #0]
 801ea7e:	6825      	ldr	r5, [r4, #0]
 801ea80:	f015 0506 	ands.w	r5, r5, #6
 801ea84:	d106      	bne.n	801ea94 <_printf_common+0x48>
 801ea86:	f104 0a19 	add.w	sl, r4, #25
 801ea8a:	68e3      	ldr	r3, [r4, #12]
 801ea8c:	6832      	ldr	r2, [r6, #0]
 801ea8e:	1a9b      	subs	r3, r3, r2
 801ea90:	42ab      	cmp	r3, r5
 801ea92:	dc26      	bgt.n	801eae2 <_printf_common+0x96>
 801ea94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ea98:	1e13      	subs	r3, r2, #0
 801ea9a:	6822      	ldr	r2, [r4, #0]
 801ea9c:	bf18      	it	ne
 801ea9e:	2301      	movne	r3, #1
 801eaa0:	0692      	lsls	r2, r2, #26
 801eaa2:	d42b      	bmi.n	801eafc <_printf_common+0xb0>
 801eaa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eaa8:	4649      	mov	r1, r9
 801eaaa:	4638      	mov	r0, r7
 801eaac:	47c0      	blx	r8
 801eaae:	3001      	adds	r0, #1
 801eab0:	d01e      	beq.n	801eaf0 <_printf_common+0xa4>
 801eab2:	6823      	ldr	r3, [r4, #0]
 801eab4:	6922      	ldr	r2, [r4, #16]
 801eab6:	f003 0306 	and.w	r3, r3, #6
 801eaba:	2b04      	cmp	r3, #4
 801eabc:	bf02      	ittt	eq
 801eabe:	68e5      	ldreq	r5, [r4, #12]
 801eac0:	6833      	ldreq	r3, [r6, #0]
 801eac2:	1aed      	subeq	r5, r5, r3
 801eac4:	68a3      	ldr	r3, [r4, #8]
 801eac6:	bf0c      	ite	eq
 801eac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eacc:	2500      	movne	r5, #0
 801eace:	4293      	cmp	r3, r2
 801ead0:	bfc4      	itt	gt
 801ead2:	1a9b      	subgt	r3, r3, r2
 801ead4:	18ed      	addgt	r5, r5, r3
 801ead6:	2600      	movs	r6, #0
 801ead8:	341a      	adds	r4, #26
 801eada:	42b5      	cmp	r5, r6
 801eadc:	d11a      	bne.n	801eb14 <_printf_common+0xc8>
 801eade:	2000      	movs	r0, #0
 801eae0:	e008      	b.n	801eaf4 <_printf_common+0xa8>
 801eae2:	2301      	movs	r3, #1
 801eae4:	4652      	mov	r2, sl
 801eae6:	4649      	mov	r1, r9
 801eae8:	4638      	mov	r0, r7
 801eaea:	47c0      	blx	r8
 801eaec:	3001      	adds	r0, #1
 801eaee:	d103      	bne.n	801eaf8 <_printf_common+0xac>
 801eaf0:	f04f 30ff 	mov.w	r0, #4294967295
 801eaf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eaf8:	3501      	adds	r5, #1
 801eafa:	e7c6      	b.n	801ea8a <_printf_common+0x3e>
 801eafc:	18e1      	adds	r1, r4, r3
 801eafe:	1c5a      	adds	r2, r3, #1
 801eb00:	2030      	movs	r0, #48	; 0x30
 801eb02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eb06:	4422      	add	r2, r4
 801eb08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801eb0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801eb10:	3302      	adds	r3, #2
 801eb12:	e7c7      	b.n	801eaa4 <_printf_common+0x58>
 801eb14:	2301      	movs	r3, #1
 801eb16:	4622      	mov	r2, r4
 801eb18:	4649      	mov	r1, r9
 801eb1a:	4638      	mov	r0, r7
 801eb1c:	47c0      	blx	r8
 801eb1e:	3001      	adds	r0, #1
 801eb20:	d0e6      	beq.n	801eaf0 <_printf_common+0xa4>
 801eb22:	3601      	adds	r6, #1
 801eb24:	e7d9      	b.n	801eada <_printf_common+0x8e>
	...

0801eb28 <_printf_i>:
 801eb28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb2c:	7e0f      	ldrb	r7, [r1, #24]
 801eb2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eb30:	2f78      	cmp	r7, #120	; 0x78
 801eb32:	4691      	mov	r9, r2
 801eb34:	4680      	mov	r8, r0
 801eb36:	460c      	mov	r4, r1
 801eb38:	469a      	mov	sl, r3
 801eb3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801eb3e:	d807      	bhi.n	801eb50 <_printf_i+0x28>
 801eb40:	2f62      	cmp	r7, #98	; 0x62
 801eb42:	d80a      	bhi.n	801eb5a <_printf_i+0x32>
 801eb44:	2f00      	cmp	r7, #0
 801eb46:	f000 80d4 	beq.w	801ecf2 <_printf_i+0x1ca>
 801eb4a:	2f58      	cmp	r7, #88	; 0x58
 801eb4c:	f000 80c0 	beq.w	801ecd0 <_printf_i+0x1a8>
 801eb50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eb54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801eb58:	e03a      	b.n	801ebd0 <_printf_i+0xa8>
 801eb5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801eb5e:	2b15      	cmp	r3, #21
 801eb60:	d8f6      	bhi.n	801eb50 <_printf_i+0x28>
 801eb62:	a101      	add	r1, pc, #4	; (adr r1, 801eb68 <_printf_i+0x40>)
 801eb64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801eb68:	0801ebc1 	.word	0x0801ebc1
 801eb6c:	0801ebd5 	.word	0x0801ebd5
 801eb70:	0801eb51 	.word	0x0801eb51
 801eb74:	0801eb51 	.word	0x0801eb51
 801eb78:	0801eb51 	.word	0x0801eb51
 801eb7c:	0801eb51 	.word	0x0801eb51
 801eb80:	0801ebd5 	.word	0x0801ebd5
 801eb84:	0801eb51 	.word	0x0801eb51
 801eb88:	0801eb51 	.word	0x0801eb51
 801eb8c:	0801eb51 	.word	0x0801eb51
 801eb90:	0801eb51 	.word	0x0801eb51
 801eb94:	0801ecd9 	.word	0x0801ecd9
 801eb98:	0801ec01 	.word	0x0801ec01
 801eb9c:	0801ec93 	.word	0x0801ec93
 801eba0:	0801eb51 	.word	0x0801eb51
 801eba4:	0801eb51 	.word	0x0801eb51
 801eba8:	0801ecfb 	.word	0x0801ecfb
 801ebac:	0801eb51 	.word	0x0801eb51
 801ebb0:	0801ec01 	.word	0x0801ec01
 801ebb4:	0801eb51 	.word	0x0801eb51
 801ebb8:	0801eb51 	.word	0x0801eb51
 801ebbc:	0801ec9b 	.word	0x0801ec9b
 801ebc0:	682b      	ldr	r3, [r5, #0]
 801ebc2:	1d1a      	adds	r2, r3, #4
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	602a      	str	r2, [r5, #0]
 801ebc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ebcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ebd0:	2301      	movs	r3, #1
 801ebd2:	e09f      	b.n	801ed14 <_printf_i+0x1ec>
 801ebd4:	6820      	ldr	r0, [r4, #0]
 801ebd6:	682b      	ldr	r3, [r5, #0]
 801ebd8:	0607      	lsls	r7, r0, #24
 801ebda:	f103 0104 	add.w	r1, r3, #4
 801ebde:	6029      	str	r1, [r5, #0]
 801ebe0:	d501      	bpl.n	801ebe6 <_printf_i+0xbe>
 801ebe2:	681e      	ldr	r6, [r3, #0]
 801ebe4:	e003      	b.n	801ebee <_printf_i+0xc6>
 801ebe6:	0646      	lsls	r6, r0, #25
 801ebe8:	d5fb      	bpl.n	801ebe2 <_printf_i+0xba>
 801ebea:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ebee:	2e00      	cmp	r6, #0
 801ebf0:	da03      	bge.n	801ebfa <_printf_i+0xd2>
 801ebf2:	232d      	movs	r3, #45	; 0x2d
 801ebf4:	4276      	negs	r6, r6
 801ebf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebfa:	485a      	ldr	r0, [pc, #360]	; (801ed64 <_printf_i+0x23c>)
 801ebfc:	230a      	movs	r3, #10
 801ebfe:	e012      	b.n	801ec26 <_printf_i+0xfe>
 801ec00:	682b      	ldr	r3, [r5, #0]
 801ec02:	6820      	ldr	r0, [r4, #0]
 801ec04:	1d19      	adds	r1, r3, #4
 801ec06:	6029      	str	r1, [r5, #0]
 801ec08:	0605      	lsls	r5, r0, #24
 801ec0a:	d501      	bpl.n	801ec10 <_printf_i+0xe8>
 801ec0c:	681e      	ldr	r6, [r3, #0]
 801ec0e:	e002      	b.n	801ec16 <_printf_i+0xee>
 801ec10:	0641      	lsls	r1, r0, #25
 801ec12:	d5fb      	bpl.n	801ec0c <_printf_i+0xe4>
 801ec14:	881e      	ldrh	r6, [r3, #0]
 801ec16:	4853      	ldr	r0, [pc, #332]	; (801ed64 <_printf_i+0x23c>)
 801ec18:	2f6f      	cmp	r7, #111	; 0x6f
 801ec1a:	bf0c      	ite	eq
 801ec1c:	2308      	moveq	r3, #8
 801ec1e:	230a      	movne	r3, #10
 801ec20:	2100      	movs	r1, #0
 801ec22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ec26:	6865      	ldr	r5, [r4, #4]
 801ec28:	60a5      	str	r5, [r4, #8]
 801ec2a:	2d00      	cmp	r5, #0
 801ec2c:	bfa2      	ittt	ge
 801ec2e:	6821      	ldrge	r1, [r4, #0]
 801ec30:	f021 0104 	bicge.w	r1, r1, #4
 801ec34:	6021      	strge	r1, [r4, #0]
 801ec36:	b90e      	cbnz	r6, 801ec3c <_printf_i+0x114>
 801ec38:	2d00      	cmp	r5, #0
 801ec3a:	d04b      	beq.n	801ecd4 <_printf_i+0x1ac>
 801ec3c:	4615      	mov	r5, r2
 801ec3e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ec42:	fb03 6711 	mls	r7, r3, r1, r6
 801ec46:	5dc7      	ldrb	r7, [r0, r7]
 801ec48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ec4c:	4637      	mov	r7, r6
 801ec4e:	42bb      	cmp	r3, r7
 801ec50:	460e      	mov	r6, r1
 801ec52:	d9f4      	bls.n	801ec3e <_printf_i+0x116>
 801ec54:	2b08      	cmp	r3, #8
 801ec56:	d10b      	bne.n	801ec70 <_printf_i+0x148>
 801ec58:	6823      	ldr	r3, [r4, #0]
 801ec5a:	07de      	lsls	r6, r3, #31
 801ec5c:	d508      	bpl.n	801ec70 <_printf_i+0x148>
 801ec5e:	6923      	ldr	r3, [r4, #16]
 801ec60:	6861      	ldr	r1, [r4, #4]
 801ec62:	4299      	cmp	r1, r3
 801ec64:	bfde      	ittt	le
 801ec66:	2330      	movle	r3, #48	; 0x30
 801ec68:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ec6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ec70:	1b52      	subs	r2, r2, r5
 801ec72:	6122      	str	r2, [r4, #16]
 801ec74:	f8cd a000 	str.w	sl, [sp]
 801ec78:	464b      	mov	r3, r9
 801ec7a:	aa03      	add	r2, sp, #12
 801ec7c:	4621      	mov	r1, r4
 801ec7e:	4640      	mov	r0, r8
 801ec80:	f7ff fee4 	bl	801ea4c <_printf_common>
 801ec84:	3001      	adds	r0, #1
 801ec86:	d14a      	bne.n	801ed1e <_printf_i+0x1f6>
 801ec88:	f04f 30ff 	mov.w	r0, #4294967295
 801ec8c:	b004      	add	sp, #16
 801ec8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec92:	6823      	ldr	r3, [r4, #0]
 801ec94:	f043 0320 	orr.w	r3, r3, #32
 801ec98:	6023      	str	r3, [r4, #0]
 801ec9a:	4833      	ldr	r0, [pc, #204]	; (801ed68 <_printf_i+0x240>)
 801ec9c:	2778      	movs	r7, #120	; 0x78
 801ec9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801eca2:	6823      	ldr	r3, [r4, #0]
 801eca4:	6829      	ldr	r1, [r5, #0]
 801eca6:	061f      	lsls	r7, r3, #24
 801eca8:	f851 6b04 	ldr.w	r6, [r1], #4
 801ecac:	d402      	bmi.n	801ecb4 <_printf_i+0x18c>
 801ecae:	065f      	lsls	r7, r3, #25
 801ecb0:	bf48      	it	mi
 801ecb2:	b2b6      	uxthmi	r6, r6
 801ecb4:	07df      	lsls	r7, r3, #31
 801ecb6:	bf48      	it	mi
 801ecb8:	f043 0320 	orrmi.w	r3, r3, #32
 801ecbc:	6029      	str	r1, [r5, #0]
 801ecbe:	bf48      	it	mi
 801ecc0:	6023      	strmi	r3, [r4, #0]
 801ecc2:	b91e      	cbnz	r6, 801eccc <_printf_i+0x1a4>
 801ecc4:	6823      	ldr	r3, [r4, #0]
 801ecc6:	f023 0320 	bic.w	r3, r3, #32
 801ecca:	6023      	str	r3, [r4, #0]
 801eccc:	2310      	movs	r3, #16
 801ecce:	e7a7      	b.n	801ec20 <_printf_i+0xf8>
 801ecd0:	4824      	ldr	r0, [pc, #144]	; (801ed64 <_printf_i+0x23c>)
 801ecd2:	e7e4      	b.n	801ec9e <_printf_i+0x176>
 801ecd4:	4615      	mov	r5, r2
 801ecd6:	e7bd      	b.n	801ec54 <_printf_i+0x12c>
 801ecd8:	682b      	ldr	r3, [r5, #0]
 801ecda:	6826      	ldr	r6, [r4, #0]
 801ecdc:	6961      	ldr	r1, [r4, #20]
 801ecde:	1d18      	adds	r0, r3, #4
 801ece0:	6028      	str	r0, [r5, #0]
 801ece2:	0635      	lsls	r5, r6, #24
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	d501      	bpl.n	801ecec <_printf_i+0x1c4>
 801ece8:	6019      	str	r1, [r3, #0]
 801ecea:	e002      	b.n	801ecf2 <_printf_i+0x1ca>
 801ecec:	0670      	lsls	r0, r6, #25
 801ecee:	d5fb      	bpl.n	801ece8 <_printf_i+0x1c0>
 801ecf0:	8019      	strh	r1, [r3, #0]
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	6123      	str	r3, [r4, #16]
 801ecf6:	4615      	mov	r5, r2
 801ecf8:	e7bc      	b.n	801ec74 <_printf_i+0x14c>
 801ecfa:	682b      	ldr	r3, [r5, #0]
 801ecfc:	1d1a      	adds	r2, r3, #4
 801ecfe:	602a      	str	r2, [r5, #0]
 801ed00:	681d      	ldr	r5, [r3, #0]
 801ed02:	6862      	ldr	r2, [r4, #4]
 801ed04:	2100      	movs	r1, #0
 801ed06:	4628      	mov	r0, r5
 801ed08:	f7e1 fa92 	bl	8000230 <memchr>
 801ed0c:	b108      	cbz	r0, 801ed12 <_printf_i+0x1ea>
 801ed0e:	1b40      	subs	r0, r0, r5
 801ed10:	6060      	str	r0, [r4, #4]
 801ed12:	6863      	ldr	r3, [r4, #4]
 801ed14:	6123      	str	r3, [r4, #16]
 801ed16:	2300      	movs	r3, #0
 801ed18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ed1c:	e7aa      	b.n	801ec74 <_printf_i+0x14c>
 801ed1e:	6923      	ldr	r3, [r4, #16]
 801ed20:	462a      	mov	r2, r5
 801ed22:	4649      	mov	r1, r9
 801ed24:	4640      	mov	r0, r8
 801ed26:	47d0      	blx	sl
 801ed28:	3001      	adds	r0, #1
 801ed2a:	d0ad      	beq.n	801ec88 <_printf_i+0x160>
 801ed2c:	6823      	ldr	r3, [r4, #0]
 801ed2e:	079b      	lsls	r3, r3, #30
 801ed30:	d413      	bmi.n	801ed5a <_printf_i+0x232>
 801ed32:	68e0      	ldr	r0, [r4, #12]
 801ed34:	9b03      	ldr	r3, [sp, #12]
 801ed36:	4298      	cmp	r0, r3
 801ed38:	bfb8      	it	lt
 801ed3a:	4618      	movlt	r0, r3
 801ed3c:	e7a6      	b.n	801ec8c <_printf_i+0x164>
 801ed3e:	2301      	movs	r3, #1
 801ed40:	4632      	mov	r2, r6
 801ed42:	4649      	mov	r1, r9
 801ed44:	4640      	mov	r0, r8
 801ed46:	47d0      	blx	sl
 801ed48:	3001      	adds	r0, #1
 801ed4a:	d09d      	beq.n	801ec88 <_printf_i+0x160>
 801ed4c:	3501      	adds	r5, #1
 801ed4e:	68e3      	ldr	r3, [r4, #12]
 801ed50:	9903      	ldr	r1, [sp, #12]
 801ed52:	1a5b      	subs	r3, r3, r1
 801ed54:	42ab      	cmp	r3, r5
 801ed56:	dcf2      	bgt.n	801ed3e <_printf_i+0x216>
 801ed58:	e7eb      	b.n	801ed32 <_printf_i+0x20a>
 801ed5a:	2500      	movs	r5, #0
 801ed5c:	f104 0619 	add.w	r6, r4, #25
 801ed60:	e7f5      	b.n	801ed4e <_printf_i+0x226>
 801ed62:	bf00      	nop
 801ed64:	0802816d 	.word	0x0802816d
 801ed68:	0802817e 	.word	0x0802817e

0801ed6c <__sflush_r>:
 801ed6c:	898a      	ldrh	r2, [r1, #12]
 801ed6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed72:	4605      	mov	r5, r0
 801ed74:	0710      	lsls	r0, r2, #28
 801ed76:	460c      	mov	r4, r1
 801ed78:	d458      	bmi.n	801ee2c <__sflush_r+0xc0>
 801ed7a:	684b      	ldr	r3, [r1, #4]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	dc05      	bgt.n	801ed8c <__sflush_r+0x20>
 801ed80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	dc02      	bgt.n	801ed8c <__sflush_r+0x20>
 801ed86:	2000      	movs	r0, #0
 801ed88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ed8e:	2e00      	cmp	r6, #0
 801ed90:	d0f9      	beq.n	801ed86 <__sflush_r+0x1a>
 801ed92:	2300      	movs	r3, #0
 801ed94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ed98:	682f      	ldr	r7, [r5, #0]
 801ed9a:	6a21      	ldr	r1, [r4, #32]
 801ed9c:	602b      	str	r3, [r5, #0]
 801ed9e:	d032      	beq.n	801ee06 <__sflush_r+0x9a>
 801eda0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eda2:	89a3      	ldrh	r3, [r4, #12]
 801eda4:	075a      	lsls	r2, r3, #29
 801eda6:	d505      	bpl.n	801edb4 <__sflush_r+0x48>
 801eda8:	6863      	ldr	r3, [r4, #4]
 801edaa:	1ac0      	subs	r0, r0, r3
 801edac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801edae:	b10b      	cbz	r3, 801edb4 <__sflush_r+0x48>
 801edb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801edb2:	1ac0      	subs	r0, r0, r3
 801edb4:	2300      	movs	r3, #0
 801edb6:	4602      	mov	r2, r0
 801edb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801edba:	6a21      	ldr	r1, [r4, #32]
 801edbc:	4628      	mov	r0, r5
 801edbe:	47b0      	blx	r6
 801edc0:	1c43      	adds	r3, r0, #1
 801edc2:	89a3      	ldrh	r3, [r4, #12]
 801edc4:	d106      	bne.n	801edd4 <__sflush_r+0x68>
 801edc6:	6829      	ldr	r1, [r5, #0]
 801edc8:	291d      	cmp	r1, #29
 801edca:	d82b      	bhi.n	801ee24 <__sflush_r+0xb8>
 801edcc:	4a29      	ldr	r2, [pc, #164]	; (801ee74 <__sflush_r+0x108>)
 801edce:	410a      	asrs	r2, r1
 801edd0:	07d6      	lsls	r6, r2, #31
 801edd2:	d427      	bmi.n	801ee24 <__sflush_r+0xb8>
 801edd4:	2200      	movs	r2, #0
 801edd6:	6062      	str	r2, [r4, #4]
 801edd8:	04d9      	lsls	r1, r3, #19
 801edda:	6922      	ldr	r2, [r4, #16]
 801eddc:	6022      	str	r2, [r4, #0]
 801edde:	d504      	bpl.n	801edea <__sflush_r+0x7e>
 801ede0:	1c42      	adds	r2, r0, #1
 801ede2:	d101      	bne.n	801ede8 <__sflush_r+0x7c>
 801ede4:	682b      	ldr	r3, [r5, #0]
 801ede6:	b903      	cbnz	r3, 801edea <__sflush_r+0x7e>
 801ede8:	6560      	str	r0, [r4, #84]	; 0x54
 801edea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801edec:	602f      	str	r7, [r5, #0]
 801edee:	2900      	cmp	r1, #0
 801edf0:	d0c9      	beq.n	801ed86 <__sflush_r+0x1a>
 801edf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801edf6:	4299      	cmp	r1, r3
 801edf8:	d002      	beq.n	801ee00 <__sflush_r+0x94>
 801edfa:	4628      	mov	r0, r5
 801edfc:	f7fe fb12 	bl	801d424 <_free_r>
 801ee00:	2000      	movs	r0, #0
 801ee02:	6360      	str	r0, [r4, #52]	; 0x34
 801ee04:	e7c0      	b.n	801ed88 <__sflush_r+0x1c>
 801ee06:	2301      	movs	r3, #1
 801ee08:	4628      	mov	r0, r5
 801ee0a:	47b0      	blx	r6
 801ee0c:	1c41      	adds	r1, r0, #1
 801ee0e:	d1c8      	bne.n	801eda2 <__sflush_r+0x36>
 801ee10:	682b      	ldr	r3, [r5, #0]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d0c5      	beq.n	801eda2 <__sflush_r+0x36>
 801ee16:	2b1d      	cmp	r3, #29
 801ee18:	d001      	beq.n	801ee1e <__sflush_r+0xb2>
 801ee1a:	2b16      	cmp	r3, #22
 801ee1c:	d101      	bne.n	801ee22 <__sflush_r+0xb6>
 801ee1e:	602f      	str	r7, [r5, #0]
 801ee20:	e7b1      	b.n	801ed86 <__sflush_r+0x1a>
 801ee22:	89a3      	ldrh	r3, [r4, #12]
 801ee24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee28:	81a3      	strh	r3, [r4, #12]
 801ee2a:	e7ad      	b.n	801ed88 <__sflush_r+0x1c>
 801ee2c:	690f      	ldr	r7, [r1, #16]
 801ee2e:	2f00      	cmp	r7, #0
 801ee30:	d0a9      	beq.n	801ed86 <__sflush_r+0x1a>
 801ee32:	0793      	lsls	r3, r2, #30
 801ee34:	680e      	ldr	r6, [r1, #0]
 801ee36:	bf08      	it	eq
 801ee38:	694b      	ldreq	r3, [r1, #20]
 801ee3a:	600f      	str	r7, [r1, #0]
 801ee3c:	bf18      	it	ne
 801ee3e:	2300      	movne	r3, #0
 801ee40:	eba6 0807 	sub.w	r8, r6, r7
 801ee44:	608b      	str	r3, [r1, #8]
 801ee46:	f1b8 0f00 	cmp.w	r8, #0
 801ee4a:	dd9c      	ble.n	801ed86 <__sflush_r+0x1a>
 801ee4c:	6a21      	ldr	r1, [r4, #32]
 801ee4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ee50:	4643      	mov	r3, r8
 801ee52:	463a      	mov	r2, r7
 801ee54:	4628      	mov	r0, r5
 801ee56:	47b0      	blx	r6
 801ee58:	2800      	cmp	r0, #0
 801ee5a:	dc06      	bgt.n	801ee6a <__sflush_r+0xfe>
 801ee5c:	89a3      	ldrh	r3, [r4, #12]
 801ee5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee62:	81a3      	strh	r3, [r4, #12]
 801ee64:	f04f 30ff 	mov.w	r0, #4294967295
 801ee68:	e78e      	b.n	801ed88 <__sflush_r+0x1c>
 801ee6a:	4407      	add	r7, r0
 801ee6c:	eba8 0800 	sub.w	r8, r8, r0
 801ee70:	e7e9      	b.n	801ee46 <__sflush_r+0xda>
 801ee72:	bf00      	nop
 801ee74:	dfbffffe 	.word	0xdfbffffe

0801ee78 <_fflush_r>:
 801ee78:	b538      	push	{r3, r4, r5, lr}
 801ee7a:	690b      	ldr	r3, [r1, #16]
 801ee7c:	4605      	mov	r5, r0
 801ee7e:	460c      	mov	r4, r1
 801ee80:	b913      	cbnz	r3, 801ee88 <_fflush_r+0x10>
 801ee82:	2500      	movs	r5, #0
 801ee84:	4628      	mov	r0, r5
 801ee86:	bd38      	pop	{r3, r4, r5, pc}
 801ee88:	b118      	cbz	r0, 801ee92 <_fflush_r+0x1a>
 801ee8a:	6a03      	ldr	r3, [r0, #32]
 801ee8c:	b90b      	cbnz	r3, 801ee92 <_fflush_r+0x1a>
 801ee8e:	f7fe f913 	bl	801d0b8 <__sinit>
 801ee92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d0f3      	beq.n	801ee82 <_fflush_r+0xa>
 801ee9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ee9c:	07d0      	lsls	r0, r2, #31
 801ee9e:	d404      	bmi.n	801eeaa <_fflush_r+0x32>
 801eea0:	0599      	lsls	r1, r3, #22
 801eea2:	d402      	bmi.n	801eeaa <_fflush_r+0x32>
 801eea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eea6:	f7fe faac 	bl	801d402 <__retarget_lock_acquire_recursive>
 801eeaa:	4628      	mov	r0, r5
 801eeac:	4621      	mov	r1, r4
 801eeae:	f7ff ff5d 	bl	801ed6c <__sflush_r>
 801eeb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eeb4:	07da      	lsls	r2, r3, #31
 801eeb6:	4605      	mov	r5, r0
 801eeb8:	d4e4      	bmi.n	801ee84 <_fflush_r+0xc>
 801eeba:	89a3      	ldrh	r3, [r4, #12]
 801eebc:	059b      	lsls	r3, r3, #22
 801eebe:	d4e1      	bmi.n	801ee84 <_fflush_r+0xc>
 801eec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eec2:	f7fe fa9f 	bl	801d404 <__retarget_lock_release_recursive>
 801eec6:	e7dd      	b.n	801ee84 <_fflush_r+0xc>

0801eec8 <__swbuf_r>:
 801eec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeca:	460e      	mov	r6, r1
 801eecc:	4614      	mov	r4, r2
 801eece:	4605      	mov	r5, r0
 801eed0:	b118      	cbz	r0, 801eeda <__swbuf_r+0x12>
 801eed2:	6a03      	ldr	r3, [r0, #32]
 801eed4:	b90b      	cbnz	r3, 801eeda <__swbuf_r+0x12>
 801eed6:	f7fe f8ef 	bl	801d0b8 <__sinit>
 801eeda:	69a3      	ldr	r3, [r4, #24]
 801eedc:	60a3      	str	r3, [r4, #8]
 801eede:	89a3      	ldrh	r3, [r4, #12]
 801eee0:	071a      	lsls	r2, r3, #28
 801eee2:	d525      	bpl.n	801ef30 <__swbuf_r+0x68>
 801eee4:	6923      	ldr	r3, [r4, #16]
 801eee6:	b31b      	cbz	r3, 801ef30 <__swbuf_r+0x68>
 801eee8:	6823      	ldr	r3, [r4, #0]
 801eeea:	6922      	ldr	r2, [r4, #16]
 801eeec:	1a98      	subs	r0, r3, r2
 801eeee:	6963      	ldr	r3, [r4, #20]
 801eef0:	b2f6      	uxtb	r6, r6
 801eef2:	4283      	cmp	r3, r0
 801eef4:	4637      	mov	r7, r6
 801eef6:	dc04      	bgt.n	801ef02 <__swbuf_r+0x3a>
 801eef8:	4621      	mov	r1, r4
 801eefa:	4628      	mov	r0, r5
 801eefc:	f7ff ffbc 	bl	801ee78 <_fflush_r>
 801ef00:	b9e0      	cbnz	r0, 801ef3c <__swbuf_r+0x74>
 801ef02:	68a3      	ldr	r3, [r4, #8]
 801ef04:	3b01      	subs	r3, #1
 801ef06:	60a3      	str	r3, [r4, #8]
 801ef08:	6823      	ldr	r3, [r4, #0]
 801ef0a:	1c5a      	adds	r2, r3, #1
 801ef0c:	6022      	str	r2, [r4, #0]
 801ef0e:	701e      	strb	r6, [r3, #0]
 801ef10:	6962      	ldr	r2, [r4, #20]
 801ef12:	1c43      	adds	r3, r0, #1
 801ef14:	429a      	cmp	r2, r3
 801ef16:	d004      	beq.n	801ef22 <__swbuf_r+0x5a>
 801ef18:	89a3      	ldrh	r3, [r4, #12]
 801ef1a:	07db      	lsls	r3, r3, #31
 801ef1c:	d506      	bpl.n	801ef2c <__swbuf_r+0x64>
 801ef1e:	2e0a      	cmp	r6, #10
 801ef20:	d104      	bne.n	801ef2c <__swbuf_r+0x64>
 801ef22:	4621      	mov	r1, r4
 801ef24:	4628      	mov	r0, r5
 801ef26:	f7ff ffa7 	bl	801ee78 <_fflush_r>
 801ef2a:	b938      	cbnz	r0, 801ef3c <__swbuf_r+0x74>
 801ef2c:	4638      	mov	r0, r7
 801ef2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef30:	4621      	mov	r1, r4
 801ef32:	4628      	mov	r0, r5
 801ef34:	f000 f806 	bl	801ef44 <__swsetup_r>
 801ef38:	2800      	cmp	r0, #0
 801ef3a:	d0d5      	beq.n	801eee8 <__swbuf_r+0x20>
 801ef3c:	f04f 37ff 	mov.w	r7, #4294967295
 801ef40:	e7f4      	b.n	801ef2c <__swbuf_r+0x64>
	...

0801ef44 <__swsetup_r>:
 801ef44:	b538      	push	{r3, r4, r5, lr}
 801ef46:	4b2a      	ldr	r3, [pc, #168]	; (801eff0 <__swsetup_r+0xac>)
 801ef48:	4605      	mov	r5, r0
 801ef4a:	6818      	ldr	r0, [r3, #0]
 801ef4c:	460c      	mov	r4, r1
 801ef4e:	b118      	cbz	r0, 801ef58 <__swsetup_r+0x14>
 801ef50:	6a03      	ldr	r3, [r0, #32]
 801ef52:	b90b      	cbnz	r3, 801ef58 <__swsetup_r+0x14>
 801ef54:	f7fe f8b0 	bl	801d0b8 <__sinit>
 801ef58:	89a3      	ldrh	r3, [r4, #12]
 801ef5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ef5e:	0718      	lsls	r0, r3, #28
 801ef60:	d422      	bmi.n	801efa8 <__swsetup_r+0x64>
 801ef62:	06d9      	lsls	r1, r3, #27
 801ef64:	d407      	bmi.n	801ef76 <__swsetup_r+0x32>
 801ef66:	2309      	movs	r3, #9
 801ef68:	602b      	str	r3, [r5, #0]
 801ef6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ef6e:	81a3      	strh	r3, [r4, #12]
 801ef70:	f04f 30ff 	mov.w	r0, #4294967295
 801ef74:	e034      	b.n	801efe0 <__swsetup_r+0x9c>
 801ef76:	0758      	lsls	r0, r3, #29
 801ef78:	d512      	bpl.n	801efa0 <__swsetup_r+0x5c>
 801ef7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ef7c:	b141      	cbz	r1, 801ef90 <__swsetup_r+0x4c>
 801ef7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ef82:	4299      	cmp	r1, r3
 801ef84:	d002      	beq.n	801ef8c <__swsetup_r+0x48>
 801ef86:	4628      	mov	r0, r5
 801ef88:	f7fe fa4c 	bl	801d424 <_free_r>
 801ef8c:	2300      	movs	r3, #0
 801ef8e:	6363      	str	r3, [r4, #52]	; 0x34
 801ef90:	89a3      	ldrh	r3, [r4, #12]
 801ef92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ef96:	81a3      	strh	r3, [r4, #12]
 801ef98:	2300      	movs	r3, #0
 801ef9a:	6063      	str	r3, [r4, #4]
 801ef9c:	6923      	ldr	r3, [r4, #16]
 801ef9e:	6023      	str	r3, [r4, #0]
 801efa0:	89a3      	ldrh	r3, [r4, #12]
 801efa2:	f043 0308 	orr.w	r3, r3, #8
 801efa6:	81a3      	strh	r3, [r4, #12]
 801efa8:	6923      	ldr	r3, [r4, #16]
 801efaa:	b94b      	cbnz	r3, 801efc0 <__swsetup_r+0x7c>
 801efac:	89a3      	ldrh	r3, [r4, #12]
 801efae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801efb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801efb6:	d003      	beq.n	801efc0 <__swsetup_r+0x7c>
 801efb8:	4621      	mov	r1, r4
 801efba:	4628      	mov	r0, r5
 801efbc:	f000 f840 	bl	801f040 <__smakebuf_r>
 801efc0:	89a0      	ldrh	r0, [r4, #12]
 801efc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801efc6:	f010 0301 	ands.w	r3, r0, #1
 801efca:	d00a      	beq.n	801efe2 <__swsetup_r+0x9e>
 801efcc:	2300      	movs	r3, #0
 801efce:	60a3      	str	r3, [r4, #8]
 801efd0:	6963      	ldr	r3, [r4, #20]
 801efd2:	425b      	negs	r3, r3
 801efd4:	61a3      	str	r3, [r4, #24]
 801efd6:	6923      	ldr	r3, [r4, #16]
 801efd8:	b943      	cbnz	r3, 801efec <__swsetup_r+0xa8>
 801efda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801efde:	d1c4      	bne.n	801ef6a <__swsetup_r+0x26>
 801efe0:	bd38      	pop	{r3, r4, r5, pc}
 801efe2:	0781      	lsls	r1, r0, #30
 801efe4:	bf58      	it	pl
 801efe6:	6963      	ldrpl	r3, [r4, #20]
 801efe8:	60a3      	str	r3, [r4, #8]
 801efea:	e7f4      	b.n	801efd6 <__swsetup_r+0x92>
 801efec:	2000      	movs	r0, #0
 801efee:	e7f7      	b.n	801efe0 <__swsetup_r+0x9c>
 801eff0:	20001274 	.word	0x20001274

0801eff4 <__swhatbuf_r>:
 801eff4:	b570      	push	{r4, r5, r6, lr}
 801eff6:	460c      	mov	r4, r1
 801eff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801effc:	2900      	cmp	r1, #0
 801effe:	b096      	sub	sp, #88	; 0x58
 801f000:	4615      	mov	r5, r2
 801f002:	461e      	mov	r6, r3
 801f004:	da0d      	bge.n	801f022 <__swhatbuf_r+0x2e>
 801f006:	89a3      	ldrh	r3, [r4, #12]
 801f008:	f013 0f80 	tst.w	r3, #128	; 0x80
 801f00c:	f04f 0100 	mov.w	r1, #0
 801f010:	bf0c      	ite	eq
 801f012:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801f016:	2340      	movne	r3, #64	; 0x40
 801f018:	2000      	movs	r0, #0
 801f01a:	6031      	str	r1, [r6, #0]
 801f01c:	602b      	str	r3, [r5, #0]
 801f01e:	b016      	add	sp, #88	; 0x58
 801f020:	bd70      	pop	{r4, r5, r6, pc}
 801f022:	466a      	mov	r2, sp
 801f024:	f000 f848 	bl	801f0b8 <_fstat_r>
 801f028:	2800      	cmp	r0, #0
 801f02a:	dbec      	blt.n	801f006 <__swhatbuf_r+0x12>
 801f02c:	9901      	ldr	r1, [sp, #4]
 801f02e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801f032:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801f036:	4259      	negs	r1, r3
 801f038:	4159      	adcs	r1, r3
 801f03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f03e:	e7eb      	b.n	801f018 <__swhatbuf_r+0x24>

0801f040 <__smakebuf_r>:
 801f040:	898b      	ldrh	r3, [r1, #12]
 801f042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f044:	079d      	lsls	r5, r3, #30
 801f046:	4606      	mov	r6, r0
 801f048:	460c      	mov	r4, r1
 801f04a:	d507      	bpl.n	801f05c <__smakebuf_r+0x1c>
 801f04c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f050:	6023      	str	r3, [r4, #0]
 801f052:	6123      	str	r3, [r4, #16]
 801f054:	2301      	movs	r3, #1
 801f056:	6163      	str	r3, [r4, #20]
 801f058:	b002      	add	sp, #8
 801f05a:	bd70      	pop	{r4, r5, r6, pc}
 801f05c:	ab01      	add	r3, sp, #4
 801f05e:	466a      	mov	r2, sp
 801f060:	f7ff ffc8 	bl	801eff4 <__swhatbuf_r>
 801f064:	9900      	ldr	r1, [sp, #0]
 801f066:	4605      	mov	r5, r0
 801f068:	4630      	mov	r0, r6
 801f06a:	f7fd f8c3 	bl	801c1f4 <_malloc_r>
 801f06e:	b948      	cbnz	r0, 801f084 <__smakebuf_r+0x44>
 801f070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f074:	059a      	lsls	r2, r3, #22
 801f076:	d4ef      	bmi.n	801f058 <__smakebuf_r+0x18>
 801f078:	f023 0303 	bic.w	r3, r3, #3
 801f07c:	f043 0302 	orr.w	r3, r3, #2
 801f080:	81a3      	strh	r3, [r4, #12]
 801f082:	e7e3      	b.n	801f04c <__smakebuf_r+0xc>
 801f084:	89a3      	ldrh	r3, [r4, #12]
 801f086:	6020      	str	r0, [r4, #0]
 801f088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f08c:	81a3      	strh	r3, [r4, #12]
 801f08e:	9b00      	ldr	r3, [sp, #0]
 801f090:	6163      	str	r3, [r4, #20]
 801f092:	9b01      	ldr	r3, [sp, #4]
 801f094:	6120      	str	r0, [r4, #16]
 801f096:	b15b      	cbz	r3, 801f0b0 <__smakebuf_r+0x70>
 801f098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f09c:	4630      	mov	r0, r6
 801f09e:	f000 f81d 	bl	801f0dc <_isatty_r>
 801f0a2:	b128      	cbz	r0, 801f0b0 <__smakebuf_r+0x70>
 801f0a4:	89a3      	ldrh	r3, [r4, #12]
 801f0a6:	f023 0303 	bic.w	r3, r3, #3
 801f0aa:	f043 0301 	orr.w	r3, r3, #1
 801f0ae:	81a3      	strh	r3, [r4, #12]
 801f0b0:	89a3      	ldrh	r3, [r4, #12]
 801f0b2:	431d      	orrs	r5, r3
 801f0b4:	81a5      	strh	r5, [r4, #12]
 801f0b6:	e7cf      	b.n	801f058 <__smakebuf_r+0x18>

0801f0b8 <_fstat_r>:
 801f0b8:	b538      	push	{r3, r4, r5, lr}
 801f0ba:	4d07      	ldr	r5, [pc, #28]	; (801f0d8 <_fstat_r+0x20>)
 801f0bc:	2300      	movs	r3, #0
 801f0be:	4604      	mov	r4, r0
 801f0c0:	4608      	mov	r0, r1
 801f0c2:	4611      	mov	r1, r2
 801f0c4:	602b      	str	r3, [r5, #0]
 801f0c6:	f7f1 f924 	bl	8010312 <_fstat>
 801f0ca:	1c43      	adds	r3, r0, #1
 801f0cc:	d102      	bne.n	801f0d4 <_fstat_r+0x1c>
 801f0ce:	682b      	ldr	r3, [r5, #0]
 801f0d0:	b103      	cbz	r3, 801f0d4 <_fstat_r+0x1c>
 801f0d2:	6023      	str	r3, [r4, #0]
 801f0d4:	bd38      	pop	{r3, r4, r5, pc}
 801f0d6:	bf00      	nop
 801f0d8:	200016d4 	.word	0x200016d4

0801f0dc <_isatty_r>:
 801f0dc:	b538      	push	{r3, r4, r5, lr}
 801f0de:	4d06      	ldr	r5, [pc, #24]	; (801f0f8 <_isatty_r+0x1c>)
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	4604      	mov	r4, r0
 801f0e4:	4608      	mov	r0, r1
 801f0e6:	602b      	str	r3, [r5, #0]
 801f0e8:	f7f1 f923 	bl	8010332 <_isatty>
 801f0ec:	1c43      	adds	r3, r0, #1
 801f0ee:	d102      	bne.n	801f0f6 <_isatty_r+0x1a>
 801f0f0:	682b      	ldr	r3, [r5, #0]
 801f0f2:	b103      	cbz	r3, 801f0f6 <_isatty_r+0x1a>
 801f0f4:	6023      	str	r3, [r4, #0]
 801f0f6:	bd38      	pop	{r3, r4, r5, pc}
 801f0f8:	200016d4 	.word	0x200016d4

0801f0fc <_init>:
 801f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fe:	bf00      	nop
 801f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f102:	bc08      	pop	{r3}
 801f104:	469e      	mov	lr, r3
 801f106:	4770      	bx	lr

0801f108 <_fini>:
 801f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f10a:	bf00      	nop
 801f10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f10e:	bc08      	pop	{r3}
 801f110:	469e      	mov	lr, r3
 801f112:	4770      	bx	lr
