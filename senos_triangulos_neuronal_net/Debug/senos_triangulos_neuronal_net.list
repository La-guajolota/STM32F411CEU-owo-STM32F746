
senos_triangulos_neuronal_net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fbac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009410  0801fd80  0801fd80  0002fd80  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029190  08029190  00045390  2**0
                  CONTENTS
  4 .ARM          00000008  08029190  08029190  00039190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029198  08029198  00045390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08029198  08029198  00039198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080291a4  080291a4  000391a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005390  20000000  080291ac  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20005390  0802e53c  00045390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057f4  0802e53c  000457f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00045390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000453c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0017e7eb  00000000  00000000  00045403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000107a4  00000000  00000000  001c3bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005098  00000000  00000000  001d4398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003e59  00000000  00000000  001d9430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a3bf  00000000  00000000  001dd289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005f8c3  00000000  00000000  00217648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f120a  00000000  00000000  00276f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00018f28  00000000  00000000  00468118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00481040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20005390 	.word	0x20005390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fd64 	.word	0x0801fd64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20005394 	.word	0x20005394
 800020c:	0801fd64 	.word	0x0801fd64

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9f1 	b.w	80010ec <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a6 	b.w	80010ec <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	460f      	mov	r7, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0xe2>
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	b143      	cbz	r3, 8000e52 <__udivmoddi4+0x2e>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0220 	rsb	r2, r3, #32
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	409c      	lsls	r4, r3
 8000e52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e56:	fa1f f58c 	uxth.w	r5, ip
 8000e5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e5e:	0c22      	lsrs	r2, r4, #16
 8000e60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e68:	fb01 f005 	mul.w	r0, r1, r5
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e78:	f080 811c 	bcs.w	80010b4 <__udivmoddi4+0x290>
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	f240 8119 	bls.w	80010b4 <__udivmoddi4+0x290>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4462      	add	r2, ip
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	b2a4      	uxth	r4, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e96:	fb00 f505 	mul.w	r5, r0, r5
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d90a      	bls.n	8000eb4 <__udivmoddi4+0x90>
 8000e9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea6:	f080 8107 	bcs.w	80010b8 <__udivmoddi4+0x294>
 8000eaa:	42a5      	cmp	r5, r4
 8000eac:	f240 8104 	bls.w	80010b8 <__udivmoddi4+0x294>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11e      	cbz	r6, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40dc      	lsrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0xbc>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	f000 80ed 	beq.w	80010ae <__udivmoddi4+0x28a>
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eda:	4608      	mov	r0, r1
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	fab3 f183 	clz	r1, r3
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d149      	bne.n	8000f7c <__udivmoddi4+0x158>
 8000ee8:	42ab      	cmp	r3, r5
 8000eea:	d302      	bcc.n	8000ef2 <__udivmoddi4+0xce>
 8000eec:	4282      	cmp	r2, r0
 8000eee:	f200 80f8 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d0e2      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	e9c6 4700 	strd	r4, r7, [r6]
 8000f04:	e7df      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f06:	b902      	cbnz	r2, 8000f0a <__udivmoddi4+0xe6>
 8000f08:	deff      	udf	#255	; 0xff
 8000f0a:	fab2 f382 	clz	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8090 	bne.w	8001034 <__udivmoddi4+0x210>
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1a:	fa1f fe8c 	uxth.w	lr, ip
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f24:	fb07 2015 	mls	r0, r7, r5, r2
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f2e:	fb0e f005 	mul.w	r0, lr, r5
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x124>
 8000f36:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x122>
 8000f40:	4290      	cmp	r0, r2
 8000f42:	f200 80cb 	bhi.w	80010dc <__udivmoddi4+0x2b8>
 8000f46:	4645      	mov	r5, r8
 8000f48:	1a12      	subs	r2, r2, r0
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f50:	fb07 2210 	mls	r2, r7, r0, r2
 8000f54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f58:	fb0e fe00 	mul.w	lr, lr, r0
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x14e>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x14c>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f200 80bb 	bhi.w	80010e6 <__udivmoddi4+0x2c2>
 8000f70:	4610      	mov	r0, r2
 8000f72:	eba4 040e 	sub.w	r4, r4, lr
 8000f76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7a:	e79f      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f7c:	f1c1 0720 	rsb	r7, r1, #32
 8000f80:	408b      	lsls	r3, r1
 8000f82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f92:	40fd      	lsrs	r5, r7
 8000f94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f9e:	fa1f fe8c 	uxth.w	lr, ip
 8000fa2:	fb09 5518 	mls	r5, r9, r8, r5
 8000fa6:	0c1c      	lsrs	r4, r3, #16
 8000fa8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fac:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000fba:	d90b      	bls.n	8000fd4 <__udivmoddi4+0x1b0>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc4:	f080 8088 	bcs.w	80010d8 <__udivmoddi4+0x2b4>
 8000fc8:	42a5      	cmp	r5, r4
 8000fca:	f240 8085 	bls.w	80010d8 <__udivmoddi4+0x2b4>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	b29d      	uxth	r5, r3
 8000fd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x1da>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ff4:	d26c      	bcs.n	80010d0 <__udivmoddi4+0x2ac>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	d96a      	bls.n	80010d0 <__udivmoddi4+0x2ac>
 8000ffa:	3b02      	subs	r3, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001002:	fba3 9502 	umull	r9, r5, r3, r2
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	42ac      	cmp	r4, r5
 800100c:	46c8      	mov	r8, r9
 800100e:	46ae      	mov	lr, r5
 8001010:	d356      	bcc.n	80010c0 <__udivmoddi4+0x29c>
 8001012:	d053      	beq.n	80010bc <__udivmoddi4+0x298>
 8001014:	b156      	cbz	r6, 800102c <__udivmoddi4+0x208>
 8001016:	ebb0 0208 	subs.w	r2, r0, r8
 800101a:	eb64 040e 	sbc.w	r4, r4, lr
 800101e:	fa04 f707 	lsl.w	r7, r4, r7
 8001022:	40ca      	lsrs	r2, r1
 8001024:	40cc      	lsrs	r4, r1
 8001026:	4317      	orrs	r7, r2
 8001028:	e9c6 7400 	strd	r7, r4, [r6]
 800102c:	4618      	mov	r0, r3
 800102e:	2100      	movs	r1, #0
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	f1c3 0120 	rsb	r1, r3, #32
 8001038:	fa02 fc03 	lsl.w	ip, r2, r3
 800103c:	fa20 f201 	lsr.w	r2, r0, r1
 8001040:	fa25 f101 	lsr.w	r1, r5, r1
 8001044:	409d      	lsls	r5, r3
 8001046:	432a      	orrs	r2, r5
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fbb1 f0f7 	udiv	r0, r1, r7
 8001054:	fb07 1510 	mls	r5, r7, r0, r1
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800105e:	fb00 f50e 	mul.w	r5, r0, lr
 8001062:	428d      	cmp	r5, r1
 8001064:	fa04 f403 	lsl.w	r4, r4, r3
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x258>
 800106a:	eb1c 0101 	adds.w	r1, ip, r1
 800106e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001072:	d22f      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 8001074:	428d      	cmp	r5, r1
 8001076:	d92d      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 8001078:	3802      	subs	r0, #2
 800107a:	4461      	add	r1, ip
 800107c:	1b49      	subs	r1, r1, r5
 800107e:	b292      	uxth	r2, r2
 8001080:	fbb1 f5f7 	udiv	r5, r1, r7
 8001084:	fb07 1115 	mls	r1, r7, r5, r1
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	fb05 f10e 	mul.w	r1, r5, lr
 8001090:	4291      	cmp	r1, r2
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x282>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f105 38ff 	add.w	r8, r5, #4294967295
 800109c:	d216      	bcs.n	80010cc <__udivmoddi4+0x2a8>
 800109e:	4291      	cmp	r1, r2
 80010a0:	d914      	bls.n	80010cc <__udivmoddi4+0x2a8>
 80010a2:	3d02      	subs	r5, #2
 80010a4:	4462      	add	r2, ip
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010ac:	e738      	b.n	8000f20 <__udivmoddi4+0xfc>
 80010ae:	4631      	mov	r1, r6
 80010b0:	4630      	mov	r0, r6
 80010b2:	e708      	b.n	8000ec6 <__udivmoddi4+0xa2>
 80010b4:	4639      	mov	r1, r7
 80010b6:	e6e6      	b.n	8000e86 <__udivmoddi4+0x62>
 80010b8:	4610      	mov	r0, r2
 80010ba:	e6fb      	b.n	8000eb4 <__udivmoddi4+0x90>
 80010bc:	4548      	cmp	r0, r9
 80010be:	d2a9      	bcs.n	8001014 <__udivmoddi4+0x1f0>
 80010c0:	ebb9 0802 	subs.w	r8, r9, r2
 80010c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c8:	3b01      	subs	r3, #1
 80010ca:	e7a3      	b.n	8001014 <__udivmoddi4+0x1f0>
 80010cc:	4645      	mov	r5, r8
 80010ce:	e7ea      	b.n	80010a6 <__udivmoddi4+0x282>
 80010d0:	462b      	mov	r3, r5
 80010d2:	e794      	b.n	8000ffe <__udivmoddi4+0x1da>
 80010d4:	4640      	mov	r0, r8
 80010d6:	e7d1      	b.n	800107c <__udivmoddi4+0x258>
 80010d8:	46d0      	mov	r8, sl
 80010da:	e77b      	b.n	8000fd4 <__udivmoddi4+0x1b0>
 80010dc:	3d02      	subs	r5, #2
 80010de:	4462      	add	r2, ip
 80010e0:	e732      	b.n	8000f48 <__udivmoddi4+0x124>
 80010e2:	4608      	mov	r0, r1
 80010e4:	e70a      	b.n	8000efc <__udivmoddi4+0xd8>
 80010e6:	4464      	add	r4, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e742      	b.n	8000f72 <__udivmoddi4+0x14e>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	ed97 0a01 	vldr	s0, [r7, #4]
 800111e:	f018 fd1f 	bl	8019b60 <expf>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	eef0 7ae7 	vabs.f32	s15, s15
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
 800115a:	ed97 0a01 	vldr	s0, [r7, #4]
 800115e:	f018 fd35 	bl	8019bcc <logf>
 8001162:	eef0 7a40 	vmov.f32	s15, s0
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a01 	vstr	s0, [r7, #4]
 800117a:	ed97 0a01 	vldr	s0, [r7, #4]
 800117e:	f018 fdc5 	bl	8019d0c <sinf>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a01 	vstr	s0, [r7, #4]
 800119a:	ed97 0a01 	vldr	s0, [r7, #4]
 800119e:	f018 fd71 	bl	8019c84 <sqrtf>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	fef8 7a67 	vrinta.f32	s15, s15
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	bf00      	nop
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	7039      	strb	r1, [r7, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	7138      	strb	r0, [r7, #4]
 8001218:	bf00      	nop
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	f1c3 031f 	rsb	r3, r3, #31
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4798      	blx	r3
    }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012d6:	2137      	movs	r1, #55	; 0x37
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80012da:	f01b fd2f 	bl	801cd3c <__assert_func>

	if(align && size)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01c      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f015 fbc5 	bl	8016a88 <_Z9ei_callocjj>
 80012fe:	60f8      	str	r0, [r7, #12]

		if(p)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00e      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	425b      	negs	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3b02      	subs	r3, #2
 8001320:	b292      	uxth	r2, r2
 8001322:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001324:	697b      	ldr	r3, [r7, #20]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	0801fd80 	.word	0x0801fd80
 8001334:	0801fd9c 	.word	0x0801fd9c
 8001338:	0801fdd4 	.word	0x0801fdd4

0800133c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 800134e:	215a      	movs	r1, #90	; 0x5a
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001352:	f01b fcf3 	bl	801cd3c <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800135c:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	425b      	negs	r3, r3
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f015 fb9b 	bl	8016aa4 <_Z7ei_freePv>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0801fe58 	.word	0x0801fe58
 800137c:	0801fe5c 	.word	0x0801fe5c
 8001380:	0801fdd4 	.word	0x0801fdd4

08001384 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e009      	b.n	800140e <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	43da      	mvns	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
      return *this;
 800140e:	687b      	ldr	r3, [r7, #4]
    }
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001460:	331f      	adds	r3, #31
 8001462:	115b      	asrs	r3, r3, #5
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	441a      	add	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	425a      	negs	r2, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	bf58      	it	pl
 800147a:	4253      	negpl	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da07      	bge.n	8001494 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3320      	adds	r3, #32
 8001488:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1f1a      	subs	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
    }
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffb1 	bl	800141c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffa0 	bl	800141c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff3f 	bl	8001384 <_ZNSt14_Bit_referenceC1EPmm>
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff90 	bl	8001442 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001522:	687b      	ldr	r3, [r7, #4]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZNKSt13_Bit_iteratorixEi>:
      *this += -__i;
      return *this;
    }

    reference
    operator[](difference_type __i) const
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f80b 	bl	800155c <_ZStplRKSt13_Bit_iteratori>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffc9 	bl	80014e6 <_ZNKSt13_Bit_iteratordeEv>
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZStplRKSt13_Bit_iteratori>:

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001570:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff ffc9 	bl	800150e <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 800157c:	bf00      	nop
    }
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	731a      	strb	r2, [r3, #12]
 80015a6:	e00e      	b.n	80015c6 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f015 fa67 	bl	8016a88 <_Z9ei_callocjj>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <_ZN2ei9ei_matrixD1Ev+0x22>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f015 fa53 	bl	8016aa4 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
    }
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0a01 	vstr	s0, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001644:	edd7 7a05 	vldr	s15, [r7, #20]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	db09      	blt.n	8001666 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001652:	ed97 0a05 	vldr	s0, [r7, #20]
 8001656:	f018 fb15 	bl	8019c84 <sqrtf>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001664:	e004      	b.n	8001670 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800166e:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e00e      	b.n	80016b4 <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3ec      	bcc.n	8001696 <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	ee07 3a90 	vmov	s15, r3
    }
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b096      	sub	sp, #88	; 0x58
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6852      	ldr	r2, [r2, #4]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80016ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	f107 021f 	add.w	r2, r7, #31
 80016fc:	f107 0008 	add.w	r0, r7, #8
 8001700:	f008 fa46 	bl	8009b90 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001704:	2301      	movs	r3, #1
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001720:	fbb3 f1f2 	udiv	r1, r3, r2
 8001724:	fb01 f202 	mul.w	r2, r1, r2
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001744:	4413      	add	r3, r2
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001762:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	f107 0108 	add.w	r1, r7, #8
 8001770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fa34 	bl	8009be0 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe28 	bl	80013d4 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800178a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178c:	429a      	cmp	r2, r3
 800178e:	d1c4      	bne.n	800171a <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
 8001794:	e009      	b.n	80017aa <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xda>
                all_done_mark++; // move the high water mark so we don't look again
 8001796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001798:	3301      	adds	r3, #1
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 800179c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800179e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d213      	bcs.n	80017cc <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80017a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a6:	3301      	adds	r3, #1
 80017a8:	653b      	str	r3, [r7, #80]	; 0x50
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	f107 0108 	add.w	r1, r7, #8
 80017b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 fa13 	bl	8009be0 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdf3 	bl	80013aa <_ZNKSt14_Bit_referencecvbEv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1e5      	bne.n	8001796 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
            }
        }
 80017ca:	e79d      	b.n	8001708 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                if(i>=size) { goto LOOP_END; }
 80017cc:	bf00      	nop
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1d1a      	adds	r2, r3, #4
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3308      	adds	r3, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f008 fa24 	bl	8009c26 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f008 f9ef 	bl	8009bc6 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
 80017e8:	3758      	adds	r7, #88	; 0x58
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4619      	mov	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	f000 f817 	bl	8001838 <_ZN2ei5numpy9transposeEPfii>
 800180a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	e00c      	b.n	8001830 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001822:	893a      	ldrh	r2, [r7, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001828:	897a      	ldrh	r2, [r7, #10]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800182e:	2300      	movs	r3, #0
    }
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b08f      	sub	sp, #60	; 0x3c
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800184c:	2300      	movs	r3, #0
 800184e:	f7ff fe9a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001858:	4c23      	ldr	r4, [pc, #140]	; (80018e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800185a:	e03b      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001862:	4c21      	ldr	r4, [pc, #132]	; (80018e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001864:	e036      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	da03      	bge.n	8001876 <_ZN2ei5numpy9transposeEPfii+0x3e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	db01      	blt.n	800187a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001876:	4c1d      	ldr	r4, [pc, #116]	; (80018ec <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001878:	e02c      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	83bb      	strh	r3, [r7, #28]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	b29b      	uxth	r3, r3
 8001884:	83fb      	strh	r3, [r7, #30]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	b29b      	uxth	r3, r3
 800188e:	82bb      	strh	r3, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b29b      	uxth	r3, r3
 8001894:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001898:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800189a:	f107 0214 	add.w	r2, r7, #20
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f010 ff5c 	bl	8012762 <arm_mat_trans_f32>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80018b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 80018b8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80018bc:	e00a      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80018be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f01c fbce 	bl	801e06e <memcpy>

        return EIDSP_OK;
 80018d2:	2400      	movs	r4, #0
    }
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe7f 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80018de:	4623      	mov	r3, r4
 80018e0:	4618      	mov	r0, r3
 80018e2:	373c      	adds	r7, #60	; 0x3c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	fffffc16 	.word	0xfffffc16
 80018ec:	fffffc0c 	.word	0xfffffc0c

080018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001904:	eef4 7a47 	vcmp.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	d101      	bne.n	8001912 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800190e:	2300      	movs	r3, #0
 8001910:	e033      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d204      	bcs.n	8001926 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d301      	bcc.n	800192a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001928:	e027      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
 8001930:	82bb      	strh	r3, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	b29b      	uxth	r3, r3
 8001938:	82fb      	strh	r3, [r7, #22]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	b29b      	uxth	r3, r3
 8001946:	81bb      	strh	r3, [r7, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	b29b      	uxth	r3, r3
 800194e:	81fb      	strh	r3, [r7, #14]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4611      	mov	r1, r2
 8001960:	ed97 0a00 	vldr	s0, [r7]
 8001964:	4618      	mov	r0, r3
 8001966:	f010 fec6 	bl	80126f6 <arm_mat_scale_f32>
 800196a:	4603      	mov	r3, r0
 800196c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	e000      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001978:	2300      	movs	r3, #0
    }
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	fffffc0c 	.word	0xfffffc0c

08001988 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e014      	b.n	80019c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edd7 7a00 	vldr	s15, [r7]
 80019b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ba:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6892      	ldr	r2, [r2, #8]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3e1      	bcc.n	800199a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 80019d6:	2300      	movs	r3, #0
    }
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80019fa:	4c26      	ldr	r4, [pc, #152]	; (8001a94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80019fc:	e045      	b.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a06:	4c23      	ldr	r4, [pc, #140]	; (8001a94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001a08:	e03f      	b.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e036      	b.n	8001a7e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x9a>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689d      	ldr	r5, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	f107 0008 	add.w	r0, r7, #8
 8001a2a:	462a      	mov	r2, r5
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	f7ff fdaa 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5a>
 8001a38:	4c17      	ldr	r4, [pc, #92]	; (8001a98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	e015      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff97 	bl	8001988 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001a5a:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x84>
                EIDSP_ERR(ret);
 8001a62:	69bc      	ldr	r4, [r7, #24]
 8001a64:	2500      	movs	r5, #0
 8001a66:	e000      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            }
        }
 8001a68:	2501      	movs	r5, #1
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fdb4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8001a74:	2d01      	cmp	r5, #1
 8001a76:	d108      	bne.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3c3      	bcc.n	8001a10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2c>

        return EIDSP_OK;
 8001a88:	2400      	movs	r4, #0
    }
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	fffffc14 	.word	0xfffffc14
 8001a98:	fffffc16 	.word	0xfffffc16

08001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ab4:	e028      	b.n	8001b08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ac0:	e022      	b.n	8001b08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e019      	b.n	8001afc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	18d0      	adds	r0, r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f010 fead 	bl	8012842 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3e0      	bcc.n	8001ac8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2c>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001b06:	2300      	movs	r3, #0
    }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	fffffc14 	.word	0xfffffc14

08001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b2c:	e028      	b.n	8001b80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b38:	e022      	b.n	8001b80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e019      	b.n	8001b74 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d0      	adds	r0, r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f107 0208 	add.w	r2, r7, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f010 fe42 	bl	80127e4 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3e0      	bcc.n	8001b40 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001b7e:	2300      	movs	r3, #0
    }
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	fffffc14 	.word	0xfffffc14

08001b8c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001ba4:	e043      	b.n	8001c2e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001bb0:	e03d      	b.n	8001c2e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e034      	b.n	8001c22 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x96>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	69f9      	ldr	r1, [r7, #28]
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	18d0      	adds	r0, r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f000 fc96 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001be2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	db09      	blt.n	8001c04 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x78>
      *pOut = sqrtf(in);
 8001bf0:	ed97 0a06 	vldr	s0, [r7, #24]
 8001bf4:	f018 f846 	bl	8019c84 <sqrtf>
 8001bf8:	eef0 7a40 	vmov.f32	s15, s0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001c02:	e004      	b.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x82>
      *pOut = 0.0f;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c0c:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3c5      	bcc.n	8001bb8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c2c:	2300      	movs	r3, #0
    }
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	fffffc14 	.word	0xfffffc14

08001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c54:	e087      	b.n	8001d66 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c60:	e081      	b.n	8001d66 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e078      	b.n	8001d5a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x11e>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	69f9      	ldr	r1, [r7, #28]
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	18d0      	adds	r0, r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f107 0210 	add.w	r2, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	f010 fdae 	bl	80127e4 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	18d0      	adds	r0, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f000 fc2e 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	69f9      	ldr	r1, [r7, #28]
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	18d0      	adds	r0, r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc2:	f107 0208 	add.w	r2, r7, #8
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f000 fd18 	bl	8002700 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	edc7 7a06 	vstr	s15, [r7, #24]
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	db09      	blt.n	8001d10 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
      *pOut = sqrtf(in);
 8001cfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d00:	f017 ffc0 	bl	8019c84 <sqrtf>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d0e:	e004      	b.n	8001d1a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xde>
      *pOut = 0.0f;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d18:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d108      	bne.n	8001d3a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xfe>
                output_matrix->buffer[row] = 0.0f;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e00c      	b.n	8001d54 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x118>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d381      	bcc.n	8001c68 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001d64:	2300      	movs	r3, #0
    }
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	fffffc14 	.word	0xfffffc14

08001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d8c:	e06d      	b.n	8001e6a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d98:	e067      	b.n	8001e6a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e05e      	b.n	8001e5e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xea>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d0      	adds	r0, r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f010 fd12 	bl	80127e4 <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	18d0      	adds	r0, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f000 fb92 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	18d0      	adds	r0, r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfa:	f107 0208 	add.w	r2, r7, #8
 8001dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001e02:	4619      	mov	r1, r3
 8001e04:	f000 fd37 	bl	8002876 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d107      	bne.n	8001e36 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xc2>
                output_matrix->buffer[row] = -3.0f;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e010      	b.n	8001e58 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xe4>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e36:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e54:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d39b      	bcc.n	8001da0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001e68:	2300      	movs	r3, #0
    }
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	fffffc14 	.word	0xfffffc14
 8001e78:	c0400000 	.word	0xc0400000

08001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b098      	sub	sp, #96	; 0x60
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3301      	adds	r3, #1
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001e9a:	4c65      	ldr	r4, [pc, #404]	; (8002030 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001e9c:	e0c2      	b.n	8002024 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d901      	bls.n	8001eaa <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001eaa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f7ff fb67 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001ebe:	4c5d      	ldr	r4, [pc, #372]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ec0:	e0ab      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ec8:	4c5a      	ldr	r4, [pc, #360]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001eca:	e0a6      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001ecc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	f01c f8ca 	bl	801e06e <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	18d0      	adds	r0, r2, r3
 8001ee2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	f01b ffdd 	bl	801deac <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d025      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d022      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d01f      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d01b      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f12:	d017      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d013      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f22:	d00f      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d00b      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f000 fa4e 	bl	80023d4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f38:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d068      	beq.n	8002012 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001f40:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001f42:	e06a      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd58 	bl	8002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f50:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001f58:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f5a:	e05d      	b.n	8002018 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f5c:	f107 0014 	add.w	r0, r7, #20
 8001f60:	2300      	movs	r3, #0
 8001f62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f64:	2101      	movs	r1, #1
 8001f66:	f7ff fb0e 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001f70:	4c30      	ldr	r4, [pc, #192]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f72:	2500      	movs	r5, #0
 8001f74:	e045      	b.n	8002002 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f7c:	4c2d      	ldr	r4, [pc, #180]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f7e:	2500      	movs	r5, #0
 8001f80:	e03f      	b.n	8002002 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f012 fff6 	bl	8014f7c <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001fa0:	440b      	add	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	6852      	ldr	r2, [r2, #4]
 8001faa:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fb4:	e01f      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f010 fc3c 	bl	8012842 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001fca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001fce:	f7ff fb2f 	bl	8001630 <_ZN2ei5numpy4sqrtEf>
 8001fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fec:	3302      	adds	r3, #2
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3da      	bcc.n	8001fb6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 8002000:	2501      	movs	r5, #1
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fae8 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800200c:	2d01      	cmp	r5, #1
 800200e:	d103      	bne.n	8002018 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8002010:	e000      	b.n	8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 8002012:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002014:	2400      	movs	r4, #0
 8002016:	e000      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002018:	bf00      	nop
    }
 800201a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fadc 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8002024:	4623      	mov	r3, r4
 8002026:	4618      	mov	r0, r3
 8002028:	3760      	adds	r7, #96	; 0x60
 800202a:	46bd      	mov	sp, r7
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	bf00      	nop
 8002030:	fffffc11 	.word	0xfffffc11
 8002034:	fffffc16 	.word	0xfffffc16

08002038 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b098      	sub	sp, #96	; 0x60
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3301      	adds	r3, #1
 800204c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002056:	4c6f      	ldr	r4, [pc, #444]	; (8002214 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002058:	e0d6      	b.n	8002208 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d901      	bls.n	8002066 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002064:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8002076:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800207a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800207e:	2101      	movs	r1, #1
 8002080:	f7ff fa81 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 800208a:	4c63      	ldr	r4, [pc, #396]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 800208c:	e0b7      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002094:	4c60      	ldr	r4, [pc, #384]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002096:	e0b2      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8002098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d112      	bne.n	80020c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800209e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	f01b ffe1 	bl	801e06e <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80020ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	18d0      	adds	r0, r2, r3
 80020b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f01b fef4 	bl	801deac <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d025      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d022      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d01f      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020dc:	d01b      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d017      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d013      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f4:	d00f      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d00b      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80020fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	f000 f9d7 	bl	80024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800210a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d071      	beq.n	80021f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002112:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002114:	e073      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fc6f 	bl	8002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002122:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800212a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800212c:	e066      	b.n	80021fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800212e:	f107 0010 	add.w	r0, r7, #16
 8002132:	2300      	movs	r3, #0
 8002134:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002136:	2101      	movs	r1, #1
 8002138:	f7ff fa25 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002142:	4c35      	ldr	r4, [pc, #212]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002144:	2500      	movs	r5, #0
 8002146:	e04e      	b.n	80021e6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800214e:	4c32      	ldr	r4, [pc, #200]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002150:	2500      	movs	r5, #0
 8002152:	e048      	b.n	80021e6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	f107 0020 	add.w	r0, r7, #32
 800215c:	2300      	movs	r3, #0
 800215e:	f012 ff0d 	bl	8014f7c <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002176:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800217a:	440b      	add	r3, r1
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	440b      	add	r3, r1
 8002182:	6852      	ldr	r2, [r2, #4]
 8002184:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002188:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800219e:	2301      	movs	r3, #1
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
 80021a2:	e01a      	b.n	80021da <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	441a      	add	r2, r3
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	440b      	add	r3, r1
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021bc:	3301      	adds	r3, #1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	440b      	add	r3, r1
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	3302      	adds	r3, #2
 80021d2:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d6:	3301      	adds	r3, #1
 80021d8:	657b      	str	r3, [r7, #84]	; 0x54
 80021da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021dc:	3b01      	subs	r3, #1
 80021de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3df      	bcc.n	80021a4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 80021e4:	2501      	movs	r5, #1
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f9f6 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80021f0:	2d01      	cmp	r5, #1
 80021f2:	d103      	bne.n	80021fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 80021f4:	e000      	b.n	80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 80021f6:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80021f8:	2400      	movs	r4, #0
 80021fa:	e000      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 80021fc:	bf00      	nop
    }
 80021fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f9ea 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8002208:	4623      	mov	r3, r4
 800220a:	4618      	mov	r0, r3
 800220c:	3760      	adds	r7, #96	; 0x60
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	fffffc11 	.word	0xfffffc11
 8002218:	fffffc16 	.word	0xfffffc16

0800221c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	ed87 0a03 	vstr	s0, [r7, #12]
 8002226:	edc7 0a02 	vstr	s1, [r7, #8]
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800223c:	e03f      	b.n	80022be <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d104      	bne.n	800224e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e037      	b.n	80022be <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800224e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002252:	edd7 7a03 	vldr	s15, [r7, #12]
 8002256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3b01      	subs	r3, #1
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e015      	b.n	80022a0 <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3e4      	bcc.n	8002274 <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80022bc:	2300      	movs	r3, #0
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	fffffc10 	.word	0xfffffc10

080022d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e062      	b.n	80023a4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xd4>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	188c      	adds	r4, r1, r2
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 80022fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fe:	eef0 7ae7 	vabs.f32	s15, s15
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4618      	mov	r0, r3
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	f017 fcd8 	bl	8019cc0 <frexpf>
 8002310:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002316:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002318:	ed97 7a03 	vldr	s14, [r7, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80023c4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002334:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002338:	ed97 7a03 	vldr	s14, [r7, #12]
 800233c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002348:	edd7 7a03 	vldr	s15, [r7, #12]
 800234c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80023c8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002350:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002354:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002358:	ed97 7a03 	vldr	s14, [r7, #12]
 800235c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 8002368:	edd7 7a03 	vldr	s15, [r7, #12]
 800236c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023cc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002374:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002382:	ed97 7a03 	vldr	s14, [r7, #12]
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 800238e:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 8002392:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80023d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800239a:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6892      	ldr	r2, [r2, #8]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d393      	bcc.n	80022de <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 80023b6:	2300      	movs	r3, #0
    }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3724      	adds	r7, #36	; 0x24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	3f9da1a8 	.word	0x3f9da1a8
 80023c4:	4083caf5 	.word	0x4083caf5
 80023c8:	40c0b3fb 	.word	0x40c0b3fb
 80023cc:	404892e0 	.word	0x404892e0
 80023d0:	3e9a209b 	.word	0x3e9a209b

080023d4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f014 fb42 	bl	8016a70 <_Z9ei_mallocj>
 80023ec:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 80023f6:	e058      	b.n	80024aa <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	f013 ff87 	bl	8016318 <kiss_fftr_alloc>
 800240a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f014 fb46 	bl	8016aa4 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800241a:	e046      	b.n	80024aa <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	6978      	ldr	r0, [r7, #20]
 8002422:	f014 f89d 	bl	8016560 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e033      	b.n	8002494 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	2002      	movs	r0, #2
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	f007 fc11 	bl	8009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002442:	ec55 4b10 	vmov	r4, r5, d0
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002452:	2002      	movs	r0, #2
 8002454:	eeb0 0a67 	vmov.f32	s0, s15
 8002458:	f007 fc04 	bl	8009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800245c:	ec53 2b10 	vmov	r2, r3, d0
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fd ff42 	bl	80002ec <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fbea 	bl	8000c48 <__aeabi_d2f>
 8002474:	4601      	mov	r1, r0
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	18d4      	adds	r4, r2, r3
 800247e:	ee00 1a10 	vmov	s0, r1
 8002482:	f7ff f8d5 	bl	8001630 <_ZN2ei5numpy4sqrtEf>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3c7      	bcc.n	800242c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f014 fb01 	bl	8016aa4 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024a2:	69b8      	ldr	r0, [r7, #24]
 80024a4:	f014 fafe 	bl	8016aa4 <_Z7ei_freePv>

        return EIDSP_OK;
 80024a8:	2300      	movs	r3, #0
    }
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	fffffc16 	.word	0xfffffc16

080024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	f013 ff20 	bl	8016318 <kiss_fftr_alloc>
 80024d8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 80024e2:	e008      	b.n	80024f6 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f014 f839 	bl	8016560 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f014 fad8 	bl	8016aa4 <_Z7ei_freePv>

        return EIDSP_OK;
 80024f4:	2300      	movs	r3, #0
    }
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	fffffc16 	.word	0xfffffc16

08002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8002504:	b480      	push	{r7}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d804      	bhi.n	8002530 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
            return;
 800252e:	e0e2      	b.n	80026f6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002536:	e02e      	b.n	8002596 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	61ba      	str	r2, [r7, #24]
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	ed97 7a08 	vldr	s14, [r7, #32]
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1d1a      	adds	r2, r3, #4
 8002552:	61ba      	str	r2, [r7, #24]
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ed97 7a08 	vldr	s14, [r7, #32]
 800255c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002560:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	61ba      	str	r2, [r7, #24]
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	61ba      	str	r2, [r7, #24]
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ed97 7a08 	vldr	s14, [r7, #32]
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1cd      	bne.n	8002538 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025a4:	e00d      	b.n	80025c2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1d1a      	adds	r2, r3, #4
 80025aa:	61ba      	str	r2, [r7, #24]
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ee      	bne.n	80025a6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80025d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025da:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025e8:	e056      	b.n	8002698 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	61ba      	str	r2, [r7, #24]
 80025f0:	ed93 7a00 	vldr	s14, [r3]
 80025f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002600:	edd7 7a04 	vldr	s15, [r7, #16]
 8002604:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002608:	ed97 7a07 	vldr	s14, [r7, #28]
 800260c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002610:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	61ba      	str	r2, [r7, #24]
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002626:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800262a:	edd7 7a04 	vldr	s15, [r7, #16]
 800262e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002632:	ed97 7a07 	vldr	s14, [r7, #28]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	61ba      	str	r2, [r7, #24]
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	edd7 7a05 	vldr	s15, [r7, #20]
 800264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002650:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002654:	edd7 7a04 	vldr	s15, [r7, #16]
 8002658:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800265c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a05 	vldr	s15, [r7, #20]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002686:	ed97 7a07 	vldr	s14, [r7, #28]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3b01      	subs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a5      	bne.n	80025ea <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80026a6:	e017      	b.n	80026d8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1d1a      	adds	r2, r3, #4
 80026ac:	61ba      	str	r2, [r7, #24]
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026be:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3b01      	subs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e4      	bne.n	80026a8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80026ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    }
 80026f6:	372c      	adds	r7, #44	; 0x2c
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	ed87 0a01 	vstr	s0, [r7, #4]
 800270e:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 800271c:	e06e      	b.n	80027fc <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0xfc>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1d1a      	adds	r2, r3, #4
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002728:	ed97 7a05 	vldr	s14, [r7, #20]
 800272c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002740:	edd7 7a05 	vldr	s15, [r7, #20]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	ed97 7a06 	vldr	s14, [r7, #24]
 800274c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002750:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	60fa      	str	r2, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800275e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002762:	edd7 7a01 	vldr	s15, [r7, #4]
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800276e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002772:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002776:	edd7 7a05 	vldr	s15, [r7, #20]
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1d1a      	adds	r2, r3, #4
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002794:	ed97 7a05 	vldr	s14, [r7, #20]
 8002798:	edd7 7a01 	vldr	s15, [r7, #4]
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1d1a      	adds	r2, r3, #4
 80027c4:	60fa      	str	r2, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027da:	edd7 7a05 	vldr	s15, [r7, #20]
 80027de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d18d      	bne.n	800271e <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 800280a:	e01d      	b.n	8002848 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x148>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1d1a      	adds	r2, r3, #4
 8002810:	60fa      	str	r2, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002816:	ed97 7a05 	vldr	s14, [r7, #20]
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800282e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	ed97 7a06 	vldr	s14, [r7, #24]
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b01      	subs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1de      	bne.n	800280c <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10c>
        }

        sum = sum / blockSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002858:	edd7 6a06 	vldr	s13, [r7, #24]
 800285c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002860:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	601a      	str	r2, [r3, #0]
    }
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002876:	b480      	push	{r7}
 8002878:	b08b      	sub	sp, #44	; 0x2c
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	ed87 0a01 	vstr	s0, [r7, #4]
 8002884:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002892:	e076      	b.n	8002982 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x10c>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	60fa      	str	r2, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800289e:	ed97 7a07 	vldr	s14, [r7, #28]
 80028a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80028ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80028b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028b6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80028be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1d1a      	adds	r2, r3, #4
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	60fa      	str	r2, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002912:	ed97 7a07 	vldr	s14, [r7, #28]
 8002916:	edd7 7a01 	vldr	s15, [r7, #4]
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002922:	edd7 7a07 	vldr	s15, [r7, #28]
 8002926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800292a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 800292e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002932:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002936:	ed97 7a08 	vldr	s14, [r7, #32]
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800294c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002950:	edd7 7a01 	vldr	s15, [r7, #4]
 8002954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002958:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 800295c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002964:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002970:	ed97 7a08 	vldr	s14, [r7, #32]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d185      	bne.n	8002894 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002990:	e01f      	b.n	80029d2 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x15c>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1d1a      	adds	r2, r3, #4
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800299c:	ed97 7a07 	vldr	s14, [r7, #28]
 80029a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80029ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b4:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80029b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3b01      	subs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1dc      	bne.n	8002992 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11c>
        }

        sum = sum / blockSize;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029e2:	edd7 6a08 	vldr	s13, [r7, #32]
 80029e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ea:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	601a      	str	r2, [r3, #0]
    }
 80029f4:	bf00      	nop
 80029f6:	372c      	adds	r7, #44	; 0x2c
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF) && !defined(EI_CLASSIFIER_LOAD_ALL_FFTS)
        arm_status status;
        switch (n_fft) {
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d11f      	bne.n	8002a50 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x50>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_64 == 1
            case 64: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
                S->fftLen = 32U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len32.bitRevLength;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a22:	899a      	ldrh	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len32.pBitRevTable;
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len32.pTwiddle;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 64U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_64;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002a42:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8002a44:	2300      	movs	r3, #0
 8002a46:	72fb      	strb	r3, [r7, #11]
                break;
 8002a48:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002a4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a4e:	e000      	b.n	8002a52 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x52>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	08023e58 	.word	0x08023e58
 8002a64:	08023d58 	.word	0x08023d58
 8002a68:	fffffc08 	.word	0xfffffc08

08002a6c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	461a      	mov	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d001      	beq.n	8002a8e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002a8c:	e050      	b.n	8002b30 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002a8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff f9ef 	bl	8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002a9e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	e042      	b.n	8002b30 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e03a      	b.n	8002b26 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002ab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fd73 	bl	80005a8 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	491c      	ldr	r1, [pc, #112]	; (8002b3c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002acc:	f7fd feee 	bl	80008ac <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd56 	bl	80005a8 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fda8 	bl	8000658 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	18d4      	adds	r4, r2, r3
 8002b18:	f7fe f896 	bl	8000c48 <__aeabi_d2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3c0      	bcc.n	8002ab0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 8002b2e:	2300      	movs	r3, #0
    }
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	fffffc14 	.word	0xfffffc14
 8002b3c:	3ff00000 	.word	0x3ff00000

08002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b093      	sub	sp, #76	; 0x4c
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3301      	adds	r3, #1
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	f107 0218 	add.w	r2, r7, #24
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f007 f8a9 	bl	8009cc8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20b      	bcs.n	8002b96 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002b7e:	2104      	movs	r1, #4
 8002b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b82:	f013 ff81 	bl	8016a88 <_Z9ei_callocjj>
 8002b86:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f007 f8d0 	bl	8009d34 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002b94:	e00b      	b.n	8002bae <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002bae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2100      	movs	r1, #0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f01b f976 	bl	801deac <memset>
        int input_ix = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002bc4:	e05d      	b.n	8002c82 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	4413      	add	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d203      	bcs.n	8002bda <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9a>
                                                                        : input_size - input_ix;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	e000      	b.n	8002bdc <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9c>
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bdc:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	18d0      	adds	r0, r2, r3
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	6a39      	ldr	r1, [r7, #32]
 8002bf8:	f7ff ff38 	bl	8002a6c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8002bfc:	61f8      	str	r0, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc8>
 8002c04:	69fc      	ldr	r4, [r7, #28]
 8002c06:	e041      	b.n	8002c8c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c10:	e017      	b.n	8002c42 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x102>
                output[j] = std::max(output[j], fft_out[i]);
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	18d0      	adds	r0, r2, r3
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c20:	4413      	add	r3, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f007 f89a 	bl	8009d5c <_ZSt3maxIfERKT_S2_S2_>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	680a      	ldr	r2, [r1, #0]
 8002c34:	601a      	str	r2, [r3, #0]
                j++;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	3301      	adds	r3, #1
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	3301      	adds	r3, #1
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3e3      	bcc.n	8002c12 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd2>
            }
            if (do_overlap) {
 8002c4a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x13a>
                if (do_saved_point) {
 8002c52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12e>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c66:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	085a      	lsrs	r2, r3, #1
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	4413      	add	r3, r2
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
 8002c78:	e003      	b.n	8002c82 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            }
            else {
                input_ix += fft_points;
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	4413      	add	r3, r2
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	429a      	cmp	r2, r3
 8002c88:	db9d      	blt.n	8002bc6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x86>
            }
        }

        return EIDSP_OK;
 8002c8a:	2400      	movs	r4, #0
    }
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4618      	mov	r0, r3
 8002c92:	f007 f82e 	bl	8009cf2 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002c96:	4623      	mov	r3, r4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3744      	adds	r7, #68	; 0x44
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	08016aa5 	.word	0x08016aa5

08002ca4 <_ZN2ei5numpy8varianceEPfj>:

    static float variance(float *input, size_t size)
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    {
        // Use CMSIS either way.  Will fall back to straight C when needed
        float temp;
#if EIDSP_USE_CMSIS_DSP
        arm_var_f32(input, size, &temp);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f00f fe0b 	bl	80128d2 <arm_var_f32>
        for (size_t i = 0; i < size; i++) {
            temp += (input[i] - mean) * (input[i] - mean);
        }
        temp /= (size - 1);
#endif
        return temp;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	ee07 3a90 	vmov	s15, r3
    }
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e013      	b.n	8002d04 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d105      	bne.n	8002cfe <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8002cfc:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3e7      	bcc.n	8002cdc <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2edbe6ff 	.word	0x2edbe6ff

08002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>:
     * @param input Array
     * @param input_size Size of array
     * @param epsilon Smallest valid non-zero value
     * @returns void
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e021      	b.n	8002d78 <_ZN2ei5numpy18underflow_handlingEPfjf+0x58>
            if (fabs(input[ix]) < epsilon) {
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eeb0 0a67 	vmov.f32	s0, s15
 8002d44:	f7fe f9f4 	bl	8001130 <_ZSt4fabsf>
 8002d48:	eeb0 7a40 	vmov.f32	s14, s0
 8002d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	bfcc      	ite	gt
 8002d5a:	2301      	movgt	r3, #1
 8002d5c:	2300      	movle	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <_ZN2ei5numpy18underflow_handlingEPfjf+0x52>
                input[ix] = 0.0f;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3d9      	bcc.n	8002d34 <_ZN2ei5numpy18underflow_handlingEPfjf+0x14>
            }
        }
    }
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f013 fe60 	bl	8016a70 <_Z9ei_mallocj>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e009      	b.n	8002dd0 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3f1      	bcc.n	8002dbc <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d115      	bne.n	8002e28 <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	4413      	add	r3, r2
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	0152      	lsls	r2, r2, #5
 8002e14:	440a      	add	r2, r1
 8002e16:	68d0      	ldr	r0, [r2, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6851      	ldr	r1, [r2, #4]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	188c      	adds	r4, r1, r2
 8002e22:	4798      	blx	r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
    }
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e01e      	b.n	8002e88 <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d013      	beq.n	8002e82 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <_ZN18ei_impulse_state_t5resetEv+0x38>
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	320c      	adds	r2, #12
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3da      	bcc.n	8002e4a <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    {
        reset();
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffc8 	bl	8002e3c <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f013 fdf7 	bl	8016aa4 <_Z7ei_freePv>
    }
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff5b 	bl	8002d8a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	0000      	movs	r0, r0
	...

08002ee8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	b095      	sub	sp, #84	; 0x54
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6178      	str	r0, [r7, #20]
 8002ef2:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ef6:	edc7 0a03 	vstr	s1, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da00      	bge.n	8002f08 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x20>
 8002f06:	3301      	adds	r3, #1
 8002f08:	105b      	asrs	r3, r3, #1
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7fd fb4b 	bl	80005a8 <__aeabi_f2d>
 8002f12:	a3a9      	add	r3, pc, #676	; (adr r3, 80031b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb9e 	bl	8000658 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4690      	mov	r8, r2
 8002f22:	4699      	mov	r9, r3
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f7fd fb3f 	bl	80005a8 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4640      	mov	r0, r8
 8002f30:	4649      	mov	r1, r9
 8002f32:	f7fd fcbb 	bl	80008ac <__aeabi_ddiv>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	ec43 2b17 	vmov	d7, r2, r3
 8002f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	f016 fdd7 	bl	8019af8 <tan>
 8002f4a:	ec53 2b10 	vmov	r2, r3, d0
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe79 	bl	8000c48 <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002f60:	f006 fe80 	bl	8009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f64:	ec53 2b10 	vmov	r2, r3, d0
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe6c 	bl	8000c48 <__aeabi_d2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f76:	2104      	movs	r1, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f013 fd85 	bl	8016a88 <_Z9ei_callocjj>
 8002f7e:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	2104      	movs	r1, #4
 8002f84:	4618      	mov	r0, r3
 8002f86:	f013 fd7f 	bl	8016a88 <_Z9ei_callocjj>
 8002f8a:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8e:	2104      	movs	r1, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f013 fd79 	bl	8016a88 <_Z9ei_callocjj>
 8002f96:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f013 fd73 	bl	8016a88 <_Z9ei_callocjj>
 8002fa2:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f013 fd6d 	bl	8016a88 <_Z9ei_callocjj>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f013 fd67 	bl	8016a88 <_Z9ei_callocjj>
 8002fba:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e0e3      	b.n	800318a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002fc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fc4:	f7fd fade 	bl	8000584 <__aeabi_i2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	f7fd f98e 	bl	80002ec <__adddf3>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8002fde:	f7fd f985 	bl	80002ec <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	a373      	add	r3, pc, #460	; (adr r3, 80031b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fb32 	bl	8000658 <__aeabi_dmul>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4690      	mov	r8, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	6978      	ldr	r0, [r7, #20]
 8002ffe:	f7fd fac1 	bl	8000584 <__aeabi_i2d>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	f7fd f971 	bl	80002ec <__adddf3>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4640      	mov	r0, r8
 8003010:	4649      	mov	r1, r9
 8003012:	f7fd fc4b 	bl	80008ac <__aeabi_ddiv>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ec43 2b17 	vmov	d7, r2, r3
 800301e:	eeb0 0a47 	vmov.f32	s0, s14
 8003022:	eef0 0a67 	vmov.f32	s1, s15
 8003026:	f016 fd0f 	bl	8019a48 <sin>
 800302a:	ec53 2b10 	vmov	r2, r3, d0
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fe09 	bl	8000c48 <__aeabi_d2f>
 8003036:	4603      	mov	r3, r0
 8003038:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800303a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800303c:	f7fd fab4 	bl	80005a8 <__aeabi_f2d>
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003046:	f7fd faaf 	bl	80005a8 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	f7fd f94d 	bl	80002ec <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4692      	mov	sl, r2
 8003058:	469b      	mov	fp, r3
 800305a:	69f8      	ldr	r0, [r7, #28]
 800305c:	f7fd faa4 	bl	80005a8 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4650      	mov	r0, sl
 8003066:	4659      	mov	r1, fp
 8003068:	f7fd faf6 	bl	8000658 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4640      	mov	r0, r8
 8003072:	4649      	mov	r1, r9
 8003074:	f7fd f93a 	bl	80002ec <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8003086:	f7fd f931 	bl	80002ec <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fdd9 	bl	8000c48 <__aeabi_d2f>
 8003096:	4603      	mov	r3, r0
 8003098:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a0:	4413      	add	r3, r2
 80030a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80030a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80030aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ae:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80030b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	ee17 0a90 	vmov	r0, s15
 80030c2:	f7fd fa71 	bl	80005a8 <__aeabi_f2d>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	f7fd f90f 	bl	80002ec <__adddf3>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4690      	mov	r8, r2
 80030d4:	4699      	mov	r9, r3
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f7fd fa66 	bl	80005a8 <__aeabi_f2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4640      	mov	r0, r8
 80030e2:	4649      	mov	r1, r9
 80030e4:	f7fd fbe2 	bl	80008ac <__aeabi_ddiv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	18d6      	adds	r6, r2, r3
 80030f8:	f7fd fda6 	bl	8000c48 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003102:	f7fd fa51 	bl	80005a8 <__aeabi_f2d>
 8003106:	4680      	mov	r8, r0
 8003108:	4689      	mov	r9, r1
 800310a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800310c:	f7fd fa4c 	bl	80005a8 <__aeabi_f2d>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	f7fd f8ea 	bl	80002ec <__adddf3>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4692      	mov	sl, r2
 800311e:	469b      	mov	fp, r3
 8003120:	69f8      	ldr	r0, [r7, #28]
 8003122:	f7fd fa41 	bl	80005a8 <__aeabi_f2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4650      	mov	r0, sl
 800312c:	4659      	mov	r1, fp
 800312e:	f7fd fa93 	bl	8000658 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	f7fd f8d5 	bl	80002e8 <__aeabi_dsub>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 800314c:	f7fd f8ce 	bl	80002ec <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4614      	mov	r4, r2
 8003156:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800315a:	6938      	ldr	r0, [r7, #16]
 800315c:	f7fd fa24 	bl	80005a8 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd fba0 	bl	80008ac <__aeabi_ddiv>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317a:	18d6      	adds	r6, r2, r3
 800317c:	f7fd fd64 	bl	8000c48 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	3301      	adds	r3, #1
 8003188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	429a      	cmp	r2, r3
 8003190:	f6ff af17 	blt.w	8002fc2 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8003194:	2300      	movs	r3, #0
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	e0a9      	b.n	80032ee <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	440b      	add	r3, r1
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80031ae:	2300      	movs	r3, #0
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	e094      	b.n	80032de <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
 80031b4:	f3af 8000 	nop.w
 80031b8:	54442d18 	.word	0x54442d18
 80031bc:	400921fb 	.word	0x400921fb
 80031c0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	4413      	add	r3, r2
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	4413      	add	r3, r2
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	4413      	add	r3, r2
 80031e8:	edd3 6a00 	vldr	s13, [r3]
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	4413      	add	r3, r2
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003212:	4413      	add	r3, r2
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 800321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003222:	4413      	add	r3, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f9be 	bl	80005a8 <__aeabi_f2d>
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003236:	4413      	add	r3, r2
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9b4 	bl	80005a8 <__aeabi_f2d>
 8003240:	4680      	mov	r8, r0
 8003242:	4689      	mov	r9, r1
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	4413      	add	r3, r2
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f9aa 	bl	80005a8 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	f7fd f848 	bl	80002ec <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f7fd f842 	bl	80002ec <__adddf3>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4690      	mov	r8, r2
 800326e:	4699      	mov	r9, r3
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	4413      	add	r3, r2
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f994 	bl	80005a8 <__aeabi_f2d>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	f7fd f830 	bl	80002ec <__adddf3>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4620      	mov	r0, r4
 8003292:	4629      	mov	r1, r5
 8003294:	f7fd f9e0 	bl	8000658 <__aeabi_dmul>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	18d4      	adds	r4, r2, r3
 80032a8:	f7fd fcce 	bl	8000c48 <__aeabi_d2f>
 80032ac:	4603      	mov	r3, r0
 80032ae:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80032b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	441a      	add	r2, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	6a39      	ldr	r1, [r7, #32]
 80032be:	440b      	add	r3, r1
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ca:	441a      	add	r2, r3
 80032cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d2:	440b      	add	r3, r1
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	3301      	adds	r3, #1
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
 80032de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f6ff af6e 	blt.w	80031c4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	3301      	adds	r3, #1
 80032ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f4ff af51 	bcc.w	800319a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 80032f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032fa:	f013 fbd3 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(d1);
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	f013 fbd0 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(d2);
 8003304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003306:	f013 fbcd 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w0);
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f013 fbca 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w1);
 8003310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003312:	f013 fbc7 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w2);
 8003316:	6a38      	ldr	r0, [r7, #32]
 8003318:	f013 fbc4 	bl	8016aa4 <_Z7ei_freePv>
    }
 800331c:	bf00      	nop
 800331e:	3754      	adds	r7, #84	; 0x54
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop

08003328 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	b095      	sub	sp, #84	; 0x54
 800332e:	af00      	add	r7, sp, #0
 8003330:	6178      	str	r0, [r7, #20]
 8003332:	ed87 0a04 	vstr	s0, [r7, #16]
 8003336:	edc7 0a03 	vstr	s1, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da00      	bge.n	8003348 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x20>
 8003346:	3301      	adds	r3, #1
 8003348:	105b      	asrs	r3, r3, #1
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7fd f92b 	bl	80005a8 <__aeabi_f2d>
 8003352:	a3a9      	add	r3, pc, #676	; (adr r3, 80035f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f97e 	bl	8000658 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4690      	mov	r8, r2
 8003362:	4699      	mov	r9, r3
 8003364:	6938      	ldr	r0, [r7, #16]
 8003366:	f7fd f91f 	bl	80005a8 <__aeabi_f2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4640      	mov	r0, r8
 8003370:	4649      	mov	r1, r9
 8003372:	f7fd fa9b 	bl	80008ac <__aeabi_ddiv>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	ec43 2b17 	vmov	d7, r2, r3
 800337e:	eeb0 0a47 	vmov.f32	s0, s14
 8003382:	eef0 0a67 	vmov.f32	s1, s15
 8003386:	f016 fbb7 	bl	8019af8 <tan>
 800338a:	ec53 2b10 	vmov	r2, r3, d0
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7fd fc59 	bl	8000c48 <__aeabi_d2f>
 8003396:	4603      	mov	r3, r0
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 800339a:	2002      	movs	r0, #2
 800339c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80033a0:	f006 fc60 	bl	8009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033a4:	ec53 2b10 	vmov	r2, r3, d0
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fc4c 	bl	8000c48 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	2104      	movs	r1, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f013 fb65 	bl	8016a88 <_Z9ei_callocjj>
 80033be:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	2104      	movs	r1, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f013 fb5f 	bl	8016a88 <_Z9ei_callocjj>
 80033ca:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ce:	2104      	movs	r1, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f013 fb59 	bl	8016a88 <_Z9ei_callocjj>
 80033d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	2104      	movs	r1, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f013 fb53 	bl	8016a88 <_Z9ei_callocjj>
 80033e2:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e6:	2104      	movs	r1, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f013 fb4d 	bl	8016a88 <_Z9ei_callocjj>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	2104      	movs	r1, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f013 fb47 	bl	8016a88 <_Z9ei_callocjj>
 80033fa:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80033fc:	2300      	movs	r3, #0
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	e0e3      	b.n	80035ca <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8003402:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003404:	f7fd f8be 	bl	8000584 <__aeabi_i2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	f7fc ff6e 	bl	80002ec <__adddf3>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800341e:	f7fc ff65 	bl	80002ec <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	a373      	add	r3, pc, #460	; (adr r3, 80035f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd f912 	bl	8000658 <__aeabi_dmul>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f7fd f8a1 	bl	8000584 <__aeabi_i2d>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	f7fc ff51 	bl	80002ec <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fd fa2b 	bl	80008ac <__aeabi_ddiv>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	ec43 2b17 	vmov	d7, r2, r3
 800345e:	eeb0 0a47 	vmov.f32	s0, s14
 8003462:	eef0 0a67 	vmov.f32	s1, s15
 8003466:	f016 faef 	bl	8019a48 <sin>
 800346a:	ec53 2b10 	vmov	r2, r3, d0
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fd fbe9 	bl	8000c48 <__aeabi_d2f>
 8003476:	4603      	mov	r3, r0
 8003478:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800347a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800347c:	f7fd f894 	bl	80005a8 <__aeabi_f2d>
 8003480:	4680      	mov	r8, r0
 8003482:	4689      	mov	r9, r1
 8003484:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003486:	f7fd f88f 	bl	80005a8 <__aeabi_f2d>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	f7fc ff2d 	bl	80002ec <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4692      	mov	sl, r2
 8003498:	469b      	mov	fp, r3
 800349a:	69f8      	ldr	r0, [r7, #28]
 800349c:	f7fd f884 	bl	80005a8 <__aeabi_f2d>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4650      	mov	r0, sl
 80034a6:	4659      	mov	r1, fp
 80034a8:	f7fd f8d6 	bl	8000658 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4640      	mov	r0, r8
 80034b2:	4649      	mov	r1, r9
 80034b4:	f7fc ff1a 	bl	80002ec <__adddf3>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80034c6:	f7fc ff11 	bl	80002ec <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f7fd fbb9 	bl	8000c48 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e0:	4413      	add	r3, r2
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ee:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80034f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f851 	bl	80005a8 <__aeabi_f2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	f7fc feef 	bl	80002ec <__adddf3>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	6938      	ldr	r0, [r7, #16]
 8003518:	f7fd f846 	bl	80005a8 <__aeabi_f2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fd f9c2 	bl	80008ac <__aeabi_ddiv>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	18d6      	adds	r6, r2, r3
 8003538:	f7fd fb86 	bl	8000c48 <__aeabi_d2f>
 800353c:	4603      	mov	r3, r0
 800353e:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003542:	f7fd f831 	bl	80005a8 <__aeabi_f2d>
 8003546:	4680      	mov	r8, r0
 8003548:	4689      	mov	r9, r1
 800354a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800354c:	f7fd f82c 	bl	80005a8 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	f7fc feca 	bl	80002ec <__adddf3>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4692      	mov	sl, r2
 800355e:	469b      	mov	fp, r3
 8003560:	69f8      	ldr	r0, [r7, #28]
 8003562:	f7fd f821 	bl	80005a8 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4650      	mov	r0, sl
 800356c:	4659      	mov	r1, fp
 800356e:	f7fd f873 	bl	8000658 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fc feb5 	bl	80002e8 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800358c:	f7fc feae 	bl	80002ec <__adddf3>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f7fd f804 	bl	80005a8 <__aeabi_f2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fd f980 	bl	80008ac <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ba:	18d6      	adds	r6, r2, r3
 80035bc:	f7fd fb44 	bl	8000c48 <__aeabi_d2f>
 80035c0:	4603      	mov	r3, r0
 80035c2:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80035c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c6:	3301      	adds	r3, #1
 80035c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f6ff af17 	blt.w	8003402 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80035d4:	2300      	movs	r3, #0
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d8:	e0a9      	b.n	800372e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	441a      	add	r2, r3
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	440b      	add	r3, r1
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80035ee:	2300      	movs	r3, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	e094      	b.n	800371e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
 80035f4:	f3af 8000 	nop.w
 80035f8:	54442d18 	.word	0x54442d18
 80035fc:	400921fb 	.word	0x400921fb
 8003600:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8003604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	4413      	add	r3, r2
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	4413      	add	r3, r2
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003626:	4413      	add	r3, r2
 8003628:	edd3 6a00 	vldr	s13, [r3]
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	4413      	add	r3, r2
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003652:	4413      	add	r3, r2
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff9e 	bl	80005a8 <__aeabi_f2d>
 800366c:	4604      	mov	r4, r0
 800366e:	460d      	mov	r5, r1
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003676:	4413      	add	r3, r2
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff94 	bl	80005a8 <__aeabi_f2d>
 8003680:	4680      	mov	r8, r0
 8003682:	4689      	mov	r9, r1
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff8a 	bl	80005a8 <__aeabi_f2d>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	f7fc fe28 	bl	80002ec <__adddf3>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4640      	mov	r0, r8
 80036a2:	4649      	mov	r1, r9
 80036a4:	f7fc fe20 	bl	80002e8 <__aeabi_dsub>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	4699      	mov	r9, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff74 	bl	80005a8 <__aeabi_f2d>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fc fe10 	bl	80002ec <__adddf3>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7fc ffc0 	bl	8000658 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	18d4      	adds	r4, r2, r3
 80036e8:	f7fd faae 	bl	8000c48 <__aeabi_d2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80036f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	441a      	add	r2, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	440b      	add	r3, r1
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	441a      	add	r2, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	440b      	add	r3, r1
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	3301      	adds	r3, #1
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	429a      	cmp	r2, r3
 8003724:	f6ff af6e 	blt.w	8003604 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	3301      	adds	r3, #1
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
 800372e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	f4ff af51 	bcc.w	80035da <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 8003738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800373a:	f013 f9b3 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(d1);
 800373e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003740:	f013 f9b0 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(d2);
 8003744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003746:	f013 f9ad 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w0);
 800374a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374c:	f013 f9aa 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w1);
 8003750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003752:	f013 f9a7 	bl	8016aa4 <_Z7ei_freePv>
        ei_free(w2);
 8003756:	6a38      	ldr	r0, [r7, #32]
 8003758:	f013 f9a4 	bl	8016aa4 <_Z7ei_freePv>
    }
 800375c:	bf00      	nop
 800375e:	3754      	adds	r7, #84	; 0x54
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop

08003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	ed87 0a02 	vstr	s0, [r7, #8]
 8003774:	edc7 0a01 	vstr	s1, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e01e      	b.n	80037c0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_lowpass(
 8003782:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80037a6:	441a      	add	r2, r3
                matrix->cols);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80037ac:	4621      	mov	r1, r4
 80037ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80037b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80037b6:	f7ff fb97 	bl	8002ee8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3db      	bcc.n	8003782 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 80037ca:	2300      	movs	r3, #0
    }
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80037e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e01e      	b.n	800382c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_highpass(
 80037ee:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003812:	441a      	add	r2, r3
                matrix->cols);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8003818:	4621      	mov	r1, r4
 800381a:	edd7 0a01 	vldr	s1, [r7, #4]
 800381e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003822:	f7ff fd81 	bl	8003328 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	429a      	cmp	r2, r3
 8003834:	d3db      	bcc.n	80037ee <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003836:	2300      	movs	r3, #0
    }
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}

08003840 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003840:	b480      	push	{r7}
 8003842:	b091      	sub	sp, #68	; 0x44
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	ed87 0a01 	vstr	s0, [r7, #4]
 800384e:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 800385a:	e0ba      	b.n	80039d2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        if (output_matrix->cols != 1) {
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003866:	e0b4      	b.n	80039d2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        uint16_t out_ix = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003884:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a4>)
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	e028      	b.n	80038e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa6>
            if (in[ix] < min) {
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	6a3a      	ldr	r2, [r7, #32]
 800389a:	4413      	add	r3, r2
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	dd05      	ble.n	80038ba <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x7a>
                min = in[ix];
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	4413      	add	r3, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	4413      	add	r3, r2
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	d505      	bpl.n	80038e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa0>
                max = in[ix];
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	3301      	adds	r3, #1
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	3b01      	subs	r3, #1
 80038ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3d1      	bcc.n	8003894 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x54>
            }
        }


        float prev = in[0];
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80038f6:	2301      	movs	r3, #1
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fa:	e05f      	b.n	80039bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x17c>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	4413      	add	r3, r2
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800390c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d549      	bpl.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	4413      	add	r3, r2
 800391e:	ed93 7a00 	vldr	s14, [r3]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	3301      	adds	r3, #1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	4413      	add	r3, r2
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	dd37      	ble.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	4413      	add	r3, r2
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800394a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	4413      	add	r3, r2
 8003956:	edd3 6a00 	vldr	s13, [r3]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	3301      	adds	r3, #1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003974:	ed97 7a05 	vldr	s14, [r7, #20]
 8003978:	edd7 7a01 	vldr	s15, [r7, #4]
 800397c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003984:	dd11      	ble.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                    out[out_ix] = ix;
 8003986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4413      	add	r3, r2
 800398e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003990:	ee07 2a90 	vmov	s15, r2
 8003994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003998:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 800399c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800399e:	3301      	adds	r3, #1
 80039a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 80039a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00e      	beq.n	80039c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
                }
            }

            prev = in[ix];
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	4413      	add	r3, r2
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	3301      	adds	r3, #1
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3b01      	subs	r3, #1
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d39a      	bcc.n	80038fc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xbc>
 80039c6:	e000      	b.n	80039ca <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x18a>
                    if (out_ix == out_size) break;
 80039c8:	bf00      	nop
        }

        *peaks_found = out_ix;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80039ce:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80039d0:	2300      	movs	r3, #0
    }
 80039d2:	4618      	mov	r0, r3
 80039d4:	3744      	adds	r7, #68	; 0x44
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	fffffc14 	.word	0xfffffc14
 80039e4:	7f7fffff 	.word	0x7f7fffff

080039e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f006 fbb4 	bl	800a160 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ffeb 	bl	80039e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	bfcc      	ite	gt
 8003a3e:	2301      	movgt	r3, #1
 8003a40:	2300      	movle	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
        });
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	ed2d 8b02 	vpush	{d8}
 8003a56:	b09c      	sub	sp, #112	; 0x70
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6178      	str	r0, [r7, #20]
 8003a5c:	6139      	str	r1, [r7, #16]
 8003a5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a62:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a72:	4c95      	ldr	r4, [pc, #596]	; (8003cc8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a74:	e121      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->cols != 2) {
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d001      	beq.n	8003a82 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a7e:	4c92      	ldr	r4, [pc, #584]	; (8003cc8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a80:	e11b      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->rows == 0) {
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003a8a:	2400      	movs	r4, #0
 8003a8c:	e115      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        int N = static_cast<int>(fft_length);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	f7fd fd6a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003ab8:	4c84      	ldr	r4, [pc, #528]	; (8003ccc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003aba:	e0f9      	b.n	8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003abc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003ac0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da00      	bge.n	8003ad4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x84>
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	105b      	asrs	r3, r3, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 fb30 	bl	800a13c <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003adc:	ec53 2b10 	vmov	r2, r3, d0
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f890 	bl	8000c08 <__aeabi_d2uiz>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	eef0 0a48 	vmov.f32	s1, s16
 8003af4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003af8:	f7fe fb90 	bl	800221c <_ZN2ei5numpy8linspaceEffmPf>
 8003afc:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb8>
            EIDSP_ERR(ret);
 8003b04:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b06:	e0d3      	b.n	8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4619      	mov	r1, r3
 8003b16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f7fd fd32 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xdc>
 8003b28:	4c68      	ldr	r4, [pc, #416]	; (8003ccc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003b2a:	e0bc      	b.n	8003ca6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003b2c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b34:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff fe80 	bl	8003840 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003b40:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfc>
            EIDSP_ERR(ret);
 8003b48:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b4a:	e0ac      	b.n	8003ca6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ei_vector<freq_peak_t> peaks;
 8003b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff56 	bl	8003a02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003b5c:	e03c      	b.n	8003bd8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 3a90 	vmov	r3, s15
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 8003ba0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ba4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	dd05      	ble.n	8003bbe <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16e>
                d.freq = 0.0f;
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 8003bbe:	f107 0220 	add.w	r2, r7, #32
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f006 fb06 	bl	800a1da <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003bce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003bde:	4293      	cmp	r3, r2
 8003be0:	dbbd      	blt.n	8003b5e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10e>
        sort(peaks.begin(), peaks.end(),
 8003be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be6:	4618      	mov	r0, r3
 8003be8:	f006 fb1d 	bl	800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8003bec:	4604      	mov	r4, r0
 8003bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f006 fb27 	bl	800a246 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f006 fb32 	bl	800a268 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f006 fb3f 	bl	800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003c0e:	66b8      	str	r0, [r7, #104]	; 0x68
 8003c10:	e010      	b.n	8003c34 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003c1e:	f107 0218 	add.w	r2, r7, #24
 8003c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f006 fad6 	bl	800a1da <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c30:	3301      	adds	r3, #1
 8003c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e9      	bcc.n	8003c12 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1c2>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
 8003c42:	e025      	b.n	8003c90 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f006 fb2e 	bl	800a2ac <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	6802      	ldr	r2, [r0, #0]
 8003c64:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f006 fb1d 	bl	800a2ac <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	6842      	ldr	r2, [r0, #4]
 8003c88:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3d4      	bcc.n	8003c44 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f4>
        }

        return EIDSP_OK;
 8003c9a:	2400      	movs	r4, #0
    }
 8003c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f006 fa7f 	bl	800a1a4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8003ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fc96 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003cb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd fc91 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3770      	adds	r7, #112	; 0x70
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	ecbd 8b02 	vpop	{d8}
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc8:	fffffc14 	.word	0xfffffc14
 8003ccc:	fffffc16 	.word	0xfffffc16
 8003cd0:	00000000 	.word	0x00000000

08003cd4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b093      	sub	sp, #76	; 0x4c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6178      	str	r0, [r7, #20]
 8003cdc:	6139      	str	r1, [r7, #16]
 8003cde:	60fa      	str	r2, [r7, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d103      	bne.n	8003cf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cf6:	4c7b      	ldr	r4, [pc, #492]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003cf8:	e0ef      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d02:	4c78      	ldr	r4, [pc, #480]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d04:	e0e9      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d105      	bne.n	8003d20 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d20:	4c70      	ldr	r4, [pc, #448]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d22:	e0da      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d30:	4c6c      	ldr	r4, [pc, #432]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d32:	e0d2      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2101      	movs	r1, #1
 8003d42:	f7fd fc20 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003d4c:	4c66      	ldr	r4, [pc, #408]	; (8003ee8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d4e:	e0bf      	b.n	8003ed0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	f107 0018 	add.w	r0, r7, #24
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	f7fd fc12 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003d68:	4c5f      	ldr	r4, [pc, #380]	; (8003ee8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d6a:	e0ac      	b.n	8003ec6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d72:	e063      	b.n	8003e3c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            float t = freq_matrix->buffer[ix];
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d9a:	e043      	b.n	8003e24 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	db2f      	blt.n	8003e1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d51f      	bpl.n	8003e1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
                    buckets.buffer[ex] += v;
 8003dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e14:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003e18:	e00b      	b.n	8003e32 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e24:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b4      	bcc.n	8003d9c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e36:	3301      	adds	r3, #1
 8003e38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d395      	bcc.n	8003d74 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e4e:	e032      	b.n	8003eb6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e2>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d109      	bne.n	8003e7c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1a8>
                output_matrix->buffer[ex] = 0.0f;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e017      	b.n	8003eac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1d8>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	edd3 6a00 	vldr	s13, [r3]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	ed93 7a00 	vldr	s14, [r3]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003eb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3c5      	bcc.n	8003e50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17c>
            }
        }

        return EIDSP_OK;
 8003ec4:	2400      	movs	r4, #0
    }
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd fb86 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fb81 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003eda:	4623      	mov	r3, r4
 8003edc:	4618      	mov	r0, r3
 8003ede:	374c      	adds	r7, #76	; 0x4c
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	fffffc14 	.word	0xfffffc14
 8003ee8:	fffffc16 	.word	0xfffffc16

08003eec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	ed2d 8b02 	vpush	{d8}
 8003ef2:	b09b      	sub	sp, #108	; 0x6c
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6178      	str	r0, [r7, #20]
 8003ef8:	6139      	str	r1, [r7, #16]
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f00:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f0a:	4c82      	ldr	r4, [pc, #520]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f0c:	e192      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	0852      	lsrs	r2, r2, #1
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	3201      	adds	r2, #1
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d001      	beq.n	8003f2a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f26:	4c7b      	ldr	r4, [pc, #492]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f28:	e184      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	0852      	lsrs	r2, r2, #1
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d001      	beq.n	8003f46 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f42:	4c74      	ldr	r4, [pc, #464]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f44:	e176      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f4e:	4c72      	ldr	r4, [pc, #456]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f50:	e170      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f5a:	4c6f      	ldr	r4, [pc, #444]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f5c:	e16a      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f66:	4c6c      	ldr	r4, [pc, #432]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f68:	e164      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003f7a:	f7fd fb04 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8003f84:	4c64      	ldr	r4, [pc, #400]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f86:	e150      	b.n	800422a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d904      	bls.n	8003fa2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003fa0:	e006      	b.n	8003fb0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d201      	bcs.n	8003fb0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003fb0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003fb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2101      	movs	r1, #1
 8003fbc:	f7fd fae3 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8003fc6:	4c54      	ldr	r4, [pc, #336]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003fc8:	e12a      	b.n	8004220 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fd0:	e00c      	b.n	8003fec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x100>
            triage_segments.buffer[ix] = 1.0f;
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003fe0:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fe2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003ff0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3ec      	bcc.n	8003fd2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe6>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8003ff8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004004:	edd7 7a02 	vldr	s15, [r7, #8]
 8004008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004014:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004018:	2300      	movs	r3, #0
 800401a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800401e:	e025      	b.n	800406c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x180>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8004020:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004036:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004042:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004046:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800404a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004062:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004066:	3301      	adds	r3, #1
 8004068:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004076:	429a      	cmp	r2, r3
 8004078:	d9d2      	bls.n	8004020 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x134>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800407a:	f107 001c 	add.w	r0, r7, #28
 800407e:	2300      	movs	r3, #0
 8004080:	2201      	movs	r2, #1
 8004082:	2101      	movs	r1, #1
 8004084:	f7fd fa7f 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 800408e:	4c22      	ldr	r4, [pc, #136]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004090:	e0c1      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8004092:	f107 021c 	add.w	r2, r7, #28
 8004096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fd39 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 80040a2:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 80040aa:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040ac:	e0b3      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 80040ae:	f107 021c 	add.w	r2, r7, #28
 80040b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fc93 	bl	80019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80040be:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80040c6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040c8:	e0a5      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f012 fcd6 	bl	8016a88 <_Z9ei_callocjj>
 80040dc:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80040de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	461a      	mov	r2, r3
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	f7fd ffa0 	bl	8002038 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80040f8:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x21e>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8004100:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004102:	f012 fccf 	bl	8016aa4 <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8004106:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004108:	e085      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800410a:	2300      	movs	r3, #0
 800410c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004110:	e076      	b.n	8004200 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x314>
 8004112:	bf00      	nop
 8004114:	fffffc14 	.word	0xfffffc14
 8004118:	fffffc16 	.word	0xfffffc16
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 800411c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004124:	4413      	add	r3, r2
 8004126:	ed93 7a00 	vldr	s14, [r3]
 800412a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004132:	4413      	add	r3, r2
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 800413c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004144:	4413      	add	r3, r2
 8004146:	ed93 7a01 	vldr	s14, [r3, #4]
 800414a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004152:	4413      	add	r3, r2
 8004154:	edd3 7a01 	vldr	s15, [r3, #4]
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	f7fc ffc6 	bl	80010f0 <_ZSt3absf>
 8004164:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8004168:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004170:	4413      	add	r3, r2
 8004172:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004176:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800417a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004182:	4413      	add	r3, r2
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800418a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	4413      	add	r3, r2
 8004194:	ed93 7a00 	vldr	s14, [r3]
 8004198:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a0:	4413      	add	r3, r2
 80041a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d00f      	beq.n	80041dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2f0>
                fft_output[ix].r *= 2;
 80041bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c4:	4413      	add	r3, r2
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d2:	4413      	add	r3, r2
 80041d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041d8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80041dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e4:	441a      	add	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80041f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041fa:	3301      	adds	r3, #1
 80041fc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800420a:	429a      	cmp	r2, r3
 800420c:	d986      	bls.n	800411c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 800420e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004210:	f012 fc48 	bl	8016aa4 <_Z7ei_freePv>

        return EIDSP_OK;
 8004214:	2400      	movs	r4, #0
    }
 8004216:	f107 031c 	add.w	r3, r7, #28
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f9de 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8004220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd f9d9 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800422a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd f9d4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8004234:	4623      	mov	r3, r4
 8004236:	4618      	mov	r0, r3
 8004238:	3764      	adds	r7, #100	; 0x64
 800423a:	46bd      	mov	sp, r7
 800423c:	ecbd 8b02 	vpop	{d8}
 8004240:	bd90      	pop	{r4, r7, pc}
 8004242:	bf00      	nop

08004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	f107 000c 	add.w	r0, r7, #12
 8004254:	2300      	movs	r3, #0
 8004256:	2201      	movs	r2, #1
 8004258:	f7fd f995 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8004262:	4c12      	ldr	r4, [pc, #72]	; (80042ac <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8004264:	e018      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fd fc51 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004272:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800427a:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800427c:	e00c      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fd fbad 	bl	80019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800428a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004292:	4c07      	ldr	r4, [pc, #28]	; (80042b0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8004294:	e000      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8004296:	2400      	movs	r4, #0
    }
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd f99d 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80042a2:	4623      	mov	r3, r4
 80042a4:	4618      	mov	r0, r3
 80042a6:	3724      	adds	r7, #36	; 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd90      	pop	{r4, r7, pc}
 80042ac:	fffffc16 	.word	0xfffffc16
 80042b0:	fffffc14 	.word	0xfffffc14

080042b4 <_ZN2ei8spectral3dotEPKfS2_j>:
namespace spectral {

using fvec = ei_vector<float>;

inline float dot(const float *x, const float *y, size_t sz)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
    float sum = 0.0f;
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e016      	b.n	80042fa <_ZN2ei8spectral3dotEPKfS2_j+0x46>
        sum += x[i] * y[i];
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	edd3 7a00 	vldr	s15, [r3]
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80042ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f0:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3e4      	bcc.n	80042cc <_ZN2ei8spectral3dotEPKfS2_j+0x18>
    }
    return sum;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	ee07 3a90 	vmov	s15, r3
}
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:

inline void histo(const fvec &x, size_t nbins, fvec &h, bool normalize = false)
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b08f      	sub	sp, #60	; 0x3c
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	70fb      	strb	r3, [r7, #3]
    float min = *std::min_element(x.begin(), x.end());
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f005 fde1 	bl	8009eec <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800432a:	4604      	mov	r4, r0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f005 fded 	bl	8009f0c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8004332:	4603      	mov	r3, r0
 8004334:	4619      	mov	r1, r3
 8004336:	4620      	mov	r0, r4
 8004338:	f005 ffc8 	bl	800a2cc <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 800433c:	4603      	mov	r3, r0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4618      	mov	r0, r3
 8004346:	f005 fe1a 	bl	8009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800434a:	4603      	mov	r3, r0
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
    float max = *std::max_element(x.begin(), x.end());
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f005 fdcb 	bl	8009eec <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8004356:	4604      	mov	r4, r0
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f005 fdd7 	bl	8009f0c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800435e:	4603      	mov	r3, r0
 8004360:	4619      	mov	r1, r3
 8004362:	4620      	mov	r0, r4
 8004364:	f005 fe36 	bl	8009fd4 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 8004368:	4603      	mov	r3, r0
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	4618      	mov	r0, r3
 8004372:	f005 fe04 	bl	8009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8004376:	4603      	mov	r3, r0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    float step = (max - min) / nbins;
 800437c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004380:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004384:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	edc7 7a08 	vstr	s15, [r7, #32]
    h.resize(nbins);
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f005 ffa6 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	e02a      	b.n	80043fe <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe8>
        size_t bin = (x[i] - min) / step;
 80043a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f005 fe53 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043b0:	4603      	mov	r3, r0
 80043b2:	ed93 7a00 	vldr	s14, [r3]
 80043b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043be:	ed97 7a08 	vldr	s14, [r7, #32]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 3a90 	vmov	r3, s15
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
        if (bin >= nbins)
 80043d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xc8>
            bin = nbins - 1;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
        h[bin]++;
 80043de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f005 fd5e 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043e6:	4603      	mov	r3, r0
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043f4:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < x.size(); i++) {
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	3301      	adds	r3, #1
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f005 fba7 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8004404:	4602      	mov	r2, r0
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	4293      	cmp	r3, r2
 800440a:	bf34      	ite	cc
 800440c:	2301      	movcc	r3, #1
 800440e:	2300      	movcs	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1c8      	bne.n	80043a8 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x92>
    }
    if (normalize) {
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d024      	beq.n	8004466 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x150>
        float s = numpy::sum(h.data(), h.size());
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f005 fba8 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8004422:	4604      	mov	r4, r0
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f005 fb94 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800442a:	4603      	mov	r3, r0
 800442c:	4619      	mov	r1, r3
 800442e:	4620      	mov	r0, r4
 8004430:	f7fd f926 	bl	8001680 <_ZN2ei5numpy3sumEPfj>
 8004434:	ed87 0a07 	vstr	s0, [r7, #28]
        for (size_t i = 0; i < nbins; i++) {
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443c:	e00f      	b.n	800445e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x148>
            h[i] /= s;
 800443e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f005 fd2e 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004446:	4603      	mov	r3, r0
 8004448:	edd3 6a00 	vldr	s13, [r3]
 800444c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	edc3 7a00 	vstr	s15, [r3]
        for (size_t i = 0; i < nbins; i++) {
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	3301      	adds	r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d3eb      	bcc.n	800443e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x128>
        }
    }
}
 8004466:	bf00      	nop
 8004468:	373c      	adds	r7, #60	; 0x3c
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
	...

08004470 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
            h[i] = wav[0][n - i - 1];
            g[i] = wav[1][n - i - 1];
        }
    }

    static void find_filter(const char *wav, fvec &h, fvec &g)
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b0ab      	sub	sp, #172	; 0xac
 8004474:	af26      	add	r7, sp, #152	; 0x98
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
    {
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 800447c:	49ae      	ldr	r1, [pc, #696]	; (8004738 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7fb fec6 	bl	8000210 <strcmp>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
 800448a:	4eac      	ldr	r6, [pc, #688]	; (800473c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	9308      	str	r3, [sp, #32]
 8004494:	466d      	mov	r5, sp
 8004496:	f106 0410 	add.w	r4, r6, #16
 800449a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800449c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044aa:	f005 ff76 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
        else assert(0); // wavelet not in the list
    }
 80044ae:	f000 bd9a 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 80044b2:	49a3      	ldr	r1, [pc, #652]	; (8004740 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fb feab 	bl	8000210 <strcmp>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d117      	bne.n	80044f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80>
 80044c0:	4ea0      	ldr	r6, [pc, #640]	; (8004744 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9311      	str	r3, [sp, #68]	; 0x44
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	9310      	str	r3, [sp, #64]	; 0x40
 80044ca:	466d      	mov	r5, sp
 80044cc:	f106 0410 	add.w	r4, r6, #16
 80044d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044e8:	f005 ffc4 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80044ec:	f000 bd7b 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 80044f0:	4995      	ldr	r1, [pc, #596]	; (8004748 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fb fe8c 	bl	8000210 <strcmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6>
 80044fe:	4e93      	ldr	r6, [pc, #588]	; (800474c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9309      	str	r3, [sp, #36]	; 0x24
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	9308      	str	r3, [sp, #32]
 8004508:	466d      	mov	r5, sp
 800450a:	f106 0410 	add.w	r4, r6, #16
 800450e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004512:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004516:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800451a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800451e:	f005 ff3c 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004522:	f000 bd60 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 8004526:	498a      	ldr	r1, [pc, #552]	; (8004750 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fb fe71 	bl	8000210 <strcmp>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d117      	bne.n	8004564 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf4>
 8004534:	4e87      	ldr	r6, [pc, #540]	; (8004754 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	9311      	str	r3, [sp, #68]	; 0x44
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	9310      	str	r3, [sp, #64]	; 0x40
 800453e:	466d      	mov	r5, sp
 8004540:	f106 0410 	add.w	r4, r6, #16
 8004544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800454a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800454c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800454e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004550:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004554:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004558:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800455c:	f005 ff8a 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004560:	f000 bd41 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 8004564:	497c      	ldr	r1, [pc, #496]	; (8004758 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fb fe52 	bl	8000210 <strcmp>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d111      	bne.n	8004596 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 8004572:	4c7a      	ldr	r4, [pc, #488]	; (800475c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9319      	str	r3, [sp, #100]	; 0x64
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	9318      	str	r3, [sp, #96]	; 0x60
 800457c:	4668      	mov	r0, sp
 800457e:	f104 0310 	add.w	r3, r4, #16
 8004582:	2260      	movs	r2, #96	; 0x60
 8004584:	4619      	mov	r1, r3
 8004586:	f019 fd72 	bl	801e06e <memcpy>
 800458a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800458e:	f005 ffde 	bl	800a54e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004592:	f000 bd28 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 8004596:	4972      	ldr	r1, [pc, #456]	; (8004760 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fb fe39 	bl	8000210 <strcmp>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
 80045a4:	4c6f      	ldr	r4, [pc, #444]	; (8004764 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	9321      	str	r3, [sp, #132]	; 0x84
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	9320      	str	r3, [sp, #128]	; 0x80
 80045ae:	4668      	mov	r0, sp
 80045b0:	f104 0310 	add.w	r3, r4, #16
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	4619      	mov	r1, r3
 80045b8:	f019 fd59 	bl	801e06e <memcpy>
 80045bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045c0:	f006 f836 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045c4:	f000 bd0f 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 80045c8:	4967      	ldr	r1, [pc, #412]	; (8004768 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7fb fe20 	bl	8000210 <strcmp>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d110      	bne.n	80045f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x188>
 80045d6:	4c65      	ldr	r4, [pc, #404]	; (800476c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	466d      	mov	r5, sp
 80045e2:	f104 0310 	add.w	r3, r4, #16
 80045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80045ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045f0:	f006 f88c 	bl	800a70c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045f4:	f000 bcf7 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 80045f8:	495d      	ldr	r1, [pc, #372]	; (8004770 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7fb fe08 	bl	8000210 <strcmp>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 8004606:	4e5b      	ldr	r6, [pc, #364]	; (8004774 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	930d      	str	r3, [sp, #52]	; 0x34
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	930c      	str	r3, [sp, #48]	; 0x30
 8004610:	466d      	mov	r5, sp
 8004612:	f106 0410 	add.w	r4, r6, #16
 8004616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004626:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800462a:	f006 f8d9 	bl	800a7e0 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800462e:	f000 bcda 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 8004632:	4951      	ldr	r1, [pc, #324]	; (8004778 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fb fdeb 	bl	8000210 <strcmp>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d111      	bne.n	8004664 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1f4>
 8004640:	4c4e      	ldr	r4, [pc, #312]	; (800477c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	9315      	str	r3, [sp, #84]	; 0x54
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	9314      	str	r3, [sp, #80]	; 0x50
 800464a:	4668      	mov	r0, sp
 800464c:	f104 0310 	add.w	r3, r4, #16
 8004650:	2250      	movs	r2, #80	; 0x50
 8004652:	4619      	mov	r1, r3
 8004654:	f019 fd0b 	bl	801e06e <memcpy>
 8004658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800465c:	f006 f92d 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004660:	f000 bcc1 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 8004664:	4946      	ldr	r1, [pc, #280]	; (8004780 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fb fdd2 	bl	8000210 <strcmp>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d111      	bne.n	8004696 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x226>
 8004672:	4c44      	ldr	r4, [pc, #272]	; (8004784 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	931d      	str	r3, [sp, #116]	; 0x74
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	931c      	str	r3, [sp, #112]	; 0x70
 800467c:	4668      	mov	r0, sp
 800467e:	f104 0310 	add.w	r3, r4, #16
 8004682:	2270      	movs	r2, #112	; 0x70
 8004684:	4619      	mov	r1, r3
 8004686:	f019 fcf2 	bl	801e06e <memcpy>
 800468a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800468e:	f006 f97e 	bl	800a98e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004692:	f000 bca8 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 8004696:	493c      	ldr	r1, [pc, #240]	; (8004788 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fb fdb9 	bl	8000210 <strcmp>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x258>
 80046a4:	4c39      	ldr	r4, [pc, #228]	; (800478c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	9325      	str	r3, [sp, #148]	; 0x94
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	9324      	str	r3, [sp, #144]	; 0x90
 80046ae:	4668      	mov	r0, sp
 80046b0:	f104 0310 	add.w	r3, r4, #16
 80046b4:	2290      	movs	r2, #144	; 0x90
 80046b6:	4619      	mov	r1, r3
 80046b8:	f019 fcd9 	bl	801e06e <memcpy>
 80046bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046c0:	f006 f9d6 	bl	800aa70 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046c4:	f000 bc8f 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 80046c8:	4931      	ldr	r1, [pc, #196]	; (8004790 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7fb fda0 	bl	8000210 <strcmp>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d117      	bne.n	8004706 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x296>
 80046d6:	4e2f      	ldr	r6, [pc, #188]	; (8004794 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9311      	str	r3, [sp, #68]	; 0x44
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	9310      	str	r3, [sp, #64]	; 0x40
 80046e0:	466d      	mov	r5, sp
 80046e2:	f106 0410 	add.w	r4, r6, #16
 80046e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80046fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80046fe:	f005 feb9 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004702:	f000 bc70 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 8004706:	4924      	ldr	r1, [pc, #144]	; (8004798 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7fb fd81 	bl	8000210 <strcmp>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d145      	bne.n	80047a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>
 8004714:	4c21      	ldr	r4, [pc, #132]	; (800479c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	9315      	str	r3, [sp, #84]	; 0x54
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	9314      	str	r3, [sp, #80]	; 0x50
 800471e:	4668      	mov	r0, sp
 8004720:	f104 0310 	add.w	r3, r4, #16
 8004724:	2250      	movs	r2, #80	; 0x50
 8004726:	4619      	mov	r1, r3
 8004728:	f019 fca1 	bl	801e06e <memcpy>
 800472c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004730:	f006 f8c3 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004734:	f000 bc57 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004738:	0801fe88 	.word	0x0801fe88
 800473c:	0802277c 	.word	0x0802277c
 8004740:	0801fe90 	.word	0x0801fe90
 8004744:	080227ac 	.word	0x080227ac
 8004748:	0801fe98 	.word	0x0801fe98
 800474c:	080227fc 	.word	0x080227fc
 8004750:	0801fea0 	.word	0x0801fea0
 8004754:	0802282c 	.word	0x0802282c
 8004758:	0801fea8 	.word	0x0801fea8
 800475c:	0802287c 	.word	0x0802287c
 8004760:	0801feb0 	.word	0x0801feb0
 8004764:	080228ec 	.word	0x080228ec
 8004768:	0801feb8 	.word	0x0801feb8
 800476c:	0802297c 	.word	0x0802297c
 8004770:	0801fec0 	.word	0x0801fec0
 8004774:	0802299c 	.word	0x0802299c
 8004778:	0801fec8 	.word	0x0801fec8
 800477c:	080229dc 	.word	0x080229dc
 8004780:	0801fed0 	.word	0x0801fed0
 8004784:	08022a3c 	.word	0x08022a3c
 8004788:	0801fed8 	.word	0x0801fed8
 800478c:	08022abc 	.word	0x08022abc
 8004790:	0801fee0 	.word	0x0801fee0
 8004794:	08022b5c 	.word	0x08022b5c
 8004798:	0801fee8 	.word	0x0801fee8
 800479c:	08022bac 	.word	0x08022bac
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 80047a0:	49b1      	ldr	r1, [pc, #708]	; (8004a68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5f8>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7fb fd34 	bl	8000210 <strcmp>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d111      	bne.n	80047d2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x362>
 80047ae:	4caf      	ldr	r4, [pc, #700]	; (8004a6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5fc>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	9321      	str	r3, [sp, #132]	; 0x84
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	9320      	str	r3, [sp, #128]	; 0x80
 80047b8:	4668      	mov	r0, sp
 80047ba:	f104 0310 	add.w	r3, r4, #16
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	4619      	mov	r1, r3
 80047c2:	f019 fc54 	bl	801e06e <memcpy>
 80047c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ca:	f005 ff31 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80047ce:	f000 bc0a 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 80047d2:	49a7      	ldr	r1, [pc, #668]	; (8004a70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x600>)
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7fb fd1b 	bl	8000210 <strcmp>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d112      	bne.n	8004806 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 80047e0:	4ea4      	ldr	r6, [pc, #656]	; (8004a74 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x604>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	466d      	mov	r5, sp
 80047ec:	f106 0410 	add.w	r4, r6, #16
 80047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80047fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004800:	f005 fdcb 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004804:	e3ef      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 8004806:	499c      	ldr	r1, [pc, #624]	; (8004a78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x608>)
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fb fd01 	bl	8000210 <strcmp>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d110      	bne.n	8004836 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c6>
 8004814:	4c99      	ldr	r4, [pc, #612]	; (8004a7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x60c>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9315      	str	r3, [sp, #84]	; 0x54
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	9314      	str	r3, [sp, #80]	; 0x50
 800481e:	4668      	mov	r0, sp
 8004820:	f104 0310 	add.w	r3, r4, #16
 8004824:	2250      	movs	r2, #80	; 0x50
 8004826:	4619      	mov	r1, r3
 8004828:	f019 fc21 	bl	801e06e <memcpy>
 800482c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004830:	f006 f843 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004834:	e3d7      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 8004836:	4992      	ldr	r1, [pc, #584]	; (8004a80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x610>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7fb fce9 	bl	8000210 <strcmp>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d110      	bne.n	8004866 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f6>
 8004844:	4c8f      	ldr	r4, [pc, #572]	; (8004a84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x614>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9321      	str	r3, [sp, #132]	; 0x84
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	9320      	str	r3, [sp, #128]	; 0x80
 800484e:	4668      	mov	r0, sp
 8004850:	f104 0310 	add.w	r3, r4, #16
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	4619      	mov	r1, r3
 8004858:	f019 fc09 	bl	801e06e <memcpy>
 800485c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004860:	f005 fee6 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004864:	e3bf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 8004866:	4988      	ldr	r1, [pc, #544]	; (8004a88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x618>)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7fb fcd1 	bl	8000210 <strcmp>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x424>
 8004874:	4c85      	ldr	r4, [pc, #532]	; (8004a8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x61c>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	9305      	str	r3, [sp, #20]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	466d      	mov	r5, sp
 8004880:	f104 0310 	add.w	r3, r4, #16
 8004884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004886:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800488a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800488e:	f005 ff3d 	bl	800a70c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004892:	e3a8      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 8004894:	497e      	ldr	r1, [pc, #504]	; (8004a90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x620>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7fb fcba 	bl	8000210 <strcmp>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d112      	bne.n	80048c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x458>
 80048a2:	4e7c      	ldr	r6, [pc, #496]	; (8004a94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x624>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	9308      	str	r3, [sp, #32]
 80048ac:	466d      	mov	r5, sp
 80048ae:	f106 0410 	add.w	r4, r6, #16
 80048b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048c2:	f005 fd6a 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048c6:	e38e      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 80048c8:	4973      	ldr	r1, [pc, #460]	; (8004a98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x628>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7fb fca0 	bl	8000210 <strcmp>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d114      	bne.n	8004900 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x490>
 80048d6:	4e71      	ldr	r6, [pc, #452]	; (8004a9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x62c>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	930d      	str	r3, [sp, #52]	; 0x34
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	930c      	str	r3, [sp, #48]	; 0x30
 80048e0:	466d      	mov	r5, sp
 80048e2:	f106 0410 	add.w	r4, r6, #16
 80048e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048fa:	f005 ff71 	bl	800a7e0 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048fe:	e372      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 8004900:	4967      	ldr	r1, [pc, #412]	; (8004aa0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x630>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7fb fc84 	bl	8000210 <strcmp>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>
 800490e:	4e65      	ldr	r6, [pc, #404]	; (8004aa4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x634>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	9311      	str	r3, [sp, #68]	; 0x44
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	9310      	str	r3, [sp, #64]	; 0x40
 8004918:	466d      	mov	r5, sp
 800491a:	f106 0410 	add.w	r4, r6, #16
 800491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800492e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004932:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004936:	f005 fd9d 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800493a:	e354      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 800493c:	495a      	ldr	r1, [pc, #360]	; (8004aa8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x638>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fb fc66 	bl	8000210 <strcmp>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>
 800494a:	4c58      	ldr	r4, [pc, #352]	; (8004aac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x63c>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	9315      	str	r3, [sp, #84]	; 0x54
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	9314      	str	r3, [sp, #80]	; 0x50
 8004954:	4668      	mov	r0, sp
 8004956:	f104 0310 	add.w	r3, r4, #16
 800495a:	2250      	movs	r2, #80	; 0x50
 800495c:	4619      	mov	r1, r3
 800495e:	f019 fb86 	bl	801e06e <memcpy>
 8004962:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004966:	f005 ffa8 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800496a:	e33c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 800496c:	4950      	ldr	r1, [pc, #320]	; (8004ab0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x640>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7fb fc4e 	bl	8000210 <strcmp>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>
 800497a:	4c4e      	ldr	r4, [pc, #312]	; (8004ab4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x644>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	9319      	str	r3, [sp, #100]	; 0x64
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	9318      	str	r3, [sp, #96]	; 0x60
 8004984:	4668      	mov	r0, sp
 8004986:	f104 0310 	add.w	r3, r4, #16
 800498a:	2260      	movs	r2, #96	; 0x60
 800498c:	4619      	mov	r1, r3
 800498e:	f019 fb6e 	bl	801e06e <memcpy>
 8004992:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004996:	f005 fdda 	bl	800a54e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800499a:	e324      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 800499c:	4946      	ldr	r1, [pc, #280]	; (8004ab8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x648>)
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7fb fc36 	bl	8000210 <strcmp>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d110      	bne.n	80049cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>
 80049aa:	4c44      	ldr	r4, [pc, #272]	; (8004abc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x64c>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	931d      	str	r3, [sp, #116]	; 0x74
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	931c      	str	r3, [sp, #112]	; 0x70
 80049b4:	4668      	mov	r0, sp
 80049b6:	f104 0310 	add.w	r3, r4, #16
 80049ba:	2270      	movs	r2, #112	; 0x70
 80049bc:	4619      	mov	r1, r3
 80049be:	f019 fb56 	bl	801e06e <memcpy>
 80049c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049c6:	f005 ffe2 	bl	800a98e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049ca:	e30c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 80049cc:	493c      	ldr	r1, [pc, #240]	; (8004ac0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x650>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7fb fc1e 	bl	8000210 <strcmp>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x58c>
 80049da:	4c3a      	ldr	r4, [pc, #232]	; (8004ac4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x654>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	9321      	str	r3, [sp, #132]	; 0x84
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	9320      	str	r3, [sp, #128]	; 0x80
 80049e4:	4668      	mov	r0, sp
 80049e6:	f104 0310 	add.w	r3, r4, #16
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	4619      	mov	r1, r3
 80049ee:	f019 fb3e 	bl	801e06e <memcpy>
 80049f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049f6:	f005 fe1b 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049fa:	e2f4      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 80049fc:	4932      	ldr	r1, [pc, #200]	; (8004ac8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x658>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fb fc06 	bl	8000210 <strcmp>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d110      	bne.n	8004a2c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5bc>
 8004a0a:	4c30      	ldr	r4, [pc, #192]	; (8004acc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x65c>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9325      	str	r3, [sp, #148]	; 0x94
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	9324      	str	r3, [sp, #144]	; 0x90
 8004a14:	4668      	mov	r0, sp
 8004a16:	f104 0310 	add.w	r3, r4, #16
 8004a1a:	2290      	movs	r2, #144	; 0x90
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f019 fb26 	bl	801e06e <memcpy>
 8004a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a26:	f006 f823 	bl	800aa70 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a2a:	e2dc      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 8004a2c:	4928      	ldr	r1, [pc, #160]	; (8004ad0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x660>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fb fbee 	bl	8000210 <strcmp>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d14e      	bne.n	8004ad8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x668>
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x664>)
 8004a3c:	ed93 6a00 	vldr	s12, [r3]
 8004a40:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a44:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a48:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	eeb0 0a46 	vmov.f32	s0, s12
 8004a54:	eef0 0a66 	vmov.f32	s1, s13
 8004a58:	eeb0 1a47 	vmov.f32	s2, s14
 8004a5c:	eef0 1a67 	vmov.f32	s3, s15
 8004a60:	f006 f874 	bl	800ab4c <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a64:	e2bf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004a66:	bf00      	nop
 8004a68:	0801fef0 	.word	0x0801fef0
 8004a6c:	08022c0c 	.word	0x08022c0c
 8004a70:	0801fef8 	.word	0x0801fef8
 8004a74:	08022c9c 	.word	0x08022c9c
 8004a78:	0801ff00 	.word	0x0801ff00
 8004a7c:	08022ccc 	.word	0x08022ccc
 8004a80:	0801ff08 	.word	0x0801ff08
 8004a84:	08022d2c 	.word	0x08022d2c
 8004a88:	0801ff10 	.word	0x0801ff10
 8004a8c:	08022dbc 	.word	0x08022dbc
 8004a90:	0801ff14 	.word	0x0801ff14
 8004a94:	08022ddc 	.word	0x08022ddc
 8004a98:	0801ff18 	.word	0x0801ff18
 8004a9c:	08022e0c 	.word	0x08022e0c
 8004aa0:	0801ff1c 	.word	0x0801ff1c
 8004aa4:	08022e4c 	.word	0x08022e4c
 8004aa8:	0801ff20 	.word	0x0801ff20
 8004aac:	08022e9c 	.word	0x08022e9c
 8004ab0:	0801ff24 	.word	0x0801ff24
 8004ab4:	08022efc 	.word	0x08022efc
 8004ab8:	0801ff28 	.word	0x0801ff28
 8004abc:	08022f6c 	.word	0x08022f6c
 8004ac0:	0801ff2c 	.word	0x0801ff2c
 8004ac4:	08022fec 	.word	0x08022fec
 8004ac8:	0801ff30 	.word	0x0801ff30
 8004acc:	0802307c 	.word	0x0802307c
 8004ad0:	0801ff38 	.word	0x0801ff38
 8004ad4:	0802311c 	.word	0x0802311c
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 8004ad8:	49a8      	ldr	r1, [pc, #672]	; (8004d7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x90c>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fb fb98 	bl	8000210 <strcmp>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d112      	bne.n	8004b0c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x69c>
 8004ae6:	4ea6      	ldr	r6, [pc, #664]	; (8004d80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x910>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9309      	str	r3, [sp, #36]	; 0x24
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	9308      	str	r3, [sp, #32]
 8004af0:	466d      	mov	r5, sp
 8004af2:	f106 0410 	add.w	r4, r6, #16
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004afe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b06:	f005 fc48 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b0a:	e26c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 8004b0c:	499d      	ldr	r1, [pc, #628]	; (8004d84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x914>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7fb fb7e 	bl	8000210 <strcmp>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6d8>
 8004b1a:	4e9b      	ldr	r6, [pc, #620]	; (8004d88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x918>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	9310      	str	r3, [sp, #64]	; 0x40
 8004b24:	466d      	mov	r5, sp
 8004b26:	f106 0410 	add.w	r4, r6, #16
 8004b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b42:	f005 fc97 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b46:	e24e      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 8004b48:	4990      	ldr	r1, [pc, #576]	; (8004d8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x91c>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7fb fb60 	bl	8000210 <strcmp>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d112      	bne.n	8004b7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x70c>
 8004b56:	4e8e      	ldr	r6, [pc, #568]	; (8004d90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x920>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	9308      	str	r3, [sp, #32]
 8004b60:	466d      	mov	r5, sp
 8004b62:	f106 0410 	add.w	r4, r6, #16
 8004b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b76:	f005 fc10 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b7a:	e234      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 8004b7c:	4985      	ldr	r1, [pc, #532]	; (8004d94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x924>)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7fb fb46 	bl	8000210 <strcmp>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x748>
 8004b8a:	4e83      	ldr	r6, [pc, #524]	; (8004d98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x928>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	9310      	str	r3, [sp, #64]	; 0x40
 8004b94:	466d      	mov	r5, sp
 8004b96:	f106 0410 	add.w	r4, r6, #16
 8004b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004baa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004bae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004bb2:	f005 fc5f 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bb6:	e216      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 8004bb8:	4978      	ldr	r1, [pc, #480]	; (8004d9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92c>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7fb fb28 	bl	8000210 <strcmp>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d110      	bne.n	8004be8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x778>
 8004bc6:	4c76      	ldr	r4, [pc, #472]	; (8004da0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x930>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9319      	str	r3, [sp, #100]	; 0x64
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	9318      	str	r3, [sp, #96]	; 0x60
 8004bd0:	4668      	mov	r0, sp
 8004bd2:	f104 0310 	add.w	r3, r4, #16
 8004bd6:	2260      	movs	r2, #96	; 0x60
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f019 fa48 	bl	801e06e <memcpy>
 8004bde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004be2:	f005 fcb4 	bl	800a54e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004be6:	e1fe      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 8004be8:	496e      	ldr	r1, [pc, #440]	; (8004da4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x934>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7fb fb10 	bl	8000210 <strcmp>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7a8>
 8004bf6:	4c6c      	ldr	r4, [pc, #432]	; (8004da8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x938>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	9321      	str	r3, [sp, #132]	; 0x84
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	9320      	str	r3, [sp, #128]	; 0x80
 8004c00:	4668      	mov	r0, sp
 8004c02:	f104 0310 	add.w	r3, r4, #16
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f019 fa30 	bl	801e06e <memcpy>
 8004c0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c12:	f005 fd0d 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c16:	e1e6      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 8004c18:	4964      	ldr	r1, [pc, #400]	; (8004dac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x93c>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7fb faf8 	bl	8000210 <strcmp>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7d6>
 8004c26:	4c62      	ldr	r4, [pc, #392]	; (8004db0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x940>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	9305      	str	r3, [sp, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	466d      	mov	r5, sp
 8004c32:	f104 0310 	add.w	r3, r4, #16
 8004c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c40:	f005 fd64 	bl	800a70c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c44:	e1cf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 8004c46:	495b      	ldr	r1, [pc, #364]	; (8004db4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x944>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7fb fae1 	bl	8000210 <strcmp>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d114      	bne.n	8004c7e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80e>
 8004c54:	4e58      	ldr	r6, [pc, #352]	; (8004db8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x948>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8004c5e:	466d      	mov	r5, sp
 8004c60:	f106 0410 	add.w	r4, r6, #16
 8004c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c70:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c78:	f005 fdb2 	bl	800a7e0 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c7c:	e1b3      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 8004c7e:	494f      	ldr	r1, [pc, #316]	; (8004dbc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x94c>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7fb fac5 	bl	8000210 <strcmp>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x83e>
 8004c8c:	4c4c      	ldr	r4, [pc, #304]	; (8004dc0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x950>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9315      	str	r3, [sp, #84]	; 0x54
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	9314      	str	r3, [sp, #80]	; 0x50
 8004c96:	4668      	mov	r0, sp
 8004c98:	f104 0310 	add.w	r3, r4, #16
 8004c9c:	2250      	movs	r2, #80	; 0x50
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f019 f9e5 	bl	801e06e <memcpy>
 8004ca4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ca8:	f005 fe07 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cac:	e19b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 8004cae:	4945      	ldr	r1, [pc, #276]	; (8004dc4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x954>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fb faad 	bl	8000210 <strcmp>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d110      	bne.n	8004cde <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86e>
 8004cbc:	4c42      	ldr	r4, [pc, #264]	; (8004dc8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x958>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	931d      	str	r3, [sp, #116]	; 0x74
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	931c      	str	r3, [sp, #112]	; 0x70
 8004cc6:	4668      	mov	r0, sp
 8004cc8:	f104 0310 	add.w	r3, r4, #16
 8004ccc:	2270      	movs	r2, #112	; 0x70
 8004cce:	4619      	mov	r1, r3
 8004cd0:	f019 f9cd 	bl	801e06e <memcpy>
 8004cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cd8:	f005 fe59 	bl	800a98e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cdc:	e183      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 8004cde:	493b      	ldr	r1, [pc, #236]	; (8004dcc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x95c>)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7fb fa95 	bl	8000210 <strcmp>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x89e>
 8004cec:	4c38      	ldr	r4, [pc, #224]	; (8004dd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x960>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	9325      	str	r3, [sp, #148]	; 0x94
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	9324      	str	r3, [sp, #144]	; 0x90
 8004cf6:	4668      	mov	r0, sp
 8004cf8:	f104 0310 	add.w	r3, r4, #16
 8004cfc:	2290      	movs	r2, #144	; 0x90
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f019 f9b5 	bl	801e06e <memcpy>
 8004d04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d08:	f005 feb2 	bl	800aa70 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d0c:	e16b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 8004d0e:	4931      	ldr	r1, [pc, #196]	; (8004dd4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x964>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7fb fa7d 	bl	8000210 <strcmp>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x8da>
 8004d1c:	4e2e      	ldr	r6, [pc, #184]	; (8004dd8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x968>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	9311      	str	r3, [sp, #68]	; 0x44
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	9310      	str	r3, [sp, #64]	; 0x40
 8004d26:	466d      	mov	r5, sp
 8004d28:	f106 0410 	add.w	r4, r6, #16
 8004d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d44:	f005 fb96 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d48:	e14d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 8004d4a:	4924      	ldr	r1, [pc, #144]	; (8004ddc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x96c>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7fb fa5f 	bl	8000210 <strcmp>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d145      	bne.n	8004de4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x974>
 8004d58:	4c21      	ldr	r4, [pc, #132]	; (8004de0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x970>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	9315      	str	r3, [sp, #84]	; 0x54
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	9314      	str	r3, [sp, #80]	; 0x50
 8004d62:	4668      	mov	r0, sp
 8004d64:	f104 0310 	add.w	r3, r4, #16
 8004d68:	2250      	movs	r2, #80	; 0x50
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f019 f97f 	bl	801e06e <memcpy>
 8004d70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d74:	f005 fda1 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d78:	e135      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004d7a:	bf00      	nop
 8004d7c:	0801ff40 	.word	0x0801ff40
 8004d80:	0802312c 	.word	0x0802312c
 8004d84:	0801ff48 	.word	0x0801ff48
 8004d88:	0802315c 	.word	0x0802315c
 8004d8c:	0801ff50 	.word	0x0801ff50
 8004d90:	080231ac 	.word	0x080231ac
 8004d94:	0801ff58 	.word	0x0801ff58
 8004d98:	080231dc 	.word	0x080231dc
 8004d9c:	0801ff60 	.word	0x0801ff60
 8004da0:	0802322c 	.word	0x0802322c
 8004da4:	0801ff68 	.word	0x0801ff68
 8004da8:	0802329c 	.word	0x0802329c
 8004dac:	0801ff70 	.word	0x0801ff70
 8004db0:	0802332c 	.word	0x0802332c
 8004db4:	0801ff78 	.word	0x0801ff78
 8004db8:	0802334c 	.word	0x0802334c
 8004dbc:	0801ff80 	.word	0x0801ff80
 8004dc0:	0802338c 	.word	0x0802338c
 8004dc4:	0801ff88 	.word	0x0801ff88
 8004dc8:	080233ec 	.word	0x080233ec
 8004dcc:	0801ff90 	.word	0x0801ff90
 8004dd0:	0802346c 	.word	0x0802346c
 8004dd4:	0801ff98 	.word	0x0801ff98
 8004dd8:	0802350c 	.word	0x0802350c
 8004ddc:	0801ffa0 	.word	0x0801ffa0
 8004de0:	0802355c 	.word	0x0802355c
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 8004de4:	4981      	ldr	r1, [pc, #516]	; (8004fec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb7c>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fb fa12 	bl	8000210 <strcmp>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d110      	bne.n	8004e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9a4>
 8004df2:	4c7f      	ldr	r4, [pc, #508]	; (8004ff0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb80>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9321      	str	r3, [sp, #132]	; 0x84
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	9320      	str	r3, [sp, #128]	; 0x80
 8004dfc:	4668      	mov	r0, sp
 8004dfe:	f104 0310 	add.w	r3, r4, #16
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	4619      	mov	r1, r3
 8004e06:	f019 f932 	bl	801e06e <memcpy>
 8004e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e0e:	f005 fc0f 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e12:	e0e8      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 8004e14:	4977      	ldr	r1, [pc, #476]	; (8004ff4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb84>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7fb f9fa 	bl	8000210 <strcmp>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9d2>
 8004e22:	4c75      	ldr	r4, [pc, #468]	; (8004ff8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb88>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	9305      	str	r3, [sp, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	466d      	mov	r5, sp
 8004e2e:	f104 0310 	add.w	r3, r4, #16
 8004e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e3c:	f005 fc66 	bl	800a70c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e40:	e0d1      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 8004e42:	496e      	ldr	r1, [pc, #440]	; (8004ffc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8c>)
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7fb f9e3 	bl	8000210 <strcmp>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d112      	bne.n	8004e76 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa06>
 8004e50:	4e6b      	ldr	r6, [pc, #428]	; (8005000 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb90>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	9308      	str	r3, [sp, #32]
 8004e5a:	466d      	mov	r5, sp
 8004e5c:	f106 0410 	add.w	r4, r6, #16
 8004e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e70:	f005 fa93 	bl	800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e74:	e0b7      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 8004e76:	4963      	ldr	r1, [pc, #396]	; (8005004 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb94>)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7fb f9c9 	bl	8000210 <strcmp>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d114      	bne.n	8004eae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa3e>
 8004e84:	4e60      	ldr	r6, [pc, #384]	; (8005008 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb98>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	930d      	str	r3, [sp, #52]	; 0x34
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e8e:	466d      	mov	r5, sp
 8004e90:	f106 0410 	add.w	r4, r6, #16
 8004e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ea0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ea4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ea8:	f005 fc9a 	bl	800a7e0 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004eac:	e09b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 8004eae:	4957      	ldr	r1, [pc, #348]	; (800500c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb9c>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7fb f9ad 	bl	8000210 <strcmp>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa7a>
 8004ebc:	4e54      	ldr	r6, [pc, #336]	; (8005010 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba0>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	9310      	str	r3, [sp, #64]	; 0x40
 8004ec6:	466d      	mov	r5, sp
 8004ec8:	f106 0410 	add.w	r4, r6, #16
 8004ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004edc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ee0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ee4:	f005 fac6 	bl	800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ee8:	e07d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 8004eea:	494a      	ldr	r1, [pc, #296]	; (8005014 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba4>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7fb f98f 	bl	8000210 <strcmp>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xaaa>
 8004ef8:	4c47      	ldr	r4, [pc, #284]	; (8005018 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba8>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9315      	str	r3, [sp, #84]	; 0x54
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	9314      	str	r3, [sp, #80]	; 0x50
 8004f02:	4668      	mov	r0, sp
 8004f04:	f104 0310 	add.w	r3, r4, #16
 8004f08:	2250      	movs	r2, #80	; 0x50
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f019 f8af 	bl	801e06e <memcpy>
 8004f10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f14:	f005 fcd1 	bl	800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f18:	e065      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 8004f1a:	4940      	ldr	r1, [pc, #256]	; (800501c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbac>)
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7fb f977 	bl	8000210 <strcmp>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d110      	bne.n	8004f4a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xada>
 8004f28:	4c3d      	ldr	r4, [pc, #244]	; (8005020 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb0>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	9318      	str	r3, [sp, #96]	; 0x60
 8004f32:	4668      	mov	r0, sp
 8004f34:	f104 0310 	add.w	r3, r4, #16
 8004f38:	2260      	movs	r2, #96	; 0x60
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f019 f897 	bl	801e06e <memcpy>
 8004f40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f44:	f005 fb03 	bl	800a54e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f48:	e04d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 8004f4a:	4936      	ldr	r1, [pc, #216]	; (8005024 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb4>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7fb f95f 	bl	8000210 <strcmp>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb0a>
 8004f58:	4c33      	ldr	r4, [pc, #204]	; (8005028 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb8>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	931d      	str	r3, [sp, #116]	; 0x74
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	931c      	str	r3, [sp, #112]	; 0x70
 8004f62:	4668      	mov	r0, sp
 8004f64:	f104 0310 	add.w	r3, r4, #16
 8004f68:	2270      	movs	r2, #112	; 0x70
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f019 f87f 	bl	801e06e <memcpy>
 8004f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f74:	f005 fd0b 	bl	800a98e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f78:	e035      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 8004f7a:	492c      	ldr	r1, [pc, #176]	; (800502c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbbc>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7fb f947 	bl	8000210 <strcmp>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb3a>
 8004f88:	4c29      	ldr	r4, [pc, #164]	; (8005030 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc0>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	9321      	str	r3, [sp, #132]	; 0x84
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	9320      	str	r3, [sp, #128]	; 0x80
 8004f92:	4668      	mov	r0, sp
 8004f94:	f104 0310 	add.w	r3, r4, #16
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f019 f867 	bl	801e06e <memcpy>
 8004fa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fa4:	f005 fb44 	bl	800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fa8:	e01d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 8004faa:	4922      	ldr	r1, [pc, #136]	; (8005034 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc4>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7fb f92f 	bl	8000210 <strcmp>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d110      	bne.n	8004fda <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6a>
 8004fb8:	4c1f      	ldr	r4, [pc, #124]	; (8005038 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc8>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	9325      	str	r3, [sp, #148]	; 0x94
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	9324      	str	r3, [sp, #144]	; 0x90
 8004fc2:	4668      	mov	r0, sp
 8004fc4:	f104 0310 	add.w	r3, r4, #16
 8004fc8:	2290      	movs	r2, #144	; 0x90
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f019 f84f 	bl	801e06e <memcpy>
 8004fd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fd4:	f005 fd4c 	bl	800aa70 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fd8:	e005      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else assert(0); // wavelet not in the list
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbcc>)
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd0>)
 8004fde:	2184      	movs	r1, #132	; 0x84
 8004fe0:	4818      	ldr	r0, [pc, #96]	; (8005044 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd4>)
 8004fe2:	f017 feab 	bl	801cd3c <__assert_func>
    }
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fec:	0801ffa8 	.word	0x0801ffa8
 8004ff0:	080235bc 	.word	0x080235bc
 8004ff4:	0801ffb0 	.word	0x0801ffb0
 8004ff8:	0802364c 	.word	0x0802364c
 8004ffc:	0801ffb8 	.word	0x0801ffb8
 8005000:	0802366c 	.word	0x0802366c
 8005004:	0801ffc0 	.word	0x0801ffc0
 8005008:	0802369c 	.word	0x0802369c
 800500c:	0801ffc8 	.word	0x0801ffc8
 8005010:	080236dc 	.word	0x080236dc
 8005014:	0801ffd0 	.word	0x0801ffd0
 8005018:	0802372c 	.word	0x0802372c
 800501c:	0801ffd8 	.word	0x0801ffd8
 8005020:	0802378c 	.word	0x0802378c
 8005024:	0801ffe0 	.word	0x0801ffe0
 8005028:	080237fc 	.word	0x080237fc
 800502c:	0801ffe8 	.word	0x0801ffe8
 8005030:	0802387c 	.word	0x0802387c
 8005034:	0801fff0 	.word	0x0801fff0
 8005038:	0802390c 	.word	0x0802390c
 800503c:	0801fff8 	.word	0x0801fff8
 8005040:	0801fffc 	.word	0x0801fffc
 8005044:	08020064 	.word	0x08020064

08005048 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>:
      _Vector_base() = default;
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 fdd2 	bl	800abfc <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>:
      vector() = default;
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ffeb 	bl	8005048 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:

    static void calculate_entropy(const fvec &y, fvec &features)
 800507c:	b580      	push	{r7, lr}
 800507e:	ed2d 8b02 	vpush	{d8}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
    {
        fvec h;
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffe7 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        histo(y, 100, h, true);
 8005094:	f107 0210 	add.w	r2, r7, #16
 8005098:	2301      	movs	r3, #1
 800509a:	2164      	movs	r1, #100	; 0x64
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff f93a 	bl	8004316 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        // entropy = -sum(prob * log(prob)
        float entropy = 0.0f;
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e035      	b.n	800511a <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x9e>
            if (h[i] > 0.0f) {
 80050ae:	f107 0310 	add.w	r3, r7, #16
 80050b2:	69f9      	ldr	r1, [r7, #28]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f004 fef4 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050ba:	4603      	mov	r3, r0
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	bfcc      	ite	gt
 80050ca:	2301      	movgt	r3, #1
 80050cc:	2300      	movle	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01f      	beq.n	8005114 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x98>
                entropy -= h[i] * log(h[i]);
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	4618      	mov	r0, r3
 80050dc:	f004 fee1 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050e0:	4603      	mov	r3, r0
 80050e2:	ed93 8a00 	vldr	s16, [r3]
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 fed8 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050f2:	4603      	mov	r3, r0
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	eeb0 0a67 	vmov.f32	s0, s15
 80050fc:	f7fc f828 	bl	8001150 <_ZSt3logf>
 8005100:	eef0 7a40 	vmov.f32	s15, s0
 8005104:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005108:	ed97 7a03 	vldr	s14, [r7, #12]
 800510c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005110:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	f107 0310 	add.w	r3, r7, #16
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fd17 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005124:	4602      	mov	r2, r0
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4293      	cmp	r3, r2
 800512a:	bf34      	ite	cc
 800512c:	2301      	movcc	r3, #1
 800512e:	2300      	movcs	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1bb      	bne.n	80050ae <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x32>
            }
        }
        features.push_back(entropy);
 8005136:	f107 030c 	add.w	r3, r7, #12
 800513a:	4619      	mov	r1, r3
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f005 fd6a 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4618      	mov	r0, r3
 8005148:	f004 fe90 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	ecbd 8b02 	vpop	{d8}
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	ed87 0a00 	vstr	s0, [r7]
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f004 fcf4 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800516a:	4603      	mov	r3, r0
 800516c:	3b01      	subs	r3, #1
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005176:	edd7 7a00 	vldr	s15, [r7]
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	ee17 0a90 	vmov	r0, s15
 8005182:	f7fb fa11 	bl	80005a8 <__aeabi_f2d>
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x64>)
 800518c:	f7fb f8ae 	bl	80002ec <__adddf3>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	f7fb fd36 	bl	8000c08 <__aeabi_d2uiz>
 800519c:	4603      	mov	r3, r0
 800519e:	60fb      	str	r3, [r7, #12]
        return sorted[index];
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f004 ff57 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80051a8:	4603      	mov	r3, r0
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	ee07 3a90 	vmov	s15, r3
    }
 80051b0:	eeb0 0a67 	vmov.f32	s0, s15
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	3fe00000 	.word	0x3fe00000

080051c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b097      	sub	sp, #92	; 0x5c
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        fvec sorted = y;
 80051ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 ff4e 	bl	800a076 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>
        std::sort(sorted.begin(), sorted.end());
 80051da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 fdd5 	bl	8009d8e <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 80051e4:	4604      	mov	r4, r0
 80051e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 fddf 	bl	8009dae <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4619      	mov	r1, r3
 80051f4:	4620      	mov	r0, r4
 80051f6:	f004 fece 	bl	8009f96 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 80051fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051fe:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8005400 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x240>
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff ffa8 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005208:	eef0 7a40 	vmov.f32	s15, s0
 800520c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8005210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005214:	4619      	mov	r1, r3
 8005216:	68b8      	ldr	r0, [r7, #8]
 8005218:	f005 fd22 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 800521c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005220:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff97 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8005232:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005236:	4619      	mov	r1, r3
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f005 fd11 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 800523e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005242:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff86 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800524c:	eef0 7a40 	vmov.f32	s15, s0
 8005250:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8005254:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005258:	4619      	mov	r1, r3
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f005 fd00 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 8005260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005264:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8005404 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x244>
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff75 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800526e:	eef0 7a40 	vmov.f32	s15, s0
 8005272:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8005276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800527a:	4619      	mov	r1, r3
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f005 fcef 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 8005282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005286:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff64 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005290:	eef0 7a40 	vmov.f32	s15, s0
 8005294:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800529c:	4619      	mov	r1, r3
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f005 fcde 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f004 fc54 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80052aa:	4604      	mov	r4, r0
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f004 fe82 	bl	8009fb6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052b8:	4622      	mov	r2, r4
 80052ba:	2101      	movs	r1, #1
 80052bc:	f7fc f963 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 80052c0:	f107 0014 	add.w	r0, r7, #20
 80052c4:	2300      	movs	r3, #0
 80052c6:	2201      	movs	r2, #1
 80052c8:	2101      	movs	r1, #1
 80052ca:	f7fc f95c 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

        features.push_back(mean);
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	68b8      	ldr	r0, [r7, #8]
 80052d4:	f005 fc9f 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
 80052d8:	f107 0214 	add.w	r2, r7, #20
 80052dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fc52 	bl	8001b8c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14e>
            features.push_back(out.get_row_ptr(0)[0]);
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc f982 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005304:	4603      	mov	r3, r0
 8005306:	4619      	mov	r1, r3
 8005308:	68b8      	ldr	r0, [r7, #8]
 800530a:	f005 fc84 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        features.push_back(numpy::variance(const_cast<float *>(y.data()), y.size()));
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f004 fe51 	bl	8009fb6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005314:	4604      	mov	r4, r0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f004 fc1b 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800531c:	4603      	mov	r3, r0
 800531e:	4619      	mov	r1, r3
 8005320:	4620      	mov	r0, r4
 8005322:	f7fd fcbf 	bl	8002ca4 <_ZN2ei5numpy8varianceEPfj>
 8005326:	eef0 7a40 	vmov.f32	s15, s0
 800532a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800532e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005332:	4619      	mov	r1, r3
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	f005 fc93 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 800533a:	f107 0214 	add.w	r2, r7, #20
 800533e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fba9 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
            features.push_back(out.get_row_ptr(0)[0]);
 800535a:	f107 0314 	add.w	r3, r7, #20
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f7fc f951 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005366:	4603      	mov	r3, r0
 8005368:	4619      	mov	r1, r3
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f005 fc53 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 8005370:	f107 0214 	add.w	r2, r7, #20
 8005374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f7fc fc5e 	bl	8001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1e6>
            features.push_back(out.get_row_ptr(0)[0]);
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f7fc f936 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800539c:	4603      	mov	r3, r0
 800539e:	4619      	mov	r1, r3
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f005 fc38 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 80053a6:	f107 0214 	add.w	r2, r7, #20
 80053aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fc fcdf 	bl	8001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x21c>
            features.push_back(out.get_row_ptr(0)[0]);
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fc f91b 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4619      	mov	r1, r3
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f005 fc1d 	bl	800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc f8fb 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80053e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc f8f6 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80053f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 fd39 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80053fa:	375c      	adds	r7, #92	; 0x5c
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	3d4ccccd 	.word	0x3d4ccccd
 8005404:	3f733333 	.word	0x3f733333

08005408 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 8005408:	b580      	push	{r7, lr}
 800540a:	ed2d 8b02 	vpush	{d8}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        size_t zc = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 800541e:	2301      	movs	r3, #1
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e021      	b.n	8005468 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x60>
            if (y[i] * y[i - 1] < 0) {
 8005424:	6a39      	ldr	r1, [r7, #32]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f004 fe15 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800542c:	4603      	mov	r3, r0
 800542e:	ed93 8a00 	vldr	s16, [r3]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	3b01      	subs	r3, #1
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f004 fe0c 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800543e:	4603      	mov	r3, r0
 8005440:	edd3 7a00 	vldr	s15, [r3]
 8005444:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	bf4c      	ite	mi
 8005452:	2301      	movmi	r3, #1
 8005454:	2300      	movpl	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x5a>
                zc++;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	3301      	adds	r3, #1
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f004 fb72 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800546e:	4602      	mov	r2, r0
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	4293      	cmp	r3, r2
 8005474:	bf34      	ite	cc
 8005476:	2301      	movcc	r3, #1
 8005478:	2300      	movcs	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1d1      	bne.n	8005424 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
            }
        }
        features.push_back(zc / (float)y.size());
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f004 fb61 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005490:	ee07 0a90 	vmov	s15, r0
 8005494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005498:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800549c:	edc7 7a04 	vstr	s15, [r7, #16]
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f005 fbda 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        size_t mc = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 80054b0:	2301      	movs	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e029      	b.n	800550a <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x102>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f004 fdcc 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054be:	4603      	mov	r3, r0
 80054c0:	ed93 7a00 	vldr	s14, [r3]
 80054c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80054c8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f004 fdbf 	bl	800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054d8:	4603      	mov	r3, r0
 80054da:	ed93 7a00 	vldr	s14, [r3]
 80054de:	edd7 7a01 	vldr	s15, [r7, #4]
 80054e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80054ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	bf4c      	ite	mi
 80054f4:	2301      	movmi	r3, #1
 80054f6:	2300      	movpl	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xfc>
                mc++;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	3301      	adds	r3, #1
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f004 fb21 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005510:	4602      	mov	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4293      	cmp	r3, r2
 8005516:	bf34      	ite	cc
 8005518:	2301      	movcc	r3, #1
 800551a:	2300      	movcs	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c9      	bne.n	80054b6 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xae>
            }
        }
        features.push_back(mc / (float)y.size());
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f004 fb10 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005532:	ee07 0a90 	vmov	s15, r0
 8005536:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800553a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800553e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4619      	mov	r1, r3
 8005548:	68b8      	ldr	r0, [r7, #8]
 800554a:	f005 fb89 	bl	800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
    }
 800554e:	bf00      	nop
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	ecbd 8b02 	vpop	{d8}
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b090      	sub	sp, #64	; 0x40
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 800556a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556c:	2b14      	cmp	r3, #20
 800556e:	d805      	bhi.n	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c>
 800557c:	4b67      	ldr	r3, [pc, #412]	; (800571c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c0>)
 800557e:	4a68      	ldr	r2, [pc, #416]	; (8005720 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c4>)
 8005580:	21cb      	movs	r1, #203	; 0xcb
 8005582:	4868      	ldr	r0, [pc, #416]	; (8005724 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c8>)
 8005584:	f017 fbda 	bl	801cd3c <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 8005588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558a:	005a      	lsls	r2, r3, #1
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4413      	add	r3, r2
 8005590:	3b02      	subs	r3, #2
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        fvec x_padded(nx_padded);
 8005594:	f107 0220 	add.w	r2, r7, #32
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fc4a 	bl	8009e38 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a8:	e012      	b.n	80055d0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x74>
            x_padded[i] = x[nh - 3 - i];
 80055aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	3b03      	subs	r3, #3
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	18d4      	adds	r4, r2, r3
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fc6f 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh - 2; i++)
 80055ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055cc:	3301      	adds	r3, #1
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d2:	3b02      	subs	r3, #2
 80055d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3e7      	bcc.n	80055aa <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e>
        for (size_t i = 0; i < nx; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055de:	e013      	b.n	8005608 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
            x_padded[i + nh - 2] = x[i];
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	18d4      	adds	r4, r2, r3
 80055e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	4413      	add	r3, r2
 80055ee:	1e9a      	subs	r2, r3, #2
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 fc53 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nx; i++)
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	3301      	adds	r3, #1
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
 8005608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d3e7      	bcc.n	80055e0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x84>
        for (size_t i = 0; i < nh; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
 8005614:	e018      	b.n	8005648 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xec>
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	18d4      	adds	r4, r2, r3
 8005624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	441a      	add	r2, r3
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	4413      	add	r3, r2
 800562e:	1e9a      	subs	r2, r3, #2
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f004 fc33 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800563c:	4602      	mov	r2, r0
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh; i++)
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	3301      	adds	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	429a      	cmp	r2, r3
 800564e:	d3e2      	bcc.n	8005616 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xba>

        size_t ny = (nx + nh - 1) / 2;
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	4413      	add	r3, r2
 8005656:	3b01      	subs	r3, #1
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
        a.resize(ny);
 800565c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005660:	f004 fe45 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 8005664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005666:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005668:	f004 fe41 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
 800566c:	f107 0314 	add.w	r3, r7, #20
 8005670:	4618      	mov	r0, r3
 8005672:	f004 fa7e 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005676:	6278      	str	r0, [r7, #36]	; 0x24
        for (size_t i = 0; i < ny; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	e026      	b.n	80056cc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x170>
            a[i] = dot(xx + 2 * i, h, nh);
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	18d5      	adds	r5, r2, r3
 8005686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005688:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800568a:	f004 fc0a 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800568e:	4604      	mov	r4, r0
 8005690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4628      	mov	r0, r5
 8005696:	f7fe fe0d 	bl	80042b4 <_ZN2ei8spectral3dotEPKfS2_j>
 800569a:	eef0 7a40 	vmov.f32	s15, s0
 800569e:	edc4 7a00 	vstr	s15, [r4]
            d[i] = dot(xx + 2 * i, g, nh);
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	18d5      	adds	r5, r2, r3
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056ae:	f004 fbf8 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80056b2:	4604      	mov	r4, r0
 80056b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7fe fdfb 	bl	80042b4 <_ZN2ei8spectral3dotEPKfS2_j>
 80056be:	eef0 7a40 	vmov.f32	s15, s0
 80056c2:	edc4 7a00 	vstr	s15, [r4]
        for (size_t i = 0; i < ny; i++) {
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	3301      	adds	r3, #1
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
 80056cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3d4      	bcc.n	800567e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x122>
        }

        numpy::underflow_handling(d.data(), d.size());
 80056d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056d6:	f004 fa4c 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056da:	4604      	mov	r4, r0
 80056dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056de:	f004 fa38 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056e2:	4603      	mov	r3, r0
 80056e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005728 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 80056e8:	4619      	mov	r1, r3
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7fd fb18 	bl	8002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>
        numpy::underflow_handling(a.data(), a.size());
 80056f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056f2:	f004 fa3e 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056f6:	4604      	mov	r4, r0
 80056f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056fa:	f004 fa2a 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056fe:	4603      	mov	r3, r0
 8005700:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005728 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005704:	4619      	mov	r1, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f7fd fb0a 	bl	8002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>
    }
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4618      	mov	r0, r3
 8005712:	f004 fbab 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005716:	3740      	adds	r7, #64	; 0x40
 8005718:	46bd      	mov	sp, r7
 800571a:	bdb0      	pop	{r4, r5, r7, pc}
 800571c:	080200e4 	.word	0x080200e4
 8005720:	08020104 	.word	0x08020104
 8005724:	08020064 	.word	0x08020064
 8005728:	33d6bf95 	.word	0x33d6bf95

0800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b08d      	sub	sp, #52	; 0x34
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f004 fa0b 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800573c:	4604      	mov	r4, r0
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f004 fa17 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005744:	4603      	mov	r3, r0
 8005746:	f107 001c 	add.w	r0, r7, #28
 800574a:	4622      	mov	r2, r4
 800574c:	2101      	movs	r1, #1
 800574e:	f7fb ff1a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005752:	f107 000c 	add.w	r0, r7, #12
 8005756:	2300      	movs	r3, #0
 8005758:	2201      	movs	r2, #1
 800575a:	2101      	movs	r1, #1
 800575c:	f7fb ff13 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 8005760:	f107 020c 	add.w	r2, r7, #12
 8005764:	f107 031c 	add.w	r3, r7, #28
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc f9d2 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x60>
            assert(0);
 8005780:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xac>)
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb0>)
 8005784:	21eb      	movs	r1, #235	; 0xeb
 8005786:	4816      	ldr	r0, [pc, #88]	; (80057e0 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb4>)
 8005788:	f017 fad8 	bl	801cd3c <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f7fb ff38 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005798:	4603      	mov	r3, r0
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c

        calculate_entropy(y, features);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fc6b 	bl	800507c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 80057a6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fe2b 	bl	8005408 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 80057b2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fd01 	bl	80051c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
    }
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fb ff0a 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80057c8:	f107 031c 	add.w	r3, r7, #28
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb ff05 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80057d2:	3734      	adds	r7, #52	; 0x34
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd90      	pop	{r4, r7, pc}
 80057d8:	0801fff8 	.word	0x0801fff8
 80057dc:	08020190 	.word	0x08020190
 80057e0:	08020064 	.word	0x08020064

080057e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 80057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e8:	b098      	sub	sp, #96	; 0x60
 80057ea:	af04      	add	r7, sp, #16
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
    {
        assert(level > 0 && level < 8);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd02      	ble.n	8005800 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1c>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	dd05      	ble.n	800580c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x28>
 8005800:	4b6e      	ldr	r3, [pc, #440]	; (80059bc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d8>)
 8005802:	4a6f      	ldr	r2, [pc, #444]	; (80059c0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1dc>)
 8005804:	21f6      	movs	r1, #246	; 0xf6
 8005806:	486f      	ldr	r0, [pc, #444]	; (80059c4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1e0>)
 8005808:	f017 fa98 	bl	801cd3c <__assert_func>

        fvec h;
 800580c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fc26 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec g;
 8005816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fc21 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        find_filter(wav, h, g);
 8005820:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe fe20 	bl	8004470 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>

        features.clear();
 8005830:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005832:	f005 fa26 	bl	800ac82 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>
        fvec a;
 8005836:	f107 0320 	add.w	r3, r7, #32
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fc11 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec d;
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fc0c 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 800584a:	68bc      	ldr	r4, [r7, #8]
 800584c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005850:	4618      	mov	r0, r3
 8005852:	f004 f98e 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005856:	4605      	mov	r5, r0
 8005858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800585c:	4618      	mov	r0, r3
 800585e:	f004 f988 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005862:	4606      	mov	r6, r0
 8005864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005868:	4618      	mov	r0, r3
 800586a:	f004 f972 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800586e:	4602      	mov	r2, r0
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	f107 0320 	add.w	r3, r7, #32
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	4633      	mov	r3, r6
 8005880:	462a      	mov	r2, r5
 8005882:	4621      	mov	r1, r4
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fe69 	bl	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 800588a:	f107 0314 	add.w	r3, r7, #20
 800588e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff4b 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 8005896:	2301      	movs	r3, #1
 8005898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589a:	e033      	b.n	8005904 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x120>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 800589c:	f107 0320 	add.w	r3, r7, #32
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 f966 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058a6:	4604      	mov	r4, r0
 80058a8:	f107 0320 	add.w	r3, r7, #32
 80058ac:	4618      	mov	r0, r3
 80058ae:	f004 f950 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058b2:	4605      	mov	r5, r0
 80058b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058b8:	4618      	mov	r0, r3
 80058ba:	f004 f95a 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058be:	4606      	mov	r6, r0
 80058c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058c4:	4618      	mov	r0, r3
 80058c6:	f004 f954 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058ca:	4680      	mov	r8, r0
 80058cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058d0:	4618      	mov	r0, r3
 80058d2:	f004 f93e 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058d6:	4602      	mov	r2, r0
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	9302      	str	r3, [sp, #8]
 80058de:	f107 0320 	add.w	r3, r7, #32
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	4643      	mov	r3, r8
 80058e8:	4632      	mov	r2, r6
 80058ea:	4629      	mov	r1, r5
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff fe35 	bl	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff17 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 80058fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005900:	3301      	adds	r3, #1
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	dbc7      	blt.n	800589c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb8>
        }

        extract_features(a, features);
 800590c:	f107 0320 	add.w	r3, r7, #32
 8005910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ff0a 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005918:	2300      	movs	r3, #0
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
 800591c:	e02c      	b.n	8005978 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x194>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 800591e:	2300      	movs	r3, #0
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
 8005922:	e023      	b.n	800596c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x188>
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	4413      	add	r3, r2
 8005934:	4619      	mov	r1, r3
 8005936:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005938:	f004 fab3 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800593c:	4604      	mov	r4, r0
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	461a      	mov	r2, r3
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	461a      	mov	r2, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	4413      	add	r3, r2
 8005954:	4619      	mov	r1, r3
 8005956:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005958:	f004 faa3 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800595c:	4603      	mov	r3, r0
                std::swap(
 800595e:	4619      	mov	r1, r3
 8005960:	4620      	mov	r0, r4
 8005962:	f005 f9a7 	bl	800acb4 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	3301      	adds	r3, #1
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	2b0d      	cmp	r3, #13
 8005970:	ddd8      	ble.n	8005924 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x140>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005974:	3301      	adds	r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da00      	bge.n	8005980 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x19c>
 800597e:	3301      	adds	r3, #1
 8005980:	105b      	asrs	r3, r3, #1
 8005982:	461a      	mov	r2, r3
 8005984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005986:	4293      	cmp	r3, r2
 8005988:	ddc9      	ble.n	800591e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x13a>
            }
        }
    }
 800598a:	f107 0314 	add.w	r3, r7, #20
 800598e:	4618      	mov	r0, r3
 8005990:	f004 fa6c 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005994:	f107 0320 	add.w	r3, r7, #32
 8005998:	4618      	mov	r0, r3
 800599a:	f004 fa67 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800599e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fa62 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059ac:	4618      	mov	r0, r3
 80059ae:	f004 fa5d 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059b2:	3750      	adds	r7, #80	; 0x50
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ba:	bf00      	nop
 80059bc:	080201f0 	.word	0x080201f0
 80059c0:	08020208 	.word	0x08020208
 80059c4:	08020064 	.word	0x08020064

080059c8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static int dwt_features(const float *x, int len, const char *wav, int level, fvec &features)
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
    {
        assert(level <= 7);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b07      	cmp	r3, #7
 80059da:	dd06      	ble.n	80059ea <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>)
 80059de:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 80059e6:	f017 f9a9 	bl	801cd3c <__assert_func>

        assert(features.size() == 0); // make sure features is empty
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f004 f8b1 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x3c>
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x80>)
 80059f8:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059fa:	f44f 718b 	mov.w	r1, #278	; 0x116
 80059fe:	4811      	ldr	r0, [pc, #68]	; (8005a44 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005a00:	f017 f99c 	bl	801cd3c <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4619      	mov	r1, r3
 8005a14:	69b8      	ldr	r0, [r7, #24]
 8005a16:	f005 f983 	bl	800ad20 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>

        wavedec_features(x, len, wav, level, features);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fedd 	bl	80057e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>

        return features.size();
 8005a2a:	69b8      	ldr	r0, [r7, #24]
 8005a2c:	f004 f891 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005a30:	4603      	mov	r3, r0
    }
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	08020278 	.word	0x08020278
 8005a40:	08020284 	.word	0x08020284
 8005a44:	08020064 	.word	0x08020064
 8005a48:	080202f0 	.word	0x080202f0

08005a4c <_ZN2ei8spectral7wavelet14check_min_sizeEii>:

    static bool check_min_size(int len, int level)
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
    {
        int min_size = 32 * (1 << level);
 8005a56:	2220      	movs	r2, #32
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
        return (len >= min_size);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bfac      	ite	ge
 8005a68:	2301      	movge	r3, #1
 8005a6a:	2300      	movlt	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
    }
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

public:
    static int extract_wavelet_features(
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b094      	sub	sp, #80	; 0x50
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7fb fe1f 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a98:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7fb ff27 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8005aa2:	63b8      	str	r0, [r7, #56]	; 0x38
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	e0b0      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4959      	ldr	r1, [pc, #356]	; (8005c18 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fbab 	bl	8000210 <strcmp>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d117      	bne.n	8005af0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x74>
            if (config->filter_order) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d034      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	eef0 0a67 	vmov.f32	s1, s15
 8005ada:	ed97 0a00 	vldr	s0, [r7]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7fd fe42 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005ae4:	6338      	str	r0, [r7, #48]	; 0x30
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d022      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	e08f      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	4949      	ldr	r1, [pc, #292]	; (8005c1c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fa fb8a 	bl	8000210 <strcmp>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d117      	bne.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
            if (config->filter_order) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4619      	mov	r1, r3
 8005b18:	eef0 0a67 	vmov.f32	s1, s15
 8005b1c:	ed97 0a00 	vldr	s0, [r7]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7fd fe57 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8005b26:	6378      	str	r0, [r7, #52]	; 0x34
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	e06e      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7fe fb86 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005b38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc8>
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	e065      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        int out_idx = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005b48:	2300      	movs	r3, #0
 8005b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4c:	e05a      	b.n	8005c04 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>
            float *data_window = input_matrix->get_row_ptr(row);
 8005b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7fb fd59 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005b56:	62b8      	str	r0, [r7, #40]	; 0x28
            size_t data_size = input_matrix->cols;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24

            if (!check_min_size(data_size, config->wavelet_level))
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7ff ff70 	bl	8005a4c <_ZN2ei8spectral7wavelet14check_min_sizeEii>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f083 0301 	eor.w	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8005b78:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 8005b7a:	e049      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

            fvec features;
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fa6e 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
            size_t num_features = dwt_features(
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4603      	mov	r3, r0
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f7ff ff15 	bl	80059c8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
 8005b9e:	4603      	mov	r3, r0
                data_window,
                data_size,
                config->wavelet,
                config->wavelet_level,
                features);
 8005ba0:	623b      	str	r3, [r7, #32]

            assert(num_features == output_matrix->cols / input_matrix->rows);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d006      	beq.n	8005bc2 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a8>)
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1ac>)
 8005bb8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bbc:	481b      	ldr	r0, [pc, #108]	; (8005c2c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b0>)
 8005bbe:	f017 f8bd 	bl	801cd3c <__assert_func>
            for (size_t i = 0; i < num_features; i++) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc6:	e011      	b.n	8005bec <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f004 f967 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	6479      	str	r1, [r7, #68]	; 0x44
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	6802      	ldr	r2, [r0, #0]
 8005be4:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < num_features; i++) {
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	3301      	adds	r3, #1
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3e9      	bcc.n	8005bc8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            }
        }
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 f937 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	3301      	adds	r3, #1
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d39f      	bcc.n	8005b4e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd2>
        return EIDSP_OK;
 8005c0e:	2300      	movs	r3, #0
    }
 8005c10:	4618      	mov	r0, r3
 8005c12:	3748      	adds	r7, #72	; 0x48
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08020308 	.word	0x08020308
 8005c1c:	0802030c 	.word	0x0802030c
 8005c20:	fffffc11 	.word	0xfffffc11
 8005c24:	08020314 	.word	0x08020314
 8005c28:	08020350 	.word	0x08020350
 8005c2c:	08020064 	.word	0x08020064

08005c30 <_ZN2ei6signal18get_decimated_sizeEjj>:
        for (size_t ix = 0; ix < output_size; ix++) {
            output[ix] = filtered[ix * factor];
        }
    }

    static size_t get_decimated_size(size_t input_size, size_t factor)
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
    {
        return (input_size + factor - 1) / factor;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
    }
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN2ei6signal7sosfiltC1EPKfS3_j>:
        const float *coeff; // 6 * num_sections coefficients
        float* zi;
        fvec zi_vec; // 2 * num_sections initial conditions
        size_t num_sections;

        sosfilt(const float *coeff_, const float *zi_, size_t num_sections_)
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
            : coeff(coeff_),
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	601a      	str	r2, [r3, #0]
              zi_vec(zi_, zi_ + (num_sections_ * 2)),
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f103 0008 	add.w	r0, r3, #8
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	f107 0314 	add.w	r3, r7, #20
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	f005 f8d0 	bl	800ae20 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>
              num_sections(num_sections_)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	615a      	str	r2, [r3, #20]
        {
            zi = zi_vec.data();
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 ff71 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
        }
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZN2ei6signal7sosfilt3runEPKfjPf>:
         * This is the counterpart of scipy.signal.sosfilt .
         * @param input Input signal
         * @param output Output signal. Can be the same as input for in place
         * @param x_size Minimum size of input and output signal
         */
        void run(const float *input, const size_t size, float* output)
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
        {
            assert(num_sections > 0);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d105      	bne.n	8005cc2 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x22>
 8005cb6:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <_ZN2ei6signal7sosfilt3runEPKfjPf+0x9c>)
 8005cb8:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa0>)
 8005cba:	216e      	movs	r1, #110	; 0x6e
 8005cbc:	4821      	ldr	r0, [pc, #132]	; (8005d44 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa4>)
 8005cbe:	f017 f83d 	bl	801cd3c <__assert_func>

            iir2(input, output, size, coeff, coeff + 3, zi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	9201      	str	r2, [sp, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f000 f8cc 	bl	8005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>

            for (size_t sect = 1; sect < num_sections; sect++) {
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e020      	b.n	8005d28 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x88>
                iir2(
                    output,
                    output,
                    size,
                    coeff + sect * 6,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
                iir2(
 8005cf4:	18c8      	adds	r0, r1, r3
                    coeff + sect * 6 + 3,
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	330c      	adds	r3, #12
                iir2(
 8005d06:	440b      	add	r3, r1
                    zi + sect * 2);
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	6851      	ldr	r1, [r2, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	00d2      	lsls	r2, r2, #3
                iir2(
 8005d10:	440a      	add	r2, r1
 8005d12:	9201      	str	r2, [sp, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4603      	mov	r3, r0
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6838      	ldr	r0, [r7, #0]
 8005d1e:	f000 f8ab 	bl	8005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	3301      	adds	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3d9      	bcc.n	8005ce6 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x46>
            }
        }
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	080203d4 	.word	0x080203d4
 8005d40:	080203e8 	.word	0x080203e8
 8005d44:	08020424 	.word	0x08020424

08005d48 <_ZN2ei6signal7sosfilt4initEf>:

        void init(float x0)
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	ed87 0a00 	vstr	s0, [r7]
        {
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e028      	b.n	8005dac <_ZN2ei6signal7sosfilt4initEf+0x64>
                zi[sect * 2] *= x0;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	ed93 7a00 	vldr	s14, [r3]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	edd7 7a00 	vldr	s15, [r7]
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc3 7a00 	vstr	s15, [r3]
                zi[sect * 2 + 1] *= x0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	3304      	adds	r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	3304      	adds	r3, #4
 8005d98:	4413      	add	r3, r2
 8005d9a:	edd7 7a00 	vldr	s15, [r7]
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3d1      	bcc.n	8005d5a <_ZN2ei6signal7sosfilt4initEf+0x12>
            }
        }
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>:
     * @param input Input signal
     * @param output Output signal
     * @param factor Decimation factor
     * @param sos Second-order section
     */
    static void decimate_simple(
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
        float *output,
        const size_t output_size,
        size_t factor,
        sosfilt &sos)
    {
        sos.init(input[0]);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dde:	f7ff ffb3 	bl	8005d48 <_ZN2ei6signal7sosfilt4initEf>

        fvec filtered(input_size);
 8005de2:	f107 021c 	add.w	r2, r7, #28
 8005de6:	f107 0310 	add.w	r3, r7, #16
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f004 f823 	bl	8009e38 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
        sos.run(input, input_size, filtered.data());
 8005df2:	f107 0310 	add.w	r3, r7, #16
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 febb 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e04:	f7ff ff4c 	bl	8005ca0 <_ZN2ei6signal7sosfilt3runEPKfjPf>

        size_t expected_size = get_decimated_size(input_size, factor);
 8005e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f7ff ff10 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8005e10:	6238      	str	r0, [r7, #32]
        assert(output_size >= expected_size);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d205      	bcs.n	8005e26 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x62>
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xa8>)
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xac>)
 8005e1e:	219c      	movs	r1, #156	; 0x9c
 8005e20:	4814      	ldr	r0, [pc, #80]	; (8005e74 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xb0>)
 8005e22:	f016 ff8b 	bl	801cd3c <__assert_func>

        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e013      	b.n	8005e54 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x90>
            output[ix] = filtered[ix * factor];
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e30:	fb03 f202 	mul.w	r2, r3, r2
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f004 f831 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005e40:	4601      	mov	r1, r0
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	680a      	ldr	r2, [r1, #0]
 8005e4c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	3301      	adds	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3e7      	bcc.n	8005e2c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x68>
        }
    }
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	f004 f803 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	080204a0 	.word	0x080204a0
 8005e70:	080204c0 	.word	0x080204c0
 8005e74:	08020424 	.word	0x08020424

08005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e94:	edc7 7a06 	vstr	s15, [r7, #24]
        for (size_t ix = 0; ix < n; ix++) {
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e063      	b.n	8005f66 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0xee>
            const float xx = x[ix];
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
            y[ix] = b[0] * xx + d[0];
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	ed93 7a00 	vldr	s14, [r3]
 8005eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eca:	edc3 7a00 	vstr	s15, [r3]
            y[ix] *= one_over_a0;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	ed93 7a00 	vldr	s14, [r3]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc3 7a00 	vstr	s15, [r3]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	ed93 7a00 	vldr	s14, [r3]
 8005ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	3304      	adds	r3, #4
 8005f02:	edd3 6a00 	vldr	s13, [r3]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	edd3 7a00 	vldr	s15, [r3]
 8005f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	edc3 7a00 	vstr	s15, [r3]
            d[1] = b[2] * xx - a[2] * y[ix];
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	ed93 7a00 	vldr	s14, [r3]
 8005f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	3308      	adds	r3, #8
 8005f40:	edd3 6a00 	vldr	s13, [r3]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	edd3 7a00 	vldr	s15, [r3]
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	3304      	adds	r3, #4
 8005f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f5c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < n; ix++) {
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d397      	bcc.n	8005e9e <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x26>
        }
    }
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	3724      	adds	r7, #36	; 0x24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8005f7c:	b5b0      	push	{r4, r5, r7, lr}
 8005f7e:	b0b0      	sub	sp, #192	; 0xc0
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6178      	str	r0, [r7, #20]
 8005f84:	6139      	str	r1, [r7, #16]
 8005f86:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f90:	461a      	mov	r2, r3
 8005f92:	ed87 1a00 	vstr	s2, [r7]
 8005f96:	460b      	mov	r3, r1
 8005f98:	72fb      	strb	r3, [r7, #11]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d001      	beq.n	8005fae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005faa:	4cbe      	ldr	r4, [pc, #760]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fac:	e227      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	689d      	ldr	r5, [r3, #8]
 8005fb2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8005fb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	f000 fa22 	bl	8006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	429d      	cmp	r5, r3
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fd4:	4cb3      	ldr	r4, [pc, #716]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fd6:	e212      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8005fd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fe2:	4cb0      	ldr	r4, [pc, #704]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fe4:	e20b      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	f7fe f928 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005ff4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8005ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8006000:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8006004:	e1fb      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d110      	bne.n	800602e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 800600c:	7abb      	ldrb	r3, [r7, #10]
 800600e:	4619      	mov	r1, r3
 8006010:	edd7 0a01 	vldr	s1, [r7, #4]
 8006014:	ed97 0a03 	vldr	s0, [r7, #12]
 8006018:	6938      	ldr	r0, [r7, #16]
 800601a:	f7fd fba5 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800601e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8006022:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d015      	beq.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800602a:	4c9e      	ldr	r4, [pc, #632]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800602c:	e1e7      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d110      	bne.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8006034:	7abb      	ldrb	r3, [r7, #10]
 8006036:	4619      	mov	r1, r3
 8006038:	edd7 0a01 	vldr	s1, [r7, #4]
 800603c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006040:	6938      	ldr	r0, [r7, #16]
 8006042:	f7fd fbc7 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006046:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800604a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006052:	4c94      	ldr	r4, [pc, #592]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006054:	e1d3      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8006056:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800605a:	2300      	movs	r3, #0
 800605c:	2201      	movs	r2, #1
 800605e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006062:	f7fb fa90 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 800606e:	4c8e      	ldr	r4, [pc, #568]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006070:	e1c0      	b.n	80063f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8006072:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006076:	4619      	mov	r1, r3
 8006078:	6938      	ldr	r0, [r7, #16]
 800607a:	f7fb fd0f 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800607e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8006082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800608a:	4c86      	ldr	r4, [pc, #536]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800608c:	e1b2      	b.n	80063f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800608e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	461a      	mov	r2, r3
 8006096:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800609a:	2300      	movs	r3, #0
 800609c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060a0:	f7fb fa71 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 80060aa:	4c7f      	ldr	r4, [pc, #508]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060ac:	e19d      	b.n	80063ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	e191      	b.n	80063da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45e>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689d      	ldr	r5, [r3, #8]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80060d2:	462a      	mov	r2, r5
 80060d4:	2101      	movs	r1, #1
 80060d6:	f7fb fa56 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
 80060e0:	4c71      	ldr	r4, [pc, #452]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060e2:	2500      	movs	r5, #0
 80060e4:	e16d      	b.n	80063c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80060e6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	461a      	mov	r2, r3
 80060f2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80060f6:	2300      	movs	r3, #0
 80060f8:	2101      	movs	r1, #1
 80060fa:	f7fb fa44 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18e>
 8006104:	4c68      	ldr	r4, [pc, #416]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006106:	2500      	movs	r5, #0
 8006108:	e151      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 800610a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800610c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800610e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006110:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8006112:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	462b      	mov	r3, r5
 800611a:	f7fb feaf 	bl	8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>
 800611e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8006122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b4>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800612a:	4c5e      	ldr	r4, [pc, #376]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800612c:	2500      	movs	r5, #0
 800612e:	e13e      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8006130:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006148:	eeb0 0a47 	vmov.f32	s0, s14
 800614c:	4618      	mov	r0, r3
 800614e:	f7fb fbcf 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8006152:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8006156:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800615a:	2300      	movs	r3, #0
 800615c:	2202      	movs	r2, #2
 800615e:	f7fb fa12 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1f2>
 8006168:	4c4f      	ldr	r4, [pc, #316]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800616a:	2500      	movs	r5, #0
 800616c:	e115      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800616e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8006172:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800617a:	edd7 0a00 	vldr	s1, [r7]
 800617e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fd fc64 	bl	8003a50 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8006188:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 800618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x21e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006194:	4c43      	ldr	r4, [pc, #268]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006196:	2500      	movs	r5, #0
 8006198:	e0ff      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 800619a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	461a      	mov	r2, r3
 80061a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80061aa:	2300      	movs	r3, #0
 80061ac:	2101      	movs	r1, #1
 80061ae:	f7fb f9ea 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x242>
 80061b8:	4c3b      	ldr	r4, [pc, #236]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061ba:	2500      	movs	r5, #0
 80061bc:	e0e3      	b.n	8006386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 80061be:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	461a      	mov	r2, r3
 80061ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80061ce:	2300      	movs	r3, #0
 80061d0:	2101      	movs	r1, #1
 80061d2:	f7fb f9d8 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
 80061dc:	4c32      	ldr	r4, [pc, #200]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061de:	2500      	movs	r5, #0
 80061e0:	e0c7      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            ret = spectral::processing::periodogram(&axis_matrix,
 80061e2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061ee:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80061f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80061f6:	f7fd fe79 	bl	8003eec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80061fa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80061fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
                EIDSP_ERR(ret);
 8006206:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800620a:	2500      	movs	r5, #0
 800620c:	e0b1      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 800620e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	1e59      	subs	r1, r3, #1
 8006216:	f107 0018 	add.w	r0, r7, #24
 800621a:	2300      	movs	r3, #0
 800621c:	2201      	movs	r2, #1
 800621e:	f7fb f9b2 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b2>
 8006228:	4c1f      	ldr	r4, [pc, #124]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800622a:	2500      	movs	r5, #0
 800622c:	e097      	b.n	800635e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            ret = spectral::processing::spectral_power_edges(
 800622e:	f107 0318 	add.w	r3, r7, #24
 8006232:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006236:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800623a:	ed97 0a03 	vldr	s0, [r7, #12]
 800623e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006242:	f7fd fd47 	bl	8003cd4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8006246:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 800624a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2de>
                EIDSP_ERR(ret);
 8006252:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8006256:	2500      	movs	r5, #0
 8006258:	e081      	b.n	800635e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8006278:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800627c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006294:	440b      	add	r3, r1
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800629a:	2300      	movs	r3, #0
 800629c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062a0:	e030      	b.n	8006304 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x388>
 80062a2:	bf00      	nop
 80062a4:	fffffc14 	.word	0xfffffc14
 80062a8:	fffffc16 	.word	0xfffffc16
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 80062ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062cc:	440b      	add	r3, r1
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80062d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	3301      	adds	r3, #1
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062f4:	440b      	add	r3, r1
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80062fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fe:	3301      	adds	r3, #1
 8006300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800630a:	429a      	cmp	r2, r3
 800630c:	d3ce      	bcc.n	80062ac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800630e:	2300      	movs	r3, #0
 8006310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006314:	e01d      	b.n	8006352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	ed93 7a00 	vldr	s14, [r3]
 800632a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800633a:	4413      	add	r3, r2
 800633c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006344:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8006348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800634c:	3301      	adds	r3, #1
 800634e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006358:	429a      	cmp	r2, r3
 800635a:	d3dc      	bcc.n	8006316 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            }
        }
 800635c:	2501      	movs	r5, #1
 800635e:	f107 0318 	add.w	r3, r7, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7fb f93a 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006368:	2d01      	cmp	r5, #1
 800636a:	d101      	bne.n	8006370 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f4>
 800636c:	2501      	movs	r5, #1
 800636e:	e000      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
 8006370:	2500      	movs	r5, #0
 8006372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb f930 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800637c:	2d01      	cmp	r5, #1
 800637e:	d101      	bne.n	8006384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x408>
 8006380:	2501      	movs	r5, #1
 8006382:	e000      	b.n	8006386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
 8006384:	2500      	movs	r5, #0
 8006386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb f926 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006390:	2d01      	cmp	r5, #1
 8006392:	d101      	bne.n	8006398 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41c>
 8006394:	2501      	movs	r5, #1
 8006396:	e000      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
 8006398:	2500      	movs	r5, #0
 800639a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fb f91c 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063a4:	2d01      	cmp	r5, #1
 80063a6:	d101      	bne.n	80063ac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x430>
 80063a8:	2501      	movs	r5, #1
 80063aa:	e000      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
 80063ac:	2500      	movs	r5, #0
 80063ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb f912 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063b8:	2d01      	cmp	r5, #1
 80063ba:	d101      	bne.n	80063c0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x444>
 80063bc:	2501      	movs	r5, #1
 80063be:	e000      	b.n	80063c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>
 80063c0:	2500      	movs	r5, #0
 80063c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fb f908 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063cc:	2d01      	cmp	r5, #1
 80063ce:	d10c      	bne.n	80063ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80063d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f4ff ae67 	bcc.w	80060b6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>

        return EIDSP_OK;
 80063e8:	2400      	movs	r4, #0
    }
 80063ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fb f8f4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fb f8ef 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063fe:	4623      	mov	r3, r4
 8006400:	4618      	mov	r0, r3
 8006402:	37b8      	adds	r7, #184	; 0xb8
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}

08006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3301      	adds	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4413      	add	r3, r2
 800643c:	3b01      	subs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8006440:	697b      	ldr	r3, [r7, #20]
    }
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8006450:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8006454:	b0b3      	sub	sp, #204	; 0xcc
 8006456:	af04      	add	r7, sp, #16
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	edd3 7a03 	vldr	s15, [r3, #12]
 8006468:	eeb0 0a67 	vmov.f32	s0, s15
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7fb fa3f 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006472:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800647e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006482:	488c      	ldr	r0, [pc, #560]	; (80066b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8006484:	f002 fcd6 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006488:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800648c:	e10b      	b.n	80066a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7fb f9ad 	bl	80017ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8006494:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80064a0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80064a4:	4884      	ldr	r0, [pc, #528]	; (80066b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80064a6:	f002 fcc5 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80064aa:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80064ae:	e0fa      	b.n	80066a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80064b0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80064b4:	2300      	movs	r3, #0
 80064b6:	2201      	movs	r2, #1
 80064b8:	2140      	movs	r1, #64	; 0x40
 80064ba:	f7fb f864 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	f107 0318 	add.w	r3, r7, #24
 80064cc:	227c      	movs	r2, #124	; 0x7c
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f017 fceb 	bl	801deac <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	4618      	mov	r0, r3
 80064dc:	f7f9 fef8 	bl	80002d0 <strlen>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b7f      	cmp	r3, #127	; 0x7f
 80064e4:	d901      	bls.n	80064ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80064e6:	4c75      	ldr	r4, [pc, #468]	; (80066bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 80064e8:	e0d8      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
        memcpy(
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7f9 feec 	bl	80002d0 <strlen>
 80064f8:	4602      	mov	r2, r0
 80064fa:	f107 0314 	add.w	r3, r7, #20
 80064fe:	4621      	mov	r1, r4
 8006500:	4618      	mov	r0, r3
 8006502:	f017 fdb4 	bl	801e06e <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800650e:	e03e      	b.n	800658e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            while ((*spectral_ptr) == ' ') {
                spectral_ptr++;
 8006510:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006514:	3301      	adds	r3, #1
 8006516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 800651a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b20      	cmp	r3, #32
 8006522:	d0f5      	beq.n	8006510 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8006524:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006528:	f016 fc26 	bl	801cd78 <atof>
 800652c:	ec59 8b10 	vmov	r8, r9, d0
 8006530:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18d4      	adds	r4, r2, r3
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7fa fb7f 	bl	8000c48 <__aeabi_d2f>
 800654a:	4603      	mov	r3, r0
 800654c:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800654e:	e009      	b.n	8006564 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x114>
                spectral_ptr++;
 8006550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800655a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x120>
            while ((*spectral_ptr != ',')) {
 8006564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b2c      	cmp	r3, #44	; 0x2c
 800656c:	d1f0      	bne.n	8006550 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
 800656e:	e000      	b.n	8006572 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
                    break;
 8006570:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8006572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
                spectral_ptr = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006582:	e004      	b.n	800658e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            }
            else {
                spectral_ptr++;
 8006584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006588:	3301      	adds	r3, #1
 800658a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800658e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1c1      	bne.n	800651a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8006596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800659a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065a2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80065a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065a8:	461a      	mov	r2, r3
 80065aa:	2001      	movs	r0, #1
 80065ac:	f7ff ff2c 	bl	8006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80065b0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	6852      	ldr	r2, [r2, #4]
 80065bc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4619      	mov	r1, r3
 80065c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80065d2:	4c3b      	ldr	r4, [pc, #236]	; (80066c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80065d4:	e062      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80065dc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	4935      	ldr	r1, [pc, #212]	; (80066c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7f9 fe0e 	bl	8000210 <strcmp>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006600:	e00f      	b.n	8006622 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	4930      	ldr	r1, [pc, #192]	; (80066c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 fe01 	bl	8000210 <strcmp>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8006614:	2302      	movs	r3, #2
 8006616:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800661a:	e002      	b.n	8006622 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800661c:	2300      	movs	r3, #0
 800661e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	edd3 7a06 	vldr	s15, [r3, #24]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 800662c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ret = spectral::feature::spectral_analysis(
 8006632:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6a92      	ldr	r2, [r2, #40]	; 0x28
        ret = spectral::feature::spectral_analysis(
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006640:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8006644:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006648:	9102      	str	r1, [sp, #8]
 800664a:	9201      	str	r2, [sp, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	eeb0 1a47 	vmov.f32	s2, s14
 8006652:	4623      	mov	r3, r4
 8006654:	eef0 0a67 	vmov.f32	s1, s15
 8006658:	4602      	mov	r2, r0
 800665a:	ed97 0a00 	vldr	s0, [r7]
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f7ff fc8b 	bl	8005f7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8006666:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800666a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8006672:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006676:	4815      	ldr	r0, [pc, #84]	; (80066cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8006678:	f002 fbdc 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800667c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006680:	e00c      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	461a      	mov	r2, r3
 8006688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800668c:	fb03 f202 	mul.w	r2, r3, r2
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2201      	movs	r2, #1
 8006698:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 800669a:	2400      	movs	r4, #0
    }
 800669c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fa ff9b 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80066a6:	4623      	mov	r3, r4
 80066a8:	4618      	mov	r0, r3
 80066aa:	37bc      	adds	r7, #188	; 0xbc
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	0802052c 	.word	0x0802052c
 80066b8:	08020550 	.word	0x08020550
 80066bc:	fffffc10 	.word	0xfffffc10
 80066c0:	fffffc14 	.word	0xfffffc14
 80066c4:	08020308 	.word	0x08020308
 80066c8:	0802030c 	.word	0x0802030c
 80066cc:	08020578 	.word	0x08020578

080066d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80066da:	6138      	str	r0, [r7, #16]
 80066dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        if (filter_cutoff > sampling_freq / 2) {
 80066e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80066ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80066f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	dd07      	ble.n	8006710 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x40>
            filter_cutoff = sampling_freq / 2;
 8006700:	ed97 7a05 	vldr	s14, [r7, #20]
 8006704:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800670c:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        float bin = filter_cutoff * fft_length / sampling_freq;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800671a:	edd7 7a03 	vldr	s15, [r7, #12]
 800671e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006722:	ed97 7a05 	vldr	s14, [r7, #20]
 8006726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d021      	beq.n	8006778 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8006734:	69f8      	ldr	r0, [r7, #28]
 8006736:	f7f9 ff37 	bl	80005a8 <__aeabi_f2d>
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006740:	f7f9 fdd2 	bl	80002e8 <__aeabi_dsub>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f7fa fa5c 	bl	8000c08 <__aeabi_d2uiz>
 8006750:	4603      	mov	r3, r0
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x96>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	e000      	b.n	8006768 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x98>
 8006766:	2301      	movs	r3, #1
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8006776:	e014      	b.n	80067a2 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xd2>
            *start_bin = 1;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 800677e:	69f8      	ldr	r0, [r7, #28]
 8006780:	f7f9 ff12 	bl	80005a8 <__aeabi_f2d>
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 800678a:	f7f9 fdaf 	bl	80002ec <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f7fa fa37 	bl	8000c08 <__aeabi_d2uiz>
 800679a:	4603      	mov	r3, r0
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
    }
 80067a2:	bf00      	nop
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	3fe00000 	.word	0x3fe00000

080067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    /**
     * @brief Calculates the spectral analysis features.
     *
     * @return the number of features calculated
     */
    static size_t extract_spec_features(
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	b0ba      	sub	sp, #232	; 0xe8
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	6178      	str	r0, [r7, #20]
 80067b8:	6139      	str	r1, [r7, #16]
 80067ba:	60fa      	str	r2, [r7, #12]
 80067bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80067c0:	71fb      	strb	r3, [r7, #7]
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq,
        const bool remove_mean = true,
        const bool transpose_and_scale_input = true)
    {
        if (transpose_and_scale_input) {
 80067c2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
            // transpose the matrix so we have one row per axis
            numpy::transpose_in_place(input_matrix);
 80067ca:	6978      	ldr	r0, [r7, #20]
 80067cc:	f7fa ff80 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

            // func tests for scale of 1 and does a no op in that case
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067d6:	eeb0 0a67 	vmov.f32	s0, s15
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7fb f888 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80067e0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80067e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
 80067ec:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80067f0:	e297      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        bool do_filter = false;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	49cd      	ldr	r1, [pc, #820]	; (8006b34 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x384>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 fd06 	bl	8000210 <strcmp>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d121      	bne.n	800684e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x9e>
            if( config->filter_order ) {
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	edd3 7a06 	vldr	s15, [r3, #24]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	eef0 0a67 	vmov.f32	s1, s15
 8006824:	ed97 0a02 	vldr	s0, [r7, #8]
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7fc ff9d 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800682e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8006832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
 800683a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800683e:	e270      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = false;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800684c:	e029      	b.n	80068a2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	49b9      	ldr	r1, [pc, #740]	; (8006b38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x388>)
 8006854:	4618      	mov	r0, r3
 8006856:	f7f9 fcdb 	bl	8000210 <strcmp>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d120      	bne.n	80068a2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
            if( config->filter_order ) {
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d016      	beq.n	8006896 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	edd3 7a06 	vldr	s15, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	eef0 0a67 	vmov.f32	s1, s15
 800687a:	ed97 0a02 	vldr	s0, [r7, #8]
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	f7fc ffa8 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006884:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8006888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
 8006890:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8006894:	e245      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = true;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        }

        if (remove_mean){
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
            EI_TRY(processing::subtract_mean(input_matrix));
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f7fd fccb 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80068ae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80068b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
 80068ba:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80068be:	e230      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 80068c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d012      	beq.n	80068ee <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x13e>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            get_start_stop_bin(
 80068cc:	4618      	mov	r0, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80068d4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80068d8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80068dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80068e0:	eef0 0a67 	vmov.f32	s1, s15
 80068e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80068e8:	f7ff fef2 	bl	80066d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80068ec:	e009      	b.n	8006902 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x152>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	67bb      	str	r3, [r7, #120]	; 0x78
            stop_bin = config->fft_length / 2 + 1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da00      	bge.n	80068fc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x14c>
 80068fa:	3301      	adds	r3, #1
 80068fc:	105b      	asrs	r3, r3, #1
 80068fe:	3301      	adds	r3, #1
 8006900:	677b      	str	r3, [r7, #116]	; 0x74
        }
        size_t num_bins = stop_bin - start_bin;
 8006902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        float *feature_out = output_matrix->buffer;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        const float *feature_out_ori = feature_out;
 8006914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006918:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006922:	e1ed      	b.n	8006d00 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x550>
            float *data_window = input_matrix->get_row_ptr(row);
 8006924:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8006928:	6978      	ldr	r0, [r7, #20]
 800692a:	f7fa fe6d 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800692e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            size_t data_size = input_matrix->cols;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            matrix_t rms_in_matrix(1, data_size, data_window);
 800693a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800693e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006946:	2101      	movs	r1, #1
 8006948:	f7fa fe1d 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 800694c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006950:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006954:	2201      	movs	r2, #1
 8006956:	2101      	movs	r1, #1
 8006958:	f7fa fe15 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 800695c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fb f898 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800696c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8006970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d0>
 8006978:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800697c:	2500      	movs	r5, #0
 800697e:	e1a9      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>

            feature_out++;
 8006980:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006984:	3304      	adds	r3, #4
 8006986:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 800698a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800698e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (stddev == 0.0f) {
 8006996:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800699a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	d102      	bne.n	80069aa <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1fa>
                stddev = 1e-10f;
 80069a4:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x38c>)
 80069a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            float k_sum = 0;
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069c0:	e03c      	b.n	8006a3c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x28c>
                temp = data_window[i] * data_window[i] * data_window[i];
 80069c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069cc:	4413      	add	r3, r2
 80069ce:	ed93 7a00 	vldr	s14, [r3]
 80069d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069dc:	4413      	add	r3, r2
 80069de:	edd3 7a00 	vldr	s15, [r3]
 80069e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069f0:	4413      	add	r3, r2
 80069f2:	edd3 7a00 	vldr	s15, [r3]
 80069f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                s_sum += temp;
 80069fe:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                k_sum += temp * data_window[i];
 8006a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006a18:	4413      	add	r3, r2
 8006a1a:	ed93 7a00 	vldr	s14, [r3]
 8006a1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
            for (size_t i = 0; i < data_size; i++) {
 8006a32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a36:	3301      	adds	r3, #1
 8006a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d3bc      	bcc.n	80069c2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x212>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 8006a48:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006a4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a50:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a58:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            *feature_out++ = (s_sum / data_size) / temp;
 8006a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a68:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006a7a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8006a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a9a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a9e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006ab4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006abc:	edc3 7a00 	vstr	s15, [r3]

            if (config->implementation_version == 4) {
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	889b      	ldrh	r3, [r3, #4]
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	f040 80c0 	bne.w	8006c4a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x49a>

                size_t fft_out_size = config->fft_length / 2 + 1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da00      	bge.n	8006ad4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x324>
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	105b      	asrs	r3, r3, #1
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ei_vector<float> fft_out(fft_out_size);
 8006adc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006ae0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ae4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f003 f9a5 	bl	8009e38 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 8006aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 f83d 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	4619      	mov	r1, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	9101      	str	r1, [sp, #4]
 8006b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006b16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006b1a:	f7fc f811 	bl	8002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006b1e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8006b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x390>
 8006b2a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006b2e:	2500      	movs	r5, #0
 8006b30:	e082      	b.n	8006c38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x488>
 8006b32:	bf00      	nop
 8006b34:	08020308 	.word	0x08020308
 8006b38:	0802030c 	.word	0x0802030c
 8006b3c:	2edbe6ff 	.word	0x2edbe6ff
                    0,
                    fft_out_size,
                    config->fft_length,
                    config->do_fft_overlap));

                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 8006b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b44:	4618      	mov	r0, r3
 8006b46:	f003 f804 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b50:	4618      	mov	r0, r3
 8006b52:	f003 f80e 	bl	8009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	2101      	movs	r1, #1
 8006b60:	f7fa fd11 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 8006b64:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	f7fa fd0a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fb f85d 	bl	8001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d108      	bne.n	8006b9a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ea>
 8006b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa fd3a 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006b94:	4603      	mov	r3, r0
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	e001      	b.n	8006b9e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ee>
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ba2:	1d19      	adds	r1, r3, #4
 8006ba4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006ba8:	601a      	str	r2, [r3, #0]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fb f8dd 	bl	8001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x422>
 8006bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa fd1e 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	e001      	b.n	8006bd6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x426>
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bda:	1d19      	adds	r1, r3, #4
 8006bdc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006be0:	601a      	str	r2, [r3, #0]

                for (size_t i = start_bin; i < stop_bin; i++) {
 8006be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be8:	e016      	b.n	8006c18 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x468>
                    feature_out[i - start_bin] = fft_out[i];
 8006bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f003 f955 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c08:	4413      	add	r3, r2
 8006c0a:	680a      	ldr	r2, [r1, #0]
 8006c0c:	601a      	str	r2, [r3, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 8006c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c12:	3301      	adds	r3, #1
 8006c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d3e3      	bcc.n	8006bea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x43a>
                }
            } else {
 8006c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fa fcd8 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa fcd3 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006c36:	2501      	movs	r5, #1
 8006c38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f003 f915 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006c42:	2d01      	cmp	r5, #1
 8006c44:	d01f      	beq.n	8006c86 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c46:	2500      	movs	r5, #0
 8006c48:	e044      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                EI_TRY(numpy::welch_max_hold(
 8006c4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c52:	4610      	mov	r0, r2
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006c5a:	9202      	str	r2, [sp, #8]
 8006c5c:	9001      	str	r0, [sp, #4]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	460b      	mov	r3, r1
 8006c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c66:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006c6a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006c6e:	f7fb ff67 	bl	8002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006c72:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8006c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c7e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8006c82:	2500      	movs	r5, #0
 8006c84:	e026      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                    start_bin,
                    stop_bin,
                    config->fft_length,
                    config->do_fft_overlap));
            }
            if (config->do_log) {
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d018      	beq.n	8006cc2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x512>
                numpy::zero_handling(feature_out, num_bins);
 8006c90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c94:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006c98:	f7fc f818 	bl	8002ccc <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8006c9c:	f107 0018 	add.w	r0, r7, #24
 8006ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006caa:	f7fa fc6c 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fb fb0c 	bl	80022d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
            }
 8006cb8:	f107 0318 	add.w	r3, r7, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fa fc8d 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 8006cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ccc:	4413      	add	r3, r2
 8006cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        }
 8006cd2:	2501      	movs	r5, #1
 8006cd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fa fc7f 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006cde:	2d01      	cmp	r5, #1
 8006ce0:	d101      	bne.n	8006ce6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x536>
 8006ce2:	2501      	movs	r5, #1
 8006ce4:	e000      	b.n	8006ce8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x538>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fa fc75 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006cf2:	2d01      	cmp	r5, #1
 8006cf4:	d115      	bne.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f4ff ae0b 	bcc.w	8006924 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x174>
        size_t num_features = feature_out - feature_out_ori;
 8006d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	109b      	asrs	r3, r3, #2
 8006d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        return num_features;
 8006d1e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    }
 8006d22:	4623      	mov	r3, r4
 8006d24:	4618      	mov	r0, r3
 8006d26:	37d8      	adds	r7, #216	; 0xd8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bdb0      	pop	{r4, r5, r7, pc}

08006d2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        size_t n_features =
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	ed97 0a00 	vldr	s0, [r7]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff fd30 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006d50:	6178      	str	r0, [r7, #20]
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d101      	bne.n	8006d60 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 8006d60:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x40>)
    }
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	fffffc14 	.word	0xfffffc14

08006d70 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09a      	sub	sp, #104	; 0x68
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
    {
        if (r == 1 || r == 3 || r == 10) {
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d005      	beq.n	8006d8c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d002      	beq.n	8006d8c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b0a      	cmp	r3, #10
 8006d8a:	d10f      	bne.n	8006dac <_ZN2ei8spectral7feature15get_ratio_comboEi+0x3c>
            return {r};
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	2301      	movs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	f107 0208 	add.w	r2, r7, #8
 8006da2:	ca06      	ldmia	r2, {r1, r2}
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 f858 	bl	800ae5a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
            return {10, 10, 10};
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 8006daa:	e04e      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 30) {
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b1e      	cmp	r3, #30
 8006db0:	d114      	bne.n	8006ddc <_ZN2ei8spectral7feature15get_ratio_comboEi+0x6c>
            return {3, 10};
 8006db2:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe4>)
 8006db4:	f107 0320 	add.w	r3, r7, #32
 8006db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006dc0:	f107 0320 	add.w	r3, r7, #32
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dce:	f107 0218 	add.w	r2, r7, #24
 8006dd2:	ca06      	ldmia	r2, {r1, r2}
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f004 f840 	bl	800ae5a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006dda:	e036      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 100) {
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d114      	bne.n	8006e0c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>
            return {10, 10};
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe8>)
 8006de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8006df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	2302      	movs	r3, #2
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006e02:	ca06      	ldmia	r2, {r1, r2}
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f004 f828 	bl	800ae5a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e0a:	e01e      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 1000) {
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e12:	d113      	bne.n	8006e3c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xcc>
            return {10, 10, 10};
 8006e14:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xec>)
 8006e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	2303      	movs	r3, #3
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e32:	ca06      	ldmia	r2, {r1, r2}
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f004 f810 	bl	800ae5a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e3a:	e006      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
            assert(0);
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf0>)
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf4>)
 8006e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e44:	4808      	ldr	r0, [pc, #32]	; (8006e68 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf8>)
 8006e46:	f015 ff79 	bl	801cd3c <__assert_func>
    }
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	3768      	adds	r7, #104	; 0x68
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08020670 	.word	0x08020670
 8006e58:	08020678 	.word	0x08020678
 8006e5c:	08020680 	.word	0x08020680
 8006e60:	0801fff8 	.word	0x0801fff8
 8006e64:	080205ac 	.word	0x080205ac
 8006e68:	080205f0 	.word	0x080205f0

08006e6c <_ZN2ei6signal7sosfiltD1Ev>:
    struct sosfilt {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3308      	adds	r3, #8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f002 fff7 	bl	8009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b092      	sub	sp, #72	; 0x48
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d009      	beq.n	8006eae <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b0a      	cmp	r3, #10
 8006e9e:	d006      	beq.n	8006eae <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>)
 8006ea2:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>)
 8006ea4:	f240 212b 	movw	r1, #555	; 0x22b
 8006ea8:	4827      	ldr	r0, [pc, #156]	; (8006f48 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc0>)
 8006eaa:	f015 ff47 	bl	801cd3c <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d101      	bne.n	8006eb8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x30>
 8006eb4:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc4>)
 8006eb6:	e000      	b.n	8006eba <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x32>
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc8>)
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d101      	bne.n	8006ec6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x3e>
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xcc>)
 8006ec4:	e000      	b.n	8006ec8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x40>
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xd0>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fead 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8006ed6:	6338      	str	r0, [r7, #48]	; 0x30

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006edc:	e026      	b.n	8006f2c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
            const float *x = input_matrix->get_row_ptr(row);
 8006ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fa fb91 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
            float *y = output_matrix->get_row_ptr(row);
 8006ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eea:	68b8      	ldr	r0, [r7, #8]
 8006eec:	f7fa fb8c 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ef0:	62b8      	str	r0, [r7, #40]	; 0x28
            signal::sosfilt sosfilt(sos, sos_zi, 4);
 8006ef2:	f107 0010 	add.w	r0, r7, #16
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006efc:	f7fe feaa 	bl	8005c54 <_ZN2ei6signal7sosfiltC1EPKfS3_j>
            signal::decimate_simple(
                x,
                input_matrix->cols,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6899      	ldr	r1, [r3, #8]
                y,
                output_matrix->cols,
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689a      	ldr	r2, [r3, #8]
            signal::decimate_simple(
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f18:	f7fe ff54 	bl	8005dc4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>
                ratio,
                sosfilt);
        }
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ffa3 	bl	8006e6c <_ZN2ei6signal7sosfiltD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	3301      	adds	r3, #1
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d3d3      	bcc.n	8006ede <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x56>

        return out_size;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3740      	adds	r7, #64	; 0x40
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	0802068c 	.word	0x0802068c
 8006f44:	080206a8 	.word	0x080206a8
 8006f48:	080205f0 	.word	0x080205f0
 8006f4c:	20000000 	.word	0x20000000
 8006f50:	20000080 	.word	0x20000080
 8006f54:	20000060 	.word	0x20000060
 8006f58:	200000e0 	.word	0x200000e0

08006f5c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b0b5      	sub	sp, #212	; 0xd4
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f72:	4611      	mov	r1, r2
 8006f74:	2244      	movs	r2, #68	; 0x44
 8006f76:	4618      	mov	r0, r3
 8006f78:	f017 f879 	bl	801e06e <memcpy>
        auto config = &config_copy;
 8006f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 8006f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	4998      	ldr	r1, [pc, #608]	; (80071ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x290>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 f93f 	bl	8000210 <strcmp>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x50>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 8006f98:	ed97 0a00 	vldr	s0, [r7]
 8006f9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fe fd6a 	bl	8005a7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	e19e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 8006fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
 8006fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d116      	bne.n	8006ff0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
            size_t n_features =
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	ed97 0a00 	vldr	s0, [r7]
 8006fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff fbec 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006fd8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d101      	bne.n	8006fec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
 8006fe8:	2400      	movs	r4, #0
 8006fea:	e17e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 8006fec:	4c80      	ldr	r4, [pc, #512]	; (80071f0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x294>)
 8006fee:	e17c      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else {
            numpy::transpose_in_place(input_matrix);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fa fb6d 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8006ff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7fa fc74 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8007008:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800700c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
 8007014:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8007018:	e167      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>

            if (config->input_decimation_ratio > 1) {
 800701a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b01      	cmp	r3, #1
 8007022:	f340 8086 	ble.w	8007132 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d6>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 8007026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fe9c 	bl	8006d70 <_ZN2ei8spectral7feature15get_ratio_comboEi>
                size_t out_size = input_matrix->cols;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007048:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800704c:	f003 ff26 	bl	800ae9c <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>
 8007050:	4603      	mov	r3, r0
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
 8007054:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007058:	f003 ff30 	bl	800aebc <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>
 800705c:	4603      	mov	r3, r0
 800705e:	623b      	str	r3, [r7, #32]
 8007060:	e016      	b.n	8007090 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
 8007062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f003 ff61 	bl	800af2e <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>
 800706c:	4603      	mov	r3, r0
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    out_size = _decimate(input_matrix, input_matrix, r);
 8007074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007078:	461a      	mov	r2, r3
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff03 	bl	8006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
 8007082:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800708a:	4618      	mov	r0, r3
 800708c:	f003 ff3f 	bl	800af0e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>
 8007090:	f107 0220 	add.w	r2, r7, #32
 8007094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f003 ff1f 	bl	800aede <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1dd      	bne.n	8007062 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                }

                // rearrange input matrix to be in the right shape after decimation
                float* out = input_matrix->get_row_ptr(0) + out_size;
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7fa faad 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ae:	4602      	mov	r2, r0
 80070b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 80070bc:	2301      	movs	r3, #1
 80070be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070c2:	e027      	b.n	8007114 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b8>
                    float *row = input_matrix->get_row_ptr(r);
 80070c4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fa fa9d 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ce:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    for(size_t c = 0; c < out_size; c++) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d8:	e011      	b.n	80070fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a2>
                        *out++ = row[c];
 80070da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80070e4:	441a      	add	r2, r3
 80070e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]
                    for(size_t c = 0; c < out_size; c++) {
 80070f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007106:	429a      	cmp	r2, r3
 8007108:	d3e7      	bcc.n	80070da <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x17e>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 800710a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800710e:	3301      	adds	r3, #1
 8007110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800711c:	429a      	cmp	r2, r3
 800711e:	d3d1      	bcc.n	80070c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                    }
                }
                input_matrix->cols = out_size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007126:	609a      	str	r2, [r3, #8]
            }
 8007128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800712c:	4618      	mov	r0, r3
 800712e:	f002 ff62 	bl	8009ff6 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>

            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 8007132:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007140:	edd7 6a00 	vldr	s13, [r7]
 8007144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007148:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

            // filter here, before decimating, instead of inside extract_spec_features
            if (strcmp(config->filter_type, "low") == 0) {
 800714c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	4928      	ldr	r1, [pc, #160]	; (80071f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x298>)
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 f85b 	bl	8000210 <strcmp>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11d      	bne.n	800719c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x240>
                if( config->filter_order ) {
 8007160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d048      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 800716a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800716e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	4619      	mov	r1, r3
 800717c:	eef0 0a67 	vmov.f32	s1, s15
 8007180:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7fc faef 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800718a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800718e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007192:	2b00      	cmp	r3, #0
 8007194:	d032      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 8007196:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800719a:	e0a6      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
                        new_sampling_freq,
                        config->filter_cutoff,
                        config->filter_order));
                }
            }
            else if (strcmp(config->filter_type, "high") == 0) {
 800719c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4915      	ldr	r1, [pc, #84]	; (80071f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x29c>)
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7f9 f833 	bl	8000210 <strcmp>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d125      	bne.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                if( config->filter_order ) {
 80071b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d020      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 80071ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071be:	edd3 7a06 	vldr	s15, [r3, #24]
 80071c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	eef0 0a67 	vmov.f32	s1, s15
 80071d0:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7fc fafd 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80071da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80071de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 80071e6:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80071ea:	e07e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 80071ec:	08020700 	.word	0x08020700
 80071f0:	fffffc14 	.word	0xfffffc14
 80071f4:	08020308 	.word	0x08020308
 80071f8:	0802030c 	.word	0x0802030c
                        config->filter_order));
                }
            }
            
            // set the filter order to 0, so that we won't double filter
            config->filter_order = 0;
 80071fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007200:	2200      	movs	r2, #0
 8007202:	61da      	str	r2, [r3, #28]

            // do this before extract_spec_features because extract_spec_features modifies the matrix
            constexpr size_t decimation = 10;
 8007204:	230a      	movs	r3, #10
 8007206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            const size_t decimated_size =
                signal::get_decimated_size(input_matrix->cols, decimation);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	210a      	movs	r1, #10
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fd0d 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8007216:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6859      	ldr	r1, [r3, #4]
 800721e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007222:	2300      	movs	r3, #0
 8007224:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007228:	f7fa f9ad 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 800722c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007230:	220a      	movs	r2, #10
 8007232:	4619      	mov	r1, r3
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fe27 	bl	8006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>

            size_t n_features = extract_spec_features(
 800723a:	2300      	movs	r3, #0
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2301      	movs	r3, #1
 8007240:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fab0 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007250:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                config,
                new_sampling_freq,
                true,
                false);

            if (n_features > 0 && config->extra_low_freq) {
 8007254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d038      	beq.n	80072ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
 800725c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d032      	beq.n	80072ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
                // disable filtering post decimation
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	6892      	ldr	r2, [r2, #8]
 8007270:	fb03 f202 	mul.w	r2, r3, r2
                    output_matrix->buffer + n_features);
 8007274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007278:	1ad1      	subs	r1, r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	f107 0010 	add.w	r0, r7, #16
 800728a:	460a      	mov	r2, r1
 800728c:	2101      	movs	r1, #1
 800728e:	f7fa f97a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

                n_features += extract_spec_features(
 8007292:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007296:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800729a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800729e:	f107 0110 	add.w	r1, r7, #16
 80072a2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2301      	movs	r3, #1
 80072ac:	eeb0 0a47 	vmov.f32	s0, s14
 80072b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072b4:	f7ff fa7c 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072be:	4413      	add	r3, r2
 80072c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    &lf_features,
                    config,
                    new_sampling_freq / decimation,
                    true,
                    false);
            }
 80072c4:	f107 0310 	add.w	r3, r7, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fa f987 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d101      	bne.n	80072de <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x382>
 80072da:	2400      	movs	r4, #0
 80072dc:	e000      	b.n	80072e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x384>
 80072de:	4c05      	ldr	r4, [pc, #20]	; (80072f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x398>)
        }
 80072e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fa f979 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
    }
 80072ea:	4623      	mov	r3, r4
 80072ec:	4618      	mov	r0, r3
 80072ee:	37cc      	adds	r7, #204	; 0xcc
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}
 80072f4:	fffffc14 	.word	0xfffffc14

080072f8 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f7f9 ffb4 	bl	8001270 <_ZNSt14_Function_baseD1Ev>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	f003 fe25 	bl	800af6c <_ZNSt8functionIFijjPfEEC1Ev>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_ZN2ei11ei_signal_tD1Ev>:
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ffde 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b08b      	sub	sp, #44	; 0x2c
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	6892      	ldr	r2, [r2, #8]
 8007364:	fbb3 f1f2 	udiv	r1, r3, r2
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	461a      	mov	r2, r3
 800736e:	f107 0014 	add.w	r0, r7, #20
 8007372:	2300      	movs	r3, #0
 8007374:	f7fa f907 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800737e:	4c23      	ldr	r4, [pc, #140]	; (800740c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>)
 8007380:	e039      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2100      	movs	r1, #0
 800738c:	f002 fea8 	bl	800a0e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	491e      	ldr	r1, [pc, #120]	; (8007410 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>)
 8007396:	4618      	mov	r0, r3
 8007398:	f7f8 ff3a 	bl	8000210 <strcmp>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d128      	bne.n	80073f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>
        if (config->implementation_version == 1) {
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10a      	bne.n	80073c0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80073aa:	f107 0314 	add.w	r3, r7, #20
 80073ae:	ed97 0a00 	vldr	s0, [r7]
 80073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff f84a 	bl	8006450 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073bc:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073be:	e01a      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else if (config->implementation_version == 4) {
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	889b      	ldrh	r3, [r3, #4]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d10a      	bne.n	80073de <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
            return spectral::feature::extract_spectral_analysis_features_v4(
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	ed97 0a00 	vldr	s0, [r7]
 80073d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fdc1 	bl	8006f5c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073da:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073dc:	e00b      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	ed97 0a00 	vldr	s0, [r7]
 80073e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fc9e 	bl	8006d2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073f0:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073f2:	e000      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80073f4:	4c07      	ldr	r4, [pc, #28]	; (8007414 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>)
}
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fa f8ee 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8007400:	4623      	mov	r3, r4
 8007402:	4618      	mov	r0, r3
 8007404:	372c      	adds	r7, #44	; 0x2c
 8007406:	46bd      	mov	sp, r7
 8007408:	bd90      	pop	{r4, r7, pc}
 800740a:	bf00      	nop
 800740c:	fffffc16 	.word	0xfffffc16
 8007410:	0802087c 	.word	0x0802087c
 8007414:	fffffc0a 	.word	0xfffffc0a

08007418 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3310      	adds	r3, #16
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff65 	bl	8007312 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	f000 f832 	bl	80074d2 <_ZN14SignalWithAxes8get_dataEjjPf>
 800746e:	4603      	mov	r3, r0
        };
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	429a      	cmp	r2, r3
 800748c:	d102      	bne.n	8007494 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	e01a      	b.n	80074ca <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6892      	ldr	r2, [r2, #8]
 80074a8:	fb03 f202 	mul.w	r2, r3, r2
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]
        };
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 0210 	add.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f003 fd88 	bl	800afd6 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3310      	adds	r3, #16
    }
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	; 0x28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	68d2      	ldr	r2, [r2, #12]
 80074ee:	6992      	ldr	r2, [r2, #24]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	68d2      	ldr	r2, [r2, #12]
 8007504:	6992      	ldr	r2, [r2, #24]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
 800750a:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	623b      	str	r3, [r7, #32]
 8007514:	e02a      	b.n	800756c <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	e01c      	b.n	8007556 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	18d1      	adds	r1, r2, r3
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	627a      	str	r2, [r7, #36]	; 0x24
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	2201      	movs	r2, #1
 8007540:	f002 fdce 	bl	800a0e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8007544:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	e014      	b.n	800757a <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	429a      	cmp	r2, r3
 800755e:	d3dd      	bcc.n	800751c <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	4413      	add	r3, r2
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	4413      	add	r3, r2
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	429a      	cmp	r2, r3
 8007576:	d3ce      	bcc.n	8007516 <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8007578:	2300      	movs	r3, #0
    }
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	; 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fb fc86 	bl	8002e9e <_ZN18ei_impulse_state_tD1Ev>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075aa:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6178      	str	r0, [r7, #20]
 80075c2:	6139      	str	r1, [r7, #16]
 80075c4:	60fa      	str	r2, [r7, #12]
 80075c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80075ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075d0:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6178      	str	r0, [r7, #20]
 80075e8:	6139      	str	r1, [r7, #16]
 80075ea:	60fa      	str	r2, [r7, #12]
 80075ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80075f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80075f4:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	e03e      	b.n	800767a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f993 3000 	ldrsb.w	r3, [r3]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800760e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007616:	ed97 7a01 	vldr	s14, [r7, #4]
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d011      	beq.n	800764c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4619      	mov	r1, r3
 8007638:	4816      	ldr	r0, [pc, #88]	; (8007694 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 800763a:	f001 fbfb 	bl	8008e34 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800763e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007642:	f00f f911 	bl	8016868 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007646:	4814      	ldr	r0, [pc, #80]	; (8007698 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 8007648:	f001 fbf4 	bl	8008e34 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	3201      	adds	r2, #1
 8007660:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	3304      	adds	r3, #4
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3301      	adds	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8007680:	461a      	mov	r2, r3
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4293      	cmp	r3, r2
 8007686:	d3b9      	bcc.n	80075fc <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08020b20 	.word	0x08020b20
 8007698:	08020878 	.word	0x08020878

0800769c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	e031      	b.n	8007714 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4413      	add	r3, r2
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]

        if (debug) {
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d011      	beq.n	80076e6 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	4816      	ldr	r0, [pc, #88]	; (800772c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 80076d4:	f001 fbae 	bl	8008e34 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80076d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80076dc:	f00f f8c4 	bl	8016868 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80076e0:	4813      	ldr	r0, [pc, #76]	; (8007730 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 80076e2:	f001 fba7 	bl	8008e34 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	3201      	adds	r2, #1
 80076fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3301      	adds	r3, #1
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	4413      	add	r3, r2
 8007708:	3304      	adds	r3, #4
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3301      	adds	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800771a:	461a      	mov	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4293      	cmp	r3, r2
 8007720:	d3c6      	bcc.n	80076b0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	08020b20 	.word	0x08020b20
 8007730:	08020878 	.word	0x08020878

08007734 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800775e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800777c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800779a:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077b8:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077d6:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077f4:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e01e      	b.n	8007856 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	ed93 7a00 	vldr	s14, [r3]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	edd3 7a00 	vldr	s15, [r3]
 8007830:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	ed93 7a00 	vldr	s14, [r3]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3301      	adds	r3, #1
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d3dc      	bcc.n	8007818 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800786c:	b5b0      	push	{r4, r5, r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e029      	b.n	80078d8 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	ed93 7a00 	vldr	s14, [r3]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	edd3 7a00 	vldr	s15, [r3]
 800789e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a2:	2002      	movs	r0, #2
 80078a4:	eeb0 0a67 	vmov.f32	s0, s15
 80078a8:	f002 f9dc 	bl	8009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80078ac:	ec55 4b10 	vmov	r4, r5, d0
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f7f8 fe79 	bl	80005a8 <__aeabi_f2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fd15 	bl	80002ec <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7f9 f9bd 	bl	8000c48 <__aeabi_d2f>
 80078ce:	4603      	mov	r3, r0
 80078d0:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3301      	adds	r3, #1
 80078d6:	613b      	str	r3, [r7, #16]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d3d1      	bcc.n	8007884 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 80078e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80078e4:	f7f9 fc54 	bl	8001190 <_ZSt4sqrtf>
 80078e8:	eeb0 7a40 	vmov.f32	s14, s0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80078f2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80078f6:	eeb0 0a67 	vmov.f32	s0, s15
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}

08007900 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8007910:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007912:	2300      	movs	r3, #0
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e018      	b.n	800794a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	461a      	mov	r2, r3
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ffa1 	bl	800786c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 800792a:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800792e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007932:	edd7 7a07 	vldr	s15, [r7, #28]
 8007936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d501      	bpl.n	8007944 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	3301      	adds	r3, #1
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3e2      	bcc.n	8007918 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	ee07 3a90 	vmov	s15, r3
}
 8007958:	eeb0 0a67 	vmov.f32	s0, s15
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	447a0000 	.word	0x447a0000

08007968 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8007968:	b480      	push	{r7}
 800796a:	b08d      	sub	sp, #52	; 0x34
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d11a      	bne.n	80079b2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	e012      	b.n	80079a8 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800798e:	440b      	add	r3, r1
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799c:	440b      	add	r3, r1
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	3301      	adds	r3, #1
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3e8      	bcc.n	8007982 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 80079b0:	e053      	b.n	8007a5a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e044      	b.n	8007a4e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e02c      	b.n	8007a2a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	6892      	ldr	r2, [r2, #8]
 80079e4:	fb03 f202 	mul.w	r2, r3, r2
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	4413      	add	r3, r2
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d820      	bhi.n	8007a34 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079fc:	440b      	add	r3, r1
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	1acb      	subs	r3, r1, r3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a10:	440b      	add	r3, r1
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	601a      	str	r2, [r3, #0]
                    input_pos++;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	3301      	adds	r3, #1
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d219      	bcs.n	8007a58 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3ce      	bcc.n	80079d0 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8007a32:	e000      	b.n	8007a36 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8007a34:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	6892      	ldr	r2, [r2, #8]
 8007a3e:	fb02 f303 	mul.w	r3, r2, r3
 8007a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a44:	4413      	add	r3, r2
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3b6      	bcc.n	80079c4 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8007a56:	e000      	b.n	8007a5a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8007a58:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3734      	adds	r7, #52	; 0x34
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08e      	sub	sp, #56	; 0x38
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8007a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8007a7a:	f00e fed7 	bl	801682c <_Z16ei_read_timer_msv>
 8007a7e:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f00e fff1 	bl	8016a70 <_Z9ei_mallocj>
 8007a8e:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8007a96:	4829      	ldr	r0, [pc, #164]	; (8007b3c <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8007a98:	f001 f9cc 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8007a9c:	f06f 030a 	mvn.w	r3, #10
 8007aa0:	e047      	b.n	8007b32 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	891b      	ldrh	r3, [r3, #8]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	9201      	str	r2, [sp, #4]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f7ff ff55 	bl	8007968 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	6959      	ldr	r1, [r3, #20]
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	891b      	ldrh	r3, [r3, #8]
 8007aca:	69f8      	ldr	r0, [r7, #28]
 8007acc:	f7ff fe9a 	bl	8007804 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8007ade:	69f8      	ldr	r0, [r7, #28]
 8007ae0:	f7ff ff0e 	bl	8007900 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8007ae4:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8007ae8:	f00e fea0 	bl	801682c <_Z16ei_read_timer_msv>
 8007aec:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8007af0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	480f      	ldr	r0, [pc, #60]	; (8007b40 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8007b02:	f001 f997 	bl	8008e34 <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8007b06:	ed97 0a06 	vldr	s0, [r7, #24]
 8007b0a:	f00e fead 	bl	8016868 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8007b0e:	480d      	ldr	r0, [pc, #52]	; (8007b44 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8007b10:	f001 f990 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    result->anomaly = anomaly;
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ei_free(input);
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	f00e ffba 	bl	8016aa4 <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3730      	adds	r7, #48	; 0x30
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	08020b28 	.word	0x08020b28
 8007b40:	08020b5c 	.word	0x08020b5c
 8007b44:	08020878 	.word	0x08020878

08007b48 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007b52:	edc7 0a02 	vstr	s1, [r7, #8]
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <_ZL17pre_cast_quantizefflb+0x1e>
 8007b62:	237f      	movs	r3, #127	; 0x7f
 8007b64:	e000      	b.n	8007b68 <_ZL17pre_cast_quantizefflb+0x20>
 8007b66:	23ff      	movs	r3, #255	; 0xff
 8007b68:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <_ZL17pre_cast_quantizefflb+0x2e>
 8007b70:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007b74:	e000      	b.n	8007b78 <_ZL17pre_cast_quantizefflb+0x30>
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8007b7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b86:	eeb0 0a66 	vmov.f32	s0, s13
 8007b8a:	f7f9 fb11 	bl	80011b0 <_ZSt5roundf>
 8007b8e:	eef0 7a40 	vmov.f32	s15, s0
 8007b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b96:	ee17 2a90 	vmov	r2, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	f107 0214 	add.w	r2, r7, #20
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f003 fadf 	bl	800b16e <_ZSt3maxIlERKT_S2_S2_>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f003 fac4 	bl	800b146 <_ZSt3minIlERKT_S2_S2_>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	681b      	ldr	r3, [r3, #0]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d201      	bcs.n	8007be4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	e000      	b.n	8007be6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007be4:	687b      	ldr	r3, [r7, #4]
    }
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08e      	sub	sp, #56	; 0x38
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	e098      	b.n	8007d42 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	6892      	ldr	r2, [r2, #8]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c24:	4413      	add	r3, r2
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d024      	beq.n	8007c7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	dc7a      	bgt.n	8007d2a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d002      	beq.n	8007c3e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d04a      	beq.n	8007cd2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007c3c:	e075      	b.n	8007d2a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c3e:	2300      	movs	r3, #0
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c42:	e010      	b.n	8007c66 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	1c58      	adds	r0, r3, #1
 8007c56:	6338      	str	r0, [r7, #48]	; 0x30
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	3301      	adds	r3, #1
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	6892      	ldr	r2, [r2, #8]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3e5      	bcc.n	8007c44 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007c78:	e060      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	e01e      	b.n	8007cbe <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	eef0 0a67 	vmov.f32	s1, s15
 8007ca0:	ed97 0a06 	vldr	s0, [r7, #24]
 8007ca4:	f7ff ff50 	bl	8007b48 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8007cb2:	4413      	add	r3, r2
 8007cb4:	b242      	sxtb	r2, r0
 8007cb6:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	3301      	adds	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	6892      	ldr	r2, [r2, #8]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d3d7      	bcc.n	8007c80 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8007cd0:	e034      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	623b      	str	r3, [r7, #32]
 8007cd6:	e01e      	b.n	8007d16 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	eef0 0a67 	vmov.f32	s1, s15
 8007cf8:	ed97 0a05 	vldr	s0, [r7, #20]
 8007cfc:	f7ff ff24 	bl	8007b48 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	6339      	str	r1, [r7, #48]	; 0x30
 8007d0a:	4413      	add	r3, r2
 8007d0c:	b2c2      	uxtb	r2, r0
 8007d0e:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	3301      	adds	r3, #1
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	6892      	ldr	r2, [r2, #8]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3d7      	bcc.n	8007cd8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007d28:	e008      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4814      	ldr	r0, [pc, #80]	; (8007d84 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8007d32:	f001 f87f 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007d36:	f06f 030c 	mvn.w	r3, #12
 8007d3a:	e01e      	b.n	8007d7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	3301      	adds	r3, #1
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	f4ff af62 	bcc.w	8007c10 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	089b      	lsrs	r3, r3, #2
 8007d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d00f      	beq.n	8007d78 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d00a      	beq.n	8007d78 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007d66:	4619      	mov	r1, r3
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8007d6e:	f001 f861 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8007d72:	f06f 0317 	mvn.w	r3, #23
 8007d76:	e000      	b.n	8007d7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3738      	adds	r7, #56	; 0x38
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	08020b7c 	.word	0x08020b7c
 8007d88:	08020ba0 	.word	0x08020ba0

08007d8c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b09      	cmp	r3, #9
 8007daa:	d026      	beq.n	8007dfa <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	f300 8093 	bgt.w	8007ed8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d002      	beq.n	8007dbc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d057      	beq.n	8007e6a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007dba:	e08d      	b.n	8007ed8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	089b      	lsrs	r3, r3, #2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d00e      	beq.n	8007de6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da00      	bge.n	8007dd2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	109b      	asrs	r3, r3, #2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4846      	ldr	r0, [pc, #280]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007ddc:	f001 f82a 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007de0:	f06f 0317 	mvn.w	r3, #23
 8007de4:	e082      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f016 f93b 	bl	801e06e <memcpy>
            break;
 8007df8:	e077      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d00a      	beq.n	8007e1a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e08:	4619      	mov	r1, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4839      	ldr	r0, [pc, #228]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e10:	f001 f810 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e14:	f06f 0317 	mvn.w	r3, #23
 8007e18:	e068      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e01e      	b.n	8007e5e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	f993 3000 	ldrsb.w	r3, [r3]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d3db      	bcc.n	8007e20 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007e68:	e03f      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d00a      	beq.n	8007e8a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e78:	4619      	mov	r1, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	481d      	ldr	r0, [pc, #116]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e80:	f000 ffd8 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e84:	f06f 0317 	mvn.w	r3, #23
 8007e88:	e030      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e01d      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	edd3 7a03 	vldr	s15, [r3, #12]
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d3dc      	bcc.n	8007e90 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8007ed6:	e008      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	4806      	ldr	r0, [pc, #24]	; (8007ef8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8007ee0:	f000 ffa8 	bl	8008e34 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8007ee4:	f06f 030d 	mvn.w	r3, #13
 8007ee8:	e000      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08020c28 	.word	0x08020c28
 8007ef8:	08020c6c 	.word	0x08020c6c

08007efc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	789b      	ldrb	r3, [r3, #2]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	f040 822d 	bne.w	8008374 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	f200 821c 	bhi.w	8008360 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007fcb 	.word	0x08007fcb
 8007f34:	08007f59 	.word	0x08007f59
 8007f38:	08007fd7 	.word	0x08007fd7
 8007f3c:	080080b3 	.word	0x080080b3
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	080080d3 	.word	0x080080d3
 8007f48:	0800811b 	.word	0x0800811b
 8007f4c:	0800811b 	.word	0x0800811b
 8007f50:	080081d9 	.word	0x080081d9
 8007f54:	080082a3 	.word	0x080082a3
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007f66:	7cfb      	ldrb	r3, [r7, #19]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01d      	beq.n	8007fa8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f86:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	eef0 0a47 	vmov.f32	s1, s14
 8007f94:	eeb0 0a67 	vmov.f32	s0, s15
 8007f98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f7ff fb0d 	bl	80075ba <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8007fa6:	e233      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fb0:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff faed 	bl	800759c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007fc8:	e222      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 8007fca:	48a4      	ldr	r0, [pc, #656]	; (800825c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 8007fcc:	f000 ff32 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007fd0:	f06f 0309 	mvn.w	r3, #9
 8007fd4:	e21e      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d101      	bne.n	8007fe4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8007fe0:	2305      	movs	r3, #5
 8007fe2:	e000      	b.n	8007fe6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8007fe4:	2306      	movs	r3, #6
 8007fe6:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d11e      	bne.n	800802e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 800800a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	eef0 0a47 	vmov.f32	s1, s14
 8008016:	eeb0 0a67 	vmov.f32	s0, s15
 800801a:	460b      	mov	r3, r1
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f003 f8d7 	bl	800b1d4 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800802c:	e1f0      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d11e      	bne.n	8008074 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008050:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	eef0 0a47 	vmov.f32	s1, s14
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	460b      	mov	r3, r1
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f003 f8c7 	bl	800b1fa <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008072:	e1cd      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d111      	bne.n	80080a0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 8008084:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	460b      	mov	r3, r1
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fb5c 	bl	8007750 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800809e:	e1b7      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	486e      	ldr	r0, [pc, #440]	; (8008260 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 80080a8:	f000 fec4 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80080ac:	f06f 0309 	mvn.w	r3, #9
 80080b0:	e1b0      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 80080ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	460b      	mov	r3, r1
 80080c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff fb52 	bl	800776e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        debug);
                #endif
                break;
 80080d0:	e19e      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 80080d2:	2301      	movs	r3, #1
 80080d4:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
 80080da:	e00d      	b.n	80080f8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	fb02 f303 	mul.w	r3, r2, r3
 80080f0:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	3301      	adds	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	dbeb      	blt.n	80080dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff fb3d 	bl	800778c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 8008118:	e17a      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b09      	cmp	r3, #9
 8008120:	d11c      	bne.n	800815c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800813c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	460b      	mov	r3, r1
 8008144:	eef0 0a47 	vmov.f32	s1, s14
 8008148:	eeb0 0a67 	vmov.f32	s0, s15
 800814c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f003 f866 	bl	800b220 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800815a:	e159      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d11c      	bne.n	800819e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800816c:	ee07 3a90 	vmov	s15, r3
 8008170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800817e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	460b      	mov	r3, r1
 8008186:	eef0 0a47 	vmov.f32	s1, s14
 800818a:	eeb0 0a67 	vmov.f32	s0, s15
 800818e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f003 f858 	bl	800b246 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800819c:	e138      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d10f      	bne.n	80081c6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	460b      	mov	r3, r1
 80081b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff faf6 	bl	80077aa <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80081c4:	e124      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	4825      	ldr	r0, [pc, #148]	; (8008264 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 80081ce:	f000 fe31 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80081d2:	f06f 0309 	mvn.w	r3, #9
 80081d6:	e11d      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d11c      	bne.n	800821a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	eef0 0a47 	vmov.f32	s1, s14
 8008206:	eeb0 0a67 	vmov.f32	s0, s15
 800820a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f003 f82d 	bl	800b26c <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008218:	e0fa      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d122      	bne.n	8008268 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800823c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	460b      	mov	r3, r1
 8008244:	eef0 0a47 	vmov.f32	s1, s14
 8008248:	eeb0 0a67 	vmov.f32	s0, s15
 800824c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f003 f81f 	bl	800b292 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800825a:	e0d9      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 800825c:	08020c94 	.word	0x08020c94
 8008260:	08020cdc 	.word	0x08020cdc
 8008264:	08020d14 	.word	0x08020d14
                else if (output->type == kTfLiteFloat32) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10f      	bne.n	8008290 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008278:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	460b      	mov	r3, r1
 8008280:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff faa0 	bl	80077c8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800828e:	e0bf      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	4619      	mov	r1, r3
 8008296:	4861      	ldr	r0, [pc, #388]	; (800841c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 8008298:	f000 fdcc 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800829c:	f06f 0309 	mvn.w	r3, #9
 80082a0:	e0b8      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d11c      	bne.n	80082e4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	460b      	mov	r3, r1
 80082cc:	eef0 0a47 	vmov.f32	s1, s14
 80082d0:	eeb0 0a67 	vmov.f32	s0, s15
 80082d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f002 ffee 	bl	800b2b8 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80082e2:	e095      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d11c      	bne.n	8008326 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8008306:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	460b      	mov	r3, r1
 800830e:	eef0 0a47 	vmov.f32	s1, s14
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f002 ffe0 	bl	800b2de <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008324:	e074      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10f      	bne.n	800834e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 8008336:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	460b      	mov	r3, r1
 800833e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa50 	bl	80077e6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800834c:	e060      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	4832      	ldr	r0, [pc, #200]	; (8008420 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 8008356:	f000 fd6d 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800835a:	f06f 0309 	mvn.w	r3, #9
 800835e:	e059      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8008366:	4619      	mov	r1, r3
 8008368:	482e      	ldr	r0, [pc, #184]	; (8008424 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 800836a:	f000 fd63 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800836e:	f06f 0309 	mvn.w	r3, #9
 8008372:	e04f      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	789b      	ldrb	r3, [r3, #2]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d113      	bne.n	80083a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008382:	f083 0301 	eor.w	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d041      	beq.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff f9cc 	bl	8007734 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083a2:	e035      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80083aa:	f083 0301 	eor.w	r3, r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02d      	beq.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 80083c2:	7efb      	ldrb	r3, [r7, #27]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d018      	beq.n	80083fa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	ed93 7a03 	vldr	s14, [r3, #12]
 80083de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80083e2:	eef0 0a47 	vmov.f32	s1, s14
 80083e6:	eeb0 0a67 	vmov.f32	s0, s15
 80083ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff f8f7 	bl	80075e0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083f8:	e00a      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff f949 	bl	800769c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 8008410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	; 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	08020d48 	.word	0x08020d48
 8008420:	08020d7c 	.word	0x08020d7c
 8008424:	08020db0 	.word	0x08020db0

08008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 800843c:	f00e fa03 	bl	8016846 <_Z16ei_read_timer_usv>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	4829      	ldr	r0, [pc, #164]	; (80084f4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 8008456:	7cfb      	ldrb	r3, [r7, #19]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 800845c:	7cfb      	ldrb	r3, [r7, #19]
 800845e:	4619      	mov	r1, r3
 8008460:	4825      	ldr	r0, [pc, #148]	; (80084f8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 8008462:	f000 fce7 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8008466:	f06f 0305 	mvn.w	r3, #5
 800846a:	e03f      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	2000      	movs	r0, #0
 8008474:	4798      	blx	r3
 8008476:	4603      	mov	r3, r0
 8008478:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 800847a:	7cbb      	ldrb	r3, [r7, #18]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 8008480:	f06f 0302 	mvn.w	r3, #2
 8008484:	e032      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	7a92      	ldrb	r2, [r2, #10]
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	4603      	mov	r3, r0
 8008496:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8008498:	7cbb      	ldrb	r3, [r7, #18]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 800849e:	f06f 0302 	mvn.w	r3, #2
 80084a2:	e023      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d11d      	bne.n	80084ea <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	7b12      	ldrb	r2, [r2, #12]
 80084b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	4603      	mov	r3, r0
 80084be:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084c0:	7cbb      	ldrb	r3, [r7, #18]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 80084c6:	f06f 0302 	mvn.w	r3, #2
 80084ca:	e00f      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	7ad2      	ldrb	r2, [r2, #11]
 80084d4:	6a39      	ldr	r1, [r7, #32]
 80084d6:	4610      	mov	r0, r2
 80084d8:	4798      	blx	r3
 80084da:	4603      	mov	r3, r0
 80084dc:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084de:	7cbb      	ldrb	r3, [r7, #18]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 80084e4:	f06f 0302 	mvn.w	r3, #2
 80084e8:	e000      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	080012b9 	.word	0x080012b9
 80084f8:	08020de4 	.word	0x08020de4

080084fc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80084fc:	b5b0      	push	{r4, r5, r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af04      	add	r7, sp, #16
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4798      	blx	r3
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 8008526:	f06f 0302 	mvn.w	r3, #2
 800852a:	e04d      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 800852c:	f00e f98b 	bl	8016846 <_Z16ei_read_timer_usv>
 8008530:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8008534:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	1a84      	subs	r4, r0, r2
 800853e:	eb61 0503 	sbc.w	r5, r1, r3
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008548:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800854c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8008552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	f7f8 fbc5 	bl	8000ce8 <__aeabi_ldivmod>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008564:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8008568:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8008570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008576:	4619      	mov	r1, r3
 8008578:	4815      	ldr	r0, [pc, #84]	; (80085d0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 800857a:	f000 fc5b 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 800857e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008590:	68b9      	ldr	r1, [r7, #8]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7ff fcb2 	bl	8007efc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 8008598:	4603      	mov	r3, r0
 800859a:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 800859c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 80085a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a8:	e00e      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80085aa:	f00e f937 	bl	801681c <_Z29ei_run_impulse_check_canceledv>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f113 0f02 	cmn.w	r3, #2
 80085b4:	bf0c      	ite	eq
 80085b6:	2301      	moveq	r3, #1
 80085b8:	2300      	movne	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80085c0:	f06f 0301 	mvn.w	r3, #1
 80085c4:	e000      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}
 80085d0:	08020e14 	.word	0x08020e14

080085d4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 80085d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d6:	b0d7      	sub	sp, #348	; 0x15c
 80085d8:	af06      	add	r7, sp, #24
 80085da:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 80085de:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 80085e2:	6030      	str	r0, [r6, #0]
 80085e4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80085e8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80085ec:	6001      	str	r1, [r0, #0]
 80085ee:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80085f2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80085f6:	600a      	str	r2, [r1, #0]
 80085f8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80085fc:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8008600:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 8008602:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008606:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800860a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8008614:	f00e f917 	bl	8016846 <_Z16ei_read_timer_usv>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8008620:	4b65      	ldr	r3, [pc, #404]	; (80087b8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008626:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f001 fb49 	bl	8009cc8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 8008636:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800863a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800863e:	f107 0118 	add.w	r1, r7, #24
 8008642:	f107 0310 	add.w	r3, r7, #16
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800865a:	f7ff fee5 	bl	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 800865e:	4603      	mov	r3, r0
 8008660:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8008664:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 800866c:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 8008670:	e096      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	4618      	mov	r0, r3
 8008678:	f002 fe44 	bl	800b304 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800867c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8008680:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008684:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008690:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008698:	4413      	add	r3, r2
 800869a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 800869e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086a2:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80086a6:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80086aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086ae:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 80086b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	f7ff fa98 	bl	8007bf4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 80086ca:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 80086d2:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 80086d6:	e063      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 80086d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086dc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80086e0:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 80086e4:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80086ee:	9104      	str	r1, [sp, #16]
 80086f0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80086f4:	9103      	str	r1, [sp, #12]
 80086f6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80086fa:	9102      	str	r1, [sp, #8]
 80086fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008700:	9101      	str	r1, [sp, #4]
 8008702:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008706:	9100      	str	r1, [sp, #0]
 8008708:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f7ff fef5 	bl	80084fc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8008718:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800871c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d023      	beq.n	800876c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8008724:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008728:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008730:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008734:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008742:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	4413      	add	r3, r2
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fb1a 	bl	8007d8c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 800875e:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 8008766:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 800876a:	e019      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 800876c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	4811      	ldr	r0, [pc, #68]	; (80087b8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008774:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8008776:	f00e f866 	bl	8016846 <_Z16ei_read_timer_usv>
 800877a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800877e:	1a84      	subs	r4, r0, r2
 8008780:	eb61 0503 	sbc.w	r5, r1, r3
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800878c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8008790:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8008798:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 800879c:	e000      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 800879e:	2400      	movs	r4, #0
}
 80087a0:	f107 0310 	add.w	r3, r7, #16
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 faa4 	bl	8009cf2 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80087aa:	4623      	mov	r3, r4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0800133d 	.word	0x0800133d

080087bc <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	b094      	sub	sp, #80	; 0x50
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	330c      	adds	r3, #12
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d4:	e02f      	b.n	8008836 <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087de:	015b      	lsls	r3, r3, #5
 80087e0:	4413      	add	r3, r2
 80087e2:	f107 0414 	add.w	r4, r7, #20
 80087e6:	461d      	mov	r5, r3
 80087e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 80087f4:	7e3a      	ldrb	r2, [r7, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 80087fc:	69fc      	ldr	r4, [r7, #28]
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	78f9      	ldrb	r1, [r7, #3]
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	9202      	str	r2, [sp, #8]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	9201      	str	r2, [sp, #4]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	462b      	mov	r3, r5
 8008816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	47a0      	blx	r4
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (res != EI_IMPULSE_OK) {
 8008822:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <run_inference+0x74>
            return res;
 800882a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800882e:	e017      	b.n	8008860 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	3301      	adds	r3, #1
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d3c9      	bcc.n	80087d6 <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008842:	f00d ffeb 	bl	801681c <_Z29ei_run_impulse_check_canceledv>
 8008846:	4603      	mov	r3, r0
 8008848:	f113 0f02 	cmn.w	r3, #2
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 8008858:	f06f 0301 	mvn.w	r3, #1
 800885c:	e000      	b.n	8008860 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3740      	adds	r7, #64	; 0x40
 8008864:	46bd      	mov	sp, r7
 8008866:	bdb0      	pop	{r4, r5, r7, pc}

08008868 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f002 fd87 	bl	800b38c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff ffe5 	bl	8008868 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fd39 	bl	800732c <_ZN2ei11ei_signal_tD1Ev>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 80088c4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80088c8:	b0a6      	sub	sp, #152	; 0x98
 80088ca:	af02      	add	r7, sp, #8
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	70fb      	strb	r3, [r7, #3]
 80088d4:	2600      	movs	r6, #0
    if(!handle) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 80088dc:	f06f 0615 	mvn.w	r6, #21
 80088e0:	e24c      	b.n	8008d7c <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 80088e2:	f44f 7284 	mov.w	r2, #264	; 0x108
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f015 fadf 	bl	801deac <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	4413      	add	r3, r2
 80088fc:	67bb      	str	r3, [r7, #120]	; 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 80088fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008904:	d201      	bcs.n	800890a <process_impulse+0x46>
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	e001      	b.n	800890e <process_impulse+0x4a>
 800890a:	f04f 33ff 	mov.w	r3, #4294967295
 800890e:	4618      	mov	r0, r3
 8008910:	f010 ff5d 	bl	80197ce <_Znaj>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f002 fb88 	bl	800b034 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8008924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fbb1 	bl	800b090 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 800892e:	6778      	str	r0, [r7, #116]	; 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8008930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	461a      	mov	r2, r3
 8008936:	2100      	movs	r1, #0
 8008938:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800893a:	f015 fab7 	bl	801deac <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 800893e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8008940:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008944:	429c      	cmp	r4, r3
 8008946:	d202      	bcs.n	800894e <process_impulse+0x8a>
 8008948:	1ca3      	adds	r3, r4, #2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	e001      	b.n	8008952 <process_impulse+0x8e>
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
 8008952:	4618      	mov	r0, r3
 8008954:	f010 ff3b 	bl	80197ce <_Znaj>
 8008958:	4603      	mov	r3, r0
 800895a:	461d      	mov	r5, r3
 800895c:	2304      	movs	r3, #4
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	1d2b      	adds	r3, r5, #4
 8008962:	601c      	str	r4, [r3, #0]
 8008964:	f105 0308 	add.w	r3, r5, #8
 8008968:	1e62      	subs	r2, r4, #1
 800896a:	4614      	mov	r4, r2
 800896c:	4698      	mov	r8, r3
 800896e:	e005      	b.n	800897c <process_impulse+0xb8>
 8008970:	4640      	mov	r0, r8
 8008972:	f002 fcfb 	bl	800b36c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8008976:	f108 0804 	add.w	r8, r8, #4
 800897a:	3c01      	subs	r4, #1
 800897c:	2c00      	cmp	r4, #0
 800897e:	daf7      	bge.n	8008970 <process_impulse+0xac>
 8008980:	f105 0308 	add.w	r3, r5, #8
 8008984:	673b      	str	r3, [r7, #112]	; 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 8008986:	f00d ff5e 	bl	8016846 <_Z16ei_read_timer_usv>
 800898a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008994:	2300      	movs	r3, #0
 8008996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800899a:	e13c      	b.n	8008c16 <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a6:	015b      	lsls	r3, r3, #5
 80089a8:	4413      	add	r3, r2
 80089aa:	f107 0410 	add.w	r4, r7, #16
 80089ae:	461d      	mov	r5, r3
 80089b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 80089bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089c4:	18d4      	adds	r4, r2, r3
 80089c6:	2010      	movs	r0, #16
 80089c8:	f010 fef0 	bl	80197ac <_Znwj>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461d      	mov	r5, r3
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	2101      	movs	r1, #1
 80089d6:	4628      	mov	r0, r5
 80089d8:	f7f8 fdd5 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80089dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089e0:	4629      	mov	r1, r5
 80089e2:	4618      	mov	r0, r3
 80089e4:	f002 fb71 	bl	800b0ca <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80089e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089ec:	4619      	mov	r1, r3
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff4a 	bl	8008888 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80089f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089f8:	4618      	mov	r0, r3
 80089fa:	f002 fb75 	bl	800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 80089fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a06:	18d1      	adds	r1, r2, r3
 8008a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a10:	18d4      	adds	r4, r2, r3
 8008a12:	4608      	mov	r0, r1
 8008a14:	f002 fb8a 	bl	800b12c <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8008a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a24:	4413      	add	r3, r2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a30:	441a      	add	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d922      	bls.n	8008a82 <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8008a3c:	48a6      	ldr	r0, [pc, #664]	; (8008cd8 <process_impulse+0x414>)
 8008a3e:	f000 f9f9 	bl	8008e34 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d019      	beq.n	8008a7c <process_impulse+0x1b8>
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	3b04      	subs	r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a52:	18d4      	adds	r4, r2, r3
 8008a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d004      	beq.n	8008a64 <process_impulse+0x1a0>
 8008a5a:	3c04      	subs	r4, #4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f002 fb43 	bl	800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a62:	e7f7      	b.n	8008a54 <process_impulse+0x190>
 8008a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a66:	f1a3 0208 	sub.w	r2, r3, #8
 8008a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3302      	adds	r3, #2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f010 fe96 	bl	80197a8 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008a7c:	f06f 0604 	mvn.w	r6, #4
 8008a80:	e176      	b.n	8008d70 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	460b      	mov	r3, r1
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	f7fe fcc0 	bl	8007418 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8008a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fceb 	bl	8007478 <_ZN14SignalWithAxes10get_signalEv>
 8008aa2:	6638      	str	r0, [r7, #96]	; 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d038      	beq.n	8008b1c <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8008aaa:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <process_impulse+0x418>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f083 0301 	eor.w	r3, r3, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8008ab8:	4b89      	ldr	r3, [pc, #548]	; (8008ce0 <process_impulse+0x41c>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4889      	ldr	r0, [pc, #548]	; (8008ce4 <process_impulse+0x420>)
 8008ac0:	f000 f9b8 	bl	8008e34 <_Z9ei_printfPKcz>
 8008ac4:	4888      	ldr	r0, [pc, #544]	; (8008ce8 <process_impulse+0x424>)
 8008ac6:	f000 f9b5 	bl	8008e34 <_Z9ei_printfPKcz>
                has_printed = true;
 8008aca:	4b84      	ldr	r3, [pc, #528]	; (8008cdc <process_impulse+0x418>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fa f983 	bl	8002de2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8008adc:	65f8      	str	r0, [r7, #92]	; 0x5c
            if(dsp_handle) {
 8008ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d017      	beq.n	8008b14 <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	681c      	ldr	r4, [r3, #0]
 8008aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008af4:	4413      	add	r3, r2
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	69f9      	ldr	r1, [r7, #28]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008b02:	eeb0 0a67 	vmov.f32	s0, s15
 8008b06:	460b      	mov	r3, r1
 8008b08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008b0c:	47a0      	blx	r4
 8008b0e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8008b12:	e016      	b.n	8008b42 <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8008b14:	f06f 060a 	mvn.w	r6, #10
 8008b18:	2400      	movs	r4, #0
 8008b1a:	e06f      	b.n	8008bfc <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b22:	00d2      	lsls	r2, r2, #3
 8008b24:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008b26:	440a      	add	r2, r1
 8008b28:	6811      	ldr	r1, [r2, #0]
 8008b2a:	69f8      	ldr	r0, [r7, #28]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	68d2      	ldr	r2, [r2, #12]
 8008b30:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008b34:	eeb0 0a67 	vmov.f32	s0, s15
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008b3c:	4798      	blx	r3
 8008b3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        }

        if (ret != EIDSP_OK) {
 8008b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d025      	beq.n	8008b96 <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8008b4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008b4e:	4867      	ldr	r0, [pc, #412]	; (8008cec <process_impulse+0x428>)
 8008b50:	f000 f970 	bl	8008e34 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d019      	beq.n	8008b8e <process_impulse+0x2ca>
 8008b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b64:	18d4      	adds	r4, r2, r3
 8008b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	d004      	beq.n	8008b76 <process_impulse+0x2b2>
 8008b6c:	3c04      	subs	r4, #4
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f002 faba 	bl	800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008b74:	e7f7      	b.n	8008b66 <process_impulse+0x2a2>
 8008b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b78:	f1a3 0208 	sub.w	r2, r3, #8
 8008b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b7e:	3b04      	subs	r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3302      	adds	r3, #2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f010 fe0d 	bl	80197a8 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008b8e:	f06f 0604 	mvn.w	r6, #4
 8008b92:	2400      	movs	r4, #0
 8008b94:	e032      	b.n	8008bfc <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008b96:	f00d fe41 	bl	801681c <_Z29ei_run_impulse_check_canceledv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f113 0f02 	cmn.w	r3, #2
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d020      	beq.n	8008bee <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8008bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d019      	beq.n	8008be6 <process_impulse+0x322>
 8008bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008bbc:	18d4      	adds	r4, r2, r3
 8008bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc0:	429c      	cmp	r4, r3
 8008bc2:	d004      	beq.n	8008bce <process_impulse+0x30a>
 8008bc4:	3c04      	subs	r4, #4
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f002 fa8e 	bl	800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008bcc:	e7f7      	b.n	8008bbe <process_impulse+0x2fa>
 8008bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd0:	f1a3 0208 	sub.w	r2, r3, #8
 8008bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd6:	3b04      	subs	r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3302      	adds	r3, #2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f010 fde1 	bl	80197a8 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8008be6:	f06f 0601 	mvn.w	r6, #1
 8008bea:	2400      	movs	r4, #0
 8008bec:	e006      	b.n	8008bfc <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }
 8008bfa:	2401      	movs	r4, #1
 8008bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fe51 	bl	80088a8 <_ZN14SignalWithAxesD1Ev>
 8008c06:	2c01      	cmp	r4, #1
 8008c08:	f040 80b2 	bne.w	8008d70 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c10:	3301      	adds	r3, #1
 8008c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c20:	429a      	cmp	r2, r3
 8008c22:	f4ff aebb 	bcc.w	800899c <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8008c26:	f00d fe0e 	bl	8016846 <_Z16ei_read_timer_usv>
 8008c2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c2e:	ebb0 0a02 	subs.w	sl, r0, r2
 8008c32:	eb61 0b03 	sbc.w	fp, r1, r3
 8008c36:	4652      	mov	r2, sl
 8008c38:	465b      	mov	r3, fp
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8008c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	f7f8 f84b 	bl	8000ce8 <__aeabi_ldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d057      	beq.n	8008d12 <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4821      	ldr	r0, [pc, #132]	; (8008cf0 <process_impulse+0x42c>)
 8008c6c:	f000 f8e2 	bl	8008e34 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c76:	e047      	b.n	8008d08 <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8008c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c80:	4413      	add	r3, r2
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d039      	beq.n	8008cfc <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008c88:	2300      	movs	r3, #0
 8008c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c8c:	e015      	b.n	8008cba <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8008c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c96:	4413      	add	r3, r2
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	edd3 7a00 	vldr	s15, [r3]
 8008ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8008caa:	f00d fddd 	bl	8016868 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8008cae:	4811      	ldr	r0, [pc, #68]	; (8008cf4 <process_impulse+0x430>)
 8008cb0:	f000 f8c0 	bl	8008e34 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cc2:	4413      	add	r3, r2
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3df      	bcc.n	8008c8e <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8008cce:	480a      	ldr	r0, [pc, #40]	; (8008cf8 <process_impulse+0x434>)
 8008cd0:	f000 f8b0 	bl	8008e34 <_Z9ei_printfPKcz>
 8008cd4:	e013      	b.n	8008cfe <process_impulse+0x43a>
 8008cd6:	bf00      	nop
 8008cd8:	08020ec0 	.word	0x08020ec0
 8008cdc:	200053c0 	.word	0x200053c0
 8008ce0:	20000100 	.word	0x20000100
 8008ce4:	08020eec 	.word	0x08020eec
 8008ce8:	08020ef4 	.word	0x08020ef4
 8008cec:	08020f60 	.word	0x08020f60
 8008cf0:	08020f88 	.word	0x08020f88
 8008cf4:	08020f9c 	.word	0x08020f9c
 8008cf8:	08020878 	.word	0x08020878
                continue;
 8008cfc:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8008cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d02:	3301      	adds	r3, #1
 8008d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3b2      	bcc.n	8008c78 <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8008d18:	481b      	ldr	r0, [pc, #108]	; (8008d88 <process_impulse+0x4c4>)
 8008d1a:	f000 f88b 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fd49 	bl	80087bc <run_inference>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    delete[] matrix_ptrs;
 8008d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d019      	beq.n	8008d6a <process_impulse+0x4a6>
 8008d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d40:	18d4      	adds	r4, r2, r3
 8008d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d004      	beq.n	8008d52 <process_impulse+0x48e>
 8008d48:	3c04      	subs	r4, #4
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f002 f9cc 	bl	800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008d50:	e7f7      	b.n	8008d42 <process_impulse+0x47e>
 8008d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d54:	f1a3 0208 	sub.w	r2, r3, #8
 8008d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d5a:	3b04      	subs	r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3302      	adds	r3, #2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f010 fd1f 	bl	80197a8 <_ZdaPvj>
    return res;
 8008d6a:	f997 6067 	ldrsb.w	r6, [r7, #103]	; 0x67
 8008d6e:	e000      	b.n	8008d72 <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8008d70:	bf00      	nop
}
 8008d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 f96b 	bl	800b052 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8008d7c:	4633      	mov	r3, r6
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3790      	adds	r7, #144	; 0x90
 8008d82:	46bd      	mov	sp, r7
 8008d84:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8008d88:	08020fa0 	.word	0x08020fa0

08008d8c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <run_classifier+0x24>)
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	f7ff fd8f 	bl	80088c4 <process_impulse>
 8008da6:	4603      	mov	r3, r0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	200053b0 	.word	0x200053b0

08008db4 <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		32763, 32083, 32268, 33179, 32229, 32716, 32340, 33720, 36797, 35670, 33208, 35695, 33967, 38763, 35798, 35792, 35134, 40245, 36943, 38278, 39444, 35838, 40996, 40240, 35962, 42095, 41381, 39468, 40578, 43343, 41816, 38197, 39047, 42446, 39254, 40133, 42614, 42592, 40529, 41110, 45528, 40862, 46251, 44688, 42269, 46987, 43290, 43266, 42655, 45150, 42594, 48518, 45250, 45617, 49691, 47625, 47717, 47024, 47908, 49773, 50563, 49415, 45407, 49365, 46307, 50083, 48727, 49211, 48298, 47492, 49861, 50579, 54020, 49429, 50262, 50533, 52239, 52184, 54293, 55019, 53654, 51002, 53769, 50110, 54767, 53591, 52274, 52691, 52739, 53807, 57654, 56612, 55705, 53388, 52153, 58055, 53669, 54948, 56732, 54366, 55755, 55782, 57431, 57318, 55529, 55464, 56151, 56719, 60361, 60676, 59848, 59374, 58595, 60453, 57727, 57962, 57190, 58682, 61805, 60803, 57861, 60348, 56974, 61662, 62975, 59320, 60470, 62189, 62777, 63571, 64045, 58947, 60988, 59275, 63170, 60539, 64911, 64681, 58994, 64967, 63003, 60025, 64310, 65535, 63912, 65535, 64627, 65535, 64332, 62675, 63923, 61895, 62290, 62861, 64669, 62528, 65535, 65535, 62870, 62582, 65256, 64748, 63615, 65535, 65535, 63618, 64030, 64576, 61913, 65535, 65535, 65535, 63653, 65535, 65535, 62308, 65535, 62781, 65535, 64389, 63904, 63644, 65535, 65535, 65535, 65487, 63247, 63504, 65535, 64354, 65535, 65535, 65535, 64992, 62923, 65535, 65535, 64119, 65006, 63235, 62337, 65535, 65284, 62565, 64468, 65535, 65535, 65535, 65535, 63453, 63667, 65535, 65535, 64585, 65535, 65535, 65535, 65535, 64009, 65535, 65535, 62511, 65335, 65112, 65535, 63270, 65535, 65535, 65535, 63323, 65535, 64145, 64281, 64291, 65535, 64972, 60769, 62029, 60724, 65535, 63468, 64690, 64123, 64482, 60808, 65535, 64367, 62470, 63437, 63203, 62620, 60076, 61467, 64264, 58654, 59944, 62094, 58455, 64330, 61185, 58751, 64032, 63280, 59933, 57943, 58318, 57386, 57671, 62833, 57409, 56860, 56169, 60393, 57513, 59506, 58964, 59512, 58239, 57880, 59162, 60535, 56925, 59140, 55286, 60169, 59992, 58009, 54749, 57886, 57318, 55067, 56205, 53277, 58460, 53722, 56829, 58064, 52601, 55197, 56859, 52692, 53449, 56895, 54278, 55459, 50399, 55137, 52997, 54509, 51713, 54981, 53004, 51238, 53538, 52317, 47777, 52204, 51482, 47219, 47291, 51177, 46596, 50886, 49391, 51132, 48656, 48918, 47763, 44838, 50900, 47605, 50168, 46277, 45863, 46057, 48133, 46217, 48112, 43031, 45478, 43408, 46002, 41830, 44037, 43288, 43531, 41099, 42146, 44664, 41345, 44149, 42524, 40044, 44436, 41696, 43474, 43438, 38094, 41345, 41072, 37022, 39156, 40988, 38249, 39866, 38069, 40127, 35152, 40194, 35972, 35755, 34624, 36158, 36024, 38771, 39031, 37014, 34749, 32143, 33018, 36409, 33778, 36606, 31261, 32194, 32371, 31938, 33802, 33416, 32245, 29554, 33963, 34179, 29322, 33533, 32269, 31742, 30697, 30391, 27138, 32625, 27439, 26604, 27104, 28998, 25967, 26983, 26576, 26051, 25365, 25135, 25363, 28355, 24384, 23991, 22446, 24923, 28094, 24859, 25607, 25271, 23201, 21897, 23826, 22945, 25408, 24670, 25012, 23743, 20282, 22904, 18723, 18348, 23189, 19960, 18730, 18637, 21864, 19543, 22442, 20393, 17789, 16666, 20873, 15965, 20465, 16143, 16642, 18576, 19980, 16532, 15322, 19450, 18018, 15914, 15322, 17403, 13369, 13742, 12505, 15754, 13011, 15682, 16277, 14063, 15231, 16058, 14070, 11945, 13259, 13531, 14639, 10191, 13266, 11019, 11321, 11918, 8910, 11285, 11448, 12386, 7140, 9410, 11200, 12711, 6508, 8343, 10506, 11119, 9556, 11163, 9792, 10964, 10658, 6633, 4881, 9784, 10356, 8268, 8924, 10026, 7827, 7790, 5887, 5792, 5124, 2895, 6171, 2657, 4066, 2438, 7949, 2864, 5219, 1670, 5824, 4355, 6567, 3036, 1313, 4518, 4604, 6637, 2389, 5777, 1613, 433, 1621, 625, 3493, 4221, 5368, 2211, 3444, 3526, 4768, 0, 5376, 3609, 0, 3122, 1485, 285, 2919, 4706, 3484, 3035, 1596, 264, 1859, 0, 1334, 1535, 2379, 0, 0, 1229, 0, 3792, 0, 0, 62, 1703, 1977, 3481, 3131, 0, 1668, 0, 0, 0, 0, 2604, 862, 0, 3071, 2242, 1681, 836, 2235, 501, 0, 1782, 0, 2746, 0, 0, 0, 822, 0, 0, 0, 602, 0, 0, 2551, 0, 0, 436, 1428, 2940, 0, 2367, 0, 0, 0, 0, 1490, 383, 0, 3467, 4088, 3199, 3519, 4169, 0, 266, 0, 85, 4390, 0, 3096, 4968, 3214, 4302, 0, 4524, 1257, 3502, 4295, 1908, 2868, 3868, 1689, 5065, 1337, 5091, 5652, 2398, 5983, 5837, 4840, 3443, 3841, 2835, 3438, 1553, 1777, 7260, 2271, 5806, 3179, 2985, 7861, 2365, 7900, 2667, 5991, 6952, 6195, 3260, 6120, 7817, 6252, 6269, 7653, 6046, 9636, 6139, 8246, 8460, 6941, 7915, 11267, 5773, 7221, 9269, 9388, 10352, 11901, 7399, 8524, 9352, 7246, 8493, 11410, 7777, 14293, 11664, 9364, 13124, 11898, 13839, 9239, 13802, 14108, 13974, 12024, 14848, 14332, 15002, 14396, 15071, 15303, 17933, 15551, 18426, 16796, 17765, 12840, 15594, 16752, 18445, 15602, 18547, 16015, 15385, 20048, 16835, 19026, 19965, 21893, 18867, 20293, 19356, 17062, 19308, 21199, 19592, 22417, 20665, 21544, 23325, 23186, 24786, 19250, 19290, 22361, 22807, 24510, 26081, 24156, 22801, 22754, 25911, 26894, 25095, 23256, 26254, 23935, 27492, 26356, 25092, 24348, 26846, 26235, 29034, 27865, 29504, 25639, 28083, 30521, 28237, 30808, 27990, 31895, 32799, 28382, 33383, 30722, 34430, 33766, 34781, 32644, 32932, 31728, 36008, 30756, 35655, 33365, 33378, 34815, 33193, 32859, 32761, 37289, 33371, 34608, 35757, 36049, 38696, 38415, 38886, 38515, 38626, 40872, 38300, 35313, 35900, 40782, 40156, 39718, 41647, 43152, 38732, 41125, 40822, 38170, 40201, 44494, 44728, 44971, 42945, 42744, 39703, 43619, 41557, 46648, 43366, 41498, 47023, 41576, 46348, 44547, 46295, 48737, 45314, 43407, 47470, 47588, 45461, 48889, 47704, 48887, 47492, 48960, 46456, 50444, 45957, 49003, 50764, 52057, 51294, 46803, 51637, 48562, 52787, 53869, 52610, 48784, 52004, 51484, 49611, 54064, 54894, 50834, 53675, 52114, 55523, 54507, 54539, 51932, 55705, 55986, 56694, 53496, 54808, 57316, 55533, 55800, 55894, 56931, 58613, 56129, 56359, 55544, 59125, 59787, 54983, 56666, 54426, 58780, 58349, 54578, 57705, 59131, 59066, 60916, 60030, 59116, 57601, 60006, 59800, 61718, 61146, 58332, 57810, 62252, 56940, 62898, 62164, 60726, 63313, 62414, 60012, 59266, 61413, 60765, 58821, 62035, 58735, 63666, 62744, 63624, 63381, 59605, 61692, 63920, 59419, 61863, 61408, 60146, 61784, 65535, 63829, 64695, 63443, 65535, 63653, 63237, 61901, 63695, 61380, 62872, 61294, 62208, 64287, 65535, 64565, 62422, 65255, 65535, 63295, 65535, 62715, 65259, 65496, 65535, 62735, 63024, 65423, 63654, 63959, 62117, 65535, 65535, 65535, 62680, 63081, 65535, 64583, 65535, 64913, 65368, 65535, 63393, 65535, 65535, 64776, 63599, 62337, 63080, 65535, 65535, 63047, 64709, 65535, 62779, 63784, 65535, 64676, 65535, 64904, 65535, 65535, 63571, 65535, 64095, 65293, 65535, 65535, 65273, 61953, 62941, 62834, 64437, 65535, 65535, 63233, 65535, 65535, 61823, 63082, 65535, 65535, 63047, 62038, 62093, 63986, 62522, 64295, 60822, 65535, 61255, 62127, 65475, 64738, 65074, 64918, 62144, 61354, 64543, 64945, 60402, 62444, 61866, 62330, 59312, 61135, 61195, 62684, 60363, 58619, 61854, 57934, 57915, 57987, 59092, 58991, 62438, 58006, 61860, 57683, 57159, 58066, 57968, 62622, 57692, 55935, 58667, 59318, 60448, 58822, 55619, 56149, 57191, 57876, 56908, 56759, 57226, 59620, 54337, 58602, 59379, 58712, 59070, 54861, 53271, 56099, 55408, 54356, 54277, 53326, 58003, 52462, 51783, 56026, 56029, 51896, 54253, 50550, 54616, 51580, 54327, 50046, 50102, 53895, 52385, 52563, 53719, 50908, 50755, 51230, 51617, 48123, 52317, 47117, 49473, 52622, 47340, 50915, 46804, 50547, 48000, 51093, 46634, 48390, 46485, 44765, 49702, 44302, 47338, 44895, 46205, 42438, 45395, 44182, 46417, 42063, 43332, 41956, 45985, 43083, 43926, 41782, 43636, 41266, 45476, 42062, 39807, 40609, 41870, 40223, 43959, 38981, 37560, 37651, 37458, 40731, 41147, 40691, 39240, 39410, 35932, 39867, 36982, 35940, 38433, 39391, 35425, 36323, 34004, 32827, 37812, 35736, 33842, 35203, 31855, 33221, 37174, 35738, 33706, 34406, 34752, 35831, 33450, 31189, 34270, 28427, 33993, 28400, 28153, 28028, 31779, 30701, 28952, 29051, 31721, 28197, 25702, 27163, 27848, 24889, 28835, 30200, 29918, 27768, 27639, 29066, 28945, 28179, 25048, 22493, 25500, 27356, 21402, 26456, 24954, 22550, 23073, 23200, 20076, 21332, 22653, 19922, 22928, 23391, 24782, 18571, 20667, 22027, 23096, 21191, 21394, 17511, 21235, 20179, 19347, 16493, 15668, 20877, 18521, 17837, 17824, 17211, 15169, 16283, 15874, 16195, 14585, 17988, 15079, 18562, 14775, 17928, 15038, 14588, 11334, 14964, 14942, 14766, 11589, 15183, 11368, 15493, 10214, 12542, 11430, 15330, 12701, 14093, 10551, 12670, 9011, 10382, 12254, 9437, 9913, 12829, 11624, 8104, 7673, 10212, 6302, 11507, 10559, 5487, 5998, 10590, 6669, 5295, 10085, 7683, 7867, 7197, 9134, 6483, 6427, 5058, 4767, 4014, 7663, 6203, 8091, 6679, 3950, 2823, 2333, 2113, 7102, 2391, 2672, 6067, 3107, 4201, 5149, 5716, 3775, 2700, 6536, 3375, 6218, 3666, 2036, 2195, 1368, 5928, 5872, 3667, 1279, 969, 4952, 5126, 4818, 1227, 2682, 0, 1197, 1092, 0, 0, 3197, 607, 4510, 3449, 0, 3358, 0, 1080, 0, 488, 206, 0, 1857, 748, 1661, 0, 3513, 0, 2804, 487, 1692, 0, 0, 0, 2969, 0, 0, 0, 0, 2248, 240, 1909, 0, 3169, 0, 878, 1094, 1889, 0, 17, 0, 0, 3233, 0, 1519, 1663, 0, 1865, 379, 79, 666, 0, 0, 0, 1313, 2662, 3110, 3045, 1474, 1803, 1316, 2567, 0, 0, 2208, 0, 0, 984, 2350, 3501, 2679, 0, 3788, 718, 956, 1610, 0, 0, 2354, 4728, 0, 2917, 2942, 1262, 4126, 323, 2372, 3036, 5077, 1349, 2726, 5177, 5861, 3900, 752, 1786, 2875, 3614, 3215, 2181, 7424, 3764, 5563, 2179, 5190, 3061, 2130, 2252, 4441, 5951, 7573, 7508, 8426, 5363, 6250, 4618, 7594, 9796, 9906, 3851, 5566, 4690, 7693, 9878, 11022, 9495, 6652, 10382, 10911, 5973, 9450, 5901, 6619, 7135, 8352, 12918, 9663, 8065, 13317, 11757, 10685, 11120, 9728, 9628, 13169, 13450, 11058, 12288, 12115, 13383, 14129, 12387, 16227, 12114, 16072, 14133, 16257, 17037, 15764, 12861, 14793, 14059, 18148, 12604, 16384, 19011, 14385, 17122, 18852, 15917, 17224, 17925, 14792, 20706, 17133, 19056, 20073, 21721, 22000, 17951, 19628, 17347, 23440, 23258, 23791, 18967, 22572, 22397, 20637, 19469, 20632, 20626, 23176, 21693, 25434, 24318, 23809, 26368, 23388, 22758, 23244, 22819, 27105, 27251, 27689, 28450, 24923, 29213, 23556, 26025, 27988, 27807, 28213, 25000, 26084, 26804, 27966, 28746, 27523, 28305, 30256, 29203, 33469, 30461, 30011, 32458, 29174, 34499, 31928, 32918, 32979, 35948, 31383, 30972, 36362, 34068, 36686, 36569, 35540, 33279, 38486, 33418, 37908, 33547, 33556, 35289, 39435, 39017, 39226, 37795, 39475, 38332, 35464, 37318, 40588, 37523, 40428, 42406, 41738, 41116, 38462, 37520, 43370, 42335, 41418, 39363, 41673, 43401, 43850, 43563, 45481, 40932, 43960, 44408, 45026, 43106, 43156, 42343, 43956, 44958, 47909, 45190, 43189, 43555, 48768, 49645, 50072, 48139, 48046, 47769, 47607, 49968, 45494, 49760, 49042, 51796, 52513, 48987, 46745, 48485, 50519, 47723, 49841, 53135, 52180, 49935, 48389, 48940, 51325, 49532, 53903, 53057, 50141, 53694, 52150, 55452, 54522, 51452, 51392, 52275, 52903, 52584, 55631, 56264, 54669, 53000, 58298, 53850, 53450, 56589, 54065, 56259, 58175, 55521, 59937, 57352, 60099, 58588, 55745, 55249, 60368, 57956, 61541, 61832, 59528, 59827, 61677, 58120, 60101, 60976, 56763, 56631, 60691, 58861, 59056, 62485, 63305, 58654, 59626, 64058, 62151, 63200, 63593, 62720, 59625, 60072, 63646, 61559, 65054, 59970, 62597, 65374, 61305, 64744, 64842, 65535, 61544, 63643, 65490, 64792, 61393, 60421, 63831, 62088, 63636, 64458, 65535, 62472, 65535, 65535, 64354, 65535, 65535, 61912, 61712, 65535, 62222, 63439, 64946, 65535, 65535, 65535, 62271, 65535, 65535, 64108, 63671, 64588, 65535, 65352, 62929, 63628, 65391, 65086, 63621, 63621, 65163, 64963, 65535, 62382, 64311, 65078, 63468, 64875, 62585, 65535, 65535, 62493, 65136, 65535, 65440, 65117, 65535, 65535, 65535, 64607, 62375, 64800, 65535, 64383, 65535, 64878, 65218, 65535, 64341, 65215, 65535, 65535, 61713, 65368, 65535, 65535, 62582, 63419, 63050, 65535, 63069, 65535, 65535, 64251, 65535, 64375, 61703, 64990, 61664, 62081, 62284, 64466, 63251, 62008, 64786, 65476, 62540, 65535, 65416, 63890, 63534, 63537, 61169, 60006, 62711, 64659, 61097, 60239, 63293, 59417, 58638, 58952, 60703, 62911, 61112, 57736, 58113, 63722, 58508, 61435, 62608, 61267, 58610, 61133, 62013, 61210, 60919, 58142, 56822, 58424, 56516, 56777, 57095, 56038, 56301, 58438, 59430, 59021, 55301, 56842, 57687, 56206, 53922, 57220, 57648, 53502, 55493, 58282, 57085, 56181, 58370, 54372, 54858, 56248, 54311, 54452, 51356, 52130, 56600, 52816, 54178, 51567, 55790, 51093, 50250, 51665, 52148, 51887, 50828, 51752, 54212, 53828, 52465, 47082, 50271, 53068, 52174, 47143, 46558, 46985, 48962, 50635, 48557, 50508, 46427, 50525, 47296, 46821, 46524, 45603, 43646, 43667, 47838, 47557, 47978, 43575, 45845, 43554, 43425, 42652, 40628, 40888, 43120, 42084, 44059, 44728, 40886, 42258, 44204, 42438, 40860, 44229, 42358, 38174, 39595, 42033, 41792, 38082, 41809, 37352, 37670, 41632, 39792, 40032, 40794, 35631, 39019, 35730, 37907, 37392, 33289, 35725, 33645, 33872, 38291, 34190, 37723, 34979, 37268, 32248, 30759, 30374, 32498, 35855, 33946, 30377, 30704, 28702, 29439, 30997, 27641, 33487, 32596, 32766, 32143, 31473, 28481, 32127, 26409, 27869, 28482, 30270, 29040, 27368, 25050, 25609, 23652, 28158, 27216, 26967, 27735, 26992, 28276, 23735, 27097, 26189, 23779, 23169, 21125, 23611, 23703, 23735, 20668, 19699, 19132, 23695, 21068, 20297, 21464, 22736, 17741, 19362, 22267, 18300, 18889, 20105, 15990, 19581, 18158, 16852, 18088, 16451, 18740, 17935, 19674, 17302, 15998, 18656, 19083, 14097, 17976, 16718, 16242, 15703, 13456, 14868, 11224, 11113, 14842, 11862, 10370, 11536, 14855, 13444, 14656, 11086, 9704, 9553, 9698, 9459, 9441, 13231, 12640, 12877, 8425, 10937, 13385, 12711, 11018, 11574, 6790, 10635, 9254, 9102, 10292, 10537, 10829, 10521, 9924, 5482, 4904, 10108, 10049, 9483, 8141, 6923, 7505, 8375, 8767, 5129, 3556, 6544, 6602, 8283, 7130, 5193, 7968, 5324, 5114, 2163, 4168, 5972, 1949, 7123, 3461, 2496, 3867, 2998, 5579, 4005, 5762, 3296, 4517, 3554, 3540, 45, 0, 4260, 0, 2167, 1392, 1513, 3381, 0, 0, 1866, 4954, 0, 2190, 394, 3194, 0, 1229, 4406, 1752, 449, 227, 0, 858, 1034, 0, 2381, 1096, 0, 0, 1678, 1299, 15, 0, 498, 3453, 97, 0, 0, 0, 0, 0, 2825, 0, 1140, 0, 1883, 0, 2409, 0, 923, 1551, 601, 0, 1134, 163, 3246, 9, 0, 0, 1587, 0, 2855, 0, 242, 2530, 0, 0, 0, 0, 0, 2013, 1944, 2508, 0, 48, 2631, 1513, 648, 847, 1083, 416, 3855, 1006, 3328, 0, 3102, 3551, 1528, 0, 1492, 4345, 881, 2657, 0, 0, 0, 4753, 361, 2298, 0, 1709, 1181, 3977, 3549, 628, 1819, 659, 2701, 1162, 1410, 6856, 3787, 4270, 7144, 5195, 5505, 5028, 2693, 5674, 5632, 5715, 4334, 6228, 3666, 2826, 6045, 5277, 5598, 4915, 7449, 8969, 3759, 9797, 7755, 4140, 8696, 7427, 10759, 4708, 5464, 10391, 9200, 5975, 6440, 7108, 8274, 12316, 9670, 12183, 11420, 10976, 10942, 12015, 10276, 11101, 9716, 10601, 14527, 12019, 12211, 14801, 10200, 10197, 10787, 12208, 13310, 13782, 13838, 15569, 14070, 12290, 15751, 14325, 11898, 16050, 12077, 14931, 18564, 12883, 16031, 13448, 19667, 16606, 14851, 19873, 17075, 14629, 16846, 19185, 15283, 18105, 16007, 16735, 18431, 19763, 20001, 18824, 23438, 19832, 20879, 22943, 22100, 18915, 22670, 21372, 21615, 20536, 20935, 24009, 24121, 21946, 24510, 27385, 22957, 23800, 24599, 23900, 25776, 25794, 25236, 24739, 25839, 26934, 25687, 25632, 26783, 24820, 29969, 28471, 27464, 28874, 28746, 27319, 28542, 31257, 30385, 28285, 32904, 30409, 32989, 31428, 31875, 32214, 31146, 34268, 32723, 31025, 31119, 31308, 31970, 36787, 33440, 32478, 34947, 33440, 36960, 38496, 33439, 35809, 35105, 39151, 37314, 39962, 35749, 40146, 35695, 37998, 35857, 40682, 36984, 41802, 39519, 38151, 38673, 41135, 37971, 42396, 43376, 41617, 38901, 42582, 40037, 43189, 39936, 43854, 41388, 42364, 46143, 44206, 43269, 45399, 45399, 44079, 42235, 43361, 47881, 43133, 46946, 47030, 43734, 44329, 48405, 45761, 50185, 45036, 46957, 49901, 47225, 45593, 46851, 51577, 49828, 50366, 46895, 51901, 51871, 48315, 47827, 50550, 49082, 53213, 52337, 53358, 51331, 49379, 53848, 51417, 51273, 53955, 54947, 51849, 51786, 54870, 53802, 52191, 54007, 57262, 52461, 53792, 52652, 58434, 58634, 54145, 56937, 57382, 57153, 59592, 57362, 57229, 54497, 56763, 55213, 57277, 55634, 57252, 55309, 56388, 58054, 56539, 59815, 61634, 59379, 57781, 57989, 58173, 61347, 62115, 59146, 61975, 63354, 59217, 60256, 61843, 63735, 64428, 61070, 60966, 59165, 64582, 61290, 61628, 59054, 62293, 65492, 63727, 63433, 60627, 60663, 60372, 62204, 63599, 64475, 62071, 61351, 64311, 65535, 65535, 65535, 62642, 63318, 62834, 64622, 61009, 64829, 64344, 62886, 62034, 65535, 64367, 63913, 65535, 65535, 62038, 62335, 61945, 63554, 65422, 65535, 65074, 62764, 63040, 62856, 64190, 64286, 65535, 62894, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 64586, 65389, 65535, 64595, 63365, 65535, 65164, 65535, 65535, 62327, 65535, 64990, 64038, 63505, 65298, 65535, 65535, 65535, 63574, 64637, 65535, 64937, 65535, 65535, 64114, 63735, 65535, 64098, 63106, 65535, 65535, 65535, 64680, 65535, 62073, 63519, 65535, 65535, 62028, 65535, 63905, 62515, 64189, 61109, 63212, 64438, 60792, 63475, 62724, 63321, 63078, 60120, 63133, 60609, 60675, 65149, 60878, 61210, 59446, 65115, 60482, 62558, 59055, 62982, 63079, 62580, 60132, 62275, 63132, 61566, 63182, 60481, 61215, 61422, 62596, 59131, 60777, 62737, 58154, 62996, 59639, 61096, 61744, 62391, 62050, 61327, 59769, 60675, 60210, 58141, 56172, 55429, 59149, 58094, 60469, 57856, 54542, 58596, 57666, 54163, 57057, 56385, 55769, 52551, 53320, 57173, 52834, 55351, 51618, 53633, 51769, 57172, 56567, 54821, 56624, 53870, 52206, 55913, 55217, 54993, 50109, 51212, 51903, 50117, 49286, 49735, 48350, 47734, 50471, 49633, 52655, 46820, 46952, 47878, 47423, 51779, 48872, 47472, 47373, 49599, 47877, 50137, 49576, 45609, 47272, 46656, 49340, 45785, 47899, 45806, 47705, 41882, 42949, 46301, 41560, 45958, 43919, 42172, 42976, 44307, 43237, 41901, 40686, 43329, 43125, 43386, 41014, 42205, 41737, 37557, 37704, 36907, 42719, 42007, 41637, 38362, 41570, 38816, 40616, 37715, 34487, 38599, 37388, 33656, 37109, 36619, 36874, 36777, 38185, 34494, 35131, 36978, 36211, 34583, 33634, 36465, 36291, 32241, 34869, 35501, 33420, 33201, 31215, 32517, 32044, 29560, 27539, 29388, 27994, 31408, 30420, 31029, 27553, 28482, 27668, 28143, 25290, 29366, 28908, 29305, 25188, 29308, 24299, 24458, 28483, 22623, 27322, 28542, 24327, 27226, 26286, 27167, 22029, 23798, 20474, 24264, 20343, 23188, 20281, 23491, 24265, 21504, 23131, 20341, 17734, 23210, 18212, 21988, 18485, 18003, 21616, 21646, 21798, 20294, 21663, 17614, 20864, 16205, 17510, 15768, 19737, 18156, 14308, 16641, 17558, 18373, 18313, 17966, 17688, 13087, 16611, 12159, 12621, 14061, 14484, 12746, 12243, 16121, 14231, 14037, 15863, 10847, 14711, 13415, 12069, 14580, 11409, 11166, 10644, 8874, 9642, 8738, 11099, 12615, 9185, 11110, 12000, 7812, 6104, 6290, 7078, 9035, 6570, 5234, 7017, 5165, 6598, 6179, 10532, 8082, 5132, 4859, 7731, 7003, 3460, 7753, 6525, 3895, 3756, 6505, 3034, 7719, 6877, 3338, 2212, 7769, 5513, 2841, 6840, 2981, 7185, 1242, 2840, 3980, 4631, 1223, 4371, 5889, 2730, 795, 1059, 4626, 4804, 328, 1083, 813, 0, 3894, 966, 566, 1193, 0, 2671, 3243, 38, 1716, 2645, 2222, 2573, 2421, 627, 4089, 1746, 0, 1020, 0, 1137, 0, 0, 0, 0, 564, 0, 504, 1600, 3417, 3283, 0, 2819, 0, 1207, 0, 2934, 3168, 0, 0, 963, 0, 714, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1564, 0, 2015, 0, 1413, 589, 3542, 2710, 3489, 0, 0, 1146, 0, 3609, 1930, 0, 0, 0, 0, 1294, 126, 4293, 0, 4211, 0, 3635, 2191, 130, 1864, 3783, 3409, 4207, 5255, 1086, 2351, 4158, 910, 4850, 3988, 3875, 611, 2965, 4778, 3837, 321, 448, 2387, 3146, 6162, 1474, 934, 1521, 2336, 6288, 4767, 1581, 3638, 5033, 5218, 5067, 7229, 5810, 3992, 9177, 7699, 6324, 3211, 9502, 5385, 10118, 4552, 8569, 10010, 4829, 9270, 11144, 5387, 7208, 7413, 7242, 8293, 11119, 6431, 9686, 6758, 10953, 10180, 12822, 9129, 7838, 11019, 9329, 14099, 9809, 11327, 13529, 10142, 10522, 11891, 11827, 14306, 15526, 16273, 15811, 10664, 10817, 16551, 17314, 11390, 14092, 17286, 14580, 16794, 13687, 16495, 14412, 15075, 15826, 17018, 15406, 13970, 18747, 16161, 15479, 19025, 20105, 15823, 17960, 19654, 17506, 16775, 18983, 18044, 21832, 20947, 18712, 18795, 19310, 18216, 24950, 25188, 21959, 19412, 25127, 25835, 20078, 23441, 21635, 25260, 21914, 27497, 23030, 27342, 27942, 27477, 27785, 24715, 25516, 24745, 25225, 25919, 29646, 26573, 25566, 27177, 29270, 26299, 31883, 28882, 31299, 32572, 33231, 28738, 31713, 31927, 28438, 33844, 31360, 31620, 29347, 32175, 34798, 31030, 29935, 34956, 30789, 33247, 37275, 36603, 33507, 37634, 32517, 33667, 33735, 38760, 36544, 38839, 38372, 39661, 37315, 36145, 38456, 35882, 40719, 35858, 40390, 39125, 37156, 42344, 38484, 37817, 43736, 38037, 39246, 40640, 40216, 43404, 44933, 43581, 42622, 39903, 41749, 42652, 46701, 41934, 41116, 41179, 45886, 44309, 46027, 46064, 47623, 44835, 42814, 49447, 44092, 48349, 45170, 44818, 45892, 47957, 45524, 49942, 45807, 46743, 51688, 48790, 49028, 48044, 52642, 48680, 51578, 50756, 48939, 49610, 49602, 50962, 49757, 50127, 55013, 51269, 52872, 55393, 52791, 55905, 53185, 56136, 56907, 55743, 53127, 53371, 52388, 57179, 55278, 55332, 57575, 57982, 57061, 54626, 55653, 55551, 54874, 56762, 59573, 54295, 58991, 54251, 60426, 57282, 58711, 59583, 60743, 55337, 58338, 60964, 57517, 57881, 57434, 57805, 58453, 61421, 58043, 60625, 57594, 60977, 62495, 63232, 60488, 63497, 62366, 61149, 62717, 58039, 60133, 63280, 62855, 63895, 63369, 63394, 62021, 59024, 63686, 61405, 60382, 63941, 65160, 60107, 63564, 63565, 65473, 62848, 60194, 64545, 63798, 65535, 64985, 64690, 62035, 61181, 62873, 65535, 63285, 61969, 65535, 62643, 61910, 64716, 65535, 65535, 65535, 65535, 62269, 65167, 65535, 64564, 64430, 63975, 64463, 65535, 64988, 63996, 63264, 64269, 63725, 65535, 64046, 63525, 65535, 65535, 65535, 64862, 63328, 65535, 65535, 64627, 65535, 65535, 64733, 62556, 65535, 65535, 65535, 65535, 63073, 63343, 64488, 64292, 65535, 65535, 65535, 62888, 65535, 65535, 65535, 65535, 62782, 65535, 61890, 65535, 62003, 65535, 62815, 62620, 62925, 61452, 62239, 64546, 61710, 61137, 61306, 65535, 64291, 65535, 65535, 63007, 62003, 64049, 60720, 65535, 62599, 60630, 65535, 61934, 62204, 65535, 63289, 62967, 60661, 65522, 63536, 60527, 60727, 63924, 62875, 65129, 61711, 60900, 58901, 63777, 58336, 64377, 64014, 59625, 59889, 58489, 62424, 63069, 62602, 61512, 62215, 56610, 62756, 62056, 60184, 59645, 58654, 57032, 58886, 59631, 60635, 59810, 56575, 56994, 57881, 56952, 55528, 55872, 54806, 55042, 55818, 58687, 53305, 58782, 58105, 58324, 57542, 55671, 55095, 52093, 55077, 55762, 54711, 50799, 52428, 56186, 55410, 55117, 52456, 52008, 54923, 53694, 52117, 51431, 52752, 52326, 49322, 53270, 48957, 48084, 52798, 52283, 47146, 52547, 46923, 49031, 49128, 46554, 47878, 48106, 47467, 49969, 45480, 45554, 46344, 46833, 45239, 47330, 46846, 44061, 42526, 46187, 48352, 45320, 43395, 42171, 46474, 45525, 45823, 46583, 42528, 41268, 45517, 41195, 39065, 41961, 43946, 44480, 43071, 43794, 38747, 43401, 42098, 38072, 41157, 39197, 39107, 36776, 41519, 41088, 36464, 40828, 37342, 37050, 38334, 35742, 34671, 34126, 38630, 32770, 32284, 35920, 32995, 35264, 37356, 33203, 30764, 30743, 33834, 35504, 30902, 35828, 34477, 34323, 34279, 33547, 32227, 29549, 27933, 30796, 32609, 28434, 30313, 30156, 26544, 30463, 29414, 26774, 28043, 26515, 24454, 28800, 27682, 24923, 24816, 24131, 27960, 28356, 25761, 26698, 24981, 24598, 26072, 21661, 21816, 22508, 23694, 20206, 22088, 21510, 20097, 22105, 21232, 24320, 21746, 21738, 21885, 21658, 18871, 18501, 20687, 19883, 18954, 22012, 16381, 17022, 16735, 20855, 19086, 19338, 17147, 18921, 16887, 17087, 19030, 15300, 15638, 17445, 18138, 14384, 15069, 16680, 15673, 14030, 16662, 13233, 14115, 15886, 14427, 10793, 15276, 13745, 14366, 11412, 9339, 13417, 13977, 10906, 9419, 13566, 14116, 7690, 12882, 8442, 12909, 11750, 8622, 12376, 8830, 8080, 11702, 10991, 8874, 5762, 9571, 7457, 4920, 11098, 6076, 4428, 10603, 9385, 4960, 7163, 7424, 7962, 5641, 3110, 5123, 4391, 8553, 3127, 3509, 8106, 7980, 4300, 6667, 7680, 4318, 2589, 1824, 1553, 3276, 5986, 2406, 4530, 5023, 4513, 5919, 4390, 558, 5751, 6156, 2681, 5074, 4103, 0, 0, 2186, 826, 3007, 3958, 2586, 1077, 88, 241, 2391, 4728, 0, 2720, 0, 3575, 785, 2848, 1911, 0, 1606, 0, 2962, 3771, 0, 0, 2662, 0, 0, 0, 0, 0, 0, 2023, 0, 2922, 0, 0, 979, 2743, 0, 0, 2304, 1316, 3180, 1574, 667, 1269, 1343, 841, 3114, 0, 2429, 0, 763, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 2252, 1012, 0, 2866, 0, 0, 3307, 0, 2169, 0, 795, 2081, 2220, 1151, 0, 2097, 1547, 0, 3381, 0, 3596, 1963, 2862, 3863, 1533, 3989, 2764, 1336, 0, 0, 4458, 1794, 3209, 1050, 0, 5928, 851, 2290, 5074, 2210, 2216, 2537, 1810, 6510, 4181, 3973, 2956, 7152, 3341, 6354, 7921, 5190, 2620, 6387, 2426, 4658, 8192, 8793, 3359, 4977, 5373, 8369, 4645, 3800, 5031, 8063, 9151, 9230, 6888, 5883, 4847, 11020, 8330, 8158, 10520, 6128, 6385, 6311, 6108, 10951, 10014, 12602, 11642, 12759, 10362, 8250, 9421, 7897, 10500, 13047, 13677, 9509, 13298, 13259, 13826, 15582, 11168, 12911, 12584, 11467, 11385, 16101, 15229, 11426, 16174, 16964, 16545, 15083, 14230, 15831, 18717, 18763, 15391, 18759, 18734, 18767, 18299, 14315, 18825, 20220, 18575, 17182, 18720, 15766, 19379, 21896, 20545, 20549, 21419, 19944, 20102, 19614, 19686, 24498, 19847, 22485, 21501, 22854, 19966, 25918, 20862, 23390, 25424, 22415, 23308, 26465, 27124, 26520, 26711, 24560, 25545, 24983, 25203, 26640, 27621, 25874, 28644, 24906, 24510, 28879, 30548, 25623, 31915, 27132, 26831, 31069, 26706, 30831, 31749, 30959, 28259, 28230, 32526, 33987, 31315, 35358, 32501, 34009, 35651, 34619, 35995, 33145, 32421, 31438, 36802, 37737, 32773, 33218, 36474, 36587, 34070, 38737, 34335, 40053, 35268, 38943, 36677, 35896, 38295, 40997, 37329, 40991, 40755, 36835, 41810, 37729, 39592, 38714, 40464, 41103, 39346, 42196, 39339, 42970, 40260, 41595, 41818, 39944, 41101, 41687, 46710, 42771, 45910, 42752, 44586, 47246, 43455, 46482, 43959, 44634, 46627, 47183, 47847, 44105, 44894, 47002, 45070, 48002, 46435, 46960, 49324, 47221, 50307, 51788, 52802, 49803, 49834, 50840, 48409, 49188, 49088, 52513, 53631, 49706, 49924, 52047, 49058, 49430, 54917, 50836, 51974, 52717, 50395, 56063, 52879, 54797, 55394, 55460, 54744, 57088, 55677, 56475, 58488, 55405, 54260, 56479, 57717, 55576, 57304, 53901, 57537, 54615, 57294, 59129, 58116, 55353, 60282, 59528, 59030, 61092, 57236, 59392, 59119, 62317, 61667, 58175, 61245, 58490, 61283, 56880, 62576, 60746, 63528, 57669, 63401, 64129, 62063, 62806, 58478, 64703, 64091, 62488, 63186, 60465, 63397, 64790, 65237, 65258, 60660, 60637, 60884, 65535, 62007, 64184, 63633, 60968, 65535, 64444, 60338, 62945, 62964, 61195, 61959, 65032, 65002, 61648, 62678, 61784, 62684, 65535, 65535, 65535, 65535, 61745, 65420, 65535, 65535, 65535, 65535, 63406, 65535, 65502, 65535, 62690, 64018, 64800, 64878, 65535, 65348, 65535, 65535, 63883, 65535, 65535, 65535, 63620, 65535, 65535, 65535, 64845, 65535, 65535, 62883, 65535, 62551, 63872, 63356, 65535, 65535, 65535, 64042, 64507, 63069, 62567, 64116, 63802, 62667, 62773, 64281, 64646, 62585, 64946, 65535, 63834, 63354, 63383, 62029, 65535, 65135, 62300, 65535, 65535, 64867, 65535, 65535, 62356, 62276, 64146, 65215, 63501, 65535, 63284, 64766, 63994, 64710, 61846, 62420, 64053, 64650, 65074, 60498, 64632, 59684, 61651, 62513, 64059, 60380, 62578, 61341, 64829, 64981, 64182, 60764, 60551, 64456, 60463, 60276, 63305, 60280, 63530, 61318, 59896, 63460, 60905, 57120, 59902, 60408, 58090, 58321, 56810, 57315, 60297, 60590, 58917, 58369, 59713, 57417, 59368, 57169, 57208, 55466, 59837, 54082, 54697, 58048, 54928, 54164, 56627, 55372, 52657, 56482, 52154, 57553, 57445, 56949, 53157, 52639, 55717, 50797, 56127, 53680, 55883, 52689, 53223, 55387, 52203, 50470, 54609, 49322, 54311, 50590, 53501, 50355, 51578, 51815, 49095, 48180, 46779, 52849, 49121, 49155, 50897, 50354, 49245, 45529, 47214, 44711, 49137, 49680, 45433, 49599, 49801, 46362, 44775, 48083, 45357, 47747, 44413, 42962, 46874, 41812, 41413, 47105, 43665, 46289, 43410, 42883, 40841, 44690, 41739, 41412, 43271, 43413, 43253, 39966, 38503, 39394, 40441, 40317, 38130, 37774, 37412, 35849, 40550, 38754, 36498, 40704, 38032, 35373, 36515, 35689, 35733, 39237, 33251, 35229, 33239, 37068, 33183, 32843, 35546, 33834, 36675, 33971, 32859, 30187, 35556, 29440, 33811, 32297, 32630, 28461, 30894, 32854, 30951, 33260, 30810, 29521, 28141, 32252, 29803, 31059, 26591, 28903, 27126, 28127, 28978, 25444, 26418, 26137, 27287, 23996, 23924, 25581, 27287, 25742, 22840, 24991, 26119, 23825, 26505, 22131, 24466, 19886, 21628, 19429, 21515, 19123, 22106, 18663, 22395, 22622, 22964, 23163, 19515, 18199, 20164, 22597, 20287, 20936, 16954, 20563, 16019, 16041, 17804, 16593, 20064, 20333, 14114, 17346, 15200, 13868, 15455, 19047, 17942, 14648, 16602, 18197, 13407, 11894, 12758, 16445, 13818, 16431, 14845, 11397, 13026, 11823, 10673, 12281, 9928, 12587, 14711, 9849, 8781, 9566, 7765, 8689, 12424, 10025, 7739, 8442, 11224, 9834, 6220, 12447, 9731, 8387, 5682, 6378, 5091, 6331, 6440, 6114, 10212, 10181, 10192, 8803, 6843, 7230, 8125, 5024, 9409, 3820, 3445, 5141, 8790, 4166, 4615, 5133, 2844, 2073, 5642, 3253, 1920, 6452, 1802, 3323, 3543, 1906, 1280, 5114, 1192, 4672, 941, 4903, 1936, 5669, 5629, 4636, 1118, 125, 4441, 0, 617, 3914, 3134, 1611, 3946, 3069, 3451, 1437, 1615, 3678, 661, 0, 0, 2212, 1406, 2116, 2544, 0, 0, 16, 929, 1062, 550, 2797, 2969, 2120, 726, 2382, 0, 1133, 3045, 1851, 3478, 1824, 204, 993, 0, 1248, 0, 0, 2581, 0, 1703, 0, 438, 0, 1108, 2410, 2762, 142, 0, 1422, 0, 259, 0, 726, 0, 0, 463, 0, 0, 1273, 1286, 0, 0, 0, 0, 1538, 0, 1467, 0, 3750, 0, 3645, 1850, 110, 3068, 2572, 3126, 3901, 4104, 2717, 0, 2138, 4662, 2887, 4725, 196, 4386, 2032, 4347, 4152, 1464, 272, 3520, 0, 3481, 1622, 5279, 468, 4428, 160, 5677, 6668, 3330, 5753, 6771, 2824, 1412, 1108, 6619, 4527, 2681, 6208, 5804, 3417, 6356, 4455, 8417, 2761, 5503, 6356, 4067, 4864, 7159, 8070, 5991, 6517, 10031, 9591, 4910, 7496, 9069, 7468, 5217, 4935, 10247, 5928, 7623, 6751, 9342, 8483, 9992, 9963, 11503, 9855, 11040, 10355, 9611, 13477, 10786, 11655, 10365, 11701, 11812, 11770, 13703, 10454, 13963, 11627, 13597, 14713, 13862, 16298, 14611, 13431, 12271, 17626, 17041, 14273, 14930, 16912, 12739, 14751, 16267, 17529, 15155, 19525, 13910, 15739, 17195, 15712, 16214, 15079, 15624, 18896, 21502, 17284, 17561, 19993, 21167, 22650, 21291, 19412, 18697, 22409, 23583, 20787, 24712, 23050, 24449, 21834, 19637, 25519, 25509, 22265, 25860, 25806, 27557, 24083, 27033, 27741, 27660, 27270, 25332, 26172, 24917, 25701, 25887, 28562, 28583, 28485, 30465, 26146, 27735, 29796, 29165, 28792, 28054, 28413, 28433, 33045, 32429, 29275, 32885, 31811, 33203, 30399, 29773, 31126, 31784, 35459, 35936, 31074, 31159, 36873, 33967, 31730, 35431, 32669, 32560, 33586, 35850, 35797, 35770, 39661, 35019, 38263, 40461, 34761, 39072, 41126, 36423, 38746, 37780, 38514, 41239, 37703, 39567, 37915, 42498, 39431, 43441, 40078, 44311, 41858, 40321, 42448, 39838, 42302, 46102, 43087, 46726, 45995, 43417, 43576, 44336, 47231, 44075, 47424, 43056, 47812, 43744, 43730, 48546, 45619, 49561, 49682, 49821, 50696, 48255, 47267, 45826, 51967, 46286, 47672, 48177, 50395, 47624, 51504, 47649, 52518, 51198, 48691, 48022, 54198, 51540, 53867, 48828, 54297, 51436, 49463, 54140, 52057, 56098, 52418, 52787, 52466, 55612, 55225, 56309, 56066, 51722, 52373, 52391, 52868, 58532, 53124, 57551, 59049, 53558, 55043, 54108, 58392, 56978, 59439, 54541, 58505, 55600, 59412, 58209, 55681, 60361, 58819, 59251, 58023, 61164, 56364, 61965, 61765, 57260, 57872, 62813, 59326, 57374, 58077, 63742, 63328, 57881, 62579, 60046, 58754, 59429, 60734, 62512, 59776, 64432, 60139, 65295, 64038, 61555, 62083, 63906, 60286, 61064, 65535, 61604, 60925, 61681, 65535, 62116, 62907, 65341, 65535, 64644, 60773, 63643, 65535, 63485, 62040, 61596, 61678, 63266, 62044, 63949, 65535, 64106, 64368, 63338, 65535, 65535, 62213, 65535, 64899, 63005, 65535, 63651, 64206, 65058, 62362, 65535, 64548, 63742, 65535, 63614, 64720, 62466, 64535, 63923, 65535, 64770, 64610, 65535, 64573, 63750, 65535, 63907, 64439, 62433, 62563, 65535, 65535, 63732, 65535, 63711, 65535, 65202, 65535, 65535, 65535, 65156, 62037, 62671, 65535, 64246, 64639, 65535, 65262, 65535, 63148, 65535, 64786, 65515, 65535, 61490, 64578, 65535, 65535, 65271, 62710, 63555, 65535, 62855, 63305, 61860, 65535, 62895, 64684, 62843, 65535, 63550, 62678, 61220, 60380, 61267, 64464, 60372, 60162, 61290, 60247, 60793, 60184, 59267, 64505, 61515, 60900, 60783, 61235, 60740, 58221, 59605, 59659, 58351, 58162, 57531, 60573, 56897, 59716, 60894, 60869, 61576, 62573, 62401, 58088, 62044, 60091, 56182, 60173, 55157, 54928, 55630, 58888, 58072, 60478, 56199, 58317, 58183, 56285, 54386, 57849, 56289, 53889, 59041, 54012, 52903, 55761, 57459, 56691, 52471, 53299, 53826, 56898, 56549, 53604, 52853, 55229, 53742, 49746, 49662, 54168, 55134, 52830, 52603, 53625, 49441, 49243, 53212, 51620, 49209, 52923, 52575, 52226, 49142, 52236, 50723, 50787, 46824, 49086, 47202, 46276, 45827, 46070, 45821, 45574, 48496, 45061, 44750, 45599, 46270, 42894, 48412, 46426, 42666, 45287, 41095
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4a06      	ldr	r2, [pc, #24]	; (8008de0 <_Z16get_feature_datajjPf+0x2c>)
 8008dc6:	1899      	adds	r1, r3, r2
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f015 f94d 	bl	801e06e <memcpy>
    return 0;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000180 	.word	0x20000180

08008de4 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b0b4      	sub	sp, #208	; 0xd0
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f015 f834 	bl	801de64 <vsiprintf>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfcc      	ite	gt
 8008e02:	2301      	movgt	r3, #1
 8008e04:	2300      	movle	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00c      	beq.n	8008e26 <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f7 fa5d 	bl	80002d0 <strlen>
 8008e16:	4603      	mov	r3, r0
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f107 0108 	add.w	r1, r7, #8
 8008e1e:	23b4      	movs	r3, #180	; 0xb4
 8008e20:	4803      	ldr	r0, [pc, #12]	; (8008e30 <_Z6vprintPKcSt9__va_list+0x4c>)
 8008e22:	f008 ffe1 	bl	8011de8 <HAL_UART_Transmit>
    }
}
 8008e26:	bf00      	nop
 8008e28:	37d0      	adds	r7, #208	; 0xd0
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200053c4 	.word	0x200053c4

08008e34 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8008e34:	b40f      	push	{r0, r1, r2, r3}
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	6938      	ldr	r0, [r7, #16]
 8008e46:	f7ff ffcd 	bl	8008de4 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e54:	b004      	add	sp, #16
 8008e56:	4770      	bx	lr

08008e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b0c8      	sub	sp, #288	; 0x120
 8008e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e5e:	f007 fbce 	bl	80105fe <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8008e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fa53 	bl	8007312 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8008e6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  signal.get_data = &get_feature_data;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <main+0x94>)
 8008e76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008e7a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8008e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 f887 	bl	800af98 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e8a:	f000 f831 	bl	8008ef0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e8e:	f000 f8d5 	bl	800903c <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8008e92:	f000 f89f 	bl	8008fd4 <_ZL19MX_USART1_UART_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8008e96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008e9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	f015 f800 	bl	801deac <memset>
	  run_classifier(&signal, &result, false);
 8008eac:	4639      	mov	r1, r7
 8008eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff69 	bl	8008d8c <run_classifier>

	  // print the predictions
	  /*	EI_CLASSIFIER_LABEL_COUNT
	   *  result.classification[ix].value
	   * */
	  if (result.classification[0].value < result.classification[1].value) {
 8008eba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008ebe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008ec2:	ed93 7a03 	vldr	s14, [r3, #12]
 8008ec6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008eca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008ece:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eda:	d503      	bpl.n	8008ee4 <main+0x8c>
		 //ei_printf("triangulo\r\n");
		 //imprimimos la funcion:
		 func(false);
 8008edc:	2000      	movs	r0, #0
 8008ede:	f000 fd23 	bl	8009928 <_Z4funcb>
 8008ee2:	e7d8      	b.n	8008e96 <main+0x3e>
	  }else{
		//ei_printf("seno\r\n");
		//imprimimos la funcion:
		func(true);
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	f000 fd1f 	bl	8009928 <_Z4funcb>
	}

  }
 8008eea:	e7d4      	b.n	8008e96 <main+0x3e>
 8008eec:	08008db5 	.word	0x08008db5

08008ef0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b094      	sub	sp, #80	; 0x50
 8008ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ef6:	f107 0320 	add.w	r3, r7, #32
 8008efa:	2230      	movs	r2, #48	; 0x30
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f014 ffd4 	bl	801deac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	605a      	str	r2, [r3, #4]
 8008f0e:	609a      	str	r2, [r3, #8]
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f14:	4b2d      	ldr	r3, [pc, #180]	; (8008fcc <_Z18SystemClock_Configv+0xdc>)
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	4a2c      	ldr	r2, [pc, #176]	; (8008fcc <_Z18SystemClock_Configv+0xdc>)
 8008f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8008f20:	4b2a      	ldr	r3, [pc, #168]	; (8008fcc <_Z18SystemClock_Configv+0xdc>)
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f2c:	4b28      	ldr	r3, [pc, #160]	; (8008fd0 <_Z18SystemClock_Configv+0xe0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f34:	4a26      	ldr	r2, [pc, #152]	; (8008fd0 <_Z18SystemClock_Configv+0xe0>)
 8008f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <_Z18SystemClock_Configv+0xe0>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f44:	607b      	str	r3, [r7, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f50:	2310      	movs	r3, #16
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f54:	2302      	movs	r3, #2
 8008f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8008f5c:	230a      	movs	r3, #10
 8008f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8008f60:	23d2      	movs	r3, #210	; 0xd2
 8008f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008f64:	2302      	movs	r3, #2
 8008f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f6c:	f107 0320 	add.w	r3, r7, #32
 8008f70:	4618      	mov	r0, r3
 8008f72:	f007 fe71 	bl	8010c58 <HAL_RCC_OscConfig>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bf14      	ite	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8008f86:	f000 fddf 	bl	8009b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008f8a:	230f      	movs	r3, #15
 8008f8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008fa2:	f107 030c 	add.w	r3, r7, #12
 8008fa6:	2105      	movs	r1, #5
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f008 f8f9 	bl	80111a0 <HAL_RCC_ClockConfig>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bf14      	ite	ne
 8008fb4:	2301      	movne	r3, #1
 8008fb6:	2300      	moveq	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8008fbe:	f000 fdc3 	bl	8009b48 <Error_Handler>
  }
}
 8008fc2:	bf00      	nop
 8008fc4:	3750      	adds	r7, #80	; 0x50
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40023800 	.word	0x40023800
 8008fd0:	40007000 	.word	0x40007000

08008fd4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008fd8:	4b16      	ldr	r3, [pc, #88]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <_ZL19MX_USART1_UART_Initv+0x64>)
 8008fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008fe6:	4b13      	ldr	r3, [pc, #76]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008fec:	4b11      	ldr	r3, [pc, #68]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008ff2:	4b10      	ldr	r3, [pc, #64]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ffa:	220c      	movs	r2, #12
 8008ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009000:	2200      	movs	r2, #0
 8009002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009004:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009006:	2200      	movs	r2, #0
 8009008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 800900c:	2200      	movs	r2, #0
 800900e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009010:	4b08      	ldr	r3, [pc, #32]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009012:	2200      	movs	r2, #0
 8009014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009016:	4807      	ldr	r0, [pc, #28]	; (8009034 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009018:	f008 fe98 	bl	8011d4c <HAL_UART_Init>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	bf14      	ite	ne
 8009022:	2301      	movne	r3, #1
 8009024:	2300      	moveq	r3, #0
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 800902c:	f000 fd8c 	bl	8009b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009030:	bf00      	nop
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200053c4 	.word	0x200053c4
 8009038:	40011000 	.word	0x40011000

0800903c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b090      	sub	sp, #64	; 0x40
 8009040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	605a      	str	r2, [r3, #4]
 800904c:	609a      	str	r2, [r3, #8]
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009052:	4bad      	ldr	r3, [pc, #692]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	4aac      	ldr	r2, [pc, #688]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009058:	f043 0310 	orr.w	r3, r3, #16
 800905c:	6313      	str	r3, [r2, #48]	; 0x30
 800905e:	4baa      	ldr	r3, [pc, #680]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800906a:	4ba7      	ldr	r3, [pc, #668]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	4aa6      	ldr	r2, [pc, #664]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009074:	6313      	str	r3, [r2, #48]	; 0x30
 8009076:	4ba4      	ldr	r3, [pc, #656]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009082:	4ba1      	ldr	r3, [pc, #644]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009086:	4aa0      	ldr	r2, [pc, #640]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009088:	f043 0302 	orr.w	r3, r3, #2
 800908c:	6313      	str	r3, [r2, #48]	; 0x30
 800908e:	4b9e      	ldr	r3, [pc, #632]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	623b      	str	r3, [r7, #32]
 8009098:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800909a:	4b9b      	ldr	r3, [pc, #620]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 800909c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909e:	4a9a      	ldr	r2, [pc, #616]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090a0:	f043 0308 	orr.w	r3, r3, #8
 80090a4:	6313      	str	r3, [r2, #48]	; 0x30
 80090a6:	4b98      	ldr	r3, [pc, #608]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	61fb      	str	r3, [r7, #28]
 80090b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090b2:	4b95      	ldr	r3, [pc, #596]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	4a94      	ldr	r2, [pc, #592]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090b8:	f043 0304 	orr.w	r3, r3, #4
 80090bc:	6313      	str	r3, [r2, #48]	; 0x30
 80090be:	4b92      	ldr	r3, [pc, #584]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ca:	4b8f      	ldr	r3, [pc, #572]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	4a8e      	ldr	r2, [pc, #568]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6313      	str	r3, [r2, #48]	; 0x30
 80090d6:	4b8c      	ldr	r3, [pc, #560]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80090e2:	4b89      	ldr	r3, [pc, #548]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	4a88      	ldr	r2, [pc, #544]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090ec:	6313      	str	r3, [r2, #48]	; 0x30
 80090ee:	4b86      	ldr	r3, [pc, #536]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80090fa:	4b83      	ldr	r3, [pc, #524]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fe:	4a82      	ldr	r2, [pc, #520]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009104:	6313      	str	r3, [r2, #48]	; 0x30
 8009106:	4b80      	ldr	r3, [pc, #512]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009112:	4b7d      	ldr	r3, [pc, #500]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009116:	4a7c      	ldr	r2, [pc, #496]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800911c:	6313      	str	r3, [r2, #48]	; 0x30
 800911e:	4b7a      	ldr	r3, [pc, #488]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009126:	60bb      	str	r3, [r7, #8]
 8009128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800912a:	4b77      	ldr	r3, [pc, #476]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 800912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912e:	4a76      	ldr	r2, [pc, #472]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009130:	f043 0320 	orr.w	r3, r3, #32
 8009134:	6313      	str	r3, [r2, #48]	; 0x30
 8009136:	4b74      	ldr	r3, [pc, #464]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009142:	4b71      	ldr	r3, [pc, #452]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	4a70      	ldr	r2, [pc, #448]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	6313      	str	r3, [r2, #48]	; 0x30
 800914e:	4b6e      	ldr	r3, [pc, #440]	; (8009308 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800915a:	2201      	movs	r2, #1
 800915c:	2120      	movs	r1, #32
 800915e:	486b      	ldr	r0, [pc, #428]	; (800930c <_ZL12MX_GPIO_Initv+0x2d0>)
 8009160:	f007 fd60 	bl	8010c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8009164:	2200      	movs	r2, #0
 8009166:	f241 010c 	movw	r1, #4108	; 0x100c
 800916a:	4869      	ldr	r0, [pc, #420]	; (8009310 <_ZL12MX_GPIO_Initv+0x2d4>)
 800916c:	f007 fd5a 	bl	8010c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8009170:	2200      	movs	r2, #0
 8009172:	2108      	movs	r1, #8
 8009174:	4867      	ldr	r0, [pc, #412]	; (8009314 <_ZL12MX_GPIO_Initv+0x2d8>)
 8009176:	f007 fd55 	bl	8010c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800917a:	2200      	movs	r2, #0
 800917c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009180:	4865      	ldr	r0, [pc, #404]	; (8009318 <_ZL12MX_GPIO_Initv+0x2dc>)
 8009182:	f007 fd4f 	bl	8010c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8009186:	2200      	movs	r2, #0
 8009188:	21c8      	movs	r1, #200	; 0xc8
 800918a:	4864      	ldr	r0, [pc, #400]	; (800931c <_ZL12MX_GPIO_Initv+0x2e0>)
 800918c:	f007 fd4a 	bl	8010c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8009190:	2310      	movs	r3, #16
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009194:	2302      	movs	r3, #2
 8009196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009198:	2300      	movs	r3, #0
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800919c:	2300      	movs	r3, #0
 800919e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091a0:	230e      	movs	r3, #14
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80091a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091a8:	4619      	mov	r1, r3
 80091aa:	485d      	ldr	r0, [pc, #372]	; (8009320 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091ac:	f007 fb8e 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80091b0:	2308      	movs	r3, #8
 80091b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091b4:	2300      	movs	r3, #0
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80091bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091c0:	4619      	mov	r1, r3
 80091c2:	4857      	ldr	r0, [pc, #348]	; (8009320 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091c4:	f007 fb82 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80091c8:	2304      	movs	r3, #4
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091cc:	2302      	movs	r3, #2
 80091ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d4:	2303      	movs	r3, #3
 80091d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80091d8:	2309      	movs	r3, #9
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80091dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091e0:	4619      	mov	r1, r3
 80091e2:	484f      	ldr	r0, [pc, #316]	; (8009320 <_ZL12MX_GPIO_Initv+0x2e4>)
 80091e4:	f007 fb72 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80091e8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ee:	2302      	movs	r3, #2
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f6:	2303      	movs	r3, #3
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80091fa:	230b      	movs	r3, #11
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009202:	4619      	mov	r1, r3
 8009204:	4845      	ldr	r0, [pc, #276]	; (800931c <_ZL12MX_GPIO_Initv+0x2e0>)
 8009206:	f007 fb61 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800920a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009210:	2302      	movs	r3, #2
 8009212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009214:	2300      	movs	r3, #0
 8009216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009218:	2303      	movs	r3, #3
 800921a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800921c:	230c      	movs	r3, #12
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009224:	4619      	mov	r1, r3
 8009226:	483e      	ldr	r0, [pc, #248]	; (8009320 <_ZL12MX_GPIO_Initv+0x2e4>)
 8009228:	f007 fb50 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800922c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009232:	2312      	movs	r3, #18
 8009234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009236:	2300      	movs	r3, #0
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800923a:	2300      	movs	r3, #0
 800923c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800923e:	2304      	movs	r3, #4
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009246:	4619      	mov	r1, r3
 8009248:	4836      	ldr	r0, [pc, #216]	; (8009324 <_ZL12MX_GPIO_Initv+0x2e8>)
 800924a:	f007 fb3f 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800924e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8009252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009254:	2302      	movs	r3, #2
 8009256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009258:	2300      	movs	r3, #0
 800925a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800925c:	2303      	movs	r3, #3
 800925e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009260:	230a      	movs	r3, #10
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009268:	4619      	mov	r1, r3
 800926a:	482e      	ldr	r0, [pc, #184]	; (8009324 <_ZL12MX_GPIO_Initv+0x2e8>)
 800926c:	f007 fb2e 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8009270:	2310      	movs	r3, #16
 8009272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009274:	2302      	movs	r3, #2
 8009276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800927c:	2300      	movs	r3, #0
 800927e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009280:	2302      	movs	r3, #2
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8009284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009288:	4619      	mov	r1, r3
 800928a:	4826      	ldr	r0, [pc, #152]	; (8009324 <_ZL12MX_GPIO_Initv+0x2e8>)
 800928c:	f007 fb1e 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8009290:	2380      	movs	r3, #128	; 0x80
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009294:	2302      	movs	r3, #2
 8009296:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009298:	2300      	movs	r3, #0
 800929a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800929c:	2300      	movs	r3, #0
 800929e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80092a0:	2308      	movs	r3, #8
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80092a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092a8:	4619      	mov	r1, r3
 80092aa:	4818      	ldr	r0, [pc, #96]	; (800930c <_ZL12MX_GPIO_Initv+0x2d0>)
 80092ac:	f007 fb0e 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80092b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b6:	2302      	movs	r3, #2
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092be:	2303      	movs	r3, #3
 80092c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80092c2:	230c      	movs	r3, #12
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ca:	4619      	mov	r1, r3
 80092cc:	4816      	ldr	r0, [pc, #88]	; (8009328 <_ZL12MX_GPIO_Initv+0x2ec>)
 80092ce:	f007 fafd 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80092d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d8:	2302      	movs	r3, #2
 80092da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e0:	2300      	movs	r3, #0
 80092e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80092e4:	2301      	movs	r3, #1
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80092e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ec:	4619      	mov	r1, r3
 80092ee:	480f      	ldr	r0, [pc, #60]	; (800932c <_ZL12MX_GPIO_Initv+0x2f0>)
 80092f0:	f007 faec 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80092f4:	2360      	movs	r3, #96	; 0x60
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f8:	2302      	movs	r3, #2
 80092fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009300:	2300      	movs	r3, #0
 8009302:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009304:	230d      	movs	r3, #13
 8009306:	e013      	b.n	8009330 <_ZL12MX_GPIO_Initv+0x2f4>
 8009308:	40023800 	.word	0x40023800
 800930c:	40020c00 	.word	0x40020c00
 8009310:	40022000 	.word	0x40022000
 8009314:	40022800 	.word	0x40022800
 8009318:	40021c00 	.word	0x40021c00
 800931c:	40021800 	.word	0x40021800
 8009320:	40021000 	.word	0x40021000
 8009324:	40020400 	.word	0x40020400
 8009328:	40020800 	.word	0x40020800
 800932c:	40020000 	.word	0x40020000
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009336:	4619      	mov	r1, r3
 8009338:	48bc      	ldr	r0, [pc, #752]	; (800962c <_ZL12MX_GPIO_Initv+0x5f0>)
 800933a:	f007 fac7 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009342:	2302      	movs	r3, #2
 8009344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009346:	2300      	movs	r3, #0
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800934a:	2303      	movs	r3, #3
 800934c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800934e:	230a      	movs	r3, #10
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8009352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009356:	4619      	mov	r1, r3
 8009358:	48b5      	ldr	r0, [pc, #724]	; (8009630 <_ZL12MX_GPIO_Initv+0x5f4>)
 800935a:	f007 fab7 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800935e:	f248 1333 	movw	r3, #33075	; 0x8133
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009364:	2302      	movs	r3, #2
 8009366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009368:	2300      	movs	r3, #0
 800936a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800936c:	2303      	movs	r3, #3
 800936e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009370:	230c      	movs	r3, #12
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009378:	4619      	mov	r1, r3
 800937a:	48ae      	ldr	r0, [pc, #696]	; (8009634 <_ZL12MX_GPIO_Initv+0x5f8>)
 800937c:	f007 faa6 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8009380:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009384:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009386:	2302      	movs	r3, #2
 8009388:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800938a:	2300      	movs	r3, #0
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800938e:	2300      	movs	r3, #0
 8009390:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009392:	230e      	movs	r3, #14
 8009394:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800939a:	4619      	mov	r1, r3
 800939c:	48a6      	ldr	r0, [pc, #664]	; (8009638 <_ZL12MX_GPIO_Initv+0x5fc>)
 800939e:	f007 fa95 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80093a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093a8:	2300      	movs	r3, #0
 80093aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80093b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093b4:	4619      	mov	r1, r3
 80093b6:	48a0      	ldr	r0, [pc, #640]	; (8009638 <_ZL12MX_GPIO_Initv+0x5fc>)
 80093b8:	f007 fa88 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80093bc:	2340      	movs	r3, #64	; 0x40
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80093c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80093c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80093ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093ce:	4619      	mov	r1, r3
 80093d0:	489a      	ldr	r0, [pc, #616]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80093d2:	f007 fa7b 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80093d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093dc:	2302      	movs	r3, #2
 80093de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093e4:	2303      	movs	r3, #3
 80093e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80093e8:	230c      	movs	r3, #12
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093f0:	4619      	mov	r1, r3
 80093f2:	4892      	ldr	r0, [pc, #584]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80093f4:	f007 fa6a 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80093f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80093fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fe:	2302      	movs	r3, #2
 8009400:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009402:	2300      	movs	r3, #0
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009406:	2303      	movs	r3, #3
 8009408:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800940a:	230a      	movs	r3, #10
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800940e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009412:	4619      	mov	r1, r3
 8009414:	488a      	ldr	r0, [pc, #552]	; (8009640 <_ZL12MX_GPIO_Initv+0x604>)
 8009416:	f007 fa59 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800941a:	23f0      	movs	r3, #240	; 0xf0
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941e:	2302      	movs	r3, #2
 8009420:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009422:	2300      	movs	r3, #0
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009426:	2300      	movs	r3, #0
 8009428:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800942a:	230a      	movs	r3, #10
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800942e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009432:	4619      	mov	r1, r3
 8009434:	4883      	ldr	r0, [pc, #524]	; (8009644 <_ZL12MX_GPIO_Initv+0x608>)
 8009436:	f007 fa49 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800943a:	23f7      	movs	r3, #247	; 0xf7
 800943c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800943e:	2302      	movs	r3, #2
 8009440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009442:	2300      	movs	r3, #0
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009446:	2300      	movs	r3, #0
 8009448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800944a:	230e      	movs	r3, #14
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800944e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009452:	4619      	mov	r1, r3
 8009454:	487c      	ldr	r0, [pc, #496]	; (8009648 <_ZL12MX_GPIO_Initv+0x60c>)
 8009456:	f007 fa39 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800945a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009460:	2302      	movs	r3, #2
 8009462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009464:	2300      	movs	r3, #0
 8009466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009468:	2300      	movs	r3, #0
 800946a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800946c:	2309      	movs	r3, #9
 800946e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8009470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009474:	4619      	mov	r1, r3
 8009476:	486f      	ldr	r0, [pc, #444]	; (8009634 <_ZL12MX_GPIO_Initv+0x5f8>)
 8009478:	f007 fa28 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800947c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009482:	2302      	movs	r3, #2
 8009484:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009486:	2300      	movs	r3, #0
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800948a:	2300      	movs	r3, #0
 800948c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800948e:	230a      	movs	r3, #10
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8009492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009496:	4619      	mov	r1, r3
 8009498:	4866      	ldr	r0, [pc, #408]	; (8009634 <_ZL12MX_GPIO_Initv+0x5f8>)
 800949a:	f007 fa17 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800949e:	2320      	movs	r3, #32
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094a2:	2301      	movs	r3, #1
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80094ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094b2:	4619      	mov	r1, r3
 80094b4:	4861      	ldr	r0, [pc, #388]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80094b6:	f007 fa09 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80094ba:	2308      	movs	r3, #8
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094be:	2302      	movs	r3, #2
 80094c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80094ca:	230d      	movs	r3, #13
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80094ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094d2:	4619      	mov	r1, r3
 80094d4:	4859      	ldr	r0, [pc, #356]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80094d6:	f007 f9f9 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80094da:	f241 030c 	movw	r3, #4108	; 0x100c
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094e0:	2301      	movs	r3, #1
 80094e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e8:	2300      	movs	r3, #0
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80094ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094f0:	4619      	mov	r1, r3
 80094f2:	4854      	ldr	r0, [pc, #336]	; (8009644 <_ZL12MX_GPIO_Initv+0x608>)
 80094f4:	f007 f9ea 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80094f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094fe:	2300      	movs	r3, #0
 8009500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	2300      	movs	r3, #0
 8009504:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8009506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800950a:	4619      	mov	r1, r3
 800950c:	484f      	ldr	r0, [pc, #316]	; (800964c <_ZL12MX_GPIO_Initv+0x610>)
 800950e:	f007 f9dd 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8009512:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009518:	2302      	movs	r3, #2
 800951a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009520:	2303      	movs	r3, #3
 8009522:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009524:	230c      	movs	r3, #12
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800952c:	4619      	mov	r1, r3
 800952e:	4848      	ldr	r0, [pc, #288]	; (8009650 <_ZL12MX_GPIO_Initv+0x614>)
 8009530:	f007 f9cc 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009534:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800953a:	2302      	movs	r3, #2
 800953c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800953e:	2300      	movs	r3, #0
 8009540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009542:	2300      	movs	r3, #0
 8009544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009546:	230e      	movs	r3, #14
 8009548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800954a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800954e:	4619      	mov	r1, r3
 8009550:	483c      	ldr	r0, [pc, #240]	; (8009644 <_ZL12MX_GPIO_Initv+0x608>)
 8009552:	f007 f9bb 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8009556:	2308      	movs	r3, #8
 8009558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800955a:	2301      	movs	r3, #1
 800955c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955e:	2300      	movs	r3, #0
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009562:	2300      	movs	r3, #0
 8009564:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8009566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800956a:	4619      	mov	r1, r3
 800956c:	4836      	ldr	r0, [pc, #216]	; (8009648 <_ZL12MX_GPIO_Initv+0x60c>)
 800956e:	f007 f9ad 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8009572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009578:	2302      	movs	r3, #2
 800957a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957c:	2300      	movs	r3, #0
 800957e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009580:	2300      	movs	r3, #0
 8009582:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009584:	230d      	movs	r3, #13
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8009588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800958c:	4619      	mov	r1, r3
 800958e:	4829      	ldr	r0, [pc, #164]	; (8009634 <_ZL12MX_GPIO_Initv+0x5f8>)
 8009590:	f007 f99c 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009594:	2310      	movs	r3, #16
 8009596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009598:	2300      	movs	r3, #0
 800959a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959c:	2300      	movs	r3, #0
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80095a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a4:	4619      	mov	r1, r3
 80095a6:	4825      	ldr	r0, [pc, #148]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80095a8:	f007 f990 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80095ac:	2304      	movs	r3, #4
 80095ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095b0:	2302      	movs	r3, #2
 80095b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b4:	2300      	movs	r3, #0
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095b8:	2303      	movs	r3, #3
 80095ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80095bc:	230c      	movs	r3, #12
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80095c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095c4:	4619      	mov	r1, r3
 80095c6:	481d      	ldr	r0, [pc, #116]	; (800963c <_ZL12MX_GPIO_Initv+0x600>)
 80095c8:	f007 f980 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80095cc:	f248 0304 	movw	r3, #32772	; 0x8004
 80095d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095d2:	2300      	movs	r3, #0
 80095d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80095da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095de:	4619      	mov	r1, r3
 80095e0:	481c      	ldr	r0, [pc, #112]	; (8009654 <_ZL12MX_GPIO_Initv+0x618>)
 80095e2:	f007 f973 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80095e6:	2302      	movs	r3, #2
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095ea:	2302      	movs	r3, #2
 80095ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095f2:	2300      	movs	r3, #0
 80095f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80095f6:	2305      	movs	r3, #5
 80095f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80095fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fe:	4619      	mov	r1, r3
 8009600:	4810      	ldr	r0, [pc, #64]	; (8009644 <_ZL12MX_GPIO_Initv+0x608>)
 8009602:	f007 f963 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8009606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800960a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800960c:	2301      	movs	r3, #1
 800960e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009610:	2300      	movs	r3, #0
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009614:	2300      	movs	r3, #0
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800961c:	4619      	mov	r1, r3
 800961e:	480d      	ldr	r0, [pc, #52]	; (8009654 <_ZL12MX_GPIO_Initv+0x618>)
 8009620:	f007 f954 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8009624:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8009628:	e016      	b.n	8009658 <_ZL12MX_GPIO_Initv+0x61c>
 800962a:	bf00      	nop
 800962c:	40021000 	.word	0x40021000
 8009630:	40020400 	.word	0x40020400
 8009634:	40021800 	.word	0x40021800
 8009638:	40022400 	.word	0x40022400
 800963c:	40020c00 	.word	0x40020c00
 8009640:	40020000 	.word	0x40020000
 8009644:	40022000 	.word	0x40022000
 8009648:	40022800 	.word	0x40022800
 800964c:	40020800 	.word	0x40020800
 8009650:	40021400 	.word	0x40021400
 8009654:	40021c00 	.word	0x40021c00
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800965a:	2302      	movs	r3, #2
 800965c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800965e:	2300      	movs	r3, #0
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009662:	2300      	movs	r3, #0
 8009664:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009666:	230d      	movs	r3, #13
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800966a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800966e:	4619      	mov	r1, r3
 8009670:	48a5      	ldr	r0, [pc, #660]	; (8009908 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009672:	f007 f92b 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8009676:	2301      	movs	r3, #1
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800967a:	2302      	movs	r3, #2
 800967c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967e:	2300      	movs	r3, #0
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009682:	2300      	movs	r3, #0
 8009684:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009686:	2302      	movs	r3, #2
 8009688:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800968a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800968e:	4619      	mov	r1, r3
 8009690:	489e      	ldr	r0, [pc, #632]	; (800990c <_ZL12MX_GPIO_Initv+0x8d0>)
 8009692:	f007 f91b 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8009696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800969c:	2302      	movs	r3, #2
 800969e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80096a8:	2301      	movs	r3, #1
 80096aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80096ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096b0:	4619      	mov	r1, r3
 80096b2:	4897      	ldr	r0, [pc, #604]	; (8009910 <_ZL12MX_GPIO_Initv+0x8d4>)
 80096b4:	f007 f90a 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80096b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80096be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80096c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80096c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096cc:	4619      	mov	r1, r3
 80096ce:	488f      	ldr	r0, [pc, #572]	; (800990c <_ZL12MX_GPIO_Initv+0x8d0>)
 80096d0:	f007 f8fc 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80096d4:	23c0      	movs	r3, #192	; 0xc0
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096d8:	2302      	movs	r3, #2
 80096da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096dc:	2300      	movs	r3, #0
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e0:	2303      	movs	r3, #3
 80096e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80096e4:	2308      	movs	r3, #8
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096ec:	4619      	mov	r1, r3
 80096ee:	4889      	ldr	r0, [pc, #548]	; (8009914 <_ZL12MX_GPIO_Initv+0x8d8>)
 80096f0:	f007 f8ec 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80096f4:	2310      	movs	r3, #16
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f8:	2302      	movs	r3, #2
 80096fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009700:	2303      	movs	r3, #3
 8009702:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009704:	230a      	movs	r3, #10
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800970c:	4619      	mov	r1, r3
 800970e:	487e      	ldr	r0, [pc, #504]	; (8009908 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009710:	f007 f8dc 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8009714:	2328      	movs	r3, #40	; 0x28
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009718:	2302      	movs	r3, #2
 800971a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800971c:	2300      	movs	r3, #0
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009720:	2303      	movs	r3, #3
 8009722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009724:	230c      	movs	r3, #12
 8009726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800972c:	4619      	mov	r1, r3
 800972e:	4876      	ldr	r0, [pc, #472]	; (8009908 <_ZL12MX_GPIO_Initv+0x8cc>)
 8009730:	f007 f8cc 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009734:	23c8      	movs	r3, #200	; 0xc8
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009738:	2301      	movs	r3, #1
 800973a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973c:	2300      	movs	r3, #0
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009740:	2300      	movs	r3, #0
 8009742:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009748:	4619      	mov	r1, r3
 800974a:	4873      	ldr	r0, [pc, #460]	; (8009918 <_ZL12MX_GPIO_Initv+0x8dc>)
 800974c:	f007 f8be 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8009750:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009756:	2303      	movs	r3, #3
 8009758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975a:	2300      	movs	r3, #0
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800975e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009762:	4619      	mov	r1, r3
 8009764:	486d      	ldr	r0, [pc, #436]	; (800991c <_ZL12MX_GPIO_Initv+0x8e0>)
 8009766:	f007 f8b1 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800976a:	2308      	movs	r3, #8
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800976e:	2302      	movs	r3, #2
 8009770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009772:	2300      	movs	r3, #0
 8009774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009776:	2303      	movs	r3, #3
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800977a:	230c      	movs	r3, #12
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800977e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009782:	4619      	mov	r1, r3
 8009784:	4863      	ldr	r0, [pc, #396]	; (8009914 <_ZL12MX_GPIO_Initv+0x8d8>)
 8009786:	f007 f8a1 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800978a:	2305      	movs	r3, #5
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978e:	2302      	movs	r3, #2
 8009790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009796:	2303      	movs	r3, #3
 8009798:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800979a:	230a      	movs	r3, #10
 800979c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800979e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097a2:	4619      	mov	r1, r3
 80097a4:	485b      	ldr	r0, [pc, #364]	; (8009914 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097a6:	f007 f891 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80097aa:	2332      	movs	r3, #50	; 0x32
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ae:	2302      	movs	r3, #2
 80097b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b6:	2303      	movs	r3, #3
 80097b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097ba:	230b      	movs	r3, #11
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097c2:	4619      	mov	r1, r3
 80097c4:	4853      	ldr	r0, [pc, #332]	; (8009914 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097c6:	f007 f881 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80097ca:	2304      	movs	r3, #4
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ce:	2302      	movs	r3, #2
 80097d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d6:	2303      	movs	r3, #3
 80097d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80097da:	2309      	movs	r3, #9
 80097dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097e2:	4619      	mov	r1, r3
 80097e4:	484e      	ldr	r0, [pc, #312]	; (8009920 <_ZL12MX_GPIO_Initv+0x8e4>)
 80097e6:	f007 f871 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80097ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f0:	2302      	movs	r3, #2
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097f8:	2303      	movs	r3, #3
 80097fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80097fc:	2309      	movs	r3, #9
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009804:	4619      	mov	r1, r3
 8009806:	4847      	ldr	r0, [pc, #284]	; (8009924 <_ZL12MX_GPIO_Initv+0x8e8>)
 8009808:	f007 f860 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800980c:	2304      	movs	r3, #4
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009810:	2300      	movs	r3, #0
 8009812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009814:	2300      	movs	r3, #0
 8009816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8009818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800981c:	4619      	mov	r1, r3
 800981e:	483e      	ldr	r0, [pc, #248]	; (8009918 <_ZL12MX_GPIO_Initv+0x8dc>)
 8009820:	f007 f854 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009824:	2386      	movs	r3, #134	; 0x86
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009828:	2302      	movs	r3, #2
 800982a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982c:	2300      	movs	r3, #0
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009830:	2303      	movs	r3, #3
 8009832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009834:	230b      	movs	r3, #11
 8009836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800983c:	4619      	mov	r1, r3
 800983e:	4834      	ldr	r0, [pc, #208]	; (8009910 <_ZL12MX_GPIO_Initv+0x8d4>)
 8009840:	f007 f844 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8009844:	2301      	movs	r3, #1
 8009846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009848:	2303      	movs	r3, #3
 800984a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800984c:	2300      	movs	r3, #0
 800984e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8009850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009854:	4619      	mov	r1, r3
 8009856:	482e      	ldr	r0, [pc, #184]	; (8009910 <_ZL12MX_GPIO_Initv+0x8d4>)
 8009858:	f007 f838 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800985c:	2350      	movs	r3, #80	; 0x50
 800985e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009860:	2302      	movs	r3, #2
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009864:	2300      	movs	r3, #0
 8009866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009868:	2300      	movs	r3, #0
 800986a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800986c:	230d      	movs	r3, #13
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009874:	4619      	mov	r1, r3
 8009876:	4826      	ldr	r0, [pc, #152]	; (8009910 <_ZL12MX_GPIO_Initv+0x8d4>)
 8009878:	f007 f828 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800987c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009882:	2312      	movs	r3, #18
 8009884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800988a:	2303      	movs	r3, #3
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800988e:	2304      	movs	r3, #4
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009896:	4619      	mov	r1, r3
 8009898:	481b      	ldr	r0, [pc, #108]	; (8009908 <_ZL12MX_GPIO_Initv+0x8cc>)
 800989a:	f007 f817 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800989e:	2328      	movs	r3, #40	; 0x28
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098a2:	2302      	movs	r3, #2
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098aa:	2303      	movs	r3, #3
 80098ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80098ae:	230a      	movs	r3, #10
 80098b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098b6:	4619      	mov	r1, r3
 80098b8:	4815      	ldr	r0, [pc, #84]	; (8009910 <_ZL12MX_GPIO_Initv+0x8d4>)
 80098ba:	f007 f807 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098c2:	2302      	movs	r3, #2
 80098c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80098ce:	2309      	movs	r3, #9
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80098d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098d6:	4619      	mov	r1, r3
 80098d8:	480b      	ldr	r0, [pc, #44]	; (8009908 <_ZL12MX_GPIO_Initv+0x8cc>)
 80098da:	f006 fff7 	bl	80108cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80098de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e4:	2302      	movs	r3, #2
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ec:	2300      	movs	r3, #0
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80098f0:	2305      	movs	r3, #5
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098f8:	4619      	mov	r1, r3
 80098fa:	4809      	ldr	r0, [pc, #36]	; (8009920 <_ZL12MX_GPIO_Initv+0x8e4>)
 80098fc:	f006 ffe6 	bl	80108cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009900:	bf00      	nop
 8009902:	3740      	adds	r7, #64	; 0x40
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	40021c00 	.word	0x40021c00
 800990c:	40022000 	.word	0x40022000
 8009910:	40020000 	.word	0x40020000
 8009914:	40020800 	.word	0x40020800
 8009918:	40021800 	.word	0x40021800
 800991c:	40021400 	.word	0x40021400
 8009920:	40020400 	.word	0x40020400
 8009924:	40020c00 	.word	0x40020c00

08009928 <_Z4funcb>:

/* USER CODE BEGIN 4 */
void func(bool s){
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	; 0x38
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]

	char msg[5];//buffer de salida

	//Señal triangular
	if (s == false) {
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	2b00      	cmp	r3, #0
 8009936:	f040 8081 	bne.w	8009a3c <_Z4funcb+0x114>

		int sample;
		float t = 0;
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
		float y; // resultado

		for (sample = 0; sample < 127; ++sample){ //1000 muestras
 8009940:	2300      	movs	r3, #0
 8009942:	637b      	str	r3, [r7, #52]	; 0x34
 8009944:	e038      	b.n	80099b8 <_Z4funcb+0x90>

			y = 255.0*t;
 8009946:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800994a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009b30 <_Z4funcb+0x208>
 800994e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009952:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009956:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800995a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800995e:	ee17 3a90 	vmov	r3, s15
 8009962:	b29b      	uxth	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	4972      	ldr	r1, [pc, #456]	; (8009b34 <_Z4funcb+0x20c>)
 800996c:	4618      	mov	r0, r3
 800996e:	f014 f9ff 	bl	801dd70 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009972:	f107 030c 	add.w	r3, r7, #12
 8009976:	4618      	mov	r0, r3
 8009978:	f7f6 fcaa 	bl	80002d0 <strlen>
 800997c:	4603      	mov	r3, r0
 800997e:	b29a      	uxth	r2, r3
 8009980:	f107 010c 	add.w	r1, r7, #12
 8009984:	2364      	movs	r3, #100	; 0x64
 8009986:	486c      	ldr	r0, [pc, #432]	; (8009b38 <_Z4funcb+0x210>)
 8009988:	f008 fa2e 	bl	8011de8 <HAL_UART_Transmit>
			HAL_Delay(5);
 800998c:	2005      	movs	r0, #5
 800998e:	f006 fe93 	bl	80106b8 <HAL_Delay>

			t += 0.01;//avanzamos en el tiempo
 8009992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009994:	f7f6 fe08 	bl	80005a8 <__aeabi_f2d>
 8009998:	a35f      	add	r3, pc, #380	; (adr r3, 8009b18 <_Z4funcb+0x1f0>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f7f6 fca5 	bl	80002ec <__adddf3>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4610      	mov	r0, r2
 80099a8:	4619      	mov	r1, r3
 80099aa:	f7f7 f94d 	bl	8000c48 <__aeabi_d2f>
 80099ae:	4603      	mov	r3, r0
 80099b0:	633b      	str	r3, [r7, #48]	; 0x30
		for (sample = 0; sample < 127; ++sample){ //1000 muestras
 80099b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b4:	3301      	adds	r3, #1
 80099b6:	637b      	str	r3, [r7, #52]	; 0x34
 80099b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ba:	2b7e      	cmp	r3, #126	; 0x7e
 80099bc:	ddc3      	ble.n	8009946 <_Z4funcb+0x1e>
		}

		for (sample = 0; sample < 126; ++sample){ //1000 muestras
 80099be:	2300      	movs	r3, #0
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
 80099c2:	e038      	b.n	8009a36 <_Z4funcb+0x10e>
			y = 255.0*t;
 80099c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80099c8:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8009b30 <_Z4funcb+0x208>
 80099cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

			sprintf(msg,"%d\n\r",(uint16_t)y);
 80099d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80099d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099dc:	ee17 3a90 	vmov	r3, s15
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4952      	ldr	r1, [pc, #328]	; (8009b34 <_Z4funcb+0x20c>)
 80099ea:	4618      	mov	r0, r3
 80099ec:	f014 f9c0 	bl	801dd70 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 80099f0:	f107 030c 	add.w	r3, r7, #12
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f6 fc6b 	bl	80002d0 <strlen>
 80099fa:	4603      	mov	r3, r0
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	f107 010c 	add.w	r1, r7, #12
 8009a02:	2364      	movs	r3, #100	; 0x64
 8009a04:	484c      	ldr	r0, [pc, #304]	; (8009b38 <_Z4funcb+0x210>)
 8009a06:	f008 f9ef 	bl	8011de8 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009a0a:	2005      	movs	r0, #5
 8009a0c:	f006 fe54 	bl	80106b8 <HAL_Delay>

			t -= 0.01;//avanzamos en el tiempo
 8009a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a12:	f7f6 fdc9 	bl	80005a8 <__aeabi_f2d>
 8009a16:	a340      	add	r3, pc, #256	; (adr r3, 8009b18 <_Z4funcb+0x1f0>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fc64 	bl	80002e8 <__aeabi_dsub>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4610      	mov	r0, r2
 8009a26:	4619      	mov	r1, r3
 8009a28:	f7f7 f90e 	bl	8000c48 <__aeabi_d2f>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	633b      	str	r3, [r7, #48]	; 0x30
		for (sample = 0; sample < 126; ++sample){ //1000 muestras
 8009a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a32:	3301      	adds	r3, #1
 8009a34:	637b      	str	r3, [r7, #52]	; 0x34
 8009a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a38:	2b7d      	cmp	r3, #125	; 0x7d
 8009a3a:	ddc3      	ble.n	80099c4 <_Z4funcb+0x9c>
		}

	}

	if (s == true){
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d165      	bne.n	8009b0e <_Z4funcb+0x1e6>
		//senoidal
		float w = 2*3.1416; //velocidad angular
 8009a42:	4b3e      	ldr	r3, [pc, #248]	; (8009b3c <_Z4funcb+0x214>)
 8009a44:	623b      	str	r3, [r7, #32]
		float f = 10; //fecuecnia hz
 8009a46:	4b3e      	ldr	r3, [pc, #248]	; (8009b40 <_Z4funcb+0x218>)
 8009a48:	61fb      	str	r3, [r7, #28]
		float y; // resultado
		float a = 127.5; //amplitud
 8009a4a:	4b3e      	ldr	r3, [pc, #248]	; (8009b44 <_Z4funcb+0x21c>)
 8009a4c:	61bb      	str	r3, [r7, #24]

		int sample;
		float t = 0;
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009a54:	2300      	movs	r3, #0
 8009a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a58:	e055      	b.n	8009b06 <_Z4funcb+0x1de>

			y = a*sin(w*t*f) + 127.5;
 8009a5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8009a5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a72:	f7f7 fb7d 	bl	8001170 <_ZSt3sinf>
 8009a76:	eeb0 7a40 	vmov.f32	s14, s0
 8009a7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	ee17 0a90 	vmov	r0, s15
 8009a86:	f7f6 fd8f 	bl	80005a8 <__aeabi_f2d>
 8009a8a:	a325      	add	r3, pc, #148	; (adr r3, 8009b20 <_Z4funcb+0x1f8>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fc2c 	bl	80002ec <__adddf3>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f7f7 f8d4 	bl	8000c48 <__aeabi_d2f>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	617b      	str	r3, [r7, #20]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009aa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aac:	ee17 3a90 	vmov	r3, s15
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	491e      	ldr	r1, [pc, #120]	; (8009b34 <_Z4funcb+0x20c>)
 8009aba:	4618      	mov	r0, r3
 8009abc:	f014 f958 	bl	801dd70 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009ac0:	f107 030c 	add.w	r3, r7, #12
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7f6 fc03 	bl	80002d0 <strlen>
 8009aca:	4603      	mov	r3, r0
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	f107 010c 	add.w	r1, r7, #12
 8009ad2:	2364      	movs	r3, #100	; 0x64
 8009ad4:	4818      	ldr	r0, [pc, #96]	; (8009b38 <_Z4funcb+0x210>)
 8009ad6:	f008 f987 	bl	8011de8 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009ada:	2005      	movs	r0, #5
 8009adc:	f006 fdec 	bl	80106b8 <HAL_Delay>

			t += 0.001;//avanzamos en el tiempo
 8009ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae2:	f7f6 fd61 	bl	80005a8 <__aeabi_f2d>
 8009ae6:	a310      	add	r3, pc, #64	; (adr r3, 8009b28 <_Z4funcb+0x200>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fbfe 	bl	80002ec <__adddf3>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	4610      	mov	r0, r2
 8009af6:	4619      	mov	r1, r3
 8009af8:	f7f7 f8a6 	bl	8000c48 <__aeabi_d2f>
 8009afc:	4603      	mov	r3, r0
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	3301      	adds	r3, #1
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b0c:	dba5      	blt.n	8009a5a <_Z4funcb+0x132>
		}
	}

}
 8009b0e:	bf00      	nop
 8009b10:	3738      	adds	r7, #56	; 0x38
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	47ae147b 	.word	0x47ae147b
 8009b1c:	3f847ae1 	.word	0x3f847ae1
 8009b20:	00000000 	.word	0x00000000
 8009b24:	405fe000 	.word	0x405fe000
 8009b28:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b2c:	3f50624d 	.word	0x3f50624d
 8009b30:	437f0000 	.word	0x437f0000
 8009b34:	08021040 	.word	0x08021040
 8009b38:	200053c4 	.word	0x200053c4
 8009b3c:	40c90ff9 	.word	0x40c90ff9
 8009b40:	41200000 	.word	0x41200000
 8009b44:	42ff0000 	.word	0x42ff0000

08009b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b4c:	b672      	cpsid	i
}
 8009b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b50:	e7fe      	b.n	8009b50 <Error_Handler+0x8>

08009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	109b      	asrs	r3, r3, #2
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 fc1f 	bl	800b3c4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fc1a 	bl	800b3dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f001 fc39 	bl	800b422 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f001 fc6f 	bl	800b49a <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 fc1a 	bl	800b40a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8009bec:	f107 0310 	add.w	r3, r7, #16
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fc74 	bl	800b4e0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f107 0110 	add.w	r1, r7, #16
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7f7 fc93 	bl	800152c <_ZNKSt13_Bit_iteratorixEi>
 8009c06:	bf00      	nop
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ffed 	bl	8009c10 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c36:	4603      	mov	r3, r0
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f7ff ffe7 	bl	8009c10 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c42:	4603      	mov	r3, r0
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009c4a:	f107 030c 	add.w	r3, r7, #12
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff ffde 	bl	8009c10 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c54:	4603      	mov	r3, r0
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	601a      	str	r2, [r3, #0]
    }
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8009c64:	b5b0      	push	{r4, r5, r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	ed87 0a01 	vstr	s0, [r7, #4]
 8009c6e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7f6 fc99 	bl	80005a8 <__aeabi_f2d>
 8009c76:	4604      	mov	r4, r0
 8009c78:	460d      	mov	r5, r1
 8009c7a:	6838      	ldr	r0, [r7, #0]
 8009c7c:	f7f6 fc82 	bl	8000584 <__aeabi_i2d>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	ec43 2b11 	vmov	d1, r2, r3
 8009c88:	ec45 4b10 	vmov	d0, r4, r5
 8009c8c:	f00f fdb2 	bl	80197f4 <pow>
 8009c90:	eeb0 7a40 	vmov.f32	s14, s0
 8009c94:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009c98:	eeb0 0a47 	vmov.f32	s0, s14
 8009c9c:	eef0 0a67 	vmov.f32	s1, s15
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bdb0      	pop	{r4, r5, r7, pc}

08009ca6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	60f8      	str	r0, [r7, #12]
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fc4d 	bl	800b558 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009cd4:	68fc      	ldr	r4, [r7, #12]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 fc33 	bl	800b542 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff ffdf 	bl	8009ca6 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd90      	pop	{r4, r7, pc}

08009cf2 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8009cf2:	b590      	push	{r4, r7, lr}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 fc41 	bl	800b584 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8009d02:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 fc46 	bl	800b59e <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8009d12:	4603      	mov	r3, r0
 8009d14:	681c      	ldr	r4, [r3, #0]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f001 fa51 	bl	800b1be <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	47a0      	blx	r4
	__ptr = pointer();
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	601a      	str	r2, [r3, #0]
      }
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd90      	pop	{r4, r7, pc}

08009d34 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8009d3e:	687c      	ldr	r4, [r7, #4]
 8009d40:	463b      	mov	r3, r7
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 fa3b 	bl	800b1be <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 fc32 	bl	800b5b8 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd90      	pop	{r4, r7, pc}

08009d5c <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	ed93 7a00 	vldr	s14, [r3]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	edd3 7a00 	vldr	s15, [r3]
 8009d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7a:	d501      	bpl.n	8009d80 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	e000      	b.n	8009d82 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8009d80:	687b      	ldr	r3, [r7, #4]
    }
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	f107 030c 	add.w	r3, r7, #12
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fc29 	bl	800b5f6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	1d1a      	adds	r2, r3, #4
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 fc18 	bl	800b5f6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fc1b 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009de0:	4603      	mov	r3, r0
 8009de2:	681c      	ldr	r4, [r3, #0]
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f001 fc16 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009dea:	4603      	mov	r3, r0
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	429c      	cmp	r4, r3
 8009df0:	bf14      	ite	ne
 8009df2:	2301      	movne	r3, #1
 8009df4:	2300      	moveq	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd90      	pop	{r4, r7, pc}

08009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	1d1a      	adds	r2, r3, #4
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	601a      	str	r2, [r3, #0]
	return *this;
 8009e12:	687b      	ldr	r3, [r7, #4]
      }
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8009e38:	b590      	push	{r4, r7, lr}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8009e44:	68fc      	ldr	r4, [r7, #12]
 8009e46:	6879      	ldr	r1, [r7, #4]
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f001 fbef 	bl	800b62c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	4619      	mov	r1, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	f001 fc07 	bl	800b668 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f001 fc17 	bl	800b690 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd90      	pop	{r4, r7, pc}

08009e6c <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009e6c:	b5b0      	push	{r4, r5, r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681c      	ldr	r4, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 fc1e 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009e84:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009e86:	461a      	mov	r2, r3
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f001 fc23 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      }
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f815 	bl	8009ec2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3708      	adds	r7, #8
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bdb0      	pop	{r4, r5, r7, pc}

08009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
      }
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009eda:	461a      	mov	r2, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 fc15 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      }
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	f107 030c 	add.w	r3, r7, #12
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f001 fc18 	bl	800b732 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	1d1a      	adds	r2, r3, #4
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 fc07 	bl	800b732 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009f2e:	b590      	push	{r4, r7, lr}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 fc0a 	bl	800b752 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	681c      	ldr	r4, [r3, #0]
 8009f42:	6838      	ldr	r0, [r7, #0]
 8009f44:	f001 fc05 	bl	800b752 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	bf14      	ite	ne
 8009f50:	2301      	movne	r3, #1
 8009f52:	2300      	moveq	r3, #0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	4618      	mov	r0, r3
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}

08009f5e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	601a      	str	r2, [r3, #0]
	return *this;
 8009f70:	687b      	ldr	r3, [r7, #4]
      }
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009f96:	b590      	push	{r4, r7, lr}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8009fa0:	f7f7 f922 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f001 fbdd 	bl	800b768 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd90      	pop	{r4, r7, pc}

08009fb6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b082      	sub	sp, #8
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f9fd 	bl	800b3c4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 8009fde:	f7f7 f903 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 8009fe2:	4622      	mov	r2, r4
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fc10 	bl	800b80c <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 8009fec:	4603      	mov	r3, r0
    }
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd90      	pop	{r4, r7, pc}

08009ff6 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009ff6:	b5b0      	push	{r4, r5, r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 fc53 	bl	800b8b4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800a00e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a010:	461a      	mov	r2, r3
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	f001 fc58 	bl	800b8ca <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>
      }
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f805 	bl	800a02c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bdb0      	pop	{r4, r5, r7, pc}

0800a02c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	1ad3      	subs	r3, r2, r3
 800a042:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800a044:	461a      	mov	r2, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 fc5a 	bl	800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>
      }
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4618      	mov	r0, r3
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
      }
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>:
      vector(const vector& __x)
 800a076:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800a080:	687c      	ldr	r4, [r7, #4]
 800a082:	6838      	ldr	r0, [r7, #0]
 800a084:	f7ff fd65 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a088:	4605      	mov	r5, r0
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 fc56 	bl	800b93e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a092:	4603      	mov	r3, r0
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fc46 	bl	800b926 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f001 fae0 	bl	800b668 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a0a8:	6838      	ldr	r0, [r7, #0]
 800a0aa:	f7ff ff1f 	bl	8009eec <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	6838      	ldr	r0, [r7, #0]
 800a0b2:	f7ff ff2b 	bl	8009f0c <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 fafe 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a0c4:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f001 fc42 	bl	800b954 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>
 800a0d0:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	605a      	str	r2, [r3, #4]
      }
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a0e0 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7f7 f8cf 	bl	8001296 <_ZNKSt14_Function_base8_M_emptyEv>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 800a0fe:	f00f fb6b 	bl	80197d8 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68dc      	ldr	r4, [r3, #12]
 800a106:	68fd      	ldr	r5, [r7, #12]
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fc52 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a112:	4606      	mov	r6, r0
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	4618      	mov	r0, r3
 800a118:	f001 fc4d 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a11c:	4680      	mov	r8, r0
 800a11e:	463b      	mov	r3, r7
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fc53 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a126:	4603      	mov	r3, r0
 800a128:	4642      	mov	r2, r8
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47a0      	blx	r4
 800a130:	4603      	mov	r3, r0
      }
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a13c <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7f6 fa1d 	bl	8000584 <__aeabi_i2d>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	ec43 2b17 	vmov	d7, r2, r3
 800a152:	eeb0 0a47 	vmov.f32	s0, s14
 800a156:	eef0 0a67 	vmov.f32	s1, s15
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f001 fc39 	bl	800b9e2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a192:	461a      	mov	r2, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 fc38 	bl	800ba0a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a1a4:	b5b0      	push	{r4, r5, r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681c      	ldr	r4, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fc3a 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800a1bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f001 fc3f 	bl	800ba46 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      }
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7ff ffd5 	bl	800a17a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bdb0      	pop	{r4, r5, r7, pc}

0800a1da <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d00d      	beq.n	800a20c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f001 fc3f 	bl	800ba7c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f103 0208 	add.w	r2, r3, #8
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800a20a:	e008      	b.n	800a21e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f81a 	bl	800a246 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800a212:	4603      	mov	r3, r0
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 fc59 	bl	800bad0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800a21e:	bf00      	nop
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	f107 030c 	add.w	r3, r7, #12
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f001 fd06 	bl	800bc48 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	1d1a      	adds	r2, r3, #4
 800a252:	f107 030c 	add.w	r3, r7, #12
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f001 fcf5 	bl	800bc48 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	713a      	strb	r2, [r7, #4]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800a274:	4618      	mov	r0, r3
 800a276:	f001 fcf7 	bl	800bc68 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800a27a:	4622      	mov	r2, r4
 800a27c:	68b9      	ldr	r1, [r7, #8]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f001 fd05 	bl	800bc8e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800a284:	bf00      	nop
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd90      	pop	{r4, r7, pc}

0800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	10db      	asrs	r3, r3, #3
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	4413      	add	r3, r2
      }
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
				__gnu_cxx::__ops::__iter_less_iter());
 800a2d6:	f7f6 ff87 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800a2da:	4622      	mov	r2, r4
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 fd02 	bl	800bce8 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a2e4:	4603      	mov	r3, r0
    }
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd90      	pop	{r4, r7, pc}

0800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fc2a 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a2fe:	4602      	mov	r2, r0
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	4293      	cmp	r3, r2
 800a304:	bf8c      	ite	hi
 800a306:	2301      	movhi	r3, #1
 800a308:	2300      	movls	r3, #0
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00a      	beq.n	800a326 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fc1e 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a316:	4602      	mov	r2, r0
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	1a9b      	subs	r3, r3, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f001 fd18 	bl	800bd54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 800a324:	e014      	b.n	800a350 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	else if (__new_size < size())
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff fc13 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a32c:	4602      	mov	r2, r0
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	4293      	cmp	r3, r2
 800a332:	bf34      	ite	cc
 800a334:	2301      	movcc	r3, #1
 800a336:	2300      	movcs	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d008      	beq.n	800a350 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f001 fdc0 	bl	800bed0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
      }
 800a350:	bf00      	nop
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>:
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f805 	bl	800a376 <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>
 800a36c:	4603      	mov	r3, r0
      }
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	00db      	lsls	r3, r3, #3
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a39a:	b084      	sub	sp, #16
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	f107 0418 	add.w	r4, r7, #24
 800a3a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a3aa:	2306      	movs	r3, #6
 800a3ac:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a3b2:	f7ff ff9c 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a3ba:	f7ff ff98 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a3be:	2300      	movs	r3, #0
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	e02a      	b.n	800a41a <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	f107 0018 	add.w	r0, r7, #24
 800a3ca:	f7ff ffc5 	bl	800a358 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	f001 fd9b 	bl	800bf12 <_ZNKSt5arrayIfLj6EEixEj>
 800a3dc:	4604      	mov	r4, r0
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a3e2:	f7ff fd5e 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	f107 0018 	add.w	r0, r7, #24
 800a3f2:	f7ff ffb1 	bl	800a358 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	4619      	mov	r1, r3
 800a400:	f001 fd87 	bl	800bf12 <_ZNKSt5arrayIfLj6EEixEj>
 800a404:	4604      	mov	r4, r0
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a40a:	f7ff fd4a 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a40e:	4602      	mov	r2, r0
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3301      	adds	r3, #1
 800a418:	607b      	str	r3, [r7, #4]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d3d0      	bcc.n	800a3c4 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a42e:	b004      	add	sp, #16
 800a430:	4770      	bx	lr

0800a432 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f805 	bl	800a450 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>
 800a446:	4603      	mov	r3, r0
      }
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4413      	add	r3, r2
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a474:	b084      	sub	sp, #16
 800a476:	b590      	push	{r4, r7, lr}
 800a478:	b083      	sub	sp, #12
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	f107 0418 	add.w	r4, r7, #24
 800a480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a484:	230a      	movs	r3, #10
 800a486:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a48c:	f7ff ff2f 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a494:	f7ff ff2b 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a498:	2300      	movs	r3, #0
 800a49a:	607b      	str	r3, [r7, #4]
 800a49c:	e02a      	b.n	800a4f4 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a49e:	2100      	movs	r1, #0
 800a4a0:	f107 0018 	add.w	r0, r7, #24
 800a4a4:	f7ff ffc5 	bl	800a432 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f001 fd3d 	bl	800bf30 <_ZNKSt5arrayIfLj10EEixEj>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a4bc:	f7ff fcf1 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	f107 0018 	add.w	r0, r7, #24
 800a4cc:	f7ff ffb1 	bl	800a432 <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f001 fd29 	bl	800bf30 <_ZNKSt5arrayIfLj10EEixEj>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4e4:	f7ff fcdd 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	607b      	str	r3, [r7, #4]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d3d0      	bcc.n	800a49e <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a4fc:	bf00      	nop
 800a4fe:	bf00      	nop
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a508:	b004      	add	sp, #16
 800a50a:	4770      	bx	lr

0800a50c <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f805 	bl	800a52a <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>
 800a520:	4603      	mov	r3, r0
      }
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a534:	683a      	ldr	r2, [r7, #0]
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	00db      	lsls	r3, r3, #3
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a54e:	b084      	sub	sp, #16
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	f107 0418 	add.w	r4, r7, #24
 800a55a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a55e:	230e      	movs	r3, #14
 800a560:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a568:	f7ff fec1 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a572:	f7ff febc 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a576:	2300      	movs	r3, #0
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	e02c      	b.n	800a5d6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a57c:	2100      	movs	r1, #0
 800a57e:	f107 0018 	add.w	r0, r7, #24
 800a582:	f7ff ffc3 	bl	800a50c <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	3b01      	subs	r3, #1
 800a58e:	4619      	mov	r1, r3
 800a590:	f001 fcdd 	bl	800bf4e <_ZNKSt5arrayIfLj14EEixEj>
 800a594:	4604      	mov	r4, r0
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a59c:	f7ff fc81 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	f107 0018 	add.w	r0, r7, #24
 800a5ac:	f7ff ffae 	bl	800a50c <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f001 fcc8 	bl	800bf4e <_ZNKSt5arrayIfLj14EEixEj>
 800a5be:	4604      	mov	r4, r0
 800a5c0:	6879      	ldr	r1, [r7, #4]
 800a5c2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a5c6:	f7ff fc6c 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	607b      	str	r3, [r7, #4]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d3ce      	bcc.n	800a57c <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a5ea:	b004      	add	sp, #16
 800a5ec:	4770      	bx	lr

0800a5ee <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 f805 	bl	800a60c <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>
 800a602:	4603      	mov	r3, r0
      }
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	4413      	add	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a630:	b084      	sub	sp, #16
 800a632:	b590      	push	{r4, r7, lr}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	f107 0418 	add.w	r4, r7, #24
 800a63c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a640:	2312      	movs	r3, #18
 800a642:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a64a:	f7ff fe50 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a654:	f7ff fe4b 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a658:	2300      	movs	r3, #0
 800a65a:	607b      	str	r3, [r7, #4]
 800a65c:	e02c      	b.n	800a6b8 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a65e:	2100      	movs	r1, #0
 800a660:	f107 0018 	add.w	r0, r7, #24
 800a664:	f7ff ffc3 	bl	800a5ee <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	3b01      	subs	r3, #1
 800a670:	4619      	mov	r1, r3
 800a672:	f001 fc7b 	bl	800bf6c <_ZNKSt5arrayIfLj18EEixEj>
 800a676:	4604      	mov	r4, r0
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a67e:	f7ff fc10 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a682:	4602      	mov	r2, r0
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a688:	2101      	movs	r1, #1
 800a68a:	f107 0018 	add.w	r0, r7, #24
 800a68e:	f7ff ffae 	bl	800a5ee <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	3b01      	subs	r3, #1
 800a69a:	4619      	mov	r1, r3
 800a69c:	f001 fc66 	bl	800bf6c <_ZNKSt5arrayIfLj18EEixEj>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a6a8:	f7ff fbfb 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d3ce      	bcc.n	800a65e <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a6cc:	b004      	add	sp, #16
 800a6ce:	4770      	bx	lr

0800a6d0 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f805 	bl	800a6ee <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>
 800a6e4:	4603      	mov	r3, r0
      }
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a6ee:	b480      	push	{r7}
 800a6f0:	b083      	sub	sp, #12
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	011b      	lsls	r3, r3, #4
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4413      	add	r3, r2
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a70c:	b084      	sub	sp, #16
 800a70e:	b590      	push	{r4, r7, lr}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	f107 0418 	add.w	r4, r7, #24
 800a718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a71c:	2304      	movs	r3, #4
 800a71e:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a724:	f7ff fde3 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a72c:	f7ff fddf 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a730:	2300      	movs	r3, #0
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e02a      	b.n	800a78c <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a736:	2100      	movs	r1, #0
 800a738:	f107 0018 	add.w	r0, r7, #24
 800a73c:	f7ff ffc8 	bl	800a6d0 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	3b01      	subs	r3, #1
 800a748:	4619      	mov	r1, r3
 800a74a:	f001 fc1e 	bl	800bf8a <_ZNKSt5arrayIfLj4EEixEj>
 800a74e:	4604      	mov	r4, r0
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a754:	f7ff fba5 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a758:	4602      	mov	r2, r0
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a75e:	2101      	movs	r1, #1
 800a760:	f107 0018 	add.w	r0, r7, #24
 800a764:	f7ff ffb4 	bl	800a6d0 <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	3b01      	subs	r3, #1
 800a770:	4619      	mov	r1, r3
 800a772:	f001 fc0a 	bl	800bf8a <_ZNKSt5arrayIfLj4EEixEj>
 800a776:	4604      	mov	r4, r0
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a77c:	f7ff fb91 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a780:	4602      	mov	r2, r0
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3301      	adds	r3, #1
 800a78a:	607b      	str	r3, [r7, #4]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d3d0      	bcc.n	800a736 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a794:	bf00      	nop
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a7a0:	b004      	add	sp, #16
 800a7a2:	4770      	bx	lr

0800a7a4 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f805 	bl	800a7c2 <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>
 800a7b8:	4603      	mov	r3, r0
      }
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	015b      	lsls	r3, r3, #5
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	b590      	push	{r4, r7, lr}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	f107 0418 	add.w	r4, r7, #24
 800a7ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7f8:	f7ff fd79 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a800:	f7ff fd75 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a804:	2300      	movs	r3, #0
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	e02a      	b.n	800a860 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a80a:	2100      	movs	r1, #0
 800a80c:	f107 0018 	add.w	r0, r7, #24
 800a810:	f7ff ffc8 	bl	800a7a4 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	4619      	mov	r1, r3
 800a81e:	f001 fbc3 	bl	800bfa8 <_ZNKSt5arrayIfLj8EEixEj>
 800a822:	4604      	mov	r4, r0
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a828:	f7ff fb3b 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a82c:	4602      	mov	r2, r0
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a832:	2101      	movs	r1, #1
 800a834:	f107 0018 	add.w	r0, r7, #24
 800a838:	f7ff ffb4 	bl	800a7a4 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	3b01      	subs	r3, #1
 800a844:	4619      	mov	r1, r3
 800a846:	f001 fbaf 	bl	800bfa8 <_ZNKSt5arrayIfLj8EEixEj>
 800a84a:	4604      	mov	r4, r0
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a850:	f7ff fb27 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a854:	4602      	mov	r2, r0
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3301      	adds	r3, #1
 800a85e:	607b      	str	r3, [r7, #4]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d3d0      	bcc.n	800a80a <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a874:	b004      	add	sp, #16
 800a876:	4770      	bx	lr

0800a878 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f805 	bl	800a896 <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>
 800a88c:	4603      	mov	r3, r0
      }
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	4413      	add	r3, r2
 800a8a8:	011b      	lsls	r3, r3, #4
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	f107 0418 	add.w	r4, r7, #24
 800a8c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a8d2:	f7ff fd0c 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a8da:	f7ff fd08 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	607b      	str	r3, [r7, #4]
 800a8e2:	e02a      	b.n	800a93a <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	f107 0018 	add.w	r0, r7, #24
 800a8ea:	f7ff ffc5 	bl	800a878 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	f001 fb65 	bl	800bfc6 <_ZNKSt5arrayIfLj12EEixEj>
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a902:	f7ff face 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a906:	4602      	mov	r2, r0
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a90c:	2101      	movs	r1, #1
 800a90e:	f107 0018 	add.w	r0, r7, #24
 800a912:	f7ff ffb1 	bl	800a878 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	3b01      	subs	r3, #1
 800a91e:	4619      	mov	r1, r3
 800a920:	f001 fb51 	bl	800bfc6 <_ZNKSt5arrayIfLj12EEixEj>
 800a924:	4604      	mov	r4, r0
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a92a:	f7ff faba 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a92e:	4602      	mov	r2, r0
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3301      	adds	r3, #1
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d3d0      	bcc.n	800a8e4 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a94e:	b004      	add	sp, #16
 800a950:	4770      	bx	lr

0800a952 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 f805 	bl	800a970 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>
 800a966:	4603      	mov	r3, r0
      }
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	019b      	lsls	r3, r3, #6
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	4413      	add	r3, r2
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a98e:	b084      	sub	sp, #16
 800a990:	b590      	push	{r4, r7, lr}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	f107 0418 	add.w	r4, r7, #24
 800a99a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a99e:	2310      	movs	r3, #16
 800a9a0:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a9a8:	f7ff fca1 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a9b2:	f7ff fc9c 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	e02c      	b.n	800aa16 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a9bc:	2100      	movs	r1, #0
 800a9be:	f107 0018 	add.w	r0, r7, #24
 800a9c2:	f7ff ffc6 	bl	800a952 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f001 fb08 	bl	800bfe4 <_ZNKSt5arrayIfLj16EEixEj>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	6879      	ldr	r1, [r7, #4]
 800a9d8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a9dc:	f7ff fa61 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	f107 0018 	add.w	r0, r7, #24
 800a9ec:	f7ff ffb1 	bl	800a952 <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f001 faf3 	bl	800bfe4 <_ZNKSt5arrayIfLj16EEixEj>
 800a9fe:	4604      	mov	r4, r0
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800aa06:	f7ff fa4c 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3301      	adds	r3, #1
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d3ce      	bcc.n	800a9bc <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aa2a:	b004      	add	sp, #16
 800aa2c:	4770      	bx	lr

0800aa2e <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f805 	bl	800aa4c <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>
 800aa42:	4603      	mov	r3, r0
      }
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	4413      	add	r3, r2
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800aa70:	b084      	sub	sp, #16
 800aa72:	b590      	push	{r4, r7, lr}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	f107 0418 	add.w	r4, r7, #24
 800aa7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800aa80:	2314      	movs	r3, #20
 800aa82:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800aa8a:	f7ff fc30 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aa94:	f7ff fc2b 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800aa98:	2300      	movs	r3, #0
 800aa9a:	607b      	str	r3, [r7, #4]
 800aa9c:	e02c      	b.n	800aaf8 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	f107 0018 	add.w	r0, r7, #24
 800aaa4:	f7ff ffc3 	bl	800aa2e <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	4619      	mov	r1, r3
 800aab2:	f001 faa6 	bl	800c002 <_ZNKSt5arrayIfLj20EEixEj>
 800aab6:	4604      	mov	r4, r0
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800aabe:	f7ff f9f0 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aac2:	4602      	mov	r2, r0
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800aac8:	2101      	movs	r1, #1
 800aaca:	f107 0018 	add.w	r0, r7, #24
 800aace:	f7ff ffae 	bl	800aa2e <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	3b01      	subs	r3, #1
 800aada:	4619      	mov	r1, r3
 800aadc:	f001 fa91 	bl	800c002 <_ZNKSt5arrayIfLj20EEixEj>
 800aae0:	4604      	mov	r4, r0
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aae8:	f7ff f9db 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	607b      	str	r3, [r7, #4]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d3ce      	bcc.n	800aa9e <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ab0c:	b004      	add	sp, #16
 800ab0e:	4770      	bx	lr

0800ab10 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 f805 	bl	800ab2e <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>
 800ab24:	4603      	mov	r3, r0
      }
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	4413      	add	r3, r2
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b089      	sub	sp, #36	; 0x24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	eeb0 6a40 	vmov.f32	s12, s0
 800ab56:	eef0 6a60 	vmov.f32	s13, s1
 800ab5a:	eeb0 7a41 	vmov.f32	s14, s2
 800ab5e:	eef0 7a61 	vmov.f32	s15, s3
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
 800ab66:	ed87 6a02 	vstr	s12, [r7, #8]
 800ab6a:	edc7 6a03 	vstr	s13, [r7, #12]
 800ab6e:	ed87 7a04 	vstr	s14, [r7, #16]
 800ab72:	edc7 7a05 	vstr	s15, [r7, #20]
        size_t n = wav[0].size();
 800ab76:	2302      	movs	r3, #2
 800ab78:	61bb      	str	r3, [r7, #24]
        h.resize(n);
 800ab7a:	69b9      	ldr	r1, [r7, #24]
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7ff fbb6 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800ab82:	69b9      	ldr	r1, [r7, #24]
 800ab84:	6838      	ldr	r0, [r7, #0]
 800ab86:	f7ff fbb2 	bl	800a2ee <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61fb      	str	r3, [r7, #28]
 800ab8e:	e02c      	b.n	800abea <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x9e>
            h[i] = wav[0][n - i - 1];
 800ab90:	f107 0308 	add.w	r3, r7, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff ffba 	bl	800ab10 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800ab9c:	69ba      	ldr	r2, [r7, #24]
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	3b01      	subs	r3, #1
 800aba4:	4619      	mov	r1, r3
 800aba6:	f001 fa3b 	bl	800c020 <_ZNKSt5arrayIfLj2EEixEj>
 800abaa:	4604      	mov	r4, r0
 800abac:	69f9      	ldr	r1, [r7, #28]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff f977 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800abba:	f107 0308 	add.w	r3, r7, #8
 800abbe:	2101      	movs	r1, #1
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff ffa5 	bl	800ab10 <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	3b01      	subs	r3, #1
 800abce:	4619      	mov	r1, r3
 800abd0:	f001 fa26 	bl	800c020 <_ZNKSt5arrayIfLj2EEixEj>
 800abd4:	4604      	mov	r4, r0
 800abd6:	69f9      	ldr	r1, [r7, #28]
 800abd8:	6838      	ldr	r0, [r7, #0]
 800abda:	f7ff f962 	bl	8009ea2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800abde:	4602      	mov	r2, r0
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	3301      	adds	r3, #1
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d3ce      	bcc.n	800ab90 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x44>
    }
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	3724      	adds	r7, #36	; 0x24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd90      	pop	{r4, r7, pc}

0800abfc <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f001 fa19 	bl	800c03e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d00c      	beq.n	800ac46 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4619      	mov	r1, r3
 800ac36:	f001 fa16 	bl	800c066 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	    ++this->_M_impl._M_finish;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	1d1a      	adds	r2, r3, #4
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	605a      	str	r2, [r3, #4]
      }
 800ac44:	e008      	b.n	800ac58 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff f8b1 	bl	8009dae <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f001 fa1a 	bl	800c08c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800ac6a:	6838      	ldr	r0, [r7, #0]
 800ac6c:	f000 f817 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ac70:	4603      	mov	r3, r0
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fac5 	bl	800c204 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f001 f91d 	bl	800bed0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7ff ffed 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800acc4:	4603      	mov	r3, r0
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800acca:	6838      	ldr	r0, [r7, #0]
 800accc:	f7ff ffe7 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800acd0:	4603      	mov	r3, r0
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ffde 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ace2:	4603      	mov	r3, r0
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	601a      	str	r2, [r3, #0]
    }
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>:
      _S_use_relocate()
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 f805 	bl	800ad08 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800acfe:	4603      	mov	r3, r0
      }
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ad10:	2301      	movs	r3, #1
      }
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
	...

0800ad20 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800ad20:	b5b0      	push	{r4, r5, r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fa98 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800ad30:	4602      	mov	r2, r0
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	4293      	cmp	r3, r2
 800ad36:	bf8c      	ite	hi
 800ad38:	2301      	movhi	r3, #1
 800ad3a:	2300      	movls	r3, #0
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800ad42:	4836      	ldr	r0, [pc, #216]	; (800ae1c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xfc>)
 800ad44:	f00e fd45 	bl	80197d2 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 fa9a 	bl	800c282 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	bf8c      	ite	hi
 800ad56:	2301      	movhi	r3, #1
 800ad58:	2300      	movls	r3, #0
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d059      	beq.n	800ae14 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7fe fef6 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800ad66:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800ad68:	f7ff ffc3 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d014      	beq.n	800ad9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f001 fa93 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800ad7c:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681c      	ldr	r4, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fc99 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ad8e:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4629      	mov	r1, r5
 800ad94:	4620      	mov	r0, r4
 800ad96:	f001 fa98 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800ad9a:	e01f      	b.n	800addc <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f001 faa6 	bl	800c2f2 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800ada6:	4604      	mov	r4, r0
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f001 faa0 	bl	800c2f2 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800adb2:	4603      	mov	r3, r0
 800adb4:	4622      	mov	r2, r4
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f001 faa9 	bl	800c310 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>
 800adbe:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681c      	ldr	r4, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 fc78 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800add0:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800add2:	461a      	mov	r2, r3
 800add4:	4629      	mov	r1, r5
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fc7d 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	1ad3      	subs	r3, r2, r3
 800adec:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 800adee:	461a      	mov	r2, r3
 800adf0:	f000 fc8c 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	441a      	add	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	441a      	add	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	609a      	str	r2, [r3, #8]
	}
    }
 800ae14:	bf00      	nop
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae1c:	08021048 	.word	0x08021048

0800ae20 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>:
	vector(_InputIterator __first, _InputIterator __last,
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
 800ae2c:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f001 fa88 	bl	800c348 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>
	  _M_range_initialize(__first, __last,
 800ae38:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f001 fa91 	bl	800c366 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800ae44:	462b      	mov	r3, r5
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	4621      	mov	r1, r4
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f001 fa96 	bl	800c37c <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>
	}
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bdb0      	pop	{r4, r5, r7, pc}

0800ae5a <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 800ae5a:	b5b0      	push	{r4, r5, r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	1d38      	adds	r0, r7, #4
 800ae64:	e880 0006 	stmia.w	r0, {r1, r2}
 800ae68:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 fadb 	bl	800c42a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 800ae74:	1d3b      	adds	r3, r7, #4
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 fab9 	bl	800c3ee <_ZNKSt16initializer_listIiE5beginEv>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	1d3b      	adds	r3, r7, #4
 800ae80:	4618      	mov	r0, r3
 800ae82:	f001 fac0 	bl	800c406 <_ZNKSt16initializer_listIiE3endEv>
 800ae86:	4602      	mov	r2, r0
 800ae88:	462b      	mov	r3, r5
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f001 fadb 	bl	800c448 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>
      }
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae9c <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	f107 030c 	add.w	r3, r7, #12
 800aeaa:	4611      	mov	r1, r2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 fb04 	bl	800c4ba <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	1d1a      	adds	r2, r3, #4
 800aec8:	f107 030c 	add.w	r3, r7, #12
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 faf3 	bl	800c4ba <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800aede:	b590      	push	{r4, r7, lr}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 faf6 	bl	800c4da <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800aeee:	4603      	mov	r3, r0
 800aef0:	681c      	ldr	r4, [r3, #0]
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f001 faf1 	bl	800c4da <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800aef8:	4603      	mov	r3, r0
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	429c      	cmp	r4, r3
 800aefe:	bf14      	ite	ne
 800af00:	2301      	movne	r3, #1
 800af02:	2300      	moveq	r3, #0
 800af04:	b2db      	uxtb	r3, r3
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd90      	pop	{r4, r7, pc}

0800af0e <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
	++_M_current;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	1d1a      	adds	r2, r3, #4
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	601a      	str	r2, [r3, #0]
	return *this;
 800af20:	687b      	ldr	r3, [r7, #4]
      }
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	461a      	mov	r2, r3
 800af52:	2300      	movs	r3, #0
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	6053      	str	r3, [r2, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	609a      	str	r2, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	461a      	mov	r2, r3
 800af78:	2300      	movs	r3, #0
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	6053      	str	r3, [r2, #4]
 800af7e:	6093      	str	r3, [r2, #8]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff ffdf 	bl	800af46 <_ZNSt14_Function_baseC1Ev>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	60da      	str	r2, [r3, #12]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800afa2:	6838      	ldr	r0, [r7, #0]
 800afa4:	f001 faa4 	bl	800c4f0 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800afa8:	4602      	mov	r2, r0
 800afaa:	f107 0308 	add.w	r3, r7, #8
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f001 faa9 	bl	800c508 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 800afb6:	f107 0308 	add.w	r3, r7, #8
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fa9f 	bl	800b500 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800afc2:	f107 0308 	add.w	r3, r7, #8
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fc f996 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800afcc:	687b      	ldr	r3, [r7, #4]
	}
 800afce:	4618      	mov	r0, r3
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b086      	sub	sp, #24
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800afe0:	6838      	ldr	r0, [r7, #0]
 800afe2:	f001 fac3 	bl	800c56c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800afe6:	4602      	mov	r2, r0
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4611      	mov	r1, r2
 800afee:	4618      	mov	r0, r3
 800aff0:	f001 fac8 	bl	800c584 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fa80 	bl	800b500 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800b000:	f107 0308 	add.w	r3, r7, #8
 800b004:	4618      	mov	r0, r3
 800b006:	f7fc f977 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800b00a:	687b      	ldr	r3, [r7, #4]
	}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f001 fadd 	bl	800c5e4 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ffe6 	bl	800b014 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 fad5 	bl	800c60c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b062:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d009      	beq.n	800b080 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 fada 	bl	800c626 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800b072:	4602      	mov	r2, r0
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f001 fae0 	bl	800c640 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
      }
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fadf 	bl	800c65e <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fadd 	bl	800c67a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff ffe6 	bl	800b0aa <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800b0e8:	b590      	push	{r4, r7, lr}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f001 fad5 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b0f8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00c      	beq.n	800b11c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 fada 	bl	800c6bc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800b108:	4604      	mov	r4, r0
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f001 fae3 	bl	800c6d6 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 800b110:	4603      	mov	r3, r0
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4619      	mov	r1, r3
 800b116:	4620      	mov	r0, r4
 800b118:	f001 fae8 	bl	800c6ec <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
      }
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd90      	pop	{r4, r7, pc}

0800b12c <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4618      	mov	r0, r3
 800b138:	f001 faeb 	bl	800c712 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b13c:	4603      	mov	r3, r0
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	429a      	cmp	r2, r3
 800b15a:	da01      	bge.n	800b160 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	e000      	b.n	800b162 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800b160:	687b      	ldr	r3, [r7, #4]
    }
 800b162:	4618      	mov	r0, r3
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	da01      	bge.n	800b188 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	e000      	b.n	800b18a <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800b188:	687b      	ldr	r3, [r7, #4]
    }
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d201      	bcs.n	800b1b0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	e000      	b.n	800b1b2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b1b0:	687b      	ldr	r3, [r7, #4]
    }
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6178      	str	r0, [r7, #20]
 800b1dc:	6139      	str	r1, [r7, #16]
 800b1de:	60fa      	str	r2, [r7, #12]
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	ed87 0a01 	vstr	s0, [r7, #4]
 800b1e6:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b1ea:	f06f 0314 	mvn.w	r3, #20
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b1fa:	b480      	push	{r7}
 800b1fc:	b087      	sub	sp, #28
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6178      	str	r0, [r7, #20]
 800b202:	6139      	str	r1, [r7, #16]
 800b204:	60fa      	str	r2, [r7, #12]
 800b206:	60bb      	str	r3, [r7, #8]
 800b208:	ed87 0a01 	vstr	s0, [r7, #4]
 800b20c:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b210:	f06f 0314 	mvn.w	r3, #20
}
 800b214:	4618      	mov	r0, r3
 800b216:	371c      	adds	r7, #28
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6178      	str	r0, [r7, #20]
 800b228:	6139      	str	r1, [r7, #16]
 800b22a:	60fa      	str	r2, [r7, #12]
 800b22c:	ed87 0a02 	vstr	s0, [r7, #8]
 800b230:	edc7 0a01 	vstr	s1, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b236:	f06f 0314 	mvn.w	r3, #20
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	371c      	adds	r7, #28
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b246:	b480      	push	{r7}
 800b248:	b087      	sub	sp, #28
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6178      	str	r0, [r7, #20]
 800b24e:	6139      	str	r1, [r7, #16]
 800b250:	60fa      	str	r2, [r7, #12]
 800b252:	ed87 0a02 	vstr	s0, [r7, #8]
 800b256:	edc7 0a01 	vstr	s1, [r7, #4]
 800b25a:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b25c:	f06f 0314 	mvn.w	r3, #20
}
 800b260:	4618      	mov	r0, r3
 800b262:	371c      	adds	r7, #28
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6178      	str	r0, [r7, #20]
 800b274:	6139      	str	r1, [r7, #16]
 800b276:	60fa      	str	r2, [r7, #12]
 800b278:	ed87 0a02 	vstr	s0, [r7, #8]
 800b27c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b282:	f06f 0314 	mvn.w	r3, #20
}
 800b286:	4618      	mov	r0, r3
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	6178      	str	r0, [r7, #20]
 800b29a:	6139      	str	r1, [r7, #16]
 800b29c:	60fa      	str	r2, [r7, #12]
 800b29e:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2a2:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2a6:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2a8:	f06f 0314 	mvn.w	r3, #20
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	371c      	adds	r7, #28
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6178      	str	r0, [r7, #20]
 800b2c0:	6139      	str	r1, [r7, #16]
 800b2c2:	60fa      	str	r2, [r7, #12]
 800b2c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2c8:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2ce:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6178      	str	r0, [r7, #20]
 800b2e6:	6139      	str	r1, [r7, #16]
 800b2e8:	60fa      	str	r2, [r7, #12]
 800b2ea:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2ee:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2f2:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2f4:	f06f 0314 	mvn.w	r3, #20
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fa0d 	bl	800c72e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b314:	4603      	mov	r3, r0
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 fa0e 	bl	800c74a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff ffeb 	bl	800b31e <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff ffeb 	bl	800b338 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4618      	mov	r0, r3
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
	: _M_t()
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff ffe8 	bl	800b352 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	f001 fa07 	bl	800c7aa <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 800b39c:	4603      	mov	r3, r0
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 f9e2 	bl	800c76a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800b3a6:	6838      	ldr	r0, [r7, #0]
 800b3a8:	f001 fa14 	bl	800c7d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 fa1d 	bl	800c7ee <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f001 fa0d 	bl	800c7d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800b3ba:	687b      	ldr	r3, [r7, #4]
      }
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800b3dc:	b590      	push	{r4, r7, lr}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800b3e6:	687c      	ldr	r4, [r7, #4]
 800b3e8:	f107 030c 	add.w	r3, r7, #12
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f001 fa08 	bl	800c804 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 800b3f4:	f107 030c 	add.w	r3, r7, #12
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f001 fa0e 	bl	800c81c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4618      	mov	r0, r3
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	bd90      	pop	{r4, r7, pc}

0800b40a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fa10 	bl	800c838 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 800b422:	b590      	push	{r4, r7, lr}
 800b424:	b089      	sub	sp, #36	; 0x24
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d02f      	beq.n	800b492 <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x70>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	4618      	mov	r0, r3
 800b438:	f001 fa23 	bl	800c882 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800b43c:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 800b43e:	68b8      	ldr	r0, [r7, #8]
 800b440:	f001 fa32 	bl	800c8a8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800b444:	4603      	mov	r3, r0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	441a      	add	r2, r3
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 800b450:	69f8      	ldr	r0, [r7, #28]
 800b452:	f001 fa36 	bl	800c8c2 <_ZSt11__addressofImEPT_RS0_>
 800b456:	4601      	mov	r1, r0
 800b458:	f107 0314 	add.w	r3, r7, #20
 800b45c:	2200      	movs	r2, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f7f6 f830 	bl	80014c4 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	461a      	mov	r2, r3
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b470:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	68fc      	ldr	r4, [r7, #12]
 800b478:	463b      	mov	r3, r7
 800b47a:	f107 0114 	add.w	r1, r7, #20
 800b47e:	4618      	mov	r0, r3
 800b480:	f7f6 f86c 	bl	800155c <_ZStplRKSt13_Bit_iteratori>
 800b484:	f104 0308 	add.w	r3, r4, #8
 800b488:	463a      	mov	r2, r7
 800b48a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b48e:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
      }
 800b492:	bf00      	nop
 800b494:	3724      	adds	r7, #36	; 0x24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd90      	pop	{r4, r7, pc}

0800b49a <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 800b49a:	b590      	push	{r4, r7, lr}
 800b49c:	b085      	sub	sp, #20
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d012      	beq.n	800b4d8 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 800b4b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b4bc:	e000      	b.n	800b4c0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 800b4be:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 fa08 	bl	800c8d8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f012 fcea 	bl	801deac <memset>
			   * sizeof(_Bit_type));
      }
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd90      	pop	{r4, r7, pc}

0800b4e0 <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7f5 ffe6 	bl	80014c4 <_ZNSt13_Bit_iteratorC1EPmj>
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f001 fa02 	bl	800c91a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f103 0208 	add.w	r2, r3, #8
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	4619      	mov	r1, r3
 800b522:	4610      	mov	r0, r2
 800b524:	f001 fa2b 	bl	800c97e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f103 020c 	add.w	r2, r3, #12
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	330c      	adds	r3, #12
 800b532:	4619      	mov	r1, r3
 800b534:	4610      	mov	r0, r2
 800b536:	f001 fa4c 	bl	800c9d2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800b53a:	bf00      	nop
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b564:	68fc      	ldr	r4, [r7, #12]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fa52 	bl	800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b56c:	4602      	mov	r2, r0
 800b56e:	f107 0308 	add.w	r3, r7, #8
 800b572:	4619      	mov	r1, r3
 800b574:	4620      	mov	r0, r4
 800b576:	f001 fa56 	bl	800ca26 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	bd90      	pop	{r4, r7, pc}

0800b584 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4618      	mov	r0, r3
 800b590:	f001 fa62 	bl	800ca58 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800b594:	4603      	mov	r3, r0
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 fa62 	bl	800ca72 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff ffde 	bl	800b584 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff ffd8 	bl	800b584 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d006      	beq.n	800b5ee <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 fa46 	bl	800ca72 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	4798      	blx	r3
      }
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr

0800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b616:	b480      	push	{r7}
 800b618:	b083      	sub	sp, #12
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b636:	f107 030c 	add.w	r3, r7, #12
 800b63a:	4618      	mov	r0, r3
 800b63c:	f001 fa26 	bl	800ca8c <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800b640:	4602      	mov	r2, r0
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4293      	cmp	r3, r2
 800b646:	bf8c      	ite	hi
 800b648:	2301      	movhi	r3, #1
 800b64a:	2300      	movls	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b652:	4804      	ldr	r0, [pc, #16]	; (800b664 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b654:	f00e f8bd 	bl	80197d2 <_ZSt20__throw_length_errorPKc>
	return __n;
 800b658:	687b      	ldr	r3, [r7, #4]
      }
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	08021058 	.word	0x08021058

0800b668 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4618      	mov	r0, r3
 800b67a:	f001 fa21 	bl	800cac0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f001 fa2b 	bl	800cadc <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4618      	mov	r0, r3
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800b690:	b590      	push	{r4, r7, lr}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f80d 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b6a6:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f001 fa30 	bl	800cb12 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b6b2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	605a      	str	r2, [r3, #4]
      }
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd90      	pop	{r4, r7, pc}

0800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800b6e2:	e00a      	b.n	800b6fa <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f001 fa33 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 fa39 	bl	800cb66 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d1f0      	bne.n	800b6e4 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800b702:	bf00      	nop
 800b704:	bf00      	nop
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
	if (__p)
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d005      	beq.n	800b72a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	4618      	mov	r0, r3
 800b726:	f001 fa2c 	bl	800cb82 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>
      }
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b768:	b5b0      	push	{r4, r5, r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b774:	f107 0208 	add.w	r2, r7, #8
 800b778:	f107 030c 	add.w	r3, r7, #12
 800b77c:	4611      	mov	r1, r2
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fb26 	bl	8009dd0 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d017      	beq.n	800b7ba <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b78a:	f107 020c 	add.w	r2, r7, #12
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f001 fa28 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b79a:	4603      	mov	r3, r0
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7f5 fd42 	bl	8001226 <_ZSt4__lgi>
 800b7a2:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b7a4:	005a      	lsls	r2, r3, #1
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f001 fa32 	bl	800cc14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f001 fa64 	bl	800cc82 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b7c2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	ed2d 8b02 	vpush	{d8}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	60f8      	str	r0, [r7, #12]
 800b7ce:	60b9      	str	r1, [r7, #8]
 800b7d0:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b7d2:	f107 0308 	add.w	r3, r7, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fbd1 	bl	8009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	ed93 8a00 	vldr	s16, [r3]
 800b7e2:	1d3b      	adds	r3, r7, #4
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fbca 	bl	8009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	edd3 7a00 	vldr	s15, [r3]
 800b7f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f8:	bf4c      	ite	mi
 800b7fa:	2301      	movmi	r3, #1
 800b7fc:	2300      	movpl	r3, #0
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	ecbd 8b02 	vpop	{d8}
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 800b818:	f107 0208 	add.w	r2, r7, #8
 800b81c:	f107 030c 	add.w	r3, r7, #12
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f001 fa65 	bl	800ccf2 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	e01d      	b.n	800b86e <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b836:	e00a      	b.n	800b84e <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__result, __first))
 800b838:	1d3b      	adds	r3, r7, #4
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	6979      	ldr	r1, [r7, #20]
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff ffbf 	bl	800b7c2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b84e:	f107 030c 	add.w	r3, r7, #12
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fb83 	bl	8009f5e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b858:	4602      	mov	r2, r0
 800b85a:	f107 0308 	add.w	r3, r7, #8
 800b85e:	4619      	mov	r1, r3
 800b860:	4610      	mov	r0, r2
 800b862:	f7fe fb64 	bl	8009f2e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1e5      	bne.n	800b838 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b86c:	697b      	ldr	r3, [r7, #20]
    }
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4618      	mov	r0, r3
 800b888:	f001 fa4b 	bl	800cd22 <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>
 800b88c:	4602      	mov	r2, r0
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4293      	cmp	r3, r2
 800b892:	bf8c      	ite	hi
 800b894:	2301      	movhi	r3, #1
 800b896:	2300      	movls	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b89e:	4804      	ldr	r0, [pc, #16]	; (800b8b0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b8a0:	f00d ff97 	bl	80197d2 <_ZSt20__throw_length_errorPKc>
	return __n;
 800b8a4:	687b      	ldr	r3, [r7, #4]
      }
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	08021058 	.word	0x08021058

0800b8b4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	60f8      	str	r0, [r7, #12]
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b8d6:	e00a      	b.n	800b8ee <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f001 fa4a 	bl	800cd72 <_ZSt11__addressofIiEPT_RS0_>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 fa50 	bl	800cd88 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d1f0      	bne.n	800b8d8 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0xe>
    }
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
	if (__p)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d005      	beq.n	800b91e <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	68b9      	ldr	r1, [r7, #8]
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 fa43 	bl	800cda4 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>
      }
 800b91e:	bf00      	nop
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b926:	b590      	push	{r4, r7, lr}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fa47 	bl	800cdc2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>
 800b934:	bf00      	nop
 800b936:	4620      	mov	r0, r4
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}

0800b93e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>:
  //  any of the POD optimizations.

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
 800b960:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __first != __last; ++__first, (void)++__cur)
 800b966:	e016      	b.n	800b996 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800b968:	6978      	ldr	r0, [r7, #20]
 800b96a:	f001 f8f1 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800b96e:	4604      	mov	r4, r0
 800b970:	f107 030c 	add.w	r3, r7, #12
 800b974:	4618      	mov	r0, r3
 800b976:	f7fe fb02 	bl	8009f7e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b97a:	4603      	mov	r3, r0
 800b97c:	461a      	mov	r2, r3
 800b97e:	4621      	mov	r1, r4
 800b980:	6838      	ldr	r0, [r7, #0]
 800b982:	f000 fb70 	bl	800c066 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800b986:	f107 030c 	add.w	r3, r7, #12
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fe fae7 	bl	8009f5e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	3304      	adds	r3, #4
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	f107 0208 	add.w	r2, r7, #8
 800b99a:	f107 030c 	add.w	r3, r7, #12
 800b99e:	4611      	mov	r1, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fe fac4 	bl	8009f2e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1dd      	bne.n	800b968 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x14>
	  return __cur;
 800b9ac:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__result, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	371c      	adds	r7, #28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd90      	pop	{r4, r7, pc}

0800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	605a      	str	r2, [r3, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	609a      	str	r2, [r3, #8]
	{ }
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
	if (__p)
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d005      	beq.n	800ba28 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f001 f9da 	bl	800cddc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	60b9      	str	r1, [r7, #8]
 800ba50:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800ba52:	e00a      	b.n	800ba6a <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f001 f9d0 	bl	800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 f9d6 	bl	800ce10 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3308      	adds	r3, #8
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d1f0      	bne.n	800ba54 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xe>
    }
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 f9cf 	bl	800ce2c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461a      	mov	r2, r3
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f001 f9d4 	bl	800ce42 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 800ba9a:	bf00      	nop
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b082      	sub	sp, #8
 800baa6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f805 	bl	800bab8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800baae:	4603      	mov	r3, r0
      }
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800bac0:	2301      	movs	r3, #1
      }
 800bac2:	4618      	mov	r0, r3
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	b08c      	sub	sp, #48	; 0x30
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800badc:	4a59      	ldr	r2, [pc, #356]	; (800bc44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 800bade:	2101      	movs	r1, #1
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f001 f9c7 	bl	800ce74 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800bae6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7fe fb96 	bl	800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 800bafa:	4603      	mov	r3, r0
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	f107 0214 	add.w	r2, r7, #20
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4611      	mov	r1, r2
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f001 f9fa 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fa08 	bl	800cf2c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 800bb1c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800bb22:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	18d5      	adds	r5, r2, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f001 f97d 	bl	800ce2c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	4629      	mov	r1, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7ff ff9f 	bl	800ba7c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800bb3e:	2300      	movs	r3, #0
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bb42:	f7ff ffae 	bl	800baa2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d027      	beq.n	800bb9c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bb4c:	f107 0308 	add.w	r3, r7, #8
 800bb50:	4618      	mov	r0, r3
 800bb52:	f001 fa13 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bb56:	4603      	mov	r3, r0
 800bb58:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7ff ff67 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bb62:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	4621      	mov	r1, r4
 800bb68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb6a:	f001 f9f3 	bl	800cf54 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bb6e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	3308      	adds	r3, #8
 800bb74:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb76:	f107 0308 	add.w	r3, r7, #8
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 f9fe 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bb80:	4603      	mov	r3, r0
 800bb82:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7ff ff52 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bb8c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb90:	6a39      	ldr	r1, [r7, #32]
 800bb92:	4620      	mov	r0, r4
 800bb94:	f001 f9de 	bl	800cf54 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bb98:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bb9a:	e026      	b.n	800bbea <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4618      	mov	r0, r3
 800bba2:	f001 f9eb 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bba6:	4603      	mov	r3, r0
 800bba8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ff3f 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbb2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800bbb4:	69ba      	ldr	r2, [r7, #24]
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbba:	f001 f9ea 	bl	800cf92 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bbbe:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 f9d6 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff ff2a 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbdc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800bbde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbe0:	6a39      	ldr	r1, [r7, #32]
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f001 f9d5 	bl	800cf92 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bbe8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800bbea:	f7ff ff5a 	bl	800baa2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f083 0301 	eor.w	r3, r3, #1
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d009      	beq.n	800bc0e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff ff17 	bl	800ba30 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bc02:	4603      	mov	r3, r0
 800bc04:	461a      	mov	r2, r3
 800bc06:	6a39      	ldr	r1, [r7, #32]
 800bc08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc0a:	f7ff ff1c 	bl	800ba46 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800bc0e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc1e:	f7ff fef4 	bl	800ba0a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc2c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	441a      	add	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	609a      	str	r2, [r3, #8]
    }
 800bc3a:	bf00      	nop
 800bc3c:	3730      	adds	r7, #48	; 0x30
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bdb0      	pop	{r4, r5, r7, pc}
 800bc42:	bf00      	nop
 800bc44:	0802108c 	.word	0x0802108c

0800bc48 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800bc68:	b5b0      	push	{r4, r5, r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800bc70:	1d3b      	adds	r3, r7, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 f9a6 	bl	800cfc4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 f9ab 	bl	800cfda <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800bc84:	bf00      	nop
 800bc86:	4620      	mov	r0, r4
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bdb0      	pop	{r4, r5, r7, pc}

0800bc8e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b084      	sub	sp, #16
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	60f8      	str	r0, [r7, #12]
 800bc96:	60b9      	str	r1, [r7, #8]
 800bc98:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800bc9a:	f107 0208 	add.w	r2, r7, #8
 800bc9e:	f107 030c 	add.w	r3, r7, #12
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 f9a6 	bl	800cff6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d017      	beq.n	800bce0 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800bcb0:	f107 020c 	add.w	r2, r7, #12
 800bcb4:	f107 0308 	add.w	r3, r7, #8
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f001 f921 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f5 faaf 	bl	8001226 <_ZSt4__lgi>
 800bcc8:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800bcca:	005a      	lsls	r2, r3, #1
 800bccc:	793b      	ldrb	r3, [r7, #4]
 800bcce:	68b9      	ldr	r1, [r7, #8]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f001 f9a8 	bl	800d026 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800bcd6:	793a      	ldrb	r2, [r7, #4]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f001 f9da 	bl	800d094 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800bce0:	bf00      	nop
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800bcf4:	f107 0208 	add.w	r2, r7, #8
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fff7 	bl	800ccf2 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
	return __first;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	e01d      	b.n	800bd4a <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bd12:	e00a      	b.n	800bd2a <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__first, __result))
 800bd14:	1d3b      	adds	r3, r7, #4
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	68f9      	ldr	r1, [r7, #12]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fd51 	bl	800b7c2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bd2a:	f107 030c 	add.w	r3, r7, #12
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe f915 	bl	8009f5e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800bd34:	4602      	mov	r2, r0
 800bd36:	f107 0308 	add.w	r3, r7, #8
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fe f8f6 	bl	8009f2e <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e5      	bne.n	800bd14 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800bd48:	697b      	ldr	r3, [r7, #20]
    }
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800bd54:	b5b0      	push	{r4, r5, r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 80af 	beq.w	800bec4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
	{
	  const size_type __size = size();
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7fd fef3 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800bd6c:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	109b      	asrs	r3, r3, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bd7a:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fa6f 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bd82:	4602      	mov	r2, r0
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d808      	bhi.n	800bd9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fa68 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bd90:	4602      	mov	r2, r0
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d901      	bls.n	800bda0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4c>
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e000      	b.n	800bda2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
 800bda0:	2300      	movs	r3, #0
 800bda2:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d30f      	bcc.n	800bdcc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fc84 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bdb8:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fea7 	bl	800cb12 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800bdc4:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800bdca:	e07b      	b.n	800bec4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
		_M_check_len(__n, "vector::_M_default_append");
 800bdcc:	4a3f      	ldr	r2, [pc, #252]	; (800becc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x178>)
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 f997 	bl	800d104 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800bdd6:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6979      	ldr	r1, [r7, #20]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fa60 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800bde2:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bde4:	f7fe ff85 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01c      	beq.n	800be28 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0xd4>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fc61 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bdfe:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be00:	461a      	mov	r2, r3
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fe84 	bl	800cb12 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681c      	ldr	r4, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fc53 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be1a:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	4629      	mov	r1, r5
 800be20:	4620      	mov	r0, r4
 800be22:	f000 fa52 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800be26:	e030      	b.n	800be8a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x136>
		  pointer __destroy_from = pointer();
 800be28:	2300      	movs	r3, #0
 800be2a:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fc42 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be3c:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be3e:	461a      	mov	r2, r3
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	4620      	mov	r0, r4
 800be44:	f000 fe65 	bl	800cb12 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		      __destroy_from = __new_start + __size;
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	4413      	add	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681c      	ldr	r4, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff fc2f 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be62:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	4629      	mov	r1, r5
 800be68:	4620      	mov	r0, r4
 800be6a:	f001 f992 	bl	800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681c      	ldr	r4, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff fc21 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be7e:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be80:	461a      	mov	r2, r3
 800be82:	4629      	mov	r1, r5
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff fc26 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	      _M_deallocate(this->_M_impl._M_start,
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800be9c:	461a      	mov	r2, r3
 800be9e:	f7ff fc35 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __new_start;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800bea8:	69fa      	ldr	r2, [r7, #28]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	441a      	add	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	441a      	add	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	609a      	str	r2, [r3, #8]
    }
 800bec4:	bf00      	nop
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bdb0      	pop	{r4, r5, r7, pc}
 800becc:	080210a8 	.word	0x080210a8

0800bed0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	109b      	asrs	r3, r3, #2
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00e      	beq.n	800bf0a <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fbe4 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bef8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800befa:	461a      	mov	r2, r3
 800befc:	4621      	mov	r1, r4
 800befe:	6838      	ldr	r0, [r7, #0]
 800bf00:	f7ff fbe9 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	605a      	str	r2, [r3, #4]
      }
 800bf0a:	bf00      	nop
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd90      	pop	{r4, r7, pc}

0800bf12 <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b082      	sub	sp, #8
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 f94f 	bl	800d1c4 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800bf26:	4603      	mov	r3, r0
      }
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <_ZNKSt5arrayIfLj10EEixEj>:
      operator[](size_type __n) const noexcept
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 f94f 	bl	800d1e2 <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>
 800bf44:	4603      	mov	r3, r0
      }
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <_ZNKSt5arrayIfLj14EEixEj>:
      operator[](size_type __n) const noexcept
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 f94f 	bl	800d200 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>
 800bf62:	4603      	mov	r3, r0
      }
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f001 f94f 	bl	800d21e <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 800bf80:	4603      	mov	r3, r0
      }
 800bf82:	4618      	mov	r0, r3
 800bf84:	3708      	adds	r7, #8
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 f94f 	bl	800d23c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800bf9e:	4603      	mov	r3, r0
      }
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <_ZNKSt5arrayIfLj8EEixEj>:
      operator[](size_type __n) const noexcept
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f001 f94f 	bl	800d25a <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>
 800bfbc:	4603      	mov	r3, r0
      }
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f001 f94f 	bl	800d278 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 800bfda:	4603      	mov	r3, r0
      }
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f001 f94f 	bl	800d296 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800bff8:	4603      	mov	r3, r0
      }
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <_ZNKSt5arrayIfLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6839      	ldr	r1, [r7, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f94f 	bl	800d2b4 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>
 800c016:	4603      	mov	r3, r0
      }
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZNKSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) const noexcept
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 f94f 	bl	800d2d2 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800c034:	4603      	mov	r3, r0
      }
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c03e:	b480      	push	{r7}
 800c040:	b083      	sub	sp, #12
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	609a      	str	r2, [r3, #8]
	{ }
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 f93c 	bl	800d2f0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	68b9      	ldr	r1, [r7, #8]
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f001 f941 	bl	800d306 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c08c:	b5b0      	push	{r4, r5, r7, lr}
 800c08e:	b08c      	sub	sp, #48	; 0x30
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c098:	4a59      	ldr	r2, [pc, #356]	; (800c200 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800c09a:	2101      	movs	r1, #1
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f001 f831 	bl	800d104 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800c0a2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f7fd fe6c 	bl	8009d8e <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	617b      	str	r3, [r7, #20]
 800c0ba:	f107 0214 	add.w	r2, r7, #20
 800c0be:	f107 0308 	add.w	r3, r7, #8
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 fd90 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 f8e5 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c0d8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800c0de:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	18d5      	adds	r5, r2, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f001 f901 	bl	800d2f0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f7ff ffb6 	bl	800c066 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  __new_finish = pointer();
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c0fe:	f7fe fdf8 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d027      	beq.n	800c158 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c108:	f107 0308 	add.w	r3, r7, #8
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff fa82 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c112:	4603      	mov	r3, r0
 800c114:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	4618      	mov	r0, r3
 800c11a:	f7ff fad1 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c11e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	4621      	mov	r1, r4
 800c124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c126:	f000 f8d0 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c12a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	3304      	adds	r3, #4
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	4618      	mov	r0, r3
 800c138:	f7ff fa6d 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c13c:	4603      	mov	r3, r0
 800c13e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff fabc 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c148:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c14c:	6a39      	ldr	r1, [r7, #32]
 800c14e:	4620      	mov	r0, r4
 800c150:	f000 f8bb 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c154:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c156:	e026      	b.n	800c1a6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff fa5a 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c162:	4603      	mov	r3, r0
 800c164:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff faa9 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c16e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	4621      	mov	r1, r4
 800c174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c176:	f001 f80c 	bl	800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c17a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	3304      	adds	r3, #4
 800c180:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800c182:	f107 0308 	add.w	r3, r7, #8
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff fa45 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c18c:	4603      	mov	r3, r0
 800c18e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fa94 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c198:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c19a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c19c:	6a39      	ldr	r1, [r7, #32]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 fff7 	bl	800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c1a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c1a6:	f7fe fda4 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f083 0301 	eor.w	r3, r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d009      	beq.n	800c1ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff fa81 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6a39      	ldr	r1, [r7, #32]
 800c1c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1c6:	f7ff fa86 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800c1ca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	689a      	ldr	r2, [r3, #8]
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1da:	f7ff fa97 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	69ba      	ldr	r2, [r7, #24]
 800c1e2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1e8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	69ba      	ldr	r2, [r7, #24]
 800c1f0:	441a      	add	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	609a      	str	r2, [r3, #8]
    }
 800c1f6:	bf00      	nop
 800c1f8:	3730      	adds	r7, #48	; 0x30
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	0802108c 	.word	0x0802108c

0800c204 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800c204:	b5b0      	push	{r4, r5, r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685a      	ldr	r2, [r3, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	429a      	cmp	r2, r3
 800c218:	d011      	beq.n	800c23e <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c21a:	687c      	ldr	r4, [r7, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685d      	ldr	r5, [r3, #4]
 800c220:	6838      	ldr	r0, [r7, #0]
 800c222:	f001 f886 	bl	800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	4629      	mov	r1, r5
 800c22c:	4620      	mov	r0, r4
 800c22e:	f001 f88b 	bl	800d348 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	    ++this->_M_impl._M_finish;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	1d1a      	adds	r2, r3, #4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	605a      	str	r2, [r3, #4]
      }
 800c23c:	e00c      	b.n	800c258 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7fd fdb5 	bl	8009dae <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800c244:	4604      	mov	r4, r0
 800c246:	6838      	ldr	r0, [r7, #0]
 800c248:	f001 f873 	bl	800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c24c:	4603      	mov	r3, r0
 800c24e:	461a      	mov	r2, r3
 800c250:	4621      	mov	r1, r4
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f001 f88c 	bl	800d370 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bdb0      	pop	{r4, r5, r7, pc}

0800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff fb67 	bl	800b93e <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c270:	4603      	mov	r3, r0
 800c272:	4618      	mov	r0, r3
 800c274:	f000 fc0a 	bl	800ca8c <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800c278:	4603      	mov	r3, r0
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c282:	b480      	push	{r7}
 800c284:	b083      	sub	sp, #12
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	109b      	asrs	r3, r3, #2
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d006      	beq.n	800c2c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x1e>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f001 f916 	bl	800d4e8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	e000      	b.n	800c2c2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x20>
 800c2c0:	2300      	movs	r3, #0
      }
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c2ca:	b590      	push	{r4, r7, lr}
 800c2cc:	b087      	sub	sp, #28
 800c2ce:	af02      	add	r7, sp, #8
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
 800c2d6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c2d8:	f88d 4000 	strb.w	r4, [sp]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f001 f90e 	bl	800d504 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>
 800c2e8:	4603      	mov	r3, r0
      }
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd90      	pop	{r4, r7, pc}

0800c2f2 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c2fa:	f107 030c 	add.w	r3, r7, #12
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4618      	mov	r0, r3
 800c302:	f001 f911 	bl	800d528 <_ZNSt13move_iteratorIPfEC1ES0_>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68b9      	ldr	r1, [r7, #8]
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff ffbd 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c328:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff f9c7 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c332:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 f907 	bl	800d54c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
	      return __result;
 800c33e:	697b      	ldr	r3, [r7, #20]
	}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fbb2 	bl	800cac0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c36e:	bf00      	nop
 800c370:	4618      	mov	r0, r3
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	68b8      	ldr	r0, [r7, #8]
 800c38e:	f001 f90e 	bl	800d5ae <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c392:	4603      	mov	r3, r0
 800c394:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c396:	68fc      	ldr	r4, [r7, #12]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff f990 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6978      	ldr	r0, [r7, #20]
 800c3a6:	f7ff f941 	bl	800b62c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff ff77 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	441a      	add	r2, r3
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff f976 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c3d4:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	68b8      	ldr	r0, [r7, #8]
 800c3dc:	f001 f8fb 	bl	800d5d6 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800c3e0:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	605a      	str	r2, [r3, #4]
	}
 800c3e6:	bf00      	nop
 800c3e8:	371c      	adds	r7, #28
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd90      	pop	{r4, r7, pc}

0800c3ee <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c3ee:	b480      	push	{r7}
 800c3f0:	b083      	sub	sp, #12
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c406:	b590      	push	{r4, r7, lr}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff ffed 	bl	800c3ee <_ZNKSt16initializer_listIiE5beginEv>
 800c414:	4604      	mov	r4, r0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f001 f8ff 	bl	800d61a <_ZNKSt16initializer_listIiE4sizeEv>
 800c41c:	4603      	mov	r3, r0
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4423      	add	r3, r4
 800c422:	4618      	mov	r0, r3
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	bd90      	pop	{r4, r7, pc}

0800c42a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fc8c 	bl	800cd56 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	68b8      	ldr	r0, [r7, #8]
 800c45a:	f001 f8ea 	bl	800d632 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c45e:	4603      	mov	r3, r0
 800c460:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c462:	68fc      	ldr	r4, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff fa24 	bl	800b8b4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c46c:	4603      	mov	r3, r0
 800c46e:	4619      	mov	r1, r3
 800c470:	6978      	ldr	r0, [r7, #20]
 800c472:	f7ff fa01 	bl	800b878 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>
 800c476:	4603      	mov	r3, r0
 800c478:	4619      	mov	r1, r3
 800c47a:	4620      	mov	r0, r4
 800c47c:	f001 f8ed 	bl	800d65a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>
 800c480:	4602      	mov	r2, r0
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	441a      	add	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff fa0a 	bl	800b8b4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c4a0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c4a2:	4622      	mov	r2, r4
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	68b8      	ldr	r0, [r7, #8]
 800c4a8:	f001 f8eb 	bl	800d682 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>
 800c4ac:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	605a      	str	r2, [r3, #4]
	}
 800c4b2:	bf00      	nop
 800c4b4:	371c      	adds	r7, #28
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd90      	pop	{r4, r7, pc}

0800c4ba <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr

0800c4da <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c4da:	b480      	push	{r7}
 800c4dc:	b083      	sub	sp, #12
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	370c      	adds	r7, #12
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
	...

0800c508 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	461a      	mov	r2, r3
 800c516:	2300      	movs	r3, #0
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	6053      	str	r3, [r2, #4]
 800c51c:	6093      	str	r3, [r2, #8]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe fd10 	bl	800af46 <_ZNSt14_Function_baseC1Ev>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f001 f8d7 	bl	800d6e4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00e      	beq.n	800c55a <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800c53c:	687c      	ldr	r4, [r7, #4]
 800c53e:	6838      	ldr	r0, [r7, #0]
 800c540:	f7ff ffd6 	bl	800c4f0 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c544:	4603      	mov	r3, r0
 800c546:	4619      	mov	r1, r3
 800c548:	4620      	mov	r0, r4
 800c54a:	f001 f8db 	bl	800d704 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a04      	ldr	r2, [pc, #16]	; (800c564 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 800c552:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a04      	ldr	r2, [pc, #16]	; (800c568 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 800c558:	609a      	str	r2, [r3, #8]
	}
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	bd90      	pop	{r4, r7, pc}
 800c564:	0800d729 	.word	0x0800d729
 800c568:	0800d76b 	.word	0x0800d76b

0800c56c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
	...

0800c584 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	461a      	mov	r2, r3
 800c592:	2300      	movs	r3, #0
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	6053      	str	r3, [r2, #4]
 800c598:	6093      	str	r3, [r2, #8]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fcd2 	bl	800af46 <_ZNSt14_Function_baseC1Ev>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c5a8:	6838      	ldr	r0, [r7, #0]
 800c5aa:	f001 f8fd 	bl	800d7a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00e      	beq.n	800c5d2 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800c5b4:	687c      	ldr	r4, [r7, #4]
 800c5b6:	6838      	ldr	r0, [r7, #0]
 800c5b8:	f7ff ffd8 	bl	800c56c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f001 f8fc 	bl	800d7be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a04      	ldr	r2, [pc, #16]	; (800c5dc <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800c5ca:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a04      	ldr	r2, [pc, #16]	; (800c5e0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 800c5d0:	609a      	str	r2, [r3, #8]
	}
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd90      	pop	{r4, r7, pc}
 800c5dc:	0800d7e3 	.word	0x0800d7e3
 800c5e0:	0800d825 	.word	0x0800d825

0800c5e4 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f001 f936 	bl	800d862 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f808 	bl	800c60c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4618      	mov	r0, r3
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4618      	mov	r0, r3
 800c618:	f001 f930 	bl	800d87c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c61c:	4603      	mov	r3, r0
 800c61e:	4618      	mov	r0, r3
 800c620:	3708      	adds	r7, #8
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4618      	mov	r0, r3
 800c632:	f001 f930 	bl	800d896 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 800c636:	4603      	mov	r3, r0
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 800c650:	6838      	ldr	r0, [r7, #0]
 800c652:	f00d f8a7 	bl	80197a4 <_ZdaPv>
	}
 800c656:	bf00      	nop
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c65e:	b580      	push	{r7, lr}
 800c660:	b082      	sub	sp, #8
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4618      	mov	r0, r3
 800c66a:	f001 f921 	bl	800d8b0 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c66e:	4603      	mov	r3, r0
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fe49 	bl	800b31e <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f808 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c692:	4602      	mov	r2, r0
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f001 f90c 	bl	800d8ca <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f884 	bl	800c7d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800c6ec:	b590      	push	{r4, r7, lr}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c6f6:	683c      	ldr	r4, [r7, #0]
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	d006      	beq.n	800c70a <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f7f4 ff6d 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800c702:	2110      	movs	r1, #16
 800c704:	4620      	mov	r0, r4
 800c706:	f00d f84b 	bl	80197a0 <_ZdlPvj>
      }
 800c70a:	bf00      	nop
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd90      	pop	{r4, r7, pc}

0800c712 <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c712:	b580      	push	{r7, lr}
 800c714:	b082      	sub	sp, #8
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f001 f8e1 	bl	800d8e4 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c722:	4603      	mov	r3, r0
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4618      	mov	r0, r3
 800c73a:	f001 f8e0 	bl	800d8fe <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800c73e:	4603      	mov	r3, r0
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4618      	mov	r0, r3
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b082      	sub	sp, #8
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f8e0 	bl	800d918 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f001 f8e8 	bl	800d930 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
 800c772:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ff94 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c77a:	4603      	mov	r3, r0
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff ff8e 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c786:	4602      	mov	r2, r0
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d007      	beq.n	800c7a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f81e 	bl	800c7d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c798:	4603      	mov	r3, r0
 800c79a:	68f9      	ldr	r1, [r7, #12]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff ffa5 	bl	800c6ec <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 800c7a2:	bf00      	nop
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff ff75 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7ff ff6f 	bl	800c6a2 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	601a      	str	r2, [r3, #0]
	return __p;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
      }
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f001 f8b4 	bl	800d94c <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c7ee:	b480      	push	{r7}
 800c7f0:	b083      	sub	sp, #12
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4618      	mov	r0, r3
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 f89b 	bl	800d964 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	{ }
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d018      	beq.n	800c87a <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 f844 	bl	800c8d8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800c850:	4602      	mov	r2, r0
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	109b      	asrs	r3, r3, #2
 800c85a:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c85c:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	691a      	ldr	r2, [r3, #16]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c868:	4413      	add	r3, r2
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	4619      	mov	r1, r3
 800c86e:	f000 ff2a 	bl	800d6c6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	f001 f88a 	bl	800d98e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c882:	b590      	push	{r4, r7, lr}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 800c88c:	687c      	ldr	r4, [r7, #4]
 800c88e:	6838      	ldr	r0, [r7, #0]
 800c890:	f000 f80a 	bl	800c8a8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800c894:	4603      	mov	r3, r0
 800c896:	4619      	mov	r1, r3
 800c898:	4620      	mov	r0, r4
 800c89a:	f001 f88d 	bl	800d9b8 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd90      	pop	{r4, r7, pc}

0800c8a8 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	331f      	adds	r3, #31
 800c8b4:	095b      	lsrs	r3, r3, #5
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d008      	beq.n	800c8fa <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	3b04      	subs	r3, #4
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7ff ffe7 	bl	800c8c2 <_ZSt11__addressofImEPT_RS0_>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	e000      	b.n	800c8fc <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 800c8fa:	2300      	movs	r3, #0
	}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff ffed 	bl	800c904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c92a:	4602      	mov	r2, r0
 800c92c:	f107 0308 	add.w	r3, r7, #8
 800c930:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c934:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800c938:	6838      	ldr	r0, [r7, #0]
 800c93a:	f7ff ffe3 	bl	800c904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c93e:	4602      	mov	r2, r0
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c946:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800c94a:	f107 0308 	add.w	r3, r7, #8
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff ffd8 	bl	800c904 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c954:	4602      	mov	r2, r0
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c95c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4618      	mov	r0, r3
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7ff ffed 	bl	800c968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c98e:	4603      	mov	r3, r0
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c994:	6838      	ldr	r0, [r7, #0]
 800c996:	f7ff ffe7 	bl	800c968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c99a:	4603      	mov	r3, r0
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c9a2:	f107 030c 	add.w	r3, r7, #12
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ffde 	bl	800c968 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	601a      	str	r2, [r3, #0]
    }
 800c9b4:	bf00      	nop
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ffed 	bl	800c9bc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c9e8:	6838      	ldr	r0, [r7, #0]
 800c9ea:	f7ff ffe7 	bl	800c9bc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c9f6:	f107 030c 	add.w	r3, r7, #12
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff ffde 	bl	800c9bc <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800ca00:	4603      	mov	r3, r0
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	601a      	str	r2, [r3, #0]
    }
 800ca08:	bf00      	nop
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800ca26:	b5b0      	push	{r4, r5, r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800ca32:	68fc      	ldr	r4, [r7, #12]
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f000 ffcd 	bl	800d9d4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff ffe7 	bl	800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca42:	4603      	mov	r3, r0
 800ca44:	461a      	mov	r2, r3
 800ca46:	4629      	mov	r1, r5
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f000 ffce 	bl	800d9ea <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bdb0      	pop	{r4, r5, r7, pc}

0800ca58 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 ffdf 	bl	800da26 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f000 ffde 	bl	800da3e <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ca94:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ca98:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 ffdc 	bl	800da58 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>
 800caa0:	4603      	mov	r3, r0
 800caa2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800caa4:	f107 0208 	add.w	r2, r7, #8
 800caa8:	f107 030c 	add.w	r3, r7, #12
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fb f88b 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800cab4:	4603      	mov	r3, r0
 800cab6:	681b      	ldr	r3, [r3, #0]
      }
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff fab6 	bl	800c03e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	4618      	mov	r0, r3
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fbda 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800caee:	4602      	mov	r2, r0
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	441a      	add	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	609a      	str	r2, [r3, #8]
      }
 800cb0a:	bf00      	nop
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>:
  // __uninitialized_default_n_a
  // Fills [first, first + n) with value_types constructed by the allocator
  // alloc, with no arguments passed to the construct call.
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b086      	sub	sp, #24
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
				_Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __n > 0; --__n, (void) ++__cur)
 800cb22:	e00d      	b.n	800cb40 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x2e>
	    __traits::construct(__alloc, std::__addressof(*__cur));
 800cb24:	6978      	ldr	r0, [r7, #20]
 800cb26:	f000 f813 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 ff9f 	bl	800da72 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __n > 0; --__n, (void) ++__cur)
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	60bb      	str	r3, [r7, #8]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1ee      	bne.n	800cb24 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x12>
	  return __cur;
 800cb46:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__first, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cb70:	2200      	movs	r2, #0
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 ff89 	bl	800da8c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>
 800cb7a:	bf00      	nop
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	68b9      	ldr	r1, [r7, #8]
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f000 ff89 	bl	800daaa <_ZN2ei7EiAllocIfE10deallocateEPfj>
 800cb98:	bf00      	nop
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800cba8:	1d3b      	adds	r3, r7, #4
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fe fd33 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff ffea 	bl	800cba0 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	1a9b      	subs	r3, r3, r2
 800cbd2:	109b      	asrs	r3, r3, #2
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	1d3b      	adds	r3, r7, #4
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 ff72 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cbea:	b590      	push	{r4, r7, lr}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fe fd0e 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	681c      	ldr	r4, [r3, #0]
 800cbfe:	6838      	ldr	r0, [r7, #0]
 800cc00:	f7fe fd09 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cc04:	4603      	mov	r3, r0
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	1ae3      	subs	r3, r4, r3
 800cc0a:	109b      	asrs	r3, r3, #2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd90      	pop	{r4, r7, pc}

0800cc14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800cc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
 800cc20:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800cc22:	e01b      	b.n	800cc5c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800cc2a:	4633      	mov	r3, r6
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	68b9      	ldr	r1, [r7, #8]
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f000 ff5f 	bl	800daf4 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
 800cc36:	e021      	b.n	800cc7c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x68>
	  --__depth_limit;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800cc3e:	462a      	mov	r2, r5
 800cc40:	68b9      	ldr	r1, [r7, #8]
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f000 ff6d 	bl	800db22 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	68b9      	ldr	r1, [r7, #8]
 800cc52:	6978      	ldr	r0, [r7, #20]
 800cc54:	f7ff ffde 	bl	800cc14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  __last = __cut;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800cc5c:	f107 020c 	add.w	r2, r7, #12
 800cc60:	f107 0308 	add.w	r3, r7, #8
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7ff ffbf 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b10      	cmp	r3, #16
 800cc70:	bfcc      	ite	gt
 800cc72:	2301      	movgt	r3, #1
 800cc74:	2300      	movle	r3, #0
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1d3      	bne.n	800cc24 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x10>
    }
 800cc7c:	371c      	adds	r7, #28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc82 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800cc82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	60f8      	str	r0, [r7, #12]
 800cc8a:	60b9      	str	r1, [r7, #8]
 800cc8c:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800cc8e:	f107 020c 	add.w	r2, r7, #12
 800cc92:	f107 0308 	add.w	r3, r7, #8
 800cc96:	4611      	mov	r1, r2
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7ff ffa6 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b10      	cmp	r3, #16
 800cca2:	bfcc      	ite	gt
 800cca4:	2301      	movgt	r3, #1
 800cca6:	2300      	movle	r3, #0
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d018      	beq.n	800cce0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800ccae:	f107 030c 	add.w	r3, r7, #12
 800ccb2:	2110      	movs	r1, #16
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 ff05 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	4632      	mov	r2, r6
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 ff6f 	bl	800dba4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800ccc6:	f107 030c 	add.w	r3, r7, #12
 800ccca:	2110      	movs	r1, #16
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 fef9 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	462a      	mov	r2, r5
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 ffc9 	bl	800dc70 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800ccde:	e004      	b.n	800ccea <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800cce0:	4622      	mov	r2, r4
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 ff5d 	bl	800dba4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800ccea:	bf00      	nop
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccf2 <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ccf2:	b590      	push	{r4, r7, lr}
 800ccf4:	b083      	sub	sp, #12
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7fe fd28 	bl	800b752 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cd02:	4603      	mov	r3, r0
 800cd04:	681c      	ldr	r4, [r3, #0]
 800cd06:	6838      	ldr	r0, [r7, #0]
 800cd08:	f7fe fd23 	bl	800b752 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	429c      	cmp	r4, r3
 800cd12:	bf0c      	ite	eq
 800cd14:	2301      	moveq	r3, #1
 800cd16:	2300      	movne	r3, #0
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd90      	pop	{r4, r7, pc}

0800cd22 <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b084      	sub	sp, #16
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cd2a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cd2e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 ffc2 	bl	800dcba <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>
 800cd36:	4603      	mov	r3, r0
 800cd38:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cd3a:	f107 0208 	add.w	r2, r7, #8
 800cd3e:	f107 030c 	add.w	r3, r7, #12
 800cd42:	4611      	mov	r1, r2
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fa ff40 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	681b      	ldr	r3, [r3, #0]
      }
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 ffb6 	bl	800dcd4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>
	{ }
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cd72:	b480      	push	{r7}
 800cd74:	b083      	sub	sp, #12
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cd92:	2200      	movs	r2, #0
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 ffc3 	bl	800dd22 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 ffc3 	bl	800dd40 <_ZN2ei7EiAllocIiE10deallocateEPij>
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const _Alloc& __rhs)
 800cdc2:	b590      	push	{r4, r7, lr}
 800cdc4:	b083      	sub	sp, #12
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
      { return _S_select(__rhs, 0); }
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 ffc4 	bl	800dd5a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>
 800cdd2:	bf00      	nop
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd90      	pop	{r4, r7, pc}

0800cddc <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 ffbe 	bl	800dd6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800cdf2:	bf00      	nop
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}

0800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	370c      	adds	r7, #12
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 ffb2 	bl	800dd88 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 800ce24:	bf00      	nop
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ce42:	b590      	push	{r4, r7, lr}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	60f8      	str	r0, [r7, #12]
 800ce4a:	60b9      	str	r1, [r7, #8]
 800ce4c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff ffec 	bl	800ce2c <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ce54:	4604      	mov	r4, r0
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	2008      	movs	r0, #8
 800ce5c:	f7f4 f9b8 	bl	80011d0 <_ZnwjPv>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4622      	mov	r2, r4
 800ce64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce68:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800ce6c:	bf00      	nop
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd90      	pop	{r4, r7, pc}

0800ce74 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b087      	sub	sp, #28
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 ff90 	bl	800dda6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ce86:	4604      	mov	r4, r0
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7fd f9ff 	bl	800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	1ae2      	subs	r2, r4, r3
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	bf34      	ite	cc
 800ce98:	2301      	movcc	r3, #1
 800ce9a:	2300      	movcs	r3, #0
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f00c fc95 	bl	80197d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f7fd f9ef 	bl	800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ceae:	4604      	mov	r4, r0
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f7fd f9eb 	bl	800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	613b      	str	r3, [r7, #16]
 800ceba:	f107 0208 	add.w	r2, r7, #8
 800cebe:	f107 0310 	add.w	r3, r7, #16
 800cec2:	4611      	mov	r1, r2
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe f966 	bl	800b196 <_ZSt3maxIjERKT_S2_S2_>
 800ceca:	4603      	mov	r3, r0
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4423      	add	r3, r4
 800ced0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f7fd f9da 	bl	800a28c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ced8:	4602      	mov	r2, r0
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	4293      	cmp	r3, r2
 800cede:	d306      	bcc.n	800ceee <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f000 ff60 	bl	800dda6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cee6:	4602      	mov	r2, r0
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d904      	bls.n	800cef8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f000 ff59 	bl	800dda6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cef4:	4603      	mov	r3, r0
 800cef6:	e000      	b.n	800cefa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 800cef8:	697b      	ldr	r3, [r7, #20]
      }
 800cefa:	4618      	mov	r0, r3
 800cefc:	371c      	adds	r7, #28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd90      	pop	{r4, r7, pc}

0800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cf02:	b590      	push	{r4, r7, lr}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f835 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf12:	4603      	mov	r3, r0
 800cf14:	681c      	ldr	r4, [r3, #0]
 800cf16:	6838      	ldr	r0, [r7, #0]
 800cf18:	f000 f830 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	1ae3      	subs	r3, r4, r3
 800cf22:	10db      	asrs	r3, r3, #3
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd90      	pop	{r4, r7, pc}

0800cf2c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6839      	ldr	r1, [r7, #0]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 ff41 	bl	800ddc8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 800cf46:	4603      	mov	r3, r0
 800cf48:	e000      	b.n	800cf4c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800cf4a:	2300      	movs	r3, #0
      }
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cf54:	b590      	push	{r4, r7, lr}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cf62:	f88d 4000 	strb.w	r4, [sp]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	68b9      	ldr	r1, [r7, #8]
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f000 ff39 	bl	800dde4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800cf72:	4603      	mov	r3, r0
      }
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd90      	pop	{r4, r7, pc}

0800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cf92:	b590      	push	{r4, r7, lr}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 ff31 	bl	800de08 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	68b8      	ldr	r0, [r7, #8]
 800cfaa:	f000 ff2d 	bl	800de08 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cfae:	4601      	mov	r1, r0
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f000 ff36 	bl	800de26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 800cfba:	4603      	mov	r3, r0
    }
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd90      	pop	{r4, r7, pc}

0800cfc4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	370c      	adds	r7, #12
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800cfe4:	463b      	mov	r3, r7
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff ffec 	bl	800cfc4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4618      	mov	r0, r3
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cff6:	b590      	push	{r4, r7, lr}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff ffbb 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800d006:	4603      	mov	r3, r0
 800d008:	681c      	ldr	r4, [r3, #0]
 800d00a:	6838      	ldr	r0, [r7, #0]
 800d00c:	f7ff ffb6 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800d010:	4603      	mov	r3, r0
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	429c      	cmp	r4, r3
 800d016:	bf14      	ite	ne
 800d018:	2301      	movne	r3, #1
 800d01a:	2300      	moveq	r3, #0
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	4618      	mov	r0, r3
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	bd90      	pop	{r4, r7, pc}

0800d026 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800d026:	b580      	push	{r7, lr}
 800d028:	b086      	sub	sp, #24
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	60f8      	str	r0, [r7, #12]
 800d02e:	60b9      	str	r1, [r7, #8]
 800d030:	607a      	str	r2, [r7, #4]
 800d032:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800d034:	e01b      	b.n	800d06e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d106      	bne.n	800d04a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800d03c:	783b      	ldrb	r3, [r7, #0]
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	68b9      	ldr	r1, [r7, #8]
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f000 ff20 	bl	800de88 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800d048:	e021      	b.n	800d08e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800d050:	783a      	ldrb	r2, [r7, #0]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f000 ff2e 	bl	800deb6 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800d05a:	4603      	mov	r3, r0
 800d05c:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800d05e:	783b      	ldrb	r3, [r7, #0]
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	68b9      	ldr	r1, [r7, #8]
 800d064:	6978      	ldr	r0, [r7, #20]
 800d066:	f7ff ffde 	bl	800d026 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800d06e:	f107 020c 	add.w	r2, r7, #12
 800d072:	f107 0308 	add.w	r3, r7, #8
 800d076:	4611      	mov	r1, r2
 800d078:	4618      	mov	r0, r3
 800d07a:	f7ff ff42 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b10      	cmp	r3, #16
 800d082:	bfcc      	ite	gt
 800d084:	2301      	movgt	r3, #1
 800d086:	2300      	movle	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1d3      	bne.n	800d036 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
    }
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800d0a0:	f107 020c 	add.w	r2, r7, #12
 800d0a4:	f107 0308 	add.w	r3, r7, #8
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff ff29 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b10      	cmp	r3, #16
 800d0b4:	bfcc      	ite	gt
 800d0b6:	2301      	movgt	r3, #1
 800d0b8:	2300      	movle	r3, #0
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d018      	beq.n	800d0f2 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800d0c0:	f107 030c 	add.w	r3, r7, #12
 800d0c4:	2110      	movs	r1, #16
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 ff38 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	793a      	ldrb	r2, [r7, #4]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f000 ff4a 	bl	800df6c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800d0d8:	f107 030c 	add.w	r3, r7, #12
 800d0dc:	2110      	movs	r1, #16
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 ff2c 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	793a      	ldrb	r2, [r7, #4]
 800d0e8:	68b9      	ldr	r1, [r7, #8]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 ffab 	bl	800e046 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d0f0:	e004      	b.n	800d0fc <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800d0f2:	793a      	ldrb	r2, [r7, #4]
 800d0f4:	68b9      	ldr	r1, [r7, #8]
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 ff38 	bl	800df6c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d0fc:	bf00      	nop
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d104:	b590      	push	{r4, r7, lr}
 800d106:	b087      	sub	sp, #28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f7ff f8a5 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d116:	4604      	mov	r4, r0
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7fc fd1a 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d11e:	4603      	mov	r3, r0
 800d120:	1ae2      	subs	r2, r4, r3
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	429a      	cmp	r2, r3
 800d126:	bf34      	ite	cc
 800d128:	2301      	movcc	r3, #1
 800d12a:	2300      	movcs	r3, #0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f00c fb4d 	bl	80197d2 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7fc fd0a 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d13e:	4604      	mov	r4, r0
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f7fc fd06 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d146:	4603      	mov	r3, r0
 800d148:	613b      	str	r3, [r7, #16]
 800d14a:	f107 0208 	add.w	r2, r7, #8
 800d14e:	f107 0310 	add.w	r3, r7, #16
 800d152:	4611      	mov	r1, r2
 800d154:	4618      	mov	r0, r3
 800d156:	f7fe f81e 	bl	800b196 <_ZSt3maxIjERKT_S2_S2_>
 800d15a:	4603      	mov	r3, r0
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4423      	add	r3, r4
 800d160:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f7fc fcf5 	bl	8009b52 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d168:	4602      	mov	r2, r0
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d306      	bcc.n	800d17e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x7a>
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f7ff f875 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d176:	4602      	mov	r2, r0
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d904      	bls.n	800d188 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x84>
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f7ff f86e 	bl	800c260 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d184:	4603      	mov	r3, r0
 800d186:	e000      	b.n	800d18a <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x86>
 800d188:	697b      	ldr	r3, [r7, #20]
      }
 800d18a:	4618      	mov	r0, r3
 800d18c:	371c      	adds	r7, #28
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd90      	pop	{r4, r7, pc}

0800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800d192:	b590      	push	{r4, r7, lr}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	60f8      	str	r0, [r7, #12]
 800d19a:	60b9      	str	r1, [r7, #8]
 800d19c:	607a      	str	r2, [r7, #4]
 800d19e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7ff f8a6 	bl	800c2f2 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	68b8      	ldr	r0, [r7, #8]
 800d1aa:	f7ff f8a2 	bl	800c2f2 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 f9c9 	bl	800d54c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800d1ba:	4603      	mov	r3, r0
    }
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd90      	pop	{r4, r7, pc}

0800d1c4 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d1c4:	b480      	push	{r7}
 800d1c6:	b083      	sub	sp, #12
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	4618      	mov	r0, r3
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	687a      	ldr	r2, [r7, #4]
 800d22e:	4413      	add	r3, r2
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	4413      	add	r3, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	4413      	add	r3, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	4413      	add	r3, r2
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
 800d2da:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800d306:	b590      	push	{r4, r7, lr}
 800d308:	b085      	sub	sp, #20
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	60b9      	str	r1, [r7, #8]
 800d310:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff ffec 	bl	800d2f0 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d318:	4603      	mov	r3, r0
 800d31a:	681c      	ldr	r4, [r3, #0]
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	4619      	mov	r1, r3
 800d320:	2004      	movs	r0, #4
 800d322:	f7f3 ff55 	bl	80011d0 <_ZnwjPv>
 800d326:	4603      	mov	r3, r0
 800d328:	601c      	str	r4, [r3, #0]
	}
 800d32a:	bf00      	nop
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}

0800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7ff ffec 	bl	800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d35a:	4603      	mov	r3, r0
 800d35c:	461a      	mov	r2, r3
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fe95 	bl	800e090 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d366:	bf00      	nop
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
	...

0800d370 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d370:	b5b0      	push	{r4, r5, r7, lr}
 800d372:	b08c      	sub	sp, #48	; 0x30
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d37c:	4a59      	ldr	r2, [pc, #356]	; (800d4e4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800d37e:	2101      	movs	r1, #1
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff febf 	bl	800d104 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800d386:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f7fc fcfa 	bl	8009d8e <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800d39a:	4603      	mov	r3, r0
 800d39c:	617b      	str	r3, [r7, #20]
 800d39e:	f107 0214 	add.w	r2, r7, #20
 800d3a2:	f107 0308 	add.w	r3, r7, #8
 800d3a6:	4611      	mov	r1, r2
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff fc1e 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe ff73 	bl	800c2a2 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800d3bc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800d3c2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	18d5      	adds	r5, r2, r3
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ffb0 	bl	800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff ffb5 	bl	800d348 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  __new_finish = pointer();
 800d3de:	2300      	movs	r3, #0
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800d3e2:	f7fd fc86 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d027      	beq.n	800d43c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d3ec:	f107 0308 	add.w	r3, r7, #8
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe f910 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe f95f 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d402:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d404:	69ba      	ldr	r2, [r7, #24]
 800d406:	4621      	mov	r1, r4
 800d408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d40a:	f7fe ff5e 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d40e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	3304      	adds	r3, #4
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d416:	f107 0308 	add.w	r3, r7, #8
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe f8fb 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d420:	4603      	mov	r3, r0
 800d422:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe f94a 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d42c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d42e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d430:	6a39      	ldr	r1, [r7, #32]
 800d432:	4620      	mov	r0, r4
 800d434:	f7fe ff49 	bl	800c2ca <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d438:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d43a:	e026      	b.n	800d48a <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe f8e8 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d446:	4603      	mov	r3, r0
 800d448:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fe f937 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d452:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	4621      	mov	r1, r4
 800d458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d45a:	f7ff fe9a 	bl	800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d45e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	3304      	adds	r3, #4
 800d464:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800d466:	f107 0308 	add.w	r3, r7, #8
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe f8d3 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d470:	4603      	mov	r3, r0
 800d472:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe f922 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d47c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d480:	6a39      	ldr	r1, [r7, #32]
 800d482:	4620      	mov	r0, r4
 800d484:	f7ff fe85 	bl	800d192 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d488:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d48a:	f7fd fc32 	bl	800acf2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d48e:	4603      	mov	r3, r0
 800d490:	f083 0301 	eor.w	r3, r3, #1
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d009      	beq.n	800d4ae <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe f90f 	bl	800b6c0 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6a39      	ldr	r1, [r7, #32]
 800d4a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4aa:	f7fe f914 	bl	800b6d6 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800d4ae:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4be:	f7fe f925 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	69ba      	ldr	r2, [r7, #24]
 800d4c6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4cc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	69ba      	ldr	r2, [r7, #24]
 800d4d4:	441a      	add	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	609a      	str	r2, [r3, #8]
    }
 800d4da:	bf00      	nop
 800d4dc:	3730      	adds	r7, #48	; 0x30
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0802108c 	.word	0x0802108c

0800d4e8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d4f2:	6839      	ldr	r1, [r7, #0]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 fde1 	bl	800e0bc <_ZN2ei7EiAllocIfE8allocateEj>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 fde0 	bl	800e0de <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d51e:	4603      	mov	r3, r0
      }
 800d520:	4618      	mov	r0, r3
 800d522:	3710      	adds	r7, #16
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800d532:	463b      	mov	r3, r7
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fdef 	bl	800e118 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 800d53a:	4603      	mov	r3, r0
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	601a      	str	r2, [r3, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
 800d558:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d55e:	e016      	b.n	800d58e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d560:	6978      	ldr	r0, [r7, #20]
 800d562:	f7ff faf5 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800d566:	4604      	mov	r4, r0
 800d568:	f107 030c 	add.w	r3, r7, #12
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 fdff 	bl	800e170 <_ZNKSt13move_iteratorIPfEdeEv>
 800d572:	4603      	mov	r3, r0
 800d574:	461a      	mov	r2, r3
 800d576:	4621      	mov	r1, r4
 800d578:	6838      	ldr	r0, [r7, #0]
 800d57a:	f7ff fee5 	bl	800d348 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d57e:	f107 030c 	add.w	r3, r7, #12
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fde4 	bl	800e150 <_ZNSt13move_iteratorIPfEppEv>
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	3304      	adds	r3, #4
 800d58c:	617b      	str	r3, [r7, #20]
 800d58e:	f107 0208 	add.w	r2, r7, #8
 800d592:	f107 030c 	add.w	r3, r7, #12
 800d596:	4611      	mov	r1, r2
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 fdc8 	bl	800e12e <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1dd      	bne.n	800d560 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d5a4:	697b      	ldr	r3, [r7, #20]
    }
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	371c      	adds	r7, #28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd90      	pop	{r4, r7, pc}

0800d5ae <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d5ae:	b5b0      	push	{r4, r5, r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d5b8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d5ba:	1d3b      	adds	r3, r7, #4
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fe fed2 	bl	800c366 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f000 fdde 	bl	800e188 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d5cc:	4603      	mov	r3, r0
    }
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bdb0      	pop	{r4, r5, r7, pc}

0800d5d6 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b086      	sub	sp, #24
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	607a      	str	r2, [r7, #4]
 800d5e2:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5e8:	e00e      	b.n	800d608 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d5ea:	6978      	ldr	r0, [r7, #20]
 800d5ec:	f7ff fab0 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6838      	ldr	r0, [r7, #0]
 800d5f8:	f7fe fd35 	bl	800c066 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3304      	adds	r3, #4
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	3304      	adds	r3, #4
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d1ec      	bne.n	800d5ea <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d610:	697b      	ldr	r3, [r7, #20]
    }
 800d612:	4618      	mov	r0, r3
 800d614:	3718      	adds	r7, #24
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d632:	b5b0      	push	{r4, r5, r7, lr}
 800d634:	b082      	sub	sp, #8
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d63c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d63e:	1d3b      	adds	r3, r7, #4
 800d640:	4618      	mov	r0, r3
 800d642:	f000 fdb1 	bl	800e1a8 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d646:	462a      	mov	r2, r5
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 fdb7 	bl	800e1be <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d650:	4603      	mov	r3, r0
    }
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bdb0      	pop	{r4, r5, r7, pc}

0800d65a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b082      	sub	sp, #8
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d006      	beq.n	800d678 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x1e>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fdb5 	bl	800e1de <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>
 800d674:	4603      	mov	r3, r0
 800d676:	e000      	b.n	800d67a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x20>
 800d678:	2300      	movs	r3, #0
      }
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d694:	e00e      	b.n	800d6b4 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d696:	6978      	ldr	r0, [r7, #20]
 800d698:	f7ff fb6b 	bl	800cd72 <_ZSt11__addressofIiEPT_RS0_>
 800d69c:	4603      	mov	r3, r0
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	6838      	ldr	r0, [r7, #0]
 800d6a4:	f000 fb2a 	bl	800dcfc <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	617b      	str	r3, [r7, #20]
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d1ec      	bne.n	800d696 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d6bc:	697b      	ldr	r3, [r7, #20]
    }
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b084      	sub	sp, #16
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	60f8      	str	r0, [r7, #12]
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	68b9      	ldr	r1, [r7, #8]
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 fd8f 	bl	800e1fa <_ZN2ei7EiAllocImE10deallocateEPmj>
 800d6dc:	bf00      	nop
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bf14      	ite	ne
 800d6f2:	2301      	movne	r3, #1
 800d6f4:	2300      	moveq	r3, #0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d70e:	6838      	ldr	r0, [r7, #0]
 800d710:	f7fe feee 	bl	800c4f0 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d714:	4603      	mov	r3, r0
 800d716:	4622      	mov	r2, r4
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fd7a 	bl	800e214 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	bd90      	pop	{r4, r7, pc}

0800d728 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d736:	68f8      	ldr	r0, [r7, #12]
 800d738:	f000 fd85 	bl	800e246 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d73c:	4604      	mov	r4, r0
 800d73e:	68b8      	ldr	r0, [r7, #8]
 800d740:	f7fe f939 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d744:	4605      	mov	r5, r0
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7fe f935 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d74c:	4606      	mov	r6, r0
 800d74e:	6838      	ldr	r0, [r7, #0]
 800d750:	f7fe f93c 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d754:	4603      	mov	r3, r0
 800d756:	4632      	mov	r2, r6
 800d758:	4629      	mov	r1, r5
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fd84 	bl	800e268 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d760:	4603      	mov	r3, r0
      }
 800d762:	4618      	mov	r0, r3
 800d764:	3714      	adds	r7, #20
 800d766:	46bd      	mov	sp, r7
 800d768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d76a <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d76a:	b590      	push	{r4, r7, lr}
 800d76c:	b085      	sub	sp, #20
 800d76e:	af00      	add	r7, sp, #0
 800d770:	60f8      	str	r0, [r7, #12]
 800d772:	60b9      	str	r1, [r7, #8]
 800d774:	4613      	mov	r3, r2
 800d776:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d109      	bne.n	800d792 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f000 fd97 	bl	800e2b2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800d784:	4604      	mov	r4, r0
 800d786:	68b8      	ldr	r0, [r7, #8]
 800d788:	f000 fd5d 	bl	800e246 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d78c:	4603      	mov	r3, r0
 800d78e:	6023      	str	r3, [r4, #0]
	    break;
 800d790:	e005      	b.n	800d79e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	461a      	mov	r2, r3
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 fd97 	bl	800e2cc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d79e:	2300      	movs	r3, #0
      }
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd90      	pop	{r4, r7, pc}

0800d7a8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d7be:	b590      	push	{r4, r7, lr}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d7c8:	6838      	ldr	r0, [r7, #0]
 800d7ca:	f7fe fecf 	bl	800c56c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fdb3 	bl	800e340 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d7da:	bf00      	nop
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}

0800d7e2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d7e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e4:	b085      	sub	sp, #20
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	60f8      	str	r0, [r7, #12]
 800d7ea:	60b9      	str	r1, [r7, #8]
 800d7ec:	607a      	str	r2, [r7, #4]
 800d7ee:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f000 fdbe 	bl	800e372 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	68b8      	ldr	r0, [r7, #8]
 800d7fa:	f7fe f8dc 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d7fe:	4605      	mov	r5, r0
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f7fe f8d8 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d806:	4606      	mov	r6, r0
 800d808:	6838      	ldr	r0, [r7, #0]
 800d80a:	f7fe f8df 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d80e:	4603      	mov	r3, r0
 800d810:	4632      	mov	r2, r6
 800d812:	4629      	mov	r1, r5
 800d814:	4620      	mov	r0, r4
 800d816:	f000 fdbd 	bl	800e394 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d81a:	4603      	mov	r3, r0
      }
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d824 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d824:	b590      	push	{r4, r7, lr}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d832:	79fb      	ldrb	r3, [r7, #7]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d109      	bne.n	800d84c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 fdd0 	bl	800e3de <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800d83e:	4604      	mov	r4, r0
 800d840:	68b8      	ldr	r0, [r7, #8]
 800d842:	f000 fd96 	bl	800e372 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d846:	4603      	mov	r3, r0
 800d848:	6023      	str	r3, [r4, #0]
	    break;
 800d84a:	e005      	b.n	800d858 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d84c:	79fb      	ldrb	r3, [r7, #7]
 800d84e:	461a      	mov	r2, r3
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 fdd0 	bl	800e3f8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d858:	2300      	movs	r3, #0
      }
 800d85a:	4618      	mov	r0, r3
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd90      	pop	{r4, r7, pc}

0800d862 <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d862:	b580      	push	{r7, lr}
 800d864:	b082      	sub	sp, #8
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 fdfd 	bl	800e46c <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4618      	mov	r0, r3
 800d888:	f000 fe00 	bl	800e48c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d88c:	4603      	mov	r3, r0
 800d88e:	4618      	mov	r0, r3
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800d896:	b580      	push	{r7, lr}
 800d898:	b082      	sub	sp, #8
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fdff 	bl	800e4a4 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 fdfe 	bl	800e4bc <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 fdfd 	bl	800e4d4 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 fdfc 	bl	800e4ec <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b082      	sub	sp, #8
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fdfb 	bl	800e504 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d90e:	4603      	mov	r3, r0
 800d910:	4618      	mov	r0, r3
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 fdfb 	bl	800e51c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fdec 	bl	800e532 <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f3 fd99 	bl	80014a6 <_ZNSt13_Bit_iteratorC1Ev>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3308      	adds	r3, #8
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f3 fd94 	bl	80014a6 <_ZNSt13_Bit_iteratorC1Ev>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	611a      	str	r2, [r3, #16]
	{ }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800d98e:	b5b0      	push	{r4, r5, r7, lr}
 800d990:	b088      	sub	sp, #32
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 800d996:	f107 030c 	add.w	r3, r7, #12
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff ffe2 	bl	800d964 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	461d      	mov	r5, r3
 800d9a4:	f107 040c 	add.w	r4, r7, #12
 800d9a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	bf00      	nop
 800d9b2:	3720      	adds	r7, #32
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9b8 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fdc0 	bl	800e54a <_ZN2ei7EiAllocImE8allocateEj>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d9ea:	b590      	push	{r4, r7, lr}
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800d9f6:	68fc      	ldr	r4, [r7, #12]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff f809 	bl	800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4619      	mov	r1, r3
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fdbe 	bl	800e584 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	1d1c      	adds	r4, r3, #4
 800da0c:	68b8      	ldr	r0, [r7, #8]
 800da0e:	f7ff ffe1 	bl	800d9d4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800da12:	4603      	mov	r3, r0
 800da14:	4619      	mov	r1, r3
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fdc7 	bl	800e5aa <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	bd90      	pop	{r4, r7, pc}

0800da26 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fdcc 	bl	800e5cc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800da34:	4603      	mov	r3, r0
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800da3e:	b580      	push	{r7, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	f000 fdcd 	bl	800e5e8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800da4e:	4603      	mov	r3, r0
 800da50:	4618      	mov	r0, r3
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800da60:	2100      	movs	r1, #0
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fdcc 	bl	800e600 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>
 800da68:	4603      	mov	r3, r0
 800da6a:	4618      	mov	r0, r3
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fdc9 	bl	800e616 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800da84:	bf00      	nop
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800da8c:	b40e      	push	{r1, r2, r3}
 800da8e:	b580      	push	{r7, lr}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800da96:	6978      	ldr	r0, [r7, #20]
 800da98:	f000 fdcf 	bl	800e63a <_ZSt8_DestroyIfEvPT_>
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daa6:	b003      	add	sp, #12
 800daa8:	4770      	bx	lr

0800daaa <_ZN2ei7EiAllocIfE10deallocateEPfj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	60f8      	str	r0, [r7, #12]
 800dab2:	60b9      	str	r1, [r7, #8]
 800dab4:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800dab6:	68b8      	ldr	r0, [r7, #8]
 800dab8:	f008 fff4 	bl	8016aa4 <_Z7ei_freePv>
#endif
    }
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	4413      	add	r3, r2
 800dad8:	60fb      	str	r3, [r7, #12]
 800dada:	f107 020c 	add.w	r2, r7, #12
 800dade:	f107 0308 	add.w	r3, r7, #8
 800dae2:	4611      	mov	r1, r2
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fd fd86 	bl	800b5f6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	4618      	mov	r0, r3
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800daf4:	b590      	push	{r4, r7, lr}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	607a      	str	r2, [r7, #4]
 800db00:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800db02:	4623      	mov	r3, r4
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 fda0 	bl	800e64e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800db0e:	463b      	mov	r3, r7
 800db10:	461a      	mov	r2, r3
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 fdcd 	bl	800e6b4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
    }
 800db1a:	bf00      	nop
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd90      	pop	{r4, r7, pc}

0800db22 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800db22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db24:	b089      	sub	sp, #36	; 0x24
 800db26:	af02      	add	r7, sp, #8
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800db2e:	f107 020c 	add.w	r2, r7, #12
 800db32:	f107 0308 	add.w	r3, r7, #8
 800db36:	4611      	mov	r1, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff f856 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	da00      	bge.n	800db46 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_+0x24>
 800db44:	3301      	adds	r3, #1
 800db46:	105b      	asrs	r3, r3, #1
 800db48:	461a      	mov	r2, r3
 800db4a:	f107 030c 	add.w	r3, r7, #12
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff ffb7 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800db56:	4603      	mov	r3, r0
 800db58:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800db5a:	f107 030c 	add.w	r3, r7, #12
 800db5e:	2101      	movs	r1, #1
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff ffaf 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800db66:	4604      	mov	r4, r0
 800db68:	f107 0308 	add.w	r3, r7, #8
 800db6c:	2101      	movs	r1, #1
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 fdc7 	bl	800e702 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>
 800db74:	4603      	mov	r3, r0
 800db76:	f88d 5000 	strb.w	r5, [sp]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	4621      	mov	r1, r4
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f000 fdfd 	bl	800e77e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800db84:	f107 030c 	add.w	r3, r7, #12
 800db88:	2101      	movs	r1, #1
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff ff9a 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800db90:	4633      	mov	r3, r6
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	68b9      	ldr	r1, [r7, #8]
 800db96:	f000 fe47 	bl	800e828 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 800db9a:	4603      	mov	r3, r0
    }
 800db9c:	4618      	mov	r0, r3
 800db9e:	371c      	adds	r7, #28
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dba4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800dbb0:	f107 0208 	add.w	r2, r7, #8
 800dbb4:	f107 030c 	add.w	r3, r7, #12
 800dbb8:	4611      	mov	r1, r2
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 fe7c 	bl	800e8b8 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d150      	bne.n	800dc68 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dbc6:	f107 030c 	add.w	r3, r7, #12
 800dbca:	2101      	movs	r1, #1
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff ff79 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e03b      	b.n	800dc50 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
	  if (__comp(__i, __first))
 800dbd8:	1d3b      	adds	r3, r7, #4
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	6979      	ldr	r1, [r7, #20]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 fda8 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d026      	beq.n	800dc38 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800dbea:	f107 0314 	add.w	r3, r7, #20
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fc f916 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd f851 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dc02:	f107 0314 	add.w	r3, r7, #20
 800dc06:	2101      	movs	r1, #1
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff ff5b 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	6979      	ldr	r1, [r7, #20]
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fe67 	bl	800e8e8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 800dc1a:	f107 0310 	add.w	r3, r7, #16
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fd f83d 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dc24:	4604      	mov	r4, r0
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fc f8f8 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dc30:	4602      	mov	r2, r0
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	e006      	b.n	800dc46 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f7f3 fae9 	bl	8001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800dc3e:	4629      	mov	r1, r5
 800dc40:	6978      	ldr	r0, [r7, #20]
 800dc42:	f000 fe69 	bl	800e918 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dc46:	f107 0314 	add.w	r3, r7, #20
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fc f8d8 	bl	8009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dc50:	f107 0208 	add.w	r2, r7, #8
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	4611      	mov	r1, r2
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fc f8b8 	bl	8009dd0 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d1b8      	bne.n	800dbd8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800dc66:	e000      	b.n	800dc6a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc6>
      if (__first == __last) return;
 800dc68:	bf00      	nop
    }
 800dc6a:	371c      	adds	r7, #28
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc70 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800dc70:	b5b0      	push	{r4, r5, r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	e00b      	b.n	800dc9a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7f3 fac4 	bl	8001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800dc88:	4621      	mov	r1, r4
 800dc8a:	6978      	ldr	r0, [r7, #20]
 800dc8c:	f000 fe44 	bl	800e918 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dc90:	f107 0314 	add.w	r3, r7, #20
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fc f8b3 	bl	8009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dc9a:	f107 0208 	add.w	r2, r7, #8
 800dc9e:	f107 0314 	add.w	r3, r7, #20
 800dca2:	4611      	mov	r1, r2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fc f893 	bl	8009dd0 <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1e8      	bne.n	800dc82 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x12>
    }
 800dcb0:	bf00      	nop
 800dcb2:	bf00      	nop
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bdb0      	pop	{r4, r5, r7, pc}

0800dcba <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fe72 	bl	800e9ae <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>
 800dcca:	4603      	mov	r3, r0
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	605a      	str	r2, [r3, #4]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	609a      	str	r2, [r3, #8]
	{ }
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fe5b 	bl	800e9c4 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	461a      	mov	r2, r3
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 fe60 	bl	800e9da <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800dd1a:	bf00      	nop
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dd22:	b40e      	push	{r1, r2, r3}
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dd2c:	6978      	ldr	r0, [r7, #20]
 800dd2e:	f000 fe6a 	bl	800ea06 <_ZSt8_DestroyIiEvPT_>
 800dd32:	bf00      	nop
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd3c:	b003      	add	sp, #12
 800dd3e:	4770      	bx	lr

0800dd40 <_ZN2ei7EiAllocIiE10deallocateEPij>:
    void deallocate(T *p, size_t n) noexcept
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dd4c:	68b8      	ldr	r0, [r7, #8]
 800dd4e:	f008 fea9 	bl	8016aa4 <_Z7ei_freePv>
    }
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>:
	_S_select(_Alloc2& __a, ...)
 800dd5a:	b40f      	push	{r0, r1, r2, r3}
 800dd5c:	b480      	push	{r7}
 800dd5e:	af00      	add	r7, sp, #0
	{ return __a; }
 800dd60:	bf00      	nop
 800dd62:	4618      	mov	r0, r3
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	b004      	add	sp, #16
 800dd6c:	4770      	bx	lr

0800dd6e <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
    void deallocate(T *p, size_t n) noexcept
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dd7a:	68b8      	ldr	r0, [r7, #8]
 800dd7c:	f008 fe92 	bl	8016aa4 <_Z7ei_freePv>
    }
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dd88:	b40e      	push	{r1, r2, r3}
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b083      	sub	sp, #12
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dd92:	6978      	ldr	r0, [r7, #20]
 800dd94:	f000 fe41 	bl	800ea1a <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dda2:	b003      	add	sp, #12
 800dda4:	4770      	bx	lr

0800dda6 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 fe56 	bl	800ea62 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f000 fe38 	bl	800ea2e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800ddd2:	6839      	ldr	r1, [r7, #0]
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fe4f 	bl	800ea78 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 fe4e 	bl	800ea9a <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800ddfe:	4603      	mov	r3, r0
      }
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800de10:	f107 030c 	add.w	r3, r7, #12
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 fe5c 	bl	800ead4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800de26:	b590      	push	{r4, r7, lr}
 800de28:	b087      	sub	sp, #28
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	60b9      	str	r1, [r7, #8]
 800de30:	607a      	str	r2, [r7, #4]
 800de32:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800de38:	e016      	b.n	800de68 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800de3a:	6978      	ldr	r0, [r7, #20]
 800de3c:	f7fe ffdd 	bl	800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800de40:	4604      	mov	r4, r0
 800de42:	f107 030c 	add.w	r3, r7, #12
 800de46:	4618      	mov	r0, r3
 800de48:	f000 fe78 	bl	800eb3c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 800de4c:	4603      	mov	r3, r0
 800de4e:	461a      	mov	r2, r3
 800de50:	4621      	mov	r1, r4
 800de52:	6838      	ldr	r0, [r7, #0]
 800de54:	f000 fe7e 	bl	800eb54 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800de58:	f107 030c 	add.w	r3, r7, #12
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fe5c 	bl	800eb1a <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	3308      	adds	r3, #8
 800de66:	617b      	str	r3, [r7, #20]
 800de68:	f107 0208 	add.w	r2, r7, #8
 800de6c:	f107 030c 	add.w	r3, r7, #12
 800de70:	4611      	mov	r1, r2
 800de72:	4618      	mov	r0, r3
 800de74:	f000 fe40 	bl	800eaf8 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1dd      	bne.n	800de3a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x14>
	  return __cur;
 800de7e:	697b      	ldr	r3, [r7, #20]
    }
 800de80:	4618      	mov	r0, r3
 800de82:	371c      	adds	r7, #28
 800de84:	46bd      	mov	sp, r7
 800de86:	bd90      	pop	{r4, r7, pc}

0800de88 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
 800de94:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800de96:	783b      	ldrb	r3, [r7, #0]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	68b9      	ldr	r1, [r7, #8]
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f000 fe6c 	bl	800eb7a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800dea2:	463b      	mov	r3, r7
 800dea4:	461a      	mov	r2, r3
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fe99 	bl	800ebe0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800deb6:	b590      	push	{r4, r7, lr}
 800deb8:	b089      	sub	sp, #36	; 0x24
 800deba:	af02      	add	r7, sp, #8
 800debc:	60f8      	str	r0, [r7, #12]
 800debe:	60b9      	str	r1, [r7, #8]
 800dec0:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800dec2:	f107 020c 	add.w	r2, r7, #12
 800dec6:	f107 0308 	add.w	r3, r7, #8
 800deca:	4611      	mov	r1, r2
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff f818 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800ded2:	4603      	mov	r3, r0
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	da00      	bge.n	800deda <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_+0x24>
 800ded8:	3301      	adds	r3, #1
 800deda:	105b      	asrs	r3, r3, #1
 800dedc:	461a      	mov	r2, r3
 800dede:	f107 030c 	add.w	r3, r7, #12
 800dee2:	4611      	mov	r1, r2
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 f829 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800deea:	4603      	mov	r3, r0
 800deec:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800deee:	f107 030c 	add.w	r3, r7, #12
 800def2:	2101      	movs	r1, #1
 800def4:	4618      	mov	r0, r3
 800def6:	f000 f821 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800defa:	4604      	mov	r4, r0
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	2101      	movs	r1, #1
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fe93 	bl	800ec2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 800df08:	4602      	mov	r2, r0
 800df0a:	793b      	ldrb	r3, [r7, #4]
 800df0c:	f88d 3000 	strb.w	r3, [sp]
 800df10:	4613      	mov	r3, r2
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	4621      	mov	r1, r4
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f000 febe 	bl	800ec98 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800df1c:	f107 030c 	add.w	r3, r7, #12
 800df20:	2101      	movs	r1, #1
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f80a 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df28:	793b      	ldrb	r3, [r7, #4]
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	68b9      	ldr	r1, [r7, #8]
 800df2e:	f000 ff08 	bl	800ed42 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800df32:	4603      	mov	r3, r0
    }
 800df34:	4618      	mov	r0, r3
 800df36:	371c      	adds	r7, #28
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}

0800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	00db      	lsls	r3, r3, #3
 800df4e:	4413      	add	r3, r2
 800df50:	60fb      	str	r3, [r7, #12]
 800df52:	f107 020c 	add.w	r2, r7, #12
 800df56:	f107 0308 	add.w	r3, r7, #8
 800df5a:	4611      	mov	r1, r2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fd fe73 	bl	800bc48 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800df6c:	b5b0      	push	{r4, r5, r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800df78:	f107 0208 	add.w	r2, r7, #8
 800df7c:	f107 030c 	add.w	r3, r7, #12
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f000 ff25 	bl	800edd2 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d157      	bne.n	800e03e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800df8e:	f107 030c 	add.w	r3, r7, #12
 800df92:	2101      	movs	r1, #1
 800df94:	4618      	mov	r0, r3
 800df96:	f7ff ffd1 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df9a:	4603      	mov	r3, r0
 800df9c:	61fb      	str	r3, [r7, #28]
 800df9e:	e042      	b.n	800e026 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xba>
	  if (__comp(__i, __first))
 800dfa0:	1d3b      	adds	r3, r7, #4
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	69f9      	ldr	r1, [r7, #28]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 fe5a 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d02d      	beq.n	800e00e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xa2>
		__val = _GLIBCXX_MOVE(*__i);
 800dfb2:	f107 031c 	add.w	r3, r7, #28
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f000 ff34 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 ff3c 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f107 0314 	add.w	r3, r7, #20
 800dfca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfce:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dfd2:	f107 031c 	add.w	r3, r7, #28
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff ffaf 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	69f9      	ldr	r1, [r7, #28]
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 ff34 	bl	800ee52 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800dfea:	f107 0314 	add.w	r3, r7, #20
 800dfee:	4618      	mov	r0, r3
 800dff0:	f000 ff24 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800dff4:	4604      	mov	r4, r0
 800dff6:	f107 030c 	add.w	r3, r7, #12
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 ff12 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e000:	4603      	mov	r3, r0
 800e002:	4622      	mov	r2, r4
 800e004:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e008:	e883 0003 	stmia.w	r3, {r0, r1}
 800e00c:	e006      	b.n	800e01c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb0>
	    std::__unguarded_linear_insert(__i,
 800e00e:	7938      	ldrb	r0, [r7, #4]
 800e010:	f000 ff37 	bl	800ee82 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e014:	4629      	mov	r1, r5
 800e016:	69f8      	ldr	r0, [r7, #28]
 800e018:	f000 ff47 	bl	800eeaa <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e01c:	f107 031c 	add.w	r3, r7, #28
 800e020:	4618      	mov	r0, r3
 800e022:	f000 feee 	bl	800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e026:	f107 0208 	add.w	r2, r7, #8
 800e02a:	f107 031c 	add.w	r3, r7, #28
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe ffe0 	bl	800cff6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1b1      	bne.n	800dfa0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x34>
 800e03c:	e000      	b.n	800e040 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd4>
      if (__first == __last) return;
 800e03e:	bf00      	nop
    }
 800e040:	3720      	adds	r7, #32
 800e042:	46bd      	mov	sp, r7
 800e044:	bdb0      	pop	{r4, r5, r7, pc}

0800e046 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800e046:	b590      	push	{r4, r7, lr}
 800e048:	b087      	sub	sp, #28
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	60f8      	str	r0, [r7, #12]
 800e04e:	60b9      	str	r1, [r7, #8]
 800e050:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	617b      	str	r3, [r7, #20]
 800e056:	e00b      	b.n	800e070 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x2a>
	std::__unguarded_linear_insert(__i,
 800e058:	7938      	ldrb	r0, [r7, #4]
 800e05a:	f000 ff12 	bl	800ee82 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e05e:	4621      	mov	r1, r4
 800e060:	6978      	ldr	r0, [r7, #20]
 800e062:	f000 ff22 	bl	800eeaa <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e066:	f107 0314 	add.w	r3, r7, #20
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 fec9 	bl	800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e070:	f107 0208 	add.w	r2, r7, #8
 800e074:	f107 0314 	add.w	r3, r7, #20
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe ffbb 	bl	800cff6 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1e8      	bne.n	800e058 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x12>
    }
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	371c      	adds	r7, #28
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd90      	pop	{r4, r7, pc}

0800e090 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e090:	b590      	push	{r4, r7, lr}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff f948 	bl	800d332 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	681c      	ldr	r4, [r3, #0]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	2004      	movs	r0, #4
 800e0ac:	f7f3 f890 	bl	80011d0 <_ZnwjPv>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	601c      	str	r4, [r3, #0]
	}
 800e0b4:	bf00      	nop
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd90      	pop	{r4, r7, pc}

0800e0bc <_ZN2ei7EiAllocIfE8allocateEj>:
    T *allocate(size_t n)
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f008 fccf 	bl	8016a70 <_Z9ei_mallocj>
 800e0d2:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
    }
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e0de:	b5b0      	push	{r4, r5, r7, lr}
 800e0e0:	b084      	sub	sp, #16
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	60f8      	str	r0, [r7, #12]
 800e0e6:	60b9      	str	r1, [r7, #8]
 800e0e8:	607a      	str	r2, [r7, #4]
 800e0ea:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 ff31 	bl	800ef54 <_ZSt12__niter_baseIPfET_S1_>
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	68b8      	ldr	r0, [r7, #8]
 800e0f6:	f000 ff2d 	bl	800ef54 <_ZSt12__niter_baseIPfET_S1_>
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 ff29 	bl	800ef54 <_ZSt12__niter_baseIPfET_S1_>
 800e102:	4602      	mov	r2, r0
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	4629      	mov	r1, r5
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 ff2e 	bl	800ef6a <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800e10e:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bdb0      	pop	{r4, r5, r7, pc}

0800e118 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800e12e:	b580      	push	{r7, lr}
 800e130:	b082      	sub	sp, #8
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 ff3b 	bl	800efb6 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>
 800e140:	4603      	mov	r3, r0
 800e142:	f083 0301 	eor.w	r3, r3, #1
 800e146:	b2db      	uxtb	r3, r3
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZNSt13move_iteratorIPfEppEv>:
      operator++()
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	1d1a      	adds	r2, r3, #4
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
	return *this;
 800e162:	687b      	ldr	r3, [r7, #4]
      }
 800e164:	4618      	mov	r0, r3
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <_ZNKSt13move_iteratorIPfEdeEv>:
      operator*() const
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4618      	mov	r0, r3
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e188:	b480      	push	{r7}
 800e18a:	b085      	sub	sp, #20
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	109b      	asrs	r3, r3, #2
    }
 800e19c:	4618      	mov	r0, r3
 800e19e:	3714      	adds	r7, #20
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e1b0:	bf00      	nop
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e1be:	b480      	push	{r7}
 800e1c0:	b085      	sub	sp, #20
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	60f8      	str	r0, [r7, #12]
 800e1c6:	60b9      	str	r1, [r7, #8]
 800e1c8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	109b      	asrs	r3, r3, #2
    }
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 fef9 	bl	800efe2 <_ZN2ei7EiAllocIiE8allocateEj>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	60f8      	str	r0, [r7, #12]
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800e206:	68b8      	ldr	r0, [r7, #8]
 800e208:	f008 fc4c 	bl	8016aa4 <_Z7ei_freePv>
    }
 800e20c:	bf00      	nop
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e214:	b590      	push	{r4, r7, lr}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e220:	68b8      	ldr	r0, [r7, #8]
 800e222:	f7fe f965 	bl	800c4f0 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e226:	4603      	mov	r3, r0
 800e228:	681c      	ldr	r4, [r3, #0]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7f3 f80a 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e230:	4603      	mov	r3, r0
 800e232:	4619      	mov	r1, r3
 800e234:	2004      	movs	r0, #4
 800e236:	f7f2 ffcb 	bl	80011d0 <_ZnwjPv>
 800e23a:	4603      	mov	r3, r0
 800e23c:	601c      	str	r4, [r3, #0]
	  }
 800e23e:	bf00      	nop
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	bd90      	pop	{r4, r7, pc}

0800e246 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fed8 	bl	800f004 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800e254:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f000 fee0 	bl	800f01c <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800e25c:	4603      	mov	r3, r0
 800e25e:	bf00      	nop
	}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26c:	b086      	sub	sp, #24
 800e26e:	af02      	add	r7, sp, #8
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	60b9      	str	r1, [r7, #8]
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 feda 	bl	800f032 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e27e:	4604      	mov	r4, r0
 800e280:	68b8      	ldr	r0, [r7, #8]
 800e282:	f7fd fb98 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e286:	4605      	mov	r5, r0
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fd fb94 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e28e:	4606      	mov	r6, r0
 800e290:	6838      	ldr	r0, [r7, #0]
 800e292:	f7fd fb9b 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e296:	4603      	mov	r3, r0
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4633      	mov	r3, r6
 800e29c:	462a      	mov	r2, r5
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	f000 fed1 	bl	800f048 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800e2a6:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2b2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b082      	sub	sp, #8
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7f2 ffc2 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e2cc:	b590      	push	{r4, r7, lr}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	d82a      	bhi.n	800e336 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e2e0:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e6:	bf00      	nop
 800e2e8:	0800e2f9 	.word	0x0800e2f9
 800e2ec:	0800e307 	.word	0x0800e307
 800e2f0:	0800e31b 	.word	0x0800e31b
 800e2f4:	0800e32d 	.word	0x0800e32d
	      __dest._M_access<const type_info*>() = nullptr;
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 f937 	bl	800e56c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]
	      break;
 800e304:	e017      	b.n	800e336 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f7ff ffd3 	bl	800e2b2 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800e30c:	4604      	mov	r4, r0
 800e30e:	68b8      	ldr	r0, [r7, #8]
 800e310:	f7ff ff99 	bl	800e246 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e314:	4603      	mov	r3, r0
 800e316:	6023      	str	r3, [r4, #0]
	      break;
 800e318:	e00d      	b.n	800e336 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e31a:	68b8      	ldr	r0, [r7, #8]
 800e31c:	f7ff ff93 	bl	800e246 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e320:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e322:	4619      	mov	r1, r3
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f000 feb3 	bl	800f090 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e32a:	e004      	b.n	800e336 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e32c:	4621      	mov	r1, r4
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f000 fec0 	bl	800f0b4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e334:	bf00      	nop
	  return false;
 800e336:	2300      	movs	r3, #0
	}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd90      	pop	{r4, r7, pc}

0800e340 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e340:	b590      	push	{r4, r7, lr}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e34c:	68b8      	ldr	r0, [r7, #8]
 800e34e:	f7fe f90d 	bl	800c56c <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800e352:	4604      	mov	r4, r0
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7f2 ff75 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e35a:	4603      	mov	r3, r0
 800e35c:	4619      	mov	r1, r3
 800e35e:	2004      	movs	r0, #4
 800e360:	f7f2 ff36 	bl	80011d0 <_ZnwjPv>
 800e364:	4602      	mov	r2, r0
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	6013      	str	r3, [r2, #0]
	  }
 800e36a:	bf00      	nop
 800e36c:	3714      	adds	r7, #20
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd90      	pop	{r4, r7, pc}

0800e372 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fea6 	bl	800f0cc <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800e380:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 feae 	bl	800f0e4 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800e388:	4603      	mov	r3, r0
 800e38a:	bf00      	nop
	}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e398:	b086      	sub	sp, #24
 800e39a:	af02      	add	r7, sp, #8
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]
 800e3a2:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f000 fea8 	bl	800f0fa <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	68b8      	ldr	r0, [r7, #8]
 800e3ae:	f7fd fb02 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7fd fafe 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	6838      	ldr	r0, [r7, #0]
 800e3be:	f7fd fb05 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	4633      	mov	r3, r6
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4640      	mov	r0, r8
 800e3ce:	f000 fe9f 	bl	800f110 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800e3d2:	4603      	mov	r3, r0
    }
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e3de <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b082      	sub	sp, #8
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7f2 ff2c 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e3f8:	b590      	push	{r4, r7, lr}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d82a      	bhi.n	800e462 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e40c:	a201      	add	r2, pc, #4	; (adr r2, 800e414 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e412:	bf00      	nop
 800e414:	0800e425 	.word	0x0800e425
 800e418:	0800e433 	.word	0x0800e433
 800e41c:	0800e447 	.word	0x0800e447
 800e420:	0800e459 	.word	0x0800e459
	      __dest._M_access<const type_info*>() = nullptr;
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f000 f8a1 	bl	800e56c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]
	      break;
 800e430:	e017      	b.n	800e462 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff ffd3 	bl	800e3de <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800e438:	4604      	mov	r4, r0
 800e43a:	68b8      	ldr	r0, [r7, #8]
 800e43c:	f7ff ff99 	bl	800e372 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e440:	4603      	mov	r3, r0
 800e442:	6023      	str	r3, [r4, #0]
	      break;
 800e444:	e00d      	b.n	800e462 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e446:	68b8      	ldr	r0, [r7, #8]
 800e448:	f7ff ff93 	bl	800e372 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e44c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 fe81 	bl	800f158 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e456:	e004      	b.n	800e462 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e458:	4621      	mov	r1, r4
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 fe8e 	bl	800f17c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e460:	bf00      	nop
	  return false;
 800e462:	2300      	movs	r3, #0
	}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd90      	pop	{r4, r7, pc}

0800e46c <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 fe8d 	bl	800f194 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 fe95 	bl	800f1ac <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	3708      	adds	r7, #8
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 fe97 	bl	800f1c8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800e49a:	4603      	mov	r3, r0
 800e49c:	4618      	mov	r0, r3
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fe98 	bl	800f1e2 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fe98 	bl	800f1fa <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fe99 	bl	800f214 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fe9a 	bl	800f22e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fe9b 	bl	800f248 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800e512:	4603      	mov	r3, r0
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 fe92 	bl	800f264 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800e540:	4603      	mov	r3, r0
 800e542:	4618      	mov	r0, r3
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f008 fa88 	bl	8016a70 <_Z9ei_mallocj>
 800e560:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e562:	68bb      	ldr	r3, [r7, #8]
    }
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7f2 fe65 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e57a:	4603      	mov	r3, r0
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800e58e:	687c      	ldr	r4, [r7, #4]
 800e590:	6838      	ldr	r0, [r7, #0]
 800e592:	f7fe fa3d 	bl	800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e596:	4603      	mov	r3, r0
 800e598:	4619      	mov	r1, r3
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 fe6e 	bl	800f27c <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd90      	pop	{r4, r7, pc}

0800e5aa <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
 800e5b2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e5b4:	6838      	ldr	r0, [r7, #0]
 800e5b6:	f7ff fa0d 	bl	800d9d4 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 fe60 	bl	800f29e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fe5f 	bl	800f2b4 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e600:	b40f      	push	{r0, r1, r2, r3}
 800e602:	b480      	push	{r7}
 800e604:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e606:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e60a:	4618      	mov	r0, r3
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	b004      	add	sp, #16
 800e614:	4770      	bx	lr

0800e616 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e616:	b580      	push	{r7, lr}
 800e618:	b082      	sub	sp, #8
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	4619      	mov	r1, r3
 800e624:	2004      	movs	r0, #4
 800e626:	f7f2 fdd3 	bl	80011d0 <_ZnwjPv>
 800e62a:	4603      	mov	r3, r0
 800e62c:	f04f 0200 	mov.w	r2, #0
 800e630:	601a      	str	r2, [r3, #0]
	}
 800e632:	bf00      	nop
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <_ZSt8_DestroyIfEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800e63a:	b480      	push	{r7}
 800e63c:	b083      	sub	sp, #12
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800e642:	bf00      	nop
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e64e:	b580      	push	{r7, lr}
 800e650:	b086      	sub	sp, #24
 800e652:	af00      	add	r7, sp, #0
 800e654:	60f8      	str	r0, [r7, #12]
 800e656:	60b9      	str	r1, [r7, #8]
 800e658:	607a      	str	r2, [r7, #4]
 800e65a:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e65c:	463b      	mov	r3, r7
 800e65e:	461a      	mov	r2, r3
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f000 fe33 	bl	800f2ce <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	e013      	b.n	800e696 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800e66e:	463b      	mov	r3, r7
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	6979      	ldr	r1, [r7, #20]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 f85d 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d005      	beq.n	800e68c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e680:	463b      	mov	r3, r7
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f000 fe90 	bl	800f3ac <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e68c:	f107 0314 	add.w	r3, r7, #20
 800e690:	4618      	mov	r0, r3
 800e692:	f7fb fbb5 	bl	8009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800e696:	1d3a      	adds	r2, r7, #4
 800e698:	f107 0314 	add.w	r3, r7, #20
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 fe6c 	bl	800f37c <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1e1      	bne.n	800e66e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e6c0:	e00a      	b.n	800e6d8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x24>
	{
	  --__last;
 800e6c2:	f107 0308 	add.w	r3, r7, #8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f000 feb0 	bl	800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 fe6a 	bl	800f3ac <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      while (__last - __first > 1)
 800e6d8:	f107 020c 	add.w	r2, r7, #12
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe fa81 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	bfcc      	ite	gt
 800e6ee:	2301      	movgt	r3, #1
 800e6f0:	2300      	movle	r3, #0
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1e4      	bne.n	800e6c2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xe>
	}
    }
 800e6f8:	bf00      	nop
 800e6fa:	bf00      	nop
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e702:	b580      	push	{r7, lr}
 800e704:	b084      	sub	sp, #16
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	425b      	negs	r3, r3
 800e716:	4413      	add	r3, r2
 800e718:	60fb      	str	r3, [r7, #12]
 800e71a:	f107 020c 	add.w	r2, r7, #12
 800e71e:	f107 0308 	add.w	r3, r7, #8
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f7fc ff66 	bl	800b5f6 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e734:	b580      	push	{r7, lr}
 800e736:	ed2d 8b02 	vpush	{d8}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e744:	f107 0308 	add.w	r3, r7, #8
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fb fb69 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e74e:	4603      	mov	r3, r0
 800e750:	ed93 8a00 	vldr	s16, [r3]
 800e754:	1d3b      	adds	r3, r7, #4
 800e756:	4618      	mov	r0, r3
 800e758:	f7fb fb62 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e75c:	4603      	mov	r3, r0
 800e75e:	edd3 7a00 	vldr	s15, [r3]
 800e762:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	bf4c      	ite	mi
 800e76c:	2301      	movmi	r3, #1
 800e76e:	2300      	movpl	r3, #0
 800e770:	b2db      	uxtb	r3, r3
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	ecbd 8b02 	vpop	{d8}
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e77e:	b580      	push	{r7, lr}
 800e780:	b084      	sub	sp, #16
 800e782:	af00      	add	r7, sp, #0
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
 800e78a:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68b9      	ldr	r1, [r7, #8]
 800e790:	f107 0018 	add.w	r0, r7, #24
 800e794:	f7ff ffce 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d020      	beq.n	800e7e0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	f107 0018 	add.w	r0, r7, #24
 800e7a6:	f7ff ffc5 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d004      	beq.n	800e7ba <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e7b0:	6879      	ldr	r1, [r7, #4]
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f000 fe4a 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7b8:	e032      	b.n	800e820 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	68b9      	ldr	r1, [r7, #8]
 800e7be:	f107 0018 	add.w	r0, r7, #24
 800e7c2:	f7ff ffb7 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d004      	beq.n	800e7d6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f000 fe3c 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7d4:	e024      	b.n	800e820 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f000 fe37 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7de:	e01f      	b.n	800e820 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	68b9      	ldr	r1, [r7, #8]
 800e7e4:	f107 0018 	add.w	r0, r7, #24
 800e7e8:	f7ff ffa4 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d004      	beq.n	800e7fc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e7f2:	68b9      	ldr	r1, [r7, #8]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 fe29 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e7fa:	e011      	b.n	800e820 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 800e7fc:	683a      	ldr	r2, [r7, #0]
 800e7fe:	6879      	ldr	r1, [r7, #4]
 800e800:	f107 0018 	add.w	r0, r7, #24
 800e804:	f7ff ff96 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d004      	beq.n	800e818 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	68f8      	ldr	r0, [r7, #12]
 800e812:	f000 fe1b 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e816:	e003      	b.n	800e820 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f000 fe16 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e820:	bf00      	nop
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
 800e834:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e836:	e004      	b.n	800e842 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 800e838:	f107 030c 	add.w	r3, r7, #12
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fb fadf 	bl	8009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e842:	463b      	mov	r3, r7
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	4618      	mov	r0, r3
 800e84a:	f7ff ff73 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1f1      	bne.n	800e838 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 800e854:	f107 0308 	add.w	r3, r7, #8
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 fde7 	bl	800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e85e:	e004      	b.n	800e86a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 800e860:	f107 0308 	add.w	r3, r7, #8
 800e864:	4618      	mov	r0, r3
 800e866:	f000 fde1 	bl	800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e86a:	463b      	mov	r3, r7
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	4618      	mov	r0, r3
 800e872:	f7ff ff5f 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1f1      	bne.n	800e860 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 800e87c:	f107 0208 	add.w	r2, r7, #8
 800e880:	f107 030c 	add.w	r3, r7, #12
 800e884:	4611      	mov	r1, r2
 800e886:	4618      	mov	r0, r3
 800e888:	f000 fd78 	bl	800f37c <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e88c:	4603      	mov	r3, r0
 800e88e:	f083 0301 	eor.w	r3, r3, #1
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	e009      	b.n	800e8b0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e89c:	68b9      	ldr	r1, [r7, #8]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f000 fdd4 	bl	800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
	  ++__first;
 800e8a4:	f107 030c 	add.w	r3, r7, #12
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7fb faa9 	bl	8009e00 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e8ae:	e7c8      	b.n	800e842 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e8b8:	b590      	push	{r4, r7, lr}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7fc fea7 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	681c      	ldr	r4, [r3, #0]
 800e8cc:	6838      	ldr	r0, [r7, #0]
 800e8ce:	f7fc fea2 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	bf0c      	ite	eq
 800e8da:	2301      	moveq	r3, #1
 800e8dc:	2300      	movne	r3, #0
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd90      	pop	{r4, r7, pc}

0800e8e8 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e8e8:	b590      	push	{r4, r7, lr}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f000 fdc0 	bl	800f47a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	68b8      	ldr	r0, [r7, #8]
 800e8fe:	f000 fdbc 	bl	800f47a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e902:	4603      	mov	r3, r0
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	4619      	mov	r1, r3
 800e908:	4620      	mov	r0, r4
 800e90a:	f000 fdc1 	bl	800f490 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>
 800e90e:	4603      	mov	r3, r0
    }
 800e910:	4618      	mov	r0, r3
 800e912:	3714      	adds	r7, #20
 800e914:	46bd      	mov	sp, r7
 800e916:	bd90      	pop	{r4, r7, pc}

0800e918 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e918:	b590      	push	{r4, r7, lr}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e922:	1d3b      	adds	r3, r7, #4
 800e924:	4618      	mov	r0, r3
 800e926:	f7fb fa7b 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e92a:	4603      	mov	r3, r0
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fc f9b6 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e932:	4603      	mov	r3, r0
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	60bb      	str	r3, [r7, #8]
      --__next;
 800e93c:	f107 0308 	add.w	r3, r7, #8
 800e940:	4618      	mov	r0, r3
 800e942:	f000 fd73 	bl	800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e946:	e017      	b.n	800e978 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e948:	f107 0308 	add.w	r3, r7, #8
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fb fa67 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e952:	4603      	mov	r3, r0
 800e954:	4618      	mov	r0, r3
 800e956:	f7fc f9a2 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e95a:	4604      	mov	r4, r0
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fb fa5e 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e964:	4602      	mov	r2, r0
 800e966:	6823      	ldr	r3, [r4, #0]
 800e968:	6013      	str	r3, [r2, #0]
	  __last = __next;
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	607b      	str	r3, [r7, #4]
	  --__next;
 800e96e:	f107 0308 	add.w	r3, r7, #8
 800e972:	4618      	mov	r0, r3
 800e974:	f000 fd5a 	bl	800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e978:	f107 010c 	add.w	r1, r7, #12
 800e97c:	463b      	mov	r3, r7
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fda6 	bl	800f4d2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1dd      	bne.n	800e948 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e98c:	f107 030c 	add.w	r3, r7, #12
 800e990:	4618      	mov	r0, r3
 800e992:	f7fc f984 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e996:	4604      	mov	r4, r0
 800e998:	1d3b      	adds	r3, r7, #4
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fb fa40 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	6013      	str	r3, [r2, #0]
    }
 800e9a6:	bf00      	nop
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd90      	pop	{r4, r7, pc}

0800e9ae <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e9ae:	b40f      	push	{r0, r1, r2, r3}
 800e9b0:	b480      	push	{r7}
 800e9b2:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e9b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	b004      	add	sp, #16
 800e9c2:	4770      	bx	lr

0800e9c4 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e9da:	b590      	push	{r4, r7, lr}
 800e9dc:	b085      	sub	sp, #20
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	60f8      	str	r0, [r7, #12]
 800e9e2:	60b9      	str	r1, [r7, #8]
 800e9e4:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f7ff ffec 	bl	800e9c4 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	681c      	ldr	r4, [r3, #0]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	2004      	movs	r0, #4
 800e9f6:	f7f2 fbeb 	bl	80011d0 <_ZnwjPv>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	601c      	str	r4, [r3, #0]
	}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd90      	pop	{r4, r7, pc}

0800ea06 <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
    }
 800ea0e:	bf00      	nop
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
    }
 800ea22:	bf00      	nop
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b084      	sub	sp, #16
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ea36:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ea3a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fd68 	bl	800f512 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 800ea42:	4603      	mov	r3, r0
 800ea44:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ea46:	f107 0208 	add.w	r2, r7, #8
 800ea4a:	f107 030c 	add.w	r3, r7, #12
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f9 f8ba 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800ea56:	4603      	mov	r3, r0
 800ea58:	681b      	ldr	r3, [r3, #0]
      }
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f007 fff1 	bl	8016a70 <_Z9ei_mallocj>
 800ea8e:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800ea90:	68bb      	ldr	r3, [r7, #8]
    }
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ea9a:	b5b0      	push	{r4, r5, r7, lr}
 800ea9c:	b084      	sub	sp, #16
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	60f8      	str	r0, [r7, #12]
 800eaa2:	60b9      	str	r1, [r7, #8]
 800eaa4:	607a      	str	r2, [r7, #4]
 800eaa6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f000 fd3f 	bl	800f52c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eaae:	4604      	mov	r4, r0
 800eab0:	68b8      	ldr	r0, [r7, #8]
 800eab2:	f000 fd3b 	bl	800f52c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eab6:	4605      	mov	r5, r0
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 fd37 	bl	800f52c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eabe:	4602      	mov	r2, r0
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	4629      	mov	r1, r5
 800eac4:	4620      	mov	r0, r4
 800eac6:	f000 fd3c 	bl	800f542 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800eaca:	4603      	mov	r3, r0
    }
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bdb0      	pop	{r4, r5, r7, pc}

0800ead4 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800eade:	463b      	mov	r3, r7
 800eae0:	4618      	mov	r0, r3
 800eae2:	f000 fd54 	bl	800f58e <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 800eae6:	4603      	mov	r3, r0
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fd4d 	bl	800f5a4 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	f083 0301 	eor.w	r3, r3, #1
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	4618      	mov	r0, r3
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
	++_M_current;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f103 0208 	add.w	r2, r3, #8
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	601a      	str	r2, [r3, #0]
	return *this;
 800eb2e:	687b      	ldr	r3, [r7, #4]
      }
 800eb30:	4618      	mov	r0, r3
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	60f8      	str	r0, [r7, #12]
 800eb5c:	60b9      	str	r1, [r7, #8]
 800eb5e:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fd35 	bl	800f5d0 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800eb66:	4603      	mov	r3, r0
 800eb68:	461a      	mov	r2, r3
 800eb6a:	68b9      	ldr	r1, [r7, #8]
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f000 fd3a 	bl	800f5e6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 800eb72:	bf00      	nop
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b086      	sub	sp, #24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	60f8      	str	r0, [r7, #12]
 800eb82:	60b9      	str	r1, [r7, #8]
 800eb84:	607a      	str	r2, [r7, #4]
 800eb86:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800eb88:	463b      	mov	r3, r7
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	68b9      	ldr	r1, [r7, #8]
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f000 fd42 	bl	800f618 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	e013      	b.n	800ebc2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x48>
	if (__comp(__i, __first))
 800eb9a:	463b      	mov	r3, r7
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	6979      	ldr	r1, [r7, #20]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 f85d 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d005      	beq.n	800ebb8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800ebac:	463b      	mov	r3, r7
 800ebae:	697a      	ldr	r2, [r7, #20]
 800ebb0:	68b9      	ldr	r1, [r7, #8]
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f000 fda8 	bl	800f708 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ebb8:	f107 0314 	add.w	r3, r7, #20
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 f920 	bl	800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800ebc2:	1d3a      	adds	r2, r7, #4
 800ebc4:	f107 0314 	add.w	r3, r7, #20
 800ebc8:	4611      	mov	r1, r2
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 fd84 	bl	800f6d8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1e1      	bne.n	800eb9a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x20>
    }
 800ebd6:	bf00      	nop
 800ebd8:	bf00      	nop
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 800ebec:	e00a      	b.n	800ec04 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x24>
	  --__last;
 800ebee:	f107 0308 	add.w	r3, r7, #8
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 fdd4 	bl	800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 fd82 	bl	800f708 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 800ec04:	f107 020c 	add.w	r2, r7, #12
 800ec08:	f107 0308 	add.w	r3, r7, #8
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe f977 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	bfcc      	ite	gt
 800ec1a:	2301      	movgt	r3, #1
 800ec1c:	2300      	movle	r3, #0
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e4      	bne.n	800ebee <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xe>
    }
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b084      	sub	sp, #16
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	425b      	negs	r3, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	60fb      	str	r3, [r7, #12]
 800ec46:	f107 020c 	add.w	r2, r7, #12
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	4611      	mov	r1, r2
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7fc fff9 	bl	800bc48 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800ec60:	b5b0      	push	{r4, r5, r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800ec6c:	68fc      	ldr	r4, [r7, #12]
 800ec6e:	f107 0308 	add.w	r3, r7, #8
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 f8d6 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ec78:	4605      	mov	r5, r0
 800ec7a:	1d3b      	adds	r3, r7, #4
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f8d1 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ec82:	4603      	mov	r3, r0
 800ec84:	461a      	mov	r2, r3
 800ec86:	4629      	mov	r1, r5
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f7f4 fec7 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bdb0      	pop	{r4, r5, r7, pc}

0800ec98 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
 800eca4:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	68b9      	ldr	r1, [r7, #8]
 800ecaa:	f107 0018 	add.w	r0, r7, #24
 800ecae:	f7ff ffd7 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d020      	beq.n	800ecfa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800ecb8:	683a      	ldr	r2, [r7, #0]
 800ecba:	6879      	ldr	r1, [r7, #4]
 800ecbc:	f107 0018 	add.w	r0, r7, #24
 800ecc0:	f7ff ffce 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800ecca:	6879      	ldr	r1, [r7, #4]
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 fd78 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecd2:	e032      	b.n	800ed3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	68b9      	ldr	r1, [r7, #8]
 800ecd8:	f107 0018 	add.w	r0, r7, #24
 800ecdc:	f7ff ffc0 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d004      	beq.n	800ecf0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f000 fd6a 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecee:	e024      	b.n	800ed3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f000 fd65 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ecf8:	e01f      	b.n	800ed3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 800ecfa:	683a      	ldr	r2, [r7, #0]
 800ecfc:	68b9      	ldr	r1, [r7, #8]
 800ecfe:	f107 0018 	add.w	r0, r7, #24
 800ed02:	f7ff ffad 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d004      	beq.n	800ed16 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 800ed0c:	68b9      	ldr	r1, [r7, #8]
 800ed0e:	68f8      	ldr	r0, [r7, #12]
 800ed10:	f000 fd57 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed14:	e011      	b.n	800ed3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	6879      	ldr	r1, [r7, #4]
 800ed1a:	f107 0018 	add.w	r0, r7, #24
 800ed1e:	f7ff ff9f 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d004      	beq.n	800ed32 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f000 fd49 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed30:	e003      	b.n	800ed3a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 800ed32:	6879      	ldr	r1, [r7, #4]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f000 fd44 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	60f8      	str	r0, [r7, #12]
 800ed4a:	60b9      	str	r1, [r7, #8]
 800ed4c:	607a      	str	r2, [r7, #4]
 800ed4e:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800ed50:	e004      	b.n	800ed5c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
	    ++__first;
 800ed52:	f107 030c 	add.w	r3, r7, #12
 800ed56:	4618      	mov	r0, r3
 800ed58:	f000 f853 	bl	800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800ed5c:	463b      	mov	r3, r7
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	68f9      	ldr	r1, [r7, #12]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7ff ff7c 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1f1      	bne.n	800ed52 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x10>
	  --__last;
 800ed6e:	f107 0308 	add.w	r3, r7, #8
 800ed72:	4618      	mov	r0, r3
 800ed74:	f000 fd14 	bl	800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ed78:	e004      	b.n	800ed84 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x42>
	    --__last;
 800ed7a:	f107 0308 	add.w	r3, r7, #8
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f000 fd0e 	bl	800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800ed84:	463b      	mov	r3, r7
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	6879      	ldr	r1, [r7, #4]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff ff68 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1f1      	bne.n	800ed7a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x38>
	  if (!(__first < __last))
 800ed96:	f107 0208 	add.w	r2, r7, #8
 800ed9a:	f107 030c 	add.w	r3, r7, #12
 800ed9e:	4611      	mov	r1, r2
 800eda0:	4618      	mov	r0, r3
 800eda2:	f000 fc99 	bl	800f6d8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f083 0301 	eor.w	r3, r3, #1
 800edac:	b2db      	uxtb	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	e009      	b.n	800edca <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 800edb6:	68b9      	ldr	r1, [r7, #8]
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 fd02 	bl	800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 800edbe:	f107 030c 	add.w	r3, r7, #12
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f81d 	bl	800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800edc8:	e7c8      	b.n	800ed5c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
    }
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800edd2:	b590      	push	{r4, r7, lr}
 800edd4:	b083      	sub	sp, #12
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7fe f8cd 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ede2:	4603      	mov	r3, r0
 800ede4:	681c      	ldr	r4, [r3, #0]
 800ede6:	6838      	ldr	r0, [r7, #0]
 800ede8:	f7fe f8c8 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800edec:	4603      	mov	r3, r0
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	429c      	cmp	r4, r3
 800edf2:	bf0c      	ite	eq
 800edf4:	2301      	moveq	r3, #1
 800edf6:	2300      	movne	r3, #0
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	4618      	mov	r0, r3
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd90      	pop	{r4, r7, pc}

0800ee02 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ee02:	b480      	push	{r7}
 800ee04:	b083      	sub	sp, #12
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f103 0208 	add.w	r2, r3, #8
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	601a      	str	r2, [r3, #0]
	return *this;
 800ee16:	687b      	ldr	r3, [r7, #4]
      }
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ee24:	b480      	push	{r7}
 800ee26:	b083      	sub	sp, #12
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4618      	mov	r0, r3
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4618      	mov	r0, r3
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ee52:	b590      	push	{r4, r7, lr}
 800ee54:	b085      	sub	sp, #20
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	60f8      	str	r0, [r7, #12]
 800ee5a:	60b9      	str	r1, [r7, #8]
 800ee5c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 fcc6 	bl	800f7f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ee64:	4604      	mov	r4, r0
 800ee66:	68b8      	ldr	r0, [r7, #8]
 800ee68:	f000 fcc2 	bl	800f7f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	4619      	mov	r1, r3
 800ee72:	4620      	mov	r0, r4
 800ee74:	f000 fcc7 	bl	800f806 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800ee78:	4603      	mov	r3, r0
    }
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd90      	pop	{r4, r7, pc}

0800ee82 <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800ee82:	b590      	push	{r4, r7, lr}
 800ee84:	b085      	sub	sp, #20
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800ee8a:	1d3b      	adds	r3, r7, #4
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f000 fcdb 	bl	800f848 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800ee92:	4602      	mov	r2, r0
 800ee94:	f107 030c 	add.w	r3, r7, #12
 800ee98:	4611      	mov	r1, r2
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 fcdf 	bl	800f85e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 800eea0:	bf00      	nop
 800eea2:	4620      	mov	r0, r4
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd90      	pop	{r4, r7, pc}

0800eeaa <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800eeaa:	b590      	push	{r4, r7, lr}
 800eeac:	b087      	sub	sp, #28
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800eeb4:	1d3b      	adds	r3, r7, #4
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff ffb4 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eebc:	4603      	mov	r3, r0
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff ffbc 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800eec4:	4602      	mov	r2, r0
 800eec6:	f107 0310 	add.w	r3, r7, #16
 800eeca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eece:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	60fb      	str	r3, [r7, #12]
      --__next;
 800eed6:	f107 030c 	add.w	r3, r7, #12
 800eeda:	4618      	mov	r0, r3
 800eedc:	f000 fc60 	bl	800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800eee0:	e01a      	b.n	800ef18 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x6e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff ff9c 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eeec:	4603      	mov	r3, r0
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff ffa4 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800eef4:	4604      	mov	r4, r0
 800eef6:	1d3b      	adds	r3, r7, #4
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7ff ff93 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800eefe:	4603      	mov	r3, r0
 800ef00:	4622      	mov	r2, r4
 800ef02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef06:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	607b      	str	r3, [r7, #4]
	  --__next;
 800ef0e:	f107 030c 	add.w	r3, r7, #12
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fc44 	bl	800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ef18:	f107 0110 	add.w	r1, r7, #16
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f000 fcaa 	bl	800f87a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d1da      	bne.n	800eee2 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800ef2c:	f107 0310 	add.w	r3, r7, #16
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7ff ff83 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef36:	4604      	mov	r4, r0
 800ef38:	1d3b      	adds	r3, r7, #4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff ff72 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef40:	4603      	mov	r3, r0
 800ef42:	4622      	mov	r2, r4
 800ef44:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef48:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ef4c:	bf00      	nop
 800ef4e:	371c      	adds	r7, #28
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd90      	pop	{r4, r7, pc}

0800ef54 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	370c      	adds	r7, #12
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800ef6a:	b590      	push	{r4, r7, lr}
 800ef6c:	b087      	sub	sp, #28
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	60f8      	str	r0, [r7, #12]
 800ef72:	60b9      	str	r1, [r7, #8]
 800ef74:	607a      	str	r2, [r7, #4]
 800ef76:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800ef7c:	e012      	b.n	800efa4 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800ef7e:	6978      	ldr	r0, [r7, #20]
 800ef80:	f7fd fde6 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800ef84:	4604      	mov	r4, r0
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7fd fde2 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	4619      	mov	r1, r3
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fc87 	bl	800f8a6 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	60fb      	str	r3, [r7, #12]
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	3304      	adds	r3, #4
 800efa2:	617b      	str	r3, [r7, #20]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d1e8      	bne.n	800ef7e <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800efac:	697b      	ldr	r3, [r7, #20]
    }
 800efae:	4618      	mov	r0, r3
 800efb0:	371c      	adds	r7, #28
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd90      	pop	{r4, r7, pc}

0800efb6 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800efb6:	b590      	push	{r4, r7, lr}
 800efb8:	b083      	sub	sp, #12
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fc8b 	bl	800f8dc <_ZNKSt13move_iteratorIPfE4baseEv>
 800efc6:	4604      	mov	r4, r0
 800efc8:	6838      	ldr	r0, [r7, #0]
 800efca:	f000 fc87 	bl	800f8dc <_ZNKSt13move_iteratorIPfE4baseEv>
 800efce:	4603      	mov	r3, r0
 800efd0:	429c      	cmp	r4, r3
 800efd2:	bf0c      	ite	eq
 800efd4:	2301      	moveq	r3, #1
 800efd6:	2300      	movne	r3, #0
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	4618      	mov	r0, r3
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd90      	pop	{r4, r7, pc}

0800efe2 <_ZN2ei7EiAllocIiE8allocateEj>:
    T *allocate(size_t n)
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f007 fd3c 	bl	8016a70 <_Z9ei_mallocj>
 800eff8:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800effa:	68bb      	ldr	r3, [r7, #8]
    }
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7f2 f924 	bl	800125a <_ZNKSt9_Any_data9_M_accessEv>
 800f012:	4603      	mov	r3, r0
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4618      	mov	r0, r3
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f032:	b480      	push	{r7}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	370c      	adds	r7, #12
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	7338      	strb	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
 800f054:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f056:	68b8      	ldr	r0, [r7, #8]
 800f058:	f7ff ffeb 	bl	800f032 <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f05c:	4603      	mov	r3, r0
 800f05e:	681c      	ldr	r4, [r3, #0]
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7fc fca8 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f066:	4603      	mov	r3, r0
 800f068:	681d      	ldr	r5, [r3, #0]
 800f06a:	6838      	ldr	r0, [r7, #0]
 800f06c:	f7fc fca3 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f070:	4603      	mov	r3, r0
 800f072:	681e      	ldr	r6, [r3, #0]
 800f074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f076:	f7fc fca9 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f07a:	4603      	mov	r3, r0
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	4631      	mov	r1, r6
 800f082:	4628      	mov	r0, r5
 800f084:	47a0      	blx	r4
 800f086:	4603      	mov	r3, r0
 800f088:	4618      	mov	r0, r3
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f090 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f090:	b590      	push	{r4, r7, lr}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f09a:	6838      	ldr	r0, [r7, #0]
 800f09c:	f000 fc2a 	bl	800f8f4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fc2f 	bl	800f90a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd90      	pop	{r4, r7, pc}

0800f0b4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 fc3c 	bl	800f93c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7f2 f8c0 	bl	800125a <_ZNKSt9_Any_data9_M_accessEv>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	370c      	adds	r7, #12
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f0fa:	b480      	push	{r7}
 800f0fc:	b083      	sub	sp, #12
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	7338      	strb	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
 800f11c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f11e:	68b8      	ldr	r0, [r7, #8]
 800f120:	f7ff ffeb 	bl	800f0fa <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f124:	4606      	mov	r6, r0
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7fc fc45 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f12c:	4603      	mov	r3, r0
 800f12e:	681c      	ldr	r4, [r3, #0]
 800f130:	6838      	ldr	r0, [r7, #0]
 800f132:	f7fc fc40 	bl	800b9b6 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f136:	4603      	mov	r3, r0
 800f138:	681d      	ldr	r5, [r3, #0]
 800f13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f13c:	f7fc fc46 	bl	800b9cc <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f140:	4603      	mov	r3, r0
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	462a      	mov	r2, r5
 800f146:	4621      	mov	r1, r4
 800f148:	4630      	mov	r0, r6
 800f14a:	f7f8 f982 	bl	8007452 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800f14e:	4603      	mov	r3, r0
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f158 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f158:	b590      	push	{r4, r7, lr}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f162:	6838      	ldr	r0, [r7, #0]
 800f164:	f000 fbf6 	bl	800f954 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f168:	4603      	mov	r3, r0
 800f16a:	4622      	mov	r2, r4
 800f16c:	4619      	mov	r1, r3
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fbfb 	bl	800f96a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd90      	pop	{r4, r7, pc}

0800f17c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fc08 	bl	800f99c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fc09 	bl	800f9b4 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	601a      	str	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 fbf9 	bl	800f9ca <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fbf8 	bl	800f9e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b082      	sub	sp, #8
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4618      	mov	r0, r3
 800f206:	f000 fbf7 	bl	800f9f8 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fbf5 	bl	800fa0e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800f224:	4603      	mov	r3, r0
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f22e:	b580      	push	{r7, lr}
 800f230:	b082      	sub	sp, #8
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 fbf3 	bl	800fa24 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800f23e:	4603      	mov	r3, r0
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3304      	adds	r3, #4
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fbf0 	bl	800fa3a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800f25a:	4603      	mov	r3, r0
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fbef 	bl	800fa50 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800f272:	4603      	mov	r3, r0
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800f286:	6838      	ldr	r0, [r7, #0]
 800f288:	f7fd fbc2 	bl	800ca10 <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f28c:	4603      	mov	r3, r0
 800f28e:	681a      	ldr	r2, [r3, #0]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4618      	mov	r0, r3
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f29e:	b480      	push	{r7}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 fbd1 	bl	800fa66 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}

0800f2ce <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f2ce:	b590      	push	{r4, r7, lr}
 800f2d0:	b089      	sub	sp, #36	; 0x24
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	60f8      	str	r0, [r7, #12]
 800f2d6:	60b9      	str	r1, [r7, #8]
 800f2d8:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f2da:	f107 020c 	add.w	r2, r7, #12
 800f2de:	f107 0308 	add.w	r3, r7, #8
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fd fc80 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	bfd4      	ite	le
 800f2f0:	2301      	movle	r3, #1
 800f2f2:	2300      	movgt	r3, #0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d13a      	bne.n	800f370 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa2>
      const _DistanceType __len = __last - __first;
 800f2fa:	f107 020c 	add.w	r2, r7, #12
 800f2fe:	f107 0308 	add.w	r3, r7, #8
 800f302:	4611      	mov	r1, r2
 800f304:	4618      	mov	r0, r3
 800f306:	f7fd fc70 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f30a:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	3b02      	subs	r3, #2
 800f310:	2b00      	cmp	r3, #0
 800f312:	da00      	bge.n	800f316 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x48>
 800f314:	3301      	adds	r3, #1
 800f316:	105b      	asrs	r3, r3, #1
 800f318:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f31a:	f107 030c 	add.w	r3, r7, #12
 800f31e:	69f9      	ldr	r1, [r7, #28]
 800f320:	4618      	mov	r0, r3
 800f322:	f7fe fbcf 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f326:	4603      	mov	r3, r0
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	f107 0314 	add.w	r3, r7, #20
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fa fd76 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f334:	4603      	mov	r3, r0
 800f336:	4618      	mov	r0, r3
 800f338:	f7fb fcb1 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f33c:	4603      	mov	r3, r0
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f342:	f107 0310 	add.w	r3, r7, #16
 800f346:	4618      	mov	r0, r3
 800f348:	f7fb fca9 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f34c:	4603      	mov	r3, r0
 800f34e:	edd3 7a00 	vldr	s15, [r3]
 800f352:	4623      	mov	r3, r4
 800f354:	eeb0 0a67 	vmov.f32	s0, s15
 800f358:	69ba      	ldr	r2, [r7, #24]
 800f35a:	69f9      	ldr	r1, [r7, #28]
 800f35c:	68f8      	ldr	r0, [r7, #12]
 800f35e:	f000 fb8d 	bl	800fa7c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
	  if (__parent == 0)
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d005      	beq.n	800f374 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa6>
	  __parent--;
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	61fb      	str	r3, [r7, #28]
      while (true)
 800f36e:	e7d4      	b.n	800f31a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4c>
	return;
 800f370:	bf00      	nop
 800f372:	e000      	b.n	800f376 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa8>
	    return;
 800f374:	bf00      	nop
    }
 800f376:	3724      	adds	r7, #36	; 0x24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd90      	pop	{r4, r7, pc}

0800f37c <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f37c:	b590      	push	{r4, r7, lr}
 800f37e:	b083      	sub	sp, #12
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7fc f945 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f38c:	4603      	mov	r3, r0
 800f38e:	681c      	ldr	r4, [r3, #0]
 800f390:	6838      	ldr	r0, [r7, #0]
 800f392:	f7fc f940 	bl	800b616 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f396:	4603      	mov	r3, r0
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	429c      	cmp	r4, r3
 800f39c:	bf34      	ite	cc
 800f39e:	2301      	movcc	r3, #1
 800f3a0:	2300      	movcs	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd90      	pop	{r4, r7, pc}

0800f3ac <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f3ac:	b5b0      	push	{r4, r5, r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f3ba:	1d3b      	adds	r3, r7, #4
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fa fd2f 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fb fc6a 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800f3d0:	f107 030c 	add.w	r3, r7, #12
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fa fd23 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fb fc5e 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	1d3b      	adds	r3, r7, #4
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fa fd1a 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 800f3f2:	f107 020c 	add.w	r2, r7, #12
 800f3f6:	f107 0308 	add.w	r3, r7, #8
 800f3fa:	4611      	mov	r1, r2
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fd fbf4 	bl	800cbea <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f402:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f404:	f107 0314 	add.w	r3, r7, #20
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fb fc48 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f40e:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f410:	edd3 7a00 	vldr	s15, [r3]
 800f414:	462b      	mov	r3, r5
 800f416:	eeb0 0a67 	vmov.f32	s0, s15
 800f41a:	4622      	mov	r2, r4
 800f41c:	2100      	movs	r1, #0
 800f41e:	68f8      	ldr	r0, [r7, #12]
 800f420:	f000 fb2c 	bl	800fa7c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 800f424:	bf00      	nop
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bdb0      	pop	{r4, r5, r7, pc}

0800f42c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	1f1a      	subs	r2, r3, #4
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	601a      	str	r2, [r3, #0]
	return *this;
 800f43e:	687b      	ldr	r3, [r7, #4]
      }
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f44c:	b590      	push	{r4, r7, lr}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f456:	1d3b      	adds	r3, r7, #4
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fa fce1 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f45e:	4604      	mov	r4, r0
 800f460:	463b      	mov	r3, r7
 800f462:	4618      	mov	r0, r3
 800f464:	f7fa fcdc 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f468:	4603      	mov	r3, r0
 800f46a:	4619      	mov	r1, r3
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7fb fc21 	bl	800acb4 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f472:	bf00      	nop
 800f474:	370c      	adds	r7, #12
 800f476:	46bd      	mov	sp, r7
 800f478:	bd90      	pop	{r4, r7, pc}

0800f47a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800f47a:	b480      	push	{r7}
 800f47c:	b083      	sub	sp, #12
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f490:	b5b0      	push	{r4, r5, r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	f7fd fb7f 	bl	800cba0 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	68b8      	ldr	r0, [r7, #8]
 800f4a6:	f7fd fb7b 	bl	800cba0 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4aa:	4605      	mov	r5, r0
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7fd fb77 	bl	800cba0 <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fb93 	bl	800fbe4 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7fd fb7a 	bl	800cbbc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>
 800f4c8:	4603      	mov	r3, r0
    }
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bdb0      	pop	{r4, r5, r7, pc}

0800f4d2 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	ed2d 8b02 	vpush	{d8}
 800f4d8:	b084      	sub	sp, #16
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	ed93 8a00 	vldr	s16, [r3]
 800f4e8:	1d3b      	adds	r3, r7, #4
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fa fc98 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	edd3 7a00 	vldr	s15, [r3]
 800f4f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fe:	bf4c      	ite	mi
 800f500:	2301      	movmi	r3, #1
 800f502:	2300      	movpl	r3, #0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	ecbd 8b02 	vpop	{d8}
 800f510:	bd80      	pop	{r7, pc}

0800f512 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 800f512:	b580      	push	{r7, lr}
 800f514:	b082      	sub	sp, #8
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800f51a:	2100      	movs	r1, #0
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fb71 	bl	800fc04 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 800f522:	4603      	mov	r3, r0
 800f524:	4618      	mov	r0, r3
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	4618      	mov	r0, r3
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f542:	b590      	push	{r4, r7, lr}
 800f544:	b087      	sub	sp, #28
 800f546:	af00      	add	r7, sp, #0
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607a      	str	r2, [r7, #4]
 800f54e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f554:	e012      	b.n	800f57c <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f556:	6978      	ldr	r0, [r7, #20]
 800f558:	f7fd fc4f 	bl	800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f55c:	4604      	mov	r4, r0
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f7fd fc4b 	bl	800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f564:	4603      	mov	r3, r0
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4619      	mov	r1, r3
 800f56a:	4620      	mov	r0, r4
 800f56c:	f000 fb55 	bl	800fc1a <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	3308      	adds	r3, #8
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	3308      	adds	r3, #8
 800f57a:	617b      	str	r3, [r7, #20]
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	429a      	cmp	r2, r3
 800f582:	d1e8      	bne.n	800f556 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800f584:	697b      	ldr	r3, [r7, #20]
    }
 800f586:	4618      	mov	r0, r3
 800f588:	371c      	adds	r7, #28
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd90      	pop	{r4, r7, pc}

0800f58e <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4618      	mov	r0, r3
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f5a4:	b590      	push	{r4, r7, lr}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 fb4e 	bl	800fc50 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	6838      	ldr	r0, [r7, #0]
 800f5b8:	f000 fb4a 	bl	800fc50 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	429c      	cmp	r4, r3
 800f5c0:	bf0c      	ite	eq
 800f5c2:	2301      	moveq	r3, #1
 800f5c4:	2300      	movne	r3, #0
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd90      	pop	{r4, r7, pc}

0800f5d0 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800f5e6:	b590      	push	{r4, r7, lr}
 800f5e8:	b085      	sub	sp, #20
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff ffec 	bl	800f5d0 <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2008      	movs	r0, #8
 800f600:	f7f1 fde6 	bl	80011d0 <_ZnwjPv>
 800f604:	4603      	mov	r3, r0
 800f606:	4622      	mov	r2, r4
 800f608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f60c:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800f610:	bf00      	nop
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	bd90      	pop	{r4, r7, pc}

0800f618 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08a      	sub	sp, #40	; 0x28
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f624:	f107 020c 	add.w	r2, r7, #12
 800f628:	f107 0308 	add.w	r3, r7, #8
 800f62c:	4611      	mov	r1, r2
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fd fc67 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f634:	4603      	mov	r3, r0
 800f636:	2b01      	cmp	r3, #1
 800f638:	bfd4      	ite	le
 800f63a:	2301      	movle	r3, #1
 800f63c:	2300      	movgt	r3, #0
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b00      	cmp	r3, #0
 800f642:	d143      	bne.n	800f6cc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb4>
      const _DistanceType __len = __last - __first;
 800f644:	f107 020c 	add.w	r2, r7, #12
 800f648:	f107 0308 	add.w	r3, r7, #8
 800f64c:	4611      	mov	r1, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fd fc57 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f654:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800f656:	6a3b      	ldr	r3, [r7, #32]
 800f658:	3b02      	subs	r3, #2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da00      	bge.n	800f660 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x48>
 800f65e:	3301      	adds	r3, #1
 800f660:	105b      	asrs	r3, r3, #1
 800f662:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f664:	f107 030c 	add.w	r3, r7, #12
 800f668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe fc66 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f670:	4603      	mov	r3, r0
 800f672:	61fb      	str	r3, [r7, #28]
 800f674:	f107 031c 	add.w	r3, r7, #28
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff fbd3 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff fbdb 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f686:	4602      	mov	r2, r0
 800f688:	f107 0314 	add.w	r3, r7, #20
 800f68c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f690:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f694:	f107 0314 	add.w	r3, r7, #20
 800f698:	4618      	mov	r0, r3
 800f69a:	f7ff fbcf 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	ed93 7a00 	vldr	s14, [r3]
 800f6a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6aa:	7813      	ldrb	r3, [r2, #0]
 800f6ac:	eeb0 0a47 	vmov.f32	s0, s14
 800f6b0:	eef0 0a67 	vmov.f32	s1, s15
 800f6b4:	6a3a      	ldr	r2, [r7, #32]
 800f6b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f000 fad5 	bl	800fc68 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d005      	beq.n	800f6d0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	  __parent--;
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800f6ca:	e7cb      	b.n	800f664 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4c>
	return;
 800f6cc:	bf00      	nop
 800f6ce:	e000      	b.n	800f6d2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xba>
	    return;
 800f6d0:	bf00      	nop
    }
 800f6d2:	3728      	adds	r7, #40	; 0x28
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f6d8:	b590      	push	{r4, r7, lr}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7fd fc4a 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	681c      	ldr	r4, [r3, #0]
 800f6ec:	6838      	ldr	r0, [r7, #0]
 800f6ee:	f7fd fc45 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	429c      	cmp	r4, r3
 800f6f8:	bf34      	ite	cc
 800f6fa:	2301      	movcc	r3, #1
 800f6fc:	2300      	movcs	r3, #0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	bd90      	pop	{r4, r7, pc}

0800f708 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f708:	b590      	push	{r4, r7, lr}
 800f70a:	b087      	sub	sp, #28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
 800f714:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f716:	1d3b      	adds	r3, r7, #4
 800f718:	4618      	mov	r0, r3
 800f71a:	f7ff fb83 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f71e:	4603      	mov	r3, r0
 800f720:	4618      	mov	r0, r3
 800f722:	f7ff fb8b 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f726:	4602      	mov	r2, r0
 800f728:	f107 0310 	add.w	r3, r7, #16
 800f72c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f730:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800f734:	f107 030c 	add.w	r3, r7, #12
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fb73 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f73e:	4603      	mov	r3, r0
 800f740:	4618      	mov	r0, r3
 800f742:	f7ff fb7b 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f746:	4604      	mov	r4, r0
 800f748:	1d3b      	adds	r3, r7, #4
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff fb6a 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f750:	4603      	mov	r3, r0
 800f752:	4622      	mov	r2, r4
 800f754:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f758:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800f75c:	f107 020c 	add.w	r2, r7, #12
 800f760:	f107 0308 	add.w	r3, r7, #8
 800f764:	4611      	mov	r1, r2
 800f766:	4618      	mov	r0, r3
 800f768:	f7fd fbcb 	bl	800cf02 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f76c:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f76e:	f107 0310 	add.w	r3, r7, #16
 800f772:	4618      	mov	r0, r3
 800f774:	f7ff fb62 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f778:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	ed93 7a00 	vldr	s14, [r3]
 800f780:	edd3 7a01 	vldr	s15, [r3, #4]
 800f784:	7813      	ldrb	r3, [r2, #0]
 800f786:	eeb0 0a47 	vmov.f32	s0, s14
 800f78a:	eef0 0a67 	vmov.f32	s1, s15
 800f78e:	4622      	mov	r2, r4
 800f790:	2100      	movs	r1, #0
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	f000 fa68 	bl	800fc68 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 800f798:	bf00      	nop
 800f79a:	371c      	adds	r7, #28
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd90      	pop	{r4, r7, pc}

0800f7a0 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f1a3 0208 	sub.w	r2, r3, #8
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	601a      	str	r2, [r3, #0]
	return *this;
 800f7b4:	687b      	ldr	r3, [r7, #4]
      }
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	370c      	adds	r7, #12
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr

0800f7c2 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f7c2:	b590      	push	{r4, r7, lr}
 800f7c4:	b083      	sub	sp, #12
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f7cc:	1d3b      	adds	r3, r7, #4
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff fb28 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff fb23 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f000 fb05 	bl	800fdf2 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800f7e8:	bf00      	nop
 800f7ea:	370c      	adds	r7, #12
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd90      	pop	{r4, r7, pc}

0800f7f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
    __miter_base(_Iterator __it)
 800f7f0:	b480      	push	{r7}
 800f7f2:	b083      	sub	sp, #12
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f806:	b5b0      	push	{r4, r5, r7, lr}
 800f808:	b084      	sub	sp, #16
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	60b9      	str	r1, [r7, #8]
 800f810:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f000 fb14 	bl	800fe40 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f818:	4604      	mov	r4, r0
 800f81a:	68b8      	ldr	r0, [r7, #8]
 800f81c:	f000 fb10 	bl	800fe40 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f820:	4605      	mov	r5, r0
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 fb0c 	bl	800fe40 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f828:	4603      	mov	r3, r0
 800f82a:	461a      	mov	r2, r3
 800f82c:	4629      	mov	r1, r5
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 fb14 	bl	800fe5c <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800f834:	4603      	mov	r3, r0
 800f836:	4619      	mov	r1, r3
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fb1f 	bl	800fe7c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800f83e:	4603      	mov	r3, r0
    }
 800f840:	4618      	mov	r0, r3
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bdb0      	pop	{r4, r5, r7, pc}

0800f848 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	4618      	mov	r0, r3
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800f85e:	b580      	push	{r7, lr}
 800f860:	b082      	sub	sp, #8
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fd fbaa 	bl	800cfc4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800f87a:	b590      	push	{r4, r7, lr}
 800f87c:	b085      	sub	sp, #20
 800f87e:	af00      	add	r7, sp, #0
 800f880:	60f8      	str	r0, [r7, #12]
 800f882:	60b9      	str	r1, [r7, #8]
 800f884:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 800f886:	68fc      	ldr	r4, [r7, #12]
 800f888:	1d3b      	adds	r3, r7, #4
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7ff faca 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f890:	4603      	mov	r3, r0
 800f892:	461a      	mov	r2, r3
 800f894:	68b9      	ldr	r1, [r7, #8]
 800f896:	4620      	mov	r0, r4
 800f898:	f7f4 f8c0 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800f89c:	4603      	mov	r3, r0
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3714      	adds	r7, #20
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd90      	pop	{r4, r7, pc}

0800f8a6 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b084      	sub	sp, #16
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	60f8      	str	r0, [r7, #12]
 800f8ae:	60b9      	str	r1, [r7, #8]
 800f8b0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f8b2:	68b8      	ldr	r0, [r7, #8]
 800f8b4:	f7fb f9f3 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	68f9      	ldr	r1, [r7, #12]
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7fd fd42 	bl	800d348 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f8c4:	68b8      	ldr	r0, [r7, #8]
 800f8c6:	f7fd f943 	bl	800cb50 <_ZSt11__addressofIfEPT_RS0_>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7fd f949 	bl	800cb66 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
    }
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f90a:	b590      	push	{r4, r7, lr}
 800f90c:	b085      	sub	sp, #20
 800f90e:	af00      	add	r7, sp, #0
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f916:	68b8      	ldr	r0, [r7, #8]
 800f918:	f7ff ffec 	bl	800f8f4 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f91c:	4603      	mov	r3, r0
 800f91e:	681c      	ldr	r4, [r3, #0]
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7f1 fc8f 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f926:	4603      	mov	r3, r0
 800f928:	4619      	mov	r1, r3
 800f92a:	2004      	movs	r0, #4
 800f92c:	f7f1 fc50 	bl	80011d0 <_ZnwjPv>
 800f930:	4603      	mov	r3, r0
 800f932:	601c      	str	r4, [r3, #0]
	  }
 800f934:	bf00      	nop
 800f936:	3714      	adds	r7, #20
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd90      	pop	{r4, r7, pc}

0800f93c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7f1 fc7d 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f94a:	4603      	mov	r3, r0
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f96a:	b590      	push	{r4, r7, lr}
 800f96c:	b085      	sub	sp, #20
 800f96e:	af00      	add	r7, sp, #0
 800f970:	60f8      	str	r0, [r7, #12]
 800f972:	60b9      	str	r1, [r7, #8]
 800f974:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f976:	68b8      	ldr	r0, [r7, #8]
 800f978:	f7ff ffec 	bl	800f954 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f97c:	4604      	mov	r4, r0
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f7f1 fc60 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f984:	4603      	mov	r3, r0
 800f986:	4619      	mov	r1, r3
 800f988:	2004      	movs	r0, #4
 800f98a:	f7f1 fc21 	bl	80011d0 <_ZnwjPv>
 800f98e:	4602      	mov	r2, r0
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	6013      	str	r3, [r2, #0]
	  }
 800f994:	bf00      	nop
 800f996:	3714      	adds	r7, #20
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}

0800f99c <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7f1 fc4d 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4618      	mov	r0, r3
 800f9c0:	370c      	adds	r7, #12
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f9ca:	b480      	push	{r7}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 fa5e 	bl	800feaa <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	370c      	adds	r7, #12
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa0e:	b480      	push	{r7}
 800fa10:	b083      	sub	sp, #12
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr

0800fa50 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa66:	b480      	push	{r7}
 800fa68:	b083      	sub	sp, #12
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fa7c:	b5b0      	push	{r4, r5, r7, lr}
 800fa7e:	b08e      	sub	sp, #56	; 0x38
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6178      	str	r0, [r7, #20]
 800fa84:	6139      	str	r1, [r7, #16]
 800fa86:	60fa      	str	r2, [r7, #12]
 800fa88:	ed87 0a02 	vstr	s0, [r7, #8]
 800fa8c:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800fa96:	e042      	b.n	800fb1e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800fa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800faa0:	f107 0314 	add.w	r3, r7, #20
 800faa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe f80c 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800faac:	4604      	mov	r4, r0
 800faae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fab0:	1e5a      	subs	r2, r3, #1
 800fab2:	f107 0314 	add.w	r3, r7, #20
 800fab6:	4611      	mov	r1, r2
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fe f803 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fabe:	4602      	mov	r2, r0
 800fac0:	1d3b      	adds	r3, r7, #4
 800fac2:	4621      	mov	r1, r4
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fe fe35 	bl	800e734 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x5a>
	    __secondChild--;
 800fad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad2:	3b01      	subs	r3, #1
 800fad4:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fad6:	f107 0314 	add.w	r3, r7, #20
 800fada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fd fff1 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fae2:	4603      	mov	r3, r0
 800fae4:	623b      	str	r3, [r7, #32]
 800fae6:	f107 0320 	add.w	r3, r7, #32
 800faea:	4618      	mov	r0, r3
 800faec:	f7fa f998 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800faf0:	4603      	mov	r3, r0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fb f8d3 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800faf8:	4604      	mov	r4, r0
 800fafa:	f107 0314 	add.w	r3, r7, #20
 800fafe:	6939      	ldr	r1, [r7, #16]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fd ffdf 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb06:	4603      	mov	r3, r0
 800fb08:	627b      	str	r3, [r7, #36]	; 0x24
 800fb0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fa f986 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb14:	4602      	mov	r2, r0
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 800fb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1c:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3b01      	subs	r3, #1
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	da00      	bge.n	800fb28 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xac>
 800fb26:	3301      	adds	r3, #1
 800fb28:	105b      	asrs	r3, r3, #1
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	dbb2      	blt.n	800fa98 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f003 0301 	and.w	r3, r3, #1
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d134      	bne.n	800fba6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	3b02      	subs	r3, #2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	da00      	bge.n	800fb46 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xca>
 800fb44:	3301      	adds	r3, #1
 800fb46:	105b      	asrs	r3, r3, #1
 800fb48:	461a      	mov	r2, r3
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4c:	4293      	cmp	r3, r2
 800fb4e:	d12a      	bne.n	800fba6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
	  __secondChild = 2 * (__secondChild + 1);
 800fb50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb52:	3301      	adds	r3, #1
 800fb54:	005b      	lsls	r3, r3, #1
 800fb56:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5a:	1e5a      	subs	r2, r3, #1
 800fb5c:	f107 0314 	add.w	r3, r7, #20
 800fb60:	4611      	mov	r1, r2
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fd ffae 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fa f955 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb76:	4603      	mov	r3, r0
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fb f890 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fb7e:	4604      	mov	r4, r0
 800fb80:	f107 0314 	add.w	r3, r7, #20
 800fb84:	6939      	ldr	r1, [r7, #16]
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fd ff9c 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fa f943 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 800fba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba2:	3b01      	subs	r3, #1
 800fba4:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fba6:	1d3b      	adds	r3, r7, #4
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f000 f989 	bl	800fec0 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800fbae:	f107 031c 	add.w	r3, r7, #28
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f1 fb1f 	bl	80011f8 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fbba:	f107 0308 	add.w	r3, r7, #8
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fb f86d 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fbc4:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fbc6:	edd3 7a00 	vldr	s15, [r3]
 800fbca:	f107 031c 	add.w	r3, r7, #28
 800fbce:	eeb0 0a67 	vmov.f32	s0, s15
 800fbd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbd4:	6939      	ldr	r1, [r7, #16]
 800fbd6:	6978      	ldr	r0, [r7, #20]
 800fbd8:	f000 f97d 	bl	800fed6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800fbdc:	bf00      	nop
 800fbde:	3738      	adds	r7, #56	; 0x38
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bdb0      	pop	{r4, r5, r7, pc}

0800fbe4 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	68b9      	ldr	r1, [r7, #8]
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f000 f9dd 	bl	800ffb4 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800fc04:	b40f      	push	{r0, r1, r2, r3}
 800fc06:	b480      	push	{r7}
 800fc08:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800fc0a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	b004      	add	sp, #16
 800fc18:	4770      	bx	lr

0800fc1a <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fc1a:	b580      	push	{r7, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	60f8      	str	r0, [r7, #12]
 800fc22:	60b9      	str	r1, [r7, #8]
 800fc24:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fc26:	68b8      	ldr	r0, [r7, #8]
 800fc28:	f7ff f908 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	461a      	mov	r2, r3
 800fc30:	68f9      	ldr	r1, [r7, #12]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7fe ff8e 	bl	800eb54 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fc38:	68b8      	ldr	r0, [r7, #8]
 800fc3a:	f7fd f8de 	bl	800cdfa <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	4619      	mov	r1, r3
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7fd f8e4 	bl	800ce10 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800fc50:	b480      	push	{r7}
 800fc52:	b083      	sub	sp, #12
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	370c      	adds	r7, #12
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fc68:	b590      	push	{r4, r7, lr}
 800fc6a:	b08f      	sub	sp, #60	; 0x3c
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6178      	str	r0, [r7, #20]
 800fc70:	6139      	str	r1, [r7, #16]
 800fc72:	60fa      	str	r2, [r7, #12]
 800fc74:	eeb0 7a40 	vmov.f32	s14, s0
 800fc78:	eef0 7a60 	vmov.f32	s15, s1
 800fc7c:	703b      	strb	r3, [r7, #0]
 800fc7e:	ed87 7a01 	vstr	s14, [r7, #4]
 800fc82:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800fc8e:	e045      	b.n	800fd1c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 800fc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc92:	3301      	adds	r3, #1
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800fc98:	f107 0314 	add.w	r3, r7, #20
 800fc9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe f94c 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fca4:	4604      	mov	r4, r0
 800fca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca8:	1e5a      	subs	r2, r3, #1
 800fcaa:	f107 0314 	add.w	r3, r7, #20
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe f943 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	463b      	mov	r3, r7
 800fcba:	4621      	mov	r1, r4
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fe ffcf 	bl	800ec60 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d002      	beq.n	800fcce <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x66>
	    __secondChild--;
 800fcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcca:	3b01      	subs	r3, #1
 800fccc:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fcce:	f107 0314 	add.w	r3, r7, #20
 800fcd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fe f931 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	623b      	str	r3, [r7, #32]
 800fcde:	f107 0320 	add.w	r3, r7, #32
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff f89e 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fce8:	4603      	mov	r3, r0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7ff f8a6 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	f107 0314 	add.w	r3, r7, #20
 800fcf6:	6939      	ldr	r1, [r7, #16]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fe f91f 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	627b      	str	r3, [r7, #36]	; 0x24
 800fd02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7ff f88c 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	4622      	mov	r2, r4
 800fd10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd14:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800fd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd1a:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	da00      	bge.n	800fd26 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xbe>
 800fd24:	3301      	adds	r3, #1
 800fd26:	105b      	asrs	r3, r3, #1
 800fd28:	461a      	mov	r2, r3
 800fd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	dbaf      	blt.n	800fc90 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x28>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f003 0301 	and.w	r3, r3, #1
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d137      	bne.n	800fdaa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	3b02      	subs	r3, #2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	da00      	bge.n	800fd44 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xdc>
 800fd42:	3301      	adds	r3, #1
 800fd44:	105b      	asrs	r3, r3, #1
 800fd46:	461a      	mov	r2, r3
 800fd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d12d      	bne.n	800fdaa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
	  __secondChild = 2 * (__secondChild + 1);
 800fd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd50:	3301      	adds	r3, #1
 800fd52:	005b      	lsls	r3, r3, #1
 800fd54:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd58:	1e5a      	subs	r2, r3, #1
 800fd5a:	f107 0314 	add.w	r3, r7, #20
 800fd5e:	4611      	mov	r1, r2
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fe f8eb 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd66:	4603      	mov	r3, r0
 800fd68:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff f858 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd74:	4603      	mov	r3, r0
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff f860 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	f107 0314 	add.w	r3, r7, #20
 800fd82:	6939      	ldr	r1, [r7, #16]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe f8d9 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff f846 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	4622      	mov	r2, r4
 800fd9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fda0:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800fda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda6:	3b01      	subs	r3, #1
 800fda8:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fdaa:	463b      	mov	r3, r7
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7ff fd4b 	bl	800f848 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	f107 031c 	add.w	r3, r7, #28
 800fdb8:	4611      	mov	r1, r2
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f000 f90a 	bl	800ffd4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fdc0:	1d3b      	adds	r3, r7, #4
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff f83a 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fdc8:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fdca:	f107 021c 	add.w	r2, r7, #28
 800fdce:	ed93 7a00 	vldr	s14, [r3]
 800fdd2:	edd3 7a01 	vldr	s15, [r3, #4]
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	eeb0 0a47 	vmov.f32	s0, s14
 800fddc:	eef0 0a67 	vmov.f32	s1, s15
 800fde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fde2:	6939      	ldr	r1, [r7, #16]
 800fde4:	6978      	ldr	r0, [r7, #20]
 800fde6:	f000 f903 	bl	800fff0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 800fdea:	bf00      	nop
 800fdec:	373c      	adds	r7, #60	; 0x3c
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd90      	pop	{r4, r7, pc}

0800fdf2 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f7ff f81d 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe02:	4602      	mov	r2, r0
 800fe04:	f107 0308 	add.w	r3, r7, #8
 800fe08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe0c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800fe10:	6838      	ldr	r0, [r7, #0]
 800fe12:	f7ff f813 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe16:	4602      	mov	r2, r0
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe1e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800fe22:	f107 0308 	add.w	r3, r7, #8
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff f808 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe34:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fe38:	bf00      	nop
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fe48:	1d3b      	adds	r3, r7, #4
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fd f896 	bl	800cf7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800fe50:	4603      	mov	r3, r0
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	68b9      	ldr	r1, [r7, #8]
 800fe6c:	68f8      	ldr	r0, [r7, #12]
 800fe6e:	f000 f938 	bl	80100e2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800fe72:	4603      	mov	r3, r0
 800fe74:	4618      	mov	r0, r3
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7ff ffda 	bl	800fe40 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	1a9b      	subs	r3, r3, r2
 800fe92:	10db      	asrs	r3, r3, #3
 800fe94:	461a      	mov	r2, r3
 800fe96:	1d3b      	adds	r3, r7, #4
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fe f84e 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fea0:	4603      	mov	r3, r0
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800feaa:	b480      	push	{r7}
 800feac:	b083      	sub	sp, #12
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	4618      	mov	r0, r3
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fed6:	b590      	push	{r4, r7, lr}
 800fed8:	b08b      	sub	sp, #44	; 0x2c
 800feda:	af00      	add	r7, sp, #0
 800fedc:	6178      	str	r0, [r7, #20]
 800fede:	6139      	str	r1, [r7, #16]
 800fee0:	60fa      	str	r2, [r7, #12]
 800fee2:	ed87 0a02 	vstr	s0, [r7, #8]
 800fee6:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	3b01      	subs	r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	da00      	bge.n	800fef2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x1c>
 800fef0:	3301      	adds	r3, #1
 800fef2:	105b      	asrs	r3, r3, #1
 800fef4:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fef6:	e02a      	b.n	800ff4e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x78>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fef8:	f107 0314 	add.w	r3, r7, #20
 800fefc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fd fde0 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff04:	4603      	mov	r3, r0
 800ff06:	61bb      	str	r3, [r7, #24]
 800ff08:	f107 0318 	add.w	r3, r7, #24
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7f9 ff87 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff12:	4603      	mov	r3, r0
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fa fec2 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	f107 0314 	add.w	r3, r7, #20
 800ff20:	6939      	ldr	r1, [r7, #16]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fd fdce 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	61fb      	str	r3, [r7, #28]
 800ff2c:	f107 031c 	add.w	r3, r7, #28
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7f9 ff75 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff36:	4602      	mov	r2, r0
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	da00      	bge.n	800ff4a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x74>
 800ff48:	3301      	adds	r3, #1
 800ff4a:	105b      	asrs	r3, r3, #1
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800ff4e:	693a      	ldr	r2, [r7, #16]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	dd11      	ble.n	800ff7a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ff56:	f107 0314 	add.w	r3, r7, #20
 800ff5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fd fdb1 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff62:	4601      	mov	r1, r0
 800ff64:	f107 0308 	add.w	r3, r7, #8
 800ff68:	461a      	mov	r2, r3
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f8c9 	bl	8010102 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d001      	beq.n	800ff7a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e000      	b.n	800ff7c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa6>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d1bb      	bne.n	800fef8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x22>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800ff80:	f107 0308 	add.w	r3, r7, #8
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fa fe8a 	bl	800ac9e <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	f107 0314 	add.w	r3, r7, #20
 800ff90:	6939      	ldr	r1, [r7, #16]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fd fd96 	bl	800dac4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	623b      	str	r3, [r7, #32]
 800ff9c:	f107 0320 	add.w	r3, r7, #32
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f9 ff3d 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	6013      	str	r3, [r2, #0]
    }
 800ffac:	bf00      	nop
 800ffae:	372c      	adds	r7, #44	; 0x2c
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd90      	pop	{r4, r7, pc}

0800ffb4 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	68b9      	ldr	r1, [r7, #8]
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f000 f8b9 	bl	801013c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800ffca:	4603      	mov	r3, r0
    }
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fc ffef 	bl	800cfc4 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fff0:	b590      	push	{r4, r7, lr}
 800fff2:	b08b      	sub	sp, #44	; 0x2c
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6178      	str	r0, [r7, #20]
 800fff8:	6139      	str	r1, [r7, #16]
 800fffa:	60fa      	str	r2, [r7, #12]
 800fffc:	eeb0 7a40 	vmov.f32	s14, s0
 8010000:	eef0 7a60 	vmov.f32	s15, s1
 8010004:	603b      	str	r3, [r7, #0]
 8010006:	ed87 7a01 	vstr	s14, [r7, #4]
 801000a:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	3b01      	subs	r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	da00      	bge.n	8010018 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x28>
 8010016:	3301      	adds	r3, #1
 8010018:	105b      	asrs	r3, r3, #1
 801001a:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 801001c:	e02d      	b.n	801007a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x8a>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 801001e:	f107 0314 	add.w	r3, r7, #20
 8010022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010024:	4618      	mov	r0, r3
 8010026:	f7fd ff89 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801002a:	4603      	mov	r3, r0
 801002c:	61bb      	str	r3, [r7, #24]
 801002e:	f107 0318 	add.w	r3, r7, #24
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe fef6 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8010038:	4603      	mov	r3, r0
 801003a:	4618      	mov	r0, r3
 801003c:	f7fe fefe 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8010040:	4604      	mov	r4, r0
 8010042:	f107 0314 	add.w	r3, r7, #20
 8010046:	6939      	ldr	r1, [r7, #16]
 8010048:	4618      	mov	r0, r3
 801004a:	f7fd ff77 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801004e:	4603      	mov	r3, r0
 8010050:	61fb      	str	r3, [r7, #28]
 8010052:	f107 031c 	add.w	r3, r7, #28
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe fee4 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 801005c:	4603      	mov	r3, r0
 801005e:	4622      	mov	r2, r4
 8010060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010064:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	3b01      	subs	r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	da00      	bge.n	8010076 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x86>
 8010074:	3301      	adds	r3, #1
 8010076:	105b      	asrs	r3, r3, #1
 8010078:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 801007a:	693a      	ldr	r2, [r7, #16]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	429a      	cmp	r2, r3
 8010080:	dd10      	ble.n	80100a4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 8010082:	f107 0314 	add.w	r3, r7, #20
 8010086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010088:	4618      	mov	r0, r3
 801008a:	f7fd ff57 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801008e:	4601      	mov	r1, r0
 8010090:	1d3b      	adds	r3, r7, #4
 8010092:	461a      	mov	r2, r3
 8010094:	6838      	ldr	r0, [r7, #0]
 8010096:	f000 f873 	bl	8010180 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
 80100a4:	2300      	movs	r3, #0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1b9      	bne.n	801001e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80100aa:	1d3b      	adds	r3, r7, #4
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe fec5 	bl	800ee3c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80100b2:	4604      	mov	r4, r0
 80100b4:	f107 0314 	add.w	r3, r7, #20
 80100b8:	6939      	ldr	r1, [r7, #16]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fd ff3e 	bl	800df3c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80100c0:	4603      	mov	r3, r0
 80100c2:	623b      	str	r3, [r7, #32]
 80100c4:	f107 0320 	add.w	r3, r7, #32
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe feab 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80100ce:	4603      	mov	r3, r0
 80100d0:	4622      	mov	r2, r4
 80100d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80100da:	bf00      	nop
 80100dc:	372c      	adds	r7, #44	; 0x2c
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd90      	pop	{r4, r7, pc}

080100e2 <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b084      	sub	sp, #16
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	60f8      	str	r0, [r7, #12]
 80100ea:	60b9      	str	r1, [r7, #8]
 80100ec:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	68b9      	ldr	r1, [r7, #8]
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f000 f85b 	bl	80101ae <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 80100f8:	4603      	mov	r3, r0
    }
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	60f8      	str	r0, [r7, #12]
 801010a:	60b9      	str	r1, [r7, #8]
 801010c:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 801010e:	f107 0308 	add.w	r3, r7, #8
 8010112:	4618      	mov	r0, r3
 8010114:	f7f9 fe84 	bl	8009e20 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8010118:	4603      	mov	r3, r0
 801011a:	ed93 7a00 	vldr	s14, [r3]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	edd3 7a00 	vldr	s15, [r3]
 8010124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012c:	bf4c      	ite	mi
 801012e:	2301      	movmi	r3, #1
 8010130:	2300      	movpl	r3, #0
 8010132:	b2db      	uxtb	r3, r3
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010148:	68ba      	ldr	r2, [r7, #8]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	109b      	asrs	r3, r3, #2
 8010150:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	425b      	negs	r3, r3
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	18d0      	adds	r0, r2, r3
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	461a      	mov	r2, r3
 8010168:	68f9      	ldr	r1, [r7, #12]
 801016a:	f00d fe85 	bl	801de78 <memmove>
	  return __result - _Num;
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	425b      	negs	r3, r3
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	4413      	add	r3, r2
	}
 8010178:	4618      	mov	r0, r3
 801017a:	3718      	adds	r7, #24
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b085      	sub	sp, #20
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 801018c:	68fc      	ldr	r4, [r7, #12]
 801018e:	f107 0308 	add.w	r3, r7, #8
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe fe46 	bl	800ee24 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8010198:	4603      	mov	r3, r0
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	4619      	mov	r1, r3
 801019e:	4620      	mov	r0, r4
 80101a0:	f7f3 fc3c 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80101a4:	4603      	mov	r3, r0
 80101a6:	4618      	mov	r0, r3
 80101a8:	3714      	adds	r7, #20
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd90      	pop	{r4, r7, pc}

080101ae <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b086      	sub	sp, #24
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	60f8      	str	r0, [r7, #12]
 80101b6:	60b9      	str	r1, [r7, #8]
 80101b8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	10db      	asrs	r3, r3, #3
 80101c2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00a      	beq.n	80101e0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	00db      	lsls	r3, r3, #3
 80101ce:	425b      	negs	r3, r3
 80101d0:	687a      	ldr	r2, [r7, #4]
 80101d2:	18d0      	adds	r0, r2, r3
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	00db      	lsls	r3, r3, #3
 80101d8:	461a      	mov	r2, r3
 80101da:	68f9      	ldr	r1, [r7, #12]
 80101dc:	f00d fe4c 	bl	801de78 <memmove>
	  return __result - _Num;
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	425b      	negs	r3, r3
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4413      	add	r3, r2
	}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
	...

080101f4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d108      	bne.n	8010216 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801020a:	4293      	cmp	r3, r2
 801020c:	d103      	bne.n	8010216 <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365511_0 = ei_impulse_handle_t( &impulse_365511_0 );
 801020e:	4909      	ldr	r1, [pc, #36]	; (8010234 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8010210:	4809      	ldr	r0, [pc, #36]	; (8010238 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010212:	f7f2 fe55 	bl	8002ec0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d107      	bne.n	801022c <_Z41__static_initialization_and_destruction_0ii+0x38>
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010222:	4293      	cmp	r3, r2
 8010224:	d102      	bne.n	801022c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010226:	4804      	ldr	r0, [pc, #16]	; (8010238 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010228:	f7f7 f9ab 	bl	8007582 <_ZN19ei_impulse_handle_tD1Ev>
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	08023b50 	.word	0x08023b50
 8010238:	200053b0 	.word	0x200053b0

0801023c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 801023c:	b580      	push	{r7, lr}
 801023e:	af00      	add	r7, sp, #0
 8010240:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010244:	2001      	movs	r0, #1
 8010246:	f7ff ffd5 	bl	80101f4 <_Z41__static_initialization_and_destruction_0ii>
 801024a:	bd80      	pop	{r7, pc}

0801024c <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 801024c:	b580      	push	{r7, lr}
 801024e:	af00      	add	r7, sp, #0
 8010250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010254:	2000      	movs	r0, #0
 8010256:	f7ff ffcd 	bl	80101f4 <_Z41__static_initialization_and_destruction_0ii>
 801025a:	bd80      	pop	{r7, pc}

0801025c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801025c:	b480      	push	{r7}
 801025e:	b083      	sub	sp, #12
 8010260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8010262:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <HAL_MspInit+0x44>)
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	4a0e      	ldr	r2, [pc, #56]	; (80102a0 <HAL_MspInit+0x44>)
 8010268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801026c:	6413      	str	r3, [r2, #64]	; 0x40
 801026e:	4b0c      	ldr	r3, [pc, #48]	; (80102a0 <HAL_MspInit+0x44>)
 8010270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010276:	607b      	str	r3, [r7, #4]
 8010278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801027a:	4b09      	ldr	r3, [pc, #36]	; (80102a0 <HAL_MspInit+0x44>)
 801027c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801027e:	4a08      	ldr	r2, [pc, #32]	; (80102a0 <HAL_MspInit+0x44>)
 8010280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010284:	6453      	str	r3, [r2, #68]	; 0x44
 8010286:	4b06      	ldr	r3, [pc, #24]	; (80102a0 <HAL_MspInit+0x44>)
 8010288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801028a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010292:	bf00      	nop
 8010294:	370c      	adds	r7, #12
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	40023800 	.word	0x40023800

080102a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b0ac      	sub	sp, #176	; 0xb0
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80102b0:	2200      	movs	r2, #0
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	605a      	str	r2, [r3, #4]
 80102b6:	609a      	str	r2, [r3, #8]
 80102b8:	60da      	str	r2, [r3, #12]
 80102ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80102bc:	f107 0318 	add.w	r3, r7, #24
 80102c0:	2284      	movs	r2, #132	; 0x84
 80102c2:	2100      	movs	r1, #0
 80102c4:	4618      	mov	r0, r3
 80102c6:	f00d fdf1 	bl	801deac <memset>
  if(huart->Instance==USART1)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a32      	ldr	r2, [pc, #200]	; (8010398 <HAL_UART_MspInit+0xf4>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d15c      	bne.n	801038e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80102d4:	2340      	movs	r3, #64	; 0x40
 80102d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80102d8:	2300      	movs	r3, #0
 80102da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80102dc:	f107 0318 	add.w	r3, r7, #24
 80102e0:	4618      	mov	r0, r3
 80102e2:	f001 f943 	bl	801156c <HAL_RCCEx_PeriphCLKConfig>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80102ec:	f7f9 fc2c 	bl	8009b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80102f0:	4b2a      	ldr	r3, [pc, #168]	; (801039c <HAL_UART_MspInit+0xf8>)
 80102f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f4:	4a29      	ldr	r2, [pc, #164]	; (801039c <HAL_UART_MspInit+0xf8>)
 80102f6:	f043 0310 	orr.w	r3, r3, #16
 80102fa:	6453      	str	r3, [r2, #68]	; 0x44
 80102fc:	4b27      	ldr	r3, [pc, #156]	; (801039c <HAL_UART_MspInit+0xf8>)
 80102fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010300:	f003 0310 	and.w	r3, r3, #16
 8010304:	617b      	str	r3, [r7, #20]
 8010306:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010308:	4b24      	ldr	r3, [pc, #144]	; (801039c <HAL_UART_MspInit+0xf8>)
 801030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801030c:	4a23      	ldr	r2, [pc, #140]	; (801039c <HAL_UART_MspInit+0xf8>)
 801030e:	f043 0302 	orr.w	r3, r3, #2
 8010312:	6313      	str	r3, [r2, #48]	; 0x30
 8010314:	4b21      	ldr	r3, [pc, #132]	; (801039c <HAL_UART_MspInit+0xf8>)
 8010316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010318:	f003 0302 	and.w	r3, r3, #2
 801031c:	613b      	str	r3, [r7, #16]
 801031e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010320:	4b1e      	ldr	r3, [pc, #120]	; (801039c <HAL_UART_MspInit+0xf8>)
 8010322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010324:	4a1d      	ldr	r2, [pc, #116]	; (801039c <HAL_UART_MspInit+0xf8>)
 8010326:	f043 0301 	orr.w	r3, r3, #1
 801032a:	6313      	str	r3, [r2, #48]	; 0x30
 801032c:	4b1b      	ldr	r3, [pc, #108]	; (801039c <HAL_UART_MspInit+0xf8>)
 801032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010330:	f003 0301 	and.w	r3, r3, #1
 8010334:	60fb      	str	r3, [r7, #12]
 8010336:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8010338:	2380      	movs	r3, #128	; 0x80
 801033a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801033e:	2302      	movs	r3, #2
 8010340:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010344:	2300      	movs	r3, #0
 8010346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801034a:	2300      	movs	r3, #0
 801034c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010350:	2307      	movs	r3, #7
 8010352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8010356:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801035a:	4619      	mov	r1, r3
 801035c:	4810      	ldr	r0, [pc, #64]	; (80103a0 <HAL_UART_MspInit+0xfc>)
 801035e:	f000 fab5 	bl	80108cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8010362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801036a:	2302      	movs	r3, #2
 801036c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010370:	2300      	movs	r3, #0
 8010372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010376:	2300      	movs	r3, #0
 8010378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801037c:	2307      	movs	r3, #7
 801037e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8010382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010386:	4619      	mov	r1, r3
 8010388:	4806      	ldr	r0, [pc, #24]	; (80103a4 <HAL_UART_MspInit+0x100>)
 801038a:	f000 fa9f 	bl	80108cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801038e:	bf00      	nop
 8010390:	37b0      	adds	r7, #176	; 0xb0
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	40011000 	.word	0x40011000
 801039c:	40023800 	.word	0x40023800
 80103a0:	40020400 	.word	0x40020400
 80103a4:	40020000 	.word	0x40020000

080103a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80103a8:	b480      	push	{r7}
 80103aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80103ac:	e7fe      	b.n	80103ac <NMI_Handler+0x4>

080103ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80103ae:	b480      	push	{r7}
 80103b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80103b2:	e7fe      	b.n	80103b2 <HardFault_Handler+0x4>

080103b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80103b4:	b480      	push	{r7}
 80103b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80103b8:	e7fe      	b.n	80103b8 <MemManage_Handler+0x4>

080103ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80103ba:	b480      	push	{r7}
 80103bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80103be:	e7fe      	b.n	80103be <BusFault_Handler+0x4>

080103c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80103c0:	b480      	push	{r7}
 80103c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80103c4:	e7fe      	b.n	80103c4 <UsageFault_Handler+0x4>

080103c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80103c6:	b480      	push	{r7}
 80103c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80103ca:	bf00      	nop
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80103d8:	bf00      	nop
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80103e2:	b480      	push	{r7}
 80103e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80103e6:	bf00      	nop
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80103f4:	f000 f940 	bl	8010678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80103f8:	bf00      	nop
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80103fc:	b480      	push	{r7}
 80103fe:	af00      	add	r7, sp, #0
  return 1;
 8010400:	2301      	movs	r3, #1
}
 8010402:	4618      	mov	r0, r3
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <_kill>:

int _kill(int pid, int sig)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010416:	f00d fdfd 	bl	801e014 <__errno>
 801041a:	4603      	mov	r3, r0
 801041c:	2216      	movs	r2, #22
 801041e:	601a      	str	r2, [r3, #0]
  return -1;
 8010420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <_exit>:

void _exit (int status)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010434:	f04f 31ff 	mov.w	r1, #4294967295
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f7ff ffe7 	bl	801040c <_kill>
  while (1) {}    /* Make sure we hang here */
 801043e:	e7fe      	b.n	801043e <_exit+0x12>

08010440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801044c:	2300      	movs	r3, #0
 801044e:	617b      	str	r3, [r7, #20]
 8010450:	e00a      	b.n	8010468 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010452:	f3af 8000 	nop.w
 8010456:	4601      	mov	r1, r0
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	1c5a      	adds	r2, r3, #1
 801045c:	60ba      	str	r2, [r7, #8]
 801045e:	b2ca      	uxtb	r2, r1
 8010460:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	3301      	adds	r3, #1
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	429a      	cmp	r2, r3
 801046e:	dbf0      	blt.n	8010452 <_read+0x12>
  }

  return len;
 8010470:	687b      	ldr	r3, [r7, #4]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b086      	sub	sp, #24
 801047e:	af00      	add	r7, sp, #0
 8010480:	60f8      	str	r0, [r7, #12]
 8010482:	60b9      	str	r1, [r7, #8]
 8010484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010486:	2300      	movs	r3, #0
 8010488:	617b      	str	r3, [r7, #20]
 801048a:	e009      	b.n	80104a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	60ba      	str	r2, [r7, #8]
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	3301      	adds	r3, #1
 801049e:	617b      	str	r3, [r7, #20]
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	dbf1      	blt.n	801048c <_write+0x12>
  }
  return len;
 80104a8:	687b      	ldr	r3, [r7, #4]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <_close>:

int _close(int file)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b083      	sub	sp, #12
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104be:	4618      	mov	r0, r3
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b083      	sub	sp, #12
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80104da:	605a      	str	r2, [r3, #4]
  return 0;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <_isatty>:

int _isatty(int file)
{
 80104ea:	b480      	push	{r7}
 80104ec:	b083      	sub	sp, #12
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80104f2:	2301      	movs	r3, #1
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr

08010500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
	...

0801051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010524:	4a14      	ldr	r2, [pc, #80]	; (8010578 <_sbrk+0x5c>)
 8010526:	4b15      	ldr	r3, [pc, #84]	; (801057c <_sbrk+0x60>)
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010530:	4b13      	ldr	r3, [pc, #76]	; (8010580 <_sbrk+0x64>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d102      	bne.n	801053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010538:	4b11      	ldr	r3, [pc, #68]	; (8010580 <_sbrk+0x64>)
 801053a:	4a12      	ldr	r2, [pc, #72]	; (8010584 <_sbrk+0x68>)
 801053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801053e:	4b10      	ldr	r3, [pc, #64]	; (8010580 <_sbrk+0x64>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	4413      	add	r3, r2
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	429a      	cmp	r2, r3
 801054a:	d207      	bcs.n	801055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801054c:	f00d fd62 	bl	801e014 <__errno>
 8010550:	4603      	mov	r3, r0
 8010552:	220c      	movs	r2, #12
 8010554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010556:	f04f 33ff 	mov.w	r3, #4294967295
 801055a:	e009      	b.n	8010570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801055c:	4b08      	ldr	r3, [pc, #32]	; (8010580 <_sbrk+0x64>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010562:	4b07      	ldr	r3, [pc, #28]	; (8010580 <_sbrk+0x64>)
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4413      	add	r3, r2
 801056a:	4a05      	ldr	r2, [pc, #20]	; (8010580 <_sbrk+0x64>)
 801056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801056e:	68fb      	ldr	r3, [r7, #12]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	20050000 	.word	0x20050000
 801057c:	00000400 	.word	0x00000400
 8010580:	2000544c 	.word	0x2000544c
 8010584:	200057f8 	.word	0x200057f8

08010588 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010588:	b480      	push	{r7}
 801058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801058c:	4b06      	ldr	r3, [pc, #24]	; (80105a8 <SystemInit+0x20>)
 801058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010592:	4a05      	ldr	r2, [pc, #20]	; (80105a8 <SystemInit+0x20>)
 8010594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801059c:	bf00      	nop
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	e000ed00 	.word	0xe000ed00

080105ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80105ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80105e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80105b0:	480d      	ldr	r0, [pc, #52]	; (80105e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80105b2:	490e      	ldr	r1, [pc, #56]	; (80105ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80105b4:	4a0e      	ldr	r2, [pc, #56]	; (80105f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80105b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80105b8:	e002      	b.n	80105c0 <LoopCopyDataInit>

080105ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80105ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80105bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80105be:	3304      	adds	r3, #4

080105c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80105c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80105c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80105c4:	d3f9      	bcc.n	80105ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80105c6:	4a0b      	ldr	r2, [pc, #44]	; (80105f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80105c8:	4c0b      	ldr	r4, [pc, #44]	; (80105f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80105ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80105cc:	e001      	b.n	80105d2 <LoopFillZerobss>

080105ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80105ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80105d0:	3204      	adds	r2, #4

080105d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80105d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80105d4:	d3fb      	bcc.n	80105ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80105d6:	f7ff ffd7 	bl	8010588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80105da:	f00d fd21 	bl	801e020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80105de:	f7f8 fc3b 	bl	8008e58 <main>
  bx  lr    
 80105e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80105e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80105e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80105ec:	20005390 	.word	0x20005390
  ldr r2, =_sidata
 80105f0:	080291ac 	.word	0x080291ac
  ldr r2, =_sbss
 80105f4:	20005390 	.word	0x20005390
  ldr r4, =_ebss
 80105f8:	200057f4 	.word	0x200057f4

080105fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80105fc:	e7fe      	b.n	80105fc <ADC_IRQHandler>

080105fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010602:	2003      	movs	r0, #3
 8010604:	f000 f92e 	bl	8010864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010608:	2000      	movs	r0, #0
 801060a:	f000 f805 	bl	8010618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801060e:	f7ff fe25 	bl	801025c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010620:	4b12      	ldr	r3, [pc, #72]	; (801066c <HAL_InitTick+0x54>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	4b12      	ldr	r3, [pc, #72]	; (8010670 <HAL_InitTick+0x58>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	4619      	mov	r1, r3
 801062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010632:	fbb2 f3f3 	udiv	r3, r2, r3
 8010636:	4618      	mov	r0, r3
 8010638:	f000 f93b 	bl	80108b2 <HAL_SYSTICK_Config>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010642:	2301      	movs	r3, #1
 8010644:	e00e      	b.n	8010664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2b0f      	cmp	r3, #15
 801064a:	d80a      	bhi.n	8010662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801064c:	2200      	movs	r2, #0
 801064e:	6879      	ldr	r1, [r7, #4]
 8010650:	f04f 30ff 	mov.w	r0, #4294967295
 8010654:	f000 f911 	bl	801087a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010658:	4a06      	ldr	r2, [pc, #24]	; (8010674 <HAL_InitTick+0x5c>)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	e000      	b.n	8010664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010662:	2301      	movs	r3, #1
}
 8010664:	4618      	mov	r0, r3
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	200050a0 	.word	0x200050a0
 8010670:	200050a8 	.word	0x200050a8
 8010674:	200050a4 	.word	0x200050a4

08010678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010678:	b480      	push	{r7}
 801067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801067c:	4b06      	ldr	r3, [pc, #24]	; (8010698 <HAL_IncTick+0x20>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	461a      	mov	r2, r3
 8010682:	4b06      	ldr	r3, [pc, #24]	; (801069c <HAL_IncTick+0x24>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4413      	add	r3, r2
 8010688:	4a04      	ldr	r2, [pc, #16]	; (801069c <HAL_IncTick+0x24>)
 801068a:	6013      	str	r3, [r2, #0]
}
 801068c:	bf00      	nop
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr
 8010696:	bf00      	nop
 8010698:	200050a8 	.word	0x200050a8
 801069c:	20005450 	.word	0x20005450

080106a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80106a0:	b480      	push	{r7}
 80106a2:	af00      	add	r7, sp, #0
  return uwTick;
 80106a4:	4b03      	ldr	r3, [pc, #12]	; (80106b4 <HAL_GetTick+0x14>)
 80106a6:	681b      	ldr	r3, [r3, #0]
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	20005450 	.word	0x20005450

080106b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80106c0:	f7ff ffee 	bl	80106a0 <HAL_GetTick>
 80106c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d0:	d005      	beq.n	80106de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80106d2:	4b0a      	ldr	r3, [pc, #40]	; (80106fc <HAL_Delay+0x44>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4413      	add	r3, r2
 80106dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80106de:	bf00      	nop
 80106e0:	f7ff ffde 	bl	80106a0 <HAL_GetTick>
 80106e4:	4602      	mov	r2, r0
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d8f7      	bhi.n	80106e0 <HAL_Delay+0x28>
  {
  }
}
 80106f0:	bf00      	nop
 80106f2:	bf00      	nop
 80106f4:	3710      	adds	r7, #16
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	200050a8 	.word	0x200050a8

08010700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010710:	4b0b      	ldr	r3, [pc, #44]	; (8010740 <__NVIC_SetPriorityGrouping+0x40>)
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801071c:	4013      	ands	r3, r2
 801071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010728:	4b06      	ldr	r3, [pc, #24]	; (8010744 <__NVIC_SetPriorityGrouping+0x44>)
 801072a:	4313      	orrs	r3, r2
 801072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801072e:	4a04      	ldr	r2, [pc, #16]	; (8010740 <__NVIC_SetPriorityGrouping+0x40>)
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	60d3      	str	r3, [r2, #12]
}
 8010734:	bf00      	nop
 8010736:	3714      	adds	r7, #20
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr
 8010740:	e000ed00 	.word	0xe000ed00
 8010744:	05fa0000 	.word	0x05fa0000

08010748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010748:	b480      	push	{r7}
 801074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801074c:	4b04      	ldr	r3, [pc, #16]	; (8010760 <__NVIC_GetPriorityGrouping+0x18>)
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	0a1b      	lsrs	r3, r3, #8
 8010752:	f003 0307 	and.w	r3, r3, #7
}
 8010756:	4618      	mov	r0, r3
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	e000ed00 	.word	0xe000ed00

08010764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	4603      	mov	r3, r0
 801076c:	6039      	str	r1, [r7, #0]
 801076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010774:	2b00      	cmp	r3, #0
 8010776:	db0a      	blt.n	801078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	b2da      	uxtb	r2, r3
 801077c:	490c      	ldr	r1, [pc, #48]	; (80107b0 <__NVIC_SetPriority+0x4c>)
 801077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010782:	0112      	lsls	r2, r2, #4
 8010784:	b2d2      	uxtb	r2, r2
 8010786:	440b      	add	r3, r1
 8010788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801078c:	e00a      	b.n	80107a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	b2da      	uxtb	r2, r3
 8010792:	4908      	ldr	r1, [pc, #32]	; (80107b4 <__NVIC_SetPriority+0x50>)
 8010794:	79fb      	ldrb	r3, [r7, #7]
 8010796:	f003 030f 	and.w	r3, r3, #15
 801079a:	3b04      	subs	r3, #4
 801079c:	0112      	lsls	r2, r2, #4
 801079e:	b2d2      	uxtb	r2, r2
 80107a0:	440b      	add	r3, r1
 80107a2:	761a      	strb	r2, [r3, #24]
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	e000e100 	.word	0xe000e100
 80107b4:	e000ed00 	.word	0xe000ed00

080107b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b089      	sub	sp, #36	; 0x24
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f003 0307 	and.w	r3, r3, #7
 80107ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	f1c3 0307 	rsb	r3, r3, #7
 80107d2:	2b04      	cmp	r3, #4
 80107d4:	bf28      	it	cs
 80107d6:	2304      	movcs	r3, #4
 80107d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	3304      	adds	r3, #4
 80107de:	2b06      	cmp	r3, #6
 80107e0:	d902      	bls.n	80107e8 <NVIC_EncodePriority+0x30>
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	3b03      	subs	r3, #3
 80107e6:	e000      	b.n	80107ea <NVIC_EncodePriority+0x32>
 80107e8:	2300      	movs	r3, #0
 80107ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	fa02 f303 	lsl.w	r3, r2, r3
 80107f6:	43da      	mvns	r2, r3
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	401a      	ands	r2, r3
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010800:	f04f 31ff 	mov.w	r1, #4294967295
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	fa01 f303 	lsl.w	r3, r1, r3
 801080a:	43d9      	mvns	r1, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010810:	4313      	orrs	r3, r2
         );
}
 8010812:	4618      	mov	r0, r3
 8010814:	3724      	adds	r7, #36	; 0x24
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
	...

08010820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	3b01      	subs	r3, #1
 801082c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010830:	d301      	bcc.n	8010836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010832:	2301      	movs	r3, #1
 8010834:	e00f      	b.n	8010856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010836:	4a0a      	ldr	r2, [pc, #40]	; (8010860 <SysTick_Config+0x40>)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	3b01      	subs	r3, #1
 801083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801083e:	210f      	movs	r1, #15
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	f7ff ff8e 	bl	8010764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010848:	4b05      	ldr	r3, [pc, #20]	; (8010860 <SysTick_Config+0x40>)
 801084a:	2200      	movs	r2, #0
 801084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801084e:	4b04      	ldr	r3, [pc, #16]	; (8010860 <SysTick_Config+0x40>)
 8010850:	2207      	movs	r2, #7
 8010852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010854:	2300      	movs	r3, #0
}
 8010856:	4618      	mov	r0, r3
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	e000e010 	.word	0xe000e010

08010864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b082      	sub	sp, #8
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff ff47 	bl	8010700 <__NVIC_SetPriorityGrouping>
}
 8010872:	bf00      	nop
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801087a:	b580      	push	{r7, lr}
 801087c:	b086      	sub	sp, #24
 801087e:	af00      	add	r7, sp, #0
 8010880:	4603      	mov	r3, r0
 8010882:	60b9      	str	r1, [r7, #8]
 8010884:	607a      	str	r2, [r7, #4]
 8010886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8010888:	2300      	movs	r3, #0
 801088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801088c:	f7ff ff5c 	bl	8010748 <__NVIC_GetPriorityGrouping>
 8010890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	68b9      	ldr	r1, [r7, #8]
 8010896:	6978      	ldr	r0, [r7, #20]
 8010898:	f7ff ff8e 	bl	80107b8 <NVIC_EncodePriority>
 801089c:	4602      	mov	r2, r0
 801089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a2:	4611      	mov	r1, r2
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7ff ff5d 	bl	8010764 <__NVIC_SetPriority>
}
 80108aa:	bf00      	nop
 80108ac:	3718      	adds	r7, #24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b082      	sub	sp, #8
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f7ff ffb0 	bl	8010820 <SysTick_Config>
 80108c0:	4603      	mov	r3, r0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
	...

080108cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b089      	sub	sp, #36	; 0x24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80108d6:	2300      	movs	r3, #0
 80108d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80108da:	2300      	movs	r3, #0
 80108dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80108de:	2300      	movs	r3, #0
 80108e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80108e2:	2300      	movs	r3, #0
 80108e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80108e6:	2300      	movs	r3, #0
 80108e8:	61fb      	str	r3, [r7, #28]
 80108ea:	e175      	b.n	8010bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80108ec:	2201      	movs	r2, #1
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	fa02 f303 	lsl.w	r3, r2, r3
 80108f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	697a      	ldr	r2, [r7, #20]
 80108fc:	4013      	ands	r3, r2
 80108fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010900:	693a      	ldr	r2, [r7, #16]
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	429a      	cmp	r2, r3
 8010906:	f040 8164 	bne.w	8010bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	f003 0303 	and.w	r3, r3, #3
 8010912:	2b01      	cmp	r3, #1
 8010914:	d005      	beq.n	8010922 <HAL_GPIO_Init+0x56>
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f003 0303 	and.w	r3, r3, #3
 801091e:	2b02      	cmp	r3, #2
 8010920:	d130      	bne.n	8010984 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	2203      	movs	r2, #3
 801092e:	fa02 f303 	lsl.w	r3, r2, r3
 8010932:	43db      	mvns	r3, r3
 8010934:	69ba      	ldr	r2, [r7, #24]
 8010936:	4013      	ands	r3, r2
 8010938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	68da      	ldr	r2, [r3, #12]
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	005b      	lsls	r3, r3, #1
 8010942:	fa02 f303 	lsl.w	r3, r2, r3
 8010946:	69ba      	ldr	r2, [r7, #24]
 8010948:	4313      	orrs	r3, r2
 801094a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010958:	2201      	movs	r2, #1
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	fa02 f303 	lsl.w	r3, r2, r3
 8010960:	43db      	mvns	r3, r3
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	4013      	ands	r3, r2
 8010966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	091b      	lsrs	r3, r3, #4
 801096e:	f003 0201 	and.w	r2, r3, #1
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	fa02 f303 	lsl.w	r3, r2, r3
 8010978:	69ba      	ldr	r2, [r7, #24]
 801097a:	4313      	orrs	r3, r2
 801097c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	69ba      	ldr	r2, [r7, #24]
 8010982:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	f003 0303 	and.w	r3, r3, #3
 801098c:	2b03      	cmp	r3, #3
 801098e:	d017      	beq.n	80109c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	005b      	lsls	r3, r3, #1
 801099a:	2203      	movs	r2, #3
 801099c:	fa02 f303 	lsl.w	r3, r2, r3
 80109a0:	43db      	mvns	r3, r3
 80109a2:	69ba      	ldr	r2, [r7, #24]
 80109a4:	4013      	ands	r3, r2
 80109a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	689a      	ldr	r2, [r3, #8]
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	005b      	lsls	r3, r3, #1
 80109b0:	fa02 f303 	lsl.w	r3, r2, r3
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	4313      	orrs	r3, r2
 80109b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	69ba      	ldr	r2, [r7, #24]
 80109be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	f003 0303 	and.w	r3, r3, #3
 80109c8:	2b02      	cmp	r3, #2
 80109ca:	d123      	bne.n	8010a14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	08da      	lsrs	r2, r3, #3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	3208      	adds	r2, #8
 80109d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	f003 0307 	and.w	r3, r3, #7
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	220f      	movs	r2, #15
 80109e4:	fa02 f303 	lsl.w	r3, r2, r3
 80109e8:	43db      	mvns	r3, r3
 80109ea:	69ba      	ldr	r2, [r7, #24]
 80109ec:	4013      	ands	r3, r2
 80109ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	691a      	ldr	r2, [r3, #16]
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	f003 0307 	and.w	r3, r3, #7
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010a00:	69ba      	ldr	r2, [r7, #24]
 8010a02:	4313      	orrs	r3, r2
 8010a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	08da      	lsrs	r2, r3, #3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	3208      	adds	r2, #8
 8010a0e:	69b9      	ldr	r1, [r7, #24]
 8010a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	2203      	movs	r2, #3
 8010a20:	fa02 f303 	lsl.w	r3, r2, r3
 8010a24:	43db      	mvns	r3, r3
 8010a26:	69ba      	ldr	r2, [r7, #24]
 8010a28:	4013      	ands	r3, r2
 8010a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	f003 0203 	and.w	r2, r3, #3
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	005b      	lsls	r3, r3, #1
 8010a38:	fa02 f303 	lsl.w	r3, r2, r3
 8010a3c:	69ba      	ldr	r2, [r7, #24]
 8010a3e:	4313      	orrs	r3, r2
 8010a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 80be 	beq.w	8010bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010a56:	4b66      	ldr	r3, [pc, #408]	; (8010bf0 <HAL_GPIO_Init+0x324>)
 8010a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a5a:	4a65      	ldr	r2, [pc, #404]	; (8010bf0 <HAL_GPIO_Init+0x324>)
 8010a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010a60:	6453      	str	r3, [r2, #68]	; 0x44
 8010a62:	4b63      	ldr	r3, [pc, #396]	; (8010bf0 <HAL_GPIO_Init+0x324>)
 8010a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a6a:	60fb      	str	r3, [r7, #12]
 8010a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8010a6e:	4a61      	ldr	r2, [pc, #388]	; (8010bf4 <HAL_GPIO_Init+0x328>)
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	089b      	lsrs	r3, r3, #2
 8010a74:	3302      	adds	r3, #2
 8010a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	f003 0303 	and.w	r3, r3, #3
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	220f      	movs	r2, #15
 8010a86:	fa02 f303 	lsl.w	r3, r2, r3
 8010a8a:	43db      	mvns	r3, r3
 8010a8c:	69ba      	ldr	r2, [r7, #24]
 8010a8e:	4013      	ands	r3, r2
 8010a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a58      	ldr	r2, [pc, #352]	; (8010bf8 <HAL_GPIO_Init+0x32c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d037      	beq.n	8010b0a <HAL_GPIO_Init+0x23e>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a57      	ldr	r2, [pc, #348]	; (8010bfc <HAL_GPIO_Init+0x330>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d031      	beq.n	8010b06 <HAL_GPIO_Init+0x23a>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a56      	ldr	r2, [pc, #344]	; (8010c00 <HAL_GPIO_Init+0x334>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d02b      	beq.n	8010b02 <HAL_GPIO_Init+0x236>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a55      	ldr	r2, [pc, #340]	; (8010c04 <HAL_GPIO_Init+0x338>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d025      	beq.n	8010afe <HAL_GPIO_Init+0x232>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4a54      	ldr	r2, [pc, #336]	; (8010c08 <HAL_GPIO_Init+0x33c>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d01f      	beq.n	8010afa <HAL_GPIO_Init+0x22e>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4a53      	ldr	r2, [pc, #332]	; (8010c0c <HAL_GPIO_Init+0x340>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d019      	beq.n	8010af6 <HAL_GPIO_Init+0x22a>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4a52      	ldr	r2, [pc, #328]	; (8010c10 <HAL_GPIO_Init+0x344>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d013      	beq.n	8010af2 <HAL_GPIO_Init+0x226>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4a51      	ldr	r2, [pc, #324]	; (8010c14 <HAL_GPIO_Init+0x348>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d00d      	beq.n	8010aee <HAL_GPIO_Init+0x222>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4a50      	ldr	r2, [pc, #320]	; (8010c18 <HAL_GPIO_Init+0x34c>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d007      	beq.n	8010aea <HAL_GPIO_Init+0x21e>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4a4f      	ldr	r2, [pc, #316]	; (8010c1c <HAL_GPIO_Init+0x350>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d101      	bne.n	8010ae6 <HAL_GPIO_Init+0x21a>
 8010ae2:	2309      	movs	r3, #9
 8010ae4:	e012      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010ae6:	230a      	movs	r3, #10
 8010ae8:	e010      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010aea:	2308      	movs	r3, #8
 8010aec:	e00e      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010aee:	2307      	movs	r3, #7
 8010af0:	e00c      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010af2:	2306      	movs	r3, #6
 8010af4:	e00a      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010af6:	2305      	movs	r3, #5
 8010af8:	e008      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010afa:	2304      	movs	r3, #4
 8010afc:	e006      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010afe:	2303      	movs	r3, #3
 8010b00:	e004      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010b02:	2302      	movs	r3, #2
 8010b04:	e002      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e000      	b.n	8010b0c <HAL_GPIO_Init+0x240>
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	69fa      	ldr	r2, [r7, #28]
 8010b0e:	f002 0203 	and.w	r2, r2, #3
 8010b12:	0092      	lsls	r2, r2, #2
 8010b14:	4093      	lsls	r3, r2
 8010b16:	69ba      	ldr	r2, [r7, #24]
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010b1c:	4935      	ldr	r1, [pc, #212]	; (8010bf4 <HAL_GPIO_Init+0x328>)
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	089b      	lsrs	r3, r3, #2
 8010b22:	3302      	adds	r3, #2
 8010b24:	69ba      	ldr	r2, [r7, #24]
 8010b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010b2a:	4b3d      	ldr	r3, [pc, #244]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	43db      	mvns	r3, r3
 8010b34:	69ba      	ldr	r2, [r7, #24]
 8010b36:	4013      	ands	r3, r2
 8010b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d003      	beq.n	8010b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010b46:	69ba      	ldr	r2, [r7, #24]
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010b4e:	4a34      	ldr	r2, [pc, #208]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010b54:	4b32      	ldr	r3, [pc, #200]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	43db      	mvns	r3, r3
 8010b5e:	69ba      	ldr	r2, [r7, #24]
 8010b60:	4013      	ands	r3, r2
 8010b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d003      	beq.n	8010b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8010b70:	69ba      	ldr	r2, [r7, #24]
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	4313      	orrs	r3, r2
 8010b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010b78:	4a29      	ldr	r2, [pc, #164]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010b7e:	4b28      	ldr	r3, [pc, #160]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	43db      	mvns	r3, r3
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010ba2:	4a1f      	ldr	r2, [pc, #124]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010ba8:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	43db      	mvns	r3, r3
 8010bb2:	69ba      	ldr	r2, [r7, #24]
 8010bb4:	4013      	ands	r3, r2
 8010bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d003      	beq.n	8010bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010bc4:	69ba      	ldr	r2, [r7, #24]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010bcc:	4a14      	ldr	r2, [pc, #80]	; (8010c20 <HAL_GPIO_Init+0x354>)
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	61fb      	str	r3, [r7, #28]
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	2b0f      	cmp	r3, #15
 8010bdc:	f67f ae86 	bls.w	80108ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010be0:	bf00      	nop
 8010be2:	bf00      	nop
 8010be4:	3724      	adds	r7, #36	; 0x24
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	40023800 	.word	0x40023800
 8010bf4:	40013800 	.word	0x40013800
 8010bf8:	40020000 	.word	0x40020000
 8010bfc:	40020400 	.word	0x40020400
 8010c00:	40020800 	.word	0x40020800
 8010c04:	40020c00 	.word	0x40020c00
 8010c08:	40021000 	.word	0x40021000
 8010c0c:	40021400 	.word	0x40021400
 8010c10:	40021800 	.word	0x40021800
 8010c14:	40021c00 	.word	0x40021c00
 8010c18:	40022000 	.word	0x40022000
 8010c1c:	40022400 	.word	0x40022400
 8010c20:	40013c00 	.word	0x40013c00

08010c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	807b      	strh	r3, [r7, #2]
 8010c30:	4613      	mov	r3, r2
 8010c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010c34:	787b      	ldrb	r3, [r7, #1]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d003      	beq.n	8010c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010c3a:	887a      	ldrh	r2, [r7, #2]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010c40:	e003      	b.n	8010c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010c42:	887b      	ldrh	r3, [r7, #2]
 8010c44:	041a      	lsls	r2, r3, #16
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	619a      	str	r2, [r3, #24]
}
 8010c4a:	bf00      	nop
 8010c4c:	370c      	adds	r7, #12
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr
	...

08010c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b086      	sub	sp, #24
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010c60:	2300      	movs	r3, #0
 8010c62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e291      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f003 0301 	and.w	r3, r3, #1
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f000 8087 	beq.w	8010d8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010c7c:	4b96      	ldr	r3, [pc, #600]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	f003 030c 	and.w	r3, r3, #12
 8010c84:	2b04      	cmp	r3, #4
 8010c86:	d00c      	beq.n	8010ca2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010c88:	4b93      	ldr	r3, [pc, #588]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	f003 030c 	and.w	r3, r3, #12
 8010c90:	2b08      	cmp	r3, #8
 8010c92:	d112      	bne.n	8010cba <HAL_RCC_OscConfig+0x62>
 8010c94:	4b90      	ldr	r3, [pc, #576]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ca0:	d10b      	bne.n	8010cba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ca2:	4b8d      	ldr	r3, [pc, #564]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d06c      	beq.n	8010d88 <HAL_RCC_OscConfig+0x130>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d168      	bne.n	8010d88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e26b      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cc2:	d106      	bne.n	8010cd2 <HAL_RCC_OscConfig+0x7a>
 8010cc4:	4b84      	ldr	r3, [pc, #528]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a83      	ldr	r2, [pc, #524]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	e02e      	b.n	8010d30 <HAL_RCC_OscConfig+0xd8>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10c      	bne.n	8010cf4 <HAL_RCC_OscConfig+0x9c>
 8010cda:	4b7f      	ldr	r3, [pc, #508]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4a7e      	ldr	r2, [pc, #504]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ce4:	6013      	str	r3, [r2, #0]
 8010ce6:	4b7c      	ldr	r3, [pc, #496]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a7b      	ldr	r2, [pc, #492]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	e01d      	b.n	8010d30 <HAL_RCC_OscConfig+0xd8>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010cfc:	d10c      	bne.n	8010d18 <HAL_RCC_OscConfig+0xc0>
 8010cfe:	4b76      	ldr	r3, [pc, #472]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a75      	ldr	r2, [pc, #468]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010d08:	6013      	str	r3, [r2, #0]
 8010d0a:	4b73      	ldr	r3, [pc, #460]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a72      	ldr	r2, [pc, #456]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d14:	6013      	str	r3, [r2, #0]
 8010d16:	e00b      	b.n	8010d30 <HAL_RCC_OscConfig+0xd8>
 8010d18:	4b6f      	ldr	r3, [pc, #444]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a6e      	ldr	r2, [pc, #440]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	4b6c      	ldr	r3, [pc, #432]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a6b      	ldr	r2, [pc, #428]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d013      	beq.n	8010d60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d38:	f7ff fcb2 	bl	80106a0 <HAL_GetTick>
 8010d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d3e:	e008      	b.n	8010d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d40:	f7ff fcae 	bl	80106a0 <HAL_GetTick>
 8010d44:	4602      	mov	r2, r0
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	2b64      	cmp	r3, #100	; 0x64
 8010d4c:	d901      	bls.n	8010d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010d4e:	2303      	movs	r3, #3
 8010d50:	e21f      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010d52:	4b61      	ldr	r3, [pc, #388]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d0f0      	beq.n	8010d40 <HAL_RCC_OscConfig+0xe8>
 8010d5e:	e014      	b.n	8010d8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d60:	f7ff fc9e 	bl	80106a0 <HAL_GetTick>
 8010d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d66:	e008      	b.n	8010d7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d68:	f7ff fc9a 	bl	80106a0 <HAL_GetTick>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	2b64      	cmp	r3, #100	; 0x64
 8010d74:	d901      	bls.n	8010d7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010d76:	2303      	movs	r3, #3
 8010d78:	e20b      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010d7a:	4b57      	ldr	r3, [pc, #348]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1f0      	bne.n	8010d68 <HAL_RCC_OscConfig+0x110>
 8010d86:	e000      	b.n	8010d8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f003 0302 	and.w	r3, r3, #2
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d069      	beq.n	8010e6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010d96:	4b50      	ldr	r3, [pc, #320]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	f003 030c 	and.w	r3, r3, #12
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00b      	beq.n	8010dba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010da2:	4b4d      	ldr	r3, [pc, #308]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010da4:	689b      	ldr	r3, [r3, #8]
 8010da6:	f003 030c 	and.w	r3, r3, #12
 8010daa:	2b08      	cmp	r3, #8
 8010dac:	d11c      	bne.n	8010de8 <HAL_RCC_OscConfig+0x190>
 8010dae:	4b4a      	ldr	r3, [pc, #296]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d116      	bne.n	8010de8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010dba:	4b47      	ldr	r3, [pc, #284]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <HAL_RCC_OscConfig+0x17a>
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d001      	beq.n	8010dd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e1df      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010dd2:	4b41      	ldr	r3, [pc, #260]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	00db      	lsls	r3, r3, #3
 8010de0:	493d      	ldr	r1, [pc, #244]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010de2:	4313      	orrs	r3, r2
 8010de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010de6:	e040      	b.n	8010e6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d023      	beq.n	8010e38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010df0:	4b39      	ldr	r3, [pc, #228]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4a38      	ldr	r2, [pc, #224]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010df6:	f043 0301 	orr.w	r3, r3, #1
 8010dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dfc:	f7ff fc50 	bl	80106a0 <HAL_GetTick>
 8010e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e02:	e008      	b.n	8010e16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e04:	f7ff fc4c 	bl	80106a0 <HAL_GetTick>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d901      	bls.n	8010e16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010e12:	2303      	movs	r3, #3
 8010e14:	e1bd      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010e16:	4b30      	ldr	r3, [pc, #192]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f003 0302 	and.w	r3, r3, #2
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0f0      	beq.n	8010e04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e22:	4b2d      	ldr	r3, [pc, #180]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	00db      	lsls	r3, r3, #3
 8010e30:	4929      	ldr	r1, [pc, #164]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e32:	4313      	orrs	r3, r2
 8010e34:	600b      	str	r3, [r1, #0]
 8010e36:	e018      	b.n	8010e6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e38:	4b27      	ldr	r3, [pc, #156]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a26      	ldr	r2, [pc, #152]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e3e:	f023 0301 	bic.w	r3, r3, #1
 8010e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e44:	f7ff fc2c 	bl	80106a0 <HAL_GetTick>
 8010e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010e4a:	e008      	b.n	8010e5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e4c:	f7ff fc28 	bl	80106a0 <HAL_GetTick>
 8010e50:	4602      	mov	r2, r0
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	d901      	bls.n	8010e5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	e199      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010e5e:	4b1e      	ldr	r3, [pc, #120]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f003 0302 	and.w	r3, r3, #2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d1f0      	bne.n	8010e4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f003 0308 	and.w	r3, r3, #8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d038      	beq.n	8010ee8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	695b      	ldr	r3, [r3, #20]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d019      	beq.n	8010eb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010e7e:	4b16      	ldr	r3, [pc, #88]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e82:	4a15      	ldr	r2, [pc, #84]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010e84:	f043 0301 	orr.w	r3, r3, #1
 8010e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e8a:	f7ff fc09 	bl	80106a0 <HAL_GetTick>
 8010e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010e90:	e008      	b.n	8010ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010e92:	f7ff fc05 	bl	80106a0 <HAL_GetTick>
 8010e96:	4602      	mov	r2, r0
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	d901      	bls.n	8010ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	e176      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010ea4:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ea8:	f003 0302 	and.w	r3, r3, #2
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0f0      	beq.n	8010e92 <HAL_RCC_OscConfig+0x23a>
 8010eb0:	e01a      	b.n	8010ee8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eb6:	4a08      	ldr	r2, [pc, #32]	; (8010ed8 <HAL_RCC_OscConfig+0x280>)
 8010eb8:	f023 0301 	bic.w	r3, r3, #1
 8010ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ebe:	f7ff fbef 	bl	80106a0 <HAL_GetTick>
 8010ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010ec4:	e00a      	b.n	8010edc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010ec6:	f7ff fbeb 	bl	80106a0 <HAL_GetTick>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	2b02      	cmp	r3, #2
 8010ed2:	d903      	bls.n	8010edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e15c      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
 8010ed8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010edc:	4b91      	ldr	r3, [pc, #580]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ee0:	f003 0302 	and.w	r3, r3, #2
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1ee      	bne.n	8010ec6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f003 0304 	and.w	r3, r3, #4
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 80a4 	beq.w	801103e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010ef6:	4b8b      	ldr	r3, [pc, #556]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10d      	bne.n	8010f1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8010f02:	4b88      	ldr	r3, [pc, #544]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f06:	4a87      	ldr	r2, [pc, #540]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8010f0e:	4b85      	ldr	r3, [pc, #532]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f16:	60bb      	str	r3, [r7, #8]
 8010f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f1e:	4b82      	ldr	r3, [pc, #520]	; (8011128 <HAL_RCC_OscConfig+0x4d0>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d118      	bne.n	8010f5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8010f2a:	4b7f      	ldr	r3, [pc, #508]	; (8011128 <HAL_RCC_OscConfig+0x4d0>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	4a7e      	ldr	r2, [pc, #504]	; (8011128 <HAL_RCC_OscConfig+0x4d0>)
 8010f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010f36:	f7ff fbb3 	bl	80106a0 <HAL_GetTick>
 8010f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f3c:	e008      	b.n	8010f50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010f3e:	f7ff fbaf 	bl	80106a0 <HAL_GetTick>
 8010f42:	4602      	mov	r2, r0
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	2b64      	cmp	r3, #100	; 0x64
 8010f4a:	d901      	bls.n	8010f50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8010f4c:	2303      	movs	r3, #3
 8010f4e:	e120      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010f50:	4b75      	ldr	r3, [pc, #468]	; (8011128 <HAL_RCC_OscConfig+0x4d0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d0f0      	beq.n	8010f3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	689b      	ldr	r3, [r3, #8]
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d106      	bne.n	8010f72 <HAL_RCC_OscConfig+0x31a>
 8010f64:	4b6f      	ldr	r3, [pc, #444]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f68:	4a6e      	ldr	r2, [pc, #440]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f6a:	f043 0301 	orr.w	r3, r3, #1
 8010f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8010f70:	e02d      	b.n	8010fce <HAL_RCC_OscConfig+0x376>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10c      	bne.n	8010f94 <HAL_RCC_OscConfig+0x33c>
 8010f7a:	4b6a      	ldr	r3, [pc, #424]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f7e:	4a69      	ldr	r2, [pc, #420]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f80:	f023 0301 	bic.w	r3, r3, #1
 8010f84:	6713      	str	r3, [r2, #112]	; 0x70
 8010f86:	4b67      	ldr	r3, [pc, #412]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f8a:	4a66      	ldr	r2, [pc, #408]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f8c:	f023 0304 	bic.w	r3, r3, #4
 8010f90:	6713      	str	r3, [r2, #112]	; 0x70
 8010f92:	e01c      	b.n	8010fce <HAL_RCC_OscConfig+0x376>
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	2b05      	cmp	r3, #5
 8010f9a:	d10c      	bne.n	8010fb6 <HAL_RCC_OscConfig+0x35e>
 8010f9c:	4b61      	ldr	r3, [pc, #388]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fa0:	4a60      	ldr	r2, [pc, #384]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fa2:	f043 0304 	orr.w	r3, r3, #4
 8010fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8010fa8:	4b5e      	ldr	r3, [pc, #376]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fac:	4a5d      	ldr	r2, [pc, #372]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fae:	f043 0301 	orr.w	r3, r3, #1
 8010fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8010fb4:	e00b      	b.n	8010fce <HAL_RCC_OscConfig+0x376>
 8010fb6:	4b5b      	ldr	r3, [pc, #364]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fba:	4a5a      	ldr	r2, [pc, #360]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fbc:	f023 0301 	bic.w	r3, r3, #1
 8010fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8010fc2:	4b58      	ldr	r3, [pc, #352]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc6:	4a57      	ldr	r2, [pc, #348]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010fc8:	f023 0304 	bic.w	r3, r3, #4
 8010fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	689b      	ldr	r3, [r3, #8]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d015      	beq.n	8011002 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fd6:	f7ff fb63 	bl	80106a0 <HAL_GetTick>
 8010fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010fdc:	e00a      	b.n	8010ff4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010fde:	f7ff fb5f 	bl	80106a0 <HAL_GetTick>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	1ad3      	subs	r3, r2, r3
 8010fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d901      	bls.n	8010ff4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	e0ce      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010ff4:	4b4b      	ldr	r3, [pc, #300]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8010ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ff8:	f003 0302 	and.w	r3, r3, #2
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d0ee      	beq.n	8010fde <HAL_RCC_OscConfig+0x386>
 8011000:	e014      	b.n	801102c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011002:	f7ff fb4d 	bl	80106a0 <HAL_GetTick>
 8011006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011008:	e00a      	b.n	8011020 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801100a:	f7ff fb49 	bl	80106a0 <HAL_GetTick>
 801100e:	4602      	mov	r2, r0
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	1ad3      	subs	r3, r2, r3
 8011014:	f241 3288 	movw	r2, #5000	; 0x1388
 8011018:	4293      	cmp	r3, r2
 801101a:	d901      	bls.n	8011020 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801101c:	2303      	movs	r3, #3
 801101e:	e0b8      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011020:	4b40      	ldr	r3, [pc, #256]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011024:	f003 0302 	and.w	r3, r3, #2
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1ee      	bne.n	801100a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801102c:	7dfb      	ldrb	r3, [r7, #23]
 801102e:	2b01      	cmp	r3, #1
 8011030:	d105      	bne.n	801103e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011032:	4b3c      	ldr	r3, [pc, #240]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011036:	4a3b      	ldr	r2, [pc, #236]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801103c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	699b      	ldr	r3, [r3, #24]
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 80a4 	beq.w	8011190 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011048:	4b36      	ldr	r3, [pc, #216]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 801104a:	689b      	ldr	r3, [r3, #8]
 801104c:	f003 030c 	and.w	r3, r3, #12
 8011050:	2b08      	cmp	r3, #8
 8011052:	d06b      	beq.n	801112c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	2b02      	cmp	r3, #2
 801105a:	d149      	bne.n	80110f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801105c:	4b31      	ldr	r3, [pc, #196]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a30      	ldr	r2, [pc, #192]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011068:	f7ff fb1a 	bl	80106a0 <HAL_GetTick>
 801106c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801106e:	e008      	b.n	8011082 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011070:	f7ff fb16 	bl	80106a0 <HAL_GetTick>
 8011074:	4602      	mov	r2, r0
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	1ad3      	subs	r3, r2, r3
 801107a:	2b02      	cmp	r3, #2
 801107c:	d901      	bls.n	8011082 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801107e:	2303      	movs	r3, #3
 8011080:	e087      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011082:	4b28      	ldr	r3, [pc, #160]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1f0      	bne.n	8011070 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	69da      	ldr	r2, [r3, #28]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	431a      	orrs	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109c:	019b      	lsls	r3, r3, #6
 801109e:	431a      	orrs	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a4:	085b      	lsrs	r3, r3, #1
 80110a6:	3b01      	subs	r3, #1
 80110a8:	041b      	lsls	r3, r3, #16
 80110aa:	431a      	orrs	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b0:	061b      	lsls	r3, r3, #24
 80110b2:	4313      	orrs	r3, r2
 80110b4:	4a1b      	ldr	r2, [pc, #108]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80110ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80110bc:	4b19      	ldr	r3, [pc, #100]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a18      	ldr	r2, [pc, #96]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80110c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110c8:	f7ff faea 	bl	80106a0 <HAL_GetTick>
 80110cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80110ce:	e008      	b.n	80110e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80110d0:	f7ff fae6 	bl	80106a0 <HAL_GetTick>
 80110d4:	4602      	mov	r2, r0
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d901      	bls.n	80110e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80110de:	2303      	movs	r3, #3
 80110e0:	e057      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80110e2:	4b10      	ldr	r3, [pc, #64]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d0f0      	beq.n	80110d0 <HAL_RCC_OscConfig+0x478>
 80110ee:	e04f      	b.n	8011190 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80110f0:	4b0c      	ldr	r3, [pc, #48]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a0b      	ldr	r2, [pc, #44]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 80110f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80110fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80110fc:	f7ff fad0 	bl	80106a0 <HAL_GetTick>
 8011100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011102:	e008      	b.n	8011116 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011104:	f7ff facc 	bl	80106a0 <HAL_GetTick>
 8011108:	4602      	mov	r2, r0
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	2b02      	cmp	r3, #2
 8011110:	d901      	bls.n	8011116 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8011112:	2303      	movs	r3, #3
 8011114:	e03d      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011116:	4b03      	ldr	r3, [pc, #12]	; (8011124 <HAL_RCC_OscConfig+0x4cc>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801111e:	2b00      	cmp	r3, #0
 8011120:	d1f0      	bne.n	8011104 <HAL_RCC_OscConfig+0x4ac>
 8011122:	e035      	b.n	8011190 <HAL_RCC_OscConfig+0x538>
 8011124:	40023800 	.word	0x40023800
 8011128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801112c:	4b1b      	ldr	r3, [pc, #108]	; (801119c <HAL_RCC_OscConfig+0x544>)
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	699b      	ldr	r3, [r3, #24]
 8011136:	2b01      	cmp	r3, #1
 8011138:	d028      	beq.n	801118c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011144:	429a      	cmp	r2, r3
 8011146:	d121      	bne.n	801118c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011152:	429a      	cmp	r2, r3
 8011154:	d11a      	bne.n	801118c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011156:	68fa      	ldr	r2, [r7, #12]
 8011158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801115c:	4013      	ands	r3, r2
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011162:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011164:	4293      	cmp	r3, r2
 8011166:	d111      	bne.n	801118c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011172:	085b      	lsrs	r3, r3, #1
 8011174:	3b01      	subs	r3, #1
 8011176:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011178:	429a      	cmp	r2, r3
 801117a:	d107      	bne.n	801118c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011188:	429a      	cmp	r2, r3
 801118a:	d001      	beq.n	8011190 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 801118c:	2301      	movs	r3, #1
 801118e:	e000      	b.n	8011192 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8011190:	2300      	movs	r3, #0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3718      	adds	r7, #24
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	40023800 	.word	0x40023800

080111a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80111aa:	2300      	movs	r3, #0
 80111ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80111b4:	2301      	movs	r3, #1
 80111b6:	e0d0      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80111b8:	4b6a      	ldr	r3, [pc, #424]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f003 030f 	and.w	r3, r3, #15
 80111c0:	683a      	ldr	r2, [r7, #0]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d910      	bls.n	80111e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80111c6:	4b67      	ldr	r3, [pc, #412]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f023 020f 	bic.w	r2, r3, #15
 80111ce:	4965      	ldr	r1, [pc, #404]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80111d6:	4b63      	ldr	r3, [pc, #396]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f003 030f 	and.w	r3, r3, #15
 80111de:	683a      	ldr	r2, [r7, #0]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d001      	beq.n	80111e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	e0b8      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f003 0302 	and.w	r3, r3, #2
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d020      	beq.n	8011236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f003 0304 	and.w	r3, r3, #4
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d005      	beq.n	801120c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011200:	4b59      	ldr	r3, [pc, #356]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011202:	689b      	ldr	r3, [r3, #8]
 8011204:	4a58      	ldr	r2, [pc, #352]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801120a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f003 0308 	and.w	r3, r3, #8
 8011214:	2b00      	cmp	r3, #0
 8011216:	d005      	beq.n	8011224 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011218:	4b53      	ldr	r3, [pc, #332]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	4a52      	ldr	r2, [pc, #328]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801121e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011224:	4b50      	ldr	r3, [pc, #320]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	494d      	ldr	r1, [pc, #308]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011232:	4313      	orrs	r3, r2
 8011234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f003 0301 	and.w	r3, r3, #1
 801123e:	2b00      	cmp	r3, #0
 8011240:	d040      	beq.n	80112c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	2b01      	cmp	r3, #1
 8011248:	d107      	bne.n	801125a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801124a:	4b47      	ldr	r3, [pc, #284]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011252:	2b00      	cmp	r3, #0
 8011254:	d115      	bne.n	8011282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	e07f      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d107      	bne.n	8011272 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011262:	4b41      	ldr	r3, [pc, #260]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801126a:	2b00      	cmp	r3, #0
 801126c:	d109      	bne.n	8011282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801126e:	2301      	movs	r3, #1
 8011270:	e073      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011272:	4b3d      	ldr	r3, [pc, #244]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f003 0302 	and.w	r3, r3, #2
 801127a:	2b00      	cmp	r3, #0
 801127c:	d101      	bne.n	8011282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801127e:	2301      	movs	r3, #1
 8011280:	e06b      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011282:	4b39      	ldr	r3, [pc, #228]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	f023 0203 	bic.w	r2, r3, #3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	4936      	ldr	r1, [pc, #216]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011290:	4313      	orrs	r3, r2
 8011292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011294:	f7ff fa04 	bl	80106a0 <HAL_GetTick>
 8011298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801129a:	e00a      	b.n	80112b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801129c:	f7ff fa00 	bl	80106a0 <HAL_GetTick>
 80112a0:	4602      	mov	r2, r0
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d901      	bls.n	80112b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80112ae:	2303      	movs	r3, #3
 80112b0:	e053      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80112b2:	4b2d      	ldr	r3, [pc, #180]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 80112b4:	689b      	ldr	r3, [r3, #8]
 80112b6:	f003 020c 	and.w	r2, r3, #12
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	009b      	lsls	r3, r3, #2
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d1eb      	bne.n	801129c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80112c4:	4b27      	ldr	r3, [pc, #156]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f003 030f 	and.w	r3, r3, #15
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d210      	bcs.n	80112f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80112d2:	4b24      	ldr	r3, [pc, #144]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f023 020f 	bic.w	r2, r3, #15
 80112da:	4922      	ldr	r1, [pc, #136]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	4313      	orrs	r3, r2
 80112e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80112e2:	4b20      	ldr	r3, [pc, #128]	; (8011364 <HAL_RCC_ClockConfig+0x1c4>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f003 030f 	and.w	r3, r3, #15
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d001      	beq.n	80112f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	e032      	b.n	801135a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 0304 	and.w	r3, r3, #4
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d008      	beq.n	8011312 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011300:	4b19      	ldr	r3, [pc, #100]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	4916      	ldr	r1, [pc, #88]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801130e:	4313      	orrs	r3, r2
 8011310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f003 0308 	and.w	r3, r3, #8
 801131a:	2b00      	cmp	r3, #0
 801131c:	d009      	beq.n	8011332 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801131e:	4b12      	ldr	r3, [pc, #72]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 8011320:	689b      	ldr	r3, [r3, #8]
 8011322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	00db      	lsls	r3, r3, #3
 801132c:	490e      	ldr	r1, [pc, #56]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801132e:	4313      	orrs	r3, r2
 8011330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8011332:	f000 f821 	bl	8011378 <HAL_RCC_GetSysClockFreq>
 8011336:	4602      	mov	r2, r0
 8011338:	4b0b      	ldr	r3, [pc, #44]	; (8011368 <HAL_RCC_ClockConfig+0x1c8>)
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	091b      	lsrs	r3, r3, #4
 801133e:	f003 030f 	and.w	r3, r3, #15
 8011342:	490a      	ldr	r1, [pc, #40]	; (801136c <HAL_RCC_ClockConfig+0x1cc>)
 8011344:	5ccb      	ldrb	r3, [r1, r3]
 8011346:	fa22 f303 	lsr.w	r3, r2, r3
 801134a:	4a09      	ldr	r2, [pc, #36]	; (8011370 <HAL_RCC_ClockConfig+0x1d0>)
 801134c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801134e:	4b09      	ldr	r3, [pc, #36]	; (8011374 <HAL_RCC_ClockConfig+0x1d4>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff f960 	bl	8010618 <HAL_InitTick>

  return HAL_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	40023c00 	.word	0x40023c00
 8011368:	40023800 	.word	0x40023800
 801136c:	08023be0 	.word	0x08023be0
 8011370:	200050a0 	.word	0x200050a0
 8011374:	200050a4 	.word	0x200050a4

08011378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801137c:	b090      	sub	sp, #64	; 0x40
 801137e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8011380:	2300      	movs	r3, #0
 8011382:	637b      	str	r3, [r7, #52]	; 0x34
 8011384:	2300      	movs	r3, #0
 8011386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011388:	2300      	movs	r3, #0
 801138a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801138c:	2300      	movs	r3, #0
 801138e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011390:	4b59      	ldr	r3, [pc, #356]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	f003 030c 	and.w	r3, r3, #12
 8011398:	2b08      	cmp	r3, #8
 801139a:	d00d      	beq.n	80113b8 <HAL_RCC_GetSysClockFreq+0x40>
 801139c:	2b08      	cmp	r3, #8
 801139e:	f200 80a1 	bhi.w	80114e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d002      	beq.n	80113ac <HAL_RCC_GetSysClockFreq+0x34>
 80113a6:	2b04      	cmp	r3, #4
 80113a8:	d003      	beq.n	80113b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80113aa:	e09b      	b.n	80114e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80113ac:	4b53      	ldr	r3, [pc, #332]	; (80114fc <HAL_RCC_GetSysClockFreq+0x184>)
 80113ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80113b0:	e09b      	b.n	80114ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80113b2:	4b53      	ldr	r3, [pc, #332]	; (8011500 <HAL_RCC_GetSysClockFreq+0x188>)
 80113b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80113b6:	e098      	b.n	80114ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80113b8:	4b4f      	ldr	r3, [pc, #316]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80113c2:	4b4d      	ldr	r3, [pc, #308]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d028      	beq.n	8011420 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80113ce:	4b4a      	ldr	r3, [pc, #296]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	099b      	lsrs	r3, r3, #6
 80113d4:	2200      	movs	r2, #0
 80113d6:	623b      	str	r3, [r7, #32]
 80113d8:	627a      	str	r2, [r7, #36]	; 0x24
 80113da:	6a3b      	ldr	r3, [r7, #32]
 80113dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80113e0:	2100      	movs	r1, #0
 80113e2:	4b47      	ldr	r3, [pc, #284]	; (8011500 <HAL_RCC_GetSysClockFreq+0x188>)
 80113e4:	fb03 f201 	mul.w	r2, r3, r1
 80113e8:	2300      	movs	r3, #0
 80113ea:	fb00 f303 	mul.w	r3, r0, r3
 80113ee:	4413      	add	r3, r2
 80113f0:	4a43      	ldr	r2, [pc, #268]	; (8011500 <HAL_RCC_GetSysClockFreq+0x188>)
 80113f2:	fba0 1202 	umull	r1, r2, r0, r2
 80113f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80113f8:	460a      	mov	r2, r1
 80113fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80113fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113fe:	4413      	add	r3, r2
 8011400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011404:	2200      	movs	r2, #0
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	61fa      	str	r2, [r7, #28]
 801140a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801140e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8011412:	f7ef fcb9 	bl	8000d88 <__aeabi_uldivmod>
 8011416:	4602      	mov	r2, r0
 8011418:	460b      	mov	r3, r1
 801141a:	4613      	mov	r3, r2
 801141c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801141e:	e053      	b.n	80114c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011420:	4b35      	ldr	r3, [pc, #212]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	099b      	lsrs	r3, r3, #6
 8011426:	2200      	movs	r2, #0
 8011428:	613b      	str	r3, [r7, #16]
 801142a:	617a      	str	r2, [r7, #20]
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8011432:	f04f 0b00 	mov.w	fp, #0
 8011436:	4652      	mov	r2, sl
 8011438:	465b      	mov	r3, fp
 801143a:	f04f 0000 	mov.w	r0, #0
 801143e:	f04f 0100 	mov.w	r1, #0
 8011442:	0159      	lsls	r1, r3, #5
 8011444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011448:	0150      	lsls	r0, r2, #5
 801144a:	4602      	mov	r2, r0
 801144c:	460b      	mov	r3, r1
 801144e:	ebb2 080a 	subs.w	r8, r2, sl
 8011452:	eb63 090b 	sbc.w	r9, r3, fp
 8011456:	f04f 0200 	mov.w	r2, #0
 801145a:	f04f 0300 	mov.w	r3, #0
 801145e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8011462:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011466:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801146a:	ebb2 0408 	subs.w	r4, r2, r8
 801146e:	eb63 0509 	sbc.w	r5, r3, r9
 8011472:	f04f 0200 	mov.w	r2, #0
 8011476:	f04f 0300 	mov.w	r3, #0
 801147a:	00eb      	lsls	r3, r5, #3
 801147c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011480:	00e2      	lsls	r2, r4, #3
 8011482:	4614      	mov	r4, r2
 8011484:	461d      	mov	r5, r3
 8011486:	eb14 030a 	adds.w	r3, r4, sl
 801148a:	603b      	str	r3, [r7, #0]
 801148c:	eb45 030b 	adc.w	r3, r5, fp
 8011490:	607b      	str	r3, [r7, #4]
 8011492:	f04f 0200 	mov.w	r2, #0
 8011496:	f04f 0300 	mov.w	r3, #0
 801149a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801149e:	4629      	mov	r1, r5
 80114a0:	028b      	lsls	r3, r1, #10
 80114a2:	4621      	mov	r1, r4
 80114a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80114a8:	4621      	mov	r1, r4
 80114aa:	028a      	lsls	r2, r1, #10
 80114ac:	4610      	mov	r0, r2
 80114ae:	4619      	mov	r1, r3
 80114b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b2:	2200      	movs	r2, #0
 80114b4:	60bb      	str	r3, [r7, #8]
 80114b6:	60fa      	str	r2, [r7, #12]
 80114b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80114bc:	f7ef fc64 	bl	8000d88 <__aeabi_uldivmod>
 80114c0:	4602      	mov	r2, r0
 80114c2:	460b      	mov	r3, r1
 80114c4:	4613      	mov	r3, r2
 80114c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80114c8:	4b0b      	ldr	r3, [pc, #44]	; (80114f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	0c1b      	lsrs	r3, r3, #16
 80114ce:	f003 0303 	and.w	r3, r3, #3
 80114d2:	3301      	adds	r3, #1
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80114d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80114da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80114e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80114e2:	e002      	b.n	80114ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80114e4:	4b05      	ldr	r3, [pc, #20]	; (80114fc <HAL_RCC_GetSysClockFreq+0x184>)
 80114e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80114e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3740      	adds	r7, #64	; 0x40
 80114f0:	46bd      	mov	sp, r7
 80114f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80114f6:	bf00      	nop
 80114f8:	40023800 	.word	0x40023800
 80114fc:	00f42400 	.word	0x00f42400
 8011500:	017d7840 	.word	0x017d7840

08011504 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011504:	b480      	push	{r7}
 8011506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011508:	4b03      	ldr	r3, [pc, #12]	; (8011518 <HAL_RCC_GetHCLKFreq+0x14>)
 801150a:	681b      	ldr	r3, [r3, #0]
}
 801150c:	4618      	mov	r0, r3
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop
 8011518:	200050a0 	.word	0x200050a0

0801151c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011520:	f7ff fff0 	bl	8011504 <HAL_RCC_GetHCLKFreq>
 8011524:	4602      	mov	r2, r0
 8011526:	4b05      	ldr	r3, [pc, #20]	; (801153c <HAL_RCC_GetPCLK1Freq+0x20>)
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	0a9b      	lsrs	r3, r3, #10
 801152c:	f003 0307 	and.w	r3, r3, #7
 8011530:	4903      	ldr	r1, [pc, #12]	; (8011540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011532:	5ccb      	ldrb	r3, [r1, r3]
 8011534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011538:	4618      	mov	r0, r3
 801153a:	bd80      	pop	{r7, pc}
 801153c:	40023800 	.word	0x40023800
 8011540:	08023bf0 	.word	0x08023bf0

08011544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011548:	f7ff ffdc 	bl	8011504 <HAL_RCC_GetHCLKFreq>
 801154c:	4602      	mov	r2, r0
 801154e:	4b05      	ldr	r3, [pc, #20]	; (8011564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	0b5b      	lsrs	r3, r3, #13
 8011554:	f003 0307 	and.w	r3, r3, #7
 8011558:	4903      	ldr	r1, [pc, #12]	; (8011568 <HAL_RCC_GetPCLK2Freq+0x24>)
 801155a:	5ccb      	ldrb	r3, [r1, r3]
 801155c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011560:	4618      	mov	r0, r3
 8011562:	bd80      	pop	{r7, pc}
 8011564:	40023800 	.word	0x40023800
 8011568:	08023bf0 	.word	0x08023bf0

0801156c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b088      	sub	sp, #32
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8011580:	2300      	movs	r3, #0
 8011582:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8011584:	2300      	movs	r3, #0
 8011586:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f003 0301 	and.w	r3, r3, #1
 8011590:	2b00      	cmp	r3, #0
 8011592:	d012      	beq.n	80115ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011594:	4b69      	ldr	r3, [pc, #420]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	4a68      	ldr	r2, [pc, #416]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801159a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801159e:	6093      	str	r3, [r2, #8]
 80115a0:	4b66      	ldr	r3, [pc, #408]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80115a2:	689a      	ldr	r2, [r3, #8]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a8:	4964      	ldr	r1, [pc, #400]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80115aa:	4313      	orrs	r3, r2
 80115ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d101      	bne.n	80115ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80115b6:	2301      	movs	r3, #1
 80115b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d017      	beq.n	80115f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80115c6:	4b5d      	ldr	r3, [pc, #372]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80115c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d4:	4959      	ldr	r1, [pc, #356]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80115d6:	4313      	orrs	r3, r2
 80115d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115e4:	d101      	bne.n	80115ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80115e6:	2301      	movs	r3, #1
 80115e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d101      	bne.n	80115f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80115f2:	2301      	movs	r3, #1
 80115f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d017      	beq.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011602:	4b4e      	ldr	r3, [pc, #312]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011608:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011610:	494a      	ldr	r1, [pc, #296]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011612:	4313      	orrs	r3, r2
 8011614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801161c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011620:	d101      	bne.n	8011626 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8011622:	2301      	movs	r3, #1
 8011624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801162a:	2b00      	cmp	r3, #0
 801162c:	d101      	bne.n	8011632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801162e:	2301      	movs	r3, #1
 8011630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801163e:	2301      	movs	r3, #1
 8011640:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f003 0320 	and.w	r3, r3, #32
 801164a:	2b00      	cmp	r3, #0
 801164c:	f000 808b 	beq.w	8011766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011650:	4b3a      	ldr	r3, [pc, #232]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011654:	4a39      	ldr	r2, [pc, #228]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801165a:	6413      	str	r3, [r2, #64]	; 0x40
 801165c:	4b37      	ldr	r3, [pc, #220]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011664:	60bb      	str	r3, [r7, #8]
 8011666:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011668:	4b35      	ldr	r3, [pc, #212]	; (8011740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a34      	ldr	r2, [pc, #208]	; (8011740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011674:	f7ff f814 	bl	80106a0 <HAL_GetTick>
 8011678:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801167a:	e008      	b.n	801168e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801167c:	f7ff f810 	bl	80106a0 <HAL_GetTick>
 8011680:	4602      	mov	r2, r0
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	1ad3      	subs	r3, r2, r3
 8011686:	2b64      	cmp	r3, #100	; 0x64
 8011688:	d901      	bls.n	801168e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801168a:	2303      	movs	r3, #3
 801168c:	e357      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801168e:	4b2c      	ldr	r3, [pc, #176]	; (8011740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0f0      	beq.n	801167c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801169a:	4b28      	ldr	r3, [pc, #160]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801169e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80116a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d035      	beq.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80116b2:	693a      	ldr	r2, [r7, #16]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d02e      	beq.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80116b8:	4b20      	ldr	r3, [pc, #128]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80116c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80116c2:	4b1e      	ldr	r3, [pc, #120]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116c6:	4a1d      	ldr	r2, [pc, #116]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80116cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80116ce:	4b1b      	ldr	r3, [pc, #108]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116d2:	4a1a      	ldr	r2, [pc, #104]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80116da:	4a18      	ldr	r2, [pc, #96]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80116e0:	4b16      	ldr	r3, [pc, #88]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80116e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116e4:	f003 0301 	and.w	r3, r3, #1
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d114      	bne.n	8011716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116ec:	f7fe ffd8 	bl	80106a0 <HAL_GetTick>
 80116f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80116f2:	e00a      	b.n	801170a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80116f4:	f7fe ffd4 	bl	80106a0 <HAL_GetTick>
 80116f8:	4602      	mov	r2, r0
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	1ad3      	subs	r3, r2, r3
 80116fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011702:	4293      	cmp	r3, r2
 8011704:	d901      	bls.n	801170a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8011706:	2303      	movs	r3, #3
 8011708:	e319      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801170a:	4b0c      	ldr	r3, [pc, #48]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801170e:	f003 0302 	and.w	r3, r3, #2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d0ee      	beq.n	80116f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801171a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801171e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011722:	d111      	bne.n	8011748 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8011724:	4b05      	ldr	r3, [pc, #20]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011726:	689b      	ldr	r3, [r3, #8]
 8011728:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011730:	4b04      	ldr	r3, [pc, #16]	; (8011744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8011732:	400b      	ands	r3, r1
 8011734:	4901      	ldr	r1, [pc, #4]	; (801173c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011736:	4313      	orrs	r3, r2
 8011738:	608b      	str	r3, [r1, #8]
 801173a:	e00b      	b.n	8011754 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801173c:	40023800 	.word	0x40023800
 8011740:	40007000 	.word	0x40007000
 8011744:	0ffffcff 	.word	0x0ffffcff
 8011748:	4baa      	ldr	r3, [pc, #680]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	4aa9      	ldr	r2, [pc, #676]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801174e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8011752:	6093      	str	r3, [r2, #8]
 8011754:	4ba7      	ldr	r3, [pc, #668]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801175c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011760:	49a4      	ldr	r1, [pc, #656]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011762:	4313      	orrs	r3, r2
 8011764:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f003 0310 	and.w	r3, r3, #16
 801176e:	2b00      	cmp	r3, #0
 8011770:	d010      	beq.n	8011794 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011772:	4ba0      	ldr	r3, [pc, #640]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011778:	4a9e      	ldr	r2, [pc, #632]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801177a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801177e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8011782:	4b9c      	ldr	r3, [pc, #624]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011784:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801178c:	4999      	ldr	r1, [pc, #612]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801178e:	4313      	orrs	r3, r2
 8011790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d00a      	beq.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80117a0:	4b94      	ldr	r3, [pc, #592]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117ae:	4991      	ldr	r1, [pc, #580]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117b0:	4313      	orrs	r3, r2
 80117b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00a      	beq.n	80117d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80117c2:	4b8c      	ldr	r3, [pc, #560]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117d0:	4988      	ldr	r1, [pc, #544]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117d2:	4313      	orrs	r3, r2
 80117d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00a      	beq.n	80117fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80117e4:	4b83      	ldr	r3, [pc, #524]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117f2:	4980      	ldr	r1, [pc, #512]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80117f4:	4313      	orrs	r3, r2
 80117f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00a      	beq.n	801181c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011806:	4b7b      	ldr	r3, [pc, #492]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801180c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011814:	4977      	ldr	r1, [pc, #476]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011816:	4313      	orrs	r3, r2
 8011818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00a      	beq.n	801183e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011828:	4b72      	ldr	r3, [pc, #456]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801182e:	f023 0203 	bic.w	r2, r3, #3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011836:	496f      	ldr	r1, [pc, #444]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011838:	4313      	orrs	r3, r2
 801183a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00a      	beq.n	8011860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801184a:	4b6a      	ldr	r3, [pc, #424]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011850:	f023 020c 	bic.w	r2, r3, #12
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011858:	4966      	ldr	r1, [pc, #408]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801185a:	4313      	orrs	r3, r2
 801185c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011868:	2b00      	cmp	r3, #0
 801186a:	d00a      	beq.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801186c:	4b61      	ldr	r3, [pc, #388]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011872:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801187a:	495e      	ldr	r1, [pc, #376]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801187c:	4313      	orrs	r3, r2
 801187e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00a      	beq.n	80118a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801188e:	4b59      	ldr	r3, [pc, #356]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011894:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801189c:	4955      	ldr	r1, [pc, #340]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801189e:	4313      	orrs	r3, r2
 80118a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d00a      	beq.n	80118c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80118b0:	4b50      	ldr	r3, [pc, #320]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80118b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118be:	494d      	ldr	r1, [pc, #308]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80118c0:	4313      	orrs	r3, r2
 80118c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00a      	beq.n	80118e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80118d2:	4b48      	ldr	r3, [pc, #288]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80118d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118e0:	4944      	ldr	r1, [pc, #272]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80118e2:	4313      	orrs	r3, r2
 80118e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00a      	beq.n	801190a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80118f4:	4b3f      	ldr	r3, [pc, #252]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80118f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011902:	493c      	ldr	r1, [pc, #240]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011904:	4313      	orrs	r3, r2
 8011906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00a      	beq.n	801192c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8011916:	4b37      	ldr	r3, [pc, #220]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801191c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011924:	4933      	ldr	r1, [pc, #204]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011926:	4313      	orrs	r3, r2
 8011928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011934:	2b00      	cmp	r3, #0
 8011936:	d00a      	beq.n	801194e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011938:	4b2e      	ldr	r3, [pc, #184]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801193e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011946:	492b      	ldr	r1, [pc, #172]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011948:	4313      	orrs	r3, r2
 801194a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011956:	2b00      	cmp	r3, #0
 8011958:	d011      	beq.n	801197e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801195a:	4b26      	ldr	r3, [pc, #152]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011960:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011968:	4922      	ldr	r1, [pc, #136]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801196a:	4313      	orrs	r3, r2
 801196c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011978:	d101      	bne.n	801197e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801197a:	2301      	movs	r3, #1
 801197c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f003 0308 	and.w	r3, r3, #8
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801198a:	2301      	movs	r3, #1
 801198c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00a      	beq.n	80119b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801199a:	4b16      	ldr	r3, [pc, #88]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119a8:	4912      	ldr	r1, [pc, #72]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119aa:	4313      	orrs	r3, r2
 80119ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00b      	beq.n	80119d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80119bc:	4b0d      	ldr	r3, [pc, #52]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119cc:	4909      	ldr	r1, [pc, #36]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119ce:	4313      	orrs	r3, r2
 80119d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d006      	beq.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 80d9 	beq.w	8011b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80119e8:	4b02      	ldr	r3, [pc, #8]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	4a01      	ldr	r2, [pc, #4]	; (80119f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80119f2:	e001      	b.n	80119f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80119f4:	40023800 	.word	0x40023800
 80119f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80119fa:	f7fe fe51 	bl	80106a0 <HAL_GetTick>
 80119fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011a00:	e008      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011a02:	f7fe fe4d 	bl	80106a0 <HAL_GetTick>
 8011a06:	4602      	mov	r2, r0
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	2b64      	cmp	r3, #100	; 0x64
 8011a0e:	d901      	bls.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011a10:	2303      	movs	r3, #3
 8011a12:	e194      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011a14:	4b6c      	ldr	r3, [pc, #432]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1f0      	bne.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f003 0301 	and.w	r3, r3, #1
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d021      	beq.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d11d      	bne.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011a34:	4b64      	ldr	r3, [pc, #400]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a3a:	0c1b      	lsrs	r3, r3, #16
 8011a3c:	f003 0303 	and.w	r3, r3, #3
 8011a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011a42:	4b61      	ldr	r3, [pc, #388]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a48:	0e1b      	lsrs	r3, r3, #24
 8011a4a:	f003 030f 	and.w	r3, r3, #15
 8011a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	019a      	lsls	r2, r3, #6
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	041b      	lsls	r3, r3, #16
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	061b      	lsls	r3, r3, #24
 8011a60:	431a      	orrs	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	689b      	ldr	r3, [r3, #8]
 8011a66:	071b      	lsls	r3, r3, #28
 8011a68:	4957      	ldr	r1, [pc, #348]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d004      	beq.n	8011a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a84:	d00a      	beq.n	8011a9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d02e      	beq.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011a9a:	d129      	bne.n	8011af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011a9c:	4b4a      	ldr	r3, [pc, #296]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aa2:	0c1b      	lsrs	r3, r3, #16
 8011aa4:	f003 0303 	and.w	r3, r3, #3
 8011aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011aaa:	4b47      	ldr	r3, [pc, #284]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ab0:	0f1b      	lsrs	r3, r3, #28
 8011ab2:	f003 0307 	and.w	r3, r3, #7
 8011ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	019a      	lsls	r2, r3, #6
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	041b      	lsls	r3, r3, #16
 8011ac2:	431a      	orrs	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	68db      	ldr	r3, [r3, #12]
 8011ac8:	061b      	lsls	r3, r3, #24
 8011aca:	431a      	orrs	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	071b      	lsls	r3, r3, #28
 8011ad0:	493d      	ldr	r1, [pc, #244]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011ad8:	4b3b      	ldr	r3, [pc, #236]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ade:	f023 021f 	bic.w	r2, r3, #31
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	4937      	ldr	r1, [pc, #220]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011aea:	4313      	orrs	r3, r2
 8011aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d01d      	beq.n	8011b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011afc:	4b32      	ldr	r3, [pc, #200]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b02:	0e1b      	lsrs	r3, r3, #24
 8011b04:	f003 030f 	and.w	r3, r3, #15
 8011b08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011b0a:	4b2f      	ldr	r3, [pc, #188]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b10:	0f1b      	lsrs	r3, r3, #28
 8011b12:	f003 0307 	and.w	r3, r3, #7
 8011b16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	019a      	lsls	r2, r3, #6
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	041b      	lsls	r3, r3, #16
 8011b24:	431a      	orrs	r2, r3
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	061b      	lsls	r3, r3, #24
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	071b      	lsls	r3, r3, #28
 8011b30:	4925      	ldr	r1, [pc, #148]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b32:	4313      	orrs	r3, r2
 8011b34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d011      	beq.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	019a      	lsls	r2, r3, #6
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	041b      	lsls	r3, r3, #16
 8011b50:	431a      	orrs	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	061b      	lsls	r3, r3, #24
 8011b58:	431a      	orrs	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	689b      	ldr	r3, [r3, #8]
 8011b5e:	071b      	lsls	r3, r3, #28
 8011b60:	4919      	ldr	r1, [pc, #100]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b62:	4313      	orrs	r3, r2
 8011b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011b68:	4b17      	ldr	r3, [pc, #92]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4a16      	ldr	r2, [pc, #88]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b74:	f7fe fd94 	bl	80106a0 <HAL_GetTick>
 8011b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011b7a:	e008      	b.n	8011b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011b7c:	f7fe fd90 	bl	80106a0 <HAL_GetTick>
 8011b80:	4602      	mov	r2, r0
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	2b64      	cmp	r3, #100	; 0x64
 8011b88:	d901      	bls.n	8011b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e0d7      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011b8e:	4b0e      	ldr	r3, [pc, #56]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d0f0      	beq.n	8011b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	f040 80cd 	bne.w	8011d3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011ba2:	4b09      	ldr	r3, [pc, #36]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a08      	ldr	r2, [pc, #32]	; (8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011bae:	f7fe fd77 	bl	80106a0 <HAL_GetTick>
 8011bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011bb4:	e00a      	b.n	8011bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011bb6:	f7fe fd73 	bl	80106a0 <HAL_GetTick>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	1ad3      	subs	r3, r2, r3
 8011bc0:	2b64      	cmp	r3, #100	; 0x64
 8011bc2:	d903      	bls.n	8011bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011bc4:	2303      	movs	r3, #3
 8011bc6:	e0ba      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8011bc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011bcc:	4b5e      	ldr	r3, [pc, #376]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011bd8:	d0ed      	beq.n	8011bb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d003      	beq.n	8011bee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d009      	beq.n	8011c02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d02e      	beq.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d12a      	bne.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011c02:	4b51      	ldr	r3, [pc, #324]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c08:	0c1b      	lsrs	r3, r3, #16
 8011c0a:	f003 0303 	and.w	r3, r3, #3
 8011c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011c10:	4b4d      	ldr	r3, [pc, #308]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c16:	0f1b      	lsrs	r3, r3, #28
 8011c18:	f003 0307 	and.w	r3, r3, #7
 8011c1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	695b      	ldr	r3, [r3, #20]
 8011c22:	019a      	lsls	r2, r3, #6
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	041b      	lsls	r3, r3, #16
 8011c28:	431a      	orrs	r2, r3
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	699b      	ldr	r3, [r3, #24]
 8011c2e:	061b      	lsls	r3, r3, #24
 8011c30:	431a      	orrs	r2, r3
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	071b      	lsls	r3, r3, #28
 8011c36:	4944      	ldr	r1, [pc, #272]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011c3e:	4b42      	ldr	r3, [pc, #264]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c4c:	3b01      	subs	r3, #1
 8011c4e:	021b      	lsls	r3, r3, #8
 8011c50:	493d      	ldr	r1, [pc, #244]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c52:	4313      	orrs	r3, r2
 8011c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d022      	beq.n	8011caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c6c:	d11d      	bne.n	8011caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011c6e:	4b36      	ldr	r3, [pc, #216]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c74:	0e1b      	lsrs	r3, r3, #24
 8011c76:	f003 030f 	and.w	r3, r3, #15
 8011c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011c7c:	4b32      	ldr	r3, [pc, #200]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c82:	0f1b      	lsrs	r3, r3, #28
 8011c84:	f003 0307 	and.w	r3, r3, #7
 8011c88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	695b      	ldr	r3, [r3, #20]
 8011c8e:	019a      	lsls	r2, r3, #6
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6a1b      	ldr	r3, [r3, #32]
 8011c94:	041b      	lsls	r3, r3, #16
 8011c96:	431a      	orrs	r2, r3
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	061b      	lsls	r3, r3, #24
 8011c9c:	431a      	orrs	r2, r3
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	071b      	lsls	r3, r3, #28
 8011ca2:	4929      	ldr	r1, [pc, #164]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ca4:	4313      	orrs	r3, r2
 8011ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f003 0308 	and.w	r3, r3, #8
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d028      	beq.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011cb6:	4b24      	ldr	r3, [pc, #144]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cbc:	0e1b      	lsrs	r3, r3, #24
 8011cbe:	f003 030f 	and.w	r3, r3, #15
 8011cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011cc4:	4b20      	ldr	r3, [pc, #128]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cca:	0c1b      	lsrs	r3, r3, #16
 8011ccc:	f003 0303 	and.w	r3, r3, #3
 8011cd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	019a      	lsls	r2, r3, #6
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	041b      	lsls	r3, r3, #16
 8011cdc:	431a      	orrs	r2, r3
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	061b      	lsls	r3, r3, #24
 8011ce2:	431a      	orrs	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	69db      	ldr	r3, [r3, #28]
 8011ce8:	071b      	lsls	r3, r3, #28
 8011cea:	4917      	ldr	r1, [pc, #92]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011cec:	4313      	orrs	r3, r2
 8011cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011cf2:	4b15      	ldr	r3, [pc, #84]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d00:	4911      	ldr	r1, [pc, #68]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011d02:	4313      	orrs	r3, r2
 8011d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011d08:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a0e      	ldr	r2, [pc, #56]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d14:	f7fe fcc4 	bl	80106a0 <HAL_GetTick>
 8011d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011d1a:	e008      	b.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011d1c:	f7fe fcc0 	bl	80106a0 <HAL_GetTick>
 8011d20:	4602      	mov	r2, r0
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	1ad3      	subs	r3, r2, r3
 8011d26:	2b64      	cmp	r3, #100	; 0x64
 8011d28:	d901      	bls.n	8011d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011d2a:	2303      	movs	r3, #3
 8011d2c:	e007      	b.n	8011d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011d2e:	4b06      	ldr	r3, [pc, #24]	; (8011d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d3a:	d1ef      	bne.n	8011d1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3720      	adds	r7, #32
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	40023800 	.word	0x40023800

08011d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e040      	b.n	8011de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d106      	bne.n	8011d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2200      	movs	r2, #0
 8011d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7fe fa98 	bl	80102a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2224      	movs	r2, #36	; 0x24
 8011d78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f022 0201 	bic.w	r2, r2, #1
 8011d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 f8b0 	bl	8011ef0 <UART_SetConfig>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d101      	bne.n	8011d9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011d96:	2301      	movs	r3, #1
 8011d98:	e022      	b.n	8011de0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d002      	beq.n	8011da8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 fb08 	bl	80123b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	685a      	ldr	r2, [r3, #4]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	689a      	ldr	r2, [r3, #8]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f042 0201 	orr.w	r2, r2, #1
 8011dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 fb8f 	bl	80124fc <UART_CheckIdleState>
 8011dde:	4603      	mov	r3, r0
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3708      	adds	r7, #8
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08a      	sub	sp, #40	; 0x28
 8011dec:	af02      	add	r7, sp, #8
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	603b      	str	r3, [r7, #0]
 8011df4:	4613      	mov	r3, r2
 8011df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dfc:	2b20      	cmp	r3, #32
 8011dfe:	d171      	bne.n	8011ee4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <HAL_UART_Transmit+0x24>
 8011e06:	88fb      	ldrh	r3, [r7, #6]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d101      	bne.n	8011e10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	e06a      	b.n	8011ee6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2221      	movs	r2, #33	; 0x21
 8011e1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011e1e:	f7fe fc3f 	bl	80106a0 <HAL_GetTick>
 8011e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	88fa      	ldrh	r2, [r7, #6]
 8011e28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	88fa      	ldrh	r2, [r7, #6]
 8011e30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e3c:	d108      	bne.n	8011e50 <HAL_UART_Transmit+0x68>
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d104      	bne.n	8011e50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8011e46:	2300      	movs	r3, #0
 8011e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	61bb      	str	r3, [r7, #24]
 8011e4e:	e003      	b.n	8011e58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011e54:	2300      	movs	r3, #0
 8011e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011e58:	e02c      	b.n	8011eb4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	9300      	str	r3, [sp, #0]
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2200      	movs	r2, #0
 8011e62:	2180      	movs	r1, #128	; 0x80
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 fb80 	bl	801256a <UART_WaitOnFlagUntilTimeout>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8011e70:	2303      	movs	r3, #3
 8011e72:	e038      	b.n	8011ee6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d10b      	bne.n	8011e92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	3302      	adds	r3, #2
 8011e8e:	61bb      	str	r3, [r7, #24]
 8011e90:	e007      	b.n	8011ea2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	781a      	ldrb	r2, [r3, #0]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	b29a      	uxth	r2, r3
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1cc      	bne.n	8011e5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	2140      	movs	r1, #64	; 0x40
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f000 fb4d 	bl	801256a <UART_WaitOnFlagUntilTimeout>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8011ed6:	2303      	movs	r3, #3
 8011ed8:	e005      	b.n	8011ee6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2220      	movs	r2, #32
 8011ede:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	e000      	b.n	8011ee6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8011ee4:	2302      	movs	r3, #2
  }
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3720      	adds	r7, #32
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
	...

08011ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b088      	sub	sp, #32
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	689a      	ldr	r2, [r3, #8]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	431a      	orrs	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	695b      	ldr	r3, [r3, #20]
 8011f0a:	431a      	orrs	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	69db      	ldr	r3, [r3, #28]
 8011f10:	4313      	orrs	r3, r2
 8011f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	4ba6      	ldr	r3, [pc, #664]	; (80121b4 <UART_SetConfig+0x2c4>)
 8011f1c:	4013      	ands	r3, r2
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	6812      	ldr	r2, [r2, #0]
 8011f22:	6979      	ldr	r1, [r7, #20]
 8011f24:	430b      	orrs	r3, r1
 8011f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68da      	ldr	r2, [r3, #12]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	430a      	orrs	r2, r1
 8011f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6a1b      	ldr	r3, [r3, #32]
 8011f48:	697a      	ldr	r2, [r7, #20]
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	689b      	ldr	r3, [r3, #8]
 8011f54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	697a      	ldr	r2, [r7, #20]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4a94      	ldr	r2, [pc, #592]	; (80121b8 <UART_SetConfig+0x2c8>)
 8011f68:	4293      	cmp	r3, r2
 8011f6a:	d120      	bne.n	8011fae <UART_SetConfig+0xbe>
 8011f6c:	4b93      	ldr	r3, [pc, #588]	; (80121bc <UART_SetConfig+0x2cc>)
 8011f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f72:	f003 0303 	and.w	r3, r3, #3
 8011f76:	2b03      	cmp	r3, #3
 8011f78:	d816      	bhi.n	8011fa8 <UART_SetConfig+0xb8>
 8011f7a:	a201      	add	r2, pc, #4	; (adr r2, 8011f80 <UART_SetConfig+0x90>)
 8011f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f80:	08011f91 	.word	0x08011f91
 8011f84:	08011f9d 	.word	0x08011f9d
 8011f88:	08011f97 	.word	0x08011f97
 8011f8c:	08011fa3 	.word	0x08011fa3
 8011f90:	2301      	movs	r3, #1
 8011f92:	77fb      	strb	r3, [r7, #31]
 8011f94:	e150      	b.n	8012238 <UART_SetConfig+0x348>
 8011f96:	2302      	movs	r3, #2
 8011f98:	77fb      	strb	r3, [r7, #31]
 8011f9a:	e14d      	b.n	8012238 <UART_SetConfig+0x348>
 8011f9c:	2304      	movs	r3, #4
 8011f9e:	77fb      	strb	r3, [r7, #31]
 8011fa0:	e14a      	b.n	8012238 <UART_SetConfig+0x348>
 8011fa2:	2308      	movs	r3, #8
 8011fa4:	77fb      	strb	r3, [r7, #31]
 8011fa6:	e147      	b.n	8012238 <UART_SetConfig+0x348>
 8011fa8:	2310      	movs	r3, #16
 8011faa:	77fb      	strb	r3, [r7, #31]
 8011fac:	e144      	b.n	8012238 <UART_SetConfig+0x348>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a83      	ldr	r2, [pc, #524]	; (80121c0 <UART_SetConfig+0x2d0>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d132      	bne.n	801201e <UART_SetConfig+0x12e>
 8011fb8:	4b80      	ldr	r3, [pc, #512]	; (80121bc <UART_SetConfig+0x2cc>)
 8011fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fbe:	f003 030c 	and.w	r3, r3, #12
 8011fc2:	2b0c      	cmp	r3, #12
 8011fc4:	d828      	bhi.n	8012018 <UART_SetConfig+0x128>
 8011fc6:	a201      	add	r2, pc, #4	; (adr r2, 8011fcc <UART_SetConfig+0xdc>)
 8011fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fcc:	08012001 	.word	0x08012001
 8011fd0:	08012019 	.word	0x08012019
 8011fd4:	08012019 	.word	0x08012019
 8011fd8:	08012019 	.word	0x08012019
 8011fdc:	0801200d 	.word	0x0801200d
 8011fe0:	08012019 	.word	0x08012019
 8011fe4:	08012019 	.word	0x08012019
 8011fe8:	08012019 	.word	0x08012019
 8011fec:	08012007 	.word	0x08012007
 8011ff0:	08012019 	.word	0x08012019
 8011ff4:	08012019 	.word	0x08012019
 8011ff8:	08012019 	.word	0x08012019
 8011ffc:	08012013 	.word	0x08012013
 8012000:	2300      	movs	r3, #0
 8012002:	77fb      	strb	r3, [r7, #31]
 8012004:	e118      	b.n	8012238 <UART_SetConfig+0x348>
 8012006:	2302      	movs	r3, #2
 8012008:	77fb      	strb	r3, [r7, #31]
 801200a:	e115      	b.n	8012238 <UART_SetConfig+0x348>
 801200c:	2304      	movs	r3, #4
 801200e:	77fb      	strb	r3, [r7, #31]
 8012010:	e112      	b.n	8012238 <UART_SetConfig+0x348>
 8012012:	2308      	movs	r3, #8
 8012014:	77fb      	strb	r3, [r7, #31]
 8012016:	e10f      	b.n	8012238 <UART_SetConfig+0x348>
 8012018:	2310      	movs	r3, #16
 801201a:	77fb      	strb	r3, [r7, #31]
 801201c:	e10c      	b.n	8012238 <UART_SetConfig+0x348>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4a68      	ldr	r2, [pc, #416]	; (80121c4 <UART_SetConfig+0x2d4>)
 8012024:	4293      	cmp	r3, r2
 8012026:	d120      	bne.n	801206a <UART_SetConfig+0x17a>
 8012028:	4b64      	ldr	r3, [pc, #400]	; (80121bc <UART_SetConfig+0x2cc>)
 801202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801202e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012032:	2b30      	cmp	r3, #48	; 0x30
 8012034:	d013      	beq.n	801205e <UART_SetConfig+0x16e>
 8012036:	2b30      	cmp	r3, #48	; 0x30
 8012038:	d814      	bhi.n	8012064 <UART_SetConfig+0x174>
 801203a:	2b20      	cmp	r3, #32
 801203c:	d009      	beq.n	8012052 <UART_SetConfig+0x162>
 801203e:	2b20      	cmp	r3, #32
 8012040:	d810      	bhi.n	8012064 <UART_SetConfig+0x174>
 8012042:	2b00      	cmp	r3, #0
 8012044:	d002      	beq.n	801204c <UART_SetConfig+0x15c>
 8012046:	2b10      	cmp	r3, #16
 8012048:	d006      	beq.n	8012058 <UART_SetConfig+0x168>
 801204a:	e00b      	b.n	8012064 <UART_SetConfig+0x174>
 801204c:	2300      	movs	r3, #0
 801204e:	77fb      	strb	r3, [r7, #31]
 8012050:	e0f2      	b.n	8012238 <UART_SetConfig+0x348>
 8012052:	2302      	movs	r3, #2
 8012054:	77fb      	strb	r3, [r7, #31]
 8012056:	e0ef      	b.n	8012238 <UART_SetConfig+0x348>
 8012058:	2304      	movs	r3, #4
 801205a:	77fb      	strb	r3, [r7, #31]
 801205c:	e0ec      	b.n	8012238 <UART_SetConfig+0x348>
 801205e:	2308      	movs	r3, #8
 8012060:	77fb      	strb	r3, [r7, #31]
 8012062:	e0e9      	b.n	8012238 <UART_SetConfig+0x348>
 8012064:	2310      	movs	r3, #16
 8012066:	77fb      	strb	r3, [r7, #31]
 8012068:	e0e6      	b.n	8012238 <UART_SetConfig+0x348>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	4a56      	ldr	r2, [pc, #344]	; (80121c8 <UART_SetConfig+0x2d8>)
 8012070:	4293      	cmp	r3, r2
 8012072:	d120      	bne.n	80120b6 <UART_SetConfig+0x1c6>
 8012074:	4b51      	ldr	r3, [pc, #324]	; (80121bc <UART_SetConfig+0x2cc>)
 8012076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801207a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801207e:	2bc0      	cmp	r3, #192	; 0xc0
 8012080:	d013      	beq.n	80120aa <UART_SetConfig+0x1ba>
 8012082:	2bc0      	cmp	r3, #192	; 0xc0
 8012084:	d814      	bhi.n	80120b0 <UART_SetConfig+0x1c0>
 8012086:	2b80      	cmp	r3, #128	; 0x80
 8012088:	d009      	beq.n	801209e <UART_SetConfig+0x1ae>
 801208a:	2b80      	cmp	r3, #128	; 0x80
 801208c:	d810      	bhi.n	80120b0 <UART_SetConfig+0x1c0>
 801208e:	2b00      	cmp	r3, #0
 8012090:	d002      	beq.n	8012098 <UART_SetConfig+0x1a8>
 8012092:	2b40      	cmp	r3, #64	; 0x40
 8012094:	d006      	beq.n	80120a4 <UART_SetConfig+0x1b4>
 8012096:	e00b      	b.n	80120b0 <UART_SetConfig+0x1c0>
 8012098:	2300      	movs	r3, #0
 801209a:	77fb      	strb	r3, [r7, #31]
 801209c:	e0cc      	b.n	8012238 <UART_SetConfig+0x348>
 801209e:	2302      	movs	r3, #2
 80120a0:	77fb      	strb	r3, [r7, #31]
 80120a2:	e0c9      	b.n	8012238 <UART_SetConfig+0x348>
 80120a4:	2304      	movs	r3, #4
 80120a6:	77fb      	strb	r3, [r7, #31]
 80120a8:	e0c6      	b.n	8012238 <UART_SetConfig+0x348>
 80120aa:	2308      	movs	r3, #8
 80120ac:	77fb      	strb	r3, [r7, #31]
 80120ae:	e0c3      	b.n	8012238 <UART_SetConfig+0x348>
 80120b0:	2310      	movs	r3, #16
 80120b2:	77fb      	strb	r3, [r7, #31]
 80120b4:	e0c0      	b.n	8012238 <UART_SetConfig+0x348>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a44      	ldr	r2, [pc, #272]	; (80121cc <UART_SetConfig+0x2dc>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d125      	bne.n	801210c <UART_SetConfig+0x21c>
 80120c0:	4b3e      	ldr	r3, [pc, #248]	; (80121bc <UART_SetConfig+0x2cc>)
 80120c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80120c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80120ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80120ce:	d017      	beq.n	8012100 <UART_SetConfig+0x210>
 80120d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80120d4:	d817      	bhi.n	8012106 <UART_SetConfig+0x216>
 80120d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120da:	d00b      	beq.n	80120f4 <UART_SetConfig+0x204>
 80120dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120e0:	d811      	bhi.n	8012106 <UART_SetConfig+0x216>
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <UART_SetConfig+0x1fe>
 80120e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ea:	d006      	beq.n	80120fa <UART_SetConfig+0x20a>
 80120ec:	e00b      	b.n	8012106 <UART_SetConfig+0x216>
 80120ee:	2300      	movs	r3, #0
 80120f0:	77fb      	strb	r3, [r7, #31]
 80120f2:	e0a1      	b.n	8012238 <UART_SetConfig+0x348>
 80120f4:	2302      	movs	r3, #2
 80120f6:	77fb      	strb	r3, [r7, #31]
 80120f8:	e09e      	b.n	8012238 <UART_SetConfig+0x348>
 80120fa:	2304      	movs	r3, #4
 80120fc:	77fb      	strb	r3, [r7, #31]
 80120fe:	e09b      	b.n	8012238 <UART_SetConfig+0x348>
 8012100:	2308      	movs	r3, #8
 8012102:	77fb      	strb	r3, [r7, #31]
 8012104:	e098      	b.n	8012238 <UART_SetConfig+0x348>
 8012106:	2310      	movs	r3, #16
 8012108:	77fb      	strb	r3, [r7, #31]
 801210a:	e095      	b.n	8012238 <UART_SetConfig+0x348>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a2f      	ldr	r2, [pc, #188]	; (80121d0 <UART_SetConfig+0x2e0>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d125      	bne.n	8012162 <UART_SetConfig+0x272>
 8012116:	4b29      	ldr	r3, [pc, #164]	; (80121bc <UART_SetConfig+0x2cc>)
 8012118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801211c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012124:	d017      	beq.n	8012156 <UART_SetConfig+0x266>
 8012126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801212a:	d817      	bhi.n	801215c <UART_SetConfig+0x26c>
 801212c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012130:	d00b      	beq.n	801214a <UART_SetConfig+0x25a>
 8012132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012136:	d811      	bhi.n	801215c <UART_SetConfig+0x26c>
 8012138:	2b00      	cmp	r3, #0
 801213a:	d003      	beq.n	8012144 <UART_SetConfig+0x254>
 801213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012140:	d006      	beq.n	8012150 <UART_SetConfig+0x260>
 8012142:	e00b      	b.n	801215c <UART_SetConfig+0x26c>
 8012144:	2301      	movs	r3, #1
 8012146:	77fb      	strb	r3, [r7, #31]
 8012148:	e076      	b.n	8012238 <UART_SetConfig+0x348>
 801214a:	2302      	movs	r3, #2
 801214c:	77fb      	strb	r3, [r7, #31]
 801214e:	e073      	b.n	8012238 <UART_SetConfig+0x348>
 8012150:	2304      	movs	r3, #4
 8012152:	77fb      	strb	r3, [r7, #31]
 8012154:	e070      	b.n	8012238 <UART_SetConfig+0x348>
 8012156:	2308      	movs	r3, #8
 8012158:	77fb      	strb	r3, [r7, #31]
 801215a:	e06d      	b.n	8012238 <UART_SetConfig+0x348>
 801215c:	2310      	movs	r3, #16
 801215e:	77fb      	strb	r3, [r7, #31]
 8012160:	e06a      	b.n	8012238 <UART_SetConfig+0x348>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	4a1b      	ldr	r2, [pc, #108]	; (80121d4 <UART_SetConfig+0x2e4>)
 8012168:	4293      	cmp	r3, r2
 801216a:	d138      	bne.n	80121de <UART_SetConfig+0x2ee>
 801216c:	4b13      	ldr	r3, [pc, #76]	; (80121bc <UART_SetConfig+0x2cc>)
 801216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012172:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801217a:	d017      	beq.n	80121ac <UART_SetConfig+0x2bc>
 801217c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012180:	d82a      	bhi.n	80121d8 <UART_SetConfig+0x2e8>
 8012182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012186:	d00b      	beq.n	80121a0 <UART_SetConfig+0x2b0>
 8012188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801218c:	d824      	bhi.n	80121d8 <UART_SetConfig+0x2e8>
 801218e:	2b00      	cmp	r3, #0
 8012190:	d003      	beq.n	801219a <UART_SetConfig+0x2aa>
 8012192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012196:	d006      	beq.n	80121a6 <UART_SetConfig+0x2b6>
 8012198:	e01e      	b.n	80121d8 <UART_SetConfig+0x2e8>
 801219a:	2300      	movs	r3, #0
 801219c:	77fb      	strb	r3, [r7, #31]
 801219e:	e04b      	b.n	8012238 <UART_SetConfig+0x348>
 80121a0:	2302      	movs	r3, #2
 80121a2:	77fb      	strb	r3, [r7, #31]
 80121a4:	e048      	b.n	8012238 <UART_SetConfig+0x348>
 80121a6:	2304      	movs	r3, #4
 80121a8:	77fb      	strb	r3, [r7, #31]
 80121aa:	e045      	b.n	8012238 <UART_SetConfig+0x348>
 80121ac:	2308      	movs	r3, #8
 80121ae:	77fb      	strb	r3, [r7, #31]
 80121b0:	e042      	b.n	8012238 <UART_SetConfig+0x348>
 80121b2:	bf00      	nop
 80121b4:	efff69f3 	.word	0xefff69f3
 80121b8:	40011000 	.word	0x40011000
 80121bc:	40023800 	.word	0x40023800
 80121c0:	40004400 	.word	0x40004400
 80121c4:	40004800 	.word	0x40004800
 80121c8:	40004c00 	.word	0x40004c00
 80121cc:	40005000 	.word	0x40005000
 80121d0:	40011400 	.word	0x40011400
 80121d4:	40007800 	.word	0x40007800
 80121d8:	2310      	movs	r3, #16
 80121da:	77fb      	strb	r3, [r7, #31]
 80121dc:	e02c      	b.n	8012238 <UART_SetConfig+0x348>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4a72      	ldr	r2, [pc, #456]	; (80123ac <UART_SetConfig+0x4bc>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d125      	bne.n	8012234 <UART_SetConfig+0x344>
 80121e8:	4b71      	ldr	r3, [pc, #452]	; (80123b0 <UART_SetConfig+0x4c0>)
 80121ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80121f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80121f6:	d017      	beq.n	8012228 <UART_SetConfig+0x338>
 80121f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80121fc:	d817      	bhi.n	801222e <UART_SetConfig+0x33e>
 80121fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012202:	d00b      	beq.n	801221c <UART_SetConfig+0x32c>
 8012204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012208:	d811      	bhi.n	801222e <UART_SetConfig+0x33e>
 801220a:	2b00      	cmp	r3, #0
 801220c:	d003      	beq.n	8012216 <UART_SetConfig+0x326>
 801220e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012212:	d006      	beq.n	8012222 <UART_SetConfig+0x332>
 8012214:	e00b      	b.n	801222e <UART_SetConfig+0x33e>
 8012216:	2300      	movs	r3, #0
 8012218:	77fb      	strb	r3, [r7, #31]
 801221a:	e00d      	b.n	8012238 <UART_SetConfig+0x348>
 801221c:	2302      	movs	r3, #2
 801221e:	77fb      	strb	r3, [r7, #31]
 8012220:	e00a      	b.n	8012238 <UART_SetConfig+0x348>
 8012222:	2304      	movs	r3, #4
 8012224:	77fb      	strb	r3, [r7, #31]
 8012226:	e007      	b.n	8012238 <UART_SetConfig+0x348>
 8012228:	2308      	movs	r3, #8
 801222a:	77fb      	strb	r3, [r7, #31]
 801222c:	e004      	b.n	8012238 <UART_SetConfig+0x348>
 801222e:	2310      	movs	r3, #16
 8012230:	77fb      	strb	r3, [r7, #31]
 8012232:	e001      	b.n	8012238 <UART_SetConfig+0x348>
 8012234:	2310      	movs	r3, #16
 8012236:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	69db      	ldr	r3, [r3, #28]
 801223c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012240:	d15b      	bne.n	80122fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8012242:	7ffb      	ldrb	r3, [r7, #31]
 8012244:	2b08      	cmp	r3, #8
 8012246:	d828      	bhi.n	801229a <UART_SetConfig+0x3aa>
 8012248:	a201      	add	r2, pc, #4	; (adr r2, 8012250 <UART_SetConfig+0x360>)
 801224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801224e:	bf00      	nop
 8012250:	08012275 	.word	0x08012275
 8012254:	0801227d 	.word	0x0801227d
 8012258:	08012285 	.word	0x08012285
 801225c:	0801229b 	.word	0x0801229b
 8012260:	0801228b 	.word	0x0801228b
 8012264:	0801229b 	.word	0x0801229b
 8012268:	0801229b 	.word	0x0801229b
 801226c:	0801229b 	.word	0x0801229b
 8012270:	08012293 	.word	0x08012293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012274:	f7ff f952 	bl	801151c <HAL_RCC_GetPCLK1Freq>
 8012278:	61b8      	str	r0, [r7, #24]
        break;
 801227a:	e013      	b.n	80122a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801227c:	f7ff f962 	bl	8011544 <HAL_RCC_GetPCLK2Freq>
 8012280:	61b8      	str	r0, [r7, #24]
        break;
 8012282:	e00f      	b.n	80122a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012284:	4b4b      	ldr	r3, [pc, #300]	; (80123b4 <UART_SetConfig+0x4c4>)
 8012286:	61bb      	str	r3, [r7, #24]
        break;
 8012288:	e00c      	b.n	80122a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801228a:	f7ff f875 	bl	8011378 <HAL_RCC_GetSysClockFreq>
 801228e:	61b8      	str	r0, [r7, #24]
        break;
 8012290:	e008      	b.n	80122a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012296:	61bb      	str	r3, [r7, #24]
        break;
 8012298:	e004      	b.n	80122a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801229a:	2300      	movs	r3, #0
 801229c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801229e:	2301      	movs	r3, #1
 80122a0:	77bb      	strb	r3, [r7, #30]
        break;
 80122a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d074      	beq.n	8012394 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	005a      	lsls	r2, r3, #1
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	085b      	lsrs	r3, r3, #1
 80122b4:	441a      	add	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80122be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	2b0f      	cmp	r3, #15
 80122c4:	d916      	bls.n	80122f4 <UART_SetConfig+0x404>
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122cc:	d212      	bcs.n	80122f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	f023 030f 	bic.w	r3, r3, #15
 80122d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	085b      	lsrs	r3, r3, #1
 80122dc:	b29b      	uxth	r3, r3
 80122de:	f003 0307 	and.w	r3, r3, #7
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	89fb      	ldrh	r3, [r7, #14]
 80122e6:	4313      	orrs	r3, r2
 80122e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	89fa      	ldrh	r2, [r7, #14]
 80122f0:	60da      	str	r2, [r3, #12]
 80122f2:	e04f      	b.n	8012394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80122f4:	2301      	movs	r3, #1
 80122f6:	77bb      	strb	r3, [r7, #30]
 80122f8:	e04c      	b.n	8012394 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80122fa:	7ffb      	ldrb	r3, [r7, #31]
 80122fc:	2b08      	cmp	r3, #8
 80122fe:	d828      	bhi.n	8012352 <UART_SetConfig+0x462>
 8012300:	a201      	add	r2, pc, #4	; (adr r2, 8012308 <UART_SetConfig+0x418>)
 8012302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012306:	bf00      	nop
 8012308:	0801232d 	.word	0x0801232d
 801230c:	08012335 	.word	0x08012335
 8012310:	0801233d 	.word	0x0801233d
 8012314:	08012353 	.word	0x08012353
 8012318:	08012343 	.word	0x08012343
 801231c:	08012353 	.word	0x08012353
 8012320:	08012353 	.word	0x08012353
 8012324:	08012353 	.word	0x08012353
 8012328:	0801234b 	.word	0x0801234b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801232c:	f7ff f8f6 	bl	801151c <HAL_RCC_GetPCLK1Freq>
 8012330:	61b8      	str	r0, [r7, #24]
        break;
 8012332:	e013      	b.n	801235c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012334:	f7ff f906 	bl	8011544 <HAL_RCC_GetPCLK2Freq>
 8012338:	61b8      	str	r0, [r7, #24]
        break;
 801233a:	e00f      	b.n	801235c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801233c:	4b1d      	ldr	r3, [pc, #116]	; (80123b4 <UART_SetConfig+0x4c4>)
 801233e:	61bb      	str	r3, [r7, #24]
        break;
 8012340:	e00c      	b.n	801235c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012342:	f7ff f819 	bl	8011378 <HAL_RCC_GetSysClockFreq>
 8012346:	61b8      	str	r0, [r7, #24]
        break;
 8012348:	e008      	b.n	801235c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801234a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801234e:	61bb      	str	r3, [r7, #24]
        break;
 8012350:	e004      	b.n	801235c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8012352:	2300      	movs	r3, #0
 8012354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012356:	2301      	movs	r3, #1
 8012358:	77bb      	strb	r3, [r7, #30]
        break;
 801235a:	bf00      	nop
    }

    if (pclk != 0U)
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d018      	beq.n	8012394 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	085a      	lsrs	r2, r3, #1
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	441a      	add	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	fbb2 f3f3 	udiv	r3, r2, r3
 8012374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	2b0f      	cmp	r3, #15
 801237a:	d909      	bls.n	8012390 <UART_SetConfig+0x4a0>
 801237c:	693b      	ldr	r3, [r7, #16]
 801237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012382:	d205      	bcs.n	8012390 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	b29a      	uxth	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	60da      	str	r2, [r3, #12]
 801238e:	e001      	b.n	8012394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012390:	2301      	movs	r3, #1
 8012392:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2200      	movs	r2, #0
 801239e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80123a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3720      	adds	r7, #32
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	40007c00 	.word	0x40007c00
 80123b0:	40023800 	.word	0x40023800
 80123b4:	00f42400 	.word	0x00f42400

080123b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b083      	sub	sp, #12
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c4:	f003 0301 	and.w	r3, r3, #1
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00a      	beq.n	80123e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	430a      	orrs	r2, r1
 80123e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e6:	f003 0302 	and.w	r3, r3, #2
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00a      	beq.n	8012404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	430a      	orrs	r2, r1
 8012402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	f003 0304 	and.w	r3, r3, #4
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00a      	beq.n	8012426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	430a      	orrs	r2, r1
 8012424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242a:	f003 0308 	and.w	r3, r3, #8
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00a      	beq.n	8012448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	430a      	orrs	r2, r1
 8012446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801244c:	f003 0310 	and.w	r3, r3, #16
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00a      	beq.n	801246a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	689b      	ldr	r3, [r3, #8]
 801245a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	430a      	orrs	r2, r1
 8012468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246e:	f003 0320 	and.w	r3, r3, #32
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00a      	beq.n	801248c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	430a      	orrs	r2, r1
 801248a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012494:	2b00      	cmp	r3, #0
 8012496:	d01a      	beq.n	80124ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	430a      	orrs	r2, r1
 80124ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80124b6:	d10a      	bne.n	80124ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	430a      	orrs	r2, r1
 80124cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	430a      	orrs	r2, r1
 80124ee:	605a      	str	r2, [r3, #4]
  }
}
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af02      	add	r7, sp, #8
 8012502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2200      	movs	r2, #0
 8012508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801250c:	f7fe f8c8 	bl	80106a0 <HAL_GetTick>
 8012510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f003 0308 	and.w	r3, r3, #8
 801251c:	2b08      	cmp	r3, #8
 801251e:	d10e      	bne.n	801253e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2200      	movs	r2, #0
 801252a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f81b 	bl	801256a <UART_WaitOnFlagUntilTimeout>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d001      	beq.n	801253e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801253a:	2303      	movs	r3, #3
 801253c:	e011      	b.n	8012562 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2220      	movs	r2, #32
 8012542:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2220      	movs	r2, #32
 8012548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2200      	movs	r2, #0
 801255c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}

0801256a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	b09c      	sub	sp, #112	; 0x70
 801256e:	af00      	add	r7, sp, #0
 8012570:	60f8      	str	r0, [r7, #12]
 8012572:	60b9      	str	r1, [r7, #8]
 8012574:	603b      	str	r3, [r7, #0]
 8012576:	4613      	mov	r3, r2
 8012578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801257a:	e0a7      	b.n	80126cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801257c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012582:	f000 80a3 	beq.w	80126cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012586:	f7fe f88b 	bl	80106a0 <HAL_GetTick>
 801258a:	4602      	mov	r2, r0
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012592:	429a      	cmp	r2, r3
 8012594:	d302      	bcc.n	801259c <UART_WaitOnFlagUntilTimeout+0x32>
 8012596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012598:	2b00      	cmp	r3, #0
 801259a:	d13f      	bne.n	801261c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125a4:	e853 3f00 	ldrex	r3, [r3]
 80125a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80125aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80125b0:	667b      	str	r3, [r7, #100]	; 0x64
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	461a      	mov	r2, r3
 80125b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80125ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80125c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80125c2:	e841 2300 	strex	r3, r2, [r1]
 80125c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80125c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d1e6      	bne.n	801259c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3308      	adds	r3, #8
 80125d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125d8:	e853 3f00 	ldrex	r3, [r3]
 80125dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e0:	f023 0301 	bic.w	r3, r3, #1
 80125e4:	663b      	str	r3, [r7, #96]	; 0x60
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	3308      	adds	r3, #8
 80125ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80125ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80125f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80125f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125f6:	e841 2300 	strex	r3, r2, [r1]
 80125fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80125fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d1e5      	bne.n	80125ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2220      	movs	r2, #32
 8012606:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2220      	movs	r2, #32
 801260c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8012618:	2303      	movs	r3, #3
 801261a:	e068      	b.n	80126ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	f003 0304 	and.w	r3, r3, #4
 8012626:	2b00      	cmp	r3, #0
 8012628:	d050      	beq.n	80126cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	69db      	ldr	r3, [r3, #28]
 8012630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012638:	d148      	bne.n	80126cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012642:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264c:	e853 3f00 	ldrex	r3, [r3]
 8012650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012658:	66fb      	str	r3, [r7, #108]	; 0x6c
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012662:	637b      	str	r3, [r7, #52]	; 0x34
 8012664:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801266a:	e841 2300 	strex	r3, r2, [r1]
 801266e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1e6      	bne.n	8012644 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	3308      	adds	r3, #8
 801267c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	e853 3f00 	ldrex	r3, [r3]
 8012684:	613b      	str	r3, [r7, #16]
   return(result);
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	f023 0301 	bic.w	r3, r3, #1
 801268c:	66bb      	str	r3, [r7, #104]	; 0x68
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	3308      	adds	r3, #8
 8012694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012696:	623a      	str	r2, [r7, #32]
 8012698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801269a:	69f9      	ldr	r1, [r7, #28]
 801269c:	6a3a      	ldr	r2, [r7, #32]
 801269e:	e841 2300 	strex	r3, r2, [r1]
 80126a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80126a4:	69bb      	ldr	r3, [r7, #24]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d1e5      	bne.n	8012676 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2220      	movs	r2, #32
 80126ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2220      	movs	r2, #32
 80126b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	2220      	movs	r2, #32
 80126bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80126c8:	2303      	movs	r3, #3
 80126ca:	e010      	b.n	80126ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	69da      	ldr	r2, [r3, #28]
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	4013      	ands	r3, r2
 80126d6:	68ba      	ldr	r2, [r7, #8]
 80126d8:	429a      	cmp	r2, r3
 80126da:	bf0c      	ite	eq
 80126dc:	2301      	moveq	r3, #1
 80126de:	2300      	movne	r3, #0
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	461a      	mov	r2, r3
 80126e4:	79fb      	ldrb	r3, [r7, #7]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	f43f af48 	beq.w	801257c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80126ec:	2300      	movs	r3, #0
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3770      	adds	r7, #112	; 0x70
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80126f6:	b480      	push	{r7}
 80126f8:	b08b      	sub	sp, #44	; 0x2c
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	60f8      	str	r0, [r7, #12]
 80126fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8012702:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	881b      	ldrh	r3, [r3, #0]
 8012714:	461a      	mov	r2, r3
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	885b      	ldrh	r3, [r3, #2]
 801271a:	fb02 f303 	mul.w	r3, r2, r3
 801271e:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012724:	e010      	b.n	8012748 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	1d1a      	adds	r2, r3, #4
 801272a:	627a      	str	r2, [r7, #36]	; 0x24
 801272c:	ed93 7a00 	vldr	s14, [r3]
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	1d1a      	adds	r2, r3, #4
 8012734:	623a      	str	r2, [r7, #32]
 8012736:	edd7 7a02 	vldr	s15, [r7, #8]
 801273a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801273e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	3b01      	subs	r3, #1
 8012746:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1eb      	bne.n	8012726 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801274e:	2300      	movs	r3, #0
 8012750:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012756:	4618      	mov	r0, r3
 8012758:	372c      	adds	r7, #44	; 0x2c
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr

08012762 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012762:	b480      	push	{r7}
 8012764:	b08b      	sub	sp, #44	; 0x2c
 8012766:	af00      	add	r7, sp, #0
 8012768:	6078      	str	r0, [r7, #4]
 801276a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	881b      	ldrh	r3, [r3, #0]
 801277c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	885b      	ldrh	r3, [r3, #2]
 8012782:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012784:	89fb      	ldrh	r3, [r7, #14]
 8012786:	61bb      	str	r3, [r7, #24]
 8012788:	2300      	movs	r3, #0
 801278a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	693a      	ldr	r2, [r7, #16]
 8012792:	4413      	add	r3, r2
 8012794:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012796:	89bb      	ldrh	r3, [r7, #12]
 8012798:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 801279a:	e00d      	b.n	80127b8 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	1d1a      	adds	r2, r3, #4
 80127a0:	627a      	str	r2, [r7, #36]	; 0x24
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	6a3b      	ldr	r3, [r7, #32]
 80127a6:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80127a8:	89fb      	ldrh	r3, [r7, #14]
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	6a3a      	ldr	r2, [r7, #32]
 80127ae:	4413      	add	r3, r2
 80127b0:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1ee      	bne.n	801279c <arm_mat_trans_f32+0x3a>
      }

      i++;
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	3301      	adds	r3, #1
 80127c2:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	3b01      	subs	r3, #1
 80127c8:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1dd      	bne.n	801278c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80127d0:	2300      	movs	r3, #0
 80127d2:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80127d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	372c      	adds	r7, #44	; 0x2c
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b087      	sub	sp, #28
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80127f0:	f04f 0300 	mov.w	r3, #0
 80127f4:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80127fa:	e00d      	b.n	8012818 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	1d1a      	adds	r2, r3, #4
 8012800:	60fa      	str	r2, [r7, #12]
 8012802:	edd3 7a00 	vldr	s15, [r3]
 8012806:	ed97 7a04 	vldr	s14, [r7, #16]
 801280a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801280e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	3b01      	subs	r3, #1
 8012816:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1ee      	bne.n	80127fc <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	ee07 3a90 	vmov	s15, r3
 8012824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012828:	edd7 6a04 	vldr	s13, [r7, #16]
 801282c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	edc3 7a00 	vstr	s15, [r3]
}
 8012836:	bf00      	nop
 8012838:	371c      	adds	r7, #28
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr

08012842 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8012842:	b580      	push	{r7, lr}
 8012844:	b08a      	sub	sp, #40	; 0x28
 8012846:	af00      	add	r7, sp, #0
 8012848:	60f8      	str	r0, [r7, #12]
 801284a:	60b9      	str	r1, [r7, #8]
 801284c:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 801284e:	f04f 0300 	mov.w	r3, #0
 8012852:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012858:	e011      	b.n	801287e <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	1d1a      	adds	r2, r3, #4
 801285e:	60fa      	str	r2, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8012864:	edd7 7a07 	vldr	s15, [r7, #28]
 8012868:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801286c:	ed97 7a08 	vldr	s14, [r7, #32]
 8012870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012874:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	3b01      	subs	r3, #1
 801287c:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 801287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1ea      	bne.n	801285a <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	ee07 3a90 	vmov	s15, r3
 801288a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801288e:	edd7 6a08 	vldr	s13, [r7, #32]
 8012892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012896:	edc7 7a06 	vstr	s15, [r7, #24]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 801289e:	edd7 7a06 	vldr	s15, [r7, #24]
 80128a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128aa:	db09      	blt.n	80128c0 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80128ac:	ed97 0a06 	vldr	s0, [r7, #24]
 80128b0:	f007 f9e8 	bl	8019c84 <sqrtf>
 80128b4:	eef0 7a40 	vmov.f32	s15, s0
 80128b8:	697b      	ldr	r3, [r7, #20]
 80128ba:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80128be:	e004      	b.n	80128ca <arm_rms_f32+0x88>
      *pOut = 0.0f;
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	f04f 0200 	mov.w	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80128c8:	bf00      	nop
}
 80128ca:	bf00      	nop
 80128cc:	3728      	adds	r7, #40	; 0x28
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}

080128d2 <arm_var_f32>:
#else
void arm_var_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80128d2:	b480      	push	{r7}
 80128d4:	b08b      	sub	sp, #44	; 0x2c
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	60f8      	str	r0, [r7, #12]
 80128da:	60b9      	str	r1, [r7, #8]
 80128dc:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80128de:	f04f 0300 	mov.w	r3, #0
 80128e2:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80128e4:	f04f 0300 	mov.w	r3, #0
 80128e8:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	61bb      	str	r3, [r7, #24]

  if (blockSize <= 1U)
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d804      	bhi.n	80128fe <arm_var_f32+0x2c>
  {
    *pResult = 0;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f04f 0200 	mov.w	r2, #0
 80128fa:	601a      	str	r2, [r3, #0]
    return;
 80128fc:	e04e      	b.n	801299c <arm_var_f32+0xca>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012902:	e00d      	b.n	8012920 <arm_var_f32+0x4e>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */

    sum += *pInput++;
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	1d1a      	adds	r2, r3, #4
 8012908:	61ba      	str	r2, [r7, #24]
 801290a:	edd3 7a00 	vldr	s15, [r3]
 801290e:	ed97 7a08 	vldr	s14, [r7, #32]
 8012912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012916:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 801291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291c:	3b01      	subs	r3, #1
 801291e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8012920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1ee      	bne.n	8012904 <arm_var_f32+0x32>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  fMean = sum / (float32_t) blockSize;
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	ee07 3a90 	vmov	s15, r3
 801292c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012930:	edd7 6a08 	vldr	s13, [r7, #32]
 8012934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012938:	edc7 7a05 	vstr	s15, [r7, #20]

  pInput = pSrc;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012944:	e017      	b.n	8012976 <arm_var_f32+0xa4>
  {
    fValue = *pInput++ - fMean;
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	1d1a      	adds	r2, r3, #4
 801294a:	61ba      	str	r2, [r7, #24]
 801294c:	ed93 7a00 	vldr	s14, [r3]
 8012950:	edd7 7a05 	vldr	s15, [r7, #20]
 8012954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012958:	edc7 7a04 	vstr	s15, [r7, #16]
    fSum += fValue * fValue;
 801295c:	edd7 7a04 	vldr	s15, [r7, #16]
 8012960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012964:	ed97 7a07 	vldr	s14, [r7, #28]
 8012968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801296c:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement loop counter */
    blkCnt--;
 8012970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012972:	3b01      	subs	r3, #1
 8012974:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	2b00      	cmp	r3, #0
 801297a:	d1e4      	bne.n	8012946 <arm_var_f32+0x74>
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	ee07 3a90 	vmov	s15, r3
 8012982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801298a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801298e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	edc3 7a00 	vstr	s15, [r3]
}
 801299c:	372c      	adds	r7, #44	; 0x2c
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80129a6:	b480      	push	{r7}
 80129a8:	b089      	sub	sp, #36	; 0x24
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	60f8      	str	r0, [r7, #12]
 80129ae:	460b      	mov	r3, r1
 80129b0:	607a      	str	r2, [r7, #4]
 80129b2:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80129b4:	2300      	movs	r3, #0
 80129b6:	61fb      	str	r3, [r7, #28]
 80129b8:	e043      	b.n	8012a42 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	4413      	add	r3, r2
 80129c2:	881b      	ldrh	r3, [r3, #0]
 80129c4:	089b      	lsrs	r3, r3, #2
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	3301      	adds	r3, #1
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	4413      	add	r3, r2
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	089b      	lsrs	r3, r3, #2
 80129d8:	b29b      	uxth	r3, r3
 80129da:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	009b      	lsls	r3, r3, #2
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	4413      	add	r3, r2
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	441a      	add	r2, r3
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	009b      	lsls	r3, r3, #2
 80129f4:	68f9      	ldr	r1, [r7, #12]
 80129f6:	440b      	add	r3, r1
 80129f8:	6812      	ldr	r2, [r2, #0]
 80129fa:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	68fa      	ldr	r2, [r7, #12]
 8012a02:	4413      	add	r3, r2
 8012a04:	693a      	ldr	r2, [r7, #16]
 8012a06:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	4413      	add	r3, r2
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	3301      	adds	r3, #1
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	441a      	add	r2, r3
 8012a20:	69bb      	ldr	r3, [r7, #24]
 8012a22:	3301      	adds	r3, #1
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	68f9      	ldr	r1, [r7, #12]
 8012a28:	440b      	add	r3, r1
 8012a2a:	6812      	ldr	r2, [r2, #0]
 8012a2c:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	3301      	adds	r3, #1
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	4413      	add	r3, r2
 8012a38:	693a      	ldr	r2, [r7, #16]
 8012a3a:	601a      	str	r2, [r3, #0]

    i += 2;
 8012a3c:	69fb      	ldr	r3, [r7, #28]
 8012a3e:	3302      	adds	r3, #2
 8012a40:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8012a42:	897b      	ldrh	r3, [r7, #10]
 8012a44:	69fa      	ldr	r2, [r7, #28]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d3b7      	bcc.n	80129ba <arm_bitreversal_32+0x14>
  }
}
 8012a4a:	bf00      	nop
 8012a4c:	bf00      	nop
 8012a4e:	3724      	adds	r7, #36	; 0x24
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b0a0      	sub	sp, #128	; 0x80
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8012a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	4413      	add	r3, r2
 8012a70:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8012a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a7e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8012a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a82:	085b      	lsrs	r3, r3, #1
 8012a84:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8012a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a88:	009b      	lsls	r3, r3, #2
 8012a8a:	683a      	ldr	r2, [r7, #0]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8012a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012a96:	4413      	add	r3, r2
 8012a98:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8012a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a9c:	089b      	lsrs	r3, r3, #2
 8012a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012aa0:	e1b6      	b.n	8012e10 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8012aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8012ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8012ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ac8:	689b      	ldr	r3, [r3, #8]
 8012aca:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8012acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8012ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8012ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8012ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8012ae4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8012aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8012af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8012af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8012afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8012b02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012b06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	1d1a      	adds	r2, r3, #4
 8012b0e:	603a      	str	r2, [r7, #0]
 8012b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b14:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8012b18:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012b1c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	1d1a      	adds	r2, r3, #4
 8012b24:	603a      	str	r2, [r7, #0]
 8012b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b2a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8012b2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012b32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	1d1a      	adds	r2, r3, #4
 8012b3a:	603a      	str	r2, [r7, #0]
 8012b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b40:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8012b44:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012b48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	1d1a      	adds	r2, r3, #4
 8012b50:	603a      	str	r2, [r7, #0]
 8012b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b56:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8012b5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8012b5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8012b6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8012b6e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8012b7a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8012b7e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b86:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8012b8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8012b8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012b96:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8012b9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8012b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012ba4:	1d1a      	adds	r2, r3, #4
 8012ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bac:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8012bb0:	ed97 7a07 	vldr	s14, [r7, #28]
 8012bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8012bb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bba:	1d1a      	adds	r2, r3, #4
 8012bbc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bc2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8012bc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8012bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8012bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012bd0:	1d1a      	adds	r2, r3, #4
 8012bd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bd8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8012bdc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012be0:	edd7 7a05 	vldr	s15, [r7, #20]
 8012be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012be6:	1d1a      	adds	r2, r3, #4
 8012be8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8012bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012bee:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8012bf2:	ed97 7a02 	vldr	s14, [r7, #8]
 8012bf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8012bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bfe:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8012c02:	ed97 7a03 	vldr	s14, [r7, #12]
 8012c06:	edd7 7a07 	vldr	s15, [r7, #28]
 8012c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c0e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8012c12:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c16:	edd7 7a08 	vldr	s15, [r7, #32]
 8012c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c1e:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8012c22:	ed97 7a05 	vldr	s14, [r7, #20]
 8012c26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8012c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c2e:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8012c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c34:	1d1a      	adds	r2, r3, #4
 8012c36:	673a      	str	r2, [r7, #112]	; 0x70
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8012c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c3e:	1d1a      	adds	r2, r3, #4
 8012c40:	673a      	str	r2, [r7, #112]	; 0x70
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8012c46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012c4a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c52:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8012c56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012c5a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c62:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8012c66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8012c6a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c72:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8012c76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012c7a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c82:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8012c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c88:	1d1a      	adds	r2, r3, #4
 8012c8a:	677a      	str	r2, [r7, #116]	; 0x74
 8012c8c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012c90:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c98:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8012c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c9e:	1d1a      	adds	r2, r3, #4
 8012ca0:	677a      	str	r2, [r7, #116]	; 0x74
 8012ca2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012ca6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012cae:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8012cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8012cb6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cbe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8012cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8012cc6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cce:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8012cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8012cd6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cde:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8012ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8012ce6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cee:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8012cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012cf4:	1d1a      	adds	r2, r3, #4
 8012cf6:	67ba      	str	r2, [r7, #120]	; 0x78
 8012cf8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012cfc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d04:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8012d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d0a:	1d1a      	adds	r2, r3, #4
 8012d0c:	67ba      	str	r2, [r7, #120]	; 0x78
 8012d0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012d12:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d1a:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8012d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d20:	1d1a      	adds	r2, r3, #4
 8012d22:	673a      	str	r2, [r7, #112]	; 0x70
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8012d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012d2a:	1d1a      	adds	r2, r3, #4
 8012d2c:	673a      	str	r2, [r7, #112]	; 0x70
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8012d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012d36:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d3e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8012d42:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012d46:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d4e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8012d52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8012d56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d5e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8012d62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012d66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d6e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8012d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d74:	1d1a      	adds	r2, r3, #4
 8012d76:	677a      	str	r2, [r7, #116]	; 0x74
 8012d78:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012d7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d84:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8012d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d8a:	1d1a      	adds	r2, r3, #4
 8012d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8012d8e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012d92:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d9a:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8012d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8012da2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012daa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8012dae:	edd7 7a05 	vldr	s15, [r7, #20]
 8012db2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012dba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8012dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8012dc2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012dca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8012dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8012dd2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012dda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8012dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012de0:	1d1a      	adds	r2, r3, #4
 8012de2:	67ba      	str	r2, [r7, #120]	; 0x78
 8012de4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012de8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8012dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012df0:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8012df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012df6:	1d1a      	adds	r2, r3, #4
 8012df8:	67ba      	str	r2, [r7, #120]	; 0x78
 8012dfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012dfe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8012e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e06:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8012e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f47f ae45 	bne.w	8012aa2 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8012e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e1a:	b299      	uxth	r1, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	685a      	ldr	r2, [r3, #4]
 8012e20:	2302      	movs	r3, #2
 8012e22:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012e24:	f000 fef6 	bl	8013c14 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8012e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012e2a:	b299      	uxth	r1, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	685a      	ldr	r2, [r3, #4]
 8012e30:	2302      	movs	r3, #2
 8012e32:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012e34:	f000 feee 	bl	8013c14 <arm_radix8_butterfly_f32>
}
 8012e38:	bf00      	nop
 8012e3a:	3780      	adds	r7, #128	; 0x80
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b0ac      	sub	sp, #176	; 0xb0
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	881b      	ldrh	r3, [r3, #0]
 8012e4e:	085b      	lsrs	r3, r3, #1
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8012e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	4413      	add	r3, r2
 8012e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8012e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e68:	009b      	lsls	r3, r3, #2
 8012e6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012e6e:	4413      	add	r3, r2
 8012e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8012e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8012e7e:	4413      	add	r3, r2
 8012e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8012e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e8c:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8012e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e92:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8012e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e98:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8012e9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e9e:	3b04      	subs	r3, #4
 8012ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8012ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ea8:	3b04      	subs	r3, #4
 8012eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8012eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012eb2:	3b04      	subs	r3, #4
 8012eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8012eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012ec2:	4413      	add	r3, r2
 8012ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012ed0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8012ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ee4:	085b      	lsrs	r3, r3, #1
 8012ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8012eea:	2302      	movs	r3, #2
 8012eec:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8012eee:	2304      	movs	r3, #4
 8012ef0:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8012ef2:	2306      	movs	r3, #6
 8012ef4:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	ed93 7a00 	vldr	s14, [r3]
 8012efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f00:	edd3 7a00 	vldr	s15, [r3]
 8012f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f08:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	ed93 7a00 	vldr	s14, [r3]
 8012f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f16:	edd3 7a00 	vldr	s15, [r3]
 8012f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f1e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	3304      	adds	r3, #4
 8012f26:	ed93 7a00 	vldr	s14, [r3]
 8012f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f2e:	3304      	adds	r3, #4
 8012f30:	edd3 7a00 	vldr	s15, [r3]
 8012f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f38:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	3304      	adds	r3, #4
 8012f40:	ed93 7a00 	vldr	s14, [r3]
 8012f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f48:	3304      	adds	r3, #4
 8012f4a:	edd3 7a00 	vldr	s15, [r3]
 8012f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f52:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8012f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	ed93 7a00 	vldr	s14, [r3]
 8012f60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8012f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	edd3 7a00 	vldr	s15, [r3]
 8012f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8012f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f7e:	edd3 7a00 	vldr	s15, [r3]
 8012f82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8012f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012f8e:	edd3 7a00 	vldr	s15, [r3]
 8012f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8012f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f9e:	edd3 7a00 	vldr	s15, [r3]
 8012fa2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8012fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012faa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fae:	edd3 7a00 	vldr	s15, [r3]
 8012fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fb6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8012fba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fbe:	3304      	adds	r3, #4
 8012fc0:	edd3 7a00 	vldr	s15, [r3]
 8012fc4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8012fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	edd3 7a00 	vldr	s15, [r3]
 8012fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012fda:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8012fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	edd3 7a00 	vldr	s15, [r3]
 8012fe8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8012fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ff4:	3304      	adds	r3, #4
 8012ff6:	edd3 7a00 	vldr	s15, [r3]
 8012ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ffe:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8013002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013006:	ed93 7a00 	vldr	s14, [r3]
 801300a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801300e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013016:	edd3 7a00 	vldr	s15, [r3]
 801301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801301e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8013022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013026:	ed93 7a00 	vldr	s14, [r3]
 801302a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801302e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013036:	edd3 7a00 	vldr	s15, [r3]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	1d1a      	adds	r2, r3, #4
 801303e:	603a      	str	r2, [r7, #0]
 8013040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013044:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801304c:	3304      	adds	r3, #4
 801304e:	ed93 7a00 	vldr	s14, [r3]
 8013052:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013056:	ee37 7a27 	vadd.f32	s14, s14, s15
 801305a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801305e:	3304      	adds	r3, #4
 8013060:	edd3 7a00 	vldr	s15, [r3]
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	1d1a      	adds	r2, r3, #4
 8013068:	603a      	str	r2, [r7, #0]
 801306a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801306e:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8013072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013076:	1d1a      	adds	r2, r3, #4
 8013078:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801307c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801307e:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8013080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013084:	1d1a      	adds	r2, r3, #4
 8013086:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801308a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801308c:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 801308e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013092:	1d1a      	adds	r2, r3, #4
 8013094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013098:	69fa      	ldr	r2, [r7, #28]
 801309a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 801309c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80130a0:	1d1a      	adds	r2, r3, #4
 80130a2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80130a6:	6a3a      	ldr	r2, [r7, #32]
 80130a8:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80130aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80130ae:	1d1a      	adds	r2, r3, #4
 80130b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80130b4:	68fa      	ldr	r2, [r7, #12]
 80130b6:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80130b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80130bc:	1d1a      	adds	r2, r3, #4
 80130be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80130c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80130ce:	4413      	add	r3, r2
 80130d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80130d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80130dc:	4413      	add	r3, r2
 80130de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80130e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80130ea:	4413      	add	r3, r2
 80130ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80130f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80130f4:	3b02      	subs	r3, #2
 80130f6:	085b      	lsrs	r3, r3, #1
 80130f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80130fc:	e31c      	b.n	8013738 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	ed93 7a00 	vldr	s14, [r3]
 8013104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013108:	edd3 7a00 	vldr	s15, [r3]
 801310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013110:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	ed93 7a00 	vldr	s14, [r3]
 801311a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801311e:	edd3 7a00 	vldr	s15, [r3]
 8013122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013126:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	3304      	adds	r3, #4
 801312e:	ed93 7a00 	vldr	s14, [r3]
 8013132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013136:	3304      	adds	r3, #4
 8013138:	edd3 7a00 	vldr	s15, [r3]
 801313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013140:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	3304      	adds	r3, #4
 8013148:	ed93 7a00 	vldr	s14, [r3]
 801314c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013150:	3304      	adds	r3, #4
 8013152:	edd3 7a00 	vldr	s15, [r3]
 8013156:	ee77 7a67 	vsub.f32	s15, s14, s15
 801315a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 801315e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013162:	3304      	adds	r3, #4
 8013164:	ed93 7a00 	vldr	s14, [r3]
 8013168:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801316c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013174:	3304      	adds	r3, #4
 8013176:	edd3 7a00 	vldr	s15, [r3]
 801317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801317e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8013182:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013186:	edd3 7a00 	vldr	s15, [r3]
 801318a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801318e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013196:	edd3 7a00 	vldr	s15, [r3]
 801319a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801319e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80131a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131a6:	edd3 7a00 	vldr	s15, [r3]
 80131aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80131ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80131b6:	edd3 7a00 	vldr	s15, [r3]
 80131ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131be:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80131c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131c6:	3304      	adds	r3, #4
 80131c8:	edd3 7a00 	vldr	s15, [r3]
 80131cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80131d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80131d8:	3304      	adds	r3, #4
 80131da:	edd3 7a00 	vldr	s15, [r3]
 80131de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131e2:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80131e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80131ea:	3304      	adds	r3, #4
 80131ec:	edd3 7a00 	vldr	s15, [r3]
 80131f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80131f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80131fc:	3304      	adds	r3, #4
 80131fe:	edd3 7a00 	vldr	s15, [r3]
 8013202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013206:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 801320a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801320e:	ed93 7a00 	vldr	s14, [r3]
 8013212:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013216:	ee37 7a27 	vadd.f32	s14, s14, s15
 801321a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801321e:	edd3 7a00 	vldr	s15, [r3]
 8013222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013226:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 801322a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801322e:	ed93 7a00 	vldr	s14, [r3]
 8013232:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013236:	ee37 7a27 	vadd.f32	s14, s14, s15
 801323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801323e:	edd3 7a00 	vldr	s15, [r3]
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	1d1a      	adds	r2, r3, #4
 8013246:	603a      	str	r2, [r7, #0]
 8013248:	ee77 7a27 	vadd.f32	s15, s14, s15
 801324c:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013254:	3304      	adds	r3, #4
 8013256:	ed93 7a00 	vldr	s14, [r3]
 801325a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801325e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013262:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013266:	3304      	adds	r3, #4
 8013268:	edd3 7a00 	vldr	s15, [r3]
 801326c:	683b      	ldr	r3, [r7, #0]
 801326e:	1d1a      	adds	r2, r3, #4
 8013270:	603a      	str	r2, [r7, #0]
 8013272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013276:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 801327a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801327e:	3b04      	subs	r3, #4
 8013280:	ed93 7a00 	vldr	s14, [r3]
 8013284:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013288:	3b04      	subs	r3, #4
 801328a:	edd3 7a00 	vldr	s15, [r3]
 801328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013292:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8013296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801329a:	3b04      	subs	r3, #4
 801329c:	ed93 7a00 	vldr	s14, [r3]
 80132a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80132a4:	3b04      	subs	r3, #4
 80132a6:	edd3 7a00 	vldr	s15, [r3]
 80132aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132ae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80132b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132b6:	ed93 7a00 	vldr	s14, [r3]
 80132ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80132be:	edd3 7a00 	vldr	s15, [r3]
 80132c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80132ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80132ce:	ed93 7a00 	vldr	s14, [r3]
 80132d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80132d6:	edd3 7a00 	vldr	s15, [r3]
 80132da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132de:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80132e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80132e6:	ed93 7a00 	vldr	s14, [r3]
 80132ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80132ee:	edd3 7a00 	vldr	s15, [r3]
 80132f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80132f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80132fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80132fe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8013302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013306:	ed93 7a00 	vldr	s14, [r3]
 801330a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801330e:	edd3 7a00 	vldr	s15, [r3]
 8013312:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801331a:	3b04      	subs	r3, #4
 801331c:	edd3 7a00 	vldr	s15, [r3]
 8013320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013324:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013328:	3b04      	subs	r3, #4
 801332a:	edd3 7a00 	vldr	s15, [r3]
 801332e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013332:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8013336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801333a:	3b04      	subs	r3, #4
 801333c:	edd3 7a00 	vldr	s15, [r3]
 8013340:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801334c:	3b04      	subs	r3, #4
 801334e:	edd3 7a00 	vldr	s15, [r3]
 8013352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013356:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 801335a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801335e:	edd3 7a00 	vldr	s15, [r3]
 8013362:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013366:	ee37 7a67 	vsub.f32	s14, s14, s15
 801336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801336e:	edd3 7a00 	vldr	s15, [r3]
 8013372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013376:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 801337a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801337e:	ed93 7a00 	vldr	s14, [r3]
 8013382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013386:	edd3 7a00 	vldr	s15, [r3]
 801338a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801338e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013396:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 801339a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801339e:	3b04      	subs	r3, #4
 80133a0:	ed93 7a00 	vldr	s14, [r3]
 80133a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80133a8:	3b04      	subs	r3, #4
 80133aa:	edd3 7a00 	vldr	s15, [r3]
 80133ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80133b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133ba:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80133be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80133c2:	ed93 7a00 	vldr	s14, [r3]
 80133c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80133ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80133d2:	edd3 7a00 	vldr	s15, [r3]
 80133d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80133da:	1f1a      	subs	r2, r3, #4
 80133dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80133e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133e4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80133e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80133ec:	3b04      	subs	r3, #4
 80133ee:	ed93 7a00 	vldr	s14, [r3]
 80133f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80133f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80133fe:	3b04      	subs	r3, #4
 8013400:	edd3 7a00 	vldr	s15, [r3]
 8013404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013408:	1f1a      	subs	r2, r3, #4
 801340a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013412:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8013416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801341a:	1d1a      	adds	r2, r3, #4
 801341c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8013424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013428:	1d1a      	adds	r2, r3, #4
 801342a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8013432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013436:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801343e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8013442:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013446:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801344e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8013452:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013456:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801345e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8013462:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013466:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801346a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801346e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8013472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013476:	1d1a      	adds	r2, r3, #4
 8013478:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801347c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013480:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013488:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 801348c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013490:	1d1a      	adds	r2, r3, #4
 8013492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013496:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801349a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801349e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134a2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80134a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80134aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80134ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134b2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80134b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80134ba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80134be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80134c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80134ca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80134ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134d2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80134d6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80134da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80134de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80134e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80134e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80134ea:	1f1a      	subs	r2, r3, #4
 80134ec:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80134f0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80134f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80134f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134fc:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8013500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013504:	1f1a      	subs	r2, r3, #4
 8013506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801350a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801350e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013516:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 801351a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8013522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013526:	3304      	adds	r3, #4
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 801352c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013534:	4413      	add	r3, r2
 8013536:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 801353a:	edd7 7a07 	vldr	s15, [r7, #28]
 801353e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013546:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 801354a:	edd7 7a08 	vldr	s15, [r7, #32]
 801354e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013556:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 801355a:	edd7 7a08 	vldr	s15, [r7, #32]
 801355e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013566:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 801356a:	edd7 7a07 	vldr	s15, [r7, #28]
 801356e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013576:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 801357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801357e:	1d1a      	adds	r2, r3, #4
 8013580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013584:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013588:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801358c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013590:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8013594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013598:	1d1a      	adds	r2, r3, #4
 801359a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801359e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80135a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80135a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135aa:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80135ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80135b2:	eef1 7a67 	vneg.f32	s15, s15
 80135b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80135ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135be:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80135c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80135c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80135ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135ce:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 80135d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80135d6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80135da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 80135e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80135e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80135ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 80135f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80135f6:	1f1a      	subs	r2, r3, #4
 80135f8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80135fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013600:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013608:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 801360c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013610:	1f1a      	subs	r2, r3, #4
 8013612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013616:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801361a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801361e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013622:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8013626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 801362e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013632:	3304      	adds	r3, #4
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8013638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013640:	4413      	add	r3, r2
 8013642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8013646:	edd7 7a03 	vldr	s15, [r7, #12]
 801364a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013652:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8013656:	edd7 7a04 	vldr	s15, [r7, #16]
 801365a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013662:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8013666:	edd7 7a04 	vldr	s15, [r7, #16]
 801366a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013672:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8013676:	edd7 7a03 	vldr	s15, [r7, #12]
 801367a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013682:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8013686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801368a:	1d1a      	adds	r2, r3, #4
 801368c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013690:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013694:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801369c:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80136a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136a4:	1d1a      	adds	r2, r3, #4
 80136a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80136aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80136ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80136b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136b6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80136ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80136be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80136c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 80136ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80136ce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80136d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 80136da:	edd7 7a05 	vldr	s15, [r7, #20]
 80136de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80136e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 80136ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80136ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80136f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 80136fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80136fe:	1f1a      	subs	r2, r3, #4
 8013700:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013704:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013708:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801370c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013710:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8013714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013718:	1f1a      	subs	r2, r3, #4
 801371a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801371e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013722:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013726:	ee77 7a27 	vadd.f32	s15, s14, s15
 801372a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 801372e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013732:	3b01      	subs	r3, #1
 8013734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801373c:	2b00      	cmp	r3, #0
 801373e:	f47f acde 	bne.w	80130fe <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	ed93 7a00 	vldr	s14, [r3]
 8013748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801374c:	edd3 7a00 	vldr	s15, [r3]
 8013750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013754:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	ed93 7a00 	vldr	s14, [r3]
 801375e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013762:	edd3 7a00 	vldr	s15, [r3]
 8013766:	ee77 7a67 	vsub.f32	s15, s14, s15
 801376a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	3304      	adds	r3, #4
 8013772:	ed93 7a00 	vldr	s14, [r3]
 8013776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801377a:	3304      	adds	r3, #4
 801377c:	edd3 7a00 	vldr	s15, [r3]
 8013780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013784:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	3304      	adds	r3, #4
 801378c:	ed93 7a00 	vldr	s14, [r3]
 8013790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013794:	3304      	adds	r3, #4
 8013796:	edd3 7a00 	vldr	s15, [r3]
 801379a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801379e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80137a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137a6:	3304      	adds	r3, #4
 80137a8:	ed93 7a00 	vldr	s14, [r3]
 80137ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80137b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80137b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137b8:	3304      	adds	r3, #4
 80137ba:	edd3 7a00 	vldr	s15, [r3]
 80137be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80137c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137ca:	edd3 7a00 	vldr	s15, [r3]
 80137ce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80137d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137da:	edd3 7a00 	vldr	s15, [r3]
 80137de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80137e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137ea:	edd3 7a00 	vldr	s15, [r3]
 80137ee:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80137f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137fa:	edd3 7a00 	vldr	s15, [r3]
 80137fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013802:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8013806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801380a:	3304      	adds	r3, #4
 801380c:	edd3 7a00 	vldr	s15, [r3]
 8013810:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013814:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801381c:	3304      	adds	r3, #4
 801381e:	edd3 7a00 	vldr	s15, [r3]
 8013822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013826:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 801382a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801382e:	3304      	adds	r3, #4
 8013830:	edd3 7a00 	vldr	s15, [r3]
 8013834:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013838:	ee37 7a67 	vsub.f32	s14, s14, s15
 801383c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013840:	3304      	adds	r3, #4
 8013842:	edd3 7a00 	vldr	s15, [r3]
 8013846:	ee77 7a27 	vadd.f32	s15, s14, s15
 801384a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 801384e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013852:	ed93 7a00 	vldr	s14, [r3]
 8013856:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 801385a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801385e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013862:	edd3 7a00 	vldr	s15, [r3]
 8013866:	ee77 7a67 	vsub.f32	s15, s14, s15
 801386a:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801386e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013872:	ed93 7a00 	vldr	s14, [r3]
 8013876:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801387a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801387e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013882:	edd3 7a00 	vldr	s15, [r3]
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	1d1a      	adds	r2, r3, #4
 801388a:	603a      	str	r2, [r7, #0]
 801388c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013890:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013898:	3304      	adds	r3, #4
 801389a:	ed93 7a00 	vldr	s14, [r3]
 801389e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80138a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80138a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138aa:	3304      	adds	r3, #4
 80138ac:	edd3 7a00 	vldr	s15, [r3]
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	1d1a      	adds	r2, r3, #4
 80138b4:	603a      	str	r2, [r7, #0]
 80138b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138ba:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80138be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80138c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80138ca:	3304      	adds	r3, #4
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80138d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80138d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80138d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80138e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80138e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80138e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 80138f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80138f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80138f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8013900:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013904:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013908:	ee67 7a27 	vmul.f32	s15, s14, s15
 801390c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8013910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013914:	1d1a      	adds	r2, r3, #4
 8013916:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801391a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801391e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013926:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 801392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801392e:	1d1a      	adds	r2, r3, #4
 8013930:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013934:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013938:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801393c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013940:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8013944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 801394c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013950:	3304      	adds	r3, #4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8013956:	edd7 7a07 	vldr	s15, [r7, #28]
 801395a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013962:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8013966:	edd7 7a08 	vldr	s15, [r7, #32]
 801396a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013972:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8013976:	edd7 7a08 	vldr	s15, [r7, #32]
 801397a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801397e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013982:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8013986:	edd7 7a07 	vldr	s15, [r7, #28]
 801398a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013992:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8013996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801399a:	1d1a      	adds	r2, r3, #4
 801399c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139a0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80139a4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80139a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139ac:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80139b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139b4:	1d1a      	adds	r2, r3, #4
 80139b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139ba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80139be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80139c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139c6:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80139ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80139d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139d6:	3304      	adds	r3, #4
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80139dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80139e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80139e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80139ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80139f0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80139f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 80139fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a08:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8013a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8013a10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8013a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a20:	1d1a      	adds	r2, r3, #4
 8013a22:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013a26:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013a2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a32:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8013a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a3a:	1d1a      	adds	r2, r3, #4
 8013a3c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013a40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013a44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a4c:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8013a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a54:	b299      	uxth	r1, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	685a      	ldr	r2, [r3, #4]
 8013a5a:	2304      	movs	r3, #4
 8013a5c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013a5e:	f000 f8d9 	bl	8013c14 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8013a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a66:	b299      	uxth	r1, r3
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	685a      	ldr	r2, [r3, #4]
 8013a6c:	2304      	movs	r3, #4
 8013a6e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8013a70:	f000 f8d0 	bl	8013c14 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8013a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a78:	b299      	uxth	r1, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	685a      	ldr	r2, [r3, #4]
 8013a7e:	2304      	movs	r3, #4
 8013a80:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013a82:	f000 f8c7 	bl	8013c14 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8013a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a8a:	b299      	uxth	r1, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	685a      	ldr	r2, [r3, #4]
 8013a90:	2304      	movs	r3, #4
 8013a92:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8013a94:	f000 f8be 	bl	8013c14 <arm_radix8_butterfly_f32>
}
 8013a98:	bf00      	nop
 8013a9a:	37b0      	adds	r7, #176	; 0xb0
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}

08013aa0 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b088      	sub	sp, #32
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	60f8      	str	r0, [r7, #12]
 8013aa8:	60b9      	str	r1, [r7, #8]
 8013aaa:	4611      	mov	r1, r2
 8013aac:	461a      	mov	r2, r3
 8013aae:	460b      	mov	r3, r1
 8013ab0:	71fb      	strb	r3, [r7, #7]
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8013abc:	79fb      	ldrb	r3, [r7, #7]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d117      	bne.n	8013af2 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	3304      	adds	r3, #4
 8013ac6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	61fb      	str	r3, [r7, #28]
 8013acc:	e00d      	b.n	8013aea <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8013ace:	69bb      	ldr	r3, [r7, #24]
 8013ad0:	edd3 7a00 	vldr	s15, [r3]
 8013ad4:	eef1 7a67 	vneg.f32	s15, s15
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	3308      	adds	r3, #8
 8013ae2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	61fb      	str	r3, [r7, #28]
 8013aea:	69fa      	ldr	r2, [r7, #28]
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d3ed      	bcc.n	8013ace <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013af8:	d040      	beq.n	8013b7c <arm_cfft_f32+0xdc>
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b00:	d845      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b08:	d033      	beq.n	8013b72 <arm_cfft_f32+0xd2>
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b10:	d83d      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b18:	d026      	beq.n	8013b68 <arm_cfft_f32+0xc8>
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b20:	d835      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b28:	d028      	beq.n	8013b7c <arm_cfft_f32+0xdc>
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b30:	d82d      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b38:	d01b      	beq.n	8013b72 <arm_cfft_f32+0xd2>
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b40:	d825      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b80      	cmp	r3, #128	; 0x80
 8013b46:	d00f      	beq.n	8013b68 <arm_cfft_f32+0xc8>
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	2b80      	cmp	r3, #128	; 0x80
 8013b4c:	d81f      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	2b40      	cmp	r3, #64	; 0x40
 8013b52:	d013      	beq.n	8013b7c <arm_cfft_f32+0xdc>
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	2b40      	cmp	r3, #64	; 0x40
 8013b58:	d819      	bhi.n	8013b8e <arm_cfft_f32+0xee>
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	2b10      	cmp	r3, #16
 8013b5e:	d003      	beq.n	8013b68 <arm_cfft_f32+0xc8>
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	2b20      	cmp	r3, #32
 8013b64:	d005      	beq.n	8013b72 <arm_cfft_f32+0xd2>
 8013b66:	e012      	b.n	8013b8e <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8013b68:	68b9      	ldr	r1, [r7, #8]
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f7fe ff74 	bl	8012a58 <arm_cfft_radix8by2_f32>
    break;
 8013b70:	e00d      	b.n	8013b8e <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8013b72:	68b9      	ldr	r1, [r7, #8]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7ff f963 	bl	8012e40 <arm_cfft_radix8by4_f32>
    break;
 8013b7a:	e008      	b.n	8013b8e <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	b299      	uxth	r1, r3
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	685a      	ldr	r2, [r3, #4]
 8013b84:	2301      	movs	r3, #1
 8013b86:	68b8      	ldr	r0, [r7, #8]
 8013b88:	f000 f844 	bl	8013c14 <arm_radix8_butterfly_f32>
    break;
 8013b8c:	bf00      	nop
  }

  if ( bitReverseFlag )
 8013b8e:	79bb      	ldrb	r3, [r7, #6]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d007      	beq.n	8013ba4 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	8999      	ldrh	r1, [r3, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	68b8      	ldr	r0, [r7, #8]
 8013ba0:	f7fe ff01 	bl	80129a6 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8013ba4:	79fb      	ldrb	r3, [r7, #7]
 8013ba6:	2b01      	cmp	r3, #1
 8013ba8:	d130      	bne.n	8013c0c <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	ee07 3a90 	vmov	s15, r3
 8013bb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013bbc:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	61fb      	str	r3, [r7, #28]
 8013bc8:	e01c      	b.n	8013c04 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8013bca:	69bb      	ldr	r3, [r7, #24]
 8013bcc:	1d1a      	adds	r2, r3, #4
 8013bce:	61ba      	str	r2, [r7, #24]
 8013bd0:	ed93 7a00 	vldr	s14, [r3]
 8013bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8013bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bdc:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	edd3 7a00 	vldr	s15, [r3]
 8013be6:	eeb1 7a67 	vneg.f32	s14, s15
 8013bea:	edd7 7a04 	vldr	s15, [r7, #16]
 8013bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8013bf8:	69bb      	ldr	r3, [r7, #24]
 8013bfa:	3304      	adds	r3, #4
 8013bfc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	3301      	adds	r3, #1
 8013c02:	61fb      	str	r3, [r7, #28]
 8013c04:	69fa      	ldr	r2, [r7, #28]
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d3de      	bcc.n	8013bca <arm_cfft_f32+0x12a>
    }
  }
}
 8013c0c:	bf00      	nop
 8013c0e:	3720      	adds	r7, #32
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b0bd      	sub	sp, #244	; 0xf4
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	607a      	str	r2, [r7, #4]
 8013c1e:	461a      	mov	r2, r3
 8013c20:	460b      	mov	r3, r1
 8013c22:	817b      	strh	r3, [r7, #10]
 8013c24:	4613      	mov	r3, r2
 8013c26:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8013c28:	4b09      	ldr	r3, [pc, #36]	; (8013c50 <arm_radix8_butterfly_f32+0x3c>)
 8013c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8013c2e:	897b      	ldrh	r3, [r7, #10]
 8013c30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8013c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8013c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c40:	08db      	lsrs	r3, r3, #3
 8013c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013c4c:	e002      	b.n	8013c54 <arm_radix8_butterfly_f32+0x40>
 8013c4e:	bf00      	nop
 8013c50:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8013c54:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8013c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c5c:	4413      	add	r3, r2
 8013c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8013c62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8013c70:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c78:	4413      	add	r3, r2
 8013c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8013c7e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8013c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c86:	4413      	add	r3, r2
 8013c88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8013c8c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c94:	4413      	add	r3, r2
 8013c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8013c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013ca2:	4413      	add	r3, r2
 8013ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 8013ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8013cb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	68fa      	ldr	r2, [r7, #12]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	ed93 7a00 	vldr	s14, [r3]
 8013cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013cc8:	00db      	lsls	r3, r3, #3
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	4413      	add	r3, r2
 8013cce:	edd3 7a00 	vldr	s15, [r3]
 8013cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cd6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8013cda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	68fa      	ldr	r2, [r7, #12]
 8013ce2:	4413      	add	r3, r2
 8013ce4:	ed93 7a00 	vldr	s14, [r3]
 8013ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013cec:	00db      	lsls	r3, r3, #3
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	4413      	add	r3, r2
 8013cf2:	edd3 7a00 	vldr	s15, [r3]
 8013cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cfa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8013cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	68fa      	ldr	r2, [r7, #12]
 8013d06:	4413      	add	r3, r2
 8013d08:	ed93 7a00 	vldr	s14, [r3]
 8013d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d10:	00db      	lsls	r3, r3, #3
 8013d12:	68fa      	ldr	r2, [r7, #12]
 8013d14:	4413      	add	r3, r2
 8013d16:	edd3 7a00 	vldr	s15, [r3]
 8013d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d1e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8013d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013d26:	00db      	lsls	r3, r3, #3
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	4413      	add	r3, r2
 8013d2c:	ed93 7a00 	vldr	s14, [r3]
 8013d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013d34:	00db      	lsls	r3, r3, #3
 8013d36:	68fa      	ldr	r2, [r7, #12]
 8013d38:	4413      	add	r3, r2
 8013d3a:	edd3 7a00 	vldr	s15, [r3]
 8013d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d42:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8013d46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	4413      	add	r3, r2
 8013d50:	ed93 7a00 	vldr	s14, [r3]
 8013d54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d58:	00db      	lsls	r3, r3, #3
 8013d5a:	68fa      	ldr	r2, [r7, #12]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	edd3 7a00 	vldr	s15, [r3]
 8013d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d66:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8013d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013d6e:	00db      	lsls	r3, r3, #3
 8013d70:	68fa      	ldr	r2, [r7, #12]
 8013d72:	4413      	add	r3, r2
 8013d74:	ed93 7a00 	vldr	s14, [r3]
 8013d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013d7c:	00db      	lsls	r3, r3, #3
 8013d7e:	68fa      	ldr	r2, [r7, #12]
 8013d80:	4413      	add	r3, r2
 8013d82:	edd3 7a00 	vldr	s15, [r3]
 8013d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d8a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8013d8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	4413      	add	r3, r2
 8013d98:	ed93 7a00 	vldr	s14, [r3]
 8013d9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013da0:	00db      	lsls	r3, r3, #3
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	4413      	add	r3, r2
 8013da6:	edd3 7a00 	vldr	s15, [r3]
 8013daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dae:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8013db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	4413      	add	r3, r2
 8013dbc:	ed93 7a00 	vldr	s14, [r3]
 8013dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	68fa      	ldr	r2, [r7, #12]
 8013dc8:	4413      	add	r3, r2
 8013dca:	edd3 7a00 	vldr	s15, [r3]
 8013dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dd2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8013dd6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013dda:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013de2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8013de6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013dea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8013dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013df2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8013df6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013dfa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e02:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8013e06:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013e0a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e12:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8013e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	4413      	add	r3, r2
 8013e20:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013e24:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e2c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8013e30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013e3e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e46:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8013e4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	3304      	adds	r3, #4
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	4413      	add	r3, r2
 8013e56:	ed93 7a00 	vldr	s14, [r3]
 8013e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e5e:	00db      	lsls	r3, r3, #3
 8013e60:	3304      	adds	r3, #4
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	4413      	add	r3, r2
 8013e66:	edd3 7a00 	vldr	s15, [r3]
 8013e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e6e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8013e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	3304      	adds	r3, #4
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	ed93 7a00 	vldr	s14, [r3]
 8013e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	3304      	adds	r3, #4
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	edd3 7a00 	vldr	s15, [r3]
 8013e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e96:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8013e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013e9e:	00db      	lsls	r3, r3, #3
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	ed93 7a00 	vldr	s14, [r3]
 8013eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013eae:	00db      	lsls	r3, r3, #3
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	edd3 7a00 	vldr	s15, [r3]
 8013eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ebe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8013ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013ec6:	00db      	lsls	r3, r3, #3
 8013ec8:	3304      	adds	r3, #4
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	4413      	add	r3, r2
 8013ece:	ed93 7a00 	vldr	s14, [r3]
 8013ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013ed6:	00db      	lsls	r3, r3, #3
 8013ed8:	3304      	adds	r3, #4
 8013eda:	68fa      	ldr	r2, [r7, #12]
 8013edc:	4413      	add	r3, r2
 8013ede:	edd3 7a00 	vldr	s15, [r3]
 8013ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ee6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8013eea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013eee:	00db      	lsls	r3, r3, #3
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	68fa      	ldr	r2, [r7, #12]
 8013ef4:	4413      	add	r3, r2
 8013ef6:	ed93 7a00 	vldr	s14, [r3]
 8013efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013efe:	00db      	lsls	r3, r3, #3
 8013f00:	3304      	adds	r3, #4
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	4413      	add	r3, r2
 8013f06:	edd3 7a00 	vldr	s15, [r3]
 8013f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f0e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8013f12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013f16:	00db      	lsls	r3, r3, #3
 8013f18:	3304      	adds	r3, #4
 8013f1a:	68fa      	ldr	r2, [r7, #12]
 8013f1c:	4413      	add	r3, r2
 8013f1e:	ed93 7a00 	vldr	s14, [r3]
 8013f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	3304      	adds	r3, #4
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	edd3 7a00 	vldr	s15, [r3]
 8013f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f36:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8013f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013f3e:	00db      	lsls	r3, r3, #3
 8013f40:	3304      	adds	r3, #4
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	4413      	add	r3, r2
 8013f46:	ed93 7a00 	vldr	s14, [r3]
 8013f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	3304      	adds	r3, #4
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	4413      	add	r3, r2
 8013f56:	edd3 7a00 	vldr	s15, [r3]
 8013f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f5e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8013f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013f66:	00db      	lsls	r3, r3, #3
 8013f68:	3304      	adds	r3, #4
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	ed93 7a00 	vldr	s14, [r3]
 8013f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	3304      	adds	r3, #4
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	edd3 7a00 	vldr	s15, [r3]
 8013f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f86:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8013f8a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013f8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f96:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8013f9a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013f9e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8013fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fa6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8013faa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013fae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fb6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8013fba:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8013fbe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8013fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fc6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8013fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013fda:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fe2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8013fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	3304      	adds	r3, #4
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8013ff6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8013ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ffe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8014002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014006:	00db      	lsls	r3, r3, #3
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4413      	add	r3, r2
 801400c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014010:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014018:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 801401c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014020:	00db      	lsls	r3, r3, #3
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	4413      	add	r3, r2
 8014026:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 801402a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801402e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014032:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8014036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	3304      	adds	r3, #4
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	4413      	add	r3, r2
 8014042:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014046:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801404a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801404e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8014052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014056:	00db      	lsls	r3, r3, #3
 8014058:	3304      	adds	r3, #4
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	4413      	add	r3, r2
 801405e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014062:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014066:	ee77 7a27 	vadd.f32	s15, s14, s15
 801406a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 801406e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8014072:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014076:	ee77 7a67 	vsub.f32	s15, s14, s15
 801407a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 801407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014082:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8014086:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801408a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801408e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014092:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8014096:	ee67 7a27 	vmul.f32	s15, s14, s15
 801409a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 801409e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80140a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80140a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80140ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140b2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80140b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80140ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80140be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80140c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140ca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80140ce:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80140d2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80140d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80140de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80140e2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80140e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140ea:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80140ee:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80140f2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80140f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140fa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80140fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014102:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801410a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 801410e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014112:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014116:	ee77 7a67 	vsub.f32	s15, s14, s15
 801411a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 801411e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014122:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014126:	ee77 7a27 	vadd.f32	s15, s14, s15
 801412a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 801412e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014132:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014136:	ee77 7a67 	vsub.f32	s15, s14, s15
 801413a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 801413e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014142:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014146:	ee77 7a27 	vadd.f32	s15, s14, s15
 801414a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 801414e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014152:	00db      	lsls	r3, r3, #3
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	4413      	add	r3, r2
 8014158:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 801415c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014164:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8014168:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	4413      	add	r3, r2
 8014172:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014176:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801417a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801417e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8014182:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	68fa      	ldr	r2, [r7, #12]
 801418a:	4413      	add	r3, r2
 801418c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014190:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014198:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 801419c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80141a0:	00db      	lsls	r3, r3, #3
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	4413      	add	r3, r2
 80141a6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80141aa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80141ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80141b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	3304      	adds	r3, #4
 80141be:	68fa      	ldr	r2, [r7, #12]
 80141c0:	4413      	add	r3, r2
 80141c2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80141c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80141ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80141ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80141d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80141d6:	00db      	lsls	r3, r3, #3
 80141d8:	3304      	adds	r3, #4
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	4413      	add	r3, r2
 80141de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80141e2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80141e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80141ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80141f2:	00db      	lsls	r3, r3, #3
 80141f4:	3304      	adds	r3, #4
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	4413      	add	r3, r2
 80141fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80141fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014206:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 801420a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801420e:	00db      	lsls	r3, r3, #3
 8014210:	3304      	adds	r3, #4
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	4413      	add	r3, r2
 8014216:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801421a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801421e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014222:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8014226:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801422a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801422e:	4413      	add	r3, r2
 8014230:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8014234:	897b      	ldrh	r3, [r7, #10]
 8014236:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801423a:	429a      	cmp	r2, r3
 801423c:	f4ff ad0a 	bcc.w	8013c54 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8014240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014244:	2b07      	cmp	r3, #7
 8014246:	f240 84e3 	bls.w	8014c10 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 801424a:	2300      	movs	r3, #0
 801424c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8014250:	2301      	movs	r3, #1
 8014252:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8014256:	893b      	ldrh	r3, [r7, #8]
 8014258:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801425c:	4413      	add	r3, r2
 801425e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8014260:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014262:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8014266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801426a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801426c:	4413      	add	r3, r2
 801426e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8014270:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014272:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014274:	4413      	add	r3, r2
 8014276:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8014278:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801427a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801427c:	4413      	add	r3, r2
 801427e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8014280:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014284:	4413      	add	r3, r2
 8014286:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8014288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801428a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801428c:	4413      	add	r3, r2
 801428e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8014290:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014294:	4413      	add	r3, r2
 8014296:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8014298:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801429c:	00db      	lsls	r3, r3, #3
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	4413      	add	r3, r2
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80142a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142a8:	00db      	lsls	r3, r3, #3
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	4413      	add	r3, r2
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80142b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142b4:	00db      	lsls	r3, r3, #3
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	4413      	add	r3, r2
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80142be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142c0:	00db      	lsls	r3, r3, #3
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	4413      	add	r3, r2
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80142ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	4413      	add	r3, r2
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80142d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	4413      	add	r3, r2
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80142e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	4413      	add	r3, r2
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80142ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80142f2:	00db      	lsls	r3, r3, #3
 80142f4:	3304      	adds	r3, #4
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	4413      	add	r3, r2
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80142fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014300:	00db      	lsls	r3, r3, #3
 8014302:	3304      	adds	r3, #4
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	4413      	add	r3, r2
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 801430c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801430e:	00db      	lsls	r3, r3, #3
 8014310:	3304      	adds	r3, #4
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	4413      	add	r3, r2
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 801431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801431c:	00db      	lsls	r3, r3, #3
 801431e:	3304      	adds	r3, #4
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	4413      	add	r3, r2
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8014328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801432a:	00db      	lsls	r3, r3, #3
 801432c:	3304      	adds	r3, #4
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	4413      	add	r3, r2
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8014336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	3304      	adds	r3, #4
 801433c:	687a      	ldr	r2, [r7, #4]
 801433e:	4413      	add	r3, r2
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8014344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	3304      	adds	r3, #4
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	4413      	add	r3, r2
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8014352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 801435a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014362:	4413      	add	r3, r2
 8014364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8014368:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014370:	4413      	add	r3, r2
 8014372:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8014376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801437e:	4413      	add	r3, r2
 8014380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8014384:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8014388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801438c:	4413      	add	r3, r2
 801438e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8014392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801439a:	4413      	add	r3, r2
 801439c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80143a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80143a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143a8:	4413      	add	r3, r2
 80143aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80143ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80143b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80143b6:	4413      	add	r3, r2
 80143b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80143bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	68fa      	ldr	r2, [r7, #12]
 80143c4:	4413      	add	r3, r2
 80143c6:	ed93 7a00 	vldr	s14, [r3]
 80143ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143ce:	00db      	lsls	r3, r3, #3
 80143d0:	68fa      	ldr	r2, [r7, #12]
 80143d2:	4413      	add	r3, r2
 80143d4:	edd3 7a00 	vldr	s15, [r3]
 80143d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143dc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80143e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	68fa      	ldr	r2, [r7, #12]
 80143e8:	4413      	add	r3, r2
 80143ea:	ed93 7a00 	vldr	s14, [r3]
 80143ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	68fa      	ldr	r2, [r7, #12]
 80143f6:	4413      	add	r3, r2
 80143f8:	edd3 7a00 	vldr	s15, [r3]
 80143fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014400:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8014404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014408:	00db      	lsls	r3, r3, #3
 801440a:	68fa      	ldr	r2, [r7, #12]
 801440c:	4413      	add	r3, r2
 801440e:	ed93 7a00 	vldr	s14, [r3]
 8014412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014416:	00db      	lsls	r3, r3, #3
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	4413      	add	r3, r2
 801441c:	edd3 7a00 	vldr	s15, [r3]
 8014420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014424:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8014428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801442c:	00db      	lsls	r3, r3, #3
 801442e:	68fa      	ldr	r2, [r7, #12]
 8014430:	4413      	add	r3, r2
 8014432:	ed93 7a00 	vldr	s14, [r3]
 8014436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801443a:	00db      	lsls	r3, r3, #3
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	4413      	add	r3, r2
 8014440:	edd3 7a00 	vldr	s15, [r3]
 8014444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014448:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801444c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014450:	00db      	lsls	r3, r3, #3
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	4413      	add	r3, r2
 8014456:	ed93 7a00 	vldr	s14, [r3]
 801445a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801445e:	00db      	lsls	r3, r3, #3
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	4413      	add	r3, r2
 8014464:	edd3 7a00 	vldr	s15, [r3]
 8014468:	ee77 7a27 	vadd.f32	s15, s14, s15
 801446c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8014470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014474:	00db      	lsls	r3, r3, #3
 8014476:	68fa      	ldr	r2, [r7, #12]
 8014478:	4413      	add	r3, r2
 801447a:	ed93 7a00 	vldr	s14, [r3]
 801447e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	4413      	add	r3, r2
 8014488:	edd3 7a00 	vldr	s15, [r3]
 801448c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014490:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8014494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014498:	00db      	lsls	r3, r3, #3
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	4413      	add	r3, r2
 801449e:	ed93 7a00 	vldr	s14, [r3]
 80144a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	68fa      	ldr	r2, [r7, #12]
 80144aa:	4413      	add	r3, r2
 80144ac:	edd3 7a00 	vldr	s15, [r3]
 80144b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144b4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80144b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80144bc:	00db      	lsls	r3, r3, #3
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	4413      	add	r3, r2
 80144c2:	ed93 7a00 	vldr	s14, [r3]
 80144c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80144ca:	00db      	lsls	r3, r3, #3
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	4413      	add	r3, r2
 80144d0:	edd3 7a00 	vldr	s15, [r3]
 80144d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144d8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80144dc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80144e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80144e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144e8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80144ec:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80144f0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80144f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144f8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80144fc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014500:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014508:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 801450c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014510:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014518:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 801451c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014520:	00db      	lsls	r3, r3, #3
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	4413      	add	r3, r2
 8014526:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801452a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801452e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014532:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8014536:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801453a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801453e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014542:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8014546:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801454a:	00db      	lsls	r3, r3, #3
 801454c:	3304      	adds	r3, #4
 801454e:	68fa      	ldr	r2, [r7, #12]
 8014550:	4413      	add	r3, r2
 8014552:	ed93 7a00 	vldr	s14, [r3]
 8014556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801455a:	00db      	lsls	r3, r3, #3
 801455c:	3304      	adds	r3, #4
 801455e:	68fa      	ldr	r2, [r7, #12]
 8014560:	4413      	add	r3, r2
 8014562:	edd3 7a00 	vldr	s15, [r3]
 8014566:	ee77 7a27 	vadd.f32	s15, s14, s15
 801456a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 801456e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	3304      	adds	r3, #4
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	4413      	add	r3, r2
 801457a:	ed93 7a00 	vldr	s14, [r3]
 801457e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014582:	00db      	lsls	r3, r3, #3
 8014584:	3304      	adds	r3, #4
 8014586:	68fa      	ldr	r2, [r7, #12]
 8014588:	4413      	add	r3, r2
 801458a:	edd3 7a00 	vldr	s15, [r3]
 801458e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014592:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8014596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801459a:	00db      	lsls	r3, r3, #3
 801459c:	3304      	adds	r3, #4
 801459e:	68fa      	ldr	r2, [r7, #12]
 80145a0:	4413      	add	r3, r2
 80145a2:	ed93 7a00 	vldr	s14, [r3]
 80145a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80145aa:	00db      	lsls	r3, r3, #3
 80145ac:	3304      	adds	r3, #4
 80145ae:	68fa      	ldr	r2, [r7, #12]
 80145b0:	4413      	add	r3, r2
 80145b2:	edd3 7a00 	vldr	s15, [r3]
 80145b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80145be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	3304      	adds	r3, #4
 80145c6:	68fa      	ldr	r2, [r7, #12]
 80145c8:	4413      	add	r3, r2
 80145ca:	ed93 7a00 	vldr	s14, [r3]
 80145ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	3304      	adds	r3, #4
 80145d6:	68fa      	ldr	r2, [r7, #12]
 80145d8:	4413      	add	r3, r2
 80145da:	edd3 7a00 	vldr	s15, [r3]
 80145de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80145e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80145ea:	00db      	lsls	r3, r3, #3
 80145ec:	3304      	adds	r3, #4
 80145ee:	68fa      	ldr	r2, [r7, #12]
 80145f0:	4413      	add	r3, r2
 80145f2:	ed93 7a00 	vldr	s14, [r3]
 80145f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80145fa:	00db      	lsls	r3, r3, #3
 80145fc:	3304      	adds	r3, #4
 80145fe:	68fa      	ldr	r2, [r7, #12]
 8014600:	4413      	add	r3, r2
 8014602:	edd3 7a00 	vldr	s15, [r3]
 8014606:	ee77 7a27 	vadd.f32	s15, s14, s15
 801460a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801460e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	3304      	adds	r3, #4
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	4413      	add	r3, r2
 801461a:	ed93 7a00 	vldr	s14, [r3]
 801461e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014622:	00db      	lsls	r3, r3, #3
 8014624:	3304      	adds	r3, #4
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	4413      	add	r3, r2
 801462a:	edd3 7a00 	vldr	s15, [r3]
 801462e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014632:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8014636:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	3304      	adds	r3, #4
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	4413      	add	r3, r2
 8014642:	ed93 7a00 	vldr	s14, [r3]
 8014646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801464a:	00db      	lsls	r3, r3, #3
 801464c:	3304      	adds	r3, #4
 801464e:	68fa      	ldr	r2, [r7, #12]
 8014650:	4413      	add	r3, r2
 8014652:	edd3 7a00 	vldr	s15, [r3]
 8014656:	ee77 7a27 	vadd.f32	s15, s14, s15
 801465a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 801465e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014662:	00db      	lsls	r3, r3, #3
 8014664:	3304      	adds	r3, #4
 8014666:	68fa      	ldr	r2, [r7, #12]
 8014668:	4413      	add	r3, r2
 801466a:	ed93 7a00 	vldr	s14, [r3]
 801466e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	3304      	adds	r3, #4
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	4413      	add	r3, r2
 801467a:	edd3 7a00 	vldr	s15, [r3]
 801467e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014682:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8014686:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801468a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801468e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014692:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8014696:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801469a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801469e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80146a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80146aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80146ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146b2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80146b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80146ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80146be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80146c6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80146ca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80146ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146d2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80146d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80146da:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80146de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146e2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80146e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80146ea:	00db      	lsls	r3, r3, #3
 80146ec:	3304      	adds	r3, #4
 80146ee:	68fa      	ldr	r2, [r7, #12]
 80146f0:	4413      	add	r3, r2
 80146f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80146f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80146fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146fe:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8014702:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014706:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801470a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801470e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8014712:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014716:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801471a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801471e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8014722:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014726:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801472a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801472e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8014732:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014736:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801473e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8014742:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014746:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801474e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8014752:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8014756:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801475e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8014762:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014766:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801476a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801476e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8014772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	4413      	add	r3, r2
 801477c:	ed97 7a07 	vldr	s14, [r7, #28]
 8014780:	edd7 7a06 	vldr	s15, [r7, #24]
 8014784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014788:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 801478c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014790:	00db      	lsls	r3, r3, #3
 8014792:	3304      	adds	r3, #4
 8014794:	68fa      	ldr	r2, [r7, #12]
 8014796:	4413      	add	r3, r2
 8014798:	ed97 7a05 	vldr	s14, [r7, #20]
 801479c:	edd7 7a04 	vldr	s15, [r7, #16]
 80147a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147a4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80147a8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80147ac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80147b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147b4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80147b8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80147bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80147c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147c4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80147c8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80147cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80147d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147d4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80147d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80147dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80147e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147e4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80147e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	68fa      	ldr	r2, [r7, #12]
 80147f0:	4413      	add	r3, r2
 80147f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80147f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80147fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147fe:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8014802:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014806:	00db      	lsls	r3, r3, #3
 8014808:	3304      	adds	r3, #4
 801480a:	68fa      	ldr	r2, [r7, #12]
 801480c:	4413      	add	r3, r2
 801480e:	ed97 7a05 	vldr	s14, [r7, #20]
 8014812:	edd7 7a04 	vldr	s15, [r7, #16]
 8014816:	ee77 7a67 	vsub.f32	s15, s14, s15
 801481a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 801481e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014822:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8014826:	ee67 7a27 	vmul.f32	s15, s14, s15
 801482a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 801482e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8014832:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014836:	ee67 7a27 	vmul.f32	s15, s14, s15
 801483a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 801483e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014842:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014846:	ee67 7a27 	vmul.f32	s15, s14, s15
 801484a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 801484e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8014852:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8014856:	ee67 7a27 	vmul.f32	s15, s14, s15
 801485a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 801485e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014862:	00db      	lsls	r3, r3, #3
 8014864:	68fa      	ldr	r2, [r7, #12]
 8014866:	4413      	add	r3, r2
 8014868:	ed97 7a07 	vldr	s14, [r7, #28]
 801486c:	edd7 7a06 	vldr	s15, [r7, #24]
 8014870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014874:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8014878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	3304      	adds	r3, #4
 8014880:	68fa      	ldr	r2, [r7, #12]
 8014882:	4413      	add	r3, r2
 8014884:	ed97 7a05 	vldr	s14, [r7, #20]
 8014888:	edd7 7a04 	vldr	s15, [r7, #16]
 801488c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014890:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8014894:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8014898:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801489c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148a0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80148a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148a8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80148ac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80148b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80148b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148b8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80148bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148c0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80148c4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80148c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80148cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148d0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80148d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80148dc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80148e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80148e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80148ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80148f0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80148f4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80148f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80148fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014900:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8014904:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014908:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 801490c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014910:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8014914:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014918:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801491c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014920:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8014924:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014928:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 801492c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014930:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8014934:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014938:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801493c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014940:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8014944:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014948:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801494c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014950:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8014954:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014958:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801495c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014960:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8014964:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014968:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801496c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014970:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8014974:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014978:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801497c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014980:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8014984:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014988:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801498c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014990:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8014994:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014998:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 801499c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149a0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80149a4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80149a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80149ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149b0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80149b4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80149b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80149bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80149c4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80149c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80149cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149d0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80149d4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80149d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80149dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149e0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80149e4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80149e8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80149ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80149f4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80149f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80149fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a00:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8014a04:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014a08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a10:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8014a14:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8014a18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8014a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a20:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8014a24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8014a28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8014a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a30:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8014a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	4413      	add	r3, r2
 8014a3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8014a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8014a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a4a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8014a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	3304      	adds	r3, #4
 8014a56:	68fa      	ldr	r2, [r7, #12]
 8014a58:	4413      	add	r3, r2
 8014a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8014a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8014a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a66:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8014a6a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014a6e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8014a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a76:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8014a7a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014a7e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8014a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a86:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8014a8a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014a8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8014a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a96:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8014a9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014a9e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8014aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014aa6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8014aaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	ed97 7a07 	vldr	s14, [r7, #28]
 8014ab8:	edd7 7a06 	vldr	s15, [r7, #24]
 8014abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ac0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8014ac4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	3304      	adds	r3, #4
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	4413      	add	r3, r2
 8014ad0:	ed97 7a05 	vldr	s14, [r7, #20]
 8014ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8014ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014adc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8014ae0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014ae4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014aec:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8014af0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014af4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014afc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8014b00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014b04:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b0c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8014b10:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014b14:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b1c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8014b20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014b24:	00db      	lsls	r3, r3, #3
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	4413      	add	r3, r2
 8014b2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8014b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8014b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b36:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8014b3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	3304      	adds	r3, #4
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	4413      	add	r3, r2
 8014b46:	ed97 7a05 	vldr	s14, [r7, #20]
 8014b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8014b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b52:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8014b56:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014b5a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8014b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b62:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8014b66:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014b6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b72:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8014b76:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8014b7a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8014b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b82:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8014b86:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014b8a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8014b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b92:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8014b96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	ed97 7a07 	vldr	s14, [r7, #28]
 8014ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8014ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8014bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	3304      	adds	r3, #4
 8014bb8:	68fa      	ldr	r2, [r7, #12]
 8014bba:	4413      	add	r3, r2
 8014bbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8014bc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8014bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bc8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8014bcc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014bd4:	4413      	add	r3, r2
 8014bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 8014bda:	897b      	ldrh	r3, [r7, #10]
 8014bdc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014be0:	429a      	cmp	r2, r3
 8014be2:	f4ff abba 	bcc.w	801435a <arm_radix8_butterfly_f32+0x746>

         j++;
 8014be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014bea:	3301      	adds	r3, #1
 8014bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8014bf0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	f4ff ab2c 	bcc.w	8014256 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8014bfe:	893b      	ldrh	r3, [r7, #8]
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8014c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c08:	2b07      	cmp	r3, #7
 8014c0a:	f63f a813 	bhi.w	8013c34 <arm_radix8_butterfly_f32+0x20>
}
 8014c0e:	e000      	b.n	8014c12 <arm_radix8_butterfly_f32+0xffe>
         break;
 8014c10:	bf00      	nop
}
 8014c12:	bf00      	nop
 8014c14:	37f4      	adds	r7, #244	; 0xf4
 8014c16:	46bd      	mov	sp, r7
 8014c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1c:	4770      	bx	lr
 8014c1e:	bf00      	nop

08014c20 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8014c20:	b480      	push	{r7}
 8014c22:	b095      	sub	sp, #84	; 0x54
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	881b      	ldrh	r3, [r3, #0]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8014c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8014c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8014c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8014c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8014c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c5c:	1d1a      	adds	r2, r3, #4
 8014c5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8014c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c66:	1d1a      	adds	r2, r3, #4
 8014c68:	64ba      	str	r2, [r7, #72]	; 0x48
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8014c6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014c72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c7a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8014c7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014c82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c8a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8014c8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014c92:	edd7 7a08 	vldr	s15, [r7, #32]
 8014c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	1d1a      	adds	r2, r3, #4
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ca8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8014cac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014cb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8014cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	1d1a      	adds	r2, r3, #4
 8014cbc:	607a      	str	r2, [r7, #4]
 8014cbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cc6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8014cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	68ba      	ldr	r2, [r7, #8]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8014cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cd6:	3308      	adds	r3, #8
 8014cd8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8014cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8014ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8014ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8014cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8014cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cf4:	1d1a      	adds	r2, r3, #4
 8014cf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8014cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cfe:	1d1a      	adds	r2, r3, #4
 8014d00:	64ba      	str	r2, [r7, #72]	; 0x48
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8014d06:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014d0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d12:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8014d16:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014d1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d22:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8014d26:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014d2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d32:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8014d36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014d3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d42:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8014d46:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014d4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8014d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d52:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8014d56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014d5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8014d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d62:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8014d66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8014d6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8014d76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8014d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	1d1a      	adds	r2, r3, #4
 8014d86:	607a      	str	r2, [r7, #4]
 8014d88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d90:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8014d94:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8014d98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014d9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014da0:	edd7 7a06 	vldr	s15, [r7, #24]
 8014da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8014dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	1d1a      	adds	r2, r3, #4
 8014db4:	607a      	str	r2, [r7, #4]
 8014db6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dbe:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8014dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dc4:	3308      	adds	r3, #8
 8014dc6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8014dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014dca:	3b08      	subs	r3, #8
 8014dcc:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8014dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8014dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f73f af7f 	bgt.w	8014cda <stage_rfft_f32+0xba>
}
 8014ddc:	bf00      	nop
 8014dde:	bf00      	nop
 8014de0:	3754      	adds	r7, #84	; 0x54
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr

08014dea <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8014dea:	b480      	push	{r7}
 8014dec:	b095      	sub	sp, #84	; 0x54
 8014dee:	af00      	add	r7, sp, #0
 8014df0:	60f8      	str	r0, [r7, #12]
 8014df2:	60b9      	str	r1, [r7, #8]
 8014df4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	695b      	ldr	r3, [r3, #20]
 8014dfa:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8014e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8014e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8014e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e1a:	3308      	adds	r3, #8
 8014e1c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8014e1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014e22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	1d1a      	adds	r2, r3, #4
 8014e2e:	607a      	str	r2, [r7, #4]
 8014e30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e38:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8014e3c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014e40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8014e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	1d1a      	adds	r2, r3, #4
 8014e4c:	607a      	str	r2, [r7, #4]
 8014e4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e56:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8014e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	68ba      	ldr	r2, [r7, #8]
 8014e60:	4413      	add	r3, r2
 8014e62:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8014e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e66:	3308      	adds	r3, #8
 8014e68:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8014e6a:	e07c      	b.n	8014f66 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8014e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8014e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8014e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8014e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8014e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e86:	1d1a      	adds	r2, r3, #4
 8014e88:	64ba      	str	r2, [r7, #72]	; 0x48
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8014e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e90:	1d1a      	adds	r2, r3, #4
 8014e92:	64ba      	str	r2, [r7, #72]	; 0x48
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8014e98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014e9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8014ea8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014eac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014eb4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8014eb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014ebc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ec4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8014ec8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8014ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ed4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8014ed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014edc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8014ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ee4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8014ee8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014eec:	edd7 7a08 	vldr	s15, [r7, #32]
 8014ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ef4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8014ef8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8014efc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8014f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f04:	edd7 7a07 	vldr	s15, [r7, #28]
 8014f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8014f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	1d1a      	adds	r2, r3, #4
 8014f18:	607a      	str	r2, [r7, #4]
 8014f1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f22:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8014f26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8014f2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8014f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8014f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	1d1a      	adds	r2, r3, #4
 8014f46:	607a      	str	r2, [r7, #4]
 8014f48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f50:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8014f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f56:	3308      	adds	r3, #8
 8014f58:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8014f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f5c:	3b08      	subs	r3, #8
 8014f5e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8014f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f62:	3b01      	subs	r3, #1
 8014f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8014f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f73f af7f 	bgt.w	8014e6c <merge_rfft_f32+0x82>
   }

}
 8014f6e:	bf00      	nop
 8014f70:	bf00      	nop
 8014f72:	3754      	adds	r7, #84	; 0x54
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	607a      	str	r2, [r7, #4]
 8014f88:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8014f8e:	78fb      	ldrb	r3, [r7, #3]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00b      	beq.n	8014fac <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8014f94:	687a      	ldr	r2, [r7, #4]
 8014f96:	68b9      	ldr	r1, [r7, #8]
 8014f98:	68f8      	ldr	r0, [r7, #12]
 8014f9a:	f7ff ff26 	bl	8014dea <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8014f9e:	78fa      	ldrb	r2, [r7, #3]
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	6879      	ldr	r1, [r7, #4]
 8014fa4:	6978      	ldr	r0, [r7, #20]
 8014fa6:	f7fe fd7b 	bl	8013aa0 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8014faa:	e00a      	b.n	8014fc2 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8014fac:	78fa      	ldrb	r2, [r7, #3]
 8014fae:	2301      	movs	r3, #1
 8014fb0:	68b9      	ldr	r1, [r7, #8]
 8014fb2:	6978      	ldr	r0, [r7, #20]
 8014fb4:	f7fe fd74 	bl	8013aa0 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8014fb8:	687a      	ldr	r2, [r7, #4]
 8014fba:	68b9      	ldr	r1, [r7, #8]
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	f7ff fe2f 	bl	8014c20 <stage_rfft_f32>
}
 8014fc2:	bf00      	nop
 8014fc4:	3718      	adds	r7, #24
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}

08014fca <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8014fca:	b480      	push	{r7}
 8014fcc:	b089      	sub	sp, #36	; 0x24
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	60f8      	str	r0, [r7, #12]
 8014fd2:	60b9      	str	r1, [r7, #8]
 8014fd4:	607a      	str	r2, [r7, #4]
 8014fd6:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014fde:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	68fa      	ldr	r2, [r7, #12]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	ed93 7a00 	vldr	s14, [r3]
 8014ff0:	69bb      	ldr	r3, [r7, #24]
 8014ff2:	edd3 7a00 	vldr	s15, [r3]
 8014ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	edd3 6a01 	vldr	s13, [r3, #4]
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	edd3 7a01 	vldr	s15, [r3, #4]
 8015006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801500a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801500e:	edc7 7a04 	vstr	s15, [r7, #16]
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	ed93 7a00 	vldr	s14, [r3]
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	edd3 7a01 	vldr	s15, [r3, #4]
 801501e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015022:	69fb      	ldr	r3, [r7, #28]
 8015024:	edd3 6a01 	vldr	s13, [r3, #4]
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	edd3 7a00 	vldr	s15, [r3]
 801502e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015036:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	69ba      	ldr	r2, [r7, #24]
 8015040:	4413      	add	r3, r2
 8015042:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	ed93 7a00 	vldr	s14, [r3]
 801504a:	edd7 7a04 	vldr	s15, [r7, #16]
 801504e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015052:	69fb      	ldr	r3, [r7, #28]
 8015054:	edc3 7a00 	vstr	s15, [r3]
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	ed93 7a01 	vldr	s14, [r3, #4]
 801505e:	edd7 7a05 	vldr	s15, [r7, #20]
 8015062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	ed93 7a00 	vldr	s14, [r3]
 8015072:	edd7 7a04 	vldr	s15, [r7, #16]
 8015076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	edc3 7a00 	vstr	s15, [r3]
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	ed93 7a01 	vldr	s14, [r3, #4]
 8015086:	edd7 7a05 	vldr	s15, [r7, #20]
 801508a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	3308      	adds	r3, #8
 8015098:	61fb      	str	r3, [r7, #28]
        ++Fout;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	3308      	adds	r3, #8
 801509e:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	3b01      	subs	r3, #1
 80150a4:	603b      	str	r3, [r7, #0]
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	bf14      	ite	ne
 80150ac:	2301      	movne	r3, #1
 80150ae:	2300      	moveq	r3, #0
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d199      	bne.n	8014fea <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80150b6:	bf00      	nop
 80150b8:	bf00      	nop
 80150ba:	3724      	adds	r7, #36	; 0x24
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80150c4:	b480      	push	{r7}
 80150c6:	b097      	sub	sp, #92	; 0x5c
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
 80150d0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	005b      	lsls	r3, r3, #1
 80150da:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 80150dc:	683a      	ldr	r2, [r7, #0]
 80150de:	4613      	mov	r3, r2
 80150e0:	005b      	lsls	r3, r3, #1
 80150e2:	4413      	add	r3, r2
 80150e4:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80150ec:	657b      	str	r3, [r7, #84]	; 0x54
 80150ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f0:	653b      	str	r3, [r7, #80]	; 0x50
 80150f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	00db      	lsls	r3, r3, #3
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	4413      	add	r3, r2
 80150fe:	ed93 7a00 	vldr	s14, [r3]
 8015102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015104:	edd3 7a00 	vldr	s15, [r3]
 8015108:	ee27 7a27 	vmul.f32	s14, s14, s15
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	00db      	lsls	r3, r3, #3
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	4413      	add	r3, r2
 8015114:	edd3 6a01 	vldr	s13, [r3, #4]
 8015118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801511a:	edd3 7a01 	vldr	s15, [r3, #4]
 801511e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015126:	edc7 7a04 	vstr	s15, [r7, #16]
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	00db      	lsls	r3, r3, #3
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	4413      	add	r3, r2
 8015132:	ed93 7a00 	vldr	s14, [r3]
 8015136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015138:	edd3 7a01 	vldr	s15, [r3, #4]
 801513c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	68fa      	ldr	r2, [r7, #12]
 8015146:	4413      	add	r3, r2
 8015148:	edd3 6a01 	vldr	s13, [r3, #4]
 801514c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801514e:	edd3 7a00 	vldr	s15, [r3]
 8015152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015156:	ee77 7a27 	vadd.f32	s15, s14, s15
 801515a:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 801515e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015160:	00db      	lsls	r3, r3, #3
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	4413      	add	r3, r2
 8015166:	ed93 7a00 	vldr	s14, [r3]
 801516a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801516c:	edd3 7a00 	vldr	s15, [r3]
 8015170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015176:	00db      	lsls	r3, r3, #3
 8015178:	68fa      	ldr	r2, [r7, #12]
 801517a:	4413      	add	r3, r2
 801517c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015182:	edd3 7a01 	vldr	s15, [r3, #4]
 8015186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801518a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801518e:	edc7 7a06 	vstr	s15, [r7, #24]
 8015192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015194:	00db      	lsls	r3, r3, #3
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	4413      	add	r3, r2
 801519a:	ed93 7a00 	vldr	s14, [r3]
 801519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80151a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	68fa      	ldr	r2, [r7, #12]
 80151ae:	4413      	add	r3, r2
 80151b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80151b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151b6:	edd3 7a00 	vldr	s15, [r3]
 80151ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151c2:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 80151c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151c8:	00db      	lsls	r3, r3, #3
 80151ca:	68fa      	ldr	r2, [r7, #12]
 80151cc:	4413      	add	r3, r2
 80151ce:	ed93 7a00 	vldr	s14, [r3]
 80151d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151d4:	edd3 7a00 	vldr	s15, [r3]
 80151d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151de:	00db      	lsls	r3, r3, #3
 80151e0:	68fa      	ldr	r2, [r7, #12]
 80151e2:	4413      	add	r3, r2
 80151e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80151e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80151ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151f6:	edc7 7a08 	vstr	s15, [r7, #32]
 80151fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151fc:	00db      	lsls	r3, r3, #3
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	4413      	add	r3, r2
 8015202:	ed93 7a00 	vldr	s14, [r3]
 8015206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015208:	edd3 7a01 	vldr	s15, [r3, #4]
 801520c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	68fa      	ldr	r2, [r7, #12]
 8015216:	4413      	add	r3, r2
 8015218:	edd3 6a01 	vldr	s13, [r3, #4]
 801521c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801521e:	edd3 7a00 	vldr	s15, [r3]
 8015222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015226:	ee77 7a27 	vadd.f32	s15, s14, s15
 801522a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	ed93 7a00 	vldr	s14, [r3]
 8015234:	edd7 7a06 	vldr	s15, [r7, #24]
 8015238:	ee77 7a67 	vsub.f32	s15, s14, s15
 801523c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	ed93 7a01 	vldr	s14, [r3, #4]
 8015246:	edd7 7a07 	vldr	s15, [r7, #28]
 801524a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801524e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	ed93 7a00 	vldr	s14, [r3]
 8015258:	edd7 7a06 	vldr	s15, [r7, #24]
 801525c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	edc3 7a00 	vstr	s15, [r3]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	ed93 7a01 	vldr	s14, [r3, #4]
 801526c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 801527a:	ed97 7a04 	vldr	s14, [r7, #16]
 801527e:	edd7 7a08 	vldr	s15, [r7, #32]
 8015282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015286:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801528a:	ed97 7a05 	vldr	s14, [r7, #20]
 801528e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015296:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 801529a:	ed97 7a04 	vldr	s14, [r7, #16]
 801529e:	edd7 7a08 	vldr	s15, [r7, #32]
 80152a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152a6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80152aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80152ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80152b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152b6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	ed93 7a00 	vldr	s14, [r3]
 80152c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80152c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c6:	00db      	lsls	r3, r3, #3
 80152c8:	68fa      	ldr	r2, [r7, #12]
 80152ca:	4413      	add	r3, r2
 80152cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152d0:	edc3 7a00 	vstr	s15, [r3]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80152da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80152de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152e0:	00db      	lsls	r3, r3, #3
 80152e2:	68fa      	ldr	r2, [r7, #12]
 80152e4:	4413      	add	r3, r2
 80152e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152ea:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80152f4:	4413      	add	r3, r2
 80152f6:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	011b      	lsls	r3, r3, #4
 80152fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80152fe:	4413      	add	r3, r2
 8015300:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	4613      	mov	r3, r2
 8015306:	005b      	lsls	r3, r3, #1
 8015308:	4413      	add	r3, r2
 801530a:	00db      	lsls	r3, r3, #3
 801530c:	461a      	mov	r2, r3
 801530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015310:	4413      	add	r3, r2
 8015312:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	ed93 7a00 	vldr	s14, [r3]
 801531a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801531e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	edc3 7a00 	vstr	s15, [r3]
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	ed93 7a01 	vldr	s14, [r3, #4]
 801532e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d030      	beq.n	80153a6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8015344:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015348:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801534c:	683b      	ldr	r3, [r7, #0]
 801534e:	00db      	lsls	r3, r3, #3
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	4413      	add	r3, r2
 8015354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015358:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 801535c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015360:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	00db      	lsls	r3, r3, #3
 8015368:	68fa      	ldr	r2, [r7, #12]
 801536a:	4413      	add	r3, r2
 801536c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015370:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8015374:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015378:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801537e:	00db      	lsls	r3, r3, #3
 8015380:	68fa      	ldr	r2, [r7, #12]
 8015382:	4413      	add	r3, r2
 8015384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015388:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 801538c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015390:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	4413      	add	r3, r2
 801539c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153a0:	edc3 7a01 	vstr	s15, [r3, #4]
 80153a4:	e02f      	b.n	8015406 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 80153a6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80153aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	00db      	lsls	r3, r3, #3
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	4413      	add	r3, r2
 80153b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153ba:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 80153be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80153c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	68fa      	ldr	r2, [r7, #12]
 80153cc:	4413      	add	r3, r2
 80153ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153d2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 80153d6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80153da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80153de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	4413      	add	r3, r2
 80153e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153ea:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 80153ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80153f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80153f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153f8:	00db      	lsls	r3, r3, #3
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	4413      	add	r3, r2
 80153fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015402:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3308      	adds	r3, #8
 801540a:	60fb      	str	r3, [r7, #12]
    }while(--k);
 801540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801540e:	3b01      	subs	r3, #1
 8015410:	64bb      	str	r3, [r7, #72]	; 0x48
 8015412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015414:	2b00      	cmp	r3, #0
 8015416:	bf14      	ite	ne
 8015418:	2301      	movne	r3, #1
 801541a:	2300      	moveq	r3, #0
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b00      	cmp	r3, #0
 8015420:	f47f ae69 	bne.w	80150f6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8015424:	bf00      	nop
 8015426:	bf00      	nop
 8015428:	375c      	adds	r7, #92	; 0x5c
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr
	...

08015434 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8015434:	b5b0      	push	{r4, r5, r7, lr}
 8015436:	b094      	sub	sp, #80	; 0x50
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
 8015440:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	683a      	ldr	r2, [r7, #0]
 8015450:	fb02 f303 	mul.w	r3, r2, r3
 8015454:	6879      	ldr	r1, [r7, #4]
 8015456:	3321      	adds	r3, #33	; 0x21
 8015458:	f107 0210 	add.w	r2, r7, #16
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	440b      	add	r3, r1
 8015460:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015464:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801546e:	647b      	str	r3, [r7, #68]	; 0x44
 8015470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015472:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	00db      	lsls	r3, r3, #3
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	4413      	add	r3, r2
 801547c:	ed93 7a00 	vldr	s14, [r3]
 8015480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015482:	edd3 7a00 	vldr	s15, [r3]
 8015486:	ee27 7a27 	vmul.f32	s14, s14, s15
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	68fa      	ldr	r2, [r7, #12]
 8015490:	4413      	add	r3, r2
 8015492:	edd3 6a01 	vldr	s13, [r3, #4]
 8015496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015498:	edd3 7a01 	vldr	s15, [r3, #4]
 801549c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80154a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154a4:	edc7 7a08 	vstr	s15, [r7, #32]
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	00db      	lsls	r3, r3, #3
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	4413      	add	r3, r2
 80154b0:	ed93 7a00 	vldr	s14, [r3]
 80154b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80154ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	00db      	lsls	r3, r3, #3
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	4413      	add	r3, r2
 80154c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80154ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154cc:	edd3 7a00 	vldr	s15, [r3]
 80154d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80154d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 80154dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	68fa      	ldr	r2, [r7, #12]
 80154e2:	4413      	add	r3, r2
 80154e4:	ed93 7a00 	vldr	s14, [r3]
 80154e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154ea:	edd3 7a00 	vldr	s15, [r3]
 80154ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154f4:	00db      	lsls	r3, r3, #3
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	4413      	add	r3, r2
 80154fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80154fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015500:	edd3 7a01 	vldr	s15, [r3, #4]
 8015504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015508:	ee77 7a67 	vsub.f32	s15, s14, s15
 801550c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015512:	00db      	lsls	r3, r3, #3
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	4413      	add	r3, r2
 8015518:	ed93 7a00 	vldr	s14, [r3]
 801551c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801551e:	edd3 7a01 	vldr	s15, [r3, #4]
 8015522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015528:	00db      	lsls	r3, r3, #3
 801552a:	68fa      	ldr	r2, [r7, #12]
 801552c:	4413      	add	r3, r2
 801552e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015534:	edd3 7a00 	vldr	s15, [r3]
 8015538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801553c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015540:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8015544:	ed97 7a08 	vldr	s14, [r7, #32]
 8015548:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801554c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015550:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8015554:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015558:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801555c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015560:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8015564:	ed97 7a08 	vldr	s14, [r7, #32]
 8015568:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801556c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015570:	edc7 7a06 	vstr	s15, [r7, #24]
 8015574:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801557c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015580:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	00db      	lsls	r3, r3, #3
 8015588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801558a:	4413      	add	r3, r2
 801558c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	011b      	lsls	r3, r3, #4
 8015592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015594:	4413      	add	r3, r2
 8015596:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	4618      	mov	r0, r3
 801559e:	f7eb f803 	bl	80005a8 <__aeabi_f2d>
 80155a2:	4604      	mov	r4, r0
 80155a4:	460d      	mov	r5, r1
 80155a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7ea fffd 	bl	80005a8 <__aeabi_f2d>
 80155ae:	f04f 0200 	mov.w	r2, #0
 80155b2:	4b57      	ldr	r3, [pc, #348]	; (8015710 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 80155b4:	f7eb f850 	bl	8000658 <__aeabi_dmul>
 80155b8:	4602      	mov	r2, r0
 80155ba:	460b      	mov	r3, r1
 80155bc:	4620      	mov	r0, r4
 80155be:	4629      	mov	r1, r5
 80155c0:	f7ea fe92 	bl	80002e8 <__aeabi_dsub>
 80155c4:	4602      	mov	r2, r0
 80155c6:	460b      	mov	r3, r1
 80155c8:	4610      	mov	r0, r2
 80155ca:	4619      	mov	r1, r3
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	00db      	lsls	r3, r3, #3
 80155d0:	68fa      	ldr	r2, [r7, #12]
 80155d2:	18d4      	adds	r4, r2, r3
 80155d4:	f7eb fb38 	bl	8000c48 <__aeabi_d2f>
 80155d8:	4603      	mov	r3, r0
 80155da:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7ea ffe1 	bl	80005a8 <__aeabi_f2d>
 80155e6:	4604      	mov	r4, r0
 80155e8:	460d      	mov	r5, r1
 80155ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7ea ffdb 	bl	80005a8 <__aeabi_f2d>
 80155f2:	f04f 0200 	mov.w	r2, #0
 80155f6:	4b46      	ldr	r3, [pc, #280]	; (8015710 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 80155f8:	f7eb f82e 	bl	8000658 <__aeabi_dmul>
 80155fc:	4602      	mov	r2, r0
 80155fe:	460b      	mov	r3, r1
 8015600:	4620      	mov	r0, r4
 8015602:	4629      	mov	r1, r5
 8015604:	f7ea fe70 	bl	80002e8 <__aeabi_dsub>
 8015608:	4602      	mov	r2, r0
 801560a:	460b      	mov	r3, r1
 801560c:	4610      	mov	r0, r2
 801560e:	4619      	mov	r1, r3
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	00db      	lsls	r3, r3, #3
 8015614:	68fa      	ldr	r2, [r7, #12]
 8015616:	18d4      	adds	r4, r2, r3
 8015618:	f7eb fb16 	bl	8000c48 <__aeabi_d2f>
 801561c:	4603      	mov	r3, r0
 801561e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8015620:	ed97 7a06 	vldr	s14, [r7, #24]
 8015624:	edd7 7a05 	vldr	s15, [r7, #20]
 8015628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801562c:	edc7 7a06 	vstr	s15, [r7, #24]
 8015630:	ed97 7a07 	vldr	s14, [r7, #28]
 8015634:	edd7 7a05 	vldr	s15, [r7, #20]
 8015638:	ee67 7a27 	vmul.f32	s15, s14, s15
 801563c:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	ed93 7a00 	vldr	s14, [r3]
 8015646:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801564a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	edc3 7a00 	vstr	s15, [r3]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	ed93 7a01 	vldr	s14, [r3, #4]
 801565a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801565e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	00db      	lsls	r3, r3, #3
 801566c:	68fa      	ldr	r2, [r7, #12]
 801566e:	4413      	add	r3, r2
 8015670:	ed93 7a00 	vldr	s14, [r3]
 8015674:	edd7 7a07 	vldr	s15, [r7, #28]
 8015678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801567a:	00db      	lsls	r3, r3, #3
 801567c:	68fa      	ldr	r2, [r7, #12]
 801567e:	4413      	add	r3, r2
 8015680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015684:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	00db      	lsls	r3, r3, #3
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	4413      	add	r3, r2
 8015690:	ed93 7a01 	vldr	s14, [r3, #4]
 8015694:	edd7 7a06 	vldr	s15, [r7, #24]
 8015698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801569a:	00db      	lsls	r3, r3, #3
 801569c:	68fa      	ldr	r2, [r7, #12]
 801569e:	4413      	add	r3, r2
 80156a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156a4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	00db      	lsls	r3, r3, #3
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	4413      	add	r3, r2
 80156b0:	ed93 7a00 	vldr	s14, [r3]
 80156b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	00db      	lsls	r3, r3, #3
 80156bc:	68fa      	ldr	r2, [r7, #12]
 80156be:	4413      	add	r3, r2
 80156c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156c4:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	00db      	lsls	r3, r3, #3
 80156cc:	68fa      	ldr	r2, [r7, #12]
 80156ce:	4413      	add	r3, r2
 80156d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80156d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	00db      	lsls	r3, r3, #3
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	4413      	add	r3, r2
 80156e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156e4:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	3308      	adds	r3, #8
 80156ec:	60fb      	str	r3, [r7, #12]
     }while(--k);
 80156ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156f0:	3b01      	subs	r3, #1
 80156f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80156f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	bf14      	ite	ne
 80156fa:	2301      	movne	r3, #1
 80156fc:	2300      	moveq	r3, #0
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	2b00      	cmp	r3, #0
 8015702:	f47f aeb7 	bne.w	8015474 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 8015706:	bf00      	nop
 8015708:	bf00      	nop
 801570a:	3750      	adds	r7, #80	; 0x50
 801570c:	46bd      	mov	sp, r7
 801570e:	bdb0      	pop	{r4, r5, r7, pc}
 8015710:	3fe00000 	.word	0x3fe00000

08015714 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 8015714:	b480      	push	{r7}
 8015716:	b0ab      	sub	sp, #172	; 0xac
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	607a      	str	r2, [r7, #4]
 8015720:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	68ba      	ldr	r2, [r7, #8]
 8015730:	fb02 f303 	mul.w	r3, r2, r3
 8015734:	00db      	lsls	r3, r3, #3
 8015736:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801573a:	441a      	add	r2, r3
 801573c:	f107 0318 	add.w	r3, r7, #24
 8015740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015744:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	fb02 f303 	mul.w	r3, r2, r3
 8015750:	011b      	lsls	r3, r3, #4
 8015752:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8015756:	441a      	add	r2, r3
 8015758:	f107 0310 	add.w	r3, r7, #16
 801575c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015760:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	00db      	lsls	r3, r3, #3
 801576e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015772:	4413      	add	r3, r2
 8015774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	011b      	lsls	r3, r3, #4
 801577c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015780:	4413      	add	r3, r2
 8015782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 8015786:	683a      	ldr	r2, [r7, #0]
 8015788:	4613      	mov	r3, r2
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	4413      	add	r3, r2
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	461a      	mov	r2, r3
 8015792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015796:	4413      	add	r3, r2
 8015798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	015b      	lsls	r3, r3, #5
 80157a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80157a4:	4413      	add	r3, r2
 80157a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80157b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 80157b4:	2300      	movs	r3, #0
 80157b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80157ba:	e2a7      	b.n	8015d0c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 80157bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80157c0:	f107 0320 	add.w	r3, r7, #32
 80157c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80157c8:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80157cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80157d0:	ed93 7a00 	vldr	s14, [r3]
 80157d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157d8:	68ba      	ldr	r2, [r7, #8]
 80157da:	fb02 f303 	mul.w	r3, r2, r3
 80157de:	00db      	lsls	r3, r3, #3
 80157e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80157e4:	4413      	add	r3, r2
 80157e6:	edd3 7a00 	vldr	s15, [r3]
 80157ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80157f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80157f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80157fa:	68ba      	ldr	r2, [r7, #8]
 80157fc:	fb02 f303 	mul.w	r3, r2, r3
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015806:	4413      	add	r3, r2
 8015808:	edd3 7a01 	vldr	s15, [r3, #4]
 801580c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015814:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015818:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801581c:	ed93 7a00 	vldr	s14, [r3]
 8015820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015824:	68ba      	ldr	r2, [r7, #8]
 8015826:	fb02 f303 	mul.w	r3, r2, r3
 801582a:	00db      	lsls	r3, r3, #3
 801582c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015830:	4413      	add	r3, r2
 8015832:	edd3 7a01 	vldr	s15, [r3, #4]
 8015836:	ee27 7a27 	vmul.f32	s14, s14, s15
 801583a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801583e:	edd3 6a01 	vldr	s13, [r3, #4]
 8015842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015846:	68ba      	ldr	r2, [r7, #8]
 8015848:	fb02 f303 	mul.w	r3, r2, r3
 801584c:	00db      	lsls	r3, r3, #3
 801584e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015852:	4413      	add	r3, r2
 8015854:	edd3 7a00 	vldr	s15, [r3]
 8015858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801585c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015860:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 8015864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015868:	ed93 7a00 	vldr	s14, [r3]
 801586c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015870:	68ba      	ldr	r2, [r7, #8]
 8015872:	fb02 f303 	mul.w	r3, r2, r3
 8015876:	011b      	lsls	r3, r3, #4
 8015878:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801587c:	4413      	add	r3, r2
 801587e:	edd3 7a00 	vldr	s15, [r3]
 8015882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801588a:	edd3 6a01 	vldr	s13, [r3, #4]
 801588e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015892:	68ba      	ldr	r2, [r7, #8]
 8015894:	fb02 f303 	mul.w	r3, r2, r3
 8015898:	011b      	lsls	r3, r3, #4
 801589a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801589e:	4413      	add	r3, r2
 80158a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80158a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80158a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158ac:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80158b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80158b4:	ed93 7a00 	vldr	s14, [r3]
 80158b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80158bc:	68ba      	ldr	r2, [r7, #8]
 80158be:	fb02 f303 	mul.w	r3, r2, r3
 80158c2:	011b      	lsls	r3, r3, #4
 80158c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80158c8:	4413      	add	r3, r2
 80158ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80158ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80158d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80158d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80158da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80158de:	68ba      	ldr	r2, [r7, #8]
 80158e0:	fb02 f303 	mul.w	r3, r2, r3
 80158e4:	011b      	lsls	r3, r3, #4
 80158e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80158ea:	4413      	add	r3, r2
 80158ec:	edd3 7a00 	vldr	s15, [r3]
 80158f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80158f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80158f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 80158fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015900:	ed93 7a00 	vldr	s14, [r3]
 8015904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015908:	68ba      	ldr	r2, [r7, #8]
 801590a:	fb03 f202 	mul.w	r2, r3, r2
 801590e:	4613      	mov	r3, r2
 8015910:	005b      	lsls	r3, r3, #1
 8015912:	4413      	add	r3, r2
 8015914:	00db      	lsls	r3, r3, #3
 8015916:	461a      	mov	r2, r3
 8015918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801591c:	4413      	add	r3, r2
 801591e:	edd3 7a00 	vldr	s15, [r3]
 8015922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801592a:	edd3 6a01 	vldr	s13, [r3, #4]
 801592e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	fb03 f202 	mul.w	r2, r3, r2
 8015938:	4613      	mov	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	4413      	add	r3, r2
 801593e:	00db      	lsls	r3, r3, #3
 8015940:	461a      	mov	r2, r3
 8015942:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015946:	4413      	add	r3, r2
 8015948:	edd3 7a01 	vldr	s15, [r3, #4]
 801594c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015954:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8015958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801595c:	ed93 7a00 	vldr	s14, [r3]
 8015960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015964:	68ba      	ldr	r2, [r7, #8]
 8015966:	fb03 f202 	mul.w	r2, r3, r2
 801596a:	4613      	mov	r3, r2
 801596c:	005b      	lsls	r3, r3, #1
 801596e:	4413      	add	r3, r2
 8015970:	00db      	lsls	r3, r3, #3
 8015972:	461a      	mov	r2, r3
 8015974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015978:	4413      	add	r3, r2
 801597a:	edd3 7a01 	vldr	s15, [r3, #4]
 801597e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015986:	edd3 6a01 	vldr	s13, [r3, #4]
 801598a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801598e:	68ba      	ldr	r2, [r7, #8]
 8015990:	fb03 f202 	mul.w	r2, r3, r2
 8015994:	4613      	mov	r3, r2
 8015996:	005b      	lsls	r3, r3, #1
 8015998:	4413      	add	r3, r2
 801599a:	00db      	lsls	r3, r3, #3
 801599c:	461a      	mov	r2, r3
 801599e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80159a2:	4413      	add	r3, r2
 80159a4:	edd3 7a00 	vldr	s15, [r3]
 80159a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80159b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80159b8:	ed93 7a00 	vldr	s14, [r3]
 80159bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80159c0:	68ba      	ldr	r2, [r7, #8]
 80159c2:	fb02 f303 	mul.w	r3, r2, r3
 80159c6:	015b      	lsls	r3, r3, #5
 80159c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80159cc:	4413      	add	r3, r2
 80159ce:	edd3 7a00 	vldr	s15, [r3]
 80159d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80159d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80159da:	edd3 6a01 	vldr	s13, [r3, #4]
 80159de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	fb02 f303 	mul.w	r3, r2, r3
 80159e8:	015b      	lsls	r3, r3, #5
 80159ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80159ee:	4413      	add	r3, r2
 80159f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80159f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80159f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8015a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a04:	ed93 7a00 	vldr	s14, [r3]
 8015a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a0c:	68ba      	ldr	r2, [r7, #8]
 8015a0e:	fb02 f303 	mul.w	r3, r2, r3
 8015a12:	015b      	lsls	r3, r3, #5
 8015a14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a18:	4413      	add	r3, r2
 8015a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015a26:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	fb02 f303 	mul.w	r3, r2, r3
 8015a34:	015b      	lsls	r3, r3, #5
 8015a36:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015a3a:	4413      	add	r3, r2
 8015a3c:	edd3 7a00 	vldr	s15, [r3]
 8015a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a48:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8015a4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015a50:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8015a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a58:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8015a5c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015a60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a68:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8015a6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015a70:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8015a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a78:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8015a7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015a80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a88:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 8015a8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015a90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a98:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8015a9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8015aa0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aa8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 8015aac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015ab0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8015ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ab8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 8015abc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8015ac0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015ac8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 8015acc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ad0:	ed93 7a00 	vldr	s14, [r3]
 8015ad4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015ad8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015ae8:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8015aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015af0:	ed93 7a01 	vldr	s14, [r3, #4]
 8015af4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015af8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8015afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015b08:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8015b0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015b10:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015b14:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b20:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8015b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b30:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 8015b34:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015b38:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b48:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8015b4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8015b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b58:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8015b5c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8015b60:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b68:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8015b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b78:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8015b7c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8015b80:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b88:	eeb1 7a67 	vneg.f32	s14, s15
 8015b8c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8015b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8015b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b9c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 8015ba0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015ba4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015bb0:	edc3 7a00 	vstr	s15, [r3]
 8015bb4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015bb8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015bc4:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 8015bc8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015bcc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8015bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015bd8:	edc3 7a00 	vstr	s15, [r3]
 8015bdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8015be0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8015be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015be8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015bec:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8015bf0:	ed97 7a08 	vldr	s14, [r7, #32]
 8015bf4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8015bf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8015bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c04:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8015c08:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c14:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8015c18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015c1c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8015c20:	edd7 7a04 	vldr	s15, [r7, #16]
 8015c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c2c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8015c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c3c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8015c40:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8015c44:	edd7 7a07 	vldr	s15, [r7, #28]
 8015c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c4c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8015c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8015c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c5c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8015c60:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8015c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8015c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c6c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8015c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8015c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c7c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8015c80:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8015c84:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c90:	edc3 7a00 	vstr	s15, [r3]
 8015c94:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015c98:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ca4:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 8015ca8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8015cac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015cb8:	edc3 7a00 	vstr	s15, [r3]
 8015cbc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8015cc0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8015cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015ccc:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 8015cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015cd4:	3308      	adds	r3, #8
 8015cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015cde:	3308      	adds	r3, #8
 8015ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015ce8:	3308      	adds	r3, #8
 8015cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015cf2:	3308      	adds	r3, #8
 8015cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015cf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015cfc:	3308      	adds	r3, #8
 8015cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 8015d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015d06:	3301      	adds	r3, #1
 8015d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015d0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	429a      	cmp	r2, r3
 8015d14:	f6ff ad52 	blt.w	80157bc <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 8015d18:	bf00      	nop
 8015d1a:	bf00      	nop
 8015d1c:	37ac      	adds	r7, #172	; 0xac
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d24:	4770      	bx	lr

08015d26 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b08e      	sub	sp, #56	; 0x38
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	60f8      	str	r0, [r7, #12]
 8015d2e:	60b9      	str	r1, [r7, #8]
 8015d30:	607a      	str	r2, [r7, #4]
 8015d32:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015d3a:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 8015d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d44:	00db      	lsls	r3, r3, #3
 8015d46:	4618      	mov	r0, r3
 8015d48:	f000 fe92 	bl	8016a70 <_Z9ei_mallocj>
 8015d4c:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8015d4e:	2300      	movs	r3, #0
 8015d50:	637b      	str	r3, [r7, #52]	; 0x34
 8015d52:	e0b4      	b.n	8015ebe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 8015d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d56:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015d58:	2300      	movs	r3, #0
 8015d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d5c:	e013      	b.n	8015d86 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	00db      	lsls	r3, r3, #3
 8015d62:	68fa      	ldr	r2, [r7, #12]
 8015d64:	18d1      	adds	r1, r2, r3
 8015d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	69ba      	ldr	r2, [r7, #24]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	460a      	mov	r2, r1
 8015d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d74:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8015d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	4413      	add	r3, r2
 8015d7e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d82:	3301      	adds	r3, #1
 8015d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	dbe7      	blt.n	8015d5e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 8015d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d90:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015d92:	2300      	movs	r3, #0
 8015d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d96:	e08a      	b.n	8015eae <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 8015d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9e:	00db      	lsls	r3, r3, #3
 8015da0:	68fa      	ldr	r2, [r7, #12]
 8015da2:	4413      	add	r3, r2
 8015da4:	69ba      	ldr	r2, [r7, #24]
 8015da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015daa:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 8015dae:	2301      	movs	r3, #1
 8015db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8015db2:	e071      	b.n	8015e98 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 8015db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db6:	68ba      	ldr	r2, [r7, #8]
 8015db8:	fb03 f202 	mul.w	r2, r3, r2
 8015dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbe:	4413      	add	r3, r2
 8015dc0:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 8015dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	db03      	blt.n	8015dd2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 8015dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dcc:	69fb      	ldr	r3, [r7, #28]
 8015dce:	1ad3      	subs	r3, r2, r3
 8015dd0:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 8015dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd4:	00db      	lsls	r3, r3, #3
 8015dd6:	69ba      	ldr	r2, [r7, #24]
 8015dd8:	4413      	add	r3, r2
 8015dda:	ed93 7a00 	vldr	s14, [r3]
 8015dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de0:	00db      	lsls	r3, r3, #3
 8015de2:	6a3a      	ldr	r2, [r7, #32]
 8015de4:	4413      	add	r3, r2
 8015de6:	edd3 7a00 	vldr	s15, [r3]
 8015dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df0:	00db      	lsls	r3, r3, #3
 8015df2:	69ba      	ldr	r2, [r7, #24]
 8015df4:	4413      	add	r3, r2
 8015df6:	edd3 6a01 	vldr	s13, [r3, #4]
 8015dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfc:	00db      	lsls	r3, r3, #3
 8015dfe:	6a3a      	ldr	r2, [r7, #32]
 8015e00:	4413      	add	r3, r2
 8015e02:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e0e:	edc7 7a04 	vstr	s15, [r7, #16]
 8015e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e14:	00db      	lsls	r3, r3, #3
 8015e16:	69ba      	ldr	r2, [r7, #24]
 8015e18:	4413      	add	r3, r2
 8015e1a:	ed93 7a00 	vldr	s14, [r3]
 8015e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e20:	00db      	lsls	r3, r3, #3
 8015e22:	6a3a      	ldr	r2, [r7, #32]
 8015e24:	4413      	add	r3, r2
 8015e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	69ba      	ldr	r2, [r7, #24]
 8015e34:	4413      	add	r3, r2
 8015e36:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3c:	00db      	lsls	r3, r3, #3
 8015e3e:	6a3a      	ldr	r2, [r7, #32]
 8015e40:	4413      	add	r3, r2
 8015e42:	edd3 7a00 	vldr	s15, [r3]
 8015e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e4e:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 8015e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e54:	00db      	lsls	r3, r3, #3
 8015e56:	68fa      	ldr	r2, [r7, #12]
 8015e58:	4413      	add	r3, r2
 8015e5a:	ed93 7a00 	vldr	s14, [r3]
 8015e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e64:	00db      	lsls	r3, r3, #3
 8015e66:	68fa      	ldr	r2, [r7, #12]
 8015e68:	4413      	add	r3, r2
 8015e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e6e:	edc3 7a00 	vstr	s15, [r3]
 8015e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e74:	00db      	lsls	r3, r3, #3
 8015e76:	68fa      	ldr	r2, [r7, #12]
 8015e78:	4413      	add	r3, r2
 8015e7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8015e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8015e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e84:	00db      	lsls	r3, r3, #3
 8015e86:	68fa      	ldr	r2, [r7, #12]
 8015e88:	4413      	add	r3, r2
 8015e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e8e:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 8015e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e94:	3301      	adds	r3, #1
 8015e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	db89      	blt.n	8015db4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 8015ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8015ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eaa:	3301      	adds	r3, #1
 8015eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	f6ff af70 	blt.w	8015d98 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 8015eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eba:	3301      	adds	r3, #1
 8015ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8015ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	f6ff af46 	blt.w	8015d54 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 8015ec8:	69b8      	ldr	r0, [r7, #24]
 8015eca:	f000 fdeb 	bl	8016aa4 <_Z7ei_freePv>
}
 8015ece:	bf00      	nop
 8015ed0:	3738      	adds	r7, #56	; 0x38
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
	...

08015ed8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b08a      	sub	sp, #40	; 0x28
 8015edc:	af02      	add	r7, sp, #8
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	607a      	str	r2, [r7, #4]
 8015ee4:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	1d1a      	adds	r2, r3, #4
 8015eee:	62ba      	str	r2, [r7, #40]	; 0x28
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 8015ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef6:	1d1a      	adds	r2, r3, #4
 8015ef8:	62ba      	str	r2, [r7, #40]	; 0x28
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	697a      	ldr	r2, [r7, #20]
 8015f02:	fb02 f303 	mul.w	r3, r2, r3
 8015f06:	00db      	lsls	r3, r3, #3
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	2b01      	cmp	r3, #1
 8015f12:	d11a      	bne.n	8015f4a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	68ba      	ldr	r2, [r7, #8]
 8015f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f1c:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	fb02 f303 	mul.w	r3, r2, r3
 8015f28:	00db      	lsls	r3, r3, #3
 8015f2a:	68ba      	ldr	r2, [r7, #8]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	3308      	adds	r3, #8
 8015f34:	60fb      	str	r3, [r7, #12]
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	bf14      	ite	ne
 8015f3e:	2301      	movne	r3, #1
 8015f40:	2300      	moveq	r3, #0
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d1e5      	bne.n	8015f14 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 8015f48:	e022      	b.n	8015f90 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	fb03 f202 	mul.w	r2, r3, r2
 8015f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f54:	9301      	str	r3, [sp, #4]
 8015f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	68b9      	ldr	r1, [r7, #8]
 8015f5e:	68f8      	ldr	r0, [r7, #12]
 8015f60:	f7ff ffba 	bl	8015ed8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	fb02 f303 	mul.w	r3, r2, r3
 8015f6c:	00db      	lsls	r3, r3, #3
 8015f6e:	68ba      	ldr	r2, [r7, #8]
 8015f70:	4413      	add	r3, r2
 8015f72:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	00db      	lsls	r3, r3, #3
 8015f78:	68fa      	ldr	r2, [r7, #12]
 8015f7a:	4413      	add	r3, r2
 8015f7c:	60fb      	str	r3, [r7, #12]
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	bf14      	ite	ne
 8015f86:	2301      	movne	r3, #1
 8015f88:	2300      	moveq	r3, #0
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1dc      	bne.n	8015f4a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	3b02      	subs	r3, #2
 8015f98:	2b03      	cmp	r3, #3
 8015f9a:	d827      	bhi.n	8015fec <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 8015f9c:	a201      	add	r2, pc, #4	; (adr r2, 8015fa4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 8015f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fa2:	bf00      	nop
 8015fa4:	08015fb5 	.word	0x08015fb5
 8015fa8:	08015fc3 	.word	0x08015fc3
 8015fac:	08015fd1 	.word	0x08015fd1
 8015fb0:	08015fdf 	.word	0x08015fdf
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fb8:	6879      	ldr	r1, [r7, #4]
 8015fba:	68f8      	ldr	r0, [r7, #12]
 8015fbc:	f7ff f805 	bl	8014fca <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 8015fc0:	e01d      	b.n	8015ffe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fc6:	6879      	ldr	r1, [r7, #4]
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f7ff fa33 	bl	8015434 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 8015fce:	e016      	b.n	8015ffe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fd4:	6879      	ldr	r1, [r7, #4]
 8015fd6:	68f8      	ldr	r0, [r7, #12]
 8015fd8:	f7ff f874 	bl	80150c4 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 8015fdc:	e00f      	b.n	8015ffe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fe2:	6879      	ldr	r1, [r7, #4]
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7ff fb95 	bl	8015714 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8015fea:	e008      	b.n	8015ffe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ff4:	6879      	ldr	r1, [r7, #4]
 8015ff6:	68f8      	ldr	r0, [r7, #12]
 8015ff8:	f7ff fe95 	bl	8015d26 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8015ffc:	bf00      	nop
    }
}
 8015ffe:	bf00      	nop
 8016000:	3720      	adds	r7, #32
 8016002:	46bd      	mov	sp, r7
 8016004:	bd80      	pop	{r7, pc}
 8016006:	bf00      	nop

08016008 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b086      	sub	sp, #24
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
    int p=4;
 8016012:	2304      	movs	r3, #4
 8016014:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7ea fab4 	bl	8000584 <__aeabi_i2d>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	ec43 2b10 	vmov	d0, r2, r3
 8016024:	f003 fc56 	bl	80198d4 <sqrt>
 8016028:	eeb0 7a40 	vmov.f32	s14, s0
 801602c:	eef0 7a60 	vmov.f32	s15, s1
 8016030:	eeb0 0a47 	vmov.f32	s0, s14
 8016034:	eef0 0a67 	vmov.f32	s1, s15
 8016038:	f003 ffd6 	bl	8019fe8 <floor>
 801603c:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8016040:	e01e      	b.n	8016080 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 8016042:	697b      	ldr	r3, [r7, #20]
 8016044:	2b02      	cmp	r3, #2
 8016046:	d005      	beq.n	8016054 <_ZL9kf_factoriPi+0x4c>
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	2b04      	cmp	r3, #4
 801604c:	d105      	bne.n	801605a <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 801604e:	2302      	movs	r3, #2
 8016050:	617b      	str	r3, [r7, #20]
 8016052:	e006      	b.n	8016062 <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 8016054:	2303      	movs	r3, #3
 8016056:	617b      	str	r3, [r7, #20]
 8016058:	e003      	b.n	8016062 <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	3302      	adds	r3, #2
 801605e:	617b      	str	r3, [r7, #20]
 8016060:	bf00      	nop
            }
            if (p > floor_sqrt)
 8016062:	6978      	ldr	r0, [r7, #20]
 8016064:	f7ea fa8e 	bl	8000584 <__aeabi_i2d>
 8016068:	4602      	mov	r2, r0
 801606a:	460b      	mov	r3, r1
 801606c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016070:	f7ea fd64 	bl	8000b3c <__aeabi_dcmplt>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	d100      	bne.n	801607c <_ZL9kf_factoriPi+0x74>
 801607a:	e001      	b.n	8016080 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	697a      	ldr	r2, [r7, #20]
 8016084:	fb93 f2f2 	sdiv	r2, r3, r2
 8016088:	6979      	ldr	r1, [r7, #20]
 801608a:	fb01 f202 	mul.w	r2, r1, r2
 801608e:	1a9b      	subs	r3, r3, r2
 8016090:	2b00      	cmp	r3, #0
 8016092:	d1d6      	bne.n	8016042 <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	fb92 f3f3 	sdiv	r3, r2, r3
 801609c:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	1d1a      	adds	r2, r3, #4
 80160a2:	603a      	str	r2, [r7, #0]
 80160a4:	697a      	ldr	r2, [r7, #20]
 80160a6:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	1d1a      	adds	r2, r3, #4
 80160ac:	603a      	str	r2, [r7, #0]
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2b01      	cmp	r3, #1
 80160b6:	dce3      	bgt.n	8016080 <_ZL9kf_factoriPi+0x78>
}
 80160b8:	bf00      	nop
 80160ba:	bf00      	nop
 80160bc:	3718      	adds	r7, #24
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	0000      	movs	r0, r0
 80160c4:	0000      	movs	r0, r0
	...

080160c8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80160c8:	b5b0      	push	{r4, r5, r7, lr}
 80160ca:	b090      	sub	sp, #64	; 0x40
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 80160d6:	2300      	movs	r3, #0
 80160d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 80160de:	00db      	lsls	r3, r3, #3
 80160e0:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d104      	bne.n	80160f2 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 80160e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80160ea:	f000 fcc1 	bl	8016a70 <_Z9ei_mallocj>
 80160ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80160f0:	e00c      	b.n	801610c <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d006      	beq.n	8016106 <kiss_fft_alloc+0x3e>
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160fe:	429a      	cmp	r2, r3
 8016100:	d801      	bhi.n	8016106 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801610a:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 801610c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801610e:	2b00      	cmp	r3, #0
 8016110:	f000 80a0 	beq.w	8016254 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8016114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016116:	68fa      	ldr	r2, [r7, #12]
 8016118:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 801611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801611c:	68ba      	ldr	r2, [r7, #8]
 801611e:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d048      	beq.n	80161b8 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8016126:	2300      	movs	r3, #0
 8016128:	63bb      	str	r3, [r7, #56]	; 0x38
 801612a:	e040      	b.n	80161ae <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 801612c:	a350      	add	r3, pc, #320	; (adr r3, 8016270 <kiss_fft_alloc+0x1a8>)
 801612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016132:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8016136:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016138:	f7ea fa24 	bl	8000584 <__aeabi_i2d>
 801613c:	a34e      	add	r3, pc, #312	; (adr r3, 8016278 <kiss_fft_alloc+0x1b0>)
 801613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016142:	f7ea fa89 	bl	8000658 <__aeabi_dmul>
 8016146:	4602      	mov	r2, r0
 8016148:	460b      	mov	r3, r1
 801614a:	4614      	mov	r4, r2
 801614c:	461d      	mov	r5, r3
 801614e:	68f8      	ldr	r0, [r7, #12]
 8016150:	f7ea fa18 	bl	8000584 <__aeabi_i2d>
 8016154:	4602      	mov	r2, r0
 8016156:	460b      	mov	r3, r1
 8016158:	4620      	mov	r0, r4
 801615a:	4629      	mov	r1, r5
 801615c:	f7ea fba6 	bl	80008ac <__aeabi_ddiv>
 8016160:	4602      	mov	r2, r0
 8016162:	460b      	mov	r3, r1
 8016164:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8016168:	ed97 0b04 	vldr	d0, [r7, #16]
 801616c:	f003 fbe0 	bl	8019930 <cos>
 8016170:	ec51 0b10 	vmov	r0, r1, d0
 8016174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016176:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801617c:	00db      	lsls	r3, r3, #3
 801617e:	18d4      	adds	r4, r2, r3
 8016180:	f7ea fd62 	bl	8000c48 <__aeabi_d2f>
 8016184:	4603      	mov	r3, r0
 8016186:	6023      	str	r3, [r4, #0]
 8016188:	ed97 0b04 	vldr	d0, [r7, #16]
 801618c:	f003 fc5c 	bl	8019a48 <sin>
 8016190:	ec51 0b10 	vmov	r0, r1, d0
 8016194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016196:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	18d4      	adds	r4, r2, r3
 80161a0:	f7ea fd52 	bl	8000c48 <__aeabi_d2f>
 80161a4:	4603      	mov	r3, r0
 80161a6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 80161a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161aa:	3301      	adds	r3, #1
 80161ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80161ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	dbba      	blt.n	801612c <kiss_fft_alloc+0x64>
 80161b6:	e047      	b.n	8016248 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 80161b8:	2300      	movs	r3, #0
 80161ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80161bc:	e040      	b.n	8016240 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 80161be:	a32c      	add	r3, pc, #176	; (adr r3, 8016270 <kiss_fft_alloc+0x1a8>)
 80161c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 80161c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80161ca:	f7ea f9db 	bl	8000584 <__aeabi_i2d>
 80161ce:	a32c      	add	r3, pc, #176	; (adr r3, 8016280 <kiss_fft_alloc+0x1b8>)
 80161d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d4:	f7ea fa40 	bl	8000658 <__aeabi_dmul>
 80161d8:	4602      	mov	r2, r0
 80161da:	460b      	mov	r3, r1
 80161dc:	4614      	mov	r4, r2
 80161de:	461d      	mov	r5, r3
 80161e0:	68f8      	ldr	r0, [r7, #12]
 80161e2:	f7ea f9cf 	bl	8000584 <__aeabi_i2d>
 80161e6:	4602      	mov	r2, r0
 80161e8:	460b      	mov	r3, r1
 80161ea:	4620      	mov	r0, r4
 80161ec:	4629      	mov	r1, r5
 80161ee:	f7ea fb5d 	bl	80008ac <__aeabi_ddiv>
 80161f2:	4602      	mov	r2, r0
 80161f4:	460b      	mov	r3, r1
 80161f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 80161fa:	ed97 0b08 	vldr	d0, [r7, #32]
 80161fe:	f003 fb97 	bl	8019930 <cos>
 8016202:	ec51 0b10 	vmov	r0, r1, d0
 8016206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016208:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801620e:	00db      	lsls	r3, r3, #3
 8016210:	18d4      	adds	r4, r2, r3
 8016212:	f7ea fd19 	bl	8000c48 <__aeabi_d2f>
 8016216:	4603      	mov	r3, r0
 8016218:	6023      	str	r3, [r4, #0]
 801621a:	ed97 0b08 	vldr	d0, [r7, #32]
 801621e:	f003 fc13 	bl	8019a48 <sin>
 8016222:	ec51 0b10 	vmov	r0, r1, d0
 8016226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016228:	f503 7284 	add.w	r2, r3, #264	; 0x108
 801622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622e:	00db      	lsls	r3, r3, #3
 8016230:	18d4      	adds	r4, r2, r3
 8016232:	f7ea fd09 	bl	8000c48 <__aeabi_d2f>
 8016236:	4603      	mov	r3, r0
 8016238:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 801623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623c:	3301      	adds	r3, #1
 801623e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	429a      	cmp	r2, r3
 8016246:	dbba      	blt.n	80161be <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 8016248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801624a:	3308      	adds	r3, #8
 801624c:	4619      	mov	r1, r3
 801624e:	68f8      	ldr	r0, [r7, #12]
 8016250:	f7ff feda 	bl	8016008 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8016254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016256:	2b00      	cmp	r3, #0
 8016258:	d002      	beq.n	8016260 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 801625a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801625c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801625e:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016262:	4618      	mov	r0, r3
 8016264:	3740      	adds	r7, #64	; 0x40
 8016266:	46bd      	mov	sp, r7
 8016268:	bdb0      	pop	{r4, r5, r7, pc}
 801626a:	bf00      	nop
 801626c:	f3af 8000 	nop.w
 8016270:	54442d18 	.word	0x54442d18
 8016274:	400921fb 	.word	0x400921fb
 8016278:	54442d18 	.word	0x54442d18
 801627c:	401921fb 	.word	0x401921fb
 8016280:	54442d18 	.word	0x54442d18
 8016284:	c01921fb 	.word	0xc01921fb

08016288 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b088      	sub	sp, #32
 801628c:	af02      	add	r7, sp, #8
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
 8016294:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8016296:	68ba      	ldr	r2, [r7, #8]
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	429a      	cmp	r2, r3
 801629c:	d11d      	bne.n	80162da <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	4618      	mov	r0, r3
 80162a6:	f000 fbe3 	bl	8016a70 <_Z9ei_mallocj>
 80162aa:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	3308      	adds	r3, #8
 80162b0:	68fa      	ldr	r2, [r7, #12]
 80162b2:	9201      	str	r2, [sp, #4]
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	2201      	movs	r2, #1
 80162ba:	68b9      	ldr	r1, [r7, #8]
 80162bc:	6978      	ldr	r0, [r7, #20]
 80162be:	f7ff fe0b 	bl	8015ed8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	00db      	lsls	r3, r3, #3
 80162c8:	461a      	mov	r2, r3
 80162ca:	6979      	ldr	r1, [r7, #20]
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f007 fece 	bl	801e06e <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 80162d2:	6978      	ldr	r0, [r7, #20]
 80162d4:	f000 fbe6 	bl	8016aa4 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 80162d8:	e00a      	b.n	80162f0 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	3308      	adds	r3, #8
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	9201      	str	r2, [sp, #4]
 80162e2:	9300      	str	r3, [sp, #0]
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	2201      	movs	r2, #1
 80162e8:	68b9      	ldr	r1, [r7, #8]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f7ff fdf4 	bl	8015ed8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 80162f0:	bf00      	nop
 80162f2:	3718      	adds	r7, #24
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8016304:	2301      	movs	r3, #1
 8016306:	687a      	ldr	r2, [r7, #4]
 8016308:	68b9      	ldr	r1, [r7, #8]
 801630a:	68f8      	ldr	r0, [r7, #12]
 801630c:	f7ff ffbc 	bl	8016288 <kiss_fft_stride>
}
 8016310:	bf00      	nop
 8016312:	3710      	adds	r7, #16
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8016318:	b5b0      	push	{r4, r5, r7, lr}
 801631a:	b090      	sub	sp, #64	; 0x40
 801631c:	af02      	add	r7, sp, #8
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8016326:	2300      	movs	r3, #0
 8016328:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 801632a:	2300      	movs	r3, #0
 801632c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	f003 0301 	and.w	r3, r3, #1
 8016334:	2b00      	cmp	r3, #0
 8016336:	d004      	beq.n	8016342 <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8016338:	4887      	ldr	r0, [pc, #540]	; (8016558 <kiss_fftr_alloc+0x240>)
 801633a:	f7f2 fd7b 	bl	8008e34 <_Z9ei_printfPKcz>
        return NULL;
 801633e:	2300      	movs	r3, #0
 8016340:	e0fc      	b.n	801653c <kiss_fftr_alloc+0x224>
    }
    nfft >>= 1;
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	105b      	asrs	r3, r3, #1
 8016346:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8016348:	f107 0314 	add.w	r3, r7, #20
 801634c:	2200      	movs	r2, #0
 801634e:	9200      	str	r2, [sp, #0]
 8016350:	2200      	movs	r2, #0
 8016352:	68b9      	ldr	r1, [r7, #8]
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f7ff feb7 	bl	80160c8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	4613      	mov	r3, r2
 801635e:	005b      	lsls	r3, r3, #1
 8016360:	4413      	add	r3, r2
 8016362:	2b00      	cmp	r3, #0
 8016364:	da00      	bge.n	8016368 <kiss_fftr_alloc+0x50>
 8016366:	3301      	adds	r3, #1
 8016368:	105b      	asrs	r3, r3, #1
 801636a:	00da      	lsls	r2, r3, #3
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	4413      	add	r3, r2
 8016370:	330c      	adds	r3, #12
 8016372:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d104      	bne.n	8016384 <kiss_fftr_alloc+0x6c>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 801637a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801637c:	f000 fb78 	bl	8016a70 <_Z9ei_mallocj>
 8016380:	6338      	str	r0, [r7, #48]	; 0x30
 8016382:	e009      	b.n	8016398 <kiss_fftr_alloc+0x80>
    } else {
        if (*lenmem >= memneeded)
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801638a:	429a      	cmp	r2, r3
 801638c:	d801      	bhi.n	8016392 <kiss_fftr_alloc+0x7a>
            st = (kiss_fftr_cfg) mem;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016396:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8016398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639a:	2b00      	cmp	r3, #0
 801639c:	d101      	bne.n	80163a2 <kiss_fftr_alloc+0x8a>
        return NULL;
 801639e:	2300      	movs	r3, #0
 80163a0:	e0cc      	b.n	801653c <kiss_fftr_alloc+0x224>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 80163a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a4:	f103 020c 	add.w	r2, r3, #12
 80163a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163aa:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 80163ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	441a      	add	r2, r3
 80163b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b6:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 80163b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ba:	685a      	ldr	r2, [r3, #4]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	00db      	lsls	r3, r3, #3
 80163c0:	441a      	add	r2, r3
 80163c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c4:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	f107 0314 	add.w	r3, r7, #20
 80163ce:	2100      	movs	r1, #0
 80163d0:	9100      	str	r1, [sp, #0]
 80163d2:	68b9      	ldr	r1, [r7, #8]
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f7ff fe77 	bl	80160c8 <kiss_fft_alloc>

    if (inverse_fft) {
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d053      	beq.n	8016488 <kiss_fftr_alloc+0x170>
        for (i = 0; i < nfft/2; ++i) {
 80163e0:	2300      	movs	r3, #0
 80163e2:	637b      	str	r3, [r7, #52]	; 0x34
 80163e4:	e046      	b.n	8016474 <kiss_fftr_alloc+0x15c>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 80163e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e8:	3301      	adds	r3, #1
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7ea f8ca 	bl	8000584 <__aeabi_i2d>
 80163f0:	4604      	mov	r4, r0
 80163f2:	460d      	mov	r5, r1
 80163f4:	68f8      	ldr	r0, [r7, #12]
 80163f6:	f7ea f8c5 	bl	8000584 <__aeabi_i2d>
 80163fa:	4602      	mov	r2, r0
 80163fc:	460b      	mov	r3, r1
 80163fe:	4620      	mov	r0, r4
 8016400:	4629      	mov	r1, r5
 8016402:	f7ea fa53 	bl	80008ac <__aeabi_ddiv>
 8016406:	4602      	mov	r2, r0
 8016408:	460b      	mov	r3, r1
 801640a:	4610      	mov	r0, r2
 801640c:	4619      	mov	r1, r3
 801640e:	f04f 0200 	mov.w	r2, #0
 8016412:	4b52      	ldr	r3, [pc, #328]	; (801655c <kiss_fftr_alloc+0x244>)
 8016414:	f7e9 ff6a 	bl	80002ec <__adddf3>
 8016418:	4602      	mov	r2, r0
 801641a:	460b      	mov	r3, r1
 801641c:	4610      	mov	r0, r2
 801641e:	4619      	mov	r1, r3
            double phase =
 8016420:	a349      	add	r3, pc, #292	; (adr r3, 8016548 <kiss_fftr_alloc+0x230>)
 8016422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016426:	f7ea f917 	bl	8000658 <__aeabi_dmul>
 801642a:	4602      	mov	r2, r0
 801642c:	460b      	mov	r3, r1
 801642e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8016432:	ed97 0b06 	vldr	d0, [r7, #24]
 8016436:	f003 fa7b 	bl	8019930 <cos>
 801643a:	ec51 0b10 	vmov	r0, r1, d0
 801643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016440:	689a      	ldr	r2, [r3, #8]
 8016442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016444:	00db      	lsls	r3, r3, #3
 8016446:	18d4      	adds	r4, r2, r3
 8016448:	f7ea fbfe 	bl	8000c48 <__aeabi_d2f>
 801644c:	4603      	mov	r3, r0
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	ed97 0b06 	vldr	d0, [r7, #24]
 8016454:	f003 faf8 	bl	8019a48 <sin>
 8016458:	ec51 0b10 	vmov	r0, r1, d0
 801645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645e:	689a      	ldr	r2, [r3, #8]
 8016460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016462:	00db      	lsls	r3, r3, #3
 8016464:	18d4      	adds	r4, r2, r3
 8016466:	f7ea fbef 	bl	8000c48 <__aeabi_d2f>
 801646a:	4603      	mov	r3, r0
 801646c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 801646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016470:	3301      	adds	r3, #1
 8016472:	637b      	str	r3, [r7, #52]	; 0x34
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2b00      	cmp	r3, #0
 8016478:	da00      	bge.n	801647c <kiss_fftr_alloc+0x164>
 801647a:	3301      	adds	r3, #1
 801647c:	105b      	asrs	r3, r3, #1
 801647e:	461a      	mov	r2, r3
 8016480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016482:	4293      	cmp	r3, r2
 8016484:	dbaf      	blt.n	80163e6 <kiss_fftr_alloc+0xce>
 8016486:	e052      	b.n	801652e <kiss_fftr_alloc+0x216>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8016488:	2300      	movs	r3, #0
 801648a:	637b      	str	r3, [r7, #52]	; 0x34
 801648c:	e046      	b.n	801651c <kiss_fftr_alloc+0x204>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 801648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016490:	3301      	adds	r3, #1
 8016492:	4618      	mov	r0, r3
 8016494:	f7ea f876 	bl	8000584 <__aeabi_i2d>
 8016498:	4604      	mov	r4, r0
 801649a:	460d      	mov	r5, r1
 801649c:	68f8      	ldr	r0, [r7, #12]
 801649e:	f7ea f871 	bl	8000584 <__aeabi_i2d>
 80164a2:	4602      	mov	r2, r0
 80164a4:	460b      	mov	r3, r1
 80164a6:	4620      	mov	r0, r4
 80164a8:	4629      	mov	r1, r5
 80164aa:	f7ea f9ff 	bl	80008ac <__aeabi_ddiv>
 80164ae:	4602      	mov	r2, r0
 80164b0:	460b      	mov	r3, r1
 80164b2:	4610      	mov	r0, r2
 80164b4:	4619      	mov	r1, r3
 80164b6:	f04f 0200 	mov.w	r2, #0
 80164ba:	4b28      	ldr	r3, [pc, #160]	; (801655c <kiss_fftr_alloc+0x244>)
 80164bc:	f7e9 ff16 	bl	80002ec <__adddf3>
 80164c0:	4602      	mov	r2, r0
 80164c2:	460b      	mov	r3, r1
 80164c4:	4610      	mov	r0, r2
 80164c6:	4619      	mov	r1, r3
            double phase =
 80164c8:	a321      	add	r3, pc, #132	; (adr r3, 8016550 <kiss_fftr_alloc+0x238>)
 80164ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ce:	f7ea f8c3 	bl	8000658 <__aeabi_dmul>
 80164d2:	4602      	mov	r2, r0
 80164d4:	460b      	mov	r3, r1
 80164d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 80164da:	ed97 0b08 	vldr	d0, [r7, #32]
 80164de:	f003 fa27 	bl	8019930 <cos>
 80164e2:	ec51 0b10 	vmov	r0, r1, d0
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	689a      	ldr	r2, [r3, #8]
 80164ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	18d4      	adds	r4, r2, r3
 80164f0:	f7ea fbaa 	bl	8000c48 <__aeabi_d2f>
 80164f4:	4603      	mov	r3, r0
 80164f6:	6023      	str	r3, [r4, #0]
 80164f8:	ed97 0b08 	vldr	d0, [r7, #32]
 80164fc:	f003 faa4 	bl	8019a48 <sin>
 8016500:	ec51 0b10 	vmov	r0, r1, d0
 8016504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016506:	689a      	ldr	r2, [r3, #8]
 8016508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650a:	00db      	lsls	r3, r3, #3
 801650c:	18d4      	adds	r4, r2, r3
 801650e:	f7ea fb9b 	bl	8000c48 <__aeabi_d2f>
 8016512:	4603      	mov	r3, r0
 8016514:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8016516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016518:	3301      	adds	r3, #1
 801651a:	637b      	str	r3, [r7, #52]	; 0x34
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	2b00      	cmp	r3, #0
 8016520:	da00      	bge.n	8016524 <kiss_fftr_alloc+0x20c>
 8016522:	3301      	adds	r3, #1
 8016524:	105b      	asrs	r3, r3, #1
 8016526:	461a      	mov	r2, r3
 8016528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652a:	4293      	cmp	r3, r2
 801652c:	dbaf      	blt.n	801648e <kiss_fftr_alloc+0x176>
        }
    }

    if (memallocated != NULL) {
 801652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016530:	2b00      	cmp	r3, #0
 8016532:	d002      	beq.n	801653a <kiss_fftr_alloc+0x222>
        *memallocated = memneeded;
 8016534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016538:	601a      	str	r2, [r3, #0]
    }

    return st;
 801653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801653c:	4618      	mov	r0, r3
 801653e:	3738      	adds	r7, #56	; 0x38
 8016540:	46bd      	mov	sp, r7
 8016542:	bdb0      	pop	{r4, r5, r7, pc}
 8016544:	f3af 8000 	nop.w
 8016548:	54442d18 	.word	0x54442d18
 801654c:	400921fb 	.word	0x400921fb
 8016550:	54442d18 	.word	0x54442d18
 8016554:	c00921fb 	.word	0xc00921fb
 8016558:	08021110 	.word	0x08021110
 801655c:	3fe00000 	.word	0x3fe00000

08016560 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b092      	sub	sp, #72	; 0x48
 8016564:	af00      	add	r7, sp, #0
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	685b      	ldr	r3, [r3, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d002      	beq.n	801657c <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8016576:	4888      	ldr	r0, [pc, #544]	; (8016798 <kiss_fftr+0x238>)
 8016578:	f7f2 fc5c 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	6818      	ldr	r0, [r3, #0]
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	461a      	mov	r2, r3
 801658e:	68b9      	ldr	r1, [r7, #8]
 8016590:	f7ff feb2 	bl	80162f8 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	685b      	ldr	r3, [r3, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 80165a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80165a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80165ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 80165b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80165ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80165be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	4413      	add	r3, r2
 80165c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165ca:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f04f 0200 	mov.w	r2, #0
 80165d4:	605a      	str	r2, [r3, #4]
 80165d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165d8:	00db      	lsls	r3, r3, #3
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	4413      	add	r3, r2
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	6852      	ldr	r2, [r2, #4]
 80165e2:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 80165e4:	2301      	movs	r3, #1
 80165e6:	647b      	str	r3, [r7, #68]	; 0x44
 80165e8:	e0c7      	b.n	801677a <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	685a      	ldr	r2, [r3, #4]
 80165ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165f0:	00db      	lsls	r3, r3, #3
 80165f2:	441a      	add	r2, r3
 80165f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80165f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165fc:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	685a      	ldr	r2, [r3, #4]
 8016604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016608:	1acb      	subs	r3, r1, r3
 801660a:	00db      	lsls	r3, r3, #3
 801660c:	4413      	add	r3, r2
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	685a      	ldr	r2, [r3, #4]
 8016616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801661a:	1acb      	subs	r3, r1, r3
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	4413      	add	r3, r2
 8016620:	edd3 7a01 	vldr	s15, [r3, #4]
 8016624:	eef1 7a67 	vneg.f32	s15, s15
 8016628:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 801662c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016630:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016638:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 801663c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016640:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016648:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 801664c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016650:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016658:	edc7 7a08 	vstr	s15, [r7, #32]
 801665c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016660:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016668:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 801666c:	ed97 7a08 	vldr	s14, [r7, #32]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	689a      	ldr	r2, [r3, #8]
 8016674:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016676:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801667a:	440b      	add	r3, r1
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	4413      	add	r3, r2
 8016680:	edd3 7a00 	vldr	s15, [r3]
 8016684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016688:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	689a      	ldr	r2, [r3, #8]
 8016690:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016692:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016696:	440b      	add	r3, r1
 8016698:	00db      	lsls	r3, r3, #3
 801669a:	4413      	add	r3, r2
 801669c:	edd3 7a01 	vldr	s15, [r3, #4]
 80166a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80166a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80166a8:	edc7 7a06 	vstr	s15, [r7, #24]
 80166ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	689a      	ldr	r2, [r3, #8]
 80166b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80166b6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80166ba:	440b      	add	r3, r1
 80166bc:	00db      	lsls	r3, r3, #3
 80166be:	4413      	add	r3, r2
 80166c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80166c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80166c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	689a      	ldr	r2, [r3, #8]
 80166d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80166d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80166d6:	440b      	add	r3, r1
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	4413      	add	r3, r2
 80166dc:	edd3 7a00 	vldr	s15, [r3]
 80166e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80166e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166e8:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 80166ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80166f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80166f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	4413      	add	r3, r2
 8016700:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016708:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 801670c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016710:	edd7 7a07 	vldr	s15, [r7, #28]
 8016714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801671a:	00db      	lsls	r3, r3, #3
 801671c:	687a      	ldr	r2, [r7, #4]
 801671e:	4413      	add	r3, r2
 8016720:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016728:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 801672c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016730:	edd7 7a06 	vldr	s15, [r7, #24]
 8016734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801673a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801673c:	1ad3      	subs	r3, r2, r3
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	4413      	add	r3, r2
 8016744:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016748:	ee67 7a87 	vmul.f32	s15, s15, s14
 801674c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8016750:	ed97 7a07 	vldr	s14, [r7, #28]
 8016754:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016758:	ee77 7a67 	vsub.f32	s15, s14, s15
 801675c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016760:	1ad3      	subs	r3, r2, r3
 8016762:	00db      	lsls	r3, r3, #3
 8016764:	687a      	ldr	r2, [r7, #4]
 8016766:	4413      	add	r3, r2
 8016768:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801676c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016770:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 8016774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016776:	3301      	adds	r3, #1
 8016778:	647b      	str	r3, [r7, #68]	; 0x44
 801677a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801677c:	2b00      	cmp	r3, #0
 801677e:	da00      	bge.n	8016782 <kiss_fftr+0x222>
 8016780:	3301      	adds	r3, #1
 8016782:	105b      	asrs	r3, r3, #1
 8016784:	461a      	mov	r2, r3
 8016786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016788:	4293      	cmp	r3, r2
 801678a:	f77f af2e 	ble.w	80165ea <kiss_fftr+0x8a>
    }
}
 801678e:	bf00      	nop
 8016790:	bf00      	nop
 8016792:	3748      	adds	r7, #72	; 0x48
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	0802112c 	.word	0x0802112c

0801679c <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80167a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80167aa:	f003 fa3d 	bl	8019c28 <log10f>
 80167ae:	eef0 7a40 	vmov.f32	s15, s0
 80167b2:	eeb0 0a67 	vmov.f32	s0, s15
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}

080167bc <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80167bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	ed87 0b00 	vstr	d0, [r7]
 80167c6:	683c      	ldr	r4, [r7, #0]
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80167ce:	2301      	movs	r3, #1
 80167d0:	461e      	mov	r6, r3
 80167d2:	f04f 32ff 	mov.w	r2, #4294967295
 80167d6:	4b10      	ldr	r3, [pc, #64]	; (8016818 <_ZSt5isinfd+0x5c>)
 80167d8:	4620      	mov	r0, r4
 80167da:	4629      	mov	r1, r5
 80167dc:	f7ea f9d6 	bl	8000b8c <__aeabi_dcmpun>
 80167e0:	4603      	mov	r3, r0
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d10b      	bne.n	80167fe <_ZSt5isinfd+0x42>
 80167e6:	f04f 32ff 	mov.w	r2, #4294967295
 80167ea:	4b0b      	ldr	r3, [pc, #44]	; (8016818 <_ZSt5isinfd+0x5c>)
 80167ec:	4620      	mov	r0, r4
 80167ee:	4629      	mov	r1, r5
 80167f0:	f7ea f9ae 	bl	8000b50 <__aeabi_dcmple>
 80167f4:	4603      	mov	r3, r0
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d101      	bne.n	80167fe <_ZSt5isinfd+0x42>
 80167fa:	2300      	movs	r3, #0
 80167fc:	461e      	mov	r6, r3
 80167fe:	b2f3      	uxtb	r3, r6
 8016800:	f083 0301 	eor.w	r3, r3, #1
 8016804:	b2db      	uxtb	r3, r3
 8016806:	2b00      	cmp	r3, #0
 8016808:	bf14      	ite	ne
 801680a:	2301      	movne	r3, #1
 801680c:	2300      	moveq	r3, #0
 801680e:	b2db      	uxtb	r3, r3
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016818:	7fefffff 	.word	0x7fefffff

0801681c <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 801681c:	b480      	push	{r7}
 801681e:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8016820:	2300      	movs	r3, #0
}
 8016822:	4618      	mov	r0, r3
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr

0801682c <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 801682c:	b5b0      	push	{r4, r5, r7, lr}
 801682e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8016830:	f7f9 ff36 	bl	80106a0 <HAL_GetTick>
 8016834:	4603      	mov	r3, r0
 8016836:	2200      	movs	r2, #0
 8016838:	461c      	mov	r4, r3
 801683a:	4615      	mov	r5, r2
 801683c:	4622      	mov	r2, r4
 801683e:	462b      	mov	r3, r5
}
 8016840:	4610      	mov	r0, r2
 8016842:	4619      	mov	r1, r3
 8016844:	bdb0      	pop	{r4, r5, r7, pc}

08016846 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 8016846:	b5b0      	push	{r4, r5, r7, lr}
 8016848:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 801684a:	f7f9 ff29 	bl	80106a0 <HAL_GetTick>
 801684e:	4603      	mov	r3, r0
 8016850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016854:	fb02 f303 	mul.w	r3, r2, r3
 8016858:	2200      	movs	r2, #0
 801685a:	461c      	mov	r4, r3
 801685c:	4615      	mov	r5, r2
 801685e:	4622      	mov	r2, r4
 8016860:	462b      	mov	r3, r5
}
 8016862:	4610      	mov	r0, r2
 8016864:	4619      	mov	r1, r3
 8016866:	bdb0      	pop	{r4, r5, r7, pc}

08016868 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8016868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801686c:	b08c      	sub	sp, #48	; 0x30
 801686e:	af00      	add	r7, sp, #0
 8016870:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 8016874:	466b      	mov	r3, sp
 8016876:	4698      	mov	r8, r3
    float n = f;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 801687c:	4b78      	ldr	r3, [pc, #480]	; (8016a60 <_Z15ei_printf_floatf+0x1f8>)
 801687e:	681e      	ldr	r6, [r3, #0]
 8016880:	1e73      	subs	r3, r6, #1
 8016882:	623b      	str	r3, [r7, #32]
 8016884:	4632      	mov	r2, r6
 8016886:	2300      	movs	r3, #0
 8016888:	4614      	mov	r4, r2
 801688a:	461d      	mov	r5, r3
 801688c:	f04f 0200 	mov.w	r2, #0
 8016890:	f04f 0300 	mov.w	r3, #0
 8016894:	00eb      	lsls	r3, r5, #3
 8016896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801689a:	00e2      	lsls	r2, r4, #3
 801689c:	4632      	mov	r2, r6
 801689e:	2300      	movs	r3, #0
 80168a0:	4610      	mov	r0, r2
 80168a2:	4619      	mov	r1, r3
 80168a4:	f04f 0200 	mov.w	r2, #0
 80168a8:	f04f 0300 	mov.w	r3, #0
 80168ac:	00cb      	lsls	r3, r1, #3
 80168ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80168b2:	00c2      	lsls	r2, r0, #3
 80168b4:	4633      	mov	r3, r6
 80168b6:	3307      	adds	r3, #7
 80168b8:	08db      	lsrs	r3, r3, #3
 80168ba:	00db      	lsls	r3, r3, #3
 80168bc:	ebad 0d03 	sub.w	sp, sp, r3
 80168c0:	466b      	mov	r3, sp
 80168c2:	3300      	adds	r3, #0
 80168c4:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80168c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80168ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80168ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d2:	d106      	bne.n	80168e2 <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	4963      	ldr	r1, [pc, #396]	; (8016a64 <_Z15ei_printf_floatf+0x1fc>)
 80168d8:	461a      	mov	r2, r3
 80168da:	460b      	mov	r3, r1
 80168dc:	881b      	ldrh	r3, [r3, #0]
 80168de:	8013      	strh	r3, [r2, #0]
 80168e0:	e0ad      	b.n	8016a3e <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 80168e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80168ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80168ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168f2:	bf4c      	ite	mi
 80168f4:	2301      	movmi	r3, #1
 80168f6:	2300      	movpl	r3, #0
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	61bb      	str	r3, [r7, #24]
        if (neg) {
 80168fc:	69bb      	ldr	r3, [r7, #24]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d005      	beq.n	801690e <_Z15ei_printf_floatf+0xa6>
            n = -n;
 8016902:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016906:	eef1 7a67 	vneg.f32	s15, s15
 801690a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 801690e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8016912:	f7ff ff43 	bl	801679c <_ZSt5log10f>
 8016916:	eef0 7a40 	vmov.f32	s15, s0
 801691a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801691e:	ee17 3a90 	vmov	r3, s15
 8016922:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d004      	beq.n	8016934 <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 801692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692c:	1c5a      	adds	r2, r3, #1
 801692e:	627a      	str	r2, [r7, #36]	; 0x24
 8016930:	222d      	movs	r2, #45	; 0x2d
 8016932:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 8016934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016936:	2b00      	cmp	r3, #0
 8016938:	dc70      	bgt.n	8016a1c <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 801693a:	2300      	movs	r3, #0
 801693c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 801693e:	e06d      	b.n	8016a1c <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8016940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016942:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8016a58 <_Z15ei_printf_floatf+0x1f0>
 8016946:	f000 f8b8 	bl	8016aba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 801694a:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 801694e:	f04f 0200 	mov.w	r2, #0
 8016952:	f04f 0300 	mov.w	r3, #0
 8016956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801695a:	f7ea f90d 	bl	8000b78 <__aeabi_dcmpgt>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	d00b      	beq.n	801697c <_Z15ei_printf_floatf+0x114>
 8016964:	ed97 0b04 	vldr	d0, [r7, #16]
 8016968:	f7ff ff28 	bl	80167bc <_ZSt5isinfd>
 801696c:	4603      	mov	r3, r0
 801696e:	f083 0301 	eor.w	r3, r3, #1
 8016972:	b2db      	uxtb	r3, r3
 8016974:	2b00      	cmp	r3, #0
 8016976:	d001      	beq.n	801697c <_Z15ei_printf_floatf+0x114>
 8016978:	2301      	movs	r3, #1
 801697a:	e000      	b.n	801697e <_Z15ei_printf_floatf+0x116>
 801697c:	2300      	movs	r3, #0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d03a      	beq.n	80169f8 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 8016982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016984:	f7e9 fe10 	bl	80005a8 <__aeabi_f2d>
 8016988:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801698c:	f7e9 ff8e 	bl	80008ac <__aeabi_ddiv>
 8016990:	4602      	mov	r2, r0
 8016992:	460b      	mov	r3, r1
 8016994:	ec43 2b17 	vmov	d7, r2, r3
 8016998:	eeb0 0a47 	vmov.f32	s0, s14
 801699c:	eef0 0a67 	vmov.f32	s1, s15
 80169a0:	f003 fb22 	bl	8019fe8 <floor>
 80169a4:	ec53 2b10 	vmov	r2, r3, d0
 80169a8:	4610      	mov	r0, r2
 80169aa:	4619      	mov	r1, r3
 80169ac:	f7ea f904 	bl	8000bb8 <__aeabi_d2iz>
 80169b0:	4603      	mov	r3, r0
 80169b2:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80169b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169b6:	f7e9 fdf7 	bl	80005a8 <__aeabi_f2d>
 80169ba:	4604      	mov	r4, r0
 80169bc:	460d      	mov	r5, r1
 80169be:	68f8      	ldr	r0, [r7, #12]
 80169c0:	f7e9 fde0 	bl	8000584 <__aeabi_i2d>
 80169c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80169c8:	f7e9 fe46 	bl	8000658 <__aeabi_dmul>
 80169cc:	4602      	mov	r2, r0
 80169ce:	460b      	mov	r3, r1
 80169d0:	4620      	mov	r0, r4
 80169d2:	4629      	mov	r1, r5
 80169d4:	f7e9 fc88 	bl	80002e8 <__aeabi_dsub>
 80169d8:	4602      	mov	r2, r0
 80169da:	460b      	mov	r3, r1
 80169dc:	4610      	mov	r0, r2
 80169de:	4619      	mov	r1, r3
 80169e0:	f7ea f932 	bl	8000c48 <__aeabi_d2f>
 80169e4:	4603      	mov	r3, r0
 80169e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	b2da      	uxtb	r2, r3
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	1c59      	adds	r1, r3, #1
 80169f0:	6279      	str	r1, [r7, #36]	; 0x24
 80169f2:	3230      	adds	r2, #48	; 0x30
 80169f4:	b2d2      	uxtb	r2, r2
 80169f6:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 80169f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d10b      	bne.n	8016a16 <_Z15ei_printf_floatf+0x1ae>
 80169fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0a:	dd04      	ble.n	8016a16 <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0e:	1c5a      	adds	r2, r3, #1
 8016a10:	627a      	str	r2, [r7, #36]	; 0x24
 8016a12:	222e      	movs	r2, #46	; 0x2e
 8016a14:	701a      	strb	r2, [r3, #0]
            m--;
 8016a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8016a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a1e:	f7e9 fdc3 	bl	80005a8 <__aeabi_f2d>
 8016a22:	4b11      	ldr	r3, [pc, #68]	; (8016a68 <_Z15ei_printf_floatf+0x200>)
 8016a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a28:	f7ea f8a6 	bl	8000b78 <__aeabi_dcmpgt>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d186      	bne.n	8016940 <_Z15ei_printf_floatf+0xd8>
 8016a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	da83      	bge.n	8016940 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8016a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8016a3e:	69f9      	ldr	r1, [r7, #28]
 8016a40:	480a      	ldr	r0, [pc, #40]	; (8016a6c <_Z15ei_printf_floatf+0x204>)
 8016a42:	f7f2 f9f7 	bl	8008e34 <_Z9ei_printfPKcz>
 8016a46:	46c5      	mov	sp, r8
}
 8016a48:	bf00      	nop
 8016a4a:	3730      	adds	r7, #48	; 0x30
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a52:	bf00      	nop
 8016a54:	f3af 8000 	nop.w
 8016a58:	00000000 	.word	0x00000000
 8016a5c:	40240000 	.word	0x40240000
 8016a60:	200050b8 	.word	0x200050b8
 8016a64:	08021154 	.word	0x08021154
 8016a68:	200050b0 	.word	0x200050b0
 8016a6c:	08021158 	.word	0x08021158

08016a70 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f006 f99f 	bl	801cdbc <malloc>
 8016a7e:	4603      	mov	r3, r0
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3708      	adds	r7, #8
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 8016a92:	6839      	ldr	r1, [r7, #0]
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f006 f973 	bl	801cd80 <calloc>
 8016a9a:	4603      	mov	r3, r0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
    free(ptr);
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f006 f98d 	bl	801cdcc <free>
}
 8016ab2:	bf00      	nop
 8016ab4:	3708      	adds	r7, #8
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b084      	sub	sp, #16
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	ed87 0b02 	vstr	d0, [r7, #8]
 8016ac4:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f7e9 fd5c 	bl	8000584 <__aeabi_i2d>
 8016acc:	4602      	mov	r2, r0
 8016ace:	460b      	mov	r3, r1
 8016ad0:	ec43 2b11 	vmov	d1, r2, r3
 8016ad4:	ed97 0b02 	vldr	d0, [r7, #8]
 8016ad8:	f002 fe8c 	bl	80197f4 <pow>
 8016adc:	eeb0 7a40 	vmov.f32	s14, s0
 8016ae0:	eef0 7a60 	vmov.f32	s15, s1
    }
 8016ae4:	eeb0 0a47 	vmov.f32	s0, s14
 8016ae8:	eef0 0a67 	vmov.f32	s1, s15
 8016aec:	3710      	adds	r7, #16
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}
	...

08016af4 <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 8016af4:	b480      	push	{r7}
 8016af6:	b083      	sub	sp, #12
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	4603      	mov	r3, r0
 8016afc:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8016afe:	79fb      	ldrb	r3, [r7, #7]
 8016b00:	2b12      	cmp	r3, #18
 8016b02:	d84f      	bhi.n	8016ba4 <TfLiteTypeGetName+0xb0>
 8016b04:	a201      	add	r2, pc, #4	; (adr r2, 8016b0c <TfLiteTypeGetName+0x18>)
 8016b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b0a:	bf00      	nop
 8016b0c:	08016b59 	.word	0x08016b59
 8016b10:	08016b5d 	.word	0x08016b5d
 8016b14:	08016b69 	.word	0x08016b69
 8016b18:	08016b71 	.word	0x08016b71
 8016b1c:	08016b79 	.word	0x08016b79
 8016b20:	08016b8d 	.word	0x08016b8d
 8016b24:	08016b81 	.word	0x08016b81
 8016b28:	08016b65 	.word	0x08016b65
 8016b2c:	08016b85 	.word	0x08016b85
 8016b30:	08016b75 	.word	0x08016b75
 8016b34:	08016b91 	.word	0x08016b91
 8016b38:	08016b95 	.word	0x08016b95
 8016b3c:	08016b89 	.word	0x08016b89
 8016b40:	08016b7d 	.word	0x08016b7d
 8016b44:	08016b99 	.word	0x08016b99
 8016b48:	08016b9d 	.word	0x08016b9d
 8016b4c:	08016b6d 	.word	0x08016b6d
 8016b50:	08016b61 	.word	0x08016b61
 8016b54:	08016ba1 	.word	0x08016ba1
    case kTfLiteNoType:
      return "NOTYPE";
 8016b58:	4b16      	ldr	r3, [pc, #88]	; (8016bb4 <TfLiteTypeGetName+0xc0>)
 8016b5a:	e024      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8016b5c:	4b16      	ldr	r3, [pc, #88]	; (8016bb8 <TfLiteTypeGetName+0xc4>)
 8016b5e:	e022      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8016b60:	4b16      	ldr	r3, [pc, #88]	; (8016bbc <TfLiteTypeGetName+0xc8>)
 8016b62:	e020      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 8016b64:	4b16      	ldr	r3, [pc, #88]	; (8016bc0 <TfLiteTypeGetName+0xcc>)
 8016b66:	e01e      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8016b68:	4b16      	ldr	r3, [pc, #88]	; (8016bc4 <TfLiteTypeGetName+0xd0>)
 8016b6a:	e01c      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8016b6c:	4b16      	ldr	r3, [pc, #88]	; (8016bc8 <TfLiteTypeGetName+0xd4>)
 8016b6e:	e01a      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8016b70:	4b16      	ldr	r3, [pc, #88]	; (8016bcc <TfLiteTypeGetName+0xd8>)
 8016b72:	e018      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 8016b74:	4b16      	ldr	r3, [pc, #88]	; (8016bd0 <TfLiteTypeGetName+0xdc>)
 8016b76:	e016      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8016b78:	4b16      	ldr	r3, [pc, #88]	; (8016bd4 <TfLiteTypeGetName+0xe0>)
 8016b7a:	e014      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8016b7c:	4b16      	ldr	r3, [pc, #88]	; (8016bd8 <TfLiteTypeGetName+0xe4>)
 8016b7e:	e012      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8016b80:	4b16      	ldr	r3, [pc, #88]	; (8016bdc <TfLiteTypeGetName+0xe8>)
 8016b82:	e010      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8016b84:	4b16      	ldr	r3, [pc, #88]	; (8016be0 <TfLiteTypeGetName+0xec>)
 8016b86:	e00e      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8016b88:	4b16      	ldr	r3, [pc, #88]	; (8016be4 <TfLiteTypeGetName+0xf0>)
 8016b8a:	e00c      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 8016b8c:	4b16      	ldr	r3, [pc, #88]	; (8016be8 <TfLiteTypeGetName+0xf4>)
 8016b8e:	e00a      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 8016b90:	4b16      	ldr	r3, [pc, #88]	; (8016bec <TfLiteTypeGetName+0xf8>)
 8016b92:	e008      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 8016b94:	4b16      	ldr	r3, [pc, #88]	; (8016bf0 <TfLiteTypeGetName+0xfc>)
 8016b96:	e006      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 8016b98:	4b16      	ldr	r3, [pc, #88]	; (8016bf4 <TfLiteTypeGetName+0x100>)
 8016b9a:	e004      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 8016b9c:	4b16      	ldr	r3, [pc, #88]	; (8016bf8 <TfLiteTypeGetName+0x104>)
 8016b9e:	e002      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 8016ba0:	4b16      	ldr	r3, [pc, #88]	; (8016bfc <TfLiteTypeGetName+0x108>)
 8016ba2:	e000      	b.n	8016ba6 <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 8016ba4:	4b16      	ldr	r3, [pc, #88]	; (8016c00 <TfLiteTypeGetName+0x10c>)
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	370c      	adds	r7, #12
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr
 8016bb2:	bf00      	nop
 8016bb4:	0802115c 	.word	0x0802115c
 8016bb8:	08021164 	.word	0x08021164
 8016bbc:	0802116c 	.word	0x0802116c
 8016bc0:	08021174 	.word	0x08021174
 8016bc4:	0802117c 	.word	0x0802117c
 8016bc8:	08021184 	.word	0x08021184
 8016bcc:	0802118c 	.word	0x0802118c
 8016bd0:	08021194 	.word	0x08021194
 8016bd4:	0802119c 	.word	0x0802119c
 8016bd8:	080211a4 	.word	0x080211a4
 8016bdc:	080211ac 	.word	0x080211ac
 8016be0:	080211b4 	.word	0x080211b4
 8016be4:	080211c0 	.word	0x080211c0
 8016be8:	080211cc 	.word	0x080211cc
 8016bec:	080211d4 	.word	0x080211d4
 8016bf0:	080211dc 	.word	0x080211dc
 8016bf4:	080211e4 	.word	0x080211e4
 8016bf8:	080211f0 	.word	0x080211f0
 8016bfc:	080211f8 	.word	0x080211f8
 8016c00:	08021200 	.word	0x08021200

08016c04 <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 8016c04:	b480      	push	{r7}
 8016c06:	b083      	sub	sp, #12
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	601a      	str	r2, [r3, #0]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	4618      	mov	r0, r3
 8016c16:	370c      	adds	r7, #12
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1e:	4770      	bx	lr

08016c20 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	60b9      	str	r1, [r7, #8]
 8016c2a:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	68ba      	ldr	r2, [r7, #8]
 8016c30:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	68b9      	ldr	r1, [r7, #8]
 8016c36:	68f8      	ldr	r0, [r7, #12]
 8016c38:	f000 f828 	bl	8016c8c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}

08016c46 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 8016c46:	b480      	push	{r7}
 8016c48:	b083      	sub	sp, #12
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4618      	mov	r0, r3
 8016c52:	370c      	adds	r7, #12
 8016c54:	46bd      	mov	sp, r7
 8016c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5a:	4770      	bx	lr

08016c5c <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8016c5c:	b480      	push	{r7}
 8016c5e:	b083      	sub	sp, #12
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	3304      	adds	r3, #4
 8016c68:	4618      	mov	r0, r3
 8016c6a:	370c      	adds	r7, #12
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr

08016c74 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 8016c74:	b480      	push	{r7}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	3304      	adds	r3, #4
 8016c80:	4618      	mov	r0, r3
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b086      	sub	sp, #24
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	60f8      	str	r0, [r7, #12]
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	68ba      	ldr	r2, [r7, #8]
 8016c9c:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 8016c9e:	68f8      	ldr	r0, [r7, #12]
 8016ca0:	f7ff ffdc 	bl	8016c5c <_ZN6tflite12RuntimeShape8DimsDataEv>
 8016ca4:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8016ca6:	68bb      	ldr	r3, [r7, #8]
 8016ca8:	009b      	lsls	r3, r3, #2
 8016caa:	461a      	mov	r2, r3
 8016cac:	6879      	ldr	r1, [r7, #4]
 8016cae:	6978      	ldr	r0, [r7, #20]
 8016cb0:	f007 f9dd 	bl	801e06e <memcpy>
  }
 8016cb4:	bf00      	nop
 8016cb6:	3718      	adds	r7, #24
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	bd80      	pop	{r7, pc}

08016cbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b086      	sub	sp, #24
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f7ff ffd3 	bl	8016c74 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8016cce:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	613b      	str	r3, [r7, #16]
 8016cd4:	e00b      	b.n	8016cee <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 8016cd6:	693b      	ldr	r3, [r7, #16]
 8016cd8:	009b      	lsls	r3, r3, #2
 8016cda:	68fa      	ldr	r2, [r7, #12]
 8016cdc:	4413      	add	r3, r2
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	fb02 f303 	mul.w	r3, r2, r3
 8016ce6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	3301      	adds	r3, #1
 8016cec:	613b      	str	r3, [r7, #16]
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	693a      	ldr	r2, [r7, #16]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	dbee      	blt.n	8016cd6 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8016cf8:	697b      	ldr	r3, [r7, #20]
  }
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3718      	adds	r7, #24
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}

08016d02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b086      	sub	sp, #24
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	6078      	str	r0, [r7, #4]
 8016d0a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d103      	bne.n	8016d1a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f7ff ff76 	bl	8016c04 <_ZN6tflite12RuntimeShapeC1Ev>
 8016d18:	e00d      	b.n	8016d36 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	689b      	ldr	r3, [r3, #8]
 8016d1e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8016d20:	697b      	ldr	r3, [r7, #20]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	3304      	adds	r3, #4
 8016d2a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8016d2c:	68fa      	ldr	r2, [r7, #12]
 8016d2e:	6939      	ldr	r1, [r7, #16]
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f7ff ff75 	bl	8016c20 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	3718      	adds	r7, #24
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}

08016d3e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8016d3e:	b480      	push	{r7}
 8016d40:	b083      	sub	sp, #12
 8016d42:	af00      	add	r7, sp, #0
 8016d44:	6078      	str	r0, [r7, #4]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	689b      	ldr	r3, [r3, #8]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8016d58:	b480      	push	{r7}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d003      	beq.n	8016d70 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	e000      	b.n	8016d72 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8016d70:	2300      	movs	r3, #0
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	370c      	adds	r7, #12
 8016d76:	46bd      	mov	sp, r7
 8016d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7c:	4770      	bx	lr

08016d7e <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8016d7e:	b480      	push	{r7}
 8016d80:	b083      	sub	sp, #12
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	685b      	ldr	r3, [r3, #4]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d003      	beq.n	8016d96 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	e000      	b.n	8016d98 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 8016d96:	2300      	movs	r3, #0
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	370c      	adds	r7, #12
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 8016da4:	b480      	push	{r7}
 8016da6:	b087      	sub	sp, #28
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 8016db0:	2300      	movs	r3, #0
 8016db2:	617b      	str	r3, [r7, #20]
 8016db4:	e02a      	b.n	8016e0c <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	da00      	bge.n	8016dbe <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	105b      	asrs	r3, r3, #1
 8016dc0:	461a      	mov	r2, r3
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8016dca:	011b      	lsls	r3, r3, #4
 8016dcc:	b25a      	sxtb	r2, r3
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	6879      	ldr	r1, [r7, #4]
 8016dd2:	440b      	add	r3, r1
 8016dd4:	1112      	asrs	r2, r2, #4
 8016dd6:	b252      	sxtb	r2, r2
 8016dd8:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	3301      	adds	r3, #1
 8016dde:	68ba      	ldr	r2, [r7, #8]
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d018      	beq.n	8016e16 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	da00      	bge.n	8016dec <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8016dea:	3301      	adds	r3, #1
 8016dec:	105b      	asrs	r3, r3, #1
 8016dee:	461a      	mov	r2, r3
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	4413      	add	r3, r2
 8016df4:	f993 2000 	ldrsb.w	r2, [r3]
 8016df8:	697b      	ldr	r3, [r7, #20]
 8016dfa:	3301      	adds	r3, #1
 8016dfc:	6879      	ldr	r1, [r7, #4]
 8016dfe:	440b      	add	r3, r1
 8016e00:	1112      	asrs	r2, r2, #4
 8016e02:	b252      	sxtb	r2, r2
 8016e04:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	3302      	adds	r3, #2
 8016e0a:	617b      	str	r3, [r7, #20]
 8016e0c:	697a      	ldr	r2, [r7, #20]
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	dbd0      	blt.n	8016db6 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 8016e14:	e000      	b.n	8016e18 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 8016e16:	bf00      	nop
}
 8016e18:	bf00      	nop
 8016e1a:	371c      	adds	r7, #28
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr

08016e24 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	ed93 7a00 	vldr	s14, [r3]
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	edd3 7a00 	vldr	s15, [r3]
 8016e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e42:	d501      	bpl.n	8016e48 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	e000      	b.n	8016e4a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8016e48:	687b      	ldr	r3, [r7, #4]
    }
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	370c      	adds	r7, #12
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e54:	4770      	bx	lr

08016e56 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8016e56:	b480      	push	{r7}
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016e5e:	4618      	mov	r0, r3
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr

08016e68 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8016e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016e6c:	b088      	sub	sp, #32
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	ed87 0b02 	vstr	d0, [r7, #8]
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8016e78:	f04f 0200 	mov.w	r2, #0
 8016e7c:	f04f 0300 	mov.w	r3, #0
 8016e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016e84:	f7e9 fe50 	bl	8000b28 <__aeabi_dcmpeq>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d006      	beq.n	8016e9c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2200      	movs	r2, #0
 8016e92:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	2200      	movs	r2, #0
 8016e98:	601a      	str	r2, [r3, #0]
    return;
 8016e9a:	e068      	b.n	8016f6e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8016e9c:	6838      	ldr	r0, [r7, #0]
 8016e9e:	ed97 0b02 	vldr	d0, [r7, #8]
 8016ea2:	f002 fd99 	bl	80199d8 <frexp>
 8016ea6:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 8016eaa:	f04f 0200 	mov.w	r2, #0
 8016eae:	4b32      	ldr	r3, [pc, #200]	; (8016f78 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8016eb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016eb4:	f7e9 fbd0 	bl	8000658 <__aeabi_dmul>
 8016eb8:	4602      	mov	r2, r0
 8016eba:	460b      	mov	r3, r1
 8016ebc:	ec43 2b17 	vmov	d7, r2, r3
 8016ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8016ec4:	eef0 0a67 	vmov.f32	s1, s15
 8016ec8:	f000 f85a 	bl	8016f80 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8016ecc:	ec53 2b10 	vmov	r2, r3, d0
 8016ed0:	4610      	mov	r0, r2
 8016ed2:	4619      	mov	r1, r3
 8016ed4:	f7e9 ff70 	bl	8000db8 <__aeabi_d2lz>
 8016ed8:	4602      	mov	r2, r0
 8016eda:	460b      	mov	r3, r1
 8016edc:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 8016ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016ee4:	4925      	ldr	r1, [pc, #148]	; (8016f7c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8016ee6:	428a      	cmp	r2, r1
 8016ee8:	f173 0300 	sbcs.w	r3, r3, #0
 8016eec:	db01      	blt.n	8016ef2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8016eee:	f005 ff1d 	bl	801cd2c <abort>
  if (q_fixed == (1LL << 31)) {
 8016ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016ef6:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8016efa:	430b      	orrs	r3, r1
 8016efc:	d118      	bne.n	8016f30 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8016efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	da05      	bge.n	8016f12 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 8016f06:	f112 0801 	adds.w	r8, r2, #1
 8016f0a:	f143 0900 	adc.w	r9, r3, #0
 8016f0e:	4642      	mov	r2, r8
 8016f10:	464b      	mov	r3, r9
 8016f12:	f04f 0000 	mov.w	r0, #0
 8016f16:	f04f 0100 	mov.w	r1, #0
 8016f1a:	0850      	lsrs	r0, r2, #1
 8016f1c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8016f20:	1059      	asrs	r1, r3, #1
 8016f22:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	1c5a      	adds	r2, r3, #1
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8016f30:	f7ff ff91 	bl	8016e56 <_ZNSt14numeric_limitsIlE3maxEv>
 8016f34:	4603      	mov	r3, r0
 8016f36:	17da      	asrs	r2, r3, #31
 8016f38:	461c      	mov	r4, r3
 8016f3a:	4615      	mov	r5, r2
 8016f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016f40:	4294      	cmp	r4, r2
 8016f42:	eb75 0303 	sbcs.w	r3, r5, r3
 8016f46:	da01      	bge.n	8016f4c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8016f48:	f005 fef0 	bl	801cd2c <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	f113 0f1f 	cmn.w	r3, #31
 8016f54:	da08      	bge.n	8016f68 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8016f5c:	f04f 0200 	mov.w	r2, #0
 8016f60:	f04f 0300 	mov.w	r3, #0
 8016f64:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8016f68:	69ba      	ldr	r2, [r7, #24]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	601a      	str	r2, [r3, #0]
}
 8016f6e:	3720      	adds	r7, #32
 8016f70:	46bd      	mov	sp, r7
 8016f72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016f76:	bf00      	nop
 8016f78:	41e00000 	.word	0x41e00000
 8016f7c:	80000001 	.word	0x80000001

08016f80 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	ed87 0b00 	vstr	d0, [r7]
 8016f8a:	ed97 0b00 	vldr	d0, [r7]
 8016f8e:	f003 f8ab 	bl	801a0e8 <round>
 8016f92:	eeb0 7a40 	vmov.f32	s14, s0
 8016f96:	eef0 7a60 	vmov.f32	s15, s1
 8016f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8016f9e:	eef0 0a67 	vmov.f32	s1, s15
 8016fa2:	3708      	adds	r7, #8
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	ed87 0a01 	vstr	s0, [r7, #4]
 8016fb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8016fb6:	f7ea f8fb 	bl	80011b0 <_ZSt5roundf>
 8016fba:	eef0 7a40 	vmov.f32	s15, s0
 8016fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8016fc2:	3708      	adds	r7, #8
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}

08016fc8 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 8016fc8:	b480      	push	{r7}
 8016fca:	b083      	sub	sp, #12
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	ed87 0b00 	vstr	d0, [r7]
 8016fd2:	683a      	ldr	r2, [r7, #0]
 8016fd4:	6879      	ldr	r1, [r7, #4]
 8016fd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016fda:	ec43 2b17 	vmov	d7, r2, r3
 8016fde:	eeb0 0a47 	vmov.f32	s0, s14
 8016fe2:	eef0 0a67 	vmov.f32	s1, s15
 8016fe6:	370c      	adds	r7, #12
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr

08016ff0 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8016ff0:	b480      	push	{r7}
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	4b02      	ldr	r3, [pc, #8]	; (8017000 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffe:	4770      	bx	lr
 8017000:	ffff8000 	.word	0xffff8000

08017004 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8017004:	b480      	push	{r7}
 8017006:	af00      	add	r7, sp, #0
 8017008:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801700c:	4618      	mov	r0, r3
 801700e:	46bd      	mov	sp, r7
 8017010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017014:	4770      	bx	lr

08017016 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8017016:	b480      	push	{r7}
 8017018:	af00      	add	r7, sp, #0
 801701a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801701e:	4618      	mov	r0, r3
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr

08017028 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8017028:	b480      	push	{r7}
 801702a:	af00      	add	r7, sp, #0
 801702c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8017030:	4618      	mov	r0, r3
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr

0801703a <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 801703a:	b480      	push	{r7}
 801703c:	af00      	add	r7, sp, #0
 801703e:	237f      	movs	r3, #127	; 0x7f
 8017040:	4618      	mov	r0, r3
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr

0801704a <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 801704a:	b480      	push	{r7}
 801704c:	af00      	add	r7, sp, #0
 801704e:	2300      	movs	r3, #0
 8017050:	4618      	mov	r0, r3
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr

0801705a <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 801705a:	b480      	push	{r7}
 801705c:	af00      	add	r7, sp, #0
 801705e:	23ff      	movs	r3, #255	; 0xff
 8017060:	4618      	mov	r0, r3
 8017062:	46bd      	mov	sp, r7
 8017064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017068:	4770      	bx	lr
 801706a:	0000      	movs	r0, r0
 801706c:	0000      	movs	r0, r0
	...

08017070 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8017070:	b5b0      	push	{r4, r5, r7, lr}
 8017072:	b08e      	sub	sp, #56	; 0x38
 8017074:	af02      	add	r7, sp, #8
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]
 801707c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	68db      	ldr	r3, [r3, #12]
 8017082:	4618      	mov	r0, r3
 8017084:	f7e9 fa90 	bl	80005a8 <__aeabi_f2d>
 8017088:	4604      	mov	r4, r0
 801708a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	68db      	ldr	r3, [r3, #12]
 8017090:	4618      	mov	r0, r3
 8017092:	f7e9 fa89 	bl	80005a8 <__aeabi_f2d>
 8017096:	4602      	mov	r2, r0
 8017098:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 801709a:	4620      	mov	r0, r4
 801709c:	4629      	mov	r1, r5
 801709e:	f7e9 fadb 	bl	8000658 <__aeabi_dmul>
 80170a2:	4602      	mov	r2, r0
 80170a4:	460b      	mov	r3, r1
 80170a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d04b      	beq.n	8017148 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	68db      	ldr	r3, [r3, #12]
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7e9 fa77 	bl	80005a8 <__aeabi_f2d>
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80170c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80170c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80170ca:	f7e9 f90d 	bl	80002e8 <__aeabi_dsub>
 80170ce:	4602      	mov	r2, r0
 80170d0:	460b      	mov	r3, r1
 80170d2:	ec43 2b17 	vmov	d7, r2, r3
 80170d6:	eeb0 0a47 	vmov.f32	s0, s14
 80170da:	eef0 0a67 	vmov.f32	s1, s15
 80170de:	f7ff ff73 	bl	8016fc8 <_ZSt3absd>
 80170e2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80170e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7e9 fa5c 	bl	80005a8 <__aeabi_f2d>
 80170f0:	4602      	mov	r2, r0
 80170f2:	460b      	mov	r3, r1
 80170f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80170f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80170fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017100:	f7e9 fbd4 	bl	80008ac <__aeabi_ddiv>
 8017104:	4602      	mov	r2, r0
 8017106:	460b      	mov	r3, r1
 8017108:	4610      	mov	r0, r2
 801710a:	4619      	mov	r1, r3
 801710c:	2301      	movs	r3, #1
 801710e:	461c      	mov	r4, r3
 8017110:	a318      	add	r3, pc, #96	; (adr r3, 8017174 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8017112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017116:	f7e9 fd1b 	bl	8000b50 <__aeabi_dcmple>
 801711a:	4603      	mov	r3, r0
 801711c:	2b00      	cmp	r3, #0
 801711e:	d101      	bne.n	8017124 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8017120:	2300      	movs	r3, #0
 8017122:	461c      	mov	r4, r3
 8017124:	b2e3      	uxtb	r3, r4
 8017126:	f083 0301 	eor.w	r3, r3, #1
 801712a:	b2db      	uxtb	r3, r3
 801712c:	2b00      	cmp	r3, #0
 801712e:	d00b      	beq.n	8017148 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	691c      	ldr	r4, [r3, #16]
 8017134:	4b0c      	ldr	r3, [pc, #48]	; (8017168 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	f44f 739e 	mov.w	r3, #316	; 0x13c
 801713c:	4a0b      	ldr	r2, [pc, #44]	; (801716c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 801713e:	490c      	ldr	r1, [pc, #48]	; (8017170 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8017140:	68f8      	ldr	r0, [r7, #12]
 8017142:	47a0      	blx	r4
 8017144:	2301      	movs	r3, #1
 8017146:	e009      	b.n	801715c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8017148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801714a:	9300      	str	r3, [sp, #0]
 801714c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	68b9      	ldr	r1, [r7, #8]
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f000 f812 	bl	801717c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8017158:	4603      	mov	r3, r0
                                          multiplier);
 801715a:	bf00      	nop
}
 801715c:	4618      	mov	r0, r3
 801715e:	3730      	adds	r7, #48	; 0x30
 8017160:	46bd      	mov	sp, r7
 8017162:	bdb0      	pop	{r4, r5, r7, pc}
 8017164:	f3af 8000 	nop.w
 8017168:	080214a8 	.word	0x080214a8
 801716c:	08021270 	.word	0x08021270
 8017170:	08021374 	.word	0x08021374
 8017174:	47ae147b 	.word	0x47ae147b
 8017178:	3f947ae1 	.word	0x3f947ae1

0801717c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 801717c:	b590      	push	{r4, r7, lr}
 801717e:	b089      	sub	sp, #36	; 0x24
 8017180:	af02      	add	r7, sp, #8
 8017182:	60f8      	str	r0, [r7, #12]
 8017184:	60b9      	str	r1, [r7, #8]
 8017186:	607a      	str	r2, [r7, #4]
 8017188:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	ed93 7a03 	vldr	s14, [r3, #12]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	edd3 7a03 	vldr	s15, [r3, #12]
 8017196:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 801719a:	ee17 0a90 	vmov	r0, s15
 801719e:	f7e9 fa03 	bl	80005a8 <__aeabi_f2d>
 80171a2:	4602      	mov	r2, r0
 80171a4:	460b      	mov	r3, r1
 80171a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80171aa:	2301      	movs	r3, #1
 80171ac:	461c      	mov	r4, r3
 80171ae:	f04f 0200 	mov.w	r2, #0
 80171b2:	f04f 0300 	mov.w	r3, #0
 80171b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80171ba:	f7e9 fcd3 	bl	8000b64 <__aeabi_dcmpge>
 80171be:	4603      	mov	r3, r0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d101      	bne.n	80171c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80171c4:	2300      	movs	r3, #0
 80171c6:	461c      	mov	r4, r3
 80171c8:	b2e3      	uxtb	r3, r4
 80171ca:	f083 0301 	eor.w	r3, r3, #1
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d00b      	beq.n	80171ec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	691c      	ldr	r4, [r3, #16]
 80171d8:	4b0f      	ldr	r3, [pc, #60]	; (8017218 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	f240 1349 	movw	r3, #329	; 0x149
 80171e0:	4a0e      	ldr	r2, [pc, #56]	; (801721c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80171e2:	490f      	ldr	r1, [pc, #60]	; (8017220 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80171e4:	68f8      	ldr	r0, [r7, #12]
 80171e6:	47a0      	blx	r4
 80171e8:	2301      	movs	r3, #1
 80171ea:	e010      	b.n	801720e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	68db      	ldr	r3, [r3, #12]
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7e9 f9d9 	bl	80005a8 <__aeabi_f2d>
 80171f6:	4602      	mov	r2, r0
 80171f8:	460b      	mov	r3, r1
 80171fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80171fe:	f7e9 fb55 	bl	80008ac <__aeabi_ddiv>
 8017202:	4602      	mov	r2, r0
 8017204:	460b      	mov	r3, r1
 8017206:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017208:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 801720c:	2300      	movs	r3, #0
}
 801720e:	4618      	mov	r0, r3
 8017210:	371c      	adds	r7, #28
 8017212:	46bd      	mov	sp, r7
 8017214:	bd90      	pop	{r4, r7, pc}
 8017216:	bf00      	nop
 8017218:	080214cc 	.word	0x080214cc
 801721c:	08021270 	.word	0x08021270
 8017220:	08021374 	.word	0x08021374

08017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8017224:	b590      	push	{r4, r7, lr}
 8017226:	b08b      	sub	sp, #44	; 0x2c
 8017228:	af02      	add	r7, sp, #8
 801722a:	6178      	str	r0, [r7, #20]
 801722c:	ed87 0a04 	vstr	s0, [r7, #16]
 8017230:	60f9      	str	r1, [r7, #12]
 8017232:	edc7 0a02 	vstr	s1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8017238:	ed97 7a02 	vldr	s14, [r7, #8]
 801723c:	edd7 7a04 	vldr	s15, [r7, #16]
 8017240:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017244:	eeb0 0a66 	vmov.f32	s0, s13
 8017248:	f7ff feae 	bl	8016fa8 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 801724c:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017250:	f7ff fee1 	bl	8017016 <_ZNSt14numeric_limitsIlE3minEv>
 8017254:	ee07 0a90 	vmov	s15, r0
 8017258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801725c:	ed97 7a07 	vldr	s14, [r7, #28]
 8017260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017268:	db0e      	blt.n	8017288 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 801726a:	f7ff fdf4 	bl	8016e56 <_ZNSt14numeric_limitsIlE3maxEv>
 801726e:	ee07 0a90 	vmov	s15, r0
 8017272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017276:	ed97 7a07 	vldr	s14, [r7, #28]
 801727a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017282:	d801      	bhi.n	8017288 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8017284:	2301      	movs	r3, #1
 8017286:	e000      	b.n	801728a <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8017288:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 801728a:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 801728c:	7efb      	ldrb	r3, [r7, #27]
 801728e:	f083 0301 	eor.w	r3, r3, #1
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b00      	cmp	r3, #0
 8017296:	d00b      	beq.n	80172b0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	691c      	ldr	r4, [r3, #16]
 801729c:	4b0c      	ldr	r3, [pc, #48]	; (80172d0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	f240 1357 	movw	r3, #343	; 0x157
 80172a4:	4a0b      	ldr	r2, [pc, #44]	; (80172d4 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 80172a6:	490c      	ldr	r1, [pc, #48]	; (80172d8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 80172a8:	6978      	ldr	r0, [r7, #20]
 80172aa:	47a0      	blx	r4
 80172ac:	2301      	movs	r3, #1
 80172ae:	e00a      	b.n	80172c6 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 80172b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80172b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80172b8:	ee17 2a90 	vmov	r2, s15
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	441a      	add	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80172c4:	2300      	movs	r3, #0
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3724      	adds	r7, #36	; 0x24
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd90      	pop	{r4, r7, pc}
 80172ce:	bf00      	nop
 80172d0:	080214e8 	.word	0x080214e8
 80172d4:	08021270 	.word	0x08021270
 80172d8:	08021374 	.word	0x08021374

080172dc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 80172dc:	b580      	push	{r7, lr}
 80172de:	b08a      	sub	sp, #40	; 0x28
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	607a      	str	r2, [r7, #4]
 80172e6:	603b      	str	r3, [r7, #0]
 80172e8:	460b      	mov	r3, r1
 80172ea:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 80172ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ee:	68db      	ldr	r3, [r3, #12]
 80172f0:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 80172f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f4:	691b      	ldr	r3, [r3, #16]
 80172f6:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 80172f8:	7afb      	ldrb	r3, [r7, #11]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d120      	bne.n	8017340 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 80172fe:	f107 0314 	add.w	r3, r7, #20
 8017302:	461a      	mov	r2, r3
 8017304:	eddf 0a52 	vldr	s1, [pc, #328]	; 8017450 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017308:	6a39      	ldr	r1, [r7, #32]
 801730a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801730e:	68f8      	ldr	r0, [r7, #12]
 8017310:	f7ff ff88 	bl	8017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017314:	4603      	mov	r3, r0
 8017316:	76fb      	strb	r3, [r7, #27]
 8017318:	7efb      	ldrb	r3, [r7, #27]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d001      	beq.n	8017322 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 801731e:	7efb      	ldrb	r3, [r7, #27]
 8017320:	e091      	b.n	8017446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017322:	f107 0214 	add.w	r2, r7, #20
 8017326:	1d3b      	adds	r3, r7, #4
 8017328:	4611      	mov	r1, r2
 801732a:	4618      	mov	r0, r3
 801732c:	f7f3 ff1f 	bl	800b16e <_ZSt3maxIlERKT_S2_S2_>
 8017330:	4603      	mov	r3, r0
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017336:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017338:	683a      	ldr	r2, [r7, #0]
 801733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801733c:	601a      	str	r2, [r3, #0]
 801733e:	e081      	b.n	8017444 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8017340:	7afb      	ldrb	r3, [r7, #11]
 8017342:	2b03      	cmp	r3, #3
 8017344:	d13a      	bne.n	80173bc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8017346:	f107 0314 	add.w	r3, r7, #20
 801734a:	461a      	mov	r2, r3
 801734c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8017450 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017350:	6a39      	ldr	r1, [r7, #32]
 8017352:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017356:	68f8      	ldr	r0, [r7, #12]
 8017358:	f7ff ff64 	bl	8017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 801735c:	4603      	mov	r3, r0
 801735e:	777b      	strb	r3, [r7, #29]
 8017360:	7f7b      	ldrb	r3, [r7, #29]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d001      	beq.n	801736a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8017366:	7f7b      	ldrb	r3, [r7, #29]
 8017368:	e06d      	b.n	8017446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 801736a:	f107 0214 	add.w	r2, r7, #20
 801736e:	1d3b      	adds	r3, r7, #4
 8017370:	4611      	mov	r1, r2
 8017372:	4618      	mov	r0, r3
 8017374:	f7f3 fefb 	bl	800b16e <_ZSt3maxIlERKT_S2_S2_>
 8017378:	4603      	mov	r3, r0
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801737e:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017380:	f107 0314 	add.w	r3, r7, #20
 8017384:	461a      	mov	r2, r3
 8017386:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 801738a:	6a39      	ldr	r1, [r7, #32]
 801738c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f7ff ff47 	bl	8017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017396:	4603      	mov	r3, r0
 8017398:	773b      	strb	r3, [r7, #28]
 801739a:	7f3b      	ldrb	r3, [r7, #28]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d001      	beq.n	80173a4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 80173a0:	7f3b      	ldrb	r3, [r7, #28]
 80173a2:	e050      	b.n	8017446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 80173a4:	f107 0214 	add.w	r2, r7, #20
 80173a8:	463b      	mov	r3, r7
 80173aa:	4611      	mov	r1, r2
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7f3 feca 	bl	800b146 <_ZSt3minIlERKT_S2_S2_>
 80173b2:	4603      	mov	r3, r0
 80173b4:	681a      	ldr	r2, [r3, #0]
 80173b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173b8:	601a      	str	r2, [r3, #0]
 80173ba:	e043      	b.n	8017444 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 80173bc:	7afb      	ldrb	r3, [r7, #11]
 80173be:	2b02      	cmp	r3, #2
 80173c0:	d13a      	bne.n	8017438 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 80173c2:	f107 0314 	add.w	r3, r7, #20
 80173c6:	461a      	mov	r2, r3
 80173c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80173cc:	6a39      	ldr	r1, [r7, #32]
 80173ce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80173d2:	68f8      	ldr	r0, [r7, #12]
 80173d4:	f7ff ff26 	bl	8017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 80173d8:	4603      	mov	r3, r0
 80173da:	77fb      	strb	r3, [r7, #31]
 80173dc:	7ffb      	ldrb	r3, [r7, #31]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d001      	beq.n	80173e6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 80173e2:	7ffb      	ldrb	r3, [r7, #31]
 80173e4:	e02f      	b.n	8017446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 80173e6:	f107 0214 	add.w	r2, r7, #20
 80173ea:	1d3b      	adds	r3, r7, #4
 80173ec:	4611      	mov	r1, r2
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f3 febd 	bl	800b16e <_ZSt3maxIlERKT_S2_S2_>
 80173f4:	4603      	mov	r3, r0
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173fa:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 80173fc:	f107 0314 	add.w	r3, r7, #20
 8017400:	461a      	mov	r2, r3
 8017402:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017406:	6a39      	ldr	r1, [r7, #32]
 8017408:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f7ff ff09 	bl	8017224 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017412:	4603      	mov	r3, r0
 8017414:	77bb      	strb	r3, [r7, #30]
 8017416:	7fbb      	ldrb	r3, [r7, #30]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d001      	beq.n	8017420 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 801741c:	7fbb      	ldrb	r3, [r7, #30]
 801741e:	e012      	b.n	8017446 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017420:	f107 0214 	add.w	r2, r7, #20
 8017424:	463b      	mov	r3, r7
 8017426:	4611      	mov	r1, r2
 8017428:	4618      	mov	r0, r3
 801742a:	f7f3 fe8c 	bl	800b146 <_ZSt3minIlERKT_S2_S2_>
 801742e:	4603      	mov	r3, r0
 8017430:	681a      	ldr	r2, [r3, #0]
 8017432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017434:	601a      	str	r2, [r3, #0]
 8017436:	e005      	b.n	8017444 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801743c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 801743e:	683a      	ldr	r2, [r7, #0]
 8017440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017442:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8017444:	2300      	movs	r3, #0
}
 8017446:	4618      	mov	r0, r3
 8017448:	3728      	adds	r7, #40	; 0x28
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	00000000 	.word	0x00000000

08017454 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8017454:	b590      	push	{r4, r7, lr}
 8017456:	b08b      	sub	sp, #44	; 0x2c
 8017458:	af04      	add	r7, sp, #16
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	607a      	str	r2, [r7, #4]
 801745e:	603b      	str	r3, [r7, #0]
 8017460:	460b      	mov	r3, r1
 8017462:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8017464:	2300      	movs	r3, #0
 8017466:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8017468:	2300      	movs	r3, #0
 801746a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	781b      	ldrb	r3, [r3, #0]
 8017470:	2b03      	cmp	r3, #3
 8017472:	d108      	bne.n	8017486 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8017474:	f7ff fde9 	bl	801704a <_ZNSt14numeric_limitsIhE3minEv>
 8017478:	4603      	mov	r3, r0
 801747a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 801747c:	f7ff fded 	bl	801705a <_ZNSt14numeric_limitsIhE3maxEv>
 8017480:	4603      	mov	r3, r0
 8017482:	613b      	str	r3, [r7, #16]
 8017484:	e025      	b.n	80174d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	2b09      	cmp	r3, #9
 801748c:	d108      	bne.n	80174a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 801748e:	f7ff fdcb 	bl	8017028 <_ZNSt14numeric_limitsIaE3minEv>
 8017492:	4603      	mov	r3, r0
 8017494:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8017496:	f7ff fdd0 	bl	801703a <_ZNSt14numeric_limitsIaE3maxEv>
 801749a:	4603      	mov	r3, r0
 801749c:	613b      	str	r3, [r7, #16]
 801749e:	e018      	b.n	80174d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	2b07      	cmp	r3, #7
 80174a6:	d108      	bne.n	80174ba <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80174a8:	f7ff fda2 	bl	8016ff0 <_ZNSt14numeric_limitsIsE3minEv>
 80174ac:	4603      	mov	r3, r0
 80174ae:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80174b0:	f7ff fda8 	bl	8017004 <_ZNSt14numeric_limitsIsE3maxEv>
 80174b4:	4603      	mov	r3, r0
 80174b6:	613b      	str	r3, [r7, #16]
 80174b8:	e00b      	b.n	80174d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	691c      	ldr	r4, [r3, #16]
 80174be:	4b0e      	ldr	r3, [pc, #56]	; (80174f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80174c0:	9300      	str	r3, [sp, #0]
 80174c2:	f240 138f 	movw	r3, #399	; 0x18f
 80174c6:	4a0d      	ldr	r2, [pc, #52]	; (80174fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 80174c8:	490d      	ldr	r1, [pc, #52]	; (8017500 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 80174ca:	68f8      	ldr	r0, [r7, #12]
 80174cc:	47a0      	blx	r4
 80174ce:	2301      	movs	r3, #1
 80174d0:	e00d      	b.n	80174ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 80174d2:	7af9      	ldrb	r1, [r7, #11]
 80174d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d6:	9302      	str	r3, [sp, #8]
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	9301      	str	r3, [sp, #4]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	9300      	str	r3, [sp, #0]
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	697a      	ldr	r2, [r7, #20]
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f7ff fef9 	bl	80172dc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 80174ea:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 80174ec:	bf00      	nop
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	371c      	adds	r7, #28
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd90      	pop	{r4, r7, pc}
 80174f6:	bf00      	nop
 80174f8:	08021510 	.word	0x08021510
 80174fc:	08021270 	.word	0x08021270
 8017500:	08021374 	.word	0x08021374

08017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 8017504:	b480      	push	{r7}
 8017506:	b083      	sub	sp, #12
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4618      	mov	r0, r3
 8017512:	370c      	adds	r7, #12
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr

0801751c <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 801751c:	b480      	push	{r7}
 801751e:	b085      	sub	sp, #20
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 801752a:	683a      	ldr	r2, [r7, #0]
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	4413      	add	r3, r2
 8017530:	1e5a      	subs	r2, r3, #1
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	fbb2 f3f3 	udiv	r3, r2, r3
 8017538:	683a      	ldr	r2, [r7, #0]
 801753a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 801753e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8017540:	68bb      	ldr	r3, [r7, #8]
}
 8017542:	4618      	mov	r0, r3
 8017544:	3714      	adds	r7, #20
 8017546:	46bd      	mov	sp, r7
 8017548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754c:	4770      	bx	lr
	...

08017550 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8017550:	b580      	push	{r7, lr}
 8017552:	b088      	sub	sp, #32
 8017554:	af00      	add	r7, sp, #0
 8017556:	60f8      	str	r0, [r7, #12]
 8017558:	60b9      	str	r1, [r7, #8]
 801755a:	607a      	str	r2, [r7, #4]
 801755c:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f000 f854 	bl	801760c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8017564:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8017566:	2300      	movs	r3, #0
 8017568:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 801756a:	2300      	movs	r3, #0
 801756c:	61bb      	str	r3, [r7, #24]
 801756e:	e011      	b.n	8017594 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8017570:	69ba      	ldr	r2, [r7, #24]
 8017572:	4613      	mov	r3, r2
 8017574:	005b      	lsls	r3, r3, #1
 8017576:	4413      	add	r3, r2
 8017578:	009b      	lsls	r3, r3, #2
 801757a:	461a      	mov	r2, r3
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	4413      	add	r3, r2
 8017580:	685b      	ldr	r3, [r3, #4]
 8017582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017586:	d102      	bne.n	801758e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	3301      	adds	r3, #1
 801758c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	3301      	adds	r3, #1
 8017592:	61bb      	str	r3, [r7, #24]
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	699b      	ldr	r3, [r3, #24]
 8017598:	69ba      	ldr	r2, [r7, #24]
 801759a:	429a      	cmp	r2, r3
 801759c:	d3e8      	bcc.n	8017570 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 801759e:	69fb      	ldr	r3, [r7, #28]
 80175a0:	2b0b      	cmp	r3, #11
 80175a2:	d905      	bls.n	80175b0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 80175a4:	4917      	ldr	r1, [pc, #92]	; (8017604 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 80175a6:	4818      	ldr	r0, [pc, #96]	; (8017608 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 80175a8:	f000 f83f 	bl	801762a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 80175ac:	2301      	movs	r3, #1
 80175ae:	e024      	b.n	80175fa <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	699a      	ldr	r2, [r3, #24]
 80175b4:	4613      	mov	r3, r2
 80175b6:	005b      	lsls	r3, r3, #1
 80175b8:	4413      	add	r3, r2
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 80175be:	697b      	ldr	r3, [r7, #20]
 80175c0:	4413      	add	r3, r2
 80175c2:	613b      	str	r3, [r7, #16]
  *current_request = {};
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	461a      	mov	r2, r3
 80175c8:	2300      	movs	r3, #0
 80175ca:	6013      	str	r3, [r2, #0]
 80175cc:	6053      	str	r3, [r2, #4]
 80175ce:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 80175d0:	693b      	ldr	r3, [r7, #16]
 80175d2:	68ba      	ldr	r2, [r7, #8]
 80175d4:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	f04f 32ff 	mov.w	r2, #4294967295
 80175dc:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	699b      	ldr	r3, [r3, #24]
 80175e8:	461a      	mov	r2, r3
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	699b      	ldr	r3, [r3, #24]
 80175f2:	1c5a      	adds	r2, r3, #1
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 80175f8:	2300      	movs	r3, #0
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3720      	adds	r7, #32
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}
 8017602:	bf00      	nop
 8017604:	08023e68 	.word	0x08023e68
 8017608:	080216f4 	.word	0x080216f4

0801760c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 801760c:	b580      	push	{r7, lr}
 801760e:	b082      	sub	sp, #8
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	69db      	ldr	r3, [r3, #28]
 8017618:	2104      	movs	r1, #4
 801761a:	4618      	mov	r0, r3
 801761c:	f7ff ff7e 	bl	801751c <_ZN6tflite14AlignPointerUpEPhj>
 8017620:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8017622:	4618      	mov	r0, r3
 8017624:	3708      	adds	r7, #8
 8017626:	46bd      	mov	sp, r7
 8017628:	bd80      	pop	{r7, pc}

0801762a <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 801762a:	b480      	push	{r7}
 801762c:	b083      	sub	sp, #12
 801762e:	af00      	add	r7, sp, #0
 8017630:	6078      	str	r0, [r7, #4]
 8017632:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8017634:	bf00      	nop
 8017636:	370c      	adds	r7, #12
 8017638:	46bd      	mov	sp, r7
 801763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763e:	4770      	bx	lr

08017640 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8017640:	b480      	push	{r7}
 8017642:	b083      	sub	sp, #12
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	695b      	ldr	r3, [r3, #20]
 801764c:	4618      	mov	r0, r3
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	691b      	ldr	r3, [r3, #16]
 8017664:	4618      	mov	r0, r3
 8017666:	370c      	adds	r7, #12
 8017668:	46bd      	mov	sp, r7
 801766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766e:	4770      	bx	lr

08017670 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8017670:	b480      	push	{r7}
 8017672:	b085      	sub	sp, #20
 8017674:	af00      	add	r7, sp, #0
 8017676:	60f8      	str	r0, [r7, #12]
 8017678:	60b9      	str	r1, [r7, #8]
 801767a:	607a      	str	r2, [r7, #4]
 801767c:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 801767e:	4a0c      	ldr	r2, [pc, #48]	; (80176b0 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	601a      	str	r2, [r3, #0]
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	68ba      	ldr	r2, [r7, #8]
 8017688:	605a      	str	r2, [r3, #4]
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	683a      	ldr	r2, [r7, #0]
 801768e:	609a      	str	r2, [r3, #8]
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	60da      	str	r2, [r3, #12]
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	2200      	movs	r2, #0
 801769a:	611a      	str	r2, [r3, #16]
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	2200      	movs	r2, #0
 80176a0:	615a      	str	r2, [r3, #20]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	4618      	mov	r0, r3
 80176a6:	3714      	adds	r7, #20
 80176a8:	46bd      	mov	sp, r7
 80176aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ae:	4770      	bx	lr
 80176b0:	08023e74 	.word	0x08023e74

080176b4 <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 80176b4:	b480      	push	{r7}
 80176b6:	b083      	sub	sp, #12
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	4a04      	ldr	r2, [pc, #16]	; (80176d0 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	601a      	str	r2, [r3, #0]
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	4618      	mov	r0, r3
 80176c6:	370c      	adds	r7, #12
 80176c8:	46bd      	mov	sp, r7
 80176ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ce:	4770      	bx	lr
 80176d0:	08023e74 	.word	0x08023e74

080176d4 <_ZN6tflite12MicroContextD0Ev>:
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f7ff ffe9 	bl	80176b4 <_ZN6tflite12MicroContextD1Ev>
 80176e2:	2118      	movs	r1, #24
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f002 f85b 	bl	80197a0 <_ZdlPvj>
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	4618      	mov	r0, r3
 80176ee:	3708      	adds	r7, #8
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	685a      	ldr	r2, [r3, #4]
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	3314      	adds	r3, #20
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	6839      	ldr	r1, [r7, #0]
 801770e:	4610      	mov	r0, r2
 8017710:	4798      	blx	r3
 8017712:	4603      	mov	r3, r0
}
 8017714:	4618      	mov	r0, r3
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 801771c:	b590      	push	{r4, r7, lr}
 801771e:	b085      	sub	sp, #20
 8017720:	af00      	add	r7, sp, #0
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8017730:	4618      	mov	r0, r3
 8017732:	f7ff ff85 	bl	8017640 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8017736:	4602      	mov	r2, r0
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68b9      	ldr	r1, [r7, #8]
 801773c:	4620      	mov	r0, r4
 801773e:	f7ff ff07 	bl	8017550 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 8017742:	4603      	mov	r3, r0
}
 8017744:	4618      	mov	r0, r3
 8017746:	3714      	adds	r7, #20
 8017748:	46bd      	mov	sp, r7
 801774a:	bd90      	pop	{r4, r7, pc}

0801774c <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 801774c:	b480      	push	{r7}
 801774e:	b085      	sub	sp, #20
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	691a      	ldr	r2, [r3, #16]
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	4413      	add	r3, r2
 8017760:	60fb      	str	r3, [r7, #12]
  return handle->data;
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
}
 8017766:	4618      	mov	r0, r3
 8017768:	3714      	adds	r7, #20
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr

08017772 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 8017772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017776:	b084      	sub	sp, #16
 8017778:	af02      	add	r7, sp, #8
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	685d      	ldr	r5, [r3, #4]
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	3304      	adds	r3, #4
 801778a:	681c      	ldr	r4, [r3, #0]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	68de      	ldr	r6, [r3, #12]
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	4618      	mov	r0, r3
 8017796:	f7ff ff5f 	bl	8017658 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 801779a:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7ff ff4d 	bl	8017640 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80177a6:	4603      	mov	r3, r0
 80177a8:	9300      	str	r3, [sp, #0]
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	4642      	mov	r2, r8
 80177ae:	4631      	mov	r1, r6
 80177b0:	4628      	mov	r0, r5
 80177b2:	47a0      	blx	r4
 80177b4:	4603      	mov	r3, r0
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3708      	adds	r7, #8
 80177ba:	46bd      	mov	sp, r7
 80177bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080177c0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 80177c0:	b480      	push	{r7}
 80177c2:	b087      	sub	sp, #28
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	60f8      	str	r0, [r7, #12]
 80177c8:	60b9      	str	r1, [r7, #8]
 80177ca:	607a      	str	r2, [r7, #4]
 80177cc:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80177ce:	68bb      	ldr	r3, [r7, #8]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	db0f      	blt.n	80177f4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 80177d4:	68ba      	ldr	r2, [r7, #8]
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	429a      	cmp	r2, r3
 80177da:	da0b      	bge.n	80177f4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	009b      	lsls	r3, r3, #2
 80177e0:	683a      	ldr	r2, [r7, #0]
 80177e2:	4413      	add	r3, r2
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177ee:	d001      	beq.n	80177f4 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	e001      	b.n	80177f8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 80177f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80177f8:	4618      	mov	r0, r3
 80177fa:	371c      	adds	r7, #28
 80177fc:	46bd      	mov	sp, r7
 80177fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017802:	4770      	bx	lr

08017804 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 8017804:	b580      	push	{r7, lr}
 8017806:	b086      	sub	sp, #24
 8017808:	af00      	add	r7, sp, #0
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	681a      	ldr	r2, [r3, #0]
 8017816:	68bb      	ldr	r3, [r7, #8]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	3304      	adds	r3, #4
 801781c:	6879      	ldr	r1, [r7, #4]
 801781e:	68f8      	ldr	r0, [r7, #12]
 8017820:	f7ff ffce 	bl	80177c0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8017824:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	2b00      	cmp	r3, #0
 801782a:	da01      	bge.n	8017830 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 801782c:	2300      	movs	r3, #0
 801782e:	e008      	b.n	8017842 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	3314      	adds	r3, #20
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	6979      	ldr	r1, [r7, #20]
 801783a:	68f8      	ldr	r0, [r7, #12]
 801783c:	4798      	blx	r3
 801783e:	4603      	mov	r3, r0
 8017840:	bf00      	nop
}
 8017842:	4618      	mov	r0, r3
 8017844:	3718      	adds	r7, #24
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 801784a:	b580      	push	{r7, lr}
 801784c:	b086      	sub	sp, #24
 801784e:	af00      	add	r7, sp, #0
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	60b9      	str	r1, [r7, #8]
 8017854:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	685b      	ldr	r3, [r3, #4]
 801785a:	681a      	ldr	r2, [r3, #0]
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	3304      	adds	r3, #4
 8017862:	6879      	ldr	r1, [r7, #4]
 8017864:	68f8      	ldr	r0, [r7, #12]
 8017866:	f7ff ffab 	bl	80177c0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 801786a:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801786c:	697b      	ldr	r3, [r7, #20]
 801786e:	2b00      	cmp	r3, #0
 8017870:	da01      	bge.n	8017876 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8017872:	2300      	movs	r3, #0
 8017874:	e008      	b.n	8017888 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	3314      	adds	r3, #20
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	6979      	ldr	r1, [r7, #20]
 8017880:	68f8      	ldr	r0, [r7, #12]
 8017882:	4798      	blx	r3
 8017884:	4603      	mov	r3, r0
 8017886:	bf00      	nop
}
 8017888:	4618      	mov	r0, r3
 801788a:	3718      	adds	r7, #24
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}

08017890 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 8017890:	b580      	push	{r7, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	af00      	add	r7, sp, #0
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	60b9      	str	r1, [r7, #8]
 801789a:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	689b      	ldr	r3, [r3, #8]
 80178a0:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	689b      	ldr	r3, [r3, #8]
 80178a6:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80178a8:	6879      	ldr	r1, [r7, #4]
 80178aa:	68f8      	ldr	r0, [r7, #12]
 80178ac:	f7ff ff88 	bl	80177c0 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80178b0:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	da01      	bge.n	80178bc <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80178b8:	2300      	movs	r3, #0
 80178ba:	e008      	b.n	80178ce <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	3314      	adds	r3, #20
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	6979      	ldr	r1, [r7, #20]
 80178c6:	68f8      	ldr	r0, [r7, #12]
 80178c8:	4798      	blx	r3
 80178ca:	4603      	mov	r3, r0
 80178cc:	bf00      	nop
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3718      	adds	r7, #24
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b082      	sub	sp, #8
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
 80178de:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	685a      	ldr	r2, [r3, #4]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	685b      	ldr	r3, [r3, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	3308      	adds	r3, #8
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	6839      	ldr	r1, [r7, #0]
 80178f0:	4610      	mov	r0, r2
 80178f2:	4798      	blx	r3
 80178f4:	bf00      	nop
}
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 80178fc:	b590      	push	{r4, r7, lr}
 80178fe:	b083      	sub	sp, #12
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	689b      	ldr	r3, [r3, #8]
 801790a:	4618      	mov	r0, r3
 801790c:	f7ff fea4 	bl	8017658 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8017910:	4604      	mov	r4, r0
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	689b      	ldr	r3, [r3, #8]
 8017916:	4618      	mov	r0, r3
 8017918:	f7ff fe92 	bl	8017640 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 801791c:	4603      	mov	r3, r0
 801791e:	00db      	lsls	r3, r3, #3
 8017920:	4423      	add	r3, r4
              .tensors[tensor_idx];
 8017922:	6859      	ldr	r1, [r3, #4]
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	4613      	mov	r3, r2
 8017928:	005b      	lsls	r3, r3, #1
 801792a:	4413      	add	r3, r2
 801792c:	009b      	lsls	r3, r3, #2
 801792e:	440b      	add	r3, r1
}
 8017930:	4618      	mov	r0, r3
 8017932:	370c      	adds	r7, #12
 8017934:	46bd      	mov	sp, r7
 8017936:	bd90      	pop	{r4, r7, pc}

08017938 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8017938:	b40e      	push	{r1, r2, r3}
 801793a:	b580      	push	{r7, lr}
 801793c:	b085      	sub	sp, #20
 801793e:	af00      	add	r7, sp, #0
 8017940:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8017942:	f107 0320 	add.w	r3, r7, #32
 8017946:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8017948:	68f9      	ldr	r1, [r7, #12]
 801794a:	69f8      	ldr	r0, [r7, #28]
 801794c:	f000 f81e 	bl	801798c <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8017950:	bf00      	nop
 8017952:	3714      	adds	r7, #20
 8017954:	46bd      	mov	sp, r7
 8017956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801795a:	b003      	add	sp, #12
 801795c:	4770      	bx	lr

0801795e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 801795e:	b480      	push	{r7}
 8017960:	b083      	sub	sp, #12
 8017962:	af00      	add	r7, sp, #0
 8017964:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	689b      	ldr	r3, [r3, #8]
}
 801796a:	4618      	mov	r0, r3
 801796c:	370c      	adds	r7, #12
 801796e:	46bd      	mov	sp, r7
 8017970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017974:	4770      	bx	lr

08017976 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 8017976:	b480      	push	{r7}
 8017978:	b083      	sub	sp, #12
 801797a:	af00      	add	r7, sp, #0
 801797c:	6078      	str	r0, [r7, #4]
 801797e:	6039      	str	r1, [r7, #0]
}
 8017980:	bf00      	nop
 8017982:	370c      	adds	r7, #12
 8017984:	46bd      	mov	sp, r7
 8017986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798a:	4770      	bx	lr

0801798c <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 801798c:	b480      	push	{r7}
 801798e:	b083      	sub	sp, #12
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
 8017994:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 8017996:	bf00      	nop
 8017998:	370c      	adds	r7, #12
 801799a:	46bd      	mov	sp, r7
 801799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a0:	4770      	bx	lr

080179a2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80179a2:	b580      	push	{r7, lr}
 80179a4:	b082      	sub	sp, #8
 80179a6:	af00      	add	r7, sp, #0
 80179a8:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d101      	bne.n	80179b4 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80179b0:	f005 f9bc 	bl	801cd2c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3708      	adds	r7, #8
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}

080179c0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d101      	bne.n	80179d2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 80179ce:	f005 f9ad 	bl	801cd2c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}

080179de <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80179de:	b580      	push	{r7, lr}
 80179e0:	b082      	sub	sp, #8
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d101      	bne.n	80179f0 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 80179ec:	f005 f99e 	bl	801cd2c <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3708      	adds	r7, #8
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d101      	bne.n	8017a0e <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8017a0a:	f005 f98f 	bl	801cd2c <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3708      	adds	r7, #8
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}

08017a1a <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8017a1a:	b580      	push	{r7, lr}
 8017a1c:	b082      	sub	sp, #8
 8017a1e:	af00      	add	r7, sp, #0
 8017a20:	6078      	str	r0, [r7, #4]
 8017a22:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8017a24:	683b      	ldr	r3, [r7, #0]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	da01      	bge.n	8017a2e <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8017a2a:	f005 f97f 	bl	801cd2c <abort>
    TFLITE_DCHECK_LT(i, size_);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	683a      	ldr	r2, [r7, #0]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	db01      	blt.n	8017a3c <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8017a38:	f005 f978 	bl	801cd2c <abort>
    return dims_[i];
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	009b      	lsls	r3, r3, #2
 8017a42:	4413      	add	r3, r2
 8017a44:	685b      	ldr	r3, [r3, #4]
  }
 8017a46:	4618      	mov	r0, r3
 8017a48:	3708      	adds	r7, #8
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
	...

08017a50 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8017a50:	b480      	push	{r7}
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	4b04      	ldr	r3, [pc, #16]	; (8017a68 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8017a56:	ee07 3a90 	vmov	s15, r3
 8017a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a64:	4770      	bx	lr
 8017a66:	bf00      	nop
 8017a68:	7f7fffff 	.word	0x7f7fffff

08017a6c <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8017a6c:	b480      	push	{r7}
 8017a6e:	af00      	add	r7, sp, #0
 8017a70:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8017a74:	ee07 3a90 	vmov	s15, r3
 8017a78:	eeb0 0a67 	vmov.f32	s0, s15
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a82:	4770      	bx	lr

08017a84 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b084      	sub	sp, #16
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8017a8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8017a92:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 8017a96:	f107 0208 	add.w	r2, r7, #8
 8017a9a:	f107 030c 	add.w	r3, r7, #12
 8017a9e:	4611      	mov	r1, r2
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7f2 f95b 	bl	8009d5c <_ZSt3maxIfERKT_S2_S2_>
 8017aa6:	4602      	mov	r2, r0
 8017aa8:	1d3b      	adds	r3, r7, #4
 8017aaa:	4619      	mov	r1, r3
 8017aac:	4610      	mov	r0, r2
 8017aae:	f7ff f9b9 	bl	8016e24 <_ZSt3minIfERKT_S2_S2_>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	ee07 3a90 	vmov	s15, r3
}
 8017aba:	eeb0 0a67 	vmov.f32	s0, s15
 8017abe:	3710      	adds	r7, #16
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}

08017ac4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b084      	sub	sp, #16
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	4603      	mov	r3, r0
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8017ad2:	7bfb      	ldrb	r3, [r7, #15]
 8017ad4:	2b01      	cmp	r3, #1
 8017ad6:	d10b      	bne.n	8017af0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	f04f 0200 	mov.w	r2, #0
 8017ade:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8017ae0:	f7ff ffb6 	bl	8017a50 <_ZNSt14numeric_limitsIfE3maxEv>
 8017ae4:	eef0 7a40 	vmov.f32	s15, s0
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8017aee:	e023      	b.n	8017b38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8017af0:	7bfb      	ldrb	r3, [r7, #15]
 8017af2:	2b03      	cmp	r3, #3
 8017af4:	d107      	bne.n	8017b06 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	f04f 0200 	mov.w	r2, #0
 8017afc:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	4a0f      	ldr	r2, [pc, #60]	; (8017b40 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8017b02:	601a      	str	r2, [r3, #0]
}
 8017b04:	e018      	b.n	8017b38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8017b06:	7bfb      	ldrb	r3, [r7, #15]
 8017b08:	2b02      	cmp	r3, #2
 8017b0a:	d107      	bne.n	8017b1c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	4a0d      	ldr	r2, [pc, #52]	; (8017b44 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8017b10:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017b18:	601a      	str	r2, [r3, #0]
}
 8017b1a:	e00d      	b.n	8017b38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8017b1c:	f7ff ffa6 	bl	8017a6c <_ZNSt14numeric_limitsIfE6lowestEv>
 8017b20:	eef0 7a40 	vmov.f32	s15, s0
 8017b24:	68bb      	ldr	r3, [r7, #8]
 8017b26:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8017b2a:	f7ff ff91 	bl	8017a50 <_ZNSt14numeric_limitsIfE3maxEv>
 8017b2e:	eef0 7a40 	vmov.f32	s15, s0
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	edc3 7a00 	vstr	s15, [r3]
}
 8017b38:	bf00      	nop
 8017b3a:	3710      	adds	r7, #16
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}
 8017b40:	40c00000 	.word	0x40c00000
 8017b44:	bf800000 	.word	0xbf800000

08017b48 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8017b48:	b480      	push	{r7}
 8017b4a:	b085      	sub	sp, #20
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
}
 8017b54:	bf00      	nop
 8017b56:	3714      	adds	r7, #20
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8017b60:	b590      	push	{r4, r7, lr}
 8017b62:	b087      	sub	sp, #28
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	60b9      	str	r1, [r7, #8]
 8017b6a:	607a      	str	r2, [r7, #4]
 8017b6c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8017b6e:	68b9      	ldr	r1, [r7, #8]
 8017b70:	68f8      	ldr	r0, [r7, #12]
 8017b72:	f7ff ff52 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017b76:	4604      	mov	r4, r0
 8017b78:	6839      	ldr	r1, [r7, #0]
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7ff ff4d 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017b80:	4603      	mov	r3, r0
 8017b82:	429c      	cmp	r4, r3
 8017b84:	d001      	beq.n	8017b8a <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8017b86:	f005 f8d1 	bl	801cd2c <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 8017b8a:	68b9      	ldr	r1, [r7, #8]
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f7ff ff44 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017b92:	4603      	mov	r3, r0
 8017b94:	613b      	str	r3, [r7, #16]
 8017b96:	6839      	ldr	r1, [r7, #0]
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7ff ff3e 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	617b      	str	r3, [r7, #20]
 8017ba2:	f107 0214 	add.w	r2, r7, #20
 8017ba6:	f107 0310 	add.w	r3, r7, #16
 8017baa:	4611      	mov	r1, r2
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7f3 faca 	bl	800b146 <_ZSt3minIlERKT_S2_S2_>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	681b      	ldr	r3, [r3, #0]
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	371c      	adds	r7, #28
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd90      	pop	{r4, r7, pc}

08017bbe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8017bbe:	b580      	push	{r7, lr}
 8017bc0:	b086      	sub	sp, #24
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
 8017bc6:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f7ff fc9b 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017bce:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	db03      	blt.n	8017bde <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8017bd6:	683a      	ldr	r2, [r7, #0]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	db01      	blt.n	8017be2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8017bde:	f005 f8a5 	bl	801cd2c <abort>
  const auto* dims_data = shape.DimsData();
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f7ff f846 	bl	8016c74 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8017be8:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8017bea:	2301      	movs	r3, #1
 8017bec:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8017bee:	2300      	movs	r3, #0
 8017bf0:	613b      	str	r3, [r7, #16]
 8017bf2:	e011      	b.n	8017c18 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8017bf4:	693a      	ldr	r2, [r7, #16]
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d005      	beq.n	8017c08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	68ba      	ldr	r2, [r7, #8]
 8017c02:	4413      	add	r3, r2
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	e000      	b.n	8017c0a <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8017c08:	2301      	movs	r3, #1
 8017c0a:	697a      	ldr	r2, [r7, #20]
 8017c0c:	fb02 f303 	mul.w	r3, r2, r3
 8017c10:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8017c12:	693b      	ldr	r3, [r7, #16]
 8017c14:	3301      	adds	r3, #1
 8017c16:	613b      	str	r3, [r7, #16]
 8017c18:	693a      	ldr	r2, [r7, #16]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	429a      	cmp	r2, r3
 8017c1e:	dbe9      	blt.n	8017bf4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8017c20:	697b      	ldr	r3, [r7, #20]
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3718      	adds	r7, #24
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8017c2a:	b590      	push	{r4, r7, lr}
 8017c2c:	b091      	sub	sp, #68	; 0x44
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	60f8      	str	r0, [r7, #12]
 8017c32:	60b9      	str	r1, [r7, #8]
 8017c34:	607a      	str	r2, [r7, #4]
 8017c36:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	69db      	ldr	r3, [r3, #28]
 8017c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	6a1b      	ldr	r3, [r3, #32]
 8017c42:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8017c44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017c46:	f7ff fc5d 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017c4a:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8017c4c:	6838      	ldr	r0, [r7, #0]
 8017c4e:	f7ff fc59 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017c52:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8017c54:	6a3b      	ldr	r3, [r7, #32]
 8017c56:	3b01      	subs	r3, #1
 8017c58:	4619      	mov	r1, r3
 8017c5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8017c5c:	f7ff ffaf 	bl	8017bbe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8017c60:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	1e99      	subs	r1, r3, #2
 8017c66:	6a3b      	ldr	r3, [r7, #32]
 8017c68:	3b01      	subs	r3, #1
 8017c6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017c6c:	6838      	ldr	r0, [r7, #0]
 8017c6e:	f7ff ff77 	bl	8017b60 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8017c72:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	3b01      	subs	r3, #1
 8017c78:	4619      	mov	r1, r3
 8017c7a:	6838      	ldr	r0, [r7, #0]
 8017c7c:	f7ff fecd 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017c80:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8017c82:	2300      	movs	r3, #0
 8017c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c86:	e05e      	b.n	8017d46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8017c88:	2300      	movs	r3, #0
 8017c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c8c:	e054      	b.n	8017d38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 8017c8e:	f04f 0300 	mov.w	r3, #0
 8017c92:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8017c94:	2300      	movs	r3, #0
 8017c96:	633b      	str	r3, [r7, #48]	; 0x30
 8017c98:	e020      	b.n	8017cdc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 8017c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c9c:	693a      	ldr	r2, [r7, #16]
 8017c9e:	fb03 f202 	mul.w	r2, r3, r2
 8017ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca4:	4413      	add	r3, r2
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	4413      	add	r3, r2
 8017cac:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8017cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb2:	693a      	ldr	r2, [r7, #16]
 8017cb4:	fb03 f202 	mul.w	r2, r3, r2
 8017cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cba:	4413      	add	r3, r2
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017cc0:	4413      	add	r3, r2
 8017cc2:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 8017cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017cca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cd2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8017cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd8:	3301      	adds	r3, #1
 8017cda:	633b      	str	r3, [r7, #48]	; 0x30
 8017cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	dbda      	blt.n	8017c9a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 8017ce4:	f04f 0300 	mov.w	r3, #0
 8017ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8017cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d005      	beq.n	8017cfc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf2:	009b      	lsls	r3, r3, #2
 8017cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017cf6:	4413      	add	r3, r2
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8017cfc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8017d00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017d0c:	fb03 f202 	mul.w	r2, r3, r2
 8017d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d12:	4413      	add	r3, r2
 8017d14:	009b      	lsls	r3, r3, #2
 8017d16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017d18:	18d4      	adds	r4, r2, r3
 8017d1a:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8017d1e:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8017d22:	eeb0 0a67 	vmov.f32	s0, s15
 8017d26:	f7ff fead 	bl	8017a84 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8017d2a:	eef0 7a40 	vmov.f32	s15, s0
 8017d2e:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8017d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d34:	3301      	adds	r3, #1
 8017d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8017d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017d3a:	697b      	ldr	r3, [r7, #20]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	dba6      	blt.n	8017c8e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8017d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d42:	3301      	adds	r3, #1
 8017d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017d46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017d48:	69bb      	ldr	r3, [r7, #24]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	db9c      	blt.n	8017c88 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8017d4e:	bf00      	nop
 8017d50:	bf00      	nop
 8017d52:	3744      	adds	r7, #68	; 0x44
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd90      	pop	{r4, r7, pc}

08017d58 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b084      	sub	sp, #16
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	60f8      	str	r0, [r7, #12]
 8017d60:	60b9      	str	r1, [r7, #8]
 8017d62:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d101      	bne.n	8017d70 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8017d6c:	f004 ffde 	bl	801cd2c <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d74:	213c      	movs	r1, #60	; 0x3c
 8017d76:	68f8      	ldr	r0, [r7, #12]
 8017d78:	4798      	blx	r3
 8017d7a:	4603      	mov	r3, r0
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3710      	adds	r7, #16
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}

08017d84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8017d84:	b5b0      	push	{r4, r5, r7, lr}
 8017d86:	b0b2      	sub	sp, #200	; 0xc8
 8017d88:	af04      	add	r7, sp, #16
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	691b      	ldr	r3, [r3, #16]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d101      	bne.n	8017d9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8017d96:	f004 ffc9 	bl	801cd2c <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	695b      	ldr	r3, [r3, #20]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d101      	bne.n	8017da6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8017da2:	f004 ffc3 	bl	801cd2c <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	691b      	ldr	r3, [r3, #16]
 8017daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto params =
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	695b      	ldr	r3, [r3, #20]
 8017db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7ff fdd1 	bl	801795e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 8017dbc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 8017dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	3318      	adds	r3, #24
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	4ab7      	ldr	r2, [pc, #732]	; (80180a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8017dcc:	6812      	ldr	r2, [r2, #0]
 8017dce:	6839      	ldr	r1, [r7, #0]
 8017dd0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017dd4:	4798      	blx	r3
 8017dd6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 8017dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d10a      	bne.n	8017df8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	691c      	ldr	r4, [r3, #16]
 8017de6:	4bb1      	ldr	r3, [pc, #708]	; (80180ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8017de8:	9300      	str	r3, [sp, #0]
 8017dea:	2347      	movs	r3, #71	; 0x47
 8017dec:	4ab0      	ldr	r2, [pc, #704]	; (80180b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017dee:	49b1      	ldr	r1, [pc, #708]	; (80180b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017df0:	6878      	ldr	r0, [r7, #4]
 8017df2:	47a0      	blx	r4
 8017df4:	2401      	movs	r4, #1
 8017df6:	e1a8      	b.n	801814a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8017df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	3318      	adds	r3, #24
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4aad      	ldr	r2, [pc, #692]	; (80180b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 8017e04:	6812      	ldr	r2, [r2, #0]
 8017e06:	6839      	ldr	r1, [r7, #0]
 8017e08:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017e0c:	4798      	blx	r3
 8017e0e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 8017e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d10a      	bne.n	8017e30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	691c      	ldr	r4, [r3, #16]
 8017e1e:	4ba7      	ldr	r3, [pc, #668]	; (80180bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8017e20:	9300      	str	r3, [sp, #0]
 8017e22:	234a      	movs	r3, #74	; 0x4a
 8017e24:	4aa2      	ldr	r2, [pc, #648]	; (80180b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017e26:	49a3      	ldr	r1, [pc, #652]	; (80180b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	47a0      	blx	r4
 8017e2c:	2401      	movs	r4, #1
 8017e2e:	e18c      	b.n	801814a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8017e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	3318      	adds	r3, #24
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4aa1      	ldr	r2, [pc, #644]	; (80180c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8017e3c:	6812      	ldr	r2, [r2, #0]
 8017e3e:	6839      	ldr	r1, [r7, #0]
 8017e40:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017e44:	4798      	blx	r3
 8017e46:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8017e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	331c      	adds	r3, #28
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	4a9b      	ldr	r2, [pc, #620]	; (80180c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 8017e56:	6812      	ldr	r2, [r2, #0]
 8017e58:	6839      	ldr	r1, [r7, #0]
 8017e5a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8017e5e:	4798      	blx	r3
 8017e60:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 8017e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d10a      	bne.n	8017e82 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	691c      	ldr	r4, [r3, #16]
 8017e70:	4b95      	ldr	r3, [pc, #596]	; (80180c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 8017e72:	9300      	str	r3, [sp, #0]
 8017e74:	234f      	movs	r3, #79	; 0x4f
 8017e76:	4a8e      	ldr	r2, [pc, #568]	; (80180b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017e78:	498e      	ldr	r1, [pc, #568]	; (80180b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	47a0      	blx	r4
 8017e7e:	2401      	movs	r4, #1
 8017e80:	e163      	b.n	801814a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8017e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e86:	781a      	ldrb	r2, [r3, #0]
 8017e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017e8c:	781b      	ldrb	r3, [r3, #0]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d01c      	beq.n	8017ecc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	691c      	ldr	r4, [r3, #16]
 8017e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7fe fe29 	bl	8016af4 <TfLiteTypeGetName>
 8017ea2:	4605      	mov	r5, r0
 8017ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fe fe22 	bl	8016af4 <TfLiteTypeGetName>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	9303      	str	r3, [sp, #12]
 8017eb4:	9502      	str	r5, [sp, #8]
 8017eb6:	4b85      	ldr	r3, [pc, #532]	; (80180cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 8017eb8:	9301      	str	r3, [sp, #4]
 8017eba:	4b85      	ldr	r3, [pc, #532]	; (80180d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 8017ebc:	9300      	str	r3, [sp, #0]
 8017ebe:	2351      	movs	r3, #81	; 0x51
 8017ec0:	4a7b      	ldr	r2, [pc, #492]	; (80180b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8017ec2:	4984      	ldr	r1, [pc, #528]	; (80180d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	47a0      	blx	r4
 8017ec8:	2401      	movs	r4, #1
 8017eca:	e13e      	b.n	801814a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 8017ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017ed0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7fe ff14 	bl	8016d02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 8017eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017ede:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7fe ff0d 	bl	8016d02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8017ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7ff fb09 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017ef2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 8017ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ff fb02 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8017f00:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 8017f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017f08:	1e5a      	subs	r2, r3, #1
 8017f0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017f0e:	4611      	mov	r1, r2
 8017f10:	4618      	mov	r0, r3
 8017f12:	f7ff fd82 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017f16:	4603      	mov	r3, r0
 8017f18:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.h = 1;
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_dims.w = 1;
 8017f1e:	2301      	movs	r3, #1
 8017f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 8017f22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017f26:	1e5a      	subs	r2, r3, #1
 8017f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017f2c:	4611      	mov	r1, r2
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f7ff fd73 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017f34:	4603      	mov	r3, r0
 8017f36:	633b      	str	r3, [r7, #48]	; 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8017f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017f3c:	1e5a      	subs	r2, r3, #1
 8017f3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017f42:	4611      	mov	r1, r2
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7ff fd68 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f50:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8017f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017f56:	1e5a      	subs	r2, r3, #1
 8017f58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017f5c:	4611      	mov	r1, r2
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7ff fe2d 	bl	8017bbe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8017f64:	4602      	mov	r2, r0
 8017f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f6a:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8017f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017f70:	1e5a      	subs	r2, r3, #1
 8017f72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017f76:	4611      	mov	r1, r2
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7ff fd4e 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8017f7e:	4602      	mov	r2, r0
 8017f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f84:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8017f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8017f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 8017f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8017f94:	7819      	ldrb	r1, [r3, #0]
 8017f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017f9a:	781a      	ldrb	r2, [r3, #0]
 8017f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017fa0:	9303      	str	r3, [sp, #12]
 8017fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017fa6:	9302      	str	r3, [sp, #8]
 8017fa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017fac:	9301      	str	r3, [sp, #4]
 8017fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017fb2:	9300      	str	r3, [sp, #0]
 8017fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f000 fa31 	bl	8018420 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8017fc4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d002      	beq.n	8017fd2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 8017fcc:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8017fd0:	e0b1      	b.n	8018136 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if (input->type == kTfLiteInt16) {
 8017fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	2b07      	cmp	r3, #7
 8017fe0:	d10f      	bne.n	8018002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 8017fe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7fe fd83 	bl	8016af4 <TfLiteTypeGetName>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8017ff2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017ff6:	4619      	mov	r1, r3
 8017ff8:	4837      	ldr	r0, [pc, #220]	; (80180d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8017ffa:	f7ff fcbc 	bl	8017976 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8017ffe:	2401      	movs	r4, #1
 8018000:	e099      	b.n	8018136 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 8018002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	2b09      	cmp	r3, #9
 801800a:	d10f      	bne.n	801802c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 801800c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	4618      	mov	r0, r3
 8018014:	f7fe fd6e 	bl	8016af4 <TfLiteTypeGetName>
 8018018:	4603      	mov	r3, r0
 801801a:	66bb      	str	r3, [r7, #104]	; 0x68
 801801c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018020:	4619      	mov	r1, r3
 8018022:	482d      	ldr	r0, [pc, #180]	; (80180d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8018024:	f7ff fca7 	bl	8017976 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8018028:	2401      	movs	r4, #1
 801802a:	e084      	b.n	8018136 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 801802c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	2b12      	cmp	r3, #18
 8018034:	d121      	bne.n	801807a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 8018036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801803a:	689b      	ldr	r3, [r3, #8]
 801803c:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 801803e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018042:	689b      	ldr	r3, [r3, #8]
 8018044:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 8018046:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801804a:	4618      	mov	r0, r3
 801804c:	f7fe fde8 	bl	8016c20 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8018050:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018054:	4618      	mov	r0, r3
 8018056:	f7fe fe31 	bl	8016cbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801805a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        RuntimeShape(filter->dims->size,
 801805e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018062:	4618      	mov	r0, r3
 8018064:	f7fe fdef 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801806c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8018070:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018074:	3220      	adds	r2, #32
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 801807a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801807e:	2b00      	cmp	r3, #0
 8018080:	dd2c      	ble.n	80180dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018086:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801808a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801808e:	322c      	adds	r2, #44	; 0x2c
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	4798      	blx	r3
 8018094:	4603      	mov	r3, r0
 8018096:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 801809a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d01c      	beq.n	80180dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 80180a2:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 80180a6:	e046      	b.n	8018136 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 80180a8:	08023ea0 	.word	0x08023ea0
 80180ac:	08021e70 	.word	0x08021e70
 80180b0:	08021dc0 	.word	0x08021dc0
 80180b4:	08021e58 	.word	0x08021e58
 80180b8:	08023ea4 	.word	0x08023ea4
 80180bc:	08021e84 	.word	0x08021e84
 80180c0:	08023ea8 	.word	0x08023ea8
 80180c4:	08023eac 	.word	0x08023eac
 80180c8:	08021e98 	.word	0x08021e98
 80180cc:	08021ec8 	.word	0x08021ec8
 80180d0:	08021ed8 	.word	0x08021ed8
 80180d4:	08021eac 	.word	0x08021eac
 80180d8:	08021ee4 	.word	0x08021ee4
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 80180dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	3324      	adds	r3, #36	; 0x24
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80180ea:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80180ee:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 80180f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	3324      	adds	r3, #36	; 0x24
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80180fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018102:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8018104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	3324      	adds	r3, #36	; 0x24
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8018112:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018116:	4798      	blx	r3
  if (bias != nullptr) {
 8018118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d009      	beq.n	8018134 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8018120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	3324      	adds	r3, #36	; 0x24
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801812e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018132:	4798      	blx	r3
  }

  return kTfLiteOk;
 8018134:	2400      	movs	r4, #0
}
 8018136:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801813a:	4618      	mov	r0, r3
 801813c:	f7fe fd83 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
 8018140:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018144:	4618      	mov	r0, r3
 8018146:	f7fe fd7e 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
 801814a:	4623      	mov	r3, r4
 801814c:	4618      	mov	r0, r3
 801814e:	37b8      	adds	r7, #184	; 0xb8
 8018150:	46bd      	mov	sp, r7
 8018152:	bdb0      	pop	{r4, r5, r7, pc}

08018154 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8018154:	b5b0      	push	{r4, r5, r7, lr}
 8018156:	b0b8      	sub	sp, #224	; 0xe0
 8018158:	af06      	add	r7, sp, #24
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	695b      	ldr	r3, [r3, #20]
 8018162:	2b00      	cmp	r3, #0
 8018164:	d101      	bne.n	801816a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8018166:	f004 fde1 	bl	801cd2c <abort>
  const auto* params =
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	695b      	ldr	r3, [r3, #20]
 801816e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8018172:	4b7f      	ldr	r3, [pc, #508]	; (8018370 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	461a      	mov	r2, r3
 8018178:	6839      	ldr	r1, [r7, #0]
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f000 fa21 	bl	80185c2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018180:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8018184:	4b7b      	ldr	r3, [pc, #492]	; (8018374 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	461a      	mov	r2, r3
 801818a:	6839      	ldr	r1, [r7, #0]
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	f000 fa18 	bl	80185c2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018192:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8018196:	4b78      	ldr	r3, [pc, #480]	; (8018378 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	461a      	mov	r2, r3
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f000 fa0f 	bl	80185c2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80181a4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 80181a8:	4b74      	ldr	r3, [pc, #464]	; (801837c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	461a      	mov	r2, r3
 80181ae:	6839      	ldr	r1, [r7, #0]
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f000 fa16 	bl	80185e2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80181b6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	691b      	ldr	r3, [r3, #16]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d101      	bne.n	80181c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 80181c2:	f004 fdb3 	bl	801cd2c <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	691b      	ldr	r3, [r3, #16]
 80181ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 80181ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80181d2:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 80181d4:	f107 0008 	add.w	r0, r7, #8
 80181d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	f000 fa42 	bl	8018666 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 80181e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80181e6:	7a1b      	ldrb	r3, [r3, #8]
 80181e8:	2b09      	cmp	r3, #9
 80181ea:	d06e      	beq.n	80182ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 80181ec:	2b09      	cmp	r3, #9
 80181ee:	f300 80a6 	bgt.w	801833e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d003      	beq.n	80181fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 80181f6:	2b07      	cmp	r3, #7
 80181f8:	f000 8090 	beq.w	801831c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 80181fc:	e09f      	b.n	801833e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 80181fe:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8018202:	f000 f8db 	bl	80183bc <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018206:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 801820a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801820e:	781a      	ldrb	r2, [r3, #0]
 8018210:	f107 0314 	add.w	r3, r7, #20
 8018214:	4611      	mov	r1, r2
 8018216:	4618      	mov	r0, r3
 8018218:	f000 f8ed 	bl	80183f6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 801821c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018220:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8018224:	4618      	mov	r0, r3
 8018226:	f000 f9fc 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 801822a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801822e:	f7ff fbb8 	bl	80179a2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018232:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8018234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018238:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801823c:	4618      	mov	r0, r3
 801823e:	f000 f9f0 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018242:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8018246:	f7ff fbac 	bl	80179a2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801824a:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 801824c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018250:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8018254:	4618      	mov	r0, r3
 8018256:	f000 f9e4 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 801825a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801825e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8018262:	4618      	mov	r0, r3
 8018264:	f000 f9dd 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018268:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801826c:	f7ff fba8 	bl	80179c0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018270:	4603      	mov	r3, r0
 8018272:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8018276:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801827a:	f107 0014 	add.w	r0, r7, #20
 801827e:	9304      	str	r3, [sp, #16]
 8018280:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018284:	9303      	str	r3, [sp, #12]
 8018286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801828a:	9302      	str	r3, [sp, #8]
 801828c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018290:	9301      	str	r3, [sp, #4]
 8018292:	9400      	str	r4, [sp, #0]
 8018294:	4613      	mov	r3, r2
 8018296:	462a      	mov	r2, r5
 8018298:	f7ff fcc7 	bl	8017c2a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 801829c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80182a0:	4618      	mov	r0, r3
 80182a2:	f7fe fcd0 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 80182a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7fe fccb 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 80182b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7fe fcc6 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 80182ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80182be:	4618      	mov	r0, r3
 80182c0:	f7fe fcc1 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 80182c4:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 80182c6:	2300      	movs	r3, #0
 80182c8:	e04d      	b.n	8018366 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 80182ca:	7c3b      	ldrb	r3, [r7, #16]
 80182cc:	2b09      	cmp	r3, #9
 80182ce:	d110      	bne.n	80182f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 80182d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80182d4:	7a1b      	ldrb	r3, [r3, #8]
 80182d6:	4618      	mov	r0, r3
 80182d8:	f7fe fc0c 	bl	8016af4 <TfLiteTypeGetName>
 80182dc:	4603      	mov	r3, r0
 80182de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80182e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80182e6:	4619      	mov	r1, r3
 80182e8:	4825      	ldr	r0, [pc, #148]	; (8018380 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 80182ea:	f7ff fb44 	bl	8017976 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 80182ee:	2301      	movs	r3, #1
 80182f0:	e039      	b.n	8018366 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 80182f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80182f6:	7a1b      	ldrb	r3, [r3, #8]
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7fe fbfb 	bl	8016af4 <TfLiteTypeGetName>
 80182fe:	4603      	mov	r3, r0
 8018300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018308:	f103 0208 	add.w	r2, r3, #8
 801830c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018310:	4619      	mov	r1, r3
 8018312:	481c      	ldr	r0, [pc, #112]	; (8018384 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 8018314:	f000 f863 	bl	80183de <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8018318:	2301      	movs	r3, #1
 801831a:	e024      	b.n	8018366 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 801831c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018320:	7a1b      	ldrb	r3, [r3, #8]
 8018322:	4618      	mov	r0, r3
 8018324:	f7fe fbe6 	bl	8016af4 <TfLiteTypeGetName>
 8018328:	4603      	mov	r3, r0
 801832a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801832e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018332:	4619      	mov	r1, r3
 8018334:	4812      	ldr	r0, [pc, #72]	; (8018380 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018336:	f7ff fb1e 	bl	8017976 <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 801833a:	2301      	movs	r3, #1
 801833c:	e013      	b.n	8018366 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 801833e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018342:	7a1b      	ldrb	r3, [r3, #8]
 8018344:	4618      	mov	r0, r3
 8018346:	f7fe fbd5 	bl	8016af4 <TfLiteTypeGetName>
 801834a:	4603      	mov	r3, r0
 801834c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018354:	f103 0208 	add.w	r2, r3, #8
 8018358:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801835c:	4619      	mov	r1, r3
 801835e:	480a      	ldr	r0, [pc, #40]	; (8018388 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 8018360:	f7ff fbf2 	bl	8017b48 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 8018364:	2301      	movs	r3, #1
}
 8018366:	4618      	mov	r0, r3
 8018368:	37c8      	adds	r7, #200	; 0xc8
 801836a:	46bd      	mov	sp, r7
 801836c:	bdb0      	pop	{r4, r5, r7, pc}
 801836e:	bf00      	nop
 8018370:	08023ea0 	.word	0x08023ea0
 8018374:	08023ea4 	.word	0x08023ea4
 8018378:	08023ea8 	.word	0x08023ea8
 801837c:	08023eac 	.word	0x08023eac
 8018380:	08021ee4 	.word	0x08021ee4
 8018384:	08022154 	.word	0x08022154
 8018388:	08022178 	.word	0x08022178

0801838c <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 801838c:	b580      	push	{r7, lr}
 801838e:	b084      	sub	sp, #16
 8018390:	af02      	add	r7, sp, #8
 8018392:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	2300      	movs	r3, #0
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	4b05      	ldr	r3, [pc, #20]	; (80183b0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 801839c:	4a05      	ldr	r2, [pc, #20]	; (80183b4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 801839e:	4906      	ldr	r1, [pc, #24]	; (80183b8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 80183a0:	f000 f8b6 	bl	8018510 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 80183a4:	bf00      	nop
}
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	3708      	adds	r7, #8
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	08018155 	.word	0x08018155
 80183b4:	08017d85 	.word	0x08017d85
 80183b8:	08017d59 	.word	0x08017d59

080183bc <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 80183bc:	b480      	push	{r7}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d002      	beq.n	80183d0 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 80183ce:	e000      	b.n	80183d2 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 80183d0:	2300      	movs	r3, #0
}
 80183d2:	4618      	mov	r0, r3
 80183d4:	370c      	adds	r7, #12
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr

080183de <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 80183de:	b480      	push	{r7}
 80183e0:	b085      	sub	sp, #20
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	60f8      	str	r0, [r7, #12]
 80183e6:	60b9      	str	r1, [r7, #8]
 80183e8:	607a      	str	r2, [r7, #4]
}
 80183ea:	bf00      	nop
 80183ec:	3714      	adds	r7, #20
 80183ee:	46bd      	mov	sp, r7
 80183f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f4:	4770      	bx	lr

080183f6 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 80183f6:	b580      	push	{r7, lr}
 80183f8:	b082      	sub	sp, #8
 80183fa:	af00      	add	r7, sp, #0
 80183fc:	6078      	str	r0, [r7, #4]
 80183fe:	460b      	mov	r3, r1
 8018400:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	f103 0220 	add.w	r2, r3, #32
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	f103 011c 	add.w	r1, r3, #28
 801840e:	78fb      	ldrb	r3, [r7, #3]
 8018410:	4618      	mov	r0, r3
 8018412:	f7ff fb57 	bl	8017ac4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8018416:	bf00      	nop
}
 8018418:	6878      	ldr	r0, [r7, #4]
 801841a:	3708      	adds	r7, #8
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8018420:	b580      	push	{r7, lr}
 8018422:	b08a      	sub	sp, #40	; 0x28
 8018424:	af02      	add	r7, sp, #8
 8018426:	60f8      	str	r0, [r7, #12]
 8018428:	607b      	str	r3, [r7, #4]
 801842a:	460b      	mov	r3, r1
 801842c:	72fb      	strb	r3, [r7, #11]
 801842e:	4613      	mov	r3, r2
 8018430:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8018432:	7abb      	ldrb	r3, [r7, #10]
 8018434:	2b01      	cmp	r3, #1
 8018436:	d044      	beq.n	80184c2 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8018438:	f04f 0200 	mov.w	r2, #0
 801843c:	f04f 0300 	mov.w	r3, #0
 8018440:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8018444:	f107 0310 	add.w	r3, r7, #16
 8018448:	9301      	str	r3, [sp, #4]
 801844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844c:	9300      	str	r3, [sp, #0]
 801844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018452:	6879      	ldr	r1, [r7, #4]
 8018454:	68f8      	ldr	r0, [r7, #12]
 8018456:	f7fe fe0b 	bl	8017070 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 801845a:	4603      	mov	r3, r0
 801845c:	77fb      	strb	r3, [r7, #31]
 801845e:	7ffb      	ldrb	r3, [r7, #31]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d001      	beq.n	8018468 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8018464:	7ffb      	ldrb	r3, [r7, #31]
 8018466:	e02d      	b.n	80184c4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8018468:	ed97 7b04 	vldr	d7, [r7, #16]
 801846c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018470:	3304      	adds	r3, #4
 8018472:	4619      	mov	r1, r3
 8018474:	4610      	mov	r0, r2
 8018476:	eeb0 0a47 	vmov.f32	s0, s14
 801847a:	eef0 0a67 	vmov.f32	s1, s15
 801847e:	f7fe fcf3 	bl	8016e68 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	691a      	ldr	r2, [r3, #16]
 8018486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018488:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 801848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848c:	691b      	ldr	r3, [r3, #16]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d001      	beq.n	8018496 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 8018492:	f004 fc4b 	bl	801cd2c <abort>
    data->filter_zero_point = filter->params.zero_point;
 8018496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018498:	691a      	ldr	r2, [r3, #16]
 801849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801849c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 801849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a0:	691a      	ldr	r2, [r3, #16]
 80184a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184a4:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 80184a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184a8:	f103 0208 	add.w	r2, r3, #8
 80184ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ae:	330c      	adds	r3, #12
 80184b0:	7af9      	ldrb	r1, [r7, #11]
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	4613      	mov	r3, r2
 80184b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184b8:	68f8      	ldr	r0, [r7, #12]
 80184ba:	f7fe ffcb 	bl	8017454 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80184be:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 80184c0:	e000      	b.n	80184c4 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 80184c2:	2300      	movs	r3, #0
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	3720      	adds	r7, #32
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}

080184cc <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 80184cc:	b480      	push	{r7}
 80184ce:	b087      	sub	sp, #28
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	60f8      	str	r0, [r7, #12]
 80184d4:	60b9      	str	r1, [r7, #8]
 80184d6:	607a      	str	r2, [r7, #4]
 80184d8:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80184da:	68bb      	ldr	r3, [r7, #8]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	db0f      	blt.n	8018500 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 80184e0:	68ba      	ldr	r2, [r7, #8]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	da0b      	bge.n	8018500 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80184e8:	68bb      	ldr	r3, [r7, #8]
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	683a      	ldr	r2, [r7, #0]
 80184ee:	4413      	add	r3, r2
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 80184f4:	697b      	ldr	r3, [r7, #20]
 80184f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184fa:	d001      	beq.n	8018500 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	e001      	b.n	8018504 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8018500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018504:	4618      	mov	r0, r3
 8018506:	371c      	adds	r7, #28
 8018508:	46bd      	mov	sp, r7
 801850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850e:	4770      	bx	lr

08018510 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8018510:	b480      	push	{r7}
 8018512:	b085      	sub	sp, #20
 8018514:	af00      	add	r7, sp, #0
 8018516:	60f8      	str	r0, [r7, #12]
 8018518:	60b9      	str	r1, [r7, #8]
 801851a:	607a      	str	r2, [r7, #4]
 801851c:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	68ba      	ldr	r2, [r7, #8]
 8018522:	601a      	str	r2, [r3, #0]
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	69ba      	ldr	r2, [r7, #24]
 8018528:	605a      	str	r2, [r3, #4]
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	687a      	ldr	r2, [r7, #4]
 801852e:	609a      	str	r2, [r3, #8]
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	683a      	ldr	r2, [r7, #0]
 8018534:	60da      	str	r2, [r3, #12]
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	2200      	movs	r2, #0
 801853a:	611a      	str	r2, [r3, #16]
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	2200      	movs	r2, #0
 8018540:	615a      	str	r2, [r3, #20]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	2200      	movs	r2, #0
 8018546:	619a      	str	r2, [r3, #24]
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	2200      	movs	r2, #0
 801854c:	61da      	str	r2, [r3, #28]
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	2200      	movs	r2, #0
 8018552:	621a      	str	r2, [r3, #32]
}
 8018554:	68f8      	ldr	r0, [r7, #12]
 8018556:	3714      	adds	r7, #20
 8018558:	46bd      	mov	sp, r7
 801855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855e:	4770      	bx	lr

08018560 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8018560:	b580      	push	{r7, lr}
 8018562:	b086      	sub	sp, #24
 8018564:	af00      	add	r7, sp, #0
 8018566:	60f8      	str	r0, [r7, #12]
 8018568:	60b9      	str	r1, [r7, #8]
 801856a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d101      	bne.n	8018576 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8018572:	f004 fbdb 	bl	801cd2c <abort>
  TFLITE_DCHECK(node != nullptr);
 8018576:	68bb      	ldr	r3, [r7, #8]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d101      	bne.n	8018580 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 801857c:	f004 fbd6 	bl	801cd2c <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8018584:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 801858c:	6879      	ldr	r1, [r7, #4]
 801858e:	68f8      	ldr	r0, [r7, #12]
 8018590:	f7ff ff9c 	bl	80184cc <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8018594:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	2b00      	cmp	r3, #0
 801859a:	da01      	bge.n	80185a0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 801859c:	2300      	movs	r3, #0
 801859e:	e00c      	b.n	80185ba <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	6819      	ldr	r1, [r3, #0]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	009b      	lsls	r3, r3, #2
 80185ac:	440b      	add	r3, r1
 80185ae:	685b      	ldr	r3, [r3, #4]
 80185b0:	4619      	mov	r1, r3
 80185b2:	68f8      	ldr	r0, [r7, #12]
 80185b4:	4790      	blx	r2
 80185b6:	4603      	mov	r3, r0
 80185b8:	bf00      	nop
}
 80185ba:	4618      	mov	r0, r3
 80185bc:	3718      	adds	r7, #24
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}

080185c2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 80185c2:	b580      	push	{r7, lr}
 80185c4:	b084      	sub	sp, #16
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	60f8      	str	r0, [r7, #12]
 80185ca:	60b9      	str	r1, [r7, #8]
 80185cc:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 80185ce:	687a      	ldr	r2, [r7, #4]
 80185d0:	68b9      	ldr	r1, [r7, #8]
 80185d2:	68f8      	ldr	r0, [r7, #12]
 80185d4:	f7ff ffc4 	bl	8018560 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80185d8:	4603      	mov	r3, r0
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3710      	adds	r7, #16
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}

080185e2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 80185e2:	b580      	push	{r7, lr}
 80185e4:	b084      	sub	sp, #16
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	60f8      	str	r0, [r7, #12]
 80185ea:	60b9      	str	r1, [r7, #8]
 80185ec:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d101      	bne.n	80185f8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 80185f4:	f004 fb9a 	bl	801cd2c <abort>
  TFLITE_DCHECK(node != nullptr);
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d101      	bne.n	8018602 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 80185fe:	f004 fb95 	bl	801cd2c <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018606:	68bb      	ldr	r3, [r7, #8]
 8018608:	6859      	ldr	r1, [r3, #4]
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	009b      	lsls	r3, r3, #2
 801860e:	440b      	add	r3, r1
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	4619      	mov	r1, r3
 8018614:	68f8      	ldr	r0, [r7, #12]
 8018616:	4790      	blx	r2
 8018618:	4603      	mov	r3, r0
}
 801861a:	4618      	mov	r0, r3
 801861c:	3710      	adds	r7, #16
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}

08018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8018622:	b580      	push	{r7, lr}
 8018624:	b086      	sub	sp, #24
 8018626:	af00      	add	r7, sp, #0
 8018628:	6078      	str	r0, [r7, #4]
 801862a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d003      	beq.n	801863a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d103      	bne.n	8018642 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f7fe fae2 	bl	8016c04 <_ZN6tflite12RuntimeShapeC1Ev>
 8018640:	e00d      	b.n	801865e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	685b      	ldr	r3, [r3, #4]
 8018646:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	3304      	adds	r3, #4
 8018652:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8018654:	68fa      	ldr	r2, [r7, #12]
 8018656:	6939      	ldr	r1, [r7, #16]
 8018658:	6878      	ldr	r0, [r7, #4]
 801865a:	f7fe fae1 	bl	8016c20 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801865e:	6878      	ldr	r0, [r7, #4]
 8018660:	3718      	adds	r7, #24
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}

08018666 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 8018666:	b5b0      	push	{r4, r5, r7, lr}
 8018668:	b08e      	sub	sp, #56	; 0x38
 801866a:	af00      	add	r7, sp, #0
 801866c:	60f8      	str	r0, [r7, #12]
 801866e:	60b9      	str	r1, [r7, #8]
 8018670:	607a      	str	r2, [r7, #4]
 8018672:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	7a1b      	ldrb	r3, [r3, #8]
 8018678:	2b12      	cmp	r3, #18
 801867a:	d005      	beq.n	8018688 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	683a      	ldr	r2, [r7, #0]
 8018680:	ca07      	ldmia	r2, {r0, r1, r2}
 8018682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018686:	e033      	b.n	80186f0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801868c:	6879      	ldr	r1, [r7, #4]
 801868e:	68b8      	ldr	r0, [r7, #8]
 8018690:	4798      	blx	r3
 8018692:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 8018694:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 8018696:	683b      	ldr	r3, [r7, #0]
 8018698:	685b      	ldr	r3, [r3, #4]
 801869a:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 801869c:	2309      	movs	r3, #9
 801869e:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80186a0:	6838      	ldr	r0, [r7, #0]
 80186a2:	f7ff f99c 	bl	80179de <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80186a6:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80186a8:	f107 0320 	add.w	r3, r7, #32
 80186ac:	6839      	ldr	r1, [r7, #0]
 80186ae:	4618      	mov	r0, r3
 80186b0:	f7ff ffb7 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 80186b4:	f107 0320 	add.w	r3, r7, #32
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7fe faff 	bl	8016cbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80186be:	4605      	mov	r5, r0
 80186c0:	f107 0314 	add.w	r3, r7, #20
 80186c4:	4618      	mov	r0, r3
 80186c6:	f7ff f999 	bl	80179fc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80186ca:	4603      	mov	r3, r0
 80186cc:	461a      	mov	r2, r3
 80186ce:	4629      	mov	r1, r5
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7fe fb67 	bl	8016da4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 80186d6:	f107 0320 	add.w	r3, r7, #32
 80186da:	4618      	mov	r0, r3
 80186dc:	f7fe fab3 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	461c      	mov	r4, r3
 80186e4:	f107 0314 	add.w	r3, r7, #20
 80186e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80186ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80186f0:	68f8      	ldr	r0, [r7, #12]
 80186f2:	3738      	adds	r7, #56	; 0x38
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bdb0      	pop	{r4, r5, r7, pc}

080186f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 80186f8:	b590      	push	{r4, r7, lr}
 80186fa:	b087      	sub	sp, #28
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	60f8      	str	r0, [r7, #12]
 8018700:	60b9      	str	r1, [r7, #8]
 8018702:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8018704:	68f8      	ldr	r0, [r7, #12]
 8018706:	f7fe fefd 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801870a:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 801870c:	2300      	movs	r3, #0
 801870e:	617b      	str	r3, [r7, #20]
 8018710:	e014      	b.n	801873c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 8018712:	697a      	ldr	r2, [r7, #20]
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	429a      	cmp	r2, r3
 8018718:	d00d      	beq.n	8018736 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801871a:	6979      	ldr	r1, [r7, #20]
 801871c:	68f8      	ldr	r0, [r7, #12]
 801871e:	f7ff f97c 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 8018722:	4604      	mov	r4, r0
 8018724:	6979      	ldr	r1, [r7, #20]
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f7ff f977 	bl	8017a1a <_ZNK6tflite12RuntimeShape4DimsEi>
 801872c:	4603      	mov	r3, r0
 801872e:	429c      	cmp	r4, r3
 8018730:	d001      	beq.n	8018736 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 8018732:	f004 fafb 	bl	801cd2c <abort>
  for (int i = 0; i < dims_count; ++i) {
 8018736:	697b      	ldr	r3, [r7, #20]
 8018738:	3301      	adds	r3, #1
 801873a:	617b      	str	r3, [r7, #20]
 801873c:	697a      	ldr	r2, [r7, #20]
 801873e:	693b      	ldr	r3, [r7, #16]
 8018740:	429a      	cmp	r2, r3
 8018742:	dbe6      	blt.n	8018712 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8018744:	68b9      	ldr	r1, [r7, #8]
 8018746:	68f8      	ldr	r0, [r7, #12]
 8018748:	f7ff fa39 	bl	8017bbe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801874c:	4603      	mov	r3, r0
}
 801874e:	4618      	mov	r0, r3
 8018750:	371c      	adds	r7, #28
 8018752:	46bd      	mov	sp, r7
 8018754:	bd90      	pop	{r4, r7, pc}

08018756 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8018756:	b580      	push	{r7, lr}
 8018758:	ed2d 8b02 	vpush	{d8}
 801875c:	b08e      	sub	sp, #56	; 0x38
 801875e:	af00      	add	r7, sp, #0
 8018760:	60f8      	str	r0, [r7, #12]
 8018762:	60b9      	str	r1, [r7, #8]
 8018764:	607a      	str	r2, [r7, #4]
 8018766:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8018768:	68b8      	ldr	r0, [r7, #8]
 801876a:	f7fe fecb 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801876e:	4603      	mov	r3, r0
 8018770:	3b01      	subs	r3, #1
 8018772:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8018774:	683a      	ldr	r2, [r7, #0]
 8018776:	6a39      	ldr	r1, [r7, #32]
 8018778:	68b8      	ldr	r0, [r7, #8]
 801877a:	f7ff ffbd 	bl	80186f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801877e:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8018780:	6a3b      	ldr	r3, [r7, #32]
 8018782:	683a      	ldr	r2, [r7, #0]
 8018784:	6a39      	ldr	r1, [r7, #32]
 8018786:	68b8      	ldr	r0, [r7, #8]
 8018788:	f7ff f9ea 	bl	8017b60 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801878c:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 801878e:	2300      	movs	r3, #0
 8018790:	637b      	str	r3, [r7, #52]	; 0x34
 8018792:	e085      	b.n	80188a0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8018794:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8018798:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 801879a:	2300      	movs	r3, #0
 801879c:	633b      	str	r3, [r7, #48]	; 0x30
 801879e:	e014      	b.n	80187ca <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80187a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187a2:	69ba      	ldr	r2, [r7, #24]
 80187a4:	fb03 f202 	mul.w	r2, r3, r2
 80187a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187aa:	4413      	add	r3, r2
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	687a      	ldr	r2, [r7, #4]
 80187b0:	441a      	add	r2, r3
 80187b2:	f107 0310 	add.w	r3, r7, #16
 80187b6:	4611      	mov	r1, r2
 80187b8:	4618      	mov	r0, r3
 80187ba:	f7f1 facf 	bl	8009d5c <_ZSt3maxIfERKT_S2_S2_>
 80187be:	4603      	mov	r3, r0
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80187c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c6:	3301      	adds	r3, #1
 80187c8:	633b      	str	r3, [r7, #48]	; 0x30
 80187ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187cc:	69bb      	ldr	r3, [r7, #24]
 80187ce:	429a      	cmp	r2, r3
 80187d0:	dbe6      	blt.n	80187a0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 80187d2:	f04f 0300 	mov.w	r3, #0
 80187d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80187d8:	2300      	movs	r3, #0
 80187da:	62bb      	str	r3, [r7, #40]	; 0x28
 80187dc:	e035      	b.n	801884a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80187de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187e0:	69ba      	ldr	r2, [r7, #24]
 80187e2:	fb03 f202 	mul.w	r2, r3, r2
 80187e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e8:	4413      	add	r3, r2
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	4413      	add	r3, r2
 80187f0:	ed93 7a00 	vldr	s14, [r3]
 80187f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80187f8:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018802:	4610      	mov	r0, r2
 8018804:	4619      	mov	r1, r3
 8018806:	f7e8 fa1f 	bl	8000c48 <__aeabi_d2f>
 801880a:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 801880e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8018812:	eeb0 0a67 	vmov.f32	s0, s15
 8018816:	f7e8 fc7b 	bl	8001110 <_ZSt3expf>
 801881a:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 801881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018820:	69ba      	ldr	r2, [r7, #24]
 8018822:	fb03 f202 	mul.w	r2, r3, r2
 8018826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018828:	4413      	add	r3, r2
 801882a:	009b      	lsls	r3, r3, #2
 801882c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801882e:	4413      	add	r3, r2
 8018830:	697a      	ldr	r2, [r7, #20]
 8018832:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 8018834:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018838:	edd7 7a05 	vldr	s15, [r7, #20]
 801883c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018840:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8018844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018846:	3301      	adds	r3, #1
 8018848:	62bb      	str	r3, [r7, #40]	; 0x28
 801884a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801884c:	69bb      	ldr	r3, [r7, #24]
 801884e:	429a      	cmp	r2, r3
 8018850:	dbc5      	blt.n	80187de <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8018852:	2300      	movs	r3, #0
 8018854:	627b      	str	r3, [r7, #36]	; 0x24
 8018856:	e01c      	b.n	8018892 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8018858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801885a:	69ba      	ldr	r2, [r7, #24]
 801885c:	fb03 f202 	mul.w	r2, r3, r2
 8018860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018862:	4413      	add	r3, r2
 8018864:	009b      	lsls	r3, r3, #2
 8018866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018868:	4413      	add	r3, r2
 801886a:	edd3 6a00 	vldr	s13, [r3]
 801886e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018870:	69ba      	ldr	r2, [r7, #24]
 8018872:	fb03 f202 	mul.w	r2, r3, r2
 8018876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018878:	4413      	add	r3, r2
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801887e:	4413      	add	r3, r2
 8018880:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8018884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018888:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888e:	3301      	adds	r3, #1
 8018890:	627b      	str	r3, [r7, #36]	; 0x24
 8018892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018894:	69bb      	ldr	r3, [r7, #24]
 8018896:	429a      	cmp	r2, r3
 8018898:	dbde      	blt.n	8018858 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 801889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801889c:	3301      	adds	r3, #1
 801889e:	637b      	str	r3, [r7, #52]	; 0x34
 80188a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	429a      	cmp	r2, r3
 80188a6:	f6ff af75 	blt.w	8018794 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80188aa:	bf00      	nop
 80188ac:	bf00      	nop
 80188ae:	3738      	adds	r7, #56	; 0x38
 80188b0:	46bd      	mov	sp, r7
 80188b2:	ecbd 8b02 	vpop	{d8}
 80188b6:	bd80      	pop	{r7, pc}

080188b8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	60f8      	str	r0, [r7, #12]
 80188c0:	60b9      	str	r1, [r7, #8]
 80188c2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d101      	bne.n	80188d0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80188cc:	f004 fa2e 	bl	801cd2c <abort>
  return context->AllocatePersistentBuffer(context,
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188d4:	2140      	movs	r1, #64	; 0x40
 80188d6:	68f8      	ldr	r0, [r7, #12]
 80188d8:	4798      	blx	r3
 80188da:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 80188dc:	4618      	mov	r0, r3
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80188e4:	b590      	push	{r4, r7, lr}
 80188e6:	b09d      	sub	sp, #116	; 0x74
 80188e8:	af04      	add	r7, sp, #16
 80188ea:	6078      	str	r0, [r7, #4]
 80188ec:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7ff f835 	bl	801795e <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 80188f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 80188f6:	6838      	ldr	r0, [r7, #0]
 80188f8:	f7fe fa2e 	bl	8016d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80188fc:	4603      	mov	r3, r0
 80188fe:	2b01      	cmp	r3, #1
 8018900:	bf14      	ite	ne
 8018902:	2301      	movne	r3, #1
 8018904:	2300      	moveq	r3, #0
 8018906:	b2db      	uxtb	r3, r3
 8018908:	2b00      	cmp	r3, #0
 801890a:	d013      	beq.n	8018934 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	691c      	ldr	r4, [r3, #16]
 8018910:	6838      	ldr	r0, [r7, #0]
 8018912:	f7fe fa21 	bl	8016d58 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8018916:	4603      	mov	r3, r0
 8018918:	2201      	movs	r2, #1
 801891a:	9203      	str	r2, [sp, #12]
 801891c:	9302      	str	r3, [sp, #8]
 801891e:	4b6c      	ldr	r3, [pc, #432]	; (8018ad0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8018920:	9301      	str	r3, [sp, #4]
 8018922:	4b6c      	ldr	r3, [pc, #432]	; (8018ad4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 8018924:	9300      	str	r3, [sp, #0]
 8018926:	2334      	movs	r3, #52	; 0x34
 8018928:	4a6b      	ldr	r2, [pc, #428]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 801892a:	496c      	ldr	r1, [pc, #432]	; (8018adc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	47a0      	blx	r4
 8018930:	2401      	movs	r4, #1
 8018932:	e0c8      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8018934:	6838      	ldr	r0, [r7, #0]
 8018936:	f7fe fa22 	bl	8016d7e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801893a:	4603      	mov	r3, r0
 801893c:	2b01      	cmp	r3, #1
 801893e:	bf14      	ite	ne
 8018940:	2301      	movne	r3, #1
 8018942:	2300      	moveq	r3, #0
 8018944:	b2db      	uxtb	r3, r3
 8018946:	2b00      	cmp	r3, #0
 8018948:	d013      	beq.n	8018972 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	691c      	ldr	r4, [r3, #16]
 801894e:	6838      	ldr	r0, [r7, #0]
 8018950:	f7fe fa15 	bl	8016d7e <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8018954:	4603      	mov	r3, r0
 8018956:	2201      	movs	r2, #1
 8018958:	9203      	str	r2, [sp, #12]
 801895a:	9302      	str	r3, [sp, #8]
 801895c:	4b5c      	ldr	r3, [pc, #368]	; (8018ad0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 801895e:	9301      	str	r3, [sp, #4]
 8018960:	4b5f      	ldr	r3, [pc, #380]	; (8018ae0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	2335      	movs	r3, #53	; 0x35
 8018966:	4a5c      	ldr	r2, [pc, #368]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018968:	495c      	ldr	r1, [pc, #368]	; (8018adc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 801896a:	6878      	ldr	r0, [r7, #4]
 801896c:	47a0      	blx	r4
 801896e:	2401      	movs	r4, #1
 8018970:	e0a9      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 8018972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	3318      	adds	r3, #24
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	2200      	movs	r2, #0
 801897c:	6839      	ldr	r1, [r7, #0]
 801897e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018980:	4798      	blx	r3
 8018982:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 8018984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018986:	2b00      	cmp	r3, #0
 8018988:	d10a      	bne.n	80189a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	691c      	ldr	r4, [r3, #16]
 801898e:	4b55      	ldr	r3, [pc, #340]	; (8018ae4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 8018990:	9300      	str	r3, [sp, #0]
 8018992:	2337      	movs	r3, #55	; 0x37
 8018994:	4a50      	ldr	r2, [pc, #320]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018996:	4954      	ldr	r1, [pc, #336]	; (8018ae8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	47a0      	blx	r4
 801899c:	2401      	movs	r4, #1
 801899e:	e092      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80189a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80189a2:	f7fe f9cc 	bl	8016d3e <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80189a6:	4603      	mov	r3, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	bfd4      	ite	le
 80189ac:	2301      	movle	r3, #1
 80189ae:	2300      	movgt	r3, #0
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d00a      	beq.n	80189cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	691c      	ldr	r4, [r3, #16]
 80189ba:	4b4c      	ldr	r3, [pc, #304]	; (8018aec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 80189bc:	9300      	str	r3, [sp, #0]
 80189be:	2338      	movs	r3, #56	; 0x38
 80189c0:	4a45      	ldr	r2, [pc, #276]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80189c2:	4949      	ldr	r1, [pc, #292]	; (8018ae8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80189c4:	6878      	ldr	r0, [r7, #4]
 80189c6:	47a0      	blx	r4
 80189c8:	2401      	movs	r4, #1
 80189ca:	e07c      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80189cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	331c      	adds	r3, #28
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2200      	movs	r2, #0
 80189d6:	6839      	ldr	r1, [r7, #0]
 80189d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80189da:	4798      	blx	r3
 80189dc:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 80189de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d10a      	bne.n	80189fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	691c      	ldr	r4, [r3, #16]
 80189e8:	4b41      	ldr	r3, [pc, #260]	; (8018af0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	233a      	movs	r3, #58	; 0x3a
 80189ee:	4a3a      	ldr	r2, [pc, #232]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80189f0:	493d      	ldr	r1, [pc, #244]	; (8018ae8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	47a0      	blx	r4
 80189f6:	2401      	movs	r4, #1
 80189f8:	e065      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	691b      	ldr	r3, [r3, #16]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d10a      	bne.n	8018a18 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	691c      	ldr	r4, [r3, #16]
 8018a06:	4b3b      	ldr	r3, [pc, #236]	; (8018af4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	233c      	movs	r3, #60	; 0x3c
 8018a0c:	4a32      	ldr	r2, [pc, #200]	; (8018ad8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8018a0e:	4936      	ldr	r1, [pc, #216]	; (8018ae8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	47a0      	blx	r4
 8018a14:	2401      	movs	r4, #1
 8018a16:	e056      	b.n	8018ac6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	691b      	ldr	r3, [r3, #16]
 8018a1c:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	695b      	ldr	r3, [r3, #20]
 8018a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 8018a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a26:	9300      	str	r3, [sp, #0]
 8018a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018a2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f000 f920 	bl	8018c74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8018a34:	4603      	mov	r3, r0
 8018a36:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8018a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7fe f95e 	bl	8016d02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 8018a46:	f107 030c 	add.w	r3, r7, #12
 8018a4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7fe f958 	bl	8016d02 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8018a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fe fd54 	bl	8017504 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	3b01      	subs	r3, #1
 8018a60:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8018a62:	f107 020c 	add.w	r2, r7, #12
 8018a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7ff fe43 	bl	80186f8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8018a72:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8018a74:	f107 020c 	add.w	r2, r7, #12
 8018a78:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8018a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8018a80:	f7ff f86e 	bl	8017b60 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8018a84:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 8018a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018a8a:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 8018a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018a90:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 8018a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	3324      	adds	r3, #36	; 0x24
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018a9e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 8018aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	3324      	adds	r3, #36	; 0x24
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018aaa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018aac:	4798      	blx	r3
  return ret_val;
 8018aae:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 8018ab2:	f107 030c 	add.w	r3, r7, #12
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f7fe f8c5 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
 8018abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7fe f8c0 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
 8018ac6:	4623      	mov	r3, r4
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3764      	adds	r7, #100	; 0x64
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd90      	pop	{r4, r7, pc}
 8018ad0:	08022240 	.word	0x08022240
 8018ad4:	08022244 	.word	0x08022244
 8018ad8:	08022194 	.word	0x08022194
 8018adc:	08022224 	.word	0x08022224
 8018ae0:	08022254 	.word	0x08022254
 8018ae4:	08022280 	.word	0x08022280
 8018ae8:	08022268 	.word	0x08022268
 8018aec:	08022294 	.word	0x08022294
 8018af0:	080222b0 	.word	0x080222b0
 8018af4:	080222c4 	.word	0x080222c4

08018af8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8018af8:	b5b0      	push	{r4, r5, r7, lr}
 8018afa:	b0aa      	sub	sp, #168	; 0xa8
 8018afc:	af02      	add	r7, sp, #8
 8018afe:	6078      	str	r0, [r7, #4]
 8018b00:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 8018b02:	2200      	movs	r2, #0
 8018b04:	6839      	ldr	r1, [r7, #0]
 8018b06:	6878      	ldr	r0, [r7, #4]
 8018b08:	f7ff fd5b 	bl	80185c2 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018b0c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8018b10:	2200      	movs	r2, #0
 8018b12:	6839      	ldr	r1, [r7, #0]
 8018b14:	6878      	ldr	r0, [r7, #4]
 8018b16:	f7ff fd64 	bl	80185e2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018b1a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8018b1e:	683b      	ldr	r3, [r7, #0]
 8018b20:	691b      	ldr	r3, [r3, #16]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d101      	bne.n	8018b2a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 8018b26:	f004 f901 	bl	801cd2c <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8018b2a:	683b      	ldr	r3, [r7, #0]
 8018b2c:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8018b2e:	f107 0410 	add.w	r4, r7, #16
 8018b32:	461d      	mov	r5, r3
 8018b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8018b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018b4c:	7a1b      	ldrb	r3, [r3, #8]
 8018b4e:	2b09      	cmp	r3, #9
 8018b50:	d034      	beq.n	8018bbc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 8018b52:	2b09      	cmp	r3, #9
 8018b54:	dc5c      	bgt.n	8018c10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 8018b56:	2b01      	cmp	r3, #1
 8018b58:	d002      	beq.n	8018b60 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 8018b5a:	2b07      	cmp	r3, #7
 8018b5c:	d043      	beq.n	8018be6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 8018b5e:	e057      	b.n	8018c10 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8018b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018b64:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7ff fd5a 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8018b6e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8018b72:	f7fe ff16 	bl	80179a2 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b76:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8018b78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018b7c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7ff fd4e 	bl	8018622 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8018b86:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8018b8a:	f7fe ff19 	bl	80179c0 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018b8e:	4602      	mov	r2, r0
 8018b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018b94:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8018b98:	f107 0010 	add.w	r0, r7, #16
 8018b9c:	9200      	str	r2, [sp, #0]
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	f7ff fdd9 	bl	8018756 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 8018ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7fe f84c 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8018bae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7fe f847 	bl	8016c46 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	e03d      	b.n	8018c38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018bc0:	7a1b      	ldrb	r3, [r3, #8]
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7fd ff96 	bl	8016af4 <TfLiteTypeGetName>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018bd2:	f103 0208 	add.w	r2, r3, #8
 8018bd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018bda:	4619      	mov	r1, r3
 8018bdc:	4818      	ldr	r0, [pc, #96]	; (8018c40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018bde:	f7fe ffb3 	bl	8017b48 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018be2:	2301      	movs	r3, #1
 8018be4:	e028      	b.n	8018c38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018bea:	7a1b      	ldrb	r3, [r3, #8]
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7fd ff81 	bl	8016af4 <TfLiteTypeGetName>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018bfc:	f103 0208 	add.w	r2, r3, #8
 8018c00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018c04:	4619      	mov	r1, r3
 8018c06:	480e      	ldr	r0, [pc, #56]	; (8018c40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018c08:	f7fe ff9e 	bl	8017b48 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	e013      	b.n	8018c38 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018c14:	7a1b      	ldrb	r3, [r3, #8]
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fd ff6c 	bl	8016af4 <TfLiteTypeGetName>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8018c22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018c26:	f103 0208 	add.w	r2, r3, #8
 8018c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018c2e:	4619      	mov	r1, r3
 8018c30:	4803      	ldr	r0, [pc, #12]	; (8018c40 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8018c32:	f7fe ff89 	bl	8017b48 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8018c36:	2301      	movs	r3, #1
  }
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	37a0      	adds	r7, #160	; 0xa0
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8018c40:	080222e0 	.word	0x080222e0

08018c44 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af02      	add	r7, sp, #8
 8018c4a:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	2300      	movs	r3, #0
 8018c50:	9300      	str	r3, [sp, #0]
 8018c52:	4b05      	ldr	r3, [pc, #20]	; (8018c68 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 8018c54:	4a05      	ldr	r2, [pc, #20]	; (8018c6c <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 8018c56:	4906      	ldr	r1, [pc, #24]	; (8018c70 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8018c58:	f7ff fc5a 	bl	8018510 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8018c5c:	bf00      	nop
}
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	08018af9 	.word	0x08018af9
 8018c6c:	080188e5 	.word	0x080188e5
 8018c70:	080188b9 	.word	0x080188b9

08018c74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8018c74:	b5b0      	push	{r4, r5, r7, lr}
 8018c76:	b08a      	sub	sp, #40	; 0x28
 8018c78:	af04      	add	r7, sp, #16
 8018c7a:	60f8      	str	r0, [r7, #12]
 8018c7c:	60b9      	str	r1, [r7, #8]
 8018c7e:	607a      	str	r2, [r7, #4]
 8018c80:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	2b09      	cmp	r3, #9
 8018c88:	d003      	beq.n	8018c92 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 8018c8a:	68bb      	ldr	r3, [r7, #8]
 8018c8c:	781b      	ldrb	r3, [r3, #0]
 8018c8e:	2b07      	cmp	r3, #7
 8018c90:	d121      	bne.n	8018cd6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 8018c92:	68bb      	ldr	r3, [r7, #8]
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	2b07      	cmp	r3, #7
 8018c98:	d10e      	bne.n	8018cb8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	691c      	ldr	r4, [r3, #16]
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f7fd ff26 	bl	8016af4 <TfLiteTypeGetName>
 8018ca8:	4602      	mov	r2, r0
 8018caa:	68bb      	ldr	r3, [r7, #8]
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	492e      	ldr	r1, [pc, #184]	; (8018d68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8018cb0:	68f8      	ldr	r0, [r7, #12]
 8018cb2:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018cb4:	2301      	movs	r3, #1
 8018cb6:	e053      	b.n	8018d60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	691c      	ldr	r4, [r3, #16]
 8018cbc:	68bb      	ldr	r3, [r7, #8]
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7fd ff17 	bl	8016af4 <TfLiteTypeGetName>
 8018cc6:	4602      	mov	r2, r0
 8018cc8:	68bb      	ldr	r3, [r7, #8]
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	4926      	ldr	r1, [pc, #152]	; (8018d68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 8018cce:	68f8      	ldr	r0, [r7, #12]
 8018cd0:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	e044      	b.n	8018d60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	781b      	ldrb	r3, [r3, #0]
 8018cda:	2b01      	cmp	r3, #1
 8018cdc:	d018      	beq.n	8018d10 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	691c      	ldr	r4, [r3, #16]
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	781b      	ldrb	r3, [r3, #0]
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7fd ff04 	bl	8016af4 <TfLiteTypeGetName>
 8018cec:	4605      	mov	r5, r0
 8018cee:	2001      	movs	r0, #1
 8018cf0:	f7fd ff00 	bl	8016af4 <TfLiteTypeGetName>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	9303      	str	r3, [sp, #12]
 8018cf8:	9502      	str	r5, [sp, #8]
 8018cfa:	4b1c      	ldr	r3, [pc, #112]	; (8018d6c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8018cfc:	9301      	str	r3, [sp, #4]
 8018cfe:	4b1c      	ldr	r3, [pc, #112]	; (8018d70 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8018d00:	9300      	str	r3, [sp, #0]
 8018d02:	23a0      	movs	r3, #160	; 0xa0
 8018d04:	4a1b      	ldr	r2, [pc, #108]	; (8018d74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8018d06:	491c      	ldr	r1, [pc, #112]	; (8018d78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8018d08:	68f8      	ldr	r0, [r7, #12]
 8018d0a:	47a0      	blx	r4
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	e027      	b.n	8018d60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	2b01      	cmp	r3, #1
 8018d16:	d018      	beq.n	8018d4a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	691c      	ldr	r4, [r3, #16]
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	781b      	ldrb	r3, [r3, #0]
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7fd fee7 	bl	8016af4 <TfLiteTypeGetName>
 8018d26:	4605      	mov	r5, r0
 8018d28:	2001      	movs	r0, #1
 8018d2a:	f7fd fee3 	bl	8016af4 <TfLiteTypeGetName>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	9303      	str	r3, [sp, #12]
 8018d32:	9502      	str	r5, [sp, #8]
 8018d34:	4b0d      	ldr	r3, [pc, #52]	; (8018d6c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8018d36:	9301      	str	r3, [sp, #4]
 8018d38:	4b10      	ldr	r3, [pc, #64]	; (8018d7c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8018d3a:	9300      	str	r3, [sp, #0]
 8018d3c:	23a1      	movs	r3, #161	; 0xa1
 8018d3e:	4a0d      	ldr	r2, [pc, #52]	; (8018d74 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8018d40:	490d      	ldr	r1, [pc, #52]	; (8018d78 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8018d42:	68f8      	ldr	r0, [r7, #12]
 8018d44:	47a0      	blx	r4
 8018d46:	2301      	movs	r3, #1
 8018d48:	e00a      	b.n	8018d60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f7e7 fc2a 	bl	80005a8 <__aeabi_f2d>
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018d5a:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8018d5e:	2300      	movs	r3, #0
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3718      	adds	r7, #24
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bdb0      	pop	{r4, r5, r7, pc}
 8018d68:	0802247c 	.word	0x0802247c
 8018d6c:	080224b4 	.word	0x080224b4
 8018d70:	08022450 	.word	0x08022450
 8018d74:	080222fc 	.word	0x080222fc
 8018d78:	08022498 	.word	0x08022498
 8018d7c:	08022440 	.word	0x08022440

08018d80 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8018d80:	b480      	push	{r7}
 8018d82:	b085      	sub	sp, #20
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	2201      	movs	r2, #1
 8018d8e:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 8018d90:	683b      	ldr	r3, [r7, #0]
 8018d92:	2200      	movs	r2, #0
 8018d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 8018d98:	4a1d      	ldr	r2, [pc, #116]	; (8018e10 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	011b      	lsls	r3, r3, #4
 8018d9e:	4413      	add	r3, r2
 8018da0:	781a      	ldrb	r2, [r3, #0]
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 8018da6:	4a1a      	ldr	r2, [pc, #104]	; (8018e10 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	011b      	lsls	r3, r3, #4
 8018dac:	4413      	add	r3, r2
 8018dae:	330c      	adds	r3, #12
 8018db0:	681a      	ldr	r2, [r3, #0]
 8018db2:	683b      	ldr	r3, [r7, #0]
 8018db4:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 8018db6:	4a16      	ldr	r2, [pc, #88]	; (8018e10 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	011b      	lsls	r3, r3, #4
 8018dbc:	4413      	add	r3, r2
 8018dbe:	3308      	adds	r3, #8
 8018dc0:	681a      	ldr	r2, [r3, #0]
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	7d1b      	ldrb	r3, [r3, #20]
 8018dca:	2b02      	cmp	r3, #2
 8018dcc:	d10e      	bne.n	8018dec <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8018dce:	4a10      	ldr	r2, [pc, #64]	; (8018e10 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	011b      	lsls	r3, r3, #4
 8018dd4:	4413      	add	r3, r2
 8018dd6:	3304      	adds	r3, #4
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	461a      	mov	r2, r3
 8018ddc:	4b0d      	ldr	r3, [pc, #52]	; (8018e14 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4413      	add	r3, r2
 8018de2:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	68fa      	ldr	r2, [r7, #12]
 8018de8:	605a      	str	r2, [r3, #4]
 8018dea:	e007      	b.n	8018dfc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8018dec:	4a08      	ldr	r2, [pc, #32]	; (8018e10 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	011b      	lsls	r3, r3, #4
 8018df2:	4413      	add	r3, r2
 8018df4:	3304      	adds	r3, #4
 8018df6:	681a      	ldr	r2, [r3, #0]
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 8018e04:	bf00      	nop
 8018e06:	3714      	adds	r7, #20
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	200050bc 	.word	0x200050bc
 8018e14:	20005454 	.word	0x20005454

08018e18 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8018e18:	b480      	push	{r7}
 8018e1a:	b085      	sub	sp, #20
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	2201      	movs	r2, #1
 8018e26:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8018e28:	4a16      	ldr	r2, [pc, #88]	; (8018e84 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	011b      	lsls	r3, r3, #4
 8018e2e:	4413      	add	r3, r2
 8018e30:	3308      	adds	r3, #8
 8018e32:	681a      	ldr	r2, [r3, #0]
 8018e34:	683b      	ldr	r3, [r7, #0]
 8018e36:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8018e38:	4a12      	ldr	r2, [pc, #72]	; (8018e84 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	011b      	lsls	r3, r3, #4
 8018e3e:	4413      	add	r3, r2
 8018e40:	781b      	ldrb	r3, [r3, #0]
 8018e42:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 8018e44:	7bfb      	ldrb	r3, [r7, #15]
 8018e46:	2b02      	cmp	r3, #2
 8018e48:	d10e      	bne.n	8018e68 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8018e4a:	4a0e      	ldr	r2, [pc, #56]	; (8018e84 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	011b      	lsls	r3, r3, #4
 8018e50:	4413      	add	r3, r2
 8018e52:	3304      	adds	r3, #4
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	461a      	mov	r2, r3
 8018e58:	4b0b      	ldr	r3, [pc, #44]	; (8018e88 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4413      	add	r3, r2
 8018e5e:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	68ba      	ldr	r2, [r7, #8]
 8018e64:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 8018e66:	e007      	b.n	8018e78 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8018e68:	4a06      	ldr	r2, [pc, #24]	; (8018e84 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	011b      	lsls	r3, r3, #4
 8018e6e:	4413      	add	r3, r2
 8018e70:	3304      	adds	r3, #4
 8018e72:	681a      	ldr	r2, [r3, #0]
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	601a      	str	r2, [r3, #0]
}
 8018e78:	bf00      	nop
 8018e7a:	3714      	adds	r7, #20
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr
 8018e84:	200050bc 	.word	0x200050bc
 8018e88:	20005454 	.word	0x20005454

08018e8c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	f003 030f 	and.w	r3, r3, #15
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d005      	beq.n	8018eac <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	f003 030f 	and.w	r3, r3, #15
 8018ea6:	f1c3 0310 	rsb	r3, r3, #16
 8018eaa:	e000      	b.n	8018eae <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 8018eac:	2300      	movs	r3, #0
 8018eae:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 8018eb0:	4b29      	ldr	r3, [pc, #164]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018eb2:	681a      	ldr	r2, [r3, #0]
 8018eb4:	6839      	ldr	r1, [r7, #0]
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	440b      	add	r3, r1
 8018eba:	425b      	negs	r3, r3
 8018ebc:	441a      	add	r2, r3
 8018ebe:	4b27      	ldr	r3, [pc, #156]	; (8018f5c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d224      	bcs.n	8018f10 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 8018ec6:	4b26      	ldr	r3, [pc, #152]	; (8018f60 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2b09      	cmp	r3, #9
 8018ecc:	d906      	bls.n	8018edc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	4824      	ldr	r0, [pc, #144]	; (8018f64 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 8018ed4:	f7ef ffae 	bl	8008e34 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	e039      	b.n	8018f50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 8018edc:	2101      	movs	r1, #1
 8018ede:	6838      	ldr	r0, [r7, #0]
 8018ee0:	f7fd fdd2 	bl	8016a88 <_Z9ei_callocjj>
 8018ee4:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d106      	bne.n	8018efa <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	4619      	mov	r1, r3
 8018ef0:	481d      	ldr	r0, [pc, #116]	; (8018f68 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 8018ef2:	f7ef ff9f 	bl	8008e34 <_Z9ei_printfPKcz>
      return NULL;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	e02a      	b.n	8018f50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8018efa:	4b19      	ldr	r3, [pc, #100]	; (8018f60 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	1c5a      	adds	r2, r3, #1
 8018f00:	4917      	ldr	r1, [pc, #92]	; (8018f60 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8018f02:	600a      	str	r2, [r1, #0]
 8018f04:	4919      	ldr	r1, [pc, #100]	; (8018f6c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 8018f06:	68ba      	ldr	r2, [r7, #8]
 8018f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	e01f      	b.n	8018f50 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 8018f10:	4b11      	ldr	r3, [pc, #68]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f12:	681a      	ldr	r2, [r3, #0]
 8018f14:	683b      	ldr	r3, [r7, #0]
 8018f16:	425b      	negs	r3, r3
 8018f18:	4413      	add	r3, r2
 8018f1a:	4a0f      	ldr	r2, [pc, #60]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f1c:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 8018f1e:	4b0e      	ldr	r3, [pc, #56]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	3b0f      	subs	r3, #15
 8018f24:	4a0c      	ldr	r2, [pc, #48]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f26:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 8018f28:	4b0b      	ldr	r3, [pc, #44]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f2a:	681a      	ldr	r2, [r3, #0]
 8018f2c:	4b0a      	ldr	r3, [pc, #40]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	f003 030f 	and.w	r3, r3, #15
 8018f34:	f1c3 0310 	rsb	r3, r3, #16
 8018f38:	4413      	add	r3, r2
 8018f3a:	4a07      	ldr	r2, [pc, #28]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f3c:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8018f3e:	4b06      	ldr	r3, [pc, #24]	; (8018f58 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 8018f44:	683a      	ldr	r2, [r7, #0]
 8018f46:	2100      	movs	r1, #0
 8018f48:	68b8      	ldr	r0, [r7, #8]
 8018f4a:	f004 ffaf 	bl	801deac <memset>

  return ptr;
 8018f4e:	68bb      	ldr	r3, [r7, #8]
}
 8018f50:	4618      	mov	r0, r3
 8018f52:	3710      	adds	r7, #16
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}
 8018f58:	2000545c 	.word	0x2000545c
 8018f5c:	20005458 	.word	0x20005458
 8018f60:	2000567c 	.word	0x2000567c
 8018f64:	0802254c 	.word	0x0802254c
 8018f68:	080225cc 	.word	0x080225cc
 8018f6c:	20005654 	.word	0x20005654

08018f70 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b086      	sub	sp, #24
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	60f8      	str	r0, [r7, #12]
 8018f78:	60b9      	str	r1, [r7, #8]
 8018f7a:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8018f7c:	4b1b      	ldr	r3, [pc, #108]	; (8018fec <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	2b03      	cmp	r3, #3
 8018f82:	d906      	bls.n	8018f92 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 8018f84:	68bb      	ldr	r3, [r7, #8]
 8018f86:	4619      	mov	r1, r3
 8018f88:	4819      	ldr	r0, [pc, #100]	; (8018ff0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 8018f8a:	f7ef ff53 	bl	8008e34 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8018f8e:	2301      	movs	r3, #1
 8018f90:	e028      	b.n	8018fe4 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	68f8      	ldr	r0, [r7, #12]
 8018f9c:	f7ff ff76 	bl	8018e8c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d106      	bne.n	8018fb8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	4619      	mov	r1, r3
 8018fae:	4811      	ldr	r0, [pc, #68]	; (8018ff4 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 8018fb0:	f7ef ff40 	bl	8008e34 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	e015      	b.n	8018fe4 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 8018fb8:	4b0c      	ldr	r3, [pc, #48]	; (8018fec <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	4a0e      	ldr	r2, [pc, #56]	; (8018ff8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 8018fbe:	00db      	lsls	r3, r3, #3
 8018fc0:	4413      	add	r3, r2
 8018fc2:	f107 0210 	add.w	r2, r7, #16
 8018fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fca:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 8018fce:	4b07      	ldr	r3, [pc, #28]	; (8018fec <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	461a      	mov	r2, r3
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 8018fd8:	4b04      	ldr	r3, [pc, #16]	; (8018fec <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	3301      	adds	r3, #1
 8018fde:	4a03      	ldr	r2, [pc, #12]	; (8018fec <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8018fe0:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 8018fe2:	2300      	movs	r3, #0
}
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	3718      	adds	r7, #24
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bd80      	pop	{r7, pc}
 8018fec:	200056a0 	.word	0x200056a0
 8018ff0:	08022604 	.word	0x08022604
 8018ff4:	0802265c 	.word	0x0802265c
 8018ff8:	20005680 	.word	0x20005680

08018ffc <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 8018ffc:	b480      	push	{r7}
 8018ffe:	b083      	sub	sp, #12
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
 8019004:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 8019006:	4b09      	ldr	r3, [pc, #36]	; (801902c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	461a      	mov	r2, r3
 801900c:	683b      	ldr	r3, [r7, #0]
 801900e:	4293      	cmp	r3, r2
 8019010:	dd01      	ble.n	8019016 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 8019012:	2300      	movs	r3, #0
 8019014:	e004      	b.n	8019020 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 8019016:	4a06      	ldr	r2, [pc, #24]	; (8019030 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	4413      	add	r3, r2
 801901e:	685b      	ldr	r3, [r3, #4]
}
 8019020:	4618      	mov	r0, r3
 8019022:	370c      	adds	r7, #12
 8019024:	46bd      	mov	sp, r7
 8019026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902a:	4770      	bx	lr
 801902c:	200056a0 	.word	0x200056a0
 8019030:	20005680 	.word	0x20005680

08019034 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 8019034:	b480      	push	{r7}
 8019036:	b083      	sub	sp, #12
 8019038:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801903a:	2300      	movs	r3, #0
 801903c:	607b      	str	r3, [r7, #4]
 801903e:	e00d      	b.n	801905c <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 8019040:	4914      	ldr	r1, [pc, #80]	; (8019094 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 8019042:	687a      	ldr	r2, [r7, #4]
 8019044:	4613      	mov	r3, r2
 8019046:	011b      	lsls	r3, r3, #4
 8019048:	4413      	add	r3, r2
 801904a:	009b      	lsls	r3, r3, #2
 801904c:	440b      	add	r3, r1
 801904e:	3340      	adds	r3, #64	; 0x40
 8019050:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019054:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	3301      	adds	r3, #1
 801905a:	607b      	str	r3, [r7, #4]
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2b03      	cmp	r3, #3
 8019060:	d9ee      	bls.n	8019040 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019062:	2300      	movs	r3, #0
 8019064:	603b      	str	r3, [r7, #0]
 8019066:	e00a      	b.n	801907e <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 8019068:	4a0b      	ldr	r2, [pc, #44]	; (8019098 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	011b      	lsls	r3, r3, #4
 801906e:	4413      	add	r3, r2
 8019070:	330c      	adds	r3, #12
 8019072:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019076:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	3301      	adds	r3, #1
 801907c:	603b      	str	r3, [r7, #0]
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	2b03      	cmp	r3, #3
 8019082:	d9f1      	bls.n	8019068 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 8019084:	bf00      	nop
 8019086:	bf00      	nop
 8019088:	370c      	adds	r7, #12
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr
 8019092:	bf00      	nop
 8019094:	200054b8 	.word	0x200054b8
 8019098:	200055c8 	.word	0x200055c8

0801909c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 801909c:	b580      	push	{r7, lr}
 801909e:	b084      	sub	sp, #16
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 80190a6:	4b2e      	ldr	r3, [pc, #184]	; (8019160 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	4a2e      	ldr	r2, [pc, #184]	; (8019164 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 80190ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	4413      	add	r3, r2
 80190b4:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 80190b6:	2300      	movs	r3, #0
 80190b8:	60fb      	str	r3, [r7, #12]
 80190ba:	e045      	b.n	8019148 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 80190bc:	492a      	ldr	r1, [pc, #168]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80190be:	68fa      	ldr	r2, [r7, #12]
 80190c0:	4613      	mov	r3, r2
 80190c2:	011b      	lsls	r3, r3, #4
 80190c4:	4413      	add	r3, r2
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	440b      	add	r3, r1
 80190ca:	3340      	adds	r3, #64	; 0x40
 80190cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190d0:	461a      	mov	r2, r3
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	4293      	cmp	r3, r2
 80190d6:	d107      	bne.n	80190e8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 80190d8:	68fa      	ldr	r2, [r7, #12]
 80190da:	4613      	mov	r3, r2
 80190dc:	011b      	lsls	r3, r3, #4
 80190de:	4413      	add	r3, r2
 80190e0:	009b      	lsls	r3, r3, #2
 80190e2:	4a21      	ldr	r2, [pc, #132]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80190e4:	4413      	add	r3, r2
 80190e6:	e037      	b.n	8019158 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 80190e8:	491f      	ldr	r1, [pc, #124]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80190ea:	68fa      	ldr	r2, [r7, #12]
 80190ec:	4613      	mov	r3, r2
 80190ee:	011b      	lsls	r3, r3, #4
 80190f0:	4413      	add	r3, r2
 80190f2:	009b      	lsls	r3, r3, #2
 80190f4:	440b      	add	r3, r1
 80190f6:	3340      	adds	r3, #64	; 0x40
 80190f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019100:	4293      	cmp	r3, r2
 8019102:	d11e      	bne.n	8019142 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 8019104:	6838      	ldr	r0, [r7, #0]
 8019106:	68fa      	ldr	r2, [r7, #12]
 8019108:	4613      	mov	r3, r2
 801910a:	011b      	lsls	r3, r3, #4
 801910c:	4413      	add	r3, r2
 801910e:	009b      	lsls	r3, r3, #2
 8019110:	4a15      	ldr	r2, [pc, #84]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019112:	4413      	add	r3, r2
 8019114:	4619      	mov	r1, r3
 8019116:	f7ff fe33 	bl	8018d80 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	b218      	sxth	r0, r3
 801911e:	4912      	ldr	r1, [pc, #72]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019120:	68fa      	ldr	r2, [r7, #12]
 8019122:	4613      	mov	r3, r2
 8019124:	011b      	lsls	r3, r3, #4
 8019126:	4413      	add	r3, r2
 8019128:	009b      	lsls	r3, r3, #2
 801912a:	440b      	add	r3, r1
 801912c:	3340      	adds	r3, #64	; 0x40
 801912e:	4602      	mov	r2, r0
 8019130:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 8019132:	68fa      	ldr	r2, [r7, #12]
 8019134:	4613      	mov	r3, r2
 8019136:	011b      	lsls	r3, r3, #4
 8019138:	4413      	add	r3, r2
 801913a:	009b      	lsls	r3, r3, #2
 801913c:	4a0a      	ldr	r2, [pc, #40]	; (8019168 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 801913e:	4413      	add	r3, r2
 8019140:	e00a      	b.n	8019158 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	3301      	adds	r3, #1
 8019146:	60fb      	str	r3, [r7, #12]
 8019148:	68fb      	ldr	r3, [r7, #12]
 801914a:	2b03      	cmp	r3, #3
 801914c:	d9b6      	bls.n	80190bc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 801914e:	2104      	movs	r1, #4
 8019150:	4806      	ldr	r0, [pc, #24]	; (801916c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 8019152:	f7ef fe6f 	bl	8008e34 <_Z9ei_printfPKcz>
  return nullptr;
 8019156:	2300      	movs	r3, #0
}
 8019158:	4618      	mov	r0, r3
 801915a:	3710      	adds	r7, #16
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	20005650 	.word	0x20005650
 8019164:	0802879c 	.word	0x0802879c
 8019168:	200054b8 	.word	0x200054b8
 801916c:	08022690 	.word	0x08022690

08019170 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8019170:	b580      	push	{r7, lr}
 8019172:	b084      	sub	sp, #16
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
 8019178:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 801917a:	4b25      	ldr	r3, [pc, #148]	; (8019210 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	4a25      	ldr	r2, [pc, #148]	; (8019214 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 8019180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	4413      	add	r3, r2
 8019188:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801918a:	2300      	movs	r3, #0
 801918c:	60fb      	str	r3, [r7, #12]
 801918e:	e033      	b.n	80191f8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 8019190:	4a21      	ldr	r2, [pc, #132]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	011b      	lsls	r3, r3, #4
 8019196:	4413      	add	r3, r2
 8019198:	330c      	adds	r3, #12
 801919a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801919e:	461a      	mov	r2, r3
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	4293      	cmp	r3, r2
 80191a4:	d104      	bne.n	80191b0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	011b      	lsls	r3, r3, #4
 80191aa:	4a1b      	ldr	r2, [pc, #108]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 80191ac:	4413      	add	r3, r2
 80191ae:	e02b      	b.n	8019208 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 80191b0:	4a19      	ldr	r2, [pc, #100]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	011b      	lsls	r3, r3, #4
 80191b6:	4413      	add	r3, r2
 80191b8:	330c      	adds	r3, #12
 80191ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80191be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80191c2:	4293      	cmp	r3, r2
 80191c4:	d115      	bne.n	80191f2 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	011b      	lsls	r3, r3, #4
 80191ca:	4a13      	ldr	r2, [pc, #76]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 80191cc:	4413      	add	r3, r2
 80191ce:	4619      	mov	r1, r3
 80191d0:	6838      	ldr	r0, [r7, #0]
 80191d2:	f7ff fe21 	bl	8018e18 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	b219      	sxth	r1, r3
 80191da:	4a0f      	ldr	r2, [pc, #60]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	011b      	lsls	r3, r3, #4
 80191e0:	4413      	add	r3, r2
 80191e2:	330c      	adds	r3, #12
 80191e4:	460a      	mov	r2, r1
 80191e6:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	011b      	lsls	r3, r3, #4
 80191ec:	4a0a      	ldr	r2, [pc, #40]	; (8019218 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 80191ee:	4413      	add	r3, r2
 80191f0:	e00a      	b.n	8019208 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	3301      	adds	r3, #1
 80191f6:	60fb      	str	r3, [r7, #12]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	2b03      	cmp	r3, #3
 80191fc:	d9c8      	bls.n	8019190 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 80191fe:	2104      	movs	r1, #4
 8019200:	4806      	ldr	r0, [pc, #24]	; (801921c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 8019202:	f7ef fe17 	bl	8008e34 <_Z9ei_printfPKcz>
  return nullptr;
 8019206:	2300      	movs	r3, #0
}
 8019208:	4618      	mov	r0, r3
 801920a:	3710      	adds	r7, #16
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}
 8019210:	20005650 	.word	0x20005650
 8019214:	0802879c 	.word	0x0802879c
 8019218:	200055c8 	.word	0x200055c8
 801921c:	080226c8 	.word	0x080226c8

08019220 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 8019220:	b580      	push	{r7, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6878      	ldr	r0, [r7, #4]
 801922a:	2300      	movs	r3, #0
 801922c:	2200      	movs	r2, #0
 801922e:	2100      	movs	r1, #0
 8019230:	f7fe fa1e 	bl	8017670 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 8019234:	4a03      	ldr	r2, [pc, #12]	; (8019244 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	601a      	str	r2, [r3, #0]
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	4618      	mov	r0, r3
 801923e:	3708      	adds	r7, #8
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	080287b4 	.word	0x080287b4

08019248 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 8019248:	b580      	push	{r7, lr}
 801924a:	b082      	sub	sp, #8
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 8019252:	6839      	ldr	r1, [r7, #0]
 8019254:	2000      	movs	r0, #0
 8019256:	f7ff fe19 	bl	8018e8c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 801925a:	4603      	mov	r3, r0
  }
 801925c:	4618      	mov	r0, r3
 801925e:	3708      	adds	r7, #8
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}

08019264 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
 801926a:	60f8      	str	r0, [r7, #12]
 801926c:	60b9      	str	r1, [r7, #8]
 801926e:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 8019270:	687a      	ldr	r2, [r7, #4]
 8019272:	68b9      	ldr	r1, [r7, #8]
 8019274:	2000      	movs	r0, #0
 8019276:	f7ff fe7b 	bl	8018f70 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 801927a:	4603      	mov	r3, r0
  }
 801927c:	4618      	mov	r0, r3
 801927e:	3710      	adds	r7, #16
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}

08019284 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 8019284:	b580      	push	{r7, lr}
 8019286:	b082      	sub	sp, #8
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 801928e:	6839      	ldr	r1, [r7, #0]
 8019290:	2000      	movs	r0, #0
 8019292:	f7ff feb3 	bl	8018ffc <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 8019296:	4603      	mov	r3, r0
  }
 8019298:	4618      	mov	r0, r3
 801929a:	3708      	adds	r7, #8
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}

080192a0 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 80192aa:	6839      	ldr	r1, [r7, #0]
 80192ac:	2000      	movs	r0, #0
 80192ae:	f7ff fef5 	bl	801909c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 80192b2:	4603      	mov	r3, r0
  }
 80192b4:	4618      	mov	r0, r3
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80192bc:	b480      	push	{r7}
 80192be:	b083      	sub	sp, #12
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	6039      	str	r1, [r7, #0]
    return;
 80192c6:	bf00      	nop
  }
 80192c8:	370c      	adds	r7, #12
 80192ca:	46bd      	mov	sp, r7
 80192cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d0:	4770      	bx	lr

080192d2 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 80192d2:	b580      	push	{r7, lr}
 80192d4:	b082      	sub	sp, #8
 80192d6:	af00      	add	r7, sp, #0
 80192d8:	6078      	str	r0, [r7, #4]
 80192da:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 80192dc:	6839      	ldr	r1, [r7, #0]
 80192de:	2000      	movs	r0, #0
 80192e0:	f7ff ff46 	bl	8019170 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 80192e4:	4603      	mov	r3, r0
  }
 80192e6:	4618      	mov	r0, r3
 80192e8:	3708      	adds	r7, #8
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
	...

080192f0 <_Z19tflite_learn_6_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
 80192f0:	b5b0      	push	{r4, r5, r7, lr}
 80192f2:	b0aa      	sub	sp, #168	; 0xa8
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 80192f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192fa:	f44f 7144 	mov.w	r1, #784	; 0x310
 80192fe:	2010      	movs	r0, #16
 8019300:	4798      	blx	r3
 8019302:	4603      	mov	r3, r0
 8019304:	4aa7      	ldr	r2, [pc, #668]	; (80195a4 <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019306:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8019308:	4ba6      	ldr	r3, [pc, #664]	; (80195a4 <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d104      	bne.n	801931a <_Z19tflite_learn_6_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8019310:	48a5      	ldr	r0, [pc, #660]	; (80195a8 <_Z19tflite_learn_6_initPFPvjjE+0x2b8>)
 8019312:	f7ef fd8f 	bl	8008e34 <_Z9ei_printfPKcz>
    return kTfLiteError;
 8019316:	2401      	movs	r4, #1
 8019318:	e13f      	b.n	801959a <_Z19tflite_learn_6_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 801931a:	4ba2      	ldr	r3, [pc, #648]	; (80195a4 <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	4aa3      	ldr	r2, [pc, #652]	; (80195ac <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019320:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8019322:	4ba0      	ldr	r3, [pc, #640]	; (80195a4 <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	f503 7344 	add.w	r3, r3, #784	; 0x310
 801932a:	4aa1      	ldr	r2, [pc, #644]	; (80195b0 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 801932c:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 801932e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019332:	4618      	mov	r0, r3
 8019334:	f7ff ff74 	bl	8019220 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 8019338:	4a9e      	ldr	r2, [pc, #632]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801933a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801933e:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 8019340:	4b9c      	ldr	r3, [pc, #624]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019342:	4a9d      	ldr	r2, [pc, #628]	; (80195b8 <_Z19tflite_learn_6_initPFPvjjE+0x2c8>)
 8019344:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 8019346:	4b9b      	ldr	r3, [pc, #620]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019348:	4a9c      	ldr	r2, [pc, #624]	; (80195bc <_Z19tflite_learn_6_initPFPvjjE+0x2cc>)
 801934a:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 801934c:	4b99      	ldr	r3, [pc, #612]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801934e:	4a9c      	ldr	r2, [pc, #624]	; (80195c0 <_Z19tflite_learn_6_initPFPvjjE+0x2d0>)
 8019350:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 8019352:	4b98      	ldr	r3, [pc, #608]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019354:	4a9b      	ldr	r2, [pc, #620]	; (80195c4 <_Z19tflite_learn_6_initPFPvjjE+0x2d4>)
 8019356:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 8019358:	4b96      	ldr	r3, [pc, #600]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 801935a:	4a9b      	ldr	r2, [pc, #620]	; (80195c8 <_Z19tflite_learn_6_initPFPvjjE+0x2d8>)
 801935c:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 801935e:	4b95      	ldr	r3, [pc, #596]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019360:	4a9a      	ldr	r2, [pc, #616]	; (80195cc <_Z19tflite_learn_6_initPFPvjjE+0x2dc>)
 8019362:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 8;
 8019364:	4b93      	ldr	r3, [pc, #588]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019366:	2208      	movs	r2, #8
 8019368:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 8; ++i) {
 801936a:	2300      	movs	r3, #0
 801936c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019370:	e024      	b.n	80193bc <_Z19tflite_learn_6_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 8019372:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019376:	4619      	mov	r1, r3
 8019378:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801937c:	f7ff fd00 	bl	8018d80 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 8019380:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8019384:	2b02      	cmp	r3, #2
 8019386:	d114      	bne.n	80193b2 <_Z19tflite_learn_6_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 8019388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801938a:	4991      	ldr	r1, [pc, #580]	; (80195d0 <_Z19tflite_learn_6_initPFPvjjE+0x2e0>)
 801938c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019390:	011b      	lsls	r3, r3, #4
 8019392:	440b      	add	r3, r1
 8019394:	330c      	adds	r3, #12
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	4413      	add	r3, r2
 801939a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 801939e:	4b83      	ldr	r3, [pc, #524]	; (80195ac <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d903      	bls.n	80193b2 <_Z19tflite_learn_6_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 80193aa:	4a80      	ldr	r2, [pc, #512]	; (80195ac <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 80193ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80193b0:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 8; ++i) {
 80193b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80193b6:	3301      	adds	r3, #1
 80193b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80193bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80193c0:	2b07      	cmp	r3, #7
 80193c2:	d9d6      	bls.n	8019372 <_Z19tflite_learn_6_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 80193c4:	4b79      	ldr	r3, [pc, #484]	; (80195ac <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 80193c6:	681a      	ldr	r2, [r3, #0]
 80193c8:	4b79      	ldr	r3, [pc, #484]	; (80195b0 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d904      	bls.n	80193da <_Z19tflite_learn_6_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 80193d0:	4880      	ldr	r0, [pc, #512]	; (80195d4 <_Z19tflite_learn_6_initPFPvjjE+0x2e4>)
 80193d2:	f7ef fd2f 	bl	8008e34 <_Z9ei_printfPKcz>
    return kTfLiteError;
 80193d6:	2401      	movs	r4, #1
 80193d8:	e0da      	b.n	8019590 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 80193da:	4c7f      	ldr	r4, [pc, #508]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 80193dc:	463b      	mov	r3, r7
 80193de:	4618      	mov	r0, r3
 80193e0:	f7fe ffd4 	bl	801838c <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 80193e4:	4625      	mov	r5, r4
 80193e6:	463c      	mov	r4, r7
 80193e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80193ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80193f0:	6823      	ldr	r3, [r4, #0]
 80193f2:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 80193f4:	4c78      	ldr	r4, [pc, #480]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 80193f6:	463b      	mov	r3, r7
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7ff fc23 	bl	8018c44 <_ZN6tflite16Register_SOFTMAXEv>
 80193fe:	3424      	adds	r4, #36	; 0x24
 8019400:	463d      	mov	r5, r7
 8019402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801940a:	682b      	ldr	r3, [r5, #0]
 801940c:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 801940e:	2300      	movs	r3, #0
 8019410:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019414:	e054      	b.n	80194c0 <_Z19tflite_learn_6_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 8019416:	4a71      	ldr	r2, [pc, #452]	; (80195dc <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019418:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801941c:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 801941e:	4a70      	ldr	r2, [pc, #448]	; (80195e0 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801942c:	e039      	b.n	80194a2 <_Z19tflite_learn_6_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 801942e:	4a6d      	ldr	r2, [pc, #436]	; (80195e4 <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019434:	4413      	add	r3, r2
 8019436:	781b      	ldrb	r3, [r3, #0]
 8019438:	4619      	mov	r1, r3
 801943a:	4a67      	ldr	r2, [pc, #412]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 801943c:	460b      	mov	r3, r1
 801943e:	00db      	lsls	r3, r3, #3
 8019440:	440b      	add	r3, r1
 8019442:	009b      	lsls	r3, r3, #2
 8019444:	4413      	add	r3, r2
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d025      	beq.n	8019498 <_Z19tflite_learn_6_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801944c:	4a65      	ldr	r2, [pc, #404]	; (80195e4 <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 801944e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019452:	4413      	add	r3, r2
 8019454:	781b      	ldrb	r3, [r3, #0]
 8019456:	4619      	mov	r1, r3
 8019458:	4a5f      	ldr	r2, [pc, #380]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 801945a:	460b      	mov	r3, r1
 801945c:	00db      	lsls	r3, r3, #3
 801945e:	440b      	add	r3, r1
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	4413      	add	r3, r2
 8019464:	681c      	ldr	r4, [r3, #0]
 8019466:	4960      	ldr	r1, [pc, #384]	; (80195e8 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019468:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801946c:	4613      	mov	r3, r2
 801946e:	009b      	lsls	r3, r3, #2
 8019470:	4413      	add	r3, r2
 8019472:	00db      	lsls	r3, r3, #3
 8019474:	440b      	add	r3, r1
 8019476:	3314      	adds	r3, #20
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2200      	movs	r2, #0
 801947c:	4619      	mov	r1, r3
 801947e:	484d      	ldr	r0, [pc, #308]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019480:	47a0      	blx	r4
 8019482:	4601      	mov	r1, r0
 8019484:	4858      	ldr	r0, [pc, #352]	; (80195e8 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019486:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801948a:	4613      	mov	r3, r2
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	4413      	add	r3, r2
 8019490:	00db      	lsls	r3, r3, #3
 8019492:	4403      	add	r3, r0
 8019494:	3310      	adds	r3, #16
 8019496:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801949c:	3301      	adds	r3, #1
 801949e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80194a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80194a6:	3301      	adds	r3, #1
 80194a8:	4a4d      	ldr	r2, [pc, #308]	; (80195e0 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 80194aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80194ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d3bb      	bcc.n	801942e <_Z19tflite_learn_6_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 80194b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80194ba:	3301      	adds	r3, #1
 80194bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80194c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d0a6      	beq.n	8019416 <_Z19tflite_learn_6_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 80194c8:	4b44      	ldr	r3, [pc, #272]	; (80195dc <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 80194ca:	2200      	movs	r2, #0
 80194cc:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 80194ce:	2300      	movs	r3, #0
 80194d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80194d4:	e054      	b.n	8019580 <_Z19tflite_learn_6_initPFPvjjE+0x290>
    current_subgraph_index = g;
 80194d6:	4a41      	ldr	r2, [pc, #260]	; (80195dc <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 80194d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80194dc:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 80194de:	4a40      	ldr	r2, [pc, #256]	; (80195e0 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 80194e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80194e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80194e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80194ec:	e039      	b.n	8019562 <_Z19tflite_learn_6_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 80194ee:	4a3d      	ldr	r2, [pc, #244]	; (80195e4 <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 80194f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80194f4:	4413      	add	r3, r2
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	4619      	mov	r1, r3
 80194fa:	4a37      	ldr	r2, [pc, #220]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 80194fc:	460b      	mov	r3, r1
 80194fe:	00db      	lsls	r3, r3, #3
 8019500:	440b      	add	r3, r1
 8019502:	009b      	lsls	r3, r3, #2
 8019504:	4413      	add	r3, r2
 8019506:	3308      	adds	r3, #8
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d024      	beq.n	8019558 <_Z19tflite_learn_6_initPFPvjjE+0x268>
        ResetTensors();
 801950e:	f7ff fd91 	bl	8019034 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 8019512:	4a34      	ldr	r2, [pc, #208]	; (80195e4 <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019518:	4413      	add	r3, r2
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	4619      	mov	r1, r3
 801951e:	4a2e      	ldr	r2, [pc, #184]	; (80195d8 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019520:	460b      	mov	r3, r1
 8019522:	00db      	lsls	r3, r3, #3
 8019524:	440b      	add	r3, r1
 8019526:	009b      	lsls	r3, r3, #2
 8019528:	4413      	add	r3, r2
 801952a:	3308      	adds	r3, #8
 801952c:	681c      	ldr	r4, [r3, #0]
 801952e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019532:	4613      	mov	r3, r2
 8019534:	009b      	lsls	r3, r3, #2
 8019536:	4413      	add	r3, r2
 8019538:	00db      	lsls	r3, r3, #3
 801953a:	4a2b      	ldr	r2, [pc, #172]	; (80195e8 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 801953c:	4413      	add	r3, r2
 801953e:	4619      	mov	r1, r3
 8019540:	481c      	ldr	r0, [pc, #112]	; (80195b4 <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019542:	47a0      	blx	r4
 8019544:	4603      	mov	r3, r0
 8019546:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 801954a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801954e:	2b00      	cmp	r3, #0
 8019550:	d002      	beq.n	8019558 <_Z19tflite_learn_6_initPFPvjjE+0x268>
          return status;
 8019552:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8019556:	e01b      	b.n	8019590 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019558:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801955c:	3301      	adds	r3, #1
 801955e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019566:	3301      	adds	r3, #1
 8019568:	4a1d      	ldr	r2, [pc, #116]	; (80195e0 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 801956a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801956e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019572:	429a      	cmp	r2, r3
 8019574:	d3bb      	bcc.n	80194ee <_Z19tflite_learn_6_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 8019576:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801957a:	3301      	adds	r3, #1
 801957c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019584:	2b00      	cmp	r3, #0
 8019586:	d0a6      	beq.n	80194d6 <_Z19tflite_learn_6_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 8019588:	4b14      	ldr	r3, [pc, #80]	; (80195dc <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 801958a:	2200      	movs	r2, #0
 801958c:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 801958e:	2400      	movs	r4, #0
}
 8019590:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019594:	4618      	mov	r0, r3
 8019596:	f000 f8af 	bl	80196f8 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801959a:	4623      	mov	r3, r4
 801959c:	4618      	mov	r0, r3
 801959e:	37a8      	adds	r7, #168	; 0xa8
 80195a0:	46bd      	mov	sp, r7
 80195a2:	bdb0      	pop	{r4, r5, r7, pc}
 80195a4:	20005454 	.word	0x20005454
 80195a8:	08022700 	.word	0x08022700
 80195ac:	20005458 	.word	0x20005458
 80195b0:	2000545c 	.word	0x2000545c
 80195b4:	20005460 	.word	0x20005460
 80195b8:	08018e8d 	.word	0x08018e8d
 80195bc:	08018f71 	.word	0x08018f71
 80195c0:	08018ffd 	.word	0x08018ffd
 80195c4:	0801909d 	.word	0x0801909d
 80195c8:	08019171 	.word	0x08019171
 80195cc:	08017939 	.word	0x08017939
 80195d0:	200050bc 	.word	0x200050bc
 80195d4:	08022728 	.word	0x08022728
 80195d8:	20005608 	.word	0x20005608
 80195dc:	20005650 	.word	0x20005650
 80195e0:	080287a4 	.word	0x080287a4
 80195e4:	200051b4 	.word	0x200051b4
 80195e8:	2000513c 	.word	0x2000513c

080195ec <_Z20tflite_learn_6_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
 80195f4:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 80195f6:	2300      	movs	r3, #0
 80195f8:	6839      	ldr	r1, [r7, #0]
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7ff fbc0 	bl	8018d80 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	3708      	adds	r7, #8
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}

0801960a <_Z21tflite_learn_6_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
 801960a:	b580      	push	{r7, lr}
 801960c:	b082      	sub	sp, #8
 801960e:	af00      	add	r7, sp, #0
 8019610:	6078      	str	r0, [r7, #4]
 8019612:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 8019614:	2307      	movs	r3, #7
 8019616:	6839      	ldr	r1, [r7, #0]
 8019618:	4618      	mov	r0, r3
 801961a:	f7ff fbb1 	bl	8018d80 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 801961e:	2300      	movs	r3, #0
}
 8019620:	4618      	mov	r0, r3
 8019622:	3708      	adds	r7, #8
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}

08019628 <_Z21tflite_learn_6_invokev>:

TfLiteStatus tflite_learn_6_invoke() {
 8019628:	b590      	push	{r4, r7, lr}
 801962a:	b083      	sub	sp, #12
 801962c:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 3; ++i) {
 801962e:	2300      	movs	r3, #0
 8019630:	607b      	str	r3, [r7, #4]
 8019632:	e022      	b.n	801967a <_Z21tflite_learn_6_invokev+0x52>
    ResetTensors();
 8019634:	f7ff fcfe 	bl	8019034 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 8019638:	4a14      	ldr	r2, [pc, #80]	; (801968c <_Z21tflite_learn_6_invokev+0x64>)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	4413      	add	r3, r2
 801963e:	781b      	ldrb	r3, [r3, #0]
 8019640:	4619      	mov	r1, r3
 8019642:	4a13      	ldr	r2, [pc, #76]	; (8019690 <_Z21tflite_learn_6_invokev+0x68>)
 8019644:	460b      	mov	r3, r1
 8019646:	00db      	lsls	r3, r3, #3
 8019648:	440b      	add	r3, r1
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	4413      	add	r3, r2
 801964e:	330c      	adds	r3, #12
 8019650:	681c      	ldr	r4, [r3, #0]
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	4613      	mov	r3, r2
 8019656:	009b      	lsls	r3, r3, #2
 8019658:	4413      	add	r3, r2
 801965a:	00db      	lsls	r3, r3, #3
 801965c:	4a0d      	ldr	r2, [pc, #52]	; (8019694 <_Z21tflite_learn_6_invokev+0x6c>)
 801965e:	4413      	add	r3, r2
 8019660:	4619      	mov	r1, r3
 8019662:	480d      	ldr	r0, [pc, #52]	; (8019698 <_Z21tflite_learn_6_invokev+0x70>)
 8019664:	47a0      	blx	r4
 8019666:	4603      	mov	r3, r0
 8019668:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801966a:	78fb      	ldrb	r3, [r7, #3]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d001      	beq.n	8019674 <_Z21tflite_learn_6_invokev+0x4c>
      return status;
 8019670:	78fb      	ldrb	r3, [r7, #3]
 8019672:	e006      	b.n	8019682 <_Z21tflite_learn_6_invokev+0x5a>
  for (size_t i = 0; i < 3; ++i) {
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	3301      	adds	r3, #1
 8019678:	607b      	str	r3, [r7, #4]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2b02      	cmp	r3, #2
 801967e:	d9d9      	bls.n	8019634 <_Z21tflite_learn_6_invokev+0xc>
    }
  }
  return kTfLiteOk;
 8019680:	2300      	movs	r3, #0
}
 8019682:	4618      	mov	r0, r3
 8019684:	370c      	adds	r7, #12
 8019686:	46bd      	mov	sp, r7
 8019688:	bd90      	pop	{r4, r7, pc}
 801968a:	bf00      	nop
 801968c:	200051b4 	.word	0x200051b4
 8019690:	20005608 	.word	0x20005608
 8019694:	2000513c 	.word	0x2000513c
 8019698:	20005460 	.word	0x20005460

0801969c <_Z20tflite_learn_6_resetPFvPvE>:

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
 801969c:	b580      	push	{r7, lr}
 801969e:	b084      	sub	sp, #16
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 80196a4:	4b10      	ldr	r3, [pc, #64]	; (80196e8 <_Z20tflite_learn_6_resetPFvPvE+0x4c>)
 80196a6:	681a      	ldr	r2, [r3, #0]
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	4610      	mov	r0, r2
 80196ac:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 80196ae:	4b0f      	ldr	r3, [pc, #60]	; (80196ec <_Z20tflite_learn_6_resetPFvPvE+0x50>)
 80196b0:	2200      	movs	r2, #0
 80196b2:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80196b4:	2300      	movs	r3, #0
 80196b6:	60fb      	str	r3, [r7, #12]
 80196b8:	e009      	b.n	80196ce <_Z20tflite_learn_6_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 80196ba:	4a0d      	ldr	r2, [pc, #52]	; (80196f0 <_Z20tflite_learn_6_resetPFvPvE+0x54>)
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7fd f9ee 	bl	8016aa4 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	3301      	adds	r3, #1
 80196cc:	60fb      	str	r3, [r7, #12]
 80196ce:	4b09      	ldr	r3, [pc, #36]	; (80196f4 <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	68fa      	ldr	r2, [r7, #12]
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d3f0      	bcc.n	80196ba <_Z20tflite_learn_6_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 80196d8:	4b06      	ldr	r3, [pc, #24]	; (80196f4 <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 80196da:	2200      	movs	r2, #0
 80196dc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80196de:	2300      	movs	r3, #0
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	3710      	adds	r7, #16
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	20005454 	.word	0x20005454
 80196ec:	200056a0 	.word	0x200056a0
 80196f0:	20005654 	.word	0x20005654
 80196f4:	2000567c 	.word	0x2000567c

080196f8 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
 8019700:	4a05      	ldr	r2, [pc, #20]	; (8019718 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	601a      	str	r2, [r3, #0]
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	4618      	mov	r0, r3
 801970a:	f7fd ffd3 	bl	80176b4 <_ZN6tflite12MicroContextD1Ev>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	4618      	mov	r0, r3
 8019712:	3708      	adds	r7, #8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	080287b4 	.word	0x080287b4

0801971c <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 801971c:	b580      	push	{r7, lr}
 801971e:	b082      	sub	sp, #8
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
 8019724:	6878      	ldr	r0, [r7, #4]
 8019726:	f7ff ffe7 	bl	80196f8 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801972a:	2118      	movs	r1, #24
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f000 f837 	bl	80197a0 <_ZdlPvj>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	4618      	mov	r0, r3
 8019736:	3708      	adds	r7, #8
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}

0801973c <_Z41__static_initialization_and_destruction_0ii>:
}
 801973c:	b480      	push	{r7}
 801973e:	b083      	sub	sp, #12
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
 8019744:	6039      	str	r1, [r7, #0]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	2b01      	cmp	r3, #1
 801974a:	d117      	bne.n	801977c <_Z41__static_initialization_and_destruction_0ii+0x40>
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019752:	4293      	cmp	r3, r2
 8019754:	d112      	bne.n	801977c <_Z41__static_initialization_and_destruction_0ii+0x40>
};
 8019756:	4b0c      	ldr	r3, [pc, #48]	; (8019788 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	4a0c      	ldr	r2, [pc, #48]	; (801978c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801975c:	6053      	str	r3, [r2, #4]
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 304), (TfLiteIntArray*)&g0::tensor_dimension5, 240, },
 801975e:	4b0a      	ldr	r3, [pc, #40]	; (8019788 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f503 7398 	add.w	r3, r3, #304	; 0x130
};
 8019766:	4a09      	ldr	r2, [pc, #36]	; (801978c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8019768:	6553      	str	r3, [r2, #84]	; 0x54
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension6, 8, },
 801976a:	4b07      	ldr	r3, [pc, #28]	; (8019788 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	3310      	adds	r3, #16
};
 8019770:	4a06      	ldr	r2, [pc, #24]	; (801978c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8019772:	6653      	str	r3, [r2, #100]	; 0x64
 8019774:	4b04      	ldr	r3, [pc, #16]	; (8019788 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	4a04      	ldr	r2, [pc, #16]	; (801978c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801977a:	6753      	str	r3, [r2, #116]	; 0x74
}
 801977c:	bf00      	nop
 801977e:	370c      	adds	r7, #12
 8019780:	46bd      	mov	sp, r7
 8019782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019786:	4770      	bx	lr
 8019788:	20005454 	.word	0x20005454
 801978c:	200050bc 	.word	0x200050bc

08019790 <_GLOBAL__sub_I__Z19tflite_learn_6_initPFPvjjE>:
 8019790:	b580      	push	{r7, lr}
 8019792:	af00      	add	r7, sp, #0
 8019794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019798:	2001      	movs	r0, #1
 801979a:	f7ff ffcf 	bl	801973c <_Z41__static_initialization_and_destruction_0ii>
 801979e:	bd80      	pop	{r7, pc}

080197a0 <_ZdlPvj>:
 80197a0:	f000 b81d 	b.w	80197de <_ZdlPv>

080197a4 <_ZdaPv>:
 80197a4:	f000 b81b 	b.w	80197de <_ZdlPv>

080197a8 <_ZdaPvj>:
 80197a8:	f7ff bffc 	b.w	80197a4 <_ZdaPv>

080197ac <_Znwj>:
 80197ac:	2801      	cmp	r0, #1
 80197ae:	bf38      	it	cc
 80197b0:	2001      	movcc	r0, #1
 80197b2:	b510      	push	{r4, lr}
 80197b4:	4604      	mov	r4, r0
 80197b6:	4620      	mov	r0, r4
 80197b8:	f003 fb00 	bl	801cdbc <malloc>
 80197bc:	b100      	cbz	r0, 80197c0 <_Znwj+0x14>
 80197be:	bd10      	pop	{r4, pc}
 80197c0:	f000 f810 	bl	80197e4 <_ZSt15get_new_handlerv>
 80197c4:	b908      	cbnz	r0, 80197ca <_Znwj+0x1e>
 80197c6:	f003 fab1 	bl	801cd2c <abort>
 80197ca:	4780      	blx	r0
 80197cc:	e7f3      	b.n	80197b6 <_Znwj+0xa>

080197ce <_Znaj>:
 80197ce:	f7ff bfed 	b.w	80197ac <_Znwj>

080197d2 <_ZSt20__throw_length_errorPKc>:
 80197d2:	b508      	push	{r3, lr}
 80197d4:	f003 faaa 	bl	801cd2c <abort>

080197d8 <_ZSt25__throw_bad_function_callv>:
 80197d8:	b508      	push	{r3, lr}
 80197da:	f003 faa7 	bl	801cd2c <abort>

080197de <_ZdlPv>:
 80197de:	f003 baf5 	b.w	801cdcc <free>
	...

080197e4 <_ZSt15get_new_handlerv>:
 80197e4:	4b02      	ldr	r3, [pc, #8]	; (80197f0 <_ZSt15get_new_handlerv+0xc>)
 80197e6:	6818      	ldr	r0, [r3, #0]
 80197e8:	f3bf 8f5b 	dmb	ish
 80197ec:	4770      	bx	lr
 80197ee:	bf00      	nop
 80197f0:	200056a4 	.word	0x200056a4

080197f4 <pow>:
 80197f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197f6:	ed2d 8b02 	vpush	{d8}
 80197fa:	eeb0 8a40 	vmov.f32	s16, s0
 80197fe:	eef0 8a60 	vmov.f32	s17, s1
 8019802:	ec55 4b11 	vmov	r4, r5, d1
 8019806:	f001 f84b 	bl	801a8a0 <__ieee754_pow>
 801980a:	4622      	mov	r2, r4
 801980c:	462b      	mov	r3, r5
 801980e:	4620      	mov	r0, r4
 8019810:	4629      	mov	r1, r5
 8019812:	ec57 6b10 	vmov	r6, r7, d0
 8019816:	f7e7 f9b9 	bl	8000b8c <__aeabi_dcmpun>
 801981a:	2800      	cmp	r0, #0
 801981c:	d13b      	bne.n	8019896 <pow+0xa2>
 801981e:	ec51 0b18 	vmov	r0, r1, d8
 8019822:	2200      	movs	r2, #0
 8019824:	2300      	movs	r3, #0
 8019826:	f7e7 f97f 	bl	8000b28 <__aeabi_dcmpeq>
 801982a:	b1b8      	cbz	r0, 801985c <pow+0x68>
 801982c:	2200      	movs	r2, #0
 801982e:	2300      	movs	r3, #0
 8019830:	4620      	mov	r0, r4
 8019832:	4629      	mov	r1, r5
 8019834:	f7e7 f978 	bl	8000b28 <__aeabi_dcmpeq>
 8019838:	2800      	cmp	r0, #0
 801983a:	d146      	bne.n	80198ca <pow+0xd6>
 801983c:	ec45 4b10 	vmov	d0, r4, r5
 8019840:	f000 faaa 	bl	8019d98 <finite>
 8019844:	b338      	cbz	r0, 8019896 <pow+0xa2>
 8019846:	2200      	movs	r2, #0
 8019848:	2300      	movs	r3, #0
 801984a:	4620      	mov	r0, r4
 801984c:	4629      	mov	r1, r5
 801984e:	f7e7 f975 	bl	8000b3c <__aeabi_dcmplt>
 8019852:	b300      	cbz	r0, 8019896 <pow+0xa2>
 8019854:	f004 fbde 	bl	801e014 <__errno>
 8019858:	2322      	movs	r3, #34	; 0x22
 801985a:	e01b      	b.n	8019894 <pow+0xa0>
 801985c:	ec47 6b10 	vmov	d0, r6, r7
 8019860:	f000 fa9a 	bl	8019d98 <finite>
 8019864:	b9e0      	cbnz	r0, 80198a0 <pow+0xac>
 8019866:	eeb0 0a48 	vmov.f32	s0, s16
 801986a:	eef0 0a68 	vmov.f32	s1, s17
 801986e:	f000 fa93 	bl	8019d98 <finite>
 8019872:	b1a8      	cbz	r0, 80198a0 <pow+0xac>
 8019874:	ec45 4b10 	vmov	d0, r4, r5
 8019878:	f000 fa8e 	bl	8019d98 <finite>
 801987c:	b180      	cbz	r0, 80198a0 <pow+0xac>
 801987e:	4632      	mov	r2, r6
 8019880:	463b      	mov	r3, r7
 8019882:	4630      	mov	r0, r6
 8019884:	4639      	mov	r1, r7
 8019886:	f7e7 f981 	bl	8000b8c <__aeabi_dcmpun>
 801988a:	2800      	cmp	r0, #0
 801988c:	d0e2      	beq.n	8019854 <pow+0x60>
 801988e:	f004 fbc1 	bl	801e014 <__errno>
 8019892:	2321      	movs	r3, #33	; 0x21
 8019894:	6003      	str	r3, [r0, #0]
 8019896:	ecbd 8b02 	vpop	{d8}
 801989a:	ec47 6b10 	vmov	d0, r6, r7
 801989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198a0:	2200      	movs	r2, #0
 80198a2:	2300      	movs	r3, #0
 80198a4:	4630      	mov	r0, r6
 80198a6:	4639      	mov	r1, r7
 80198a8:	f7e7 f93e 	bl	8000b28 <__aeabi_dcmpeq>
 80198ac:	2800      	cmp	r0, #0
 80198ae:	d0f2      	beq.n	8019896 <pow+0xa2>
 80198b0:	eeb0 0a48 	vmov.f32	s0, s16
 80198b4:	eef0 0a68 	vmov.f32	s1, s17
 80198b8:	f000 fa6e 	bl	8019d98 <finite>
 80198bc:	2800      	cmp	r0, #0
 80198be:	d0ea      	beq.n	8019896 <pow+0xa2>
 80198c0:	ec45 4b10 	vmov	d0, r4, r5
 80198c4:	f000 fa68 	bl	8019d98 <finite>
 80198c8:	e7c3      	b.n	8019852 <pow+0x5e>
 80198ca:	4f01      	ldr	r7, [pc, #4]	; (80198d0 <pow+0xdc>)
 80198cc:	2600      	movs	r6, #0
 80198ce:	e7e2      	b.n	8019896 <pow+0xa2>
 80198d0:	3ff00000 	.word	0x3ff00000

080198d4 <sqrt>:
 80198d4:	b538      	push	{r3, r4, r5, lr}
 80198d6:	ed2d 8b02 	vpush	{d8}
 80198da:	ec55 4b10 	vmov	r4, r5, d0
 80198de:	f000 faa5 	bl	8019e2c <__ieee754_sqrt>
 80198e2:	4622      	mov	r2, r4
 80198e4:	462b      	mov	r3, r5
 80198e6:	4620      	mov	r0, r4
 80198e8:	4629      	mov	r1, r5
 80198ea:	eeb0 8a40 	vmov.f32	s16, s0
 80198ee:	eef0 8a60 	vmov.f32	s17, s1
 80198f2:	f7e7 f94b 	bl	8000b8c <__aeabi_dcmpun>
 80198f6:	b990      	cbnz	r0, 801991e <sqrt+0x4a>
 80198f8:	2200      	movs	r2, #0
 80198fa:	2300      	movs	r3, #0
 80198fc:	4620      	mov	r0, r4
 80198fe:	4629      	mov	r1, r5
 8019900:	f7e7 f91c 	bl	8000b3c <__aeabi_dcmplt>
 8019904:	b158      	cbz	r0, 801991e <sqrt+0x4a>
 8019906:	f004 fb85 	bl	801e014 <__errno>
 801990a:	2321      	movs	r3, #33	; 0x21
 801990c:	6003      	str	r3, [r0, #0]
 801990e:	2200      	movs	r2, #0
 8019910:	2300      	movs	r3, #0
 8019912:	4610      	mov	r0, r2
 8019914:	4619      	mov	r1, r3
 8019916:	f7e6 ffc9 	bl	80008ac <__aeabi_ddiv>
 801991a:	ec41 0b18 	vmov	d8, r0, r1
 801991e:	eeb0 0a48 	vmov.f32	s0, s16
 8019922:	eef0 0a68 	vmov.f32	s1, s17
 8019926:	ecbd 8b02 	vpop	{d8}
 801992a:	bd38      	pop	{r3, r4, r5, pc}
 801992c:	0000      	movs	r0, r0
	...

08019930 <cos>:
 8019930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019932:	ec53 2b10 	vmov	r2, r3, d0
 8019936:	4826      	ldr	r0, [pc, #152]	; (80199d0 <cos+0xa0>)
 8019938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801993c:	4281      	cmp	r1, r0
 801993e:	dc06      	bgt.n	801994e <cos+0x1e>
 8019940:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80199c8 <cos+0x98>
 8019944:	b005      	add	sp, #20
 8019946:	f85d eb04 	ldr.w	lr, [sp], #4
 801994a:	f000 bc15 	b.w	801a178 <__kernel_cos>
 801994e:	4821      	ldr	r0, [pc, #132]	; (80199d4 <cos+0xa4>)
 8019950:	4281      	cmp	r1, r0
 8019952:	dd09      	ble.n	8019968 <cos+0x38>
 8019954:	ee10 0a10 	vmov	r0, s0
 8019958:	4619      	mov	r1, r3
 801995a:	f7e6 fcc5 	bl	80002e8 <__aeabi_dsub>
 801995e:	ec41 0b10 	vmov	d0, r0, r1
 8019962:	b005      	add	sp, #20
 8019964:	f85d fb04 	ldr.w	pc, [sp], #4
 8019968:	4668      	mov	r0, sp
 801996a:	f001 fcc5 	bl	801b2f8 <__ieee754_rem_pio2>
 801996e:	f000 0003 	and.w	r0, r0, #3
 8019972:	2801      	cmp	r0, #1
 8019974:	d00b      	beq.n	801998e <cos+0x5e>
 8019976:	2802      	cmp	r0, #2
 8019978:	d016      	beq.n	80199a8 <cos+0x78>
 801997a:	b9e0      	cbnz	r0, 80199b6 <cos+0x86>
 801997c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019980:	ed9d 0b00 	vldr	d0, [sp]
 8019984:	f000 fbf8 	bl	801a178 <__kernel_cos>
 8019988:	ec51 0b10 	vmov	r0, r1, d0
 801998c:	e7e7      	b.n	801995e <cos+0x2e>
 801998e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019992:	ed9d 0b00 	vldr	d0, [sp]
 8019996:	f000 fcb7 	bl	801a308 <__kernel_sin>
 801999a:	ec53 2b10 	vmov	r2, r3, d0
 801999e:	ee10 0a10 	vmov	r0, s0
 80199a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80199a6:	e7da      	b.n	801995e <cos+0x2e>
 80199a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199ac:	ed9d 0b00 	vldr	d0, [sp]
 80199b0:	f000 fbe2 	bl	801a178 <__kernel_cos>
 80199b4:	e7f1      	b.n	801999a <cos+0x6a>
 80199b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80199ba:	ed9d 0b00 	vldr	d0, [sp]
 80199be:	2001      	movs	r0, #1
 80199c0:	f000 fca2 	bl	801a308 <__kernel_sin>
 80199c4:	e7e0      	b.n	8019988 <cos+0x58>
 80199c6:	bf00      	nop
	...
 80199d0:	3fe921fb 	.word	0x3fe921fb
 80199d4:	7fefffff 	.word	0x7fefffff

080199d8 <frexp>:
 80199d8:	b570      	push	{r4, r5, r6, lr}
 80199da:	2100      	movs	r1, #0
 80199dc:	ec55 4b10 	vmov	r4, r5, d0
 80199e0:	6001      	str	r1, [r0, #0]
 80199e2:	4916      	ldr	r1, [pc, #88]	; (8019a3c <frexp+0x64>)
 80199e4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80199e8:	428a      	cmp	r2, r1
 80199ea:	4606      	mov	r6, r0
 80199ec:	462b      	mov	r3, r5
 80199ee:	dc22      	bgt.n	8019a36 <frexp+0x5e>
 80199f0:	ee10 1a10 	vmov	r1, s0
 80199f4:	4311      	orrs	r1, r2
 80199f6:	d01e      	beq.n	8019a36 <frexp+0x5e>
 80199f8:	4911      	ldr	r1, [pc, #68]	; (8019a40 <frexp+0x68>)
 80199fa:	4029      	ands	r1, r5
 80199fc:	b969      	cbnz	r1, 8019a1a <frexp+0x42>
 80199fe:	4b11      	ldr	r3, [pc, #68]	; (8019a44 <frexp+0x6c>)
 8019a00:	2200      	movs	r2, #0
 8019a02:	ee10 0a10 	vmov	r0, s0
 8019a06:	4629      	mov	r1, r5
 8019a08:	f7e6 fe26 	bl	8000658 <__aeabi_dmul>
 8019a0c:	460b      	mov	r3, r1
 8019a0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019a12:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8019a16:	4604      	mov	r4, r0
 8019a18:	6031      	str	r1, [r6, #0]
 8019a1a:	6831      	ldr	r1, [r6, #0]
 8019a1c:	1512      	asrs	r2, r2, #20
 8019a1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019a22:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8019a26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019a2a:	4411      	add	r1, r2
 8019a2c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8019a30:	6031      	str	r1, [r6, #0]
 8019a32:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8019a36:	ec45 4b10 	vmov	d0, r4, r5
 8019a3a:	bd70      	pop	{r4, r5, r6, pc}
 8019a3c:	7fefffff 	.word	0x7fefffff
 8019a40:	7ff00000 	.word	0x7ff00000
 8019a44:	43500000 	.word	0x43500000

08019a48 <sin>:
 8019a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a4a:	ec53 2b10 	vmov	r2, r3, d0
 8019a4e:	4828      	ldr	r0, [pc, #160]	; (8019af0 <sin+0xa8>)
 8019a50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019a54:	4281      	cmp	r1, r0
 8019a56:	dc07      	bgt.n	8019a68 <sin+0x20>
 8019a58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019ae8 <sin+0xa0>
 8019a5c:	2000      	movs	r0, #0
 8019a5e:	b005      	add	sp, #20
 8019a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a64:	f000 bc50 	b.w	801a308 <__kernel_sin>
 8019a68:	4822      	ldr	r0, [pc, #136]	; (8019af4 <sin+0xac>)
 8019a6a:	4281      	cmp	r1, r0
 8019a6c:	dd09      	ble.n	8019a82 <sin+0x3a>
 8019a6e:	ee10 0a10 	vmov	r0, s0
 8019a72:	4619      	mov	r1, r3
 8019a74:	f7e6 fc38 	bl	80002e8 <__aeabi_dsub>
 8019a78:	ec41 0b10 	vmov	d0, r0, r1
 8019a7c:	b005      	add	sp, #20
 8019a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a82:	4668      	mov	r0, sp
 8019a84:	f001 fc38 	bl	801b2f8 <__ieee754_rem_pio2>
 8019a88:	f000 0003 	and.w	r0, r0, #3
 8019a8c:	2801      	cmp	r0, #1
 8019a8e:	d00c      	beq.n	8019aaa <sin+0x62>
 8019a90:	2802      	cmp	r0, #2
 8019a92:	d011      	beq.n	8019ab8 <sin+0x70>
 8019a94:	b9f0      	cbnz	r0, 8019ad4 <sin+0x8c>
 8019a96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019a9a:	ed9d 0b00 	vldr	d0, [sp]
 8019a9e:	2001      	movs	r0, #1
 8019aa0:	f000 fc32 	bl	801a308 <__kernel_sin>
 8019aa4:	ec51 0b10 	vmov	r0, r1, d0
 8019aa8:	e7e6      	b.n	8019a78 <sin+0x30>
 8019aaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019aae:	ed9d 0b00 	vldr	d0, [sp]
 8019ab2:	f000 fb61 	bl	801a178 <__kernel_cos>
 8019ab6:	e7f5      	b.n	8019aa4 <sin+0x5c>
 8019ab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019abc:	ed9d 0b00 	vldr	d0, [sp]
 8019ac0:	2001      	movs	r0, #1
 8019ac2:	f000 fc21 	bl	801a308 <__kernel_sin>
 8019ac6:	ec53 2b10 	vmov	r2, r3, d0
 8019aca:	ee10 0a10 	vmov	r0, s0
 8019ace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019ad2:	e7d1      	b.n	8019a78 <sin+0x30>
 8019ad4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019ad8:	ed9d 0b00 	vldr	d0, [sp]
 8019adc:	f000 fb4c 	bl	801a178 <__kernel_cos>
 8019ae0:	e7f1      	b.n	8019ac6 <sin+0x7e>
 8019ae2:	bf00      	nop
 8019ae4:	f3af 8000 	nop.w
	...
 8019af0:	3fe921fb 	.word	0x3fe921fb
 8019af4:	7fefffff 	.word	0x7fefffff

08019af8 <tan>:
 8019af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019afa:	ec53 2b10 	vmov	r2, r3, d0
 8019afe:	4816      	ldr	r0, [pc, #88]	; (8019b58 <tan+0x60>)
 8019b00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019b04:	4281      	cmp	r1, r0
 8019b06:	dc07      	bgt.n	8019b18 <tan+0x20>
 8019b08:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8019b50 <tan+0x58>
 8019b0c:	2001      	movs	r0, #1
 8019b0e:	b005      	add	sp, #20
 8019b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b14:	f000 bcb8 	b.w	801a488 <__kernel_tan>
 8019b18:	4810      	ldr	r0, [pc, #64]	; (8019b5c <tan+0x64>)
 8019b1a:	4281      	cmp	r1, r0
 8019b1c:	dd09      	ble.n	8019b32 <tan+0x3a>
 8019b1e:	ee10 0a10 	vmov	r0, s0
 8019b22:	4619      	mov	r1, r3
 8019b24:	f7e6 fbe0 	bl	80002e8 <__aeabi_dsub>
 8019b28:	ec41 0b10 	vmov	d0, r0, r1
 8019b2c:	b005      	add	sp, #20
 8019b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b32:	4668      	mov	r0, sp
 8019b34:	f001 fbe0 	bl	801b2f8 <__ieee754_rem_pio2>
 8019b38:	0040      	lsls	r0, r0, #1
 8019b3a:	f000 0002 	and.w	r0, r0, #2
 8019b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019b42:	ed9d 0b00 	vldr	d0, [sp]
 8019b46:	f1c0 0001 	rsb	r0, r0, #1
 8019b4a:	f000 fc9d 	bl	801a488 <__kernel_tan>
 8019b4e:	e7ed      	b.n	8019b2c <tan+0x34>
	...
 8019b58:	3fe921fb 	.word	0x3fe921fb
 8019b5c:	7fefffff 	.word	0x7fefffff

08019b60 <expf>:
 8019b60:	b508      	push	{r3, lr}
 8019b62:	ed2d 8b02 	vpush	{d8}
 8019b66:	eef0 8a40 	vmov.f32	s17, s0
 8019b6a:	f001 fe7b 	bl	801b864 <__ieee754_expf>
 8019b6e:	eeb0 8a40 	vmov.f32	s16, s0
 8019b72:	eeb0 0a68 	vmov.f32	s0, s17
 8019b76:	f000 f923 	bl	8019dc0 <finitef>
 8019b7a:	b160      	cbz	r0, 8019b96 <expf+0x36>
 8019b7c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019bbc <expf+0x5c>
 8019b80:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b88:	dd0a      	ble.n	8019ba0 <expf+0x40>
 8019b8a:	f004 fa43 	bl	801e014 <__errno>
 8019b8e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019bc0 <expf+0x60>
 8019b92:	2322      	movs	r3, #34	; 0x22
 8019b94:	6003      	str	r3, [r0, #0]
 8019b96:	eeb0 0a48 	vmov.f32	s0, s16
 8019b9a:	ecbd 8b02 	vpop	{d8}
 8019b9e:	bd08      	pop	{r3, pc}
 8019ba0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019bc4 <expf+0x64>
 8019ba4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bac:	d5f3      	bpl.n	8019b96 <expf+0x36>
 8019bae:	f004 fa31 	bl	801e014 <__errno>
 8019bb2:	2322      	movs	r3, #34	; 0x22
 8019bb4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019bc8 <expf+0x68>
 8019bb8:	6003      	str	r3, [r0, #0]
 8019bba:	e7ec      	b.n	8019b96 <expf+0x36>
 8019bbc:	42b17217 	.word	0x42b17217
 8019bc0:	7f800000 	.word	0x7f800000
 8019bc4:	c2cff1b5 	.word	0xc2cff1b5
 8019bc8:	00000000 	.word	0x00000000

08019bcc <logf>:
 8019bcc:	b508      	push	{r3, lr}
 8019bce:	ed2d 8b02 	vpush	{d8}
 8019bd2:	eeb0 8a40 	vmov.f32	s16, s0
 8019bd6:	f001 ff13 	bl	801ba00 <__ieee754_logf>
 8019bda:	eeb4 8a48 	vcmp.f32	s16, s16
 8019bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019be2:	d60f      	bvs.n	8019c04 <logf+0x38>
 8019be4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bec:	dc0a      	bgt.n	8019c04 <logf+0x38>
 8019bee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf6:	d108      	bne.n	8019c0a <logf+0x3e>
 8019bf8:	f004 fa0c 	bl	801e014 <__errno>
 8019bfc:	2322      	movs	r3, #34	; 0x22
 8019bfe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019c20 <logf+0x54>
 8019c02:	6003      	str	r3, [r0, #0]
 8019c04:	ecbd 8b02 	vpop	{d8}
 8019c08:	bd08      	pop	{r3, pc}
 8019c0a:	f004 fa03 	bl	801e014 <__errno>
 8019c0e:	ecbd 8b02 	vpop	{d8}
 8019c12:	2321      	movs	r3, #33	; 0x21
 8019c14:	6003      	str	r3, [r0, #0]
 8019c16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c1a:	4802      	ldr	r0, [pc, #8]	; (8019c24 <logf+0x58>)
 8019c1c:	f000 b8de 	b.w	8019ddc <nanf>
 8019c20:	ff800000 	.word	0xff800000
 8019c24:	08028e0b 	.word	0x08028e0b

08019c28 <log10f>:
 8019c28:	b508      	push	{r3, lr}
 8019c2a:	ed2d 8b02 	vpush	{d8}
 8019c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8019c32:	f001 ffd7 	bl	801bbe4 <__ieee754_log10f>
 8019c36:	eeb4 8a48 	vcmp.f32	s16, s16
 8019c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c3e:	d60f      	bvs.n	8019c60 <log10f+0x38>
 8019c40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c48:	d80a      	bhi.n	8019c60 <log10f+0x38>
 8019c4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c52:	d108      	bne.n	8019c66 <log10f+0x3e>
 8019c54:	f004 f9de 	bl	801e014 <__errno>
 8019c58:	2322      	movs	r3, #34	; 0x22
 8019c5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019c7c <log10f+0x54>
 8019c5e:	6003      	str	r3, [r0, #0]
 8019c60:	ecbd 8b02 	vpop	{d8}
 8019c64:	bd08      	pop	{r3, pc}
 8019c66:	f004 f9d5 	bl	801e014 <__errno>
 8019c6a:	ecbd 8b02 	vpop	{d8}
 8019c6e:	2321      	movs	r3, #33	; 0x21
 8019c70:	6003      	str	r3, [r0, #0]
 8019c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c76:	4802      	ldr	r0, [pc, #8]	; (8019c80 <log10f+0x58>)
 8019c78:	f000 b8b0 	b.w	8019ddc <nanf>
 8019c7c:	ff800000 	.word	0xff800000
 8019c80:	08028e0b 	.word	0x08028e0b

08019c84 <sqrtf>:
 8019c84:	b508      	push	{r3, lr}
 8019c86:	ed2d 8b02 	vpush	{d8}
 8019c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8019c8e:	f000 f9a7 	bl	8019fe0 <__ieee754_sqrtf>
 8019c92:	eeb4 8a48 	vcmp.f32	s16, s16
 8019c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c9a:	d60c      	bvs.n	8019cb6 <sqrtf+0x32>
 8019c9c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019cbc <sqrtf+0x38>
 8019ca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca8:	d505      	bpl.n	8019cb6 <sqrtf+0x32>
 8019caa:	f004 f9b3 	bl	801e014 <__errno>
 8019cae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019cb2:	2321      	movs	r3, #33	; 0x21
 8019cb4:	6003      	str	r3, [r0, #0]
 8019cb6:	ecbd 8b02 	vpop	{d8}
 8019cba:	bd08      	pop	{r3, pc}
 8019cbc:	00000000 	.word	0x00000000

08019cc0 <frexpf>:
 8019cc0:	ee10 3a10 	vmov	r3, s0
 8019cc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019cc8:	2100      	movs	r1, #0
 8019cca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019cce:	6001      	str	r1, [r0, #0]
 8019cd0:	da19      	bge.n	8019d06 <frexpf+0x46>
 8019cd2:	b1c2      	cbz	r2, 8019d06 <frexpf+0x46>
 8019cd4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019cd8:	d10a      	bne.n	8019cf0 <frexpf+0x30>
 8019cda:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019d08 <frexpf+0x48>
 8019cde:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019ce2:	f06f 0118 	mvn.w	r1, #24
 8019ce6:	ee17 3a90 	vmov	r3, s15
 8019cea:	6001      	str	r1, [r0, #0]
 8019cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019cf0:	6801      	ldr	r1, [r0, #0]
 8019cf2:	15d2      	asrs	r2, r2, #23
 8019cf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019cf8:	3a7e      	subs	r2, #126	; 0x7e
 8019cfa:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8019cfe:	4411      	add	r1, r2
 8019d00:	ee00 3a10 	vmov	s0, r3
 8019d04:	6001      	str	r1, [r0, #0]
 8019d06:	4770      	bx	lr
 8019d08:	4c000000 	.word	0x4c000000

08019d0c <sinf>:
 8019d0c:	ee10 3a10 	vmov	r3, s0
 8019d10:	b507      	push	{r0, r1, r2, lr}
 8019d12:	4a1f      	ldr	r2, [pc, #124]	; (8019d90 <sinf+0x84>)
 8019d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	dc07      	bgt.n	8019d2c <sinf+0x20>
 8019d1c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8019d94 <sinf+0x88>
 8019d20:	2000      	movs	r0, #0
 8019d22:	b003      	add	sp, #12
 8019d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d28:	f001 bd54 	b.w	801b7d4 <__kernel_sinf>
 8019d2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019d30:	db04      	blt.n	8019d3c <sinf+0x30>
 8019d32:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019d36:	b003      	add	sp, #12
 8019d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d3c:	4668      	mov	r0, sp
 8019d3e:	f001 ffa9 	bl	801bc94 <__ieee754_rem_pio2f>
 8019d42:	f000 0003 	and.w	r0, r0, #3
 8019d46:	2801      	cmp	r0, #1
 8019d48:	d00a      	beq.n	8019d60 <sinf+0x54>
 8019d4a:	2802      	cmp	r0, #2
 8019d4c:	d00f      	beq.n	8019d6e <sinf+0x62>
 8019d4e:	b9c0      	cbnz	r0, 8019d82 <sinf+0x76>
 8019d50:	eddd 0a01 	vldr	s1, [sp, #4]
 8019d54:	ed9d 0a00 	vldr	s0, [sp]
 8019d58:	2001      	movs	r0, #1
 8019d5a:	f001 fd3b 	bl	801b7d4 <__kernel_sinf>
 8019d5e:	e7ea      	b.n	8019d36 <sinf+0x2a>
 8019d60:	eddd 0a01 	vldr	s1, [sp, #4]
 8019d64:	ed9d 0a00 	vldr	s0, [sp]
 8019d68:	f001 fcd6 	bl	801b718 <__kernel_cosf>
 8019d6c:	e7e3      	b.n	8019d36 <sinf+0x2a>
 8019d6e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019d72:	ed9d 0a00 	vldr	s0, [sp]
 8019d76:	2001      	movs	r0, #1
 8019d78:	f001 fd2c 	bl	801b7d4 <__kernel_sinf>
 8019d7c:	eeb1 0a40 	vneg.f32	s0, s0
 8019d80:	e7d9      	b.n	8019d36 <sinf+0x2a>
 8019d82:	eddd 0a01 	vldr	s1, [sp, #4]
 8019d86:	ed9d 0a00 	vldr	s0, [sp]
 8019d8a:	f001 fcc5 	bl	801b718 <__kernel_cosf>
 8019d8e:	e7f5      	b.n	8019d7c <sinf+0x70>
 8019d90:	3f490fd8 	.word	0x3f490fd8
 8019d94:	00000000 	.word	0x00000000

08019d98 <finite>:
 8019d98:	b082      	sub	sp, #8
 8019d9a:	ed8d 0b00 	vstr	d0, [sp]
 8019d9e:	9801      	ldr	r0, [sp, #4]
 8019da0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019da4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019da8:	0fc0      	lsrs	r0, r0, #31
 8019daa:	b002      	add	sp, #8
 8019dac:	4770      	bx	lr
	...

08019db0 <nan>:
 8019db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019db8 <nan+0x8>
 8019db4:	4770      	bx	lr
 8019db6:	bf00      	nop
 8019db8:	00000000 	.word	0x00000000
 8019dbc:	7ff80000 	.word	0x7ff80000

08019dc0 <finitef>:
 8019dc0:	b082      	sub	sp, #8
 8019dc2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019dc6:	9801      	ldr	r0, [sp, #4]
 8019dc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019dcc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019dd0:	bfac      	ite	ge
 8019dd2:	2000      	movge	r0, #0
 8019dd4:	2001      	movlt	r0, #1
 8019dd6:	b002      	add	sp, #8
 8019dd8:	4770      	bx	lr
	...

08019ddc <nanf>:
 8019ddc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019de4 <nanf+0x8>
 8019de0:	4770      	bx	lr
 8019de2:	bf00      	nop
 8019de4:	7fc00000 	.word	0x7fc00000

08019de8 <with_errnof>:
 8019de8:	b513      	push	{r0, r1, r4, lr}
 8019dea:	4604      	mov	r4, r0
 8019dec:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019df0:	f004 f910 	bl	801e014 <__errno>
 8019df4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019df8:	6004      	str	r4, [r0, #0]
 8019dfa:	b002      	add	sp, #8
 8019dfc:	bd10      	pop	{r4, pc}

08019dfe <xflowf>:
 8019dfe:	b130      	cbz	r0, 8019e0e <xflowf+0x10>
 8019e00:	eef1 7a40 	vneg.f32	s15, s0
 8019e04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019e08:	2022      	movs	r0, #34	; 0x22
 8019e0a:	f7ff bfed 	b.w	8019de8 <with_errnof>
 8019e0e:	eef0 7a40 	vmov.f32	s15, s0
 8019e12:	e7f7      	b.n	8019e04 <xflowf+0x6>

08019e14 <__math_uflowf>:
 8019e14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e1c <__math_uflowf+0x8>
 8019e18:	f7ff bff1 	b.w	8019dfe <xflowf>
 8019e1c:	10000000 	.word	0x10000000

08019e20 <__math_oflowf>:
 8019e20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e28 <__math_oflowf+0x8>
 8019e24:	f7ff bfeb 	b.w	8019dfe <xflowf>
 8019e28:	70000000 	.word	0x70000000

08019e2c <__ieee754_sqrt>:
 8019e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e30:	ec55 4b10 	vmov	r4, r5, d0
 8019e34:	4e67      	ldr	r6, [pc, #412]	; (8019fd4 <__ieee754_sqrt+0x1a8>)
 8019e36:	43ae      	bics	r6, r5
 8019e38:	ee10 0a10 	vmov	r0, s0
 8019e3c:	ee10 2a10 	vmov	r2, s0
 8019e40:	4629      	mov	r1, r5
 8019e42:	462b      	mov	r3, r5
 8019e44:	d10d      	bne.n	8019e62 <__ieee754_sqrt+0x36>
 8019e46:	f7e6 fc07 	bl	8000658 <__aeabi_dmul>
 8019e4a:	4602      	mov	r2, r0
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	4620      	mov	r0, r4
 8019e50:	4629      	mov	r1, r5
 8019e52:	f7e6 fa4b 	bl	80002ec <__adddf3>
 8019e56:	4604      	mov	r4, r0
 8019e58:	460d      	mov	r5, r1
 8019e5a:	ec45 4b10 	vmov	d0, r4, r5
 8019e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e62:	2d00      	cmp	r5, #0
 8019e64:	dc0b      	bgt.n	8019e7e <__ieee754_sqrt+0x52>
 8019e66:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019e6a:	4326      	orrs	r6, r4
 8019e6c:	d0f5      	beq.n	8019e5a <__ieee754_sqrt+0x2e>
 8019e6e:	b135      	cbz	r5, 8019e7e <__ieee754_sqrt+0x52>
 8019e70:	f7e6 fa3a 	bl	80002e8 <__aeabi_dsub>
 8019e74:	4602      	mov	r2, r0
 8019e76:	460b      	mov	r3, r1
 8019e78:	f7e6 fd18 	bl	80008ac <__aeabi_ddiv>
 8019e7c:	e7eb      	b.n	8019e56 <__ieee754_sqrt+0x2a>
 8019e7e:	1509      	asrs	r1, r1, #20
 8019e80:	f000 808d 	beq.w	8019f9e <__ieee754_sqrt+0x172>
 8019e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019e88:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8019e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019e90:	07c9      	lsls	r1, r1, #31
 8019e92:	bf5c      	itt	pl
 8019e94:	005b      	lslpl	r3, r3, #1
 8019e96:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8019e9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019e9e:	bf58      	it	pl
 8019ea0:	0052      	lslpl	r2, r2, #1
 8019ea2:	2500      	movs	r5, #0
 8019ea4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019ea8:	1076      	asrs	r6, r6, #1
 8019eaa:	0052      	lsls	r2, r2, #1
 8019eac:	f04f 0e16 	mov.w	lr, #22
 8019eb0:	46ac      	mov	ip, r5
 8019eb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019eb6:	eb0c 0001 	add.w	r0, ip, r1
 8019eba:	4298      	cmp	r0, r3
 8019ebc:	bfde      	ittt	le
 8019ebe:	1a1b      	suble	r3, r3, r0
 8019ec0:	eb00 0c01 	addle.w	ip, r0, r1
 8019ec4:	186d      	addle	r5, r5, r1
 8019ec6:	005b      	lsls	r3, r3, #1
 8019ec8:	f1be 0e01 	subs.w	lr, lr, #1
 8019ecc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019ed0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019ed4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019ed8:	d1ed      	bne.n	8019eb6 <__ieee754_sqrt+0x8a>
 8019eda:	4674      	mov	r4, lr
 8019edc:	2720      	movs	r7, #32
 8019ede:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019ee2:	4563      	cmp	r3, ip
 8019ee4:	eb01 000e 	add.w	r0, r1, lr
 8019ee8:	dc02      	bgt.n	8019ef0 <__ieee754_sqrt+0xc4>
 8019eea:	d113      	bne.n	8019f14 <__ieee754_sqrt+0xe8>
 8019eec:	4290      	cmp	r0, r2
 8019eee:	d811      	bhi.n	8019f14 <__ieee754_sqrt+0xe8>
 8019ef0:	2800      	cmp	r0, #0
 8019ef2:	eb00 0e01 	add.w	lr, r0, r1
 8019ef6:	da57      	bge.n	8019fa8 <__ieee754_sqrt+0x17c>
 8019ef8:	f1be 0f00 	cmp.w	lr, #0
 8019efc:	db54      	blt.n	8019fa8 <__ieee754_sqrt+0x17c>
 8019efe:	f10c 0801 	add.w	r8, ip, #1
 8019f02:	eba3 030c 	sub.w	r3, r3, ip
 8019f06:	4290      	cmp	r0, r2
 8019f08:	bf88      	it	hi
 8019f0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019f0e:	1a12      	subs	r2, r2, r0
 8019f10:	440c      	add	r4, r1
 8019f12:	46c4      	mov	ip, r8
 8019f14:	005b      	lsls	r3, r3, #1
 8019f16:	3f01      	subs	r7, #1
 8019f18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019f1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019f20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019f24:	d1dd      	bne.n	8019ee2 <__ieee754_sqrt+0xb6>
 8019f26:	4313      	orrs	r3, r2
 8019f28:	d01b      	beq.n	8019f62 <__ieee754_sqrt+0x136>
 8019f2a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8019fd8 <__ieee754_sqrt+0x1ac>
 8019f2e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019fdc <__ieee754_sqrt+0x1b0>
 8019f32:	e9da 0100 	ldrd	r0, r1, [sl]
 8019f36:	e9db 2300 	ldrd	r2, r3, [fp]
 8019f3a:	f7e6 f9d5 	bl	80002e8 <__aeabi_dsub>
 8019f3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8019f42:	4602      	mov	r2, r0
 8019f44:	460b      	mov	r3, r1
 8019f46:	4640      	mov	r0, r8
 8019f48:	4649      	mov	r1, r9
 8019f4a:	f7e6 fe01 	bl	8000b50 <__aeabi_dcmple>
 8019f4e:	b140      	cbz	r0, 8019f62 <__ieee754_sqrt+0x136>
 8019f50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8019f54:	e9da 0100 	ldrd	r0, r1, [sl]
 8019f58:	e9db 2300 	ldrd	r2, r3, [fp]
 8019f5c:	d126      	bne.n	8019fac <__ieee754_sqrt+0x180>
 8019f5e:	3501      	adds	r5, #1
 8019f60:	463c      	mov	r4, r7
 8019f62:	106a      	asrs	r2, r5, #1
 8019f64:	0863      	lsrs	r3, r4, #1
 8019f66:	07e9      	lsls	r1, r5, #31
 8019f68:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019f6c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019f70:	bf48      	it	mi
 8019f72:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019f76:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8019f7a:	461c      	mov	r4, r3
 8019f7c:	e76d      	b.n	8019e5a <__ieee754_sqrt+0x2e>
 8019f7e:	0ad3      	lsrs	r3, r2, #11
 8019f80:	3815      	subs	r0, #21
 8019f82:	0552      	lsls	r2, r2, #21
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d0fa      	beq.n	8019f7e <__ieee754_sqrt+0x152>
 8019f88:	02dc      	lsls	r4, r3, #11
 8019f8a:	d50a      	bpl.n	8019fa2 <__ieee754_sqrt+0x176>
 8019f8c:	f1c1 0420 	rsb	r4, r1, #32
 8019f90:	fa22 f404 	lsr.w	r4, r2, r4
 8019f94:	1e4d      	subs	r5, r1, #1
 8019f96:	408a      	lsls	r2, r1
 8019f98:	4323      	orrs	r3, r4
 8019f9a:	1b41      	subs	r1, r0, r5
 8019f9c:	e772      	b.n	8019e84 <__ieee754_sqrt+0x58>
 8019f9e:	4608      	mov	r0, r1
 8019fa0:	e7f0      	b.n	8019f84 <__ieee754_sqrt+0x158>
 8019fa2:	005b      	lsls	r3, r3, #1
 8019fa4:	3101      	adds	r1, #1
 8019fa6:	e7ef      	b.n	8019f88 <__ieee754_sqrt+0x15c>
 8019fa8:	46e0      	mov	r8, ip
 8019faa:	e7aa      	b.n	8019f02 <__ieee754_sqrt+0xd6>
 8019fac:	f7e6 f99e 	bl	80002ec <__adddf3>
 8019fb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8019fb4:	4602      	mov	r2, r0
 8019fb6:	460b      	mov	r3, r1
 8019fb8:	4640      	mov	r0, r8
 8019fba:	4649      	mov	r1, r9
 8019fbc:	f7e6 fdbe 	bl	8000b3c <__aeabi_dcmplt>
 8019fc0:	b120      	cbz	r0, 8019fcc <__ieee754_sqrt+0x1a0>
 8019fc2:	1ca0      	adds	r0, r4, #2
 8019fc4:	bf08      	it	eq
 8019fc6:	3501      	addeq	r5, #1
 8019fc8:	3402      	adds	r4, #2
 8019fca:	e7ca      	b.n	8019f62 <__ieee754_sqrt+0x136>
 8019fcc:	3401      	adds	r4, #1
 8019fce:	f024 0401 	bic.w	r4, r4, #1
 8019fd2:	e7c6      	b.n	8019f62 <__ieee754_sqrt+0x136>
 8019fd4:	7ff00000 	.word	0x7ff00000
 8019fd8:	200051b8 	.word	0x200051b8
 8019fdc:	200051c0 	.word	0x200051c0

08019fe0 <__ieee754_sqrtf>:
 8019fe0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019fe4:	4770      	bx	lr
	...

08019fe8 <floor>:
 8019fe8:	ec51 0b10 	vmov	r0, r1, d0
 8019fec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ff4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019ff8:	2e13      	cmp	r6, #19
 8019ffa:	ee10 5a10 	vmov	r5, s0
 8019ffe:	ee10 8a10 	vmov	r8, s0
 801a002:	460c      	mov	r4, r1
 801a004:	dc31      	bgt.n	801a06a <floor+0x82>
 801a006:	2e00      	cmp	r6, #0
 801a008:	da14      	bge.n	801a034 <floor+0x4c>
 801a00a:	a333      	add	r3, pc, #204	; (adr r3, 801a0d8 <floor+0xf0>)
 801a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a010:	f7e6 f96c 	bl	80002ec <__adddf3>
 801a014:	2200      	movs	r2, #0
 801a016:	2300      	movs	r3, #0
 801a018:	f7e6 fdae 	bl	8000b78 <__aeabi_dcmpgt>
 801a01c:	b138      	cbz	r0, 801a02e <floor+0x46>
 801a01e:	2c00      	cmp	r4, #0
 801a020:	da53      	bge.n	801a0ca <floor+0xe2>
 801a022:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801a026:	4325      	orrs	r5, r4
 801a028:	d052      	beq.n	801a0d0 <floor+0xe8>
 801a02a:	4c2d      	ldr	r4, [pc, #180]	; (801a0e0 <floor+0xf8>)
 801a02c:	2500      	movs	r5, #0
 801a02e:	4621      	mov	r1, r4
 801a030:	4628      	mov	r0, r5
 801a032:	e024      	b.n	801a07e <floor+0x96>
 801a034:	4f2b      	ldr	r7, [pc, #172]	; (801a0e4 <floor+0xfc>)
 801a036:	4137      	asrs	r7, r6
 801a038:	ea01 0307 	and.w	r3, r1, r7
 801a03c:	4303      	orrs	r3, r0
 801a03e:	d01e      	beq.n	801a07e <floor+0x96>
 801a040:	a325      	add	r3, pc, #148	; (adr r3, 801a0d8 <floor+0xf0>)
 801a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a046:	f7e6 f951 	bl	80002ec <__adddf3>
 801a04a:	2200      	movs	r2, #0
 801a04c:	2300      	movs	r3, #0
 801a04e:	f7e6 fd93 	bl	8000b78 <__aeabi_dcmpgt>
 801a052:	2800      	cmp	r0, #0
 801a054:	d0eb      	beq.n	801a02e <floor+0x46>
 801a056:	2c00      	cmp	r4, #0
 801a058:	bfbe      	ittt	lt
 801a05a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a05e:	4133      	asrlt	r3, r6
 801a060:	18e4      	addlt	r4, r4, r3
 801a062:	ea24 0407 	bic.w	r4, r4, r7
 801a066:	2500      	movs	r5, #0
 801a068:	e7e1      	b.n	801a02e <floor+0x46>
 801a06a:	2e33      	cmp	r6, #51	; 0x33
 801a06c:	dd0b      	ble.n	801a086 <floor+0x9e>
 801a06e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a072:	d104      	bne.n	801a07e <floor+0x96>
 801a074:	ee10 2a10 	vmov	r2, s0
 801a078:	460b      	mov	r3, r1
 801a07a:	f7e6 f937 	bl	80002ec <__adddf3>
 801a07e:	ec41 0b10 	vmov	d0, r0, r1
 801a082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a086:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801a08a:	f04f 37ff 	mov.w	r7, #4294967295
 801a08e:	40df      	lsrs	r7, r3
 801a090:	4238      	tst	r0, r7
 801a092:	d0f4      	beq.n	801a07e <floor+0x96>
 801a094:	a310      	add	r3, pc, #64	; (adr r3, 801a0d8 <floor+0xf0>)
 801a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a09a:	f7e6 f927 	bl	80002ec <__adddf3>
 801a09e:	2200      	movs	r2, #0
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	f7e6 fd69 	bl	8000b78 <__aeabi_dcmpgt>
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	d0c1      	beq.n	801a02e <floor+0x46>
 801a0aa:	2c00      	cmp	r4, #0
 801a0ac:	da0a      	bge.n	801a0c4 <floor+0xdc>
 801a0ae:	2e14      	cmp	r6, #20
 801a0b0:	d101      	bne.n	801a0b6 <floor+0xce>
 801a0b2:	3401      	adds	r4, #1
 801a0b4:	e006      	b.n	801a0c4 <floor+0xdc>
 801a0b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a0ba:	2301      	movs	r3, #1
 801a0bc:	40b3      	lsls	r3, r6
 801a0be:	441d      	add	r5, r3
 801a0c0:	45a8      	cmp	r8, r5
 801a0c2:	d8f6      	bhi.n	801a0b2 <floor+0xca>
 801a0c4:	ea25 0507 	bic.w	r5, r5, r7
 801a0c8:	e7b1      	b.n	801a02e <floor+0x46>
 801a0ca:	2500      	movs	r5, #0
 801a0cc:	462c      	mov	r4, r5
 801a0ce:	e7ae      	b.n	801a02e <floor+0x46>
 801a0d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a0d4:	e7ab      	b.n	801a02e <floor+0x46>
 801a0d6:	bf00      	nop
 801a0d8:	8800759c 	.word	0x8800759c
 801a0dc:	7e37e43c 	.word	0x7e37e43c
 801a0e0:	bff00000 	.word	0xbff00000
 801a0e4:	000fffff 	.word	0x000fffff

0801a0e8 <round>:
 801a0e8:	ec53 2b10 	vmov	r2, r3, d0
 801a0ec:	b570      	push	{r4, r5, r6, lr}
 801a0ee:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801a0f2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801a0f6:	2813      	cmp	r0, #19
 801a0f8:	ee10 5a10 	vmov	r5, s0
 801a0fc:	4619      	mov	r1, r3
 801a0fe:	dc18      	bgt.n	801a132 <round+0x4a>
 801a100:	2800      	cmp	r0, #0
 801a102:	da09      	bge.n	801a118 <round+0x30>
 801a104:	3001      	adds	r0, #1
 801a106:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801a10a:	d103      	bne.n	801a114 <round+0x2c>
 801a10c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a110:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a114:	2300      	movs	r3, #0
 801a116:	e02a      	b.n	801a16e <round+0x86>
 801a118:	4c16      	ldr	r4, [pc, #88]	; (801a174 <round+0x8c>)
 801a11a:	4104      	asrs	r4, r0
 801a11c:	ea03 0604 	and.w	r6, r3, r4
 801a120:	4316      	orrs	r6, r2
 801a122:	d011      	beq.n	801a148 <round+0x60>
 801a124:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a128:	4103      	asrs	r3, r0
 801a12a:	440b      	add	r3, r1
 801a12c:	ea23 0104 	bic.w	r1, r3, r4
 801a130:	e7f0      	b.n	801a114 <round+0x2c>
 801a132:	2833      	cmp	r0, #51	; 0x33
 801a134:	dd0b      	ble.n	801a14e <round+0x66>
 801a136:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a13a:	d105      	bne.n	801a148 <round+0x60>
 801a13c:	ee10 0a10 	vmov	r0, s0
 801a140:	f7e6 f8d4 	bl	80002ec <__adddf3>
 801a144:	4602      	mov	r2, r0
 801a146:	460b      	mov	r3, r1
 801a148:	ec43 2b10 	vmov	d0, r2, r3
 801a14c:	bd70      	pop	{r4, r5, r6, pc}
 801a14e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801a152:	f04f 34ff 	mov.w	r4, #4294967295
 801a156:	40f4      	lsrs	r4, r6
 801a158:	4214      	tst	r4, r2
 801a15a:	d0f5      	beq.n	801a148 <round+0x60>
 801a15c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801a160:	2301      	movs	r3, #1
 801a162:	4083      	lsls	r3, r0
 801a164:	195b      	adds	r3, r3, r5
 801a166:	bf28      	it	cs
 801a168:	3101      	addcs	r1, #1
 801a16a:	ea23 0304 	bic.w	r3, r3, r4
 801a16e:	461a      	mov	r2, r3
 801a170:	460b      	mov	r3, r1
 801a172:	e7e9      	b.n	801a148 <round+0x60>
 801a174:	000fffff 	.word	0x000fffff

0801a178 <__kernel_cos>:
 801a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	ec57 6b10 	vmov	r6, r7, d0
 801a180:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a184:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a188:	ed8d 1b00 	vstr	d1, [sp]
 801a18c:	da07      	bge.n	801a19e <__kernel_cos+0x26>
 801a18e:	ee10 0a10 	vmov	r0, s0
 801a192:	4639      	mov	r1, r7
 801a194:	f7e6 fd10 	bl	8000bb8 <__aeabi_d2iz>
 801a198:	2800      	cmp	r0, #0
 801a19a:	f000 8088 	beq.w	801a2ae <__kernel_cos+0x136>
 801a19e:	4632      	mov	r2, r6
 801a1a0:	463b      	mov	r3, r7
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	4639      	mov	r1, r7
 801a1a6:	f7e6 fa57 	bl	8000658 <__aeabi_dmul>
 801a1aa:	4b51      	ldr	r3, [pc, #324]	; (801a2f0 <__kernel_cos+0x178>)
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	4604      	mov	r4, r0
 801a1b0:	460d      	mov	r5, r1
 801a1b2:	f7e6 fa51 	bl	8000658 <__aeabi_dmul>
 801a1b6:	a340      	add	r3, pc, #256	; (adr r3, 801a2b8 <__kernel_cos+0x140>)
 801a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1bc:	4682      	mov	sl, r0
 801a1be:	468b      	mov	fp, r1
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	4629      	mov	r1, r5
 801a1c4:	f7e6 fa48 	bl	8000658 <__aeabi_dmul>
 801a1c8:	a33d      	add	r3, pc, #244	; (adr r3, 801a2c0 <__kernel_cos+0x148>)
 801a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ce:	f7e6 f88d 	bl	80002ec <__adddf3>
 801a1d2:	4622      	mov	r2, r4
 801a1d4:	462b      	mov	r3, r5
 801a1d6:	f7e6 fa3f 	bl	8000658 <__aeabi_dmul>
 801a1da:	a33b      	add	r3, pc, #236	; (adr r3, 801a2c8 <__kernel_cos+0x150>)
 801a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e0:	f7e6 f882 	bl	80002e8 <__aeabi_dsub>
 801a1e4:	4622      	mov	r2, r4
 801a1e6:	462b      	mov	r3, r5
 801a1e8:	f7e6 fa36 	bl	8000658 <__aeabi_dmul>
 801a1ec:	a338      	add	r3, pc, #224	; (adr r3, 801a2d0 <__kernel_cos+0x158>)
 801a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1f2:	f7e6 f87b 	bl	80002ec <__adddf3>
 801a1f6:	4622      	mov	r2, r4
 801a1f8:	462b      	mov	r3, r5
 801a1fa:	f7e6 fa2d 	bl	8000658 <__aeabi_dmul>
 801a1fe:	a336      	add	r3, pc, #216	; (adr r3, 801a2d8 <__kernel_cos+0x160>)
 801a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a204:	f7e6 f870 	bl	80002e8 <__aeabi_dsub>
 801a208:	4622      	mov	r2, r4
 801a20a:	462b      	mov	r3, r5
 801a20c:	f7e6 fa24 	bl	8000658 <__aeabi_dmul>
 801a210:	a333      	add	r3, pc, #204	; (adr r3, 801a2e0 <__kernel_cos+0x168>)
 801a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a216:	f7e6 f869 	bl	80002ec <__adddf3>
 801a21a:	4622      	mov	r2, r4
 801a21c:	462b      	mov	r3, r5
 801a21e:	f7e6 fa1b 	bl	8000658 <__aeabi_dmul>
 801a222:	4622      	mov	r2, r4
 801a224:	462b      	mov	r3, r5
 801a226:	f7e6 fa17 	bl	8000658 <__aeabi_dmul>
 801a22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a22e:	4604      	mov	r4, r0
 801a230:	460d      	mov	r5, r1
 801a232:	4630      	mov	r0, r6
 801a234:	4639      	mov	r1, r7
 801a236:	f7e6 fa0f 	bl	8000658 <__aeabi_dmul>
 801a23a:	460b      	mov	r3, r1
 801a23c:	4602      	mov	r2, r0
 801a23e:	4629      	mov	r1, r5
 801a240:	4620      	mov	r0, r4
 801a242:	f7e6 f851 	bl	80002e8 <__aeabi_dsub>
 801a246:	4b2b      	ldr	r3, [pc, #172]	; (801a2f4 <__kernel_cos+0x17c>)
 801a248:	4598      	cmp	r8, r3
 801a24a:	4606      	mov	r6, r0
 801a24c:	460f      	mov	r7, r1
 801a24e:	dc10      	bgt.n	801a272 <__kernel_cos+0xfa>
 801a250:	4602      	mov	r2, r0
 801a252:	460b      	mov	r3, r1
 801a254:	4650      	mov	r0, sl
 801a256:	4659      	mov	r1, fp
 801a258:	f7e6 f846 	bl	80002e8 <__aeabi_dsub>
 801a25c:	460b      	mov	r3, r1
 801a25e:	4926      	ldr	r1, [pc, #152]	; (801a2f8 <__kernel_cos+0x180>)
 801a260:	4602      	mov	r2, r0
 801a262:	2000      	movs	r0, #0
 801a264:	f7e6 f840 	bl	80002e8 <__aeabi_dsub>
 801a268:	ec41 0b10 	vmov	d0, r0, r1
 801a26c:	b003      	add	sp, #12
 801a26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a272:	4b22      	ldr	r3, [pc, #136]	; (801a2fc <__kernel_cos+0x184>)
 801a274:	4920      	ldr	r1, [pc, #128]	; (801a2f8 <__kernel_cos+0x180>)
 801a276:	4598      	cmp	r8, r3
 801a278:	bfcc      	ite	gt
 801a27a:	4d21      	ldrgt	r5, [pc, #132]	; (801a300 <__kernel_cos+0x188>)
 801a27c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a280:	2400      	movs	r4, #0
 801a282:	4622      	mov	r2, r4
 801a284:	462b      	mov	r3, r5
 801a286:	2000      	movs	r0, #0
 801a288:	f7e6 f82e 	bl	80002e8 <__aeabi_dsub>
 801a28c:	4622      	mov	r2, r4
 801a28e:	4680      	mov	r8, r0
 801a290:	4689      	mov	r9, r1
 801a292:	462b      	mov	r3, r5
 801a294:	4650      	mov	r0, sl
 801a296:	4659      	mov	r1, fp
 801a298:	f7e6 f826 	bl	80002e8 <__aeabi_dsub>
 801a29c:	4632      	mov	r2, r6
 801a29e:	463b      	mov	r3, r7
 801a2a0:	f7e6 f822 	bl	80002e8 <__aeabi_dsub>
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	460b      	mov	r3, r1
 801a2a8:	4640      	mov	r0, r8
 801a2aa:	4649      	mov	r1, r9
 801a2ac:	e7da      	b.n	801a264 <__kernel_cos+0xec>
 801a2ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a2e8 <__kernel_cos+0x170>
 801a2b2:	e7db      	b.n	801a26c <__kernel_cos+0xf4>
 801a2b4:	f3af 8000 	nop.w
 801a2b8:	be8838d4 	.word	0xbe8838d4
 801a2bc:	bda8fae9 	.word	0xbda8fae9
 801a2c0:	bdb4b1c4 	.word	0xbdb4b1c4
 801a2c4:	3e21ee9e 	.word	0x3e21ee9e
 801a2c8:	809c52ad 	.word	0x809c52ad
 801a2cc:	3e927e4f 	.word	0x3e927e4f
 801a2d0:	19cb1590 	.word	0x19cb1590
 801a2d4:	3efa01a0 	.word	0x3efa01a0
 801a2d8:	16c15177 	.word	0x16c15177
 801a2dc:	3f56c16c 	.word	0x3f56c16c
 801a2e0:	5555554c 	.word	0x5555554c
 801a2e4:	3fa55555 	.word	0x3fa55555
 801a2e8:	00000000 	.word	0x00000000
 801a2ec:	3ff00000 	.word	0x3ff00000
 801a2f0:	3fe00000 	.word	0x3fe00000
 801a2f4:	3fd33332 	.word	0x3fd33332
 801a2f8:	3ff00000 	.word	0x3ff00000
 801a2fc:	3fe90000 	.word	0x3fe90000
 801a300:	3fd20000 	.word	0x3fd20000
 801a304:	00000000 	.word	0x00000000

0801a308 <__kernel_sin>:
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	ed2d 8b04 	vpush	{d8-d9}
 801a310:	eeb0 8a41 	vmov.f32	s16, s2
 801a314:	eef0 8a61 	vmov.f32	s17, s3
 801a318:	ec55 4b10 	vmov	r4, r5, d0
 801a31c:	b083      	sub	sp, #12
 801a31e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a322:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a326:	9001      	str	r0, [sp, #4]
 801a328:	da06      	bge.n	801a338 <__kernel_sin+0x30>
 801a32a:	ee10 0a10 	vmov	r0, s0
 801a32e:	4629      	mov	r1, r5
 801a330:	f7e6 fc42 	bl	8000bb8 <__aeabi_d2iz>
 801a334:	2800      	cmp	r0, #0
 801a336:	d051      	beq.n	801a3dc <__kernel_sin+0xd4>
 801a338:	4622      	mov	r2, r4
 801a33a:	462b      	mov	r3, r5
 801a33c:	4620      	mov	r0, r4
 801a33e:	4629      	mov	r1, r5
 801a340:	f7e6 f98a 	bl	8000658 <__aeabi_dmul>
 801a344:	4682      	mov	sl, r0
 801a346:	468b      	mov	fp, r1
 801a348:	4602      	mov	r2, r0
 801a34a:	460b      	mov	r3, r1
 801a34c:	4620      	mov	r0, r4
 801a34e:	4629      	mov	r1, r5
 801a350:	f7e6 f982 	bl	8000658 <__aeabi_dmul>
 801a354:	a341      	add	r3, pc, #260	; (adr r3, 801a45c <__kernel_sin+0x154>)
 801a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a35a:	4680      	mov	r8, r0
 801a35c:	4689      	mov	r9, r1
 801a35e:	4650      	mov	r0, sl
 801a360:	4659      	mov	r1, fp
 801a362:	f7e6 f979 	bl	8000658 <__aeabi_dmul>
 801a366:	a33f      	add	r3, pc, #252	; (adr r3, 801a464 <__kernel_sin+0x15c>)
 801a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36c:	f7e5 ffbc 	bl	80002e8 <__aeabi_dsub>
 801a370:	4652      	mov	r2, sl
 801a372:	465b      	mov	r3, fp
 801a374:	f7e6 f970 	bl	8000658 <__aeabi_dmul>
 801a378:	a33c      	add	r3, pc, #240	; (adr r3, 801a46c <__kernel_sin+0x164>)
 801a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a37e:	f7e5 ffb5 	bl	80002ec <__adddf3>
 801a382:	4652      	mov	r2, sl
 801a384:	465b      	mov	r3, fp
 801a386:	f7e6 f967 	bl	8000658 <__aeabi_dmul>
 801a38a:	a33a      	add	r3, pc, #232	; (adr r3, 801a474 <__kernel_sin+0x16c>)
 801a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a390:	f7e5 ffaa 	bl	80002e8 <__aeabi_dsub>
 801a394:	4652      	mov	r2, sl
 801a396:	465b      	mov	r3, fp
 801a398:	f7e6 f95e 	bl	8000658 <__aeabi_dmul>
 801a39c:	a337      	add	r3, pc, #220	; (adr r3, 801a47c <__kernel_sin+0x174>)
 801a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a2:	f7e5 ffa3 	bl	80002ec <__adddf3>
 801a3a6:	9b01      	ldr	r3, [sp, #4]
 801a3a8:	4606      	mov	r6, r0
 801a3aa:	460f      	mov	r7, r1
 801a3ac:	b9eb      	cbnz	r3, 801a3ea <__kernel_sin+0xe2>
 801a3ae:	4602      	mov	r2, r0
 801a3b0:	460b      	mov	r3, r1
 801a3b2:	4650      	mov	r0, sl
 801a3b4:	4659      	mov	r1, fp
 801a3b6:	f7e6 f94f 	bl	8000658 <__aeabi_dmul>
 801a3ba:	a325      	add	r3, pc, #148	; (adr r3, 801a450 <__kernel_sin+0x148>)
 801a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3c0:	f7e5 ff92 	bl	80002e8 <__aeabi_dsub>
 801a3c4:	4642      	mov	r2, r8
 801a3c6:	464b      	mov	r3, r9
 801a3c8:	f7e6 f946 	bl	8000658 <__aeabi_dmul>
 801a3cc:	4602      	mov	r2, r0
 801a3ce:	460b      	mov	r3, r1
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	4629      	mov	r1, r5
 801a3d4:	f7e5 ff8a 	bl	80002ec <__adddf3>
 801a3d8:	4604      	mov	r4, r0
 801a3da:	460d      	mov	r5, r1
 801a3dc:	ec45 4b10 	vmov	d0, r4, r5
 801a3e0:	b003      	add	sp, #12
 801a3e2:	ecbd 8b04 	vpop	{d8-d9}
 801a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ea:	4b1b      	ldr	r3, [pc, #108]	; (801a458 <__kernel_sin+0x150>)
 801a3ec:	ec51 0b18 	vmov	r0, r1, d8
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	f7e6 f931 	bl	8000658 <__aeabi_dmul>
 801a3f6:	4632      	mov	r2, r6
 801a3f8:	ec41 0b19 	vmov	d9, r0, r1
 801a3fc:	463b      	mov	r3, r7
 801a3fe:	4640      	mov	r0, r8
 801a400:	4649      	mov	r1, r9
 801a402:	f7e6 f929 	bl	8000658 <__aeabi_dmul>
 801a406:	4602      	mov	r2, r0
 801a408:	460b      	mov	r3, r1
 801a40a:	ec51 0b19 	vmov	r0, r1, d9
 801a40e:	f7e5 ff6b 	bl	80002e8 <__aeabi_dsub>
 801a412:	4652      	mov	r2, sl
 801a414:	465b      	mov	r3, fp
 801a416:	f7e6 f91f 	bl	8000658 <__aeabi_dmul>
 801a41a:	ec53 2b18 	vmov	r2, r3, d8
 801a41e:	f7e5 ff63 	bl	80002e8 <__aeabi_dsub>
 801a422:	a30b      	add	r3, pc, #44	; (adr r3, 801a450 <__kernel_sin+0x148>)
 801a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a428:	4606      	mov	r6, r0
 801a42a:	460f      	mov	r7, r1
 801a42c:	4640      	mov	r0, r8
 801a42e:	4649      	mov	r1, r9
 801a430:	f7e6 f912 	bl	8000658 <__aeabi_dmul>
 801a434:	4602      	mov	r2, r0
 801a436:	460b      	mov	r3, r1
 801a438:	4630      	mov	r0, r6
 801a43a:	4639      	mov	r1, r7
 801a43c:	f7e5 ff56 	bl	80002ec <__adddf3>
 801a440:	4602      	mov	r2, r0
 801a442:	460b      	mov	r3, r1
 801a444:	4620      	mov	r0, r4
 801a446:	4629      	mov	r1, r5
 801a448:	f7e5 ff4e 	bl	80002e8 <__aeabi_dsub>
 801a44c:	e7c4      	b.n	801a3d8 <__kernel_sin+0xd0>
 801a44e:	bf00      	nop
 801a450:	55555549 	.word	0x55555549
 801a454:	3fc55555 	.word	0x3fc55555
 801a458:	3fe00000 	.word	0x3fe00000
 801a45c:	5acfd57c 	.word	0x5acfd57c
 801a460:	3de5d93a 	.word	0x3de5d93a
 801a464:	8a2b9ceb 	.word	0x8a2b9ceb
 801a468:	3e5ae5e6 	.word	0x3e5ae5e6
 801a46c:	57b1fe7d 	.word	0x57b1fe7d
 801a470:	3ec71de3 	.word	0x3ec71de3
 801a474:	19c161d5 	.word	0x19c161d5
 801a478:	3f2a01a0 	.word	0x3f2a01a0
 801a47c:	1110f8a6 	.word	0x1110f8a6
 801a480:	3f811111 	.word	0x3f811111
 801a484:	00000000 	.word	0x00000000

0801a488 <__kernel_tan>:
 801a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a48c:	ed2d 8b06 	vpush	{d8-d10}
 801a490:	ec5b ab10 	vmov	sl, fp, d0
 801a494:	4be0      	ldr	r3, [pc, #896]	; (801a818 <__kernel_tan+0x390>)
 801a496:	b083      	sub	sp, #12
 801a498:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801a49c:	429f      	cmp	r7, r3
 801a49e:	ec59 8b11 	vmov	r8, r9, d1
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	f8cd b000 	str.w	fp, [sp]
 801a4a8:	dc61      	bgt.n	801a56e <__kernel_tan+0xe6>
 801a4aa:	ee10 0a10 	vmov	r0, s0
 801a4ae:	4659      	mov	r1, fp
 801a4b0:	f7e6 fb82 	bl	8000bb8 <__aeabi_d2iz>
 801a4b4:	4605      	mov	r5, r0
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	f040 8083 	bne.w	801a5c2 <__kernel_tan+0x13a>
 801a4bc:	1c73      	adds	r3, r6, #1
 801a4be:	4652      	mov	r2, sl
 801a4c0:	4313      	orrs	r3, r2
 801a4c2:	433b      	orrs	r3, r7
 801a4c4:	d112      	bne.n	801a4ec <__kernel_tan+0x64>
 801a4c6:	ec4b ab10 	vmov	d0, sl, fp
 801a4ca:	f001 f91b 	bl	801b704 <fabs>
 801a4ce:	49d3      	ldr	r1, [pc, #844]	; (801a81c <__kernel_tan+0x394>)
 801a4d0:	ec53 2b10 	vmov	r2, r3, d0
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	f7e6 f9e9 	bl	80008ac <__aeabi_ddiv>
 801a4da:	4682      	mov	sl, r0
 801a4dc:	468b      	mov	fp, r1
 801a4de:	ec4b ab10 	vmov	d0, sl, fp
 801a4e2:	b003      	add	sp, #12
 801a4e4:	ecbd 8b06 	vpop	{d8-d10}
 801a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ec:	2e01      	cmp	r6, #1
 801a4ee:	d0f6      	beq.n	801a4de <__kernel_tan+0x56>
 801a4f0:	4642      	mov	r2, r8
 801a4f2:	464b      	mov	r3, r9
 801a4f4:	4650      	mov	r0, sl
 801a4f6:	4659      	mov	r1, fp
 801a4f8:	f7e5 fef8 	bl	80002ec <__adddf3>
 801a4fc:	4602      	mov	r2, r0
 801a4fe:	460b      	mov	r3, r1
 801a500:	460f      	mov	r7, r1
 801a502:	2000      	movs	r0, #0
 801a504:	49c6      	ldr	r1, [pc, #792]	; (801a820 <__kernel_tan+0x398>)
 801a506:	f7e6 f9d1 	bl	80008ac <__aeabi_ddiv>
 801a50a:	e9cd 0100 	strd	r0, r1, [sp]
 801a50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a512:	462e      	mov	r6, r5
 801a514:	4652      	mov	r2, sl
 801a516:	462c      	mov	r4, r5
 801a518:	4630      	mov	r0, r6
 801a51a:	461d      	mov	r5, r3
 801a51c:	4639      	mov	r1, r7
 801a51e:	465b      	mov	r3, fp
 801a520:	f7e5 fee2 	bl	80002e8 <__aeabi_dsub>
 801a524:	4602      	mov	r2, r0
 801a526:	460b      	mov	r3, r1
 801a528:	4640      	mov	r0, r8
 801a52a:	4649      	mov	r1, r9
 801a52c:	f7e5 fedc 	bl	80002e8 <__aeabi_dsub>
 801a530:	4632      	mov	r2, r6
 801a532:	462b      	mov	r3, r5
 801a534:	f7e6 f890 	bl	8000658 <__aeabi_dmul>
 801a538:	4632      	mov	r2, r6
 801a53a:	4680      	mov	r8, r0
 801a53c:	4689      	mov	r9, r1
 801a53e:	462b      	mov	r3, r5
 801a540:	4630      	mov	r0, r6
 801a542:	4639      	mov	r1, r7
 801a544:	f7e6 f888 	bl	8000658 <__aeabi_dmul>
 801a548:	4bb4      	ldr	r3, [pc, #720]	; (801a81c <__kernel_tan+0x394>)
 801a54a:	2200      	movs	r2, #0
 801a54c:	f7e5 fece 	bl	80002ec <__adddf3>
 801a550:	4602      	mov	r2, r0
 801a552:	460b      	mov	r3, r1
 801a554:	4640      	mov	r0, r8
 801a556:	4649      	mov	r1, r9
 801a558:	f7e5 fec8 	bl	80002ec <__adddf3>
 801a55c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a560:	f7e6 f87a 	bl	8000658 <__aeabi_dmul>
 801a564:	4622      	mov	r2, r4
 801a566:	462b      	mov	r3, r5
 801a568:	f7e5 fec0 	bl	80002ec <__adddf3>
 801a56c:	e7b5      	b.n	801a4da <__kernel_tan+0x52>
 801a56e:	4bad      	ldr	r3, [pc, #692]	; (801a824 <__kernel_tan+0x39c>)
 801a570:	429f      	cmp	r7, r3
 801a572:	dd26      	ble.n	801a5c2 <__kernel_tan+0x13a>
 801a574:	9b00      	ldr	r3, [sp, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	da09      	bge.n	801a58e <__kernel_tan+0x106>
 801a57a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a57e:	469b      	mov	fp, r3
 801a580:	ee10 aa10 	vmov	sl, s0
 801a584:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a588:	ee11 8a10 	vmov	r8, s2
 801a58c:	4699      	mov	r9, r3
 801a58e:	4652      	mov	r2, sl
 801a590:	465b      	mov	r3, fp
 801a592:	a183      	add	r1, pc, #524	; (adr r1, 801a7a0 <__kernel_tan+0x318>)
 801a594:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a598:	f7e5 fea6 	bl	80002e8 <__aeabi_dsub>
 801a59c:	4642      	mov	r2, r8
 801a59e:	464b      	mov	r3, r9
 801a5a0:	4604      	mov	r4, r0
 801a5a2:	460d      	mov	r5, r1
 801a5a4:	a180      	add	r1, pc, #512	; (adr r1, 801a7a8 <__kernel_tan+0x320>)
 801a5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a5aa:	f7e5 fe9d 	bl	80002e8 <__aeabi_dsub>
 801a5ae:	4622      	mov	r2, r4
 801a5b0:	462b      	mov	r3, r5
 801a5b2:	f7e5 fe9b 	bl	80002ec <__adddf3>
 801a5b6:	f04f 0800 	mov.w	r8, #0
 801a5ba:	4682      	mov	sl, r0
 801a5bc:	468b      	mov	fp, r1
 801a5be:	f04f 0900 	mov.w	r9, #0
 801a5c2:	4652      	mov	r2, sl
 801a5c4:	465b      	mov	r3, fp
 801a5c6:	4650      	mov	r0, sl
 801a5c8:	4659      	mov	r1, fp
 801a5ca:	f7e6 f845 	bl	8000658 <__aeabi_dmul>
 801a5ce:	4602      	mov	r2, r0
 801a5d0:	460b      	mov	r3, r1
 801a5d2:	ec43 2b18 	vmov	d8, r2, r3
 801a5d6:	f7e6 f83f 	bl	8000658 <__aeabi_dmul>
 801a5da:	ec53 2b18 	vmov	r2, r3, d8
 801a5de:	4604      	mov	r4, r0
 801a5e0:	460d      	mov	r5, r1
 801a5e2:	4650      	mov	r0, sl
 801a5e4:	4659      	mov	r1, fp
 801a5e6:	f7e6 f837 	bl	8000658 <__aeabi_dmul>
 801a5ea:	a371      	add	r3, pc, #452	; (adr r3, 801a7b0 <__kernel_tan+0x328>)
 801a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5f0:	ec41 0b19 	vmov	d9, r0, r1
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	4629      	mov	r1, r5
 801a5f8:	f7e6 f82e 	bl	8000658 <__aeabi_dmul>
 801a5fc:	a36e      	add	r3, pc, #440	; (adr r3, 801a7b8 <__kernel_tan+0x330>)
 801a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a602:	f7e5 fe73 	bl	80002ec <__adddf3>
 801a606:	4622      	mov	r2, r4
 801a608:	462b      	mov	r3, r5
 801a60a:	f7e6 f825 	bl	8000658 <__aeabi_dmul>
 801a60e:	a36c      	add	r3, pc, #432	; (adr r3, 801a7c0 <__kernel_tan+0x338>)
 801a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a614:	f7e5 fe6a 	bl	80002ec <__adddf3>
 801a618:	4622      	mov	r2, r4
 801a61a:	462b      	mov	r3, r5
 801a61c:	f7e6 f81c 	bl	8000658 <__aeabi_dmul>
 801a620:	a369      	add	r3, pc, #420	; (adr r3, 801a7c8 <__kernel_tan+0x340>)
 801a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a626:	f7e5 fe61 	bl	80002ec <__adddf3>
 801a62a:	4622      	mov	r2, r4
 801a62c:	462b      	mov	r3, r5
 801a62e:	f7e6 f813 	bl	8000658 <__aeabi_dmul>
 801a632:	a367      	add	r3, pc, #412	; (adr r3, 801a7d0 <__kernel_tan+0x348>)
 801a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a638:	f7e5 fe58 	bl	80002ec <__adddf3>
 801a63c:	4622      	mov	r2, r4
 801a63e:	462b      	mov	r3, r5
 801a640:	f7e6 f80a 	bl	8000658 <__aeabi_dmul>
 801a644:	a364      	add	r3, pc, #400	; (adr r3, 801a7d8 <__kernel_tan+0x350>)
 801a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a64a:	f7e5 fe4f 	bl	80002ec <__adddf3>
 801a64e:	ec53 2b18 	vmov	r2, r3, d8
 801a652:	f7e6 f801 	bl	8000658 <__aeabi_dmul>
 801a656:	a362      	add	r3, pc, #392	; (adr r3, 801a7e0 <__kernel_tan+0x358>)
 801a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65c:	ec41 0b1a 	vmov	d10, r0, r1
 801a660:	4620      	mov	r0, r4
 801a662:	4629      	mov	r1, r5
 801a664:	f7e5 fff8 	bl	8000658 <__aeabi_dmul>
 801a668:	a35f      	add	r3, pc, #380	; (adr r3, 801a7e8 <__kernel_tan+0x360>)
 801a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a66e:	f7e5 fe3d 	bl	80002ec <__adddf3>
 801a672:	4622      	mov	r2, r4
 801a674:	462b      	mov	r3, r5
 801a676:	f7e5 ffef 	bl	8000658 <__aeabi_dmul>
 801a67a:	a35d      	add	r3, pc, #372	; (adr r3, 801a7f0 <__kernel_tan+0x368>)
 801a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a680:	f7e5 fe34 	bl	80002ec <__adddf3>
 801a684:	4622      	mov	r2, r4
 801a686:	462b      	mov	r3, r5
 801a688:	f7e5 ffe6 	bl	8000658 <__aeabi_dmul>
 801a68c:	a35a      	add	r3, pc, #360	; (adr r3, 801a7f8 <__kernel_tan+0x370>)
 801a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a692:	f7e5 fe2b 	bl	80002ec <__adddf3>
 801a696:	4622      	mov	r2, r4
 801a698:	462b      	mov	r3, r5
 801a69a:	f7e5 ffdd 	bl	8000658 <__aeabi_dmul>
 801a69e:	a358      	add	r3, pc, #352	; (adr r3, 801a800 <__kernel_tan+0x378>)
 801a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a4:	f7e5 fe22 	bl	80002ec <__adddf3>
 801a6a8:	4622      	mov	r2, r4
 801a6aa:	462b      	mov	r3, r5
 801a6ac:	f7e5 ffd4 	bl	8000658 <__aeabi_dmul>
 801a6b0:	a355      	add	r3, pc, #340	; (adr r3, 801a808 <__kernel_tan+0x380>)
 801a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6b6:	f7e5 fe19 	bl	80002ec <__adddf3>
 801a6ba:	4602      	mov	r2, r0
 801a6bc:	460b      	mov	r3, r1
 801a6be:	ec51 0b1a 	vmov	r0, r1, d10
 801a6c2:	f7e5 fe13 	bl	80002ec <__adddf3>
 801a6c6:	ec53 2b19 	vmov	r2, r3, d9
 801a6ca:	f7e5 ffc5 	bl	8000658 <__aeabi_dmul>
 801a6ce:	4642      	mov	r2, r8
 801a6d0:	464b      	mov	r3, r9
 801a6d2:	f7e5 fe0b 	bl	80002ec <__adddf3>
 801a6d6:	ec53 2b18 	vmov	r2, r3, d8
 801a6da:	f7e5 ffbd 	bl	8000658 <__aeabi_dmul>
 801a6de:	4642      	mov	r2, r8
 801a6e0:	464b      	mov	r3, r9
 801a6e2:	f7e5 fe03 	bl	80002ec <__adddf3>
 801a6e6:	a34a      	add	r3, pc, #296	; (adr r3, 801a810 <__kernel_tan+0x388>)
 801a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ec:	4604      	mov	r4, r0
 801a6ee:	460d      	mov	r5, r1
 801a6f0:	ec51 0b19 	vmov	r0, r1, d9
 801a6f4:	f7e5 ffb0 	bl	8000658 <__aeabi_dmul>
 801a6f8:	4622      	mov	r2, r4
 801a6fa:	462b      	mov	r3, r5
 801a6fc:	f7e5 fdf6 	bl	80002ec <__adddf3>
 801a700:	460b      	mov	r3, r1
 801a702:	ec41 0b18 	vmov	d8, r0, r1
 801a706:	4602      	mov	r2, r0
 801a708:	4659      	mov	r1, fp
 801a70a:	4650      	mov	r0, sl
 801a70c:	f7e5 fdee 	bl	80002ec <__adddf3>
 801a710:	4b44      	ldr	r3, [pc, #272]	; (801a824 <__kernel_tan+0x39c>)
 801a712:	429f      	cmp	r7, r3
 801a714:	4604      	mov	r4, r0
 801a716:	460d      	mov	r5, r1
 801a718:	f340 8086 	ble.w	801a828 <__kernel_tan+0x3a0>
 801a71c:	4630      	mov	r0, r6
 801a71e:	f7e5 ff31 	bl	8000584 <__aeabi_i2d>
 801a722:	4622      	mov	r2, r4
 801a724:	4680      	mov	r8, r0
 801a726:	4689      	mov	r9, r1
 801a728:	462b      	mov	r3, r5
 801a72a:	4620      	mov	r0, r4
 801a72c:	4629      	mov	r1, r5
 801a72e:	f7e5 ff93 	bl	8000658 <__aeabi_dmul>
 801a732:	4642      	mov	r2, r8
 801a734:	4606      	mov	r6, r0
 801a736:	460f      	mov	r7, r1
 801a738:	464b      	mov	r3, r9
 801a73a:	4620      	mov	r0, r4
 801a73c:	4629      	mov	r1, r5
 801a73e:	f7e5 fdd5 	bl	80002ec <__adddf3>
 801a742:	4602      	mov	r2, r0
 801a744:	460b      	mov	r3, r1
 801a746:	4630      	mov	r0, r6
 801a748:	4639      	mov	r1, r7
 801a74a:	f7e6 f8af 	bl	80008ac <__aeabi_ddiv>
 801a74e:	ec53 2b18 	vmov	r2, r3, d8
 801a752:	f7e5 fdc9 	bl	80002e8 <__aeabi_dsub>
 801a756:	4602      	mov	r2, r0
 801a758:	460b      	mov	r3, r1
 801a75a:	4650      	mov	r0, sl
 801a75c:	4659      	mov	r1, fp
 801a75e:	f7e5 fdc3 	bl	80002e8 <__aeabi_dsub>
 801a762:	4602      	mov	r2, r0
 801a764:	460b      	mov	r3, r1
 801a766:	f7e5 fdc1 	bl	80002ec <__adddf3>
 801a76a:	4602      	mov	r2, r0
 801a76c:	460b      	mov	r3, r1
 801a76e:	4640      	mov	r0, r8
 801a770:	4649      	mov	r1, r9
 801a772:	f7e5 fdb9 	bl	80002e8 <__aeabi_dsub>
 801a776:	9b00      	ldr	r3, [sp, #0]
 801a778:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801a77c:	f00a 0a02 	and.w	sl, sl, #2
 801a780:	4604      	mov	r4, r0
 801a782:	f1ca 0001 	rsb	r0, sl, #1
 801a786:	460d      	mov	r5, r1
 801a788:	f7e5 fefc 	bl	8000584 <__aeabi_i2d>
 801a78c:	4602      	mov	r2, r0
 801a78e:	460b      	mov	r3, r1
 801a790:	4620      	mov	r0, r4
 801a792:	4629      	mov	r1, r5
 801a794:	f7e5 ff60 	bl	8000658 <__aeabi_dmul>
 801a798:	e69f      	b.n	801a4da <__kernel_tan+0x52>
 801a79a:	bf00      	nop
 801a79c:	f3af 8000 	nop.w
 801a7a0:	54442d18 	.word	0x54442d18
 801a7a4:	3fe921fb 	.word	0x3fe921fb
 801a7a8:	33145c07 	.word	0x33145c07
 801a7ac:	3c81a626 	.word	0x3c81a626
 801a7b0:	74bf7ad4 	.word	0x74bf7ad4
 801a7b4:	3efb2a70 	.word	0x3efb2a70
 801a7b8:	32f0a7e9 	.word	0x32f0a7e9
 801a7bc:	3f12b80f 	.word	0x3f12b80f
 801a7c0:	1a8d1068 	.word	0x1a8d1068
 801a7c4:	3f3026f7 	.word	0x3f3026f7
 801a7c8:	fee08315 	.word	0xfee08315
 801a7cc:	3f57dbc8 	.word	0x3f57dbc8
 801a7d0:	e96e8493 	.word	0xe96e8493
 801a7d4:	3f8226e3 	.word	0x3f8226e3
 801a7d8:	1bb341fe 	.word	0x1bb341fe
 801a7dc:	3faba1ba 	.word	0x3faba1ba
 801a7e0:	db605373 	.word	0xdb605373
 801a7e4:	bef375cb 	.word	0xbef375cb
 801a7e8:	a03792a6 	.word	0xa03792a6
 801a7ec:	3f147e88 	.word	0x3f147e88
 801a7f0:	f2f26501 	.word	0xf2f26501
 801a7f4:	3f4344d8 	.word	0x3f4344d8
 801a7f8:	c9560328 	.word	0xc9560328
 801a7fc:	3f6d6d22 	.word	0x3f6d6d22
 801a800:	8406d637 	.word	0x8406d637
 801a804:	3f9664f4 	.word	0x3f9664f4
 801a808:	1110fe7a 	.word	0x1110fe7a
 801a80c:	3fc11111 	.word	0x3fc11111
 801a810:	55555563 	.word	0x55555563
 801a814:	3fd55555 	.word	0x3fd55555
 801a818:	3e2fffff 	.word	0x3e2fffff
 801a81c:	3ff00000 	.word	0x3ff00000
 801a820:	bff00000 	.word	0xbff00000
 801a824:	3fe59427 	.word	0x3fe59427
 801a828:	2e01      	cmp	r6, #1
 801a82a:	d02f      	beq.n	801a88c <__kernel_tan+0x404>
 801a82c:	460f      	mov	r7, r1
 801a82e:	4602      	mov	r2, r0
 801a830:	460b      	mov	r3, r1
 801a832:	4689      	mov	r9, r1
 801a834:	2000      	movs	r0, #0
 801a836:	4917      	ldr	r1, [pc, #92]	; (801a894 <__kernel_tan+0x40c>)
 801a838:	f7e6 f838 	bl	80008ac <__aeabi_ddiv>
 801a83c:	2600      	movs	r6, #0
 801a83e:	e9cd 0100 	strd	r0, r1, [sp]
 801a842:	4652      	mov	r2, sl
 801a844:	465b      	mov	r3, fp
 801a846:	4630      	mov	r0, r6
 801a848:	4639      	mov	r1, r7
 801a84a:	f7e5 fd4d 	bl	80002e8 <__aeabi_dsub>
 801a84e:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a852:	4602      	mov	r2, r0
 801a854:	460b      	mov	r3, r1
 801a856:	ec51 0b18 	vmov	r0, r1, d8
 801a85a:	f7e5 fd45 	bl	80002e8 <__aeabi_dsub>
 801a85e:	4632      	mov	r2, r6
 801a860:	462b      	mov	r3, r5
 801a862:	f7e5 fef9 	bl	8000658 <__aeabi_dmul>
 801a866:	46b0      	mov	r8, r6
 801a868:	460f      	mov	r7, r1
 801a86a:	4642      	mov	r2, r8
 801a86c:	462b      	mov	r3, r5
 801a86e:	4634      	mov	r4, r6
 801a870:	4649      	mov	r1, r9
 801a872:	4606      	mov	r6, r0
 801a874:	4640      	mov	r0, r8
 801a876:	f7e5 feef 	bl	8000658 <__aeabi_dmul>
 801a87a:	4b07      	ldr	r3, [pc, #28]	; (801a898 <__kernel_tan+0x410>)
 801a87c:	2200      	movs	r2, #0
 801a87e:	f7e5 fd35 	bl	80002ec <__adddf3>
 801a882:	4602      	mov	r2, r0
 801a884:	460b      	mov	r3, r1
 801a886:	4630      	mov	r0, r6
 801a888:	4639      	mov	r1, r7
 801a88a:	e665      	b.n	801a558 <__kernel_tan+0xd0>
 801a88c:	4682      	mov	sl, r0
 801a88e:	468b      	mov	fp, r1
 801a890:	e625      	b.n	801a4de <__kernel_tan+0x56>
 801a892:	bf00      	nop
 801a894:	bff00000 	.word	0xbff00000
 801a898:	3ff00000 	.word	0x3ff00000
 801a89c:	00000000 	.word	0x00000000

0801a8a0 <__ieee754_pow>:
 801a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a4:	ed2d 8b06 	vpush	{d8-d10}
 801a8a8:	b089      	sub	sp, #36	; 0x24
 801a8aa:	ed8d 1b00 	vstr	d1, [sp]
 801a8ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a8b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a8b6:	ea58 0102 	orrs.w	r1, r8, r2
 801a8ba:	ec57 6b10 	vmov	r6, r7, d0
 801a8be:	d115      	bne.n	801a8ec <__ieee754_pow+0x4c>
 801a8c0:	19b3      	adds	r3, r6, r6
 801a8c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801a8c6:	4152      	adcs	r2, r2
 801a8c8:	4299      	cmp	r1, r3
 801a8ca:	4b89      	ldr	r3, [pc, #548]	; (801aaf0 <__ieee754_pow+0x250>)
 801a8cc:	4193      	sbcs	r3, r2
 801a8ce:	f080 84d1 	bcs.w	801b274 <__ieee754_pow+0x9d4>
 801a8d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	4639      	mov	r1, r7
 801a8da:	f7e5 fd07 	bl	80002ec <__adddf3>
 801a8de:	ec41 0b10 	vmov	d0, r0, r1
 801a8e2:	b009      	add	sp, #36	; 0x24
 801a8e4:	ecbd 8b06 	vpop	{d8-d10}
 801a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ec:	4b81      	ldr	r3, [pc, #516]	; (801aaf4 <__ieee754_pow+0x254>)
 801a8ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a8f2:	429c      	cmp	r4, r3
 801a8f4:	ee10 aa10 	vmov	sl, s0
 801a8f8:	463d      	mov	r5, r7
 801a8fa:	dc06      	bgt.n	801a90a <__ieee754_pow+0x6a>
 801a8fc:	d101      	bne.n	801a902 <__ieee754_pow+0x62>
 801a8fe:	2e00      	cmp	r6, #0
 801a900:	d1e7      	bne.n	801a8d2 <__ieee754_pow+0x32>
 801a902:	4598      	cmp	r8, r3
 801a904:	dc01      	bgt.n	801a90a <__ieee754_pow+0x6a>
 801a906:	d10f      	bne.n	801a928 <__ieee754_pow+0x88>
 801a908:	b172      	cbz	r2, 801a928 <__ieee754_pow+0x88>
 801a90a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801a90e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801a912:	ea55 050a 	orrs.w	r5, r5, sl
 801a916:	d1dc      	bne.n	801a8d2 <__ieee754_pow+0x32>
 801a918:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a91c:	18db      	adds	r3, r3, r3
 801a91e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801a922:	4152      	adcs	r2, r2
 801a924:	429d      	cmp	r5, r3
 801a926:	e7d0      	b.n	801a8ca <__ieee754_pow+0x2a>
 801a928:	2d00      	cmp	r5, #0
 801a92a:	da3b      	bge.n	801a9a4 <__ieee754_pow+0x104>
 801a92c:	4b72      	ldr	r3, [pc, #456]	; (801aaf8 <__ieee754_pow+0x258>)
 801a92e:	4598      	cmp	r8, r3
 801a930:	dc51      	bgt.n	801a9d6 <__ieee754_pow+0x136>
 801a932:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a936:	4598      	cmp	r8, r3
 801a938:	f340 84ab 	ble.w	801b292 <__ieee754_pow+0x9f2>
 801a93c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a944:	2b14      	cmp	r3, #20
 801a946:	dd0f      	ble.n	801a968 <__ieee754_pow+0xc8>
 801a948:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a94c:	fa22 f103 	lsr.w	r1, r2, r3
 801a950:	fa01 f303 	lsl.w	r3, r1, r3
 801a954:	4293      	cmp	r3, r2
 801a956:	f040 849c 	bne.w	801b292 <__ieee754_pow+0x9f2>
 801a95a:	f001 0101 	and.w	r1, r1, #1
 801a95e:	f1c1 0302 	rsb	r3, r1, #2
 801a962:	9304      	str	r3, [sp, #16]
 801a964:	b182      	cbz	r2, 801a988 <__ieee754_pow+0xe8>
 801a966:	e05f      	b.n	801aa28 <__ieee754_pow+0x188>
 801a968:	2a00      	cmp	r2, #0
 801a96a:	d15b      	bne.n	801aa24 <__ieee754_pow+0x184>
 801a96c:	f1c3 0314 	rsb	r3, r3, #20
 801a970:	fa48 f103 	asr.w	r1, r8, r3
 801a974:	fa01 f303 	lsl.w	r3, r1, r3
 801a978:	4543      	cmp	r3, r8
 801a97a:	f040 8487 	bne.w	801b28c <__ieee754_pow+0x9ec>
 801a97e:	f001 0101 	and.w	r1, r1, #1
 801a982:	f1c1 0302 	rsb	r3, r1, #2
 801a986:	9304      	str	r3, [sp, #16]
 801a988:	4b5c      	ldr	r3, [pc, #368]	; (801aafc <__ieee754_pow+0x25c>)
 801a98a:	4598      	cmp	r8, r3
 801a98c:	d132      	bne.n	801a9f4 <__ieee754_pow+0x154>
 801a98e:	f1b9 0f00 	cmp.w	r9, #0
 801a992:	f280 8477 	bge.w	801b284 <__ieee754_pow+0x9e4>
 801a996:	4959      	ldr	r1, [pc, #356]	; (801aafc <__ieee754_pow+0x25c>)
 801a998:	4632      	mov	r2, r6
 801a99a:	463b      	mov	r3, r7
 801a99c:	2000      	movs	r0, #0
 801a99e:	f7e5 ff85 	bl	80008ac <__aeabi_ddiv>
 801a9a2:	e79c      	b.n	801a8de <__ieee754_pow+0x3e>
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	9304      	str	r3, [sp, #16]
 801a9a8:	2a00      	cmp	r2, #0
 801a9aa:	d13d      	bne.n	801aa28 <__ieee754_pow+0x188>
 801a9ac:	4b51      	ldr	r3, [pc, #324]	; (801aaf4 <__ieee754_pow+0x254>)
 801a9ae:	4598      	cmp	r8, r3
 801a9b0:	d1ea      	bne.n	801a988 <__ieee754_pow+0xe8>
 801a9b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a9b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a9ba:	ea53 030a 	orrs.w	r3, r3, sl
 801a9be:	f000 8459 	beq.w	801b274 <__ieee754_pow+0x9d4>
 801a9c2:	4b4f      	ldr	r3, [pc, #316]	; (801ab00 <__ieee754_pow+0x260>)
 801a9c4:	429c      	cmp	r4, r3
 801a9c6:	dd08      	ble.n	801a9da <__ieee754_pow+0x13a>
 801a9c8:	f1b9 0f00 	cmp.w	r9, #0
 801a9cc:	f2c0 8456 	blt.w	801b27c <__ieee754_pow+0x9dc>
 801a9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9d4:	e783      	b.n	801a8de <__ieee754_pow+0x3e>
 801a9d6:	2302      	movs	r3, #2
 801a9d8:	e7e5      	b.n	801a9a6 <__ieee754_pow+0x106>
 801a9da:	f1b9 0f00 	cmp.w	r9, #0
 801a9de:	f04f 0000 	mov.w	r0, #0
 801a9e2:	f04f 0100 	mov.w	r1, #0
 801a9e6:	f6bf af7a 	bge.w	801a8de <__ieee754_pow+0x3e>
 801a9ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a9ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a9f2:	e774      	b.n	801a8de <__ieee754_pow+0x3e>
 801a9f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a9f8:	d106      	bne.n	801aa08 <__ieee754_pow+0x168>
 801a9fa:	4632      	mov	r2, r6
 801a9fc:	463b      	mov	r3, r7
 801a9fe:	4630      	mov	r0, r6
 801aa00:	4639      	mov	r1, r7
 801aa02:	f7e5 fe29 	bl	8000658 <__aeabi_dmul>
 801aa06:	e76a      	b.n	801a8de <__ieee754_pow+0x3e>
 801aa08:	4b3e      	ldr	r3, [pc, #248]	; (801ab04 <__ieee754_pow+0x264>)
 801aa0a:	4599      	cmp	r9, r3
 801aa0c:	d10c      	bne.n	801aa28 <__ieee754_pow+0x188>
 801aa0e:	2d00      	cmp	r5, #0
 801aa10:	db0a      	blt.n	801aa28 <__ieee754_pow+0x188>
 801aa12:	ec47 6b10 	vmov	d0, r6, r7
 801aa16:	b009      	add	sp, #36	; 0x24
 801aa18:	ecbd 8b06 	vpop	{d8-d10}
 801aa1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa20:	f7ff ba04 	b.w	8019e2c <__ieee754_sqrt>
 801aa24:	2300      	movs	r3, #0
 801aa26:	9304      	str	r3, [sp, #16]
 801aa28:	ec47 6b10 	vmov	d0, r6, r7
 801aa2c:	f000 fe6a 	bl	801b704 <fabs>
 801aa30:	ec51 0b10 	vmov	r0, r1, d0
 801aa34:	f1ba 0f00 	cmp.w	sl, #0
 801aa38:	d129      	bne.n	801aa8e <__ieee754_pow+0x1ee>
 801aa3a:	b124      	cbz	r4, 801aa46 <__ieee754_pow+0x1a6>
 801aa3c:	4b2f      	ldr	r3, [pc, #188]	; (801aafc <__ieee754_pow+0x25c>)
 801aa3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d123      	bne.n	801aa8e <__ieee754_pow+0x1ee>
 801aa46:	f1b9 0f00 	cmp.w	r9, #0
 801aa4a:	da05      	bge.n	801aa58 <__ieee754_pow+0x1b8>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	2000      	movs	r0, #0
 801aa52:	492a      	ldr	r1, [pc, #168]	; (801aafc <__ieee754_pow+0x25c>)
 801aa54:	f7e5 ff2a 	bl	80008ac <__aeabi_ddiv>
 801aa58:	2d00      	cmp	r5, #0
 801aa5a:	f6bf af40 	bge.w	801a8de <__ieee754_pow+0x3e>
 801aa5e:	9b04      	ldr	r3, [sp, #16]
 801aa60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801aa64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801aa68:	431c      	orrs	r4, r3
 801aa6a:	d108      	bne.n	801aa7e <__ieee754_pow+0x1de>
 801aa6c:	4602      	mov	r2, r0
 801aa6e:	460b      	mov	r3, r1
 801aa70:	4610      	mov	r0, r2
 801aa72:	4619      	mov	r1, r3
 801aa74:	f7e5 fc38 	bl	80002e8 <__aeabi_dsub>
 801aa78:	4602      	mov	r2, r0
 801aa7a:	460b      	mov	r3, r1
 801aa7c:	e78f      	b.n	801a99e <__ieee754_pow+0xfe>
 801aa7e:	9b04      	ldr	r3, [sp, #16]
 801aa80:	2b01      	cmp	r3, #1
 801aa82:	f47f af2c 	bne.w	801a8de <__ieee754_pow+0x3e>
 801aa86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa8a:	4619      	mov	r1, r3
 801aa8c:	e727      	b.n	801a8de <__ieee754_pow+0x3e>
 801aa8e:	0feb      	lsrs	r3, r5, #31
 801aa90:	3b01      	subs	r3, #1
 801aa92:	9306      	str	r3, [sp, #24]
 801aa94:	9a06      	ldr	r2, [sp, #24]
 801aa96:	9b04      	ldr	r3, [sp, #16]
 801aa98:	4313      	orrs	r3, r2
 801aa9a:	d102      	bne.n	801aaa2 <__ieee754_pow+0x202>
 801aa9c:	4632      	mov	r2, r6
 801aa9e:	463b      	mov	r3, r7
 801aaa0:	e7e6      	b.n	801aa70 <__ieee754_pow+0x1d0>
 801aaa2:	4b19      	ldr	r3, [pc, #100]	; (801ab08 <__ieee754_pow+0x268>)
 801aaa4:	4598      	cmp	r8, r3
 801aaa6:	f340 80fb 	ble.w	801aca0 <__ieee754_pow+0x400>
 801aaaa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801aaae:	4598      	cmp	r8, r3
 801aab0:	4b13      	ldr	r3, [pc, #76]	; (801ab00 <__ieee754_pow+0x260>)
 801aab2:	dd0c      	ble.n	801aace <__ieee754_pow+0x22e>
 801aab4:	429c      	cmp	r4, r3
 801aab6:	dc0f      	bgt.n	801aad8 <__ieee754_pow+0x238>
 801aab8:	f1b9 0f00 	cmp.w	r9, #0
 801aabc:	da0f      	bge.n	801aade <__ieee754_pow+0x23e>
 801aabe:	2000      	movs	r0, #0
 801aac0:	b009      	add	sp, #36	; 0x24
 801aac2:	ecbd 8b06 	vpop	{d8-d10}
 801aac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaca:	f001 babe 	b.w	801c04a <__math_oflow>
 801aace:	429c      	cmp	r4, r3
 801aad0:	dbf2      	blt.n	801aab8 <__ieee754_pow+0x218>
 801aad2:	4b0a      	ldr	r3, [pc, #40]	; (801aafc <__ieee754_pow+0x25c>)
 801aad4:	429c      	cmp	r4, r3
 801aad6:	dd19      	ble.n	801ab0c <__ieee754_pow+0x26c>
 801aad8:	f1b9 0f00 	cmp.w	r9, #0
 801aadc:	dcef      	bgt.n	801aabe <__ieee754_pow+0x21e>
 801aade:	2000      	movs	r0, #0
 801aae0:	b009      	add	sp, #36	; 0x24
 801aae2:	ecbd 8b06 	vpop	{d8-d10}
 801aae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaea:	f001 baa5 	b.w	801c038 <__math_uflow>
 801aaee:	bf00      	nop
 801aaf0:	fff00000 	.word	0xfff00000
 801aaf4:	7ff00000 	.word	0x7ff00000
 801aaf8:	433fffff 	.word	0x433fffff
 801aafc:	3ff00000 	.word	0x3ff00000
 801ab00:	3fefffff 	.word	0x3fefffff
 801ab04:	3fe00000 	.word	0x3fe00000
 801ab08:	41e00000 	.word	0x41e00000
 801ab0c:	4b60      	ldr	r3, [pc, #384]	; (801ac90 <__ieee754_pow+0x3f0>)
 801ab0e:	2200      	movs	r2, #0
 801ab10:	f7e5 fbea 	bl	80002e8 <__aeabi_dsub>
 801ab14:	a354      	add	r3, pc, #336	; (adr r3, 801ac68 <__ieee754_pow+0x3c8>)
 801ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab1a:	4604      	mov	r4, r0
 801ab1c:	460d      	mov	r5, r1
 801ab1e:	f7e5 fd9b 	bl	8000658 <__aeabi_dmul>
 801ab22:	a353      	add	r3, pc, #332	; (adr r3, 801ac70 <__ieee754_pow+0x3d0>)
 801ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab28:	4606      	mov	r6, r0
 801ab2a:	460f      	mov	r7, r1
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	4629      	mov	r1, r5
 801ab30:	f7e5 fd92 	bl	8000658 <__aeabi_dmul>
 801ab34:	4b57      	ldr	r3, [pc, #348]	; (801ac94 <__ieee754_pow+0x3f4>)
 801ab36:	4682      	mov	sl, r0
 801ab38:	468b      	mov	fp, r1
 801ab3a:	2200      	movs	r2, #0
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	4629      	mov	r1, r5
 801ab40:	f7e5 fd8a 	bl	8000658 <__aeabi_dmul>
 801ab44:	4602      	mov	r2, r0
 801ab46:	460b      	mov	r3, r1
 801ab48:	a14b      	add	r1, pc, #300	; (adr r1, 801ac78 <__ieee754_pow+0x3d8>)
 801ab4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab4e:	f7e5 fbcb 	bl	80002e8 <__aeabi_dsub>
 801ab52:	4622      	mov	r2, r4
 801ab54:	462b      	mov	r3, r5
 801ab56:	f7e5 fd7f 	bl	8000658 <__aeabi_dmul>
 801ab5a:	4602      	mov	r2, r0
 801ab5c:	460b      	mov	r3, r1
 801ab5e:	2000      	movs	r0, #0
 801ab60:	494d      	ldr	r1, [pc, #308]	; (801ac98 <__ieee754_pow+0x3f8>)
 801ab62:	f7e5 fbc1 	bl	80002e8 <__aeabi_dsub>
 801ab66:	4622      	mov	r2, r4
 801ab68:	4680      	mov	r8, r0
 801ab6a:	4689      	mov	r9, r1
 801ab6c:	462b      	mov	r3, r5
 801ab6e:	4620      	mov	r0, r4
 801ab70:	4629      	mov	r1, r5
 801ab72:	f7e5 fd71 	bl	8000658 <__aeabi_dmul>
 801ab76:	4602      	mov	r2, r0
 801ab78:	460b      	mov	r3, r1
 801ab7a:	4640      	mov	r0, r8
 801ab7c:	4649      	mov	r1, r9
 801ab7e:	f7e5 fd6b 	bl	8000658 <__aeabi_dmul>
 801ab82:	a33f      	add	r3, pc, #252	; (adr r3, 801ac80 <__ieee754_pow+0x3e0>)
 801ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab88:	f7e5 fd66 	bl	8000658 <__aeabi_dmul>
 801ab8c:	4602      	mov	r2, r0
 801ab8e:	460b      	mov	r3, r1
 801ab90:	4650      	mov	r0, sl
 801ab92:	4659      	mov	r1, fp
 801ab94:	f7e5 fba8 	bl	80002e8 <__aeabi_dsub>
 801ab98:	4602      	mov	r2, r0
 801ab9a:	460b      	mov	r3, r1
 801ab9c:	4680      	mov	r8, r0
 801ab9e:	4689      	mov	r9, r1
 801aba0:	4630      	mov	r0, r6
 801aba2:	4639      	mov	r1, r7
 801aba4:	f7e5 fba2 	bl	80002ec <__adddf3>
 801aba8:	2000      	movs	r0, #0
 801abaa:	4632      	mov	r2, r6
 801abac:	463b      	mov	r3, r7
 801abae:	4604      	mov	r4, r0
 801abb0:	460d      	mov	r5, r1
 801abb2:	f7e5 fb99 	bl	80002e8 <__aeabi_dsub>
 801abb6:	4602      	mov	r2, r0
 801abb8:	460b      	mov	r3, r1
 801abba:	4640      	mov	r0, r8
 801abbc:	4649      	mov	r1, r9
 801abbe:	f7e5 fb93 	bl	80002e8 <__aeabi_dsub>
 801abc2:	9b04      	ldr	r3, [sp, #16]
 801abc4:	9a06      	ldr	r2, [sp, #24]
 801abc6:	3b01      	subs	r3, #1
 801abc8:	4313      	orrs	r3, r2
 801abca:	4682      	mov	sl, r0
 801abcc:	468b      	mov	fp, r1
 801abce:	f040 81e7 	bne.w	801afa0 <__ieee754_pow+0x700>
 801abd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801ac88 <__ieee754_pow+0x3e8>
 801abd6:	eeb0 8a47 	vmov.f32	s16, s14
 801abda:	eef0 8a67 	vmov.f32	s17, s15
 801abde:	e9dd 6700 	ldrd	r6, r7, [sp]
 801abe2:	2600      	movs	r6, #0
 801abe4:	4632      	mov	r2, r6
 801abe6:	463b      	mov	r3, r7
 801abe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abec:	f7e5 fb7c 	bl	80002e8 <__aeabi_dsub>
 801abf0:	4622      	mov	r2, r4
 801abf2:	462b      	mov	r3, r5
 801abf4:	f7e5 fd30 	bl	8000658 <__aeabi_dmul>
 801abf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801abfc:	4680      	mov	r8, r0
 801abfe:	4689      	mov	r9, r1
 801ac00:	4650      	mov	r0, sl
 801ac02:	4659      	mov	r1, fp
 801ac04:	f7e5 fd28 	bl	8000658 <__aeabi_dmul>
 801ac08:	4602      	mov	r2, r0
 801ac0a:	460b      	mov	r3, r1
 801ac0c:	4640      	mov	r0, r8
 801ac0e:	4649      	mov	r1, r9
 801ac10:	f7e5 fb6c 	bl	80002ec <__adddf3>
 801ac14:	4632      	mov	r2, r6
 801ac16:	463b      	mov	r3, r7
 801ac18:	4680      	mov	r8, r0
 801ac1a:	4689      	mov	r9, r1
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	4629      	mov	r1, r5
 801ac20:	f7e5 fd1a 	bl	8000658 <__aeabi_dmul>
 801ac24:	460b      	mov	r3, r1
 801ac26:	4604      	mov	r4, r0
 801ac28:	460d      	mov	r5, r1
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	4649      	mov	r1, r9
 801ac2e:	4640      	mov	r0, r8
 801ac30:	f7e5 fb5c 	bl	80002ec <__adddf3>
 801ac34:	4b19      	ldr	r3, [pc, #100]	; (801ac9c <__ieee754_pow+0x3fc>)
 801ac36:	4299      	cmp	r1, r3
 801ac38:	ec45 4b19 	vmov	d9, r4, r5
 801ac3c:	4606      	mov	r6, r0
 801ac3e:	460f      	mov	r7, r1
 801ac40:	468b      	mov	fp, r1
 801ac42:	f340 82f0 	ble.w	801b226 <__ieee754_pow+0x986>
 801ac46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ac4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ac4e:	4303      	orrs	r3, r0
 801ac50:	f000 81e4 	beq.w	801b01c <__ieee754_pow+0x77c>
 801ac54:	ec51 0b18 	vmov	r0, r1, d8
 801ac58:	2200      	movs	r2, #0
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	f7e5 ff6e 	bl	8000b3c <__aeabi_dcmplt>
 801ac60:	3800      	subs	r0, #0
 801ac62:	bf18      	it	ne
 801ac64:	2001      	movne	r0, #1
 801ac66:	e72b      	b.n	801aac0 <__ieee754_pow+0x220>
 801ac68:	60000000 	.word	0x60000000
 801ac6c:	3ff71547 	.word	0x3ff71547
 801ac70:	f85ddf44 	.word	0xf85ddf44
 801ac74:	3e54ae0b 	.word	0x3e54ae0b
 801ac78:	55555555 	.word	0x55555555
 801ac7c:	3fd55555 	.word	0x3fd55555
 801ac80:	652b82fe 	.word	0x652b82fe
 801ac84:	3ff71547 	.word	0x3ff71547
 801ac88:	00000000 	.word	0x00000000
 801ac8c:	bff00000 	.word	0xbff00000
 801ac90:	3ff00000 	.word	0x3ff00000
 801ac94:	3fd00000 	.word	0x3fd00000
 801ac98:	3fe00000 	.word	0x3fe00000
 801ac9c:	408fffff 	.word	0x408fffff
 801aca0:	4bd5      	ldr	r3, [pc, #852]	; (801aff8 <__ieee754_pow+0x758>)
 801aca2:	402b      	ands	r3, r5
 801aca4:	2200      	movs	r2, #0
 801aca6:	b92b      	cbnz	r3, 801acb4 <__ieee754_pow+0x414>
 801aca8:	4bd4      	ldr	r3, [pc, #848]	; (801affc <__ieee754_pow+0x75c>)
 801acaa:	f7e5 fcd5 	bl	8000658 <__aeabi_dmul>
 801acae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801acb2:	460c      	mov	r4, r1
 801acb4:	1523      	asrs	r3, r4, #20
 801acb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801acba:	4413      	add	r3, r2
 801acbc:	9305      	str	r3, [sp, #20]
 801acbe:	4bd0      	ldr	r3, [pc, #832]	; (801b000 <__ieee754_pow+0x760>)
 801acc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801acc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801acc8:	429c      	cmp	r4, r3
 801acca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801acce:	dd08      	ble.n	801ace2 <__ieee754_pow+0x442>
 801acd0:	4bcc      	ldr	r3, [pc, #816]	; (801b004 <__ieee754_pow+0x764>)
 801acd2:	429c      	cmp	r4, r3
 801acd4:	f340 8162 	ble.w	801af9c <__ieee754_pow+0x6fc>
 801acd8:	9b05      	ldr	r3, [sp, #20]
 801acda:	3301      	adds	r3, #1
 801acdc:	9305      	str	r3, [sp, #20]
 801acde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ace2:	2400      	movs	r4, #0
 801ace4:	00e3      	lsls	r3, r4, #3
 801ace6:	9307      	str	r3, [sp, #28]
 801ace8:	4bc7      	ldr	r3, [pc, #796]	; (801b008 <__ieee754_pow+0x768>)
 801acea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801acee:	ed93 7b00 	vldr	d7, [r3]
 801acf2:	4629      	mov	r1, r5
 801acf4:	ec53 2b17 	vmov	r2, r3, d7
 801acf8:	eeb0 9a47 	vmov.f32	s18, s14
 801acfc:	eef0 9a67 	vmov.f32	s19, s15
 801ad00:	4682      	mov	sl, r0
 801ad02:	f7e5 faf1 	bl	80002e8 <__aeabi_dsub>
 801ad06:	4652      	mov	r2, sl
 801ad08:	4606      	mov	r6, r0
 801ad0a:	460f      	mov	r7, r1
 801ad0c:	462b      	mov	r3, r5
 801ad0e:	ec51 0b19 	vmov	r0, r1, d9
 801ad12:	f7e5 faeb 	bl	80002ec <__adddf3>
 801ad16:	4602      	mov	r2, r0
 801ad18:	460b      	mov	r3, r1
 801ad1a:	2000      	movs	r0, #0
 801ad1c:	49bb      	ldr	r1, [pc, #748]	; (801b00c <__ieee754_pow+0x76c>)
 801ad1e:	f7e5 fdc5 	bl	80008ac <__aeabi_ddiv>
 801ad22:	ec41 0b1a 	vmov	d10, r0, r1
 801ad26:	4602      	mov	r2, r0
 801ad28:	460b      	mov	r3, r1
 801ad2a:	4630      	mov	r0, r6
 801ad2c:	4639      	mov	r1, r7
 801ad2e:	f7e5 fc93 	bl	8000658 <__aeabi_dmul>
 801ad32:	2300      	movs	r3, #0
 801ad34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ad38:	9302      	str	r3, [sp, #8]
 801ad3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ad3e:	46ab      	mov	fp, r5
 801ad40:	106d      	asrs	r5, r5, #1
 801ad42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ad46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ad4a:	ec41 0b18 	vmov	d8, r0, r1
 801ad4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801ad52:	2200      	movs	r2, #0
 801ad54:	4640      	mov	r0, r8
 801ad56:	4649      	mov	r1, r9
 801ad58:	4614      	mov	r4, r2
 801ad5a:	461d      	mov	r5, r3
 801ad5c:	f7e5 fc7c 	bl	8000658 <__aeabi_dmul>
 801ad60:	4602      	mov	r2, r0
 801ad62:	460b      	mov	r3, r1
 801ad64:	4630      	mov	r0, r6
 801ad66:	4639      	mov	r1, r7
 801ad68:	f7e5 fabe 	bl	80002e8 <__aeabi_dsub>
 801ad6c:	ec53 2b19 	vmov	r2, r3, d9
 801ad70:	4606      	mov	r6, r0
 801ad72:	460f      	mov	r7, r1
 801ad74:	4620      	mov	r0, r4
 801ad76:	4629      	mov	r1, r5
 801ad78:	f7e5 fab6 	bl	80002e8 <__aeabi_dsub>
 801ad7c:	4602      	mov	r2, r0
 801ad7e:	460b      	mov	r3, r1
 801ad80:	4650      	mov	r0, sl
 801ad82:	4659      	mov	r1, fp
 801ad84:	f7e5 fab0 	bl	80002e8 <__aeabi_dsub>
 801ad88:	4642      	mov	r2, r8
 801ad8a:	464b      	mov	r3, r9
 801ad8c:	f7e5 fc64 	bl	8000658 <__aeabi_dmul>
 801ad90:	4602      	mov	r2, r0
 801ad92:	460b      	mov	r3, r1
 801ad94:	4630      	mov	r0, r6
 801ad96:	4639      	mov	r1, r7
 801ad98:	f7e5 faa6 	bl	80002e8 <__aeabi_dsub>
 801ad9c:	ec53 2b1a 	vmov	r2, r3, d10
 801ada0:	f7e5 fc5a 	bl	8000658 <__aeabi_dmul>
 801ada4:	ec53 2b18 	vmov	r2, r3, d8
 801ada8:	ec41 0b19 	vmov	d9, r0, r1
 801adac:	ec51 0b18 	vmov	r0, r1, d8
 801adb0:	f7e5 fc52 	bl	8000658 <__aeabi_dmul>
 801adb4:	a37c      	add	r3, pc, #496	; (adr r3, 801afa8 <__ieee754_pow+0x708>)
 801adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adba:	4604      	mov	r4, r0
 801adbc:	460d      	mov	r5, r1
 801adbe:	f7e5 fc4b 	bl	8000658 <__aeabi_dmul>
 801adc2:	a37b      	add	r3, pc, #492	; (adr r3, 801afb0 <__ieee754_pow+0x710>)
 801adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adc8:	f7e5 fa90 	bl	80002ec <__adddf3>
 801adcc:	4622      	mov	r2, r4
 801adce:	462b      	mov	r3, r5
 801add0:	f7e5 fc42 	bl	8000658 <__aeabi_dmul>
 801add4:	a378      	add	r3, pc, #480	; (adr r3, 801afb8 <__ieee754_pow+0x718>)
 801add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adda:	f7e5 fa87 	bl	80002ec <__adddf3>
 801adde:	4622      	mov	r2, r4
 801ade0:	462b      	mov	r3, r5
 801ade2:	f7e5 fc39 	bl	8000658 <__aeabi_dmul>
 801ade6:	a376      	add	r3, pc, #472	; (adr r3, 801afc0 <__ieee754_pow+0x720>)
 801ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adec:	f7e5 fa7e 	bl	80002ec <__adddf3>
 801adf0:	4622      	mov	r2, r4
 801adf2:	462b      	mov	r3, r5
 801adf4:	f7e5 fc30 	bl	8000658 <__aeabi_dmul>
 801adf8:	a373      	add	r3, pc, #460	; (adr r3, 801afc8 <__ieee754_pow+0x728>)
 801adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adfe:	f7e5 fa75 	bl	80002ec <__adddf3>
 801ae02:	4622      	mov	r2, r4
 801ae04:	462b      	mov	r3, r5
 801ae06:	f7e5 fc27 	bl	8000658 <__aeabi_dmul>
 801ae0a:	a371      	add	r3, pc, #452	; (adr r3, 801afd0 <__ieee754_pow+0x730>)
 801ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae10:	f7e5 fa6c 	bl	80002ec <__adddf3>
 801ae14:	4622      	mov	r2, r4
 801ae16:	4606      	mov	r6, r0
 801ae18:	460f      	mov	r7, r1
 801ae1a:	462b      	mov	r3, r5
 801ae1c:	4620      	mov	r0, r4
 801ae1e:	4629      	mov	r1, r5
 801ae20:	f7e5 fc1a 	bl	8000658 <__aeabi_dmul>
 801ae24:	4602      	mov	r2, r0
 801ae26:	460b      	mov	r3, r1
 801ae28:	4630      	mov	r0, r6
 801ae2a:	4639      	mov	r1, r7
 801ae2c:	f7e5 fc14 	bl	8000658 <__aeabi_dmul>
 801ae30:	4642      	mov	r2, r8
 801ae32:	4604      	mov	r4, r0
 801ae34:	460d      	mov	r5, r1
 801ae36:	464b      	mov	r3, r9
 801ae38:	ec51 0b18 	vmov	r0, r1, d8
 801ae3c:	f7e5 fa56 	bl	80002ec <__adddf3>
 801ae40:	ec53 2b19 	vmov	r2, r3, d9
 801ae44:	f7e5 fc08 	bl	8000658 <__aeabi_dmul>
 801ae48:	4622      	mov	r2, r4
 801ae4a:	462b      	mov	r3, r5
 801ae4c:	f7e5 fa4e 	bl	80002ec <__adddf3>
 801ae50:	4642      	mov	r2, r8
 801ae52:	4682      	mov	sl, r0
 801ae54:	468b      	mov	fp, r1
 801ae56:	464b      	mov	r3, r9
 801ae58:	4640      	mov	r0, r8
 801ae5a:	4649      	mov	r1, r9
 801ae5c:	f7e5 fbfc 	bl	8000658 <__aeabi_dmul>
 801ae60:	4b6b      	ldr	r3, [pc, #428]	; (801b010 <__ieee754_pow+0x770>)
 801ae62:	2200      	movs	r2, #0
 801ae64:	4606      	mov	r6, r0
 801ae66:	460f      	mov	r7, r1
 801ae68:	f7e5 fa40 	bl	80002ec <__adddf3>
 801ae6c:	4652      	mov	r2, sl
 801ae6e:	465b      	mov	r3, fp
 801ae70:	f7e5 fa3c 	bl	80002ec <__adddf3>
 801ae74:	2000      	movs	r0, #0
 801ae76:	4604      	mov	r4, r0
 801ae78:	460d      	mov	r5, r1
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	460b      	mov	r3, r1
 801ae7e:	4640      	mov	r0, r8
 801ae80:	4649      	mov	r1, r9
 801ae82:	f7e5 fbe9 	bl	8000658 <__aeabi_dmul>
 801ae86:	4b62      	ldr	r3, [pc, #392]	; (801b010 <__ieee754_pow+0x770>)
 801ae88:	4680      	mov	r8, r0
 801ae8a:	4689      	mov	r9, r1
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	4620      	mov	r0, r4
 801ae90:	4629      	mov	r1, r5
 801ae92:	f7e5 fa29 	bl	80002e8 <__aeabi_dsub>
 801ae96:	4632      	mov	r2, r6
 801ae98:	463b      	mov	r3, r7
 801ae9a:	f7e5 fa25 	bl	80002e8 <__aeabi_dsub>
 801ae9e:	4602      	mov	r2, r0
 801aea0:	460b      	mov	r3, r1
 801aea2:	4650      	mov	r0, sl
 801aea4:	4659      	mov	r1, fp
 801aea6:	f7e5 fa1f 	bl	80002e8 <__aeabi_dsub>
 801aeaa:	ec53 2b18 	vmov	r2, r3, d8
 801aeae:	f7e5 fbd3 	bl	8000658 <__aeabi_dmul>
 801aeb2:	4622      	mov	r2, r4
 801aeb4:	4606      	mov	r6, r0
 801aeb6:	460f      	mov	r7, r1
 801aeb8:	462b      	mov	r3, r5
 801aeba:	ec51 0b19 	vmov	r0, r1, d9
 801aebe:	f7e5 fbcb 	bl	8000658 <__aeabi_dmul>
 801aec2:	4602      	mov	r2, r0
 801aec4:	460b      	mov	r3, r1
 801aec6:	4630      	mov	r0, r6
 801aec8:	4639      	mov	r1, r7
 801aeca:	f7e5 fa0f 	bl	80002ec <__adddf3>
 801aece:	4606      	mov	r6, r0
 801aed0:	460f      	mov	r7, r1
 801aed2:	4602      	mov	r2, r0
 801aed4:	460b      	mov	r3, r1
 801aed6:	4640      	mov	r0, r8
 801aed8:	4649      	mov	r1, r9
 801aeda:	f7e5 fa07 	bl	80002ec <__adddf3>
 801aede:	a33e      	add	r3, pc, #248	; (adr r3, 801afd8 <__ieee754_pow+0x738>)
 801aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aee4:	2000      	movs	r0, #0
 801aee6:	4604      	mov	r4, r0
 801aee8:	460d      	mov	r5, r1
 801aeea:	f7e5 fbb5 	bl	8000658 <__aeabi_dmul>
 801aeee:	4642      	mov	r2, r8
 801aef0:	ec41 0b18 	vmov	d8, r0, r1
 801aef4:	464b      	mov	r3, r9
 801aef6:	4620      	mov	r0, r4
 801aef8:	4629      	mov	r1, r5
 801aefa:	f7e5 f9f5 	bl	80002e8 <__aeabi_dsub>
 801aefe:	4602      	mov	r2, r0
 801af00:	460b      	mov	r3, r1
 801af02:	4630      	mov	r0, r6
 801af04:	4639      	mov	r1, r7
 801af06:	f7e5 f9ef 	bl	80002e8 <__aeabi_dsub>
 801af0a:	a335      	add	r3, pc, #212	; (adr r3, 801afe0 <__ieee754_pow+0x740>)
 801af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af10:	f7e5 fba2 	bl	8000658 <__aeabi_dmul>
 801af14:	a334      	add	r3, pc, #208	; (adr r3, 801afe8 <__ieee754_pow+0x748>)
 801af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1a:	4606      	mov	r6, r0
 801af1c:	460f      	mov	r7, r1
 801af1e:	4620      	mov	r0, r4
 801af20:	4629      	mov	r1, r5
 801af22:	f7e5 fb99 	bl	8000658 <__aeabi_dmul>
 801af26:	4602      	mov	r2, r0
 801af28:	460b      	mov	r3, r1
 801af2a:	4630      	mov	r0, r6
 801af2c:	4639      	mov	r1, r7
 801af2e:	f7e5 f9dd 	bl	80002ec <__adddf3>
 801af32:	9a07      	ldr	r2, [sp, #28]
 801af34:	4b37      	ldr	r3, [pc, #220]	; (801b014 <__ieee754_pow+0x774>)
 801af36:	4413      	add	r3, r2
 801af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3c:	f7e5 f9d6 	bl	80002ec <__adddf3>
 801af40:	4682      	mov	sl, r0
 801af42:	9805      	ldr	r0, [sp, #20]
 801af44:	468b      	mov	fp, r1
 801af46:	f7e5 fb1d 	bl	8000584 <__aeabi_i2d>
 801af4a:	9a07      	ldr	r2, [sp, #28]
 801af4c:	4b32      	ldr	r3, [pc, #200]	; (801b018 <__ieee754_pow+0x778>)
 801af4e:	4413      	add	r3, r2
 801af50:	e9d3 8900 	ldrd	r8, r9, [r3]
 801af54:	4606      	mov	r6, r0
 801af56:	460f      	mov	r7, r1
 801af58:	4652      	mov	r2, sl
 801af5a:	465b      	mov	r3, fp
 801af5c:	ec51 0b18 	vmov	r0, r1, d8
 801af60:	f7e5 f9c4 	bl	80002ec <__adddf3>
 801af64:	4642      	mov	r2, r8
 801af66:	464b      	mov	r3, r9
 801af68:	f7e5 f9c0 	bl	80002ec <__adddf3>
 801af6c:	4632      	mov	r2, r6
 801af6e:	463b      	mov	r3, r7
 801af70:	f7e5 f9bc 	bl	80002ec <__adddf3>
 801af74:	2000      	movs	r0, #0
 801af76:	4632      	mov	r2, r6
 801af78:	463b      	mov	r3, r7
 801af7a:	4604      	mov	r4, r0
 801af7c:	460d      	mov	r5, r1
 801af7e:	f7e5 f9b3 	bl	80002e8 <__aeabi_dsub>
 801af82:	4642      	mov	r2, r8
 801af84:	464b      	mov	r3, r9
 801af86:	f7e5 f9af 	bl	80002e8 <__aeabi_dsub>
 801af8a:	ec53 2b18 	vmov	r2, r3, d8
 801af8e:	f7e5 f9ab 	bl	80002e8 <__aeabi_dsub>
 801af92:	4602      	mov	r2, r0
 801af94:	460b      	mov	r3, r1
 801af96:	4650      	mov	r0, sl
 801af98:	4659      	mov	r1, fp
 801af9a:	e610      	b.n	801abbe <__ieee754_pow+0x31e>
 801af9c:	2401      	movs	r4, #1
 801af9e:	e6a1      	b.n	801ace4 <__ieee754_pow+0x444>
 801afa0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801aff0 <__ieee754_pow+0x750>
 801afa4:	e617      	b.n	801abd6 <__ieee754_pow+0x336>
 801afa6:	bf00      	nop
 801afa8:	4a454eef 	.word	0x4a454eef
 801afac:	3fca7e28 	.word	0x3fca7e28
 801afb0:	93c9db65 	.word	0x93c9db65
 801afb4:	3fcd864a 	.word	0x3fcd864a
 801afb8:	a91d4101 	.word	0xa91d4101
 801afbc:	3fd17460 	.word	0x3fd17460
 801afc0:	518f264d 	.word	0x518f264d
 801afc4:	3fd55555 	.word	0x3fd55555
 801afc8:	db6fabff 	.word	0xdb6fabff
 801afcc:	3fdb6db6 	.word	0x3fdb6db6
 801afd0:	33333303 	.word	0x33333303
 801afd4:	3fe33333 	.word	0x3fe33333
 801afd8:	e0000000 	.word	0xe0000000
 801afdc:	3feec709 	.word	0x3feec709
 801afe0:	dc3a03fd 	.word	0xdc3a03fd
 801afe4:	3feec709 	.word	0x3feec709
 801afe8:	145b01f5 	.word	0x145b01f5
 801afec:	be3e2fe0 	.word	0xbe3e2fe0
 801aff0:	00000000 	.word	0x00000000
 801aff4:	3ff00000 	.word	0x3ff00000
 801aff8:	7ff00000 	.word	0x7ff00000
 801affc:	43400000 	.word	0x43400000
 801b000:	0003988e 	.word	0x0003988e
 801b004:	000bb679 	.word	0x000bb679
 801b008:	080287e0 	.word	0x080287e0
 801b00c:	3ff00000 	.word	0x3ff00000
 801b010:	40080000 	.word	0x40080000
 801b014:	08028800 	.word	0x08028800
 801b018:	080287f0 	.word	0x080287f0
 801b01c:	a3b3      	add	r3, pc, #716	; (adr r3, 801b2ec <__ieee754_pow+0xa4c>)
 801b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b022:	4640      	mov	r0, r8
 801b024:	4649      	mov	r1, r9
 801b026:	f7e5 f961 	bl	80002ec <__adddf3>
 801b02a:	4622      	mov	r2, r4
 801b02c:	ec41 0b1a 	vmov	d10, r0, r1
 801b030:	462b      	mov	r3, r5
 801b032:	4630      	mov	r0, r6
 801b034:	4639      	mov	r1, r7
 801b036:	f7e5 f957 	bl	80002e8 <__aeabi_dsub>
 801b03a:	4602      	mov	r2, r0
 801b03c:	460b      	mov	r3, r1
 801b03e:	ec51 0b1a 	vmov	r0, r1, d10
 801b042:	f7e5 fd99 	bl	8000b78 <__aeabi_dcmpgt>
 801b046:	2800      	cmp	r0, #0
 801b048:	f47f ae04 	bne.w	801ac54 <__ieee754_pow+0x3b4>
 801b04c:	4aa2      	ldr	r2, [pc, #648]	; (801b2d8 <__ieee754_pow+0xa38>)
 801b04e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b052:	4293      	cmp	r3, r2
 801b054:	f340 8107 	ble.w	801b266 <__ieee754_pow+0x9c6>
 801b058:	151b      	asrs	r3, r3, #20
 801b05a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b05e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b062:	fa4a fa03 	asr.w	sl, sl, r3
 801b066:	44da      	add	sl, fp
 801b068:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b06c:	489b      	ldr	r0, [pc, #620]	; (801b2dc <__ieee754_pow+0xa3c>)
 801b06e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b072:	4108      	asrs	r0, r1
 801b074:	ea00 030a 	and.w	r3, r0, sl
 801b078:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b07c:	f1c1 0114 	rsb	r1, r1, #20
 801b080:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b084:	fa4a fa01 	asr.w	sl, sl, r1
 801b088:	f1bb 0f00 	cmp.w	fp, #0
 801b08c:	f04f 0200 	mov.w	r2, #0
 801b090:	4620      	mov	r0, r4
 801b092:	4629      	mov	r1, r5
 801b094:	bfb8      	it	lt
 801b096:	f1ca 0a00 	rsblt	sl, sl, #0
 801b09a:	f7e5 f925 	bl	80002e8 <__aeabi_dsub>
 801b09e:	ec41 0b19 	vmov	d9, r0, r1
 801b0a2:	4642      	mov	r2, r8
 801b0a4:	464b      	mov	r3, r9
 801b0a6:	ec51 0b19 	vmov	r0, r1, d9
 801b0aa:	f7e5 f91f 	bl	80002ec <__adddf3>
 801b0ae:	a37a      	add	r3, pc, #488	; (adr r3, 801b298 <__ieee754_pow+0x9f8>)
 801b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0b4:	2000      	movs	r0, #0
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	460d      	mov	r5, r1
 801b0ba:	f7e5 facd 	bl	8000658 <__aeabi_dmul>
 801b0be:	ec53 2b19 	vmov	r2, r3, d9
 801b0c2:	4606      	mov	r6, r0
 801b0c4:	460f      	mov	r7, r1
 801b0c6:	4620      	mov	r0, r4
 801b0c8:	4629      	mov	r1, r5
 801b0ca:	f7e5 f90d 	bl	80002e8 <__aeabi_dsub>
 801b0ce:	4602      	mov	r2, r0
 801b0d0:	460b      	mov	r3, r1
 801b0d2:	4640      	mov	r0, r8
 801b0d4:	4649      	mov	r1, r9
 801b0d6:	f7e5 f907 	bl	80002e8 <__aeabi_dsub>
 801b0da:	a371      	add	r3, pc, #452	; (adr r3, 801b2a0 <__ieee754_pow+0xa00>)
 801b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e0:	f7e5 faba 	bl	8000658 <__aeabi_dmul>
 801b0e4:	a370      	add	r3, pc, #448	; (adr r3, 801b2a8 <__ieee754_pow+0xa08>)
 801b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ea:	4680      	mov	r8, r0
 801b0ec:	4689      	mov	r9, r1
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	f7e5 fab1 	bl	8000658 <__aeabi_dmul>
 801b0f6:	4602      	mov	r2, r0
 801b0f8:	460b      	mov	r3, r1
 801b0fa:	4640      	mov	r0, r8
 801b0fc:	4649      	mov	r1, r9
 801b0fe:	f7e5 f8f5 	bl	80002ec <__adddf3>
 801b102:	4604      	mov	r4, r0
 801b104:	460d      	mov	r5, r1
 801b106:	4602      	mov	r2, r0
 801b108:	460b      	mov	r3, r1
 801b10a:	4630      	mov	r0, r6
 801b10c:	4639      	mov	r1, r7
 801b10e:	f7e5 f8ed 	bl	80002ec <__adddf3>
 801b112:	4632      	mov	r2, r6
 801b114:	463b      	mov	r3, r7
 801b116:	4680      	mov	r8, r0
 801b118:	4689      	mov	r9, r1
 801b11a:	f7e5 f8e5 	bl	80002e8 <__aeabi_dsub>
 801b11e:	4602      	mov	r2, r0
 801b120:	460b      	mov	r3, r1
 801b122:	4620      	mov	r0, r4
 801b124:	4629      	mov	r1, r5
 801b126:	f7e5 f8df 	bl	80002e8 <__aeabi_dsub>
 801b12a:	4642      	mov	r2, r8
 801b12c:	4606      	mov	r6, r0
 801b12e:	460f      	mov	r7, r1
 801b130:	464b      	mov	r3, r9
 801b132:	4640      	mov	r0, r8
 801b134:	4649      	mov	r1, r9
 801b136:	f7e5 fa8f 	bl	8000658 <__aeabi_dmul>
 801b13a:	a35d      	add	r3, pc, #372	; (adr r3, 801b2b0 <__ieee754_pow+0xa10>)
 801b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b140:	4604      	mov	r4, r0
 801b142:	460d      	mov	r5, r1
 801b144:	f7e5 fa88 	bl	8000658 <__aeabi_dmul>
 801b148:	a35b      	add	r3, pc, #364	; (adr r3, 801b2b8 <__ieee754_pow+0xa18>)
 801b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14e:	f7e5 f8cb 	bl	80002e8 <__aeabi_dsub>
 801b152:	4622      	mov	r2, r4
 801b154:	462b      	mov	r3, r5
 801b156:	f7e5 fa7f 	bl	8000658 <__aeabi_dmul>
 801b15a:	a359      	add	r3, pc, #356	; (adr r3, 801b2c0 <__ieee754_pow+0xa20>)
 801b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b160:	f7e5 f8c4 	bl	80002ec <__adddf3>
 801b164:	4622      	mov	r2, r4
 801b166:	462b      	mov	r3, r5
 801b168:	f7e5 fa76 	bl	8000658 <__aeabi_dmul>
 801b16c:	a356      	add	r3, pc, #344	; (adr r3, 801b2c8 <__ieee754_pow+0xa28>)
 801b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b172:	f7e5 f8b9 	bl	80002e8 <__aeabi_dsub>
 801b176:	4622      	mov	r2, r4
 801b178:	462b      	mov	r3, r5
 801b17a:	f7e5 fa6d 	bl	8000658 <__aeabi_dmul>
 801b17e:	a354      	add	r3, pc, #336	; (adr r3, 801b2d0 <__ieee754_pow+0xa30>)
 801b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b184:	f7e5 f8b2 	bl	80002ec <__adddf3>
 801b188:	4622      	mov	r2, r4
 801b18a:	462b      	mov	r3, r5
 801b18c:	f7e5 fa64 	bl	8000658 <__aeabi_dmul>
 801b190:	4602      	mov	r2, r0
 801b192:	460b      	mov	r3, r1
 801b194:	4640      	mov	r0, r8
 801b196:	4649      	mov	r1, r9
 801b198:	f7e5 f8a6 	bl	80002e8 <__aeabi_dsub>
 801b19c:	4604      	mov	r4, r0
 801b19e:	460d      	mov	r5, r1
 801b1a0:	4602      	mov	r2, r0
 801b1a2:	460b      	mov	r3, r1
 801b1a4:	4640      	mov	r0, r8
 801b1a6:	4649      	mov	r1, r9
 801b1a8:	f7e5 fa56 	bl	8000658 <__aeabi_dmul>
 801b1ac:	2200      	movs	r2, #0
 801b1ae:	ec41 0b19 	vmov	d9, r0, r1
 801b1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	f7e5 f895 	bl	80002e8 <__aeabi_dsub>
 801b1be:	4602      	mov	r2, r0
 801b1c0:	460b      	mov	r3, r1
 801b1c2:	ec51 0b19 	vmov	r0, r1, d9
 801b1c6:	f7e5 fb71 	bl	80008ac <__aeabi_ddiv>
 801b1ca:	4632      	mov	r2, r6
 801b1cc:	4604      	mov	r4, r0
 801b1ce:	460d      	mov	r5, r1
 801b1d0:	463b      	mov	r3, r7
 801b1d2:	4640      	mov	r0, r8
 801b1d4:	4649      	mov	r1, r9
 801b1d6:	f7e5 fa3f 	bl	8000658 <__aeabi_dmul>
 801b1da:	4632      	mov	r2, r6
 801b1dc:	463b      	mov	r3, r7
 801b1de:	f7e5 f885 	bl	80002ec <__adddf3>
 801b1e2:	4602      	mov	r2, r0
 801b1e4:	460b      	mov	r3, r1
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	4629      	mov	r1, r5
 801b1ea:	f7e5 f87d 	bl	80002e8 <__aeabi_dsub>
 801b1ee:	4642      	mov	r2, r8
 801b1f0:	464b      	mov	r3, r9
 801b1f2:	f7e5 f879 	bl	80002e8 <__aeabi_dsub>
 801b1f6:	460b      	mov	r3, r1
 801b1f8:	4602      	mov	r2, r0
 801b1fa:	4939      	ldr	r1, [pc, #228]	; (801b2e0 <__ieee754_pow+0xa40>)
 801b1fc:	2000      	movs	r0, #0
 801b1fe:	f7e5 f873 	bl	80002e8 <__aeabi_dsub>
 801b202:	ec41 0b10 	vmov	d0, r0, r1
 801b206:	ee10 3a90 	vmov	r3, s1
 801b20a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b20e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b212:	da2b      	bge.n	801b26c <__ieee754_pow+0x9cc>
 801b214:	4650      	mov	r0, sl
 801b216:	f000 fe73 	bl	801bf00 <scalbn>
 801b21a:	ec51 0b10 	vmov	r0, r1, d0
 801b21e:	ec53 2b18 	vmov	r2, r3, d8
 801b222:	f7ff bbee 	b.w	801aa02 <__ieee754_pow+0x162>
 801b226:	4b2f      	ldr	r3, [pc, #188]	; (801b2e4 <__ieee754_pow+0xa44>)
 801b228:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b22c:	429e      	cmp	r6, r3
 801b22e:	f77f af0d 	ble.w	801b04c <__ieee754_pow+0x7ac>
 801b232:	4b2d      	ldr	r3, [pc, #180]	; (801b2e8 <__ieee754_pow+0xa48>)
 801b234:	440b      	add	r3, r1
 801b236:	4303      	orrs	r3, r0
 801b238:	d009      	beq.n	801b24e <__ieee754_pow+0x9ae>
 801b23a:	ec51 0b18 	vmov	r0, r1, d8
 801b23e:	2200      	movs	r2, #0
 801b240:	2300      	movs	r3, #0
 801b242:	f7e5 fc7b 	bl	8000b3c <__aeabi_dcmplt>
 801b246:	3800      	subs	r0, #0
 801b248:	bf18      	it	ne
 801b24a:	2001      	movne	r0, #1
 801b24c:	e448      	b.n	801aae0 <__ieee754_pow+0x240>
 801b24e:	4622      	mov	r2, r4
 801b250:	462b      	mov	r3, r5
 801b252:	f7e5 f849 	bl	80002e8 <__aeabi_dsub>
 801b256:	4642      	mov	r2, r8
 801b258:	464b      	mov	r3, r9
 801b25a:	f7e5 fc83 	bl	8000b64 <__aeabi_dcmpge>
 801b25e:	2800      	cmp	r0, #0
 801b260:	f43f aef4 	beq.w	801b04c <__ieee754_pow+0x7ac>
 801b264:	e7e9      	b.n	801b23a <__ieee754_pow+0x99a>
 801b266:	f04f 0a00 	mov.w	sl, #0
 801b26a:	e71a      	b.n	801b0a2 <__ieee754_pow+0x802>
 801b26c:	ec51 0b10 	vmov	r0, r1, d0
 801b270:	4619      	mov	r1, r3
 801b272:	e7d4      	b.n	801b21e <__ieee754_pow+0x97e>
 801b274:	491a      	ldr	r1, [pc, #104]	; (801b2e0 <__ieee754_pow+0xa40>)
 801b276:	2000      	movs	r0, #0
 801b278:	f7ff bb31 	b.w	801a8de <__ieee754_pow+0x3e>
 801b27c:	2000      	movs	r0, #0
 801b27e:	2100      	movs	r1, #0
 801b280:	f7ff bb2d 	b.w	801a8de <__ieee754_pow+0x3e>
 801b284:	4630      	mov	r0, r6
 801b286:	4639      	mov	r1, r7
 801b288:	f7ff bb29 	b.w	801a8de <__ieee754_pow+0x3e>
 801b28c:	9204      	str	r2, [sp, #16]
 801b28e:	f7ff bb7b 	b.w	801a988 <__ieee754_pow+0xe8>
 801b292:	2300      	movs	r3, #0
 801b294:	f7ff bb65 	b.w	801a962 <__ieee754_pow+0xc2>
 801b298:	00000000 	.word	0x00000000
 801b29c:	3fe62e43 	.word	0x3fe62e43
 801b2a0:	fefa39ef 	.word	0xfefa39ef
 801b2a4:	3fe62e42 	.word	0x3fe62e42
 801b2a8:	0ca86c39 	.word	0x0ca86c39
 801b2ac:	be205c61 	.word	0xbe205c61
 801b2b0:	72bea4d0 	.word	0x72bea4d0
 801b2b4:	3e663769 	.word	0x3e663769
 801b2b8:	c5d26bf1 	.word	0xc5d26bf1
 801b2bc:	3ebbbd41 	.word	0x3ebbbd41
 801b2c0:	af25de2c 	.word	0xaf25de2c
 801b2c4:	3f11566a 	.word	0x3f11566a
 801b2c8:	16bebd93 	.word	0x16bebd93
 801b2cc:	3f66c16c 	.word	0x3f66c16c
 801b2d0:	5555553e 	.word	0x5555553e
 801b2d4:	3fc55555 	.word	0x3fc55555
 801b2d8:	3fe00000 	.word	0x3fe00000
 801b2dc:	fff00000 	.word	0xfff00000
 801b2e0:	3ff00000 	.word	0x3ff00000
 801b2e4:	4090cbff 	.word	0x4090cbff
 801b2e8:	3f6f3400 	.word	0x3f6f3400
 801b2ec:	652b82fe 	.word	0x652b82fe
 801b2f0:	3c971547 	.word	0x3c971547
 801b2f4:	00000000 	.word	0x00000000

0801b2f8 <__ieee754_rem_pio2>:
 801b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2fc:	ed2d 8b02 	vpush	{d8}
 801b300:	ec55 4b10 	vmov	r4, r5, d0
 801b304:	4bca      	ldr	r3, [pc, #808]	; (801b630 <__ieee754_rem_pio2+0x338>)
 801b306:	b08b      	sub	sp, #44	; 0x2c
 801b308:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b30c:	4598      	cmp	r8, r3
 801b30e:	4682      	mov	sl, r0
 801b310:	9502      	str	r5, [sp, #8]
 801b312:	dc08      	bgt.n	801b326 <__ieee754_rem_pio2+0x2e>
 801b314:	2200      	movs	r2, #0
 801b316:	2300      	movs	r3, #0
 801b318:	ed80 0b00 	vstr	d0, [r0]
 801b31c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b320:	f04f 0b00 	mov.w	fp, #0
 801b324:	e028      	b.n	801b378 <__ieee754_rem_pio2+0x80>
 801b326:	4bc3      	ldr	r3, [pc, #780]	; (801b634 <__ieee754_rem_pio2+0x33c>)
 801b328:	4598      	cmp	r8, r3
 801b32a:	dc78      	bgt.n	801b41e <__ieee754_rem_pio2+0x126>
 801b32c:	9b02      	ldr	r3, [sp, #8]
 801b32e:	4ec2      	ldr	r6, [pc, #776]	; (801b638 <__ieee754_rem_pio2+0x340>)
 801b330:	2b00      	cmp	r3, #0
 801b332:	ee10 0a10 	vmov	r0, s0
 801b336:	a3b0      	add	r3, pc, #704	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x300>)
 801b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b33c:	4629      	mov	r1, r5
 801b33e:	dd39      	ble.n	801b3b4 <__ieee754_rem_pio2+0xbc>
 801b340:	f7e4 ffd2 	bl	80002e8 <__aeabi_dsub>
 801b344:	45b0      	cmp	r8, r6
 801b346:	4604      	mov	r4, r0
 801b348:	460d      	mov	r5, r1
 801b34a:	d01b      	beq.n	801b384 <__ieee754_rem_pio2+0x8c>
 801b34c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b600 <__ieee754_rem_pio2+0x308>)
 801b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b352:	f7e4 ffc9 	bl	80002e8 <__aeabi_dsub>
 801b356:	4602      	mov	r2, r0
 801b358:	460b      	mov	r3, r1
 801b35a:	e9ca 2300 	strd	r2, r3, [sl]
 801b35e:	4620      	mov	r0, r4
 801b360:	4629      	mov	r1, r5
 801b362:	f7e4 ffc1 	bl	80002e8 <__aeabi_dsub>
 801b366:	a3a6      	add	r3, pc, #664	; (adr r3, 801b600 <__ieee754_rem_pio2+0x308>)
 801b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36c:	f7e4 ffbc 	bl	80002e8 <__aeabi_dsub>
 801b370:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b374:	f04f 0b01 	mov.w	fp, #1
 801b378:	4658      	mov	r0, fp
 801b37a:	b00b      	add	sp, #44	; 0x2c
 801b37c:	ecbd 8b02 	vpop	{d8}
 801b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b384:	a3a0      	add	r3, pc, #640	; (adr r3, 801b608 <__ieee754_rem_pio2+0x310>)
 801b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b38a:	f7e4 ffad 	bl	80002e8 <__aeabi_dsub>
 801b38e:	a3a0      	add	r3, pc, #640	; (adr r3, 801b610 <__ieee754_rem_pio2+0x318>)
 801b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b394:	4604      	mov	r4, r0
 801b396:	460d      	mov	r5, r1
 801b398:	f7e4 ffa6 	bl	80002e8 <__aeabi_dsub>
 801b39c:	4602      	mov	r2, r0
 801b39e:	460b      	mov	r3, r1
 801b3a0:	e9ca 2300 	strd	r2, r3, [sl]
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	4629      	mov	r1, r5
 801b3a8:	f7e4 ff9e 	bl	80002e8 <__aeabi_dsub>
 801b3ac:	a398      	add	r3, pc, #608	; (adr r3, 801b610 <__ieee754_rem_pio2+0x318>)
 801b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b2:	e7db      	b.n	801b36c <__ieee754_rem_pio2+0x74>
 801b3b4:	f7e4 ff9a 	bl	80002ec <__adddf3>
 801b3b8:	45b0      	cmp	r8, r6
 801b3ba:	4604      	mov	r4, r0
 801b3bc:	460d      	mov	r5, r1
 801b3be:	d016      	beq.n	801b3ee <__ieee754_rem_pio2+0xf6>
 801b3c0:	a38f      	add	r3, pc, #572	; (adr r3, 801b600 <__ieee754_rem_pio2+0x308>)
 801b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c6:	f7e4 ff91 	bl	80002ec <__adddf3>
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	e9ca 2300 	strd	r2, r3, [sl]
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	4629      	mov	r1, r5
 801b3d6:	f7e4 ff87 	bl	80002e8 <__aeabi_dsub>
 801b3da:	a389      	add	r3, pc, #548	; (adr r3, 801b600 <__ieee754_rem_pio2+0x308>)
 801b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3e0:	f7e4 ff84 	bl	80002ec <__adddf3>
 801b3e4:	f04f 3bff 	mov.w	fp, #4294967295
 801b3e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b3ec:	e7c4      	b.n	801b378 <__ieee754_rem_pio2+0x80>
 801b3ee:	a386      	add	r3, pc, #536	; (adr r3, 801b608 <__ieee754_rem_pio2+0x310>)
 801b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3f4:	f7e4 ff7a 	bl	80002ec <__adddf3>
 801b3f8:	a385      	add	r3, pc, #532	; (adr r3, 801b610 <__ieee754_rem_pio2+0x318>)
 801b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3fe:	4604      	mov	r4, r0
 801b400:	460d      	mov	r5, r1
 801b402:	f7e4 ff73 	bl	80002ec <__adddf3>
 801b406:	4602      	mov	r2, r0
 801b408:	460b      	mov	r3, r1
 801b40a:	e9ca 2300 	strd	r2, r3, [sl]
 801b40e:	4620      	mov	r0, r4
 801b410:	4629      	mov	r1, r5
 801b412:	f7e4 ff69 	bl	80002e8 <__aeabi_dsub>
 801b416:	a37e      	add	r3, pc, #504	; (adr r3, 801b610 <__ieee754_rem_pio2+0x318>)
 801b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b41c:	e7e0      	b.n	801b3e0 <__ieee754_rem_pio2+0xe8>
 801b41e:	4b87      	ldr	r3, [pc, #540]	; (801b63c <__ieee754_rem_pio2+0x344>)
 801b420:	4598      	cmp	r8, r3
 801b422:	f300 80d8 	bgt.w	801b5d6 <__ieee754_rem_pio2+0x2de>
 801b426:	f000 f96d 	bl	801b704 <fabs>
 801b42a:	ec55 4b10 	vmov	r4, r5, d0
 801b42e:	ee10 0a10 	vmov	r0, s0
 801b432:	a379      	add	r3, pc, #484	; (adr r3, 801b618 <__ieee754_rem_pio2+0x320>)
 801b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b438:	4629      	mov	r1, r5
 801b43a:	f7e5 f90d 	bl	8000658 <__aeabi_dmul>
 801b43e:	4b80      	ldr	r3, [pc, #512]	; (801b640 <__ieee754_rem_pio2+0x348>)
 801b440:	2200      	movs	r2, #0
 801b442:	f7e4 ff53 	bl	80002ec <__adddf3>
 801b446:	f7e5 fbb7 	bl	8000bb8 <__aeabi_d2iz>
 801b44a:	4683      	mov	fp, r0
 801b44c:	f7e5 f89a 	bl	8000584 <__aeabi_i2d>
 801b450:	4602      	mov	r2, r0
 801b452:	460b      	mov	r3, r1
 801b454:	ec43 2b18 	vmov	d8, r2, r3
 801b458:	a367      	add	r3, pc, #412	; (adr r3, 801b5f8 <__ieee754_rem_pio2+0x300>)
 801b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b45e:	f7e5 f8fb 	bl	8000658 <__aeabi_dmul>
 801b462:	4602      	mov	r2, r0
 801b464:	460b      	mov	r3, r1
 801b466:	4620      	mov	r0, r4
 801b468:	4629      	mov	r1, r5
 801b46a:	f7e4 ff3d 	bl	80002e8 <__aeabi_dsub>
 801b46e:	a364      	add	r3, pc, #400	; (adr r3, 801b600 <__ieee754_rem_pio2+0x308>)
 801b470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b474:	4606      	mov	r6, r0
 801b476:	460f      	mov	r7, r1
 801b478:	ec51 0b18 	vmov	r0, r1, d8
 801b47c:	f7e5 f8ec 	bl	8000658 <__aeabi_dmul>
 801b480:	f1bb 0f1f 	cmp.w	fp, #31
 801b484:	4604      	mov	r4, r0
 801b486:	460d      	mov	r5, r1
 801b488:	dc0d      	bgt.n	801b4a6 <__ieee754_rem_pio2+0x1ae>
 801b48a:	4b6e      	ldr	r3, [pc, #440]	; (801b644 <__ieee754_rem_pio2+0x34c>)
 801b48c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b494:	4543      	cmp	r3, r8
 801b496:	d006      	beq.n	801b4a6 <__ieee754_rem_pio2+0x1ae>
 801b498:	4622      	mov	r2, r4
 801b49a:	462b      	mov	r3, r5
 801b49c:	4630      	mov	r0, r6
 801b49e:	4639      	mov	r1, r7
 801b4a0:	f7e4 ff22 	bl	80002e8 <__aeabi_dsub>
 801b4a4:	e00e      	b.n	801b4c4 <__ieee754_rem_pio2+0x1cc>
 801b4a6:	462b      	mov	r3, r5
 801b4a8:	4622      	mov	r2, r4
 801b4aa:	4630      	mov	r0, r6
 801b4ac:	4639      	mov	r1, r7
 801b4ae:	f7e4 ff1b 	bl	80002e8 <__aeabi_dsub>
 801b4b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b4b6:	9303      	str	r3, [sp, #12]
 801b4b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b4bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801b4c0:	2b10      	cmp	r3, #16
 801b4c2:	dc02      	bgt.n	801b4ca <__ieee754_rem_pio2+0x1d2>
 801b4c4:	e9ca 0100 	strd	r0, r1, [sl]
 801b4c8:	e039      	b.n	801b53e <__ieee754_rem_pio2+0x246>
 801b4ca:	a34f      	add	r3, pc, #316	; (adr r3, 801b608 <__ieee754_rem_pio2+0x310>)
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	ec51 0b18 	vmov	r0, r1, d8
 801b4d4:	f7e5 f8c0 	bl	8000658 <__aeabi_dmul>
 801b4d8:	4604      	mov	r4, r0
 801b4da:	460d      	mov	r5, r1
 801b4dc:	4602      	mov	r2, r0
 801b4de:	460b      	mov	r3, r1
 801b4e0:	4630      	mov	r0, r6
 801b4e2:	4639      	mov	r1, r7
 801b4e4:	f7e4 ff00 	bl	80002e8 <__aeabi_dsub>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	4680      	mov	r8, r0
 801b4ee:	4689      	mov	r9, r1
 801b4f0:	4630      	mov	r0, r6
 801b4f2:	4639      	mov	r1, r7
 801b4f4:	f7e4 fef8 	bl	80002e8 <__aeabi_dsub>
 801b4f8:	4622      	mov	r2, r4
 801b4fa:	462b      	mov	r3, r5
 801b4fc:	f7e4 fef4 	bl	80002e8 <__aeabi_dsub>
 801b500:	a343      	add	r3, pc, #268	; (adr r3, 801b610 <__ieee754_rem_pio2+0x318>)
 801b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b506:	4604      	mov	r4, r0
 801b508:	460d      	mov	r5, r1
 801b50a:	ec51 0b18 	vmov	r0, r1, d8
 801b50e:	f7e5 f8a3 	bl	8000658 <__aeabi_dmul>
 801b512:	4622      	mov	r2, r4
 801b514:	462b      	mov	r3, r5
 801b516:	f7e4 fee7 	bl	80002e8 <__aeabi_dsub>
 801b51a:	4602      	mov	r2, r0
 801b51c:	460b      	mov	r3, r1
 801b51e:	4604      	mov	r4, r0
 801b520:	460d      	mov	r5, r1
 801b522:	4640      	mov	r0, r8
 801b524:	4649      	mov	r1, r9
 801b526:	f7e4 fedf 	bl	80002e8 <__aeabi_dsub>
 801b52a:	9a03      	ldr	r2, [sp, #12]
 801b52c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	2b31      	cmp	r3, #49	; 0x31
 801b534:	dc24      	bgt.n	801b580 <__ieee754_rem_pio2+0x288>
 801b536:	e9ca 0100 	strd	r0, r1, [sl]
 801b53a:	4646      	mov	r6, r8
 801b53c:	464f      	mov	r7, r9
 801b53e:	e9da 8900 	ldrd	r8, r9, [sl]
 801b542:	4630      	mov	r0, r6
 801b544:	4642      	mov	r2, r8
 801b546:	464b      	mov	r3, r9
 801b548:	4639      	mov	r1, r7
 801b54a:	f7e4 fecd 	bl	80002e8 <__aeabi_dsub>
 801b54e:	462b      	mov	r3, r5
 801b550:	4622      	mov	r2, r4
 801b552:	f7e4 fec9 	bl	80002e8 <__aeabi_dsub>
 801b556:	9b02      	ldr	r3, [sp, #8]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b55e:	f6bf af0b 	bge.w	801b378 <__ieee754_rem_pio2+0x80>
 801b562:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b566:	f8ca 3004 	str.w	r3, [sl, #4]
 801b56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b56e:	f8ca 8000 	str.w	r8, [sl]
 801b572:	f8ca 0008 	str.w	r0, [sl, #8]
 801b576:	f8ca 300c 	str.w	r3, [sl, #12]
 801b57a:	f1cb 0b00 	rsb	fp, fp, #0
 801b57e:	e6fb      	b.n	801b378 <__ieee754_rem_pio2+0x80>
 801b580:	a327      	add	r3, pc, #156	; (adr r3, 801b620 <__ieee754_rem_pio2+0x328>)
 801b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b586:	ec51 0b18 	vmov	r0, r1, d8
 801b58a:	f7e5 f865 	bl	8000658 <__aeabi_dmul>
 801b58e:	4604      	mov	r4, r0
 801b590:	460d      	mov	r5, r1
 801b592:	4602      	mov	r2, r0
 801b594:	460b      	mov	r3, r1
 801b596:	4640      	mov	r0, r8
 801b598:	4649      	mov	r1, r9
 801b59a:	f7e4 fea5 	bl	80002e8 <__aeabi_dsub>
 801b59e:	4602      	mov	r2, r0
 801b5a0:	460b      	mov	r3, r1
 801b5a2:	4606      	mov	r6, r0
 801b5a4:	460f      	mov	r7, r1
 801b5a6:	4640      	mov	r0, r8
 801b5a8:	4649      	mov	r1, r9
 801b5aa:	f7e4 fe9d 	bl	80002e8 <__aeabi_dsub>
 801b5ae:	4622      	mov	r2, r4
 801b5b0:	462b      	mov	r3, r5
 801b5b2:	f7e4 fe99 	bl	80002e8 <__aeabi_dsub>
 801b5b6:	a31c      	add	r3, pc, #112	; (adr r3, 801b628 <__ieee754_rem_pio2+0x330>)
 801b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5bc:	4604      	mov	r4, r0
 801b5be:	460d      	mov	r5, r1
 801b5c0:	ec51 0b18 	vmov	r0, r1, d8
 801b5c4:	f7e5 f848 	bl	8000658 <__aeabi_dmul>
 801b5c8:	4622      	mov	r2, r4
 801b5ca:	462b      	mov	r3, r5
 801b5cc:	f7e4 fe8c 	bl	80002e8 <__aeabi_dsub>
 801b5d0:	4604      	mov	r4, r0
 801b5d2:	460d      	mov	r5, r1
 801b5d4:	e760      	b.n	801b498 <__ieee754_rem_pio2+0x1a0>
 801b5d6:	4b1c      	ldr	r3, [pc, #112]	; (801b648 <__ieee754_rem_pio2+0x350>)
 801b5d8:	4598      	cmp	r8, r3
 801b5da:	dd37      	ble.n	801b64c <__ieee754_rem_pio2+0x354>
 801b5dc:	ee10 2a10 	vmov	r2, s0
 801b5e0:	462b      	mov	r3, r5
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	4629      	mov	r1, r5
 801b5e6:	f7e4 fe7f 	bl	80002e8 <__aeabi_dsub>
 801b5ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5ee:	e9ca 0100 	strd	r0, r1, [sl]
 801b5f2:	e695      	b.n	801b320 <__ieee754_rem_pio2+0x28>
 801b5f4:	f3af 8000 	nop.w
 801b5f8:	54400000 	.word	0x54400000
 801b5fc:	3ff921fb 	.word	0x3ff921fb
 801b600:	1a626331 	.word	0x1a626331
 801b604:	3dd0b461 	.word	0x3dd0b461
 801b608:	1a600000 	.word	0x1a600000
 801b60c:	3dd0b461 	.word	0x3dd0b461
 801b610:	2e037073 	.word	0x2e037073
 801b614:	3ba3198a 	.word	0x3ba3198a
 801b618:	6dc9c883 	.word	0x6dc9c883
 801b61c:	3fe45f30 	.word	0x3fe45f30
 801b620:	2e000000 	.word	0x2e000000
 801b624:	3ba3198a 	.word	0x3ba3198a
 801b628:	252049c1 	.word	0x252049c1
 801b62c:	397b839a 	.word	0x397b839a
 801b630:	3fe921fb 	.word	0x3fe921fb
 801b634:	4002d97b 	.word	0x4002d97b
 801b638:	3ff921fb 	.word	0x3ff921fb
 801b63c:	413921fb 	.word	0x413921fb
 801b640:	3fe00000 	.word	0x3fe00000
 801b644:	08028810 	.word	0x08028810
 801b648:	7fefffff 	.word	0x7fefffff
 801b64c:	ea4f 5628 	mov.w	r6, r8, asr #20
 801b650:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801b654:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801b658:	4620      	mov	r0, r4
 801b65a:	460d      	mov	r5, r1
 801b65c:	f7e5 faac 	bl	8000bb8 <__aeabi_d2iz>
 801b660:	f7e4 ff90 	bl	8000584 <__aeabi_i2d>
 801b664:	4602      	mov	r2, r0
 801b666:	460b      	mov	r3, r1
 801b668:	4620      	mov	r0, r4
 801b66a:	4629      	mov	r1, r5
 801b66c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b670:	f7e4 fe3a 	bl	80002e8 <__aeabi_dsub>
 801b674:	4b21      	ldr	r3, [pc, #132]	; (801b6fc <__ieee754_rem_pio2+0x404>)
 801b676:	2200      	movs	r2, #0
 801b678:	f7e4 ffee 	bl	8000658 <__aeabi_dmul>
 801b67c:	460d      	mov	r5, r1
 801b67e:	4604      	mov	r4, r0
 801b680:	f7e5 fa9a 	bl	8000bb8 <__aeabi_d2iz>
 801b684:	f7e4 ff7e 	bl	8000584 <__aeabi_i2d>
 801b688:	4602      	mov	r2, r0
 801b68a:	460b      	mov	r3, r1
 801b68c:	4620      	mov	r0, r4
 801b68e:	4629      	mov	r1, r5
 801b690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b694:	f7e4 fe28 	bl	80002e8 <__aeabi_dsub>
 801b698:	4b18      	ldr	r3, [pc, #96]	; (801b6fc <__ieee754_rem_pio2+0x404>)
 801b69a:	2200      	movs	r2, #0
 801b69c:	f7e4 ffdc 	bl	8000658 <__aeabi_dmul>
 801b6a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b6a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801b6a8:	2703      	movs	r7, #3
 801b6aa:	2400      	movs	r4, #0
 801b6ac:	2500      	movs	r5, #0
 801b6ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801b6b2:	4622      	mov	r2, r4
 801b6b4:	462b      	mov	r3, r5
 801b6b6:	46b9      	mov	r9, r7
 801b6b8:	3f01      	subs	r7, #1
 801b6ba:	f7e5 fa35 	bl	8000b28 <__aeabi_dcmpeq>
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d1f5      	bne.n	801b6ae <__ieee754_rem_pio2+0x3b6>
 801b6c2:	4b0f      	ldr	r3, [pc, #60]	; (801b700 <__ieee754_rem_pio2+0x408>)
 801b6c4:	9301      	str	r3, [sp, #4]
 801b6c6:	2302      	movs	r3, #2
 801b6c8:	9300      	str	r3, [sp, #0]
 801b6ca:	4632      	mov	r2, r6
 801b6cc:	464b      	mov	r3, r9
 801b6ce:	4651      	mov	r1, sl
 801b6d0:	a804      	add	r0, sp, #16
 801b6d2:	f000 fd29 	bl	801c128 <__kernel_rem_pio2>
 801b6d6:	9b02      	ldr	r3, [sp, #8]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	4683      	mov	fp, r0
 801b6dc:	f6bf ae4c 	bge.w	801b378 <__ieee754_rem_pio2+0x80>
 801b6e0:	e9da 2100 	ldrd	r2, r1, [sl]
 801b6e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6e8:	e9ca 2300 	strd	r2, r3, [sl]
 801b6ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b6f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b6f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b6f8:	e73f      	b.n	801b57a <__ieee754_rem_pio2+0x282>
 801b6fa:	bf00      	nop
 801b6fc:	41700000 	.word	0x41700000
 801b700:	08028890 	.word	0x08028890

0801b704 <fabs>:
 801b704:	ec51 0b10 	vmov	r0, r1, d0
 801b708:	ee10 2a10 	vmov	r2, s0
 801b70c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b710:	ec43 2b10 	vmov	d0, r2, r3
 801b714:	4770      	bx	lr
	...

0801b718 <__kernel_cosf>:
 801b718:	ee10 3a10 	vmov	r3, s0
 801b71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b720:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801b724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b728:	da05      	bge.n	801b736 <__kernel_cosf+0x1e>
 801b72a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b72e:	ee17 2a90 	vmov	r2, s15
 801b732:	2a00      	cmp	r2, #0
 801b734:	d03b      	beq.n	801b7ae <__kernel_cosf+0x96>
 801b736:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b73a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801b7b4 <__kernel_cosf+0x9c>
 801b73e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801b7b8 <__kernel_cosf+0xa0>
 801b742:	4a1e      	ldr	r2, [pc, #120]	; (801b7bc <__kernel_cosf+0xa4>)
 801b744:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b748:	4293      	cmp	r3, r2
 801b74a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801b7c0 <__kernel_cosf+0xa8>
 801b74e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b752:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801b7c4 <__kernel_cosf+0xac>
 801b756:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b75a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801b7c8 <__kernel_cosf+0xb0>
 801b75e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b762:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801b7cc <__kernel_cosf+0xb4>
 801b766:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b76a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801b76e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b772:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b776:	eee7 0a06 	vfma.f32	s1, s14, s12
 801b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b77e:	dc04      	bgt.n	801b78a <__kernel_cosf+0x72>
 801b780:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b784:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801b788:	4770      	bx	lr
 801b78a:	4a11      	ldr	r2, [pc, #68]	; (801b7d0 <__kernel_cosf+0xb8>)
 801b78c:	4293      	cmp	r3, r2
 801b78e:	bfda      	itte	le
 801b790:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801b794:	ee07 3a10 	vmovle	s14, r3
 801b798:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801b79c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b7a0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801b7a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b7a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b7ac:	4770      	bx	lr
 801b7ae:	eeb0 0a66 	vmov.f32	s0, s13
 801b7b2:	4770      	bx	lr
 801b7b4:	ad47d74e 	.word	0xad47d74e
 801b7b8:	310f74f6 	.word	0x310f74f6
 801b7bc:	3e999999 	.word	0x3e999999
 801b7c0:	b493f27c 	.word	0xb493f27c
 801b7c4:	37d00d01 	.word	0x37d00d01
 801b7c8:	bab60b61 	.word	0xbab60b61
 801b7cc:	3d2aaaab 	.word	0x3d2aaaab
 801b7d0:	3f480000 	.word	0x3f480000

0801b7d4 <__kernel_sinf>:
 801b7d4:	ee10 3a10 	vmov	r3, s0
 801b7d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b7dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801b7e0:	da04      	bge.n	801b7ec <__kernel_sinf+0x18>
 801b7e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b7e6:	ee17 3a90 	vmov	r3, s15
 801b7ea:	b35b      	cbz	r3, 801b844 <__kernel_sinf+0x70>
 801b7ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b7f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801b848 <__kernel_sinf+0x74>
 801b7f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801b84c <__kernel_sinf+0x78>
 801b7f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b7fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801b850 <__kernel_sinf+0x7c>
 801b800:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b804:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801b854 <__kernel_sinf+0x80>
 801b808:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b80c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801b858 <__kernel_sinf+0x84>
 801b810:	ee60 6a07 	vmul.f32	s13, s0, s14
 801b814:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b818:	b930      	cbnz	r0, 801b828 <__kernel_sinf+0x54>
 801b81a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801b85c <__kernel_sinf+0x88>
 801b81e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b822:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b826:	4770      	bx	lr
 801b828:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b82c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801b830:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b834:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801b838:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b860 <__kernel_sinf+0x8c>
 801b83c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801b840:	ee30 0a60 	vsub.f32	s0, s0, s1
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	2f2ec9d3 	.word	0x2f2ec9d3
 801b84c:	b2d72f34 	.word	0xb2d72f34
 801b850:	3638ef1b 	.word	0x3638ef1b
 801b854:	b9500d01 	.word	0xb9500d01
 801b858:	3c088889 	.word	0x3c088889
 801b85c:	be2aaaab 	.word	0xbe2aaaab
 801b860:	3e2aaaab 	.word	0x3e2aaaab

0801b864 <__ieee754_expf>:
 801b864:	ee10 2a10 	vmov	r2, s0
 801b868:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b86c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b870:	d902      	bls.n	801b878 <__ieee754_expf+0x14>
 801b872:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b876:	4770      	bx	lr
 801b878:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801b87c:	d106      	bne.n	801b88c <__ieee754_expf+0x28>
 801b87e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b9b8 <__ieee754_expf+0x154>
 801b882:	2900      	cmp	r1, #0
 801b884:	bf18      	it	ne
 801b886:	eeb0 0a67 	vmovne.f32	s0, s15
 801b88a:	4770      	bx	lr
 801b88c:	484b      	ldr	r0, [pc, #300]	; (801b9bc <__ieee754_expf+0x158>)
 801b88e:	4282      	cmp	r2, r0
 801b890:	dd02      	ble.n	801b898 <__ieee754_expf+0x34>
 801b892:	2000      	movs	r0, #0
 801b894:	f7fe bac4 	b.w	8019e20 <__math_oflowf>
 801b898:	2a00      	cmp	r2, #0
 801b89a:	da05      	bge.n	801b8a8 <__ieee754_expf+0x44>
 801b89c:	4a48      	ldr	r2, [pc, #288]	; (801b9c0 <__ieee754_expf+0x15c>)
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	d902      	bls.n	801b8a8 <__ieee754_expf+0x44>
 801b8a2:	2000      	movs	r0, #0
 801b8a4:	f7fe bab6 	b.w	8019e14 <__math_uflowf>
 801b8a8:	4a46      	ldr	r2, [pc, #280]	; (801b9c4 <__ieee754_expf+0x160>)
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b8b0:	d952      	bls.n	801b958 <__ieee754_expf+0xf4>
 801b8b2:	4a45      	ldr	r2, [pc, #276]	; (801b9c8 <__ieee754_expf+0x164>)
 801b8b4:	4293      	cmp	r3, r2
 801b8b6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801b8ba:	d834      	bhi.n	801b926 <__ieee754_expf+0xc2>
 801b8bc:	4b43      	ldr	r3, [pc, #268]	; (801b9cc <__ieee754_expf+0x168>)
 801b8be:	4413      	add	r3, r2
 801b8c0:	ed93 7a00 	vldr	s14, [r3]
 801b8c4:	4b42      	ldr	r3, [pc, #264]	; (801b9d0 <__ieee754_expf+0x16c>)
 801b8c6:	4413      	add	r3, r2
 801b8c8:	ee30 7a47 	vsub.f32	s14, s0, s14
 801b8cc:	f1c1 0201 	rsb	r2, r1, #1
 801b8d0:	edd3 7a00 	vldr	s15, [r3]
 801b8d4:	1a52      	subs	r2, r2, r1
 801b8d6:	ee37 0a67 	vsub.f32	s0, s14, s15
 801b8da:	ee20 6a00 	vmul.f32	s12, s0, s0
 801b8de:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801b9d4 <__ieee754_expf+0x170>
 801b8e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b9d8 <__ieee754_expf+0x174>
 801b8e6:	eee6 6a05 	vfma.f32	s13, s12, s10
 801b8ea:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801b9dc <__ieee754_expf+0x178>
 801b8ee:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b8f2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801b9e0 <__ieee754_expf+0x17c>
 801b8f6:	eee5 6a06 	vfma.f32	s13, s10, s12
 801b8fa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801b9e4 <__ieee754_expf+0x180>
 801b8fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 801b902:	eef0 6a40 	vmov.f32	s13, s0
 801b906:	eee5 6a46 	vfms.f32	s13, s10, s12
 801b90a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801b90e:	ee20 5a26 	vmul.f32	s10, s0, s13
 801b912:	bb92      	cbnz	r2, 801b97a <__ieee754_expf+0x116>
 801b914:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801b918:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801b91c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b920:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801b924:	4770      	bx	lr
 801b926:	4b30      	ldr	r3, [pc, #192]	; (801b9e8 <__ieee754_expf+0x184>)
 801b928:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801b9ec <__ieee754_expf+0x188>
 801b92c:	eddf 6a30 	vldr	s13, [pc, #192]	; 801b9f0 <__ieee754_expf+0x18c>
 801b930:	4413      	add	r3, r2
 801b932:	edd3 7a00 	vldr	s15, [r3]
 801b936:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b93a:	eeb0 7a40 	vmov.f32	s14, s0
 801b93e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b942:	ee17 2a90 	vmov	r2, s15
 801b946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b94a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b94e:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b9f4 <__ieee754_expf+0x190>
 801b952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b956:	e7be      	b.n	801b8d6 <__ieee754_expf+0x72>
 801b958:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801b95c:	d20b      	bcs.n	801b976 <__ieee754_expf+0x112>
 801b95e:	eddf 6a26 	vldr	s13, [pc, #152]	; 801b9f8 <__ieee754_expf+0x194>
 801b962:	ee70 6a26 	vadd.f32	s13, s0, s13
 801b966:	eef4 6ae5 	vcmpe.f32	s13, s11
 801b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b96e:	dd02      	ble.n	801b976 <__ieee754_expf+0x112>
 801b970:	ee30 0a25 	vadd.f32	s0, s0, s11
 801b974:	4770      	bx	lr
 801b976:	2200      	movs	r2, #0
 801b978:	e7af      	b.n	801b8da <__ieee754_expf+0x76>
 801b97a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801b97e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801b982:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801b986:	bfb8      	it	lt
 801b988:	3264      	addlt	r2, #100	; 0x64
 801b98a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b98e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b992:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801b996:	ee17 3a90 	vmov	r3, s15
 801b99a:	bfab      	itete	ge
 801b99c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801b9a0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801b9a4:	ee00 3a10 	vmovge	s0, r3
 801b9a8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801b9fc <__ieee754_expf+0x198>
 801b9ac:	bfbc      	itt	lt
 801b9ae:	ee00 3a10 	vmovlt	s0, r3
 801b9b2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801b9b6:	4770      	bx	lr
 801b9b8:	00000000 	.word	0x00000000
 801b9bc:	42b17217 	.word	0x42b17217
 801b9c0:	42cff1b5 	.word	0x42cff1b5
 801b9c4:	3eb17218 	.word	0x3eb17218
 801b9c8:	3f851591 	.word	0x3f851591
 801b9cc:	080289a0 	.word	0x080289a0
 801b9d0:	080289a8 	.word	0x080289a8
 801b9d4:	3331bb4c 	.word	0x3331bb4c
 801b9d8:	b5ddea0e 	.word	0xb5ddea0e
 801b9dc:	388ab355 	.word	0x388ab355
 801b9e0:	bb360b61 	.word	0xbb360b61
 801b9e4:	3e2aaaab 	.word	0x3e2aaaab
 801b9e8:	08028998 	.word	0x08028998
 801b9ec:	3fb8aa3b 	.word	0x3fb8aa3b
 801b9f0:	3f317180 	.word	0x3f317180
 801b9f4:	3717f7d1 	.word	0x3717f7d1
 801b9f8:	7149f2ca 	.word	0x7149f2ca
 801b9fc:	0d800000 	.word	0x0d800000

0801ba00 <__ieee754_logf>:
 801ba00:	ee10 3a10 	vmov	r3, s0
 801ba04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ba08:	d106      	bne.n	801ba18 <__ieee754_logf+0x18>
 801ba0a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801bba4 <__ieee754_logf+0x1a4>
 801ba0e:	eddf 7a66 	vldr	s15, [pc, #408]	; 801bba8 <__ieee754_logf+0x1a8>
 801ba12:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801ba16:	4770      	bx	lr
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	da02      	bge.n	801ba22 <__ieee754_logf+0x22>
 801ba1c:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ba20:	e7f5      	b.n	801ba0e <__ieee754_logf+0xe>
 801ba22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ba26:	db02      	blt.n	801ba2e <__ieee754_logf+0x2e>
 801ba28:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ba2c:	4770      	bx	lr
 801ba2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ba32:	bfb8      	it	lt
 801ba34:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801bbac <__ieee754_logf+0x1ac>
 801ba38:	485d      	ldr	r0, [pc, #372]	; (801bbb0 <__ieee754_logf+0x1b0>)
 801ba3a:	bfbe      	ittt	lt
 801ba3c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801ba40:	f06f 0118 	mvnlt.w	r1, #24
 801ba44:	ee17 3a90 	vmovlt	r3, s15
 801ba48:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801ba4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ba50:	4418      	add	r0, r3
 801ba52:	bfa8      	it	ge
 801ba54:	2100      	movge	r1, #0
 801ba56:	3a7f      	subs	r2, #127	; 0x7f
 801ba58:	440a      	add	r2, r1
 801ba5a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801ba5e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801ba62:	4319      	orrs	r1, r3
 801ba64:	ee00 1a10 	vmov	s0, r1
 801ba68:	4952      	ldr	r1, [pc, #328]	; (801bbb4 <__ieee754_logf+0x1b4>)
 801ba6a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801ba6e:	f103 000f 	add.w	r0, r3, #15
 801ba72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ba76:	4001      	ands	r1, r0
 801ba78:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ba7c:	bb89      	cbnz	r1, 801bae2 <__ieee754_logf+0xe2>
 801ba7e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801ba82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba86:	d10f      	bne.n	801baa8 <__ieee754_logf+0xa8>
 801ba88:	2a00      	cmp	r2, #0
 801ba8a:	f000 8087 	beq.w	801bb9c <__ieee754_logf+0x19c>
 801ba8e:	ee07 2a90 	vmov	s15, r2
 801ba92:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801bbb8 <__ieee754_logf+0x1b8>
 801ba96:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801bbbc <__ieee754_logf+0x1bc>
 801ba9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801baa2:	eea7 0a87 	vfma.f32	s0, s15, s14
 801baa6:	4770      	bx	lr
 801baa8:	eddf 6a45 	vldr	s13, [pc, #276]	; 801bbc0 <__ieee754_logf+0x1c0>
 801baac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bab0:	eee0 7a66 	vfms.f32	s15, s0, s13
 801bab4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801babc:	b912      	cbnz	r2, 801bac4 <__ieee754_logf+0xc4>
 801babe:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bac2:	4770      	bx	lr
 801bac4:	ee07 2a90 	vmov	s15, r2
 801bac8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801bbb8 <__ieee754_logf+0x1b8>
 801bacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bad0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801bad4:	ee37 0a40 	vsub.f32	s0, s14, s0
 801bad8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801bbbc <__ieee754_logf+0x1bc>
 801badc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801bae0:	4770      	bx	lr
 801bae2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801bae6:	ee70 7a27 	vadd.f32	s15, s0, s15
 801baea:	eddf 5a36 	vldr	s11, [pc, #216]	; 801bbc4 <__ieee754_logf+0x1c4>
 801baee:	eddf 4a36 	vldr	s9, [pc, #216]	; 801bbc8 <__ieee754_logf+0x1c8>
 801baf2:	4936      	ldr	r1, [pc, #216]	; (801bbcc <__ieee754_logf+0x1cc>)
 801baf4:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801baf8:	4419      	add	r1, r3
 801bafa:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801bafe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801bb02:	430b      	orrs	r3, r1
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	ee07 2a90 	vmov	s15, r2
 801bb0a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801bb0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bb12:	ee25 7a05 	vmul.f32	s14, s10, s10
 801bb16:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801bbd0 <__ieee754_logf+0x1d0>
 801bb1a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801bb1e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801bbd4 <__ieee754_logf+0x1d4>
 801bb22:	eee7 5a87 	vfma.f32	s11, s15, s14
 801bb26:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801bbd8 <__ieee754_logf+0x1d8>
 801bb2a:	eee7 7a24 	vfma.f32	s15, s14, s9
 801bb2e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801bbdc <__ieee754_logf+0x1dc>
 801bb32:	eee7 4a87 	vfma.f32	s9, s15, s14
 801bb36:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801bbe0 <__ieee754_logf+0x1e0>
 801bb3a:	eee4 7a87 	vfma.f32	s15, s9, s14
 801bb3e:	ee67 7a85 	vmul.f32	s15, s15, s10
 801bb42:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bb46:	dd1a      	ble.n	801bb7e <__ieee754_logf+0x17e>
 801bb48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bb4c:	ee20 7a07 	vmul.f32	s14, s0, s14
 801bb50:	ee27 7a00 	vmul.f32	s14, s14, s0
 801bb54:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bb58:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bb5c:	b912      	cbnz	r2, 801bb64 <__ieee754_logf+0x164>
 801bb5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb62:	e7ac      	b.n	801babe <__ieee754_logf+0xbe>
 801bb64:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801bbb8 <__ieee754_logf+0x1b8>
 801bb68:	eee6 7a86 	vfma.f32	s15, s13, s12
 801bb6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bb70:	ee37 0a40 	vsub.f32	s0, s14, s0
 801bb74:	eddf 7a11 	vldr	s15, [pc, #68]	; 801bbbc <__ieee754_logf+0x1bc>
 801bb78:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801bb7c:	4770      	bx	lr
 801bb7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 801bb82:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bb86:	b912      	cbnz	r2, 801bb8e <__ieee754_logf+0x18e>
 801bb88:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bb8c:	4770      	bx	lr
 801bb8e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801bbb8 <__ieee754_logf+0x1b8>
 801bb92:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801bb96:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bb9a:	e7eb      	b.n	801bb74 <__ieee754_logf+0x174>
 801bb9c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801bba8 <__ieee754_logf+0x1a8>
 801bba0:	4770      	bx	lr
 801bba2:	bf00      	nop
 801bba4:	cc000000 	.word	0xcc000000
 801bba8:	00000000 	.word	0x00000000
 801bbac:	4c000000 	.word	0x4c000000
 801bbb0:	004afb20 	.word	0x004afb20
 801bbb4:	007ffff0 	.word	0x007ffff0
 801bbb8:	3717f7d1 	.word	0x3717f7d1
 801bbbc:	3f317180 	.word	0x3f317180
 801bbc0:	3eaaaaab 	.word	0x3eaaaaab
 801bbc4:	3e1cd04f 	.word	0x3e1cd04f
 801bbc8:	3e178897 	.word	0x3e178897
 801bbcc:	ffcf5c30 	.word	0xffcf5c30
 801bbd0:	3e638e29 	.word	0x3e638e29
 801bbd4:	3ecccccd 	.word	0x3ecccccd
 801bbd8:	3e3a3325 	.word	0x3e3a3325
 801bbdc:	3e924925 	.word	0x3e924925
 801bbe0:	3f2aaaab 	.word	0x3f2aaaab

0801bbe4 <__ieee754_log10f>:
 801bbe4:	b508      	push	{r3, lr}
 801bbe6:	ee10 2a10 	vmov	r2, s0
 801bbea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801bbee:	ed2d 8b02 	vpush	{d8}
 801bbf2:	d108      	bne.n	801bc06 <__ieee754_log10f+0x22>
 801bbf4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801bc7c <__ieee754_log10f+0x98>
 801bbf8:	eddf 7a21 	vldr	s15, [pc, #132]	; 801bc80 <__ieee754_log10f+0x9c>
 801bbfc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801bc00:	ecbd 8b02 	vpop	{d8}
 801bc04:	bd08      	pop	{r3, pc}
 801bc06:	2a00      	cmp	r2, #0
 801bc08:	da02      	bge.n	801bc10 <__ieee754_log10f+0x2c>
 801bc0a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801bc0e:	e7f3      	b.n	801bbf8 <__ieee754_log10f+0x14>
 801bc10:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801bc14:	db02      	blt.n	801bc1c <__ieee754_log10f+0x38>
 801bc16:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bc1a:	e7f1      	b.n	801bc00 <__ieee754_log10f+0x1c>
 801bc1c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801bc20:	bfbf      	itttt	lt
 801bc22:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801bc84 <__ieee754_log10f+0xa0>
 801bc26:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801bc2a:	f06f 0118 	mvnlt.w	r1, #24
 801bc2e:	ee17 2a90 	vmovlt	r2, s15
 801bc32:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801bc36:	bfa8      	it	ge
 801bc38:	2100      	movge	r1, #0
 801bc3a:	3b7f      	subs	r3, #127	; 0x7f
 801bc3c:	440b      	add	r3, r1
 801bc3e:	0fd9      	lsrs	r1, r3, #31
 801bc40:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801bc44:	ee07 3a90 	vmov	s15, r3
 801bc48:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801bc4c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801bc50:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801bc54:	ee00 3a10 	vmov	s0, r3
 801bc58:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801bc5c:	f7ff fed0 	bl	801ba00 <__ieee754_logf>
 801bc60:	eddf 7a09 	vldr	s15, [pc, #36]	; 801bc88 <__ieee754_log10f+0xa4>
 801bc64:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bc68:	eddf 7a08 	vldr	s15, [pc, #32]	; 801bc8c <__ieee754_log10f+0xa8>
 801bc6c:	eea8 0a27 	vfma.f32	s0, s16, s15
 801bc70:	eddf 7a07 	vldr	s15, [pc, #28]	; 801bc90 <__ieee754_log10f+0xac>
 801bc74:	eea8 0a27 	vfma.f32	s0, s16, s15
 801bc78:	e7c2      	b.n	801bc00 <__ieee754_log10f+0x1c>
 801bc7a:	bf00      	nop
 801bc7c:	cc000000 	.word	0xcc000000
 801bc80:	00000000 	.word	0x00000000
 801bc84:	4c000000 	.word	0x4c000000
 801bc88:	3ede5bd9 	.word	0x3ede5bd9
 801bc8c:	355427db 	.word	0x355427db
 801bc90:	3e9a2080 	.word	0x3e9a2080

0801bc94 <__ieee754_rem_pio2f>:
 801bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc96:	ee10 6a10 	vmov	r6, s0
 801bc9a:	4b86      	ldr	r3, [pc, #536]	; (801beb4 <__ieee754_rem_pio2f+0x220>)
 801bc9c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801bca0:	429d      	cmp	r5, r3
 801bca2:	b087      	sub	sp, #28
 801bca4:	4604      	mov	r4, r0
 801bca6:	dc05      	bgt.n	801bcb4 <__ieee754_rem_pio2f+0x20>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	ed80 0a00 	vstr	s0, [r0]
 801bcae:	6043      	str	r3, [r0, #4]
 801bcb0:	2000      	movs	r0, #0
 801bcb2:	e020      	b.n	801bcf6 <__ieee754_rem_pio2f+0x62>
 801bcb4:	4b80      	ldr	r3, [pc, #512]	; (801beb8 <__ieee754_rem_pio2f+0x224>)
 801bcb6:	429d      	cmp	r5, r3
 801bcb8:	dc38      	bgt.n	801bd2c <__ieee754_rem_pio2f+0x98>
 801bcba:	2e00      	cmp	r6, #0
 801bcbc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801bebc <__ieee754_rem_pio2f+0x228>
 801bcc0:	4b7f      	ldr	r3, [pc, #508]	; (801bec0 <__ieee754_rem_pio2f+0x22c>)
 801bcc2:	f025 050f 	bic.w	r5, r5, #15
 801bcc6:	dd18      	ble.n	801bcfa <__ieee754_rem_pio2f+0x66>
 801bcc8:	429d      	cmp	r5, r3
 801bcca:	ee70 7a47 	vsub.f32	s15, s0, s14
 801bcce:	bf09      	itett	eq
 801bcd0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801bec4 <__ieee754_rem_pio2f+0x230>
 801bcd4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801bec8 <__ieee754_rem_pio2f+0x234>
 801bcd8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801bcdc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801becc <__ieee754_rem_pio2f+0x238>
 801bce0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801bce4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bce8:	edc0 6a00 	vstr	s13, [r0]
 801bcec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bcf0:	edc0 7a01 	vstr	s15, [r0, #4]
 801bcf4:	2001      	movs	r0, #1
 801bcf6:	b007      	add	sp, #28
 801bcf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcfa:	429d      	cmp	r5, r3
 801bcfc:	ee70 7a07 	vadd.f32	s15, s0, s14
 801bd00:	bf09      	itett	eq
 801bd02:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801bec4 <__ieee754_rem_pio2f+0x230>
 801bd06:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801bec8 <__ieee754_rem_pio2f+0x234>
 801bd0a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801bd0e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801becc <__ieee754_rem_pio2f+0x238>
 801bd12:	ee77 6a87 	vadd.f32	s13, s15, s14
 801bd16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd1a:	edc0 6a00 	vstr	s13, [r0]
 801bd1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd22:	edc0 7a01 	vstr	s15, [r0, #4]
 801bd26:	f04f 30ff 	mov.w	r0, #4294967295
 801bd2a:	e7e4      	b.n	801bcf6 <__ieee754_rem_pio2f+0x62>
 801bd2c:	4b68      	ldr	r3, [pc, #416]	; (801bed0 <__ieee754_rem_pio2f+0x23c>)
 801bd2e:	429d      	cmp	r5, r3
 801bd30:	dc71      	bgt.n	801be16 <__ieee754_rem_pio2f+0x182>
 801bd32:	f000 f8db 	bl	801beec <fabsf>
 801bd36:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801bed4 <__ieee754_rem_pio2f+0x240>
 801bd3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bd3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801bd42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bd46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bd4a:	ee17 0a90 	vmov	r0, s15
 801bd4e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801bebc <__ieee754_rem_pio2f+0x228>
 801bd52:	eea7 0a67 	vfms.f32	s0, s14, s15
 801bd56:	281f      	cmp	r0, #31
 801bd58:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801bec8 <__ieee754_rem_pio2f+0x234>
 801bd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bd60:	eeb1 6a47 	vneg.f32	s12, s14
 801bd64:	ee70 6a67 	vsub.f32	s13, s0, s15
 801bd68:	ee16 2a90 	vmov	r2, s13
 801bd6c:	dc1c      	bgt.n	801bda8 <__ieee754_rem_pio2f+0x114>
 801bd6e:	495a      	ldr	r1, [pc, #360]	; (801bed8 <__ieee754_rem_pio2f+0x244>)
 801bd70:	1e47      	subs	r7, r0, #1
 801bd72:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801bd76:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801bd7a:	428b      	cmp	r3, r1
 801bd7c:	d014      	beq.n	801bda8 <__ieee754_rem_pio2f+0x114>
 801bd7e:	6022      	str	r2, [r4, #0]
 801bd80:	ed94 7a00 	vldr	s14, [r4]
 801bd84:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bd88:	2e00      	cmp	r6, #0
 801bd8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bd8e:	ed84 0a01 	vstr	s0, [r4, #4]
 801bd92:	dab0      	bge.n	801bcf6 <__ieee754_rem_pio2f+0x62>
 801bd94:	eeb1 7a47 	vneg.f32	s14, s14
 801bd98:	eeb1 0a40 	vneg.f32	s0, s0
 801bd9c:	ed84 7a00 	vstr	s14, [r4]
 801bda0:	ed84 0a01 	vstr	s0, [r4, #4]
 801bda4:	4240      	negs	r0, r0
 801bda6:	e7a6      	b.n	801bcf6 <__ieee754_rem_pio2f+0x62>
 801bda8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801bdac:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801bdb0:	2908      	cmp	r1, #8
 801bdb2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801bdb6:	dde2      	ble.n	801bd7e <__ieee754_rem_pio2f+0xea>
 801bdb8:	eddf 5a42 	vldr	s11, [pc, #264]	; 801bec4 <__ieee754_rem_pio2f+0x230>
 801bdbc:	eef0 6a40 	vmov.f32	s13, s0
 801bdc0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801bdc4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801bdc8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801bdcc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801becc <__ieee754_rem_pio2f+0x238>
 801bdd0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801bdd4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801bdd8:	ee15 2a90 	vmov	r2, s11
 801bddc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801bde0:	1a5b      	subs	r3, r3, r1
 801bde2:	2b19      	cmp	r3, #25
 801bde4:	dc04      	bgt.n	801bdf0 <__ieee754_rem_pio2f+0x15c>
 801bde6:	edc4 5a00 	vstr	s11, [r4]
 801bdea:	eeb0 0a66 	vmov.f32	s0, s13
 801bdee:	e7c7      	b.n	801bd80 <__ieee754_rem_pio2f+0xec>
 801bdf0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801bedc <__ieee754_rem_pio2f+0x248>
 801bdf4:	eeb0 0a66 	vmov.f32	s0, s13
 801bdf8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801bdfc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801be00:	eddf 6a37 	vldr	s13, [pc, #220]	; 801bee0 <__ieee754_rem_pio2f+0x24c>
 801be04:	eee6 7a25 	vfma.f32	s15, s12, s11
 801be08:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801be0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801be10:	ed84 7a00 	vstr	s14, [r4]
 801be14:	e7b4      	b.n	801bd80 <__ieee754_rem_pio2f+0xec>
 801be16:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801be1a:	db06      	blt.n	801be2a <__ieee754_rem_pio2f+0x196>
 801be1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801be20:	edc0 7a01 	vstr	s15, [r0, #4]
 801be24:	edc0 7a00 	vstr	s15, [r0]
 801be28:	e742      	b.n	801bcb0 <__ieee754_rem_pio2f+0x1c>
 801be2a:	15ea      	asrs	r2, r5, #23
 801be2c:	3a86      	subs	r2, #134	; 0x86
 801be2e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801be32:	ee07 3a90 	vmov	s15, r3
 801be36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be3a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801bee4 <__ieee754_rem_pio2f+0x250>
 801be3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be46:	ed8d 7a03 	vstr	s14, [sp, #12]
 801be4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801be4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801be52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be5a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801be5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801be62:	eef5 7a40 	vcmp.f32	s15, #0.0
 801be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be6a:	edcd 7a05 	vstr	s15, [sp, #20]
 801be6e:	d11e      	bne.n	801beae <__ieee754_rem_pio2f+0x21a>
 801be70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801be74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be78:	bf14      	ite	ne
 801be7a:	2302      	movne	r3, #2
 801be7c:	2301      	moveq	r3, #1
 801be7e:	491a      	ldr	r1, [pc, #104]	; (801bee8 <__ieee754_rem_pio2f+0x254>)
 801be80:	9101      	str	r1, [sp, #4]
 801be82:	2102      	movs	r1, #2
 801be84:	9100      	str	r1, [sp, #0]
 801be86:	a803      	add	r0, sp, #12
 801be88:	4621      	mov	r1, r4
 801be8a:	f000 fc9b 	bl	801c7c4 <__kernel_rem_pio2f>
 801be8e:	2e00      	cmp	r6, #0
 801be90:	f6bf af31 	bge.w	801bcf6 <__ieee754_rem_pio2f+0x62>
 801be94:	edd4 7a00 	vldr	s15, [r4]
 801be98:	eef1 7a67 	vneg.f32	s15, s15
 801be9c:	edc4 7a00 	vstr	s15, [r4]
 801bea0:	edd4 7a01 	vldr	s15, [r4, #4]
 801bea4:	eef1 7a67 	vneg.f32	s15, s15
 801bea8:	edc4 7a01 	vstr	s15, [r4, #4]
 801beac:	e77a      	b.n	801bda4 <__ieee754_rem_pio2f+0x110>
 801beae:	2303      	movs	r3, #3
 801beb0:	e7e5      	b.n	801be7e <__ieee754_rem_pio2f+0x1ea>
 801beb2:	bf00      	nop
 801beb4:	3f490fd8 	.word	0x3f490fd8
 801beb8:	4016cbe3 	.word	0x4016cbe3
 801bebc:	3fc90f80 	.word	0x3fc90f80
 801bec0:	3fc90fd0 	.word	0x3fc90fd0
 801bec4:	37354400 	.word	0x37354400
 801bec8:	37354443 	.word	0x37354443
 801becc:	2e85a308 	.word	0x2e85a308
 801bed0:	43490f80 	.word	0x43490f80
 801bed4:	3f22f984 	.word	0x3f22f984
 801bed8:	080289b0 	.word	0x080289b0
 801bedc:	2e85a300 	.word	0x2e85a300
 801bee0:	248d3132 	.word	0x248d3132
 801bee4:	43800000 	.word	0x43800000
 801bee8:	08028a30 	.word	0x08028a30

0801beec <fabsf>:
 801beec:	ee10 3a10 	vmov	r3, s0
 801bef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bef4:	ee00 3a10 	vmov	s0, r3
 801bef8:	4770      	bx	lr
 801befa:	0000      	movs	r0, r0
 801befc:	0000      	movs	r0, r0
	...

0801bf00 <scalbn>:
 801bf00:	b570      	push	{r4, r5, r6, lr}
 801bf02:	ec55 4b10 	vmov	r4, r5, d0
 801bf06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801bf0a:	4606      	mov	r6, r0
 801bf0c:	462b      	mov	r3, r5
 801bf0e:	b999      	cbnz	r1, 801bf38 <scalbn+0x38>
 801bf10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bf14:	4323      	orrs	r3, r4
 801bf16:	d03f      	beq.n	801bf98 <scalbn+0x98>
 801bf18:	4b35      	ldr	r3, [pc, #212]	; (801bff0 <scalbn+0xf0>)
 801bf1a:	4629      	mov	r1, r5
 801bf1c:	ee10 0a10 	vmov	r0, s0
 801bf20:	2200      	movs	r2, #0
 801bf22:	f7e4 fb99 	bl	8000658 <__aeabi_dmul>
 801bf26:	4b33      	ldr	r3, [pc, #204]	; (801bff4 <scalbn+0xf4>)
 801bf28:	429e      	cmp	r6, r3
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	460d      	mov	r5, r1
 801bf2e:	da10      	bge.n	801bf52 <scalbn+0x52>
 801bf30:	a327      	add	r3, pc, #156	; (adr r3, 801bfd0 <scalbn+0xd0>)
 801bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf36:	e01f      	b.n	801bf78 <scalbn+0x78>
 801bf38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bf3c:	4291      	cmp	r1, r2
 801bf3e:	d10c      	bne.n	801bf5a <scalbn+0x5a>
 801bf40:	ee10 2a10 	vmov	r2, s0
 801bf44:	4620      	mov	r0, r4
 801bf46:	4629      	mov	r1, r5
 801bf48:	f7e4 f9d0 	bl	80002ec <__adddf3>
 801bf4c:	4604      	mov	r4, r0
 801bf4e:	460d      	mov	r5, r1
 801bf50:	e022      	b.n	801bf98 <scalbn+0x98>
 801bf52:	460b      	mov	r3, r1
 801bf54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801bf58:	3936      	subs	r1, #54	; 0x36
 801bf5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801bf5e:	4296      	cmp	r6, r2
 801bf60:	dd0d      	ble.n	801bf7e <scalbn+0x7e>
 801bf62:	2d00      	cmp	r5, #0
 801bf64:	a11c      	add	r1, pc, #112	; (adr r1, 801bfd8 <scalbn+0xd8>)
 801bf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf6a:	da02      	bge.n	801bf72 <scalbn+0x72>
 801bf6c:	a11c      	add	r1, pc, #112	; (adr r1, 801bfe0 <scalbn+0xe0>)
 801bf6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf72:	a319      	add	r3, pc, #100	; (adr r3, 801bfd8 <scalbn+0xd8>)
 801bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf78:	f7e4 fb6e 	bl	8000658 <__aeabi_dmul>
 801bf7c:	e7e6      	b.n	801bf4c <scalbn+0x4c>
 801bf7e:	1872      	adds	r2, r6, r1
 801bf80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bf84:	428a      	cmp	r2, r1
 801bf86:	dcec      	bgt.n	801bf62 <scalbn+0x62>
 801bf88:	2a00      	cmp	r2, #0
 801bf8a:	dd08      	ble.n	801bf9e <scalbn+0x9e>
 801bf8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bf90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bf94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bf98:	ec45 4b10 	vmov	d0, r4, r5
 801bf9c:	bd70      	pop	{r4, r5, r6, pc}
 801bf9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bfa2:	da08      	bge.n	801bfb6 <scalbn+0xb6>
 801bfa4:	2d00      	cmp	r5, #0
 801bfa6:	a10a      	add	r1, pc, #40	; (adr r1, 801bfd0 <scalbn+0xd0>)
 801bfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfac:	dac0      	bge.n	801bf30 <scalbn+0x30>
 801bfae:	a10e      	add	r1, pc, #56	; (adr r1, 801bfe8 <scalbn+0xe8>)
 801bfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfb4:	e7bc      	b.n	801bf30 <scalbn+0x30>
 801bfb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bfba:	3236      	adds	r2, #54	; 0x36
 801bfbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bfc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bfc4:	4620      	mov	r0, r4
 801bfc6:	4b0c      	ldr	r3, [pc, #48]	; (801bff8 <scalbn+0xf8>)
 801bfc8:	2200      	movs	r2, #0
 801bfca:	e7d5      	b.n	801bf78 <scalbn+0x78>
 801bfcc:	f3af 8000 	nop.w
 801bfd0:	c2f8f359 	.word	0xc2f8f359
 801bfd4:	01a56e1f 	.word	0x01a56e1f
 801bfd8:	8800759c 	.word	0x8800759c
 801bfdc:	7e37e43c 	.word	0x7e37e43c
 801bfe0:	8800759c 	.word	0x8800759c
 801bfe4:	fe37e43c 	.word	0xfe37e43c
 801bfe8:	c2f8f359 	.word	0xc2f8f359
 801bfec:	81a56e1f 	.word	0x81a56e1f
 801bff0:	43500000 	.word	0x43500000
 801bff4:	ffff3cb0 	.word	0xffff3cb0
 801bff8:	3c900000 	.word	0x3c900000

0801bffc <with_errno>:
 801bffc:	b570      	push	{r4, r5, r6, lr}
 801bffe:	4604      	mov	r4, r0
 801c000:	460d      	mov	r5, r1
 801c002:	4616      	mov	r6, r2
 801c004:	f002 f806 	bl	801e014 <__errno>
 801c008:	4629      	mov	r1, r5
 801c00a:	6006      	str	r6, [r0, #0]
 801c00c:	4620      	mov	r0, r4
 801c00e:	bd70      	pop	{r4, r5, r6, pc}

0801c010 <xflow>:
 801c010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c012:	4614      	mov	r4, r2
 801c014:	461d      	mov	r5, r3
 801c016:	b108      	cbz	r0, 801c01c <xflow+0xc>
 801c018:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c01c:	e9cd 2300 	strd	r2, r3, [sp]
 801c020:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c024:	4620      	mov	r0, r4
 801c026:	4629      	mov	r1, r5
 801c028:	f7e4 fb16 	bl	8000658 <__aeabi_dmul>
 801c02c:	2222      	movs	r2, #34	; 0x22
 801c02e:	b003      	add	sp, #12
 801c030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c034:	f7ff bfe2 	b.w	801bffc <with_errno>

0801c038 <__math_uflow>:
 801c038:	b508      	push	{r3, lr}
 801c03a:	2200      	movs	r2, #0
 801c03c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c040:	f7ff ffe6 	bl	801c010 <xflow>
 801c044:	ec41 0b10 	vmov	d0, r0, r1
 801c048:	bd08      	pop	{r3, pc}

0801c04a <__math_oflow>:
 801c04a:	b508      	push	{r3, lr}
 801c04c:	2200      	movs	r2, #0
 801c04e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c052:	f7ff ffdd 	bl	801c010 <xflow>
 801c056:	ec41 0b10 	vmov	d0, r0, r1
 801c05a:	bd08      	pop	{r3, pc}

0801c05c <scalbnf>:
 801c05c:	ee10 3a10 	vmov	r3, s0
 801c060:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c064:	d02b      	beq.n	801c0be <scalbnf+0x62>
 801c066:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c06a:	d302      	bcc.n	801c072 <scalbnf+0x16>
 801c06c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c070:	4770      	bx	lr
 801c072:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c076:	d123      	bne.n	801c0c0 <scalbnf+0x64>
 801c078:	4b24      	ldr	r3, [pc, #144]	; (801c10c <scalbnf+0xb0>)
 801c07a:	eddf 7a25 	vldr	s15, [pc, #148]	; 801c110 <scalbnf+0xb4>
 801c07e:	4298      	cmp	r0, r3
 801c080:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c084:	db17      	blt.n	801c0b6 <scalbnf+0x5a>
 801c086:	ee10 3a10 	vmov	r3, s0
 801c08a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c08e:	3a19      	subs	r2, #25
 801c090:	f24c 3150 	movw	r1, #50000	; 0xc350
 801c094:	4288      	cmp	r0, r1
 801c096:	dd15      	ble.n	801c0c4 <scalbnf+0x68>
 801c098:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801c114 <scalbnf+0xb8>
 801c09c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801c118 <scalbnf+0xbc>
 801c0a0:	ee10 3a10 	vmov	r3, s0
 801c0a4:	eeb0 7a67 	vmov.f32	s14, s15
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	bfb8      	it	lt
 801c0ac:	eef0 7a66 	vmovlt.f32	s15, s13
 801c0b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 801c0b4:	4770      	bx	lr
 801c0b6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801c11c <scalbnf+0xc0>
 801c0ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c0be:	4770      	bx	lr
 801c0c0:	0dd2      	lsrs	r2, r2, #23
 801c0c2:	e7e5      	b.n	801c090 <scalbnf+0x34>
 801c0c4:	4410      	add	r0, r2
 801c0c6:	28fe      	cmp	r0, #254	; 0xfe
 801c0c8:	dce6      	bgt.n	801c098 <scalbnf+0x3c>
 801c0ca:	2800      	cmp	r0, #0
 801c0cc:	dd06      	ble.n	801c0dc <scalbnf+0x80>
 801c0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c0d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c0d6:	ee00 3a10 	vmov	s0, r3
 801c0da:	4770      	bx	lr
 801c0dc:	f110 0f16 	cmn.w	r0, #22
 801c0e0:	da09      	bge.n	801c0f6 <scalbnf+0x9a>
 801c0e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801c11c <scalbnf+0xc0>
 801c0e6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801c120 <scalbnf+0xc4>
 801c0ea:	ee10 3a10 	vmov	r3, s0
 801c0ee:	eeb0 7a67 	vmov.f32	s14, s15
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	e7d9      	b.n	801c0aa <scalbnf+0x4e>
 801c0f6:	3019      	adds	r0, #25
 801c0f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c0fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c100:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801c124 <scalbnf+0xc8>
 801c104:	ee07 3a90 	vmov	s15, r3
 801c108:	e7d7      	b.n	801c0ba <scalbnf+0x5e>
 801c10a:	bf00      	nop
 801c10c:	ffff3cb0 	.word	0xffff3cb0
 801c110:	4c000000 	.word	0x4c000000
 801c114:	7149f2ca 	.word	0x7149f2ca
 801c118:	f149f2ca 	.word	0xf149f2ca
 801c11c:	0da24260 	.word	0x0da24260
 801c120:	8da24260 	.word	0x8da24260
 801c124:	33000000 	.word	0x33000000

0801c128 <__kernel_rem_pio2>:
 801c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c12c:	ed2d 8b02 	vpush	{d8}
 801c130:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801c134:	f112 0f14 	cmn.w	r2, #20
 801c138:	9306      	str	r3, [sp, #24]
 801c13a:	9104      	str	r1, [sp, #16]
 801c13c:	4bc2      	ldr	r3, [pc, #776]	; (801c448 <__kernel_rem_pio2+0x320>)
 801c13e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801c140:	9009      	str	r0, [sp, #36]	; 0x24
 801c142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c146:	9300      	str	r3, [sp, #0]
 801c148:	9b06      	ldr	r3, [sp, #24]
 801c14a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c14e:	bfa8      	it	ge
 801c150:	1ed4      	subge	r4, r2, #3
 801c152:	9305      	str	r3, [sp, #20]
 801c154:	bfb2      	itee	lt
 801c156:	2400      	movlt	r4, #0
 801c158:	2318      	movge	r3, #24
 801c15a:	fb94 f4f3 	sdivge	r4, r4, r3
 801c15e:	f06f 0317 	mvn.w	r3, #23
 801c162:	fb04 3303 	mla	r3, r4, r3, r3
 801c166:	eb03 0a02 	add.w	sl, r3, r2
 801c16a:	9b00      	ldr	r3, [sp, #0]
 801c16c:	9a05      	ldr	r2, [sp, #20]
 801c16e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801c438 <__kernel_rem_pio2+0x310>
 801c172:	eb03 0802 	add.w	r8, r3, r2
 801c176:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801c178:	1aa7      	subs	r7, r4, r2
 801c17a:	ae20      	add	r6, sp, #128	; 0x80
 801c17c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801c180:	2500      	movs	r5, #0
 801c182:	4545      	cmp	r5, r8
 801c184:	dd13      	ble.n	801c1ae <__kernel_rem_pio2+0x86>
 801c186:	9b06      	ldr	r3, [sp, #24]
 801c188:	aa20      	add	r2, sp, #128	; 0x80
 801c18a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801c18e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801c192:	f04f 0800 	mov.w	r8, #0
 801c196:	9b00      	ldr	r3, [sp, #0]
 801c198:	4598      	cmp	r8, r3
 801c19a:	dc31      	bgt.n	801c200 <__kernel_rem_pio2+0xd8>
 801c19c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801c438 <__kernel_rem_pio2+0x310>
 801c1a0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801c1a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c1a8:	462f      	mov	r7, r5
 801c1aa:	2600      	movs	r6, #0
 801c1ac:	e01b      	b.n	801c1e6 <__kernel_rem_pio2+0xbe>
 801c1ae:	42ef      	cmn	r7, r5
 801c1b0:	d407      	bmi.n	801c1c2 <__kernel_rem_pio2+0x9a>
 801c1b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801c1b6:	f7e4 f9e5 	bl	8000584 <__aeabi_i2d>
 801c1ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 801c1be:	3501      	adds	r5, #1
 801c1c0:	e7df      	b.n	801c182 <__kernel_rem_pio2+0x5a>
 801c1c2:	ec51 0b18 	vmov	r0, r1, d8
 801c1c6:	e7f8      	b.n	801c1ba <__kernel_rem_pio2+0x92>
 801c1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c1cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801c1d0:	f7e4 fa42 	bl	8000658 <__aeabi_dmul>
 801c1d4:	4602      	mov	r2, r0
 801c1d6:	460b      	mov	r3, r1
 801c1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1dc:	f7e4 f886 	bl	80002ec <__adddf3>
 801c1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1e4:	3601      	adds	r6, #1
 801c1e6:	9b05      	ldr	r3, [sp, #20]
 801c1e8:	429e      	cmp	r6, r3
 801c1ea:	f1a7 0708 	sub.w	r7, r7, #8
 801c1ee:	ddeb      	ble.n	801c1c8 <__kernel_rem_pio2+0xa0>
 801c1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c1f4:	f108 0801 	add.w	r8, r8, #1
 801c1f8:	ecab 7b02 	vstmia	fp!, {d7}
 801c1fc:	3508      	adds	r5, #8
 801c1fe:	e7ca      	b.n	801c196 <__kernel_rem_pio2+0x6e>
 801c200:	9b00      	ldr	r3, [sp, #0]
 801c202:	aa0c      	add	r2, sp, #48	; 0x30
 801c204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c208:	930b      	str	r3, [sp, #44]	; 0x2c
 801c20a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801c20c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c210:	9c00      	ldr	r4, [sp, #0]
 801c212:	930a      	str	r3, [sp, #40]	; 0x28
 801c214:	00e3      	lsls	r3, r4, #3
 801c216:	9308      	str	r3, [sp, #32]
 801c218:	ab98      	add	r3, sp, #608	; 0x260
 801c21a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c21e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801c222:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801c226:	ab70      	add	r3, sp, #448	; 0x1c0
 801c228:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801c22c:	46c3      	mov	fp, r8
 801c22e:	46a1      	mov	r9, r4
 801c230:	f1b9 0f00 	cmp.w	r9, #0
 801c234:	f1a5 0508 	sub.w	r5, r5, #8
 801c238:	dc77      	bgt.n	801c32a <__kernel_rem_pio2+0x202>
 801c23a:	ec47 6b10 	vmov	d0, r6, r7
 801c23e:	4650      	mov	r0, sl
 801c240:	f7ff fe5e 	bl	801bf00 <scalbn>
 801c244:	ec57 6b10 	vmov	r6, r7, d0
 801c248:	2200      	movs	r2, #0
 801c24a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c24e:	ee10 0a10 	vmov	r0, s0
 801c252:	4639      	mov	r1, r7
 801c254:	f7e4 fa00 	bl	8000658 <__aeabi_dmul>
 801c258:	ec41 0b10 	vmov	d0, r0, r1
 801c25c:	f7fd fec4 	bl	8019fe8 <floor>
 801c260:	4b7a      	ldr	r3, [pc, #488]	; (801c44c <__kernel_rem_pio2+0x324>)
 801c262:	ec51 0b10 	vmov	r0, r1, d0
 801c266:	2200      	movs	r2, #0
 801c268:	f7e4 f9f6 	bl	8000658 <__aeabi_dmul>
 801c26c:	4602      	mov	r2, r0
 801c26e:	460b      	mov	r3, r1
 801c270:	4630      	mov	r0, r6
 801c272:	4639      	mov	r1, r7
 801c274:	f7e4 f838 	bl	80002e8 <__aeabi_dsub>
 801c278:	460f      	mov	r7, r1
 801c27a:	4606      	mov	r6, r0
 801c27c:	f7e4 fc9c 	bl	8000bb8 <__aeabi_d2iz>
 801c280:	9002      	str	r0, [sp, #8]
 801c282:	f7e4 f97f 	bl	8000584 <__aeabi_i2d>
 801c286:	4602      	mov	r2, r0
 801c288:	460b      	mov	r3, r1
 801c28a:	4630      	mov	r0, r6
 801c28c:	4639      	mov	r1, r7
 801c28e:	f7e4 f82b 	bl	80002e8 <__aeabi_dsub>
 801c292:	f1ba 0f00 	cmp.w	sl, #0
 801c296:	4606      	mov	r6, r0
 801c298:	460f      	mov	r7, r1
 801c29a:	dd6d      	ble.n	801c378 <__kernel_rem_pio2+0x250>
 801c29c:	1e61      	subs	r1, r4, #1
 801c29e:	ab0c      	add	r3, sp, #48	; 0x30
 801c2a0:	9d02      	ldr	r5, [sp, #8]
 801c2a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c2a6:	f1ca 0018 	rsb	r0, sl, #24
 801c2aa:	fa43 f200 	asr.w	r2, r3, r0
 801c2ae:	4415      	add	r5, r2
 801c2b0:	4082      	lsls	r2, r0
 801c2b2:	1a9b      	subs	r3, r3, r2
 801c2b4:	aa0c      	add	r2, sp, #48	; 0x30
 801c2b6:	9502      	str	r5, [sp, #8]
 801c2b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c2bc:	f1ca 0217 	rsb	r2, sl, #23
 801c2c0:	fa43 fb02 	asr.w	fp, r3, r2
 801c2c4:	f1bb 0f00 	cmp.w	fp, #0
 801c2c8:	dd65      	ble.n	801c396 <__kernel_rem_pio2+0x26e>
 801c2ca:	9b02      	ldr	r3, [sp, #8]
 801c2cc:	2200      	movs	r2, #0
 801c2ce:	3301      	adds	r3, #1
 801c2d0:	9302      	str	r3, [sp, #8]
 801c2d2:	4615      	mov	r5, r2
 801c2d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801c2d8:	4294      	cmp	r4, r2
 801c2da:	f300 809f 	bgt.w	801c41c <__kernel_rem_pio2+0x2f4>
 801c2de:	f1ba 0f00 	cmp.w	sl, #0
 801c2e2:	dd07      	ble.n	801c2f4 <__kernel_rem_pio2+0x1cc>
 801c2e4:	f1ba 0f01 	cmp.w	sl, #1
 801c2e8:	f000 80c1 	beq.w	801c46e <__kernel_rem_pio2+0x346>
 801c2ec:	f1ba 0f02 	cmp.w	sl, #2
 801c2f0:	f000 80c7 	beq.w	801c482 <__kernel_rem_pio2+0x35a>
 801c2f4:	f1bb 0f02 	cmp.w	fp, #2
 801c2f8:	d14d      	bne.n	801c396 <__kernel_rem_pio2+0x26e>
 801c2fa:	4632      	mov	r2, r6
 801c2fc:	463b      	mov	r3, r7
 801c2fe:	4954      	ldr	r1, [pc, #336]	; (801c450 <__kernel_rem_pio2+0x328>)
 801c300:	2000      	movs	r0, #0
 801c302:	f7e3 fff1 	bl	80002e8 <__aeabi_dsub>
 801c306:	4606      	mov	r6, r0
 801c308:	460f      	mov	r7, r1
 801c30a:	2d00      	cmp	r5, #0
 801c30c:	d043      	beq.n	801c396 <__kernel_rem_pio2+0x26e>
 801c30e:	4650      	mov	r0, sl
 801c310:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801c440 <__kernel_rem_pio2+0x318>
 801c314:	f7ff fdf4 	bl	801bf00 <scalbn>
 801c318:	4630      	mov	r0, r6
 801c31a:	4639      	mov	r1, r7
 801c31c:	ec53 2b10 	vmov	r2, r3, d0
 801c320:	f7e3 ffe2 	bl	80002e8 <__aeabi_dsub>
 801c324:	4606      	mov	r6, r0
 801c326:	460f      	mov	r7, r1
 801c328:	e035      	b.n	801c396 <__kernel_rem_pio2+0x26e>
 801c32a:	4b4a      	ldr	r3, [pc, #296]	; (801c454 <__kernel_rem_pio2+0x32c>)
 801c32c:	2200      	movs	r2, #0
 801c32e:	4630      	mov	r0, r6
 801c330:	4639      	mov	r1, r7
 801c332:	f7e4 f991 	bl	8000658 <__aeabi_dmul>
 801c336:	f7e4 fc3f 	bl	8000bb8 <__aeabi_d2iz>
 801c33a:	f7e4 f923 	bl	8000584 <__aeabi_i2d>
 801c33e:	4602      	mov	r2, r0
 801c340:	460b      	mov	r3, r1
 801c342:	ec43 2b18 	vmov	d8, r2, r3
 801c346:	4b44      	ldr	r3, [pc, #272]	; (801c458 <__kernel_rem_pio2+0x330>)
 801c348:	2200      	movs	r2, #0
 801c34a:	f7e4 f985 	bl	8000658 <__aeabi_dmul>
 801c34e:	4602      	mov	r2, r0
 801c350:	460b      	mov	r3, r1
 801c352:	4630      	mov	r0, r6
 801c354:	4639      	mov	r1, r7
 801c356:	f7e3 ffc7 	bl	80002e8 <__aeabi_dsub>
 801c35a:	f7e4 fc2d 	bl	8000bb8 <__aeabi_d2iz>
 801c35e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c362:	f84b 0b04 	str.w	r0, [fp], #4
 801c366:	ec51 0b18 	vmov	r0, r1, d8
 801c36a:	f7e3 ffbf 	bl	80002ec <__adddf3>
 801c36e:	f109 39ff 	add.w	r9, r9, #4294967295
 801c372:	4606      	mov	r6, r0
 801c374:	460f      	mov	r7, r1
 801c376:	e75b      	b.n	801c230 <__kernel_rem_pio2+0x108>
 801c378:	d106      	bne.n	801c388 <__kernel_rem_pio2+0x260>
 801c37a:	1e63      	subs	r3, r4, #1
 801c37c:	aa0c      	add	r2, sp, #48	; 0x30
 801c37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c382:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801c386:	e79d      	b.n	801c2c4 <__kernel_rem_pio2+0x19c>
 801c388:	4b34      	ldr	r3, [pc, #208]	; (801c45c <__kernel_rem_pio2+0x334>)
 801c38a:	2200      	movs	r2, #0
 801c38c:	f7e4 fbea 	bl	8000b64 <__aeabi_dcmpge>
 801c390:	2800      	cmp	r0, #0
 801c392:	d140      	bne.n	801c416 <__kernel_rem_pio2+0x2ee>
 801c394:	4683      	mov	fp, r0
 801c396:	2200      	movs	r2, #0
 801c398:	2300      	movs	r3, #0
 801c39a:	4630      	mov	r0, r6
 801c39c:	4639      	mov	r1, r7
 801c39e:	f7e4 fbc3 	bl	8000b28 <__aeabi_dcmpeq>
 801c3a2:	2800      	cmp	r0, #0
 801c3a4:	f000 80c1 	beq.w	801c52a <__kernel_rem_pio2+0x402>
 801c3a8:	1e65      	subs	r5, r4, #1
 801c3aa:	462b      	mov	r3, r5
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	9900      	ldr	r1, [sp, #0]
 801c3b0:	428b      	cmp	r3, r1
 801c3b2:	da6d      	bge.n	801c490 <__kernel_rem_pio2+0x368>
 801c3b4:	2a00      	cmp	r2, #0
 801c3b6:	f000 808a 	beq.w	801c4ce <__kernel_rem_pio2+0x3a6>
 801c3ba:	ab0c      	add	r3, sp, #48	; 0x30
 801c3bc:	f1aa 0a18 	sub.w	sl, sl, #24
 801c3c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	f000 80ae 	beq.w	801c526 <__kernel_rem_pio2+0x3fe>
 801c3ca:	4650      	mov	r0, sl
 801c3cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801c440 <__kernel_rem_pio2+0x318>
 801c3d0:	f7ff fd96 	bl	801bf00 <scalbn>
 801c3d4:	1c6b      	adds	r3, r5, #1
 801c3d6:	00da      	lsls	r2, r3, #3
 801c3d8:	9205      	str	r2, [sp, #20]
 801c3da:	ec57 6b10 	vmov	r6, r7, d0
 801c3de:	aa70      	add	r2, sp, #448	; 0x1c0
 801c3e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801c454 <__kernel_rem_pio2+0x32c>
 801c3e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801c3e8:	462c      	mov	r4, r5
 801c3ea:	f04f 0800 	mov.w	r8, #0
 801c3ee:	2c00      	cmp	r4, #0
 801c3f0:	f280 80d4 	bge.w	801c59c <__kernel_rem_pio2+0x474>
 801c3f4:	462c      	mov	r4, r5
 801c3f6:	2c00      	cmp	r4, #0
 801c3f8:	f2c0 8102 	blt.w	801c600 <__kernel_rem_pio2+0x4d8>
 801c3fc:	4b18      	ldr	r3, [pc, #96]	; (801c460 <__kernel_rem_pio2+0x338>)
 801c3fe:	461e      	mov	r6, r3
 801c400:	ab70      	add	r3, sp, #448	; 0x1c0
 801c402:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801c406:	1b2b      	subs	r3, r5, r4
 801c408:	f04f 0900 	mov.w	r9, #0
 801c40c:	f04f 0a00 	mov.w	sl, #0
 801c410:	2700      	movs	r7, #0
 801c412:	9306      	str	r3, [sp, #24]
 801c414:	e0e6      	b.n	801c5e4 <__kernel_rem_pio2+0x4bc>
 801c416:	f04f 0b02 	mov.w	fp, #2
 801c41a:	e756      	b.n	801c2ca <__kernel_rem_pio2+0x1a2>
 801c41c:	f8d8 3000 	ldr.w	r3, [r8]
 801c420:	bb05      	cbnz	r5, 801c464 <__kernel_rem_pio2+0x33c>
 801c422:	b123      	cbz	r3, 801c42e <__kernel_rem_pio2+0x306>
 801c424:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801c428:	f8c8 3000 	str.w	r3, [r8]
 801c42c:	2301      	movs	r3, #1
 801c42e:	3201      	adds	r2, #1
 801c430:	f108 0804 	add.w	r8, r8, #4
 801c434:	461d      	mov	r5, r3
 801c436:	e74f      	b.n	801c2d8 <__kernel_rem_pio2+0x1b0>
	...
 801c444:	3ff00000 	.word	0x3ff00000
 801c448:	08028d88 	.word	0x08028d88
 801c44c:	40200000 	.word	0x40200000
 801c450:	3ff00000 	.word	0x3ff00000
 801c454:	3e700000 	.word	0x3e700000
 801c458:	41700000 	.word	0x41700000
 801c45c:	3fe00000 	.word	0x3fe00000
 801c460:	08028d48 	.word	0x08028d48
 801c464:	1acb      	subs	r3, r1, r3
 801c466:	f8c8 3000 	str.w	r3, [r8]
 801c46a:	462b      	mov	r3, r5
 801c46c:	e7df      	b.n	801c42e <__kernel_rem_pio2+0x306>
 801c46e:	1e62      	subs	r2, r4, #1
 801c470:	ab0c      	add	r3, sp, #48	; 0x30
 801c472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c476:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c47a:	a90c      	add	r1, sp, #48	; 0x30
 801c47c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801c480:	e738      	b.n	801c2f4 <__kernel_rem_pio2+0x1cc>
 801c482:	1e62      	subs	r2, r4, #1
 801c484:	ab0c      	add	r3, sp, #48	; 0x30
 801c486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c48a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c48e:	e7f4      	b.n	801c47a <__kernel_rem_pio2+0x352>
 801c490:	a90c      	add	r1, sp, #48	; 0x30
 801c492:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801c496:	3b01      	subs	r3, #1
 801c498:	430a      	orrs	r2, r1
 801c49a:	e788      	b.n	801c3ae <__kernel_rem_pio2+0x286>
 801c49c:	3301      	adds	r3, #1
 801c49e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801c4a2:	2900      	cmp	r1, #0
 801c4a4:	d0fa      	beq.n	801c49c <__kernel_rem_pio2+0x374>
 801c4a6:	9a08      	ldr	r2, [sp, #32]
 801c4a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801c4ac:	446a      	add	r2, sp
 801c4ae:	3a98      	subs	r2, #152	; 0x98
 801c4b0:	9208      	str	r2, [sp, #32]
 801c4b2:	9a06      	ldr	r2, [sp, #24]
 801c4b4:	a920      	add	r1, sp, #128	; 0x80
 801c4b6:	18a2      	adds	r2, r4, r2
 801c4b8:	18e3      	adds	r3, r4, r3
 801c4ba:	f104 0801 	add.w	r8, r4, #1
 801c4be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801c4c2:	9302      	str	r3, [sp, #8]
 801c4c4:	9b02      	ldr	r3, [sp, #8]
 801c4c6:	4543      	cmp	r3, r8
 801c4c8:	da04      	bge.n	801c4d4 <__kernel_rem_pio2+0x3ac>
 801c4ca:	461c      	mov	r4, r3
 801c4cc:	e6a2      	b.n	801c214 <__kernel_rem_pio2+0xec>
 801c4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c4d0:	2301      	movs	r3, #1
 801c4d2:	e7e4      	b.n	801c49e <__kernel_rem_pio2+0x376>
 801c4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801c4da:	f7e4 f853 	bl	8000584 <__aeabi_i2d>
 801c4de:	e8e5 0102 	strd	r0, r1, [r5], #8
 801c4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4e4:	46ab      	mov	fp, r5
 801c4e6:	461c      	mov	r4, r3
 801c4e8:	f04f 0900 	mov.w	r9, #0
 801c4ec:	2600      	movs	r6, #0
 801c4ee:	2700      	movs	r7, #0
 801c4f0:	9b05      	ldr	r3, [sp, #20]
 801c4f2:	4599      	cmp	r9, r3
 801c4f4:	dd06      	ble.n	801c504 <__kernel_rem_pio2+0x3dc>
 801c4f6:	9b08      	ldr	r3, [sp, #32]
 801c4f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 801c4fc:	f108 0801 	add.w	r8, r8, #1
 801c500:	9308      	str	r3, [sp, #32]
 801c502:	e7df      	b.n	801c4c4 <__kernel_rem_pio2+0x39c>
 801c504:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801c508:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801c50c:	f7e4 f8a4 	bl	8000658 <__aeabi_dmul>
 801c510:	4602      	mov	r2, r0
 801c512:	460b      	mov	r3, r1
 801c514:	4630      	mov	r0, r6
 801c516:	4639      	mov	r1, r7
 801c518:	f7e3 fee8 	bl	80002ec <__adddf3>
 801c51c:	f109 0901 	add.w	r9, r9, #1
 801c520:	4606      	mov	r6, r0
 801c522:	460f      	mov	r7, r1
 801c524:	e7e4      	b.n	801c4f0 <__kernel_rem_pio2+0x3c8>
 801c526:	3d01      	subs	r5, #1
 801c528:	e747      	b.n	801c3ba <__kernel_rem_pio2+0x292>
 801c52a:	ec47 6b10 	vmov	d0, r6, r7
 801c52e:	f1ca 0000 	rsb	r0, sl, #0
 801c532:	f7ff fce5 	bl	801bf00 <scalbn>
 801c536:	ec57 6b10 	vmov	r6, r7, d0
 801c53a:	4ba0      	ldr	r3, [pc, #640]	; (801c7bc <__kernel_rem_pio2+0x694>)
 801c53c:	ee10 0a10 	vmov	r0, s0
 801c540:	2200      	movs	r2, #0
 801c542:	4639      	mov	r1, r7
 801c544:	f7e4 fb0e 	bl	8000b64 <__aeabi_dcmpge>
 801c548:	b1f8      	cbz	r0, 801c58a <__kernel_rem_pio2+0x462>
 801c54a:	4b9d      	ldr	r3, [pc, #628]	; (801c7c0 <__kernel_rem_pio2+0x698>)
 801c54c:	2200      	movs	r2, #0
 801c54e:	4630      	mov	r0, r6
 801c550:	4639      	mov	r1, r7
 801c552:	f7e4 f881 	bl	8000658 <__aeabi_dmul>
 801c556:	f7e4 fb2f 	bl	8000bb8 <__aeabi_d2iz>
 801c55a:	4680      	mov	r8, r0
 801c55c:	f7e4 f812 	bl	8000584 <__aeabi_i2d>
 801c560:	4b96      	ldr	r3, [pc, #600]	; (801c7bc <__kernel_rem_pio2+0x694>)
 801c562:	2200      	movs	r2, #0
 801c564:	f7e4 f878 	bl	8000658 <__aeabi_dmul>
 801c568:	460b      	mov	r3, r1
 801c56a:	4602      	mov	r2, r0
 801c56c:	4639      	mov	r1, r7
 801c56e:	4630      	mov	r0, r6
 801c570:	f7e3 feba 	bl	80002e8 <__aeabi_dsub>
 801c574:	f7e4 fb20 	bl	8000bb8 <__aeabi_d2iz>
 801c578:	1c65      	adds	r5, r4, #1
 801c57a:	ab0c      	add	r3, sp, #48	; 0x30
 801c57c:	f10a 0a18 	add.w	sl, sl, #24
 801c580:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c584:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801c588:	e71f      	b.n	801c3ca <__kernel_rem_pio2+0x2a2>
 801c58a:	4630      	mov	r0, r6
 801c58c:	4639      	mov	r1, r7
 801c58e:	f7e4 fb13 	bl	8000bb8 <__aeabi_d2iz>
 801c592:	ab0c      	add	r3, sp, #48	; 0x30
 801c594:	4625      	mov	r5, r4
 801c596:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801c59a:	e716      	b.n	801c3ca <__kernel_rem_pio2+0x2a2>
 801c59c:	ab0c      	add	r3, sp, #48	; 0x30
 801c59e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801c5a2:	f7e3 ffef 	bl	8000584 <__aeabi_i2d>
 801c5a6:	4632      	mov	r2, r6
 801c5a8:	463b      	mov	r3, r7
 801c5aa:	f7e4 f855 	bl	8000658 <__aeabi_dmul>
 801c5ae:	4642      	mov	r2, r8
 801c5b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801c5b4:	464b      	mov	r3, r9
 801c5b6:	4630      	mov	r0, r6
 801c5b8:	4639      	mov	r1, r7
 801c5ba:	f7e4 f84d 	bl	8000658 <__aeabi_dmul>
 801c5be:	3c01      	subs	r4, #1
 801c5c0:	4606      	mov	r6, r0
 801c5c2:	460f      	mov	r7, r1
 801c5c4:	e713      	b.n	801c3ee <__kernel_rem_pio2+0x2c6>
 801c5c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801c5ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801c5ce:	f7e4 f843 	bl	8000658 <__aeabi_dmul>
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	460b      	mov	r3, r1
 801c5d6:	4648      	mov	r0, r9
 801c5d8:	4651      	mov	r1, sl
 801c5da:	f7e3 fe87 	bl	80002ec <__adddf3>
 801c5de:	3701      	adds	r7, #1
 801c5e0:	4681      	mov	r9, r0
 801c5e2:	468a      	mov	sl, r1
 801c5e4:	9b00      	ldr	r3, [sp, #0]
 801c5e6:	429f      	cmp	r7, r3
 801c5e8:	dc02      	bgt.n	801c5f0 <__kernel_rem_pio2+0x4c8>
 801c5ea:	9b06      	ldr	r3, [sp, #24]
 801c5ec:	429f      	cmp	r7, r3
 801c5ee:	ddea      	ble.n	801c5c6 <__kernel_rem_pio2+0x49e>
 801c5f0:	9a06      	ldr	r2, [sp, #24]
 801c5f2:	ab48      	add	r3, sp, #288	; 0x120
 801c5f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801c5f8:	e9c6 9a00 	strd	r9, sl, [r6]
 801c5fc:	3c01      	subs	r4, #1
 801c5fe:	e6fa      	b.n	801c3f6 <__kernel_rem_pio2+0x2ce>
 801c600:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801c602:	2b02      	cmp	r3, #2
 801c604:	dc0b      	bgt.n	801c61e <__kernel_rem_pio2+0x4f6>
 801c606:	2b00      	cmp	r3, #0
 801c608:	dc39      	bgt.n	801c67e <__kernel_rem_pio2+0x556>
 801c60a:	d05d      	beq.n	801c6c8 <__kernel_rem_pio2+0x5a0>
 801c60c:	9b02      	ldr	r3, [sp, #8]
 801c60e:	f003 0007 	and.w	r0, r3, #7
 801c612:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801c616:	ecbd 8b02 	vpop	{d8}
 801c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c61e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801c620:	2b03      	cmp	r3, #3
 801c622:	d1f3      	bne.n	801c60c <__kernel_rem_pio2+0x4e4>
 801c624:	9b05      	ldr	r3, [sp, #20]
 801c626:	9500      	str	r5, [sp, #0]
 801c628:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801c62c:	eb0d 0403 	add.w	r4, sp, r3
 801c630:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801c634:	46a2      	mov	sl, r4
 801c636:	9b00      	ldr	r3, [sp, #0]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	f1aa 0a08 	sub.w	sl, sl, #8
 801c63e:	dc69      	bgt.n	801c714 <__kernel_rem_pio2+0x5ec>
 801c640:	46aa      	mov	sl, r5
 801c642:	f1ba 0f01 	cmp.w	sl, #1
 801c646:	f1a4 0408 	sub.w	r4, r4, #8
 801c64a:	f300 8083 	bgt.w	801c754 <__kernel_rem_pio2+0x62c>
 801c64e:	9c05      	ldr	r4, [sp, #20]
 801c650:	ab48      	add	r3, sp, #288	; 0x120
 801c652:	441c      	add	r4, r3
 801c654:	2000      	movs	r0, #0
 801c656:	2100      	movs	r1, #0
 801c658:	2d01      	cmp	r5, #1
 801c65a:	f300 809a 	bgt.w	801c792 <__kernel_rem_pio2+0x66a>
 801c65e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801c662:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801c666:	f1bb 0f00 	cmp.w	fp, #0
 801c66a:	f040 8098 	bne.w	801c79e <__kernel_rem_pio2+0x676>
 801c66e:	9b04      	ldr	r3, [sp, #16]
 801c670:	e9c3 7800 	strd	r7, r8, [r3]
 801c674:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801c678:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801c67c:	e7c6      	b.n	801c60c <__kernel_rem_pio2+0x4e4>
 801c67e:	9e05      	ldr	r6, [sp, #20]
 801c680:	ab48      	add	r3, sp, #288	; 0x120
 801c682:	441e      	add	r6, r3
 801c684:	462c      	mov	r4, r5
 801c686:	2000      	movs	r0, #0
 801c688:	2100      	movs	r1, #0
 801c68a:	2c00      	cmp	r4, #0
 801c68c:	da33      	bge.n	801c6f6 <__kernel_rem_pio2+0x5ce>
 801c68e:	f1bb 0f00 	cmp.w	fp, #0
 801c692:	d036      	beq.n	801c702 <__kernel_rem_pio2+0x5da>
 801c694:	4602      	mov	r2, r0
 801c696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c69a:	9c04      	ldr	r4, [sp, #16]
 801c69c:	e9c4 2300 	strd	r2, r3, [r4]
 801c6a0:	4602      	mov	r2, r0
 801c6a2:	460b      	mov	r3, r1
 801c6a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801c6a8:	f7e3 fe1e 	bl	80002e8 <__aeabi_dsub>
 801c6ac:	ae4a      	add	r6, sp, #296	; 0x128
 801c6ae:	2401      	movs	r4, #1
 801c6b0:	42a5      	cmp	r5, r4
 801c6b2:	da29      	bge.n	801c708 <__kernel_rem_pio2+0x5e0>
 801c6b4:	f1bb 0f00 	cmp.w	fp, #0
 801c6b8:	d002      	beq.n	801c6c0 <__kernel_rem_pio2+0x598>
 801c6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c6be:	4619      	mov	r1, r3
 801c6c0:	9b04      	ldr	r3, [sp, #16]
 801c6c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801c6c6:	e7a1      	b.n	801c60c <__kernel_rem_pio2+0x4e4>
 801c6c8:	9c05      	ldr	r4, [sp, #20]
 801c6ca:	ab48      	add	r3, sp, #288	; 0x120
 801c6cc:	441c      	add	r4, r3
 801c6ce:	2000      	movs	r0, #0
 801c6d0:	2100      	movs	r1, #0
 801c6d2:	2d00      	cmp	r5, #0
 801c6d4:	da09      	bge.n	801c6ea <__kernel_rem_pio2+0x5c2>
 801c6d6:	f1bb 0f00 	cmp.w	fp, #0
 801c6da:	d002      	beq.n	801c6e2 <__kernel_rem_pio2+0x5ba>
 801c6dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c6e0:	4619      	mov	r1, r3
 801c6e2:	9b04      	ldr	r3, [sp, #16]
 801c6e4:	e9c3 0100 	strd	r0, r1, [r3]
 801c6e8:	e790      	b.n	801c60c <__kernel_rem_pio2+0x4e4>
 801c6ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c6ee:	f7e3 fdfd 	bl	80002ec <__adddf3>
 801c6f2:	3d01      	subs	r5, #1
 801c6f4:	e7ed      	b.n	801c6d2 <__kernel_rem_pio2+0x5aa>
 801c6f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801c6fa:	f7e3 fdf7 	bl	80002ec <__adddf3>
 801c6fe:	3c01      	subs	r4, #1
 801c700:	e7c3      	b.n	801c68a <__kernel_rem_pio2+0x562>
 801c702:	4602      	mov	r2, r0
 801c704:	460b      	mov	r3, r1
 801c706:	e7c8      	b.n	801c69a <__kernel_rem_pio2+0x572>
 801c708:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801c70c:	f7e3 fdee 	bl	80002ec <__adddf3>
 801c710:	3401      	adds	r4, #1
 801c712:	e7cd      	b.n	801c6b0 <__kernel_rem_pio2+0x588>
 801c714:	e9da 8900 	ldrd	r8, r9, [sl]
 801c718:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801c71c:	9b00      	ldr	r3, [sp, #0]
 801c71e:	3b01      	subs	r3, #1
 801c720:	9300      	str	r3, [sp, #0]
 801c722:	4632      	mov	r2, r6
 801c724:	463b      	mov	r3, r7
 801c726:	4640      	mov	r0, r8
 801c728:	4649      	mov	r1, r9
 801c72a:	f7e3 fddf 	bl	80002ec <__adddf3>
 801c72e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c732:	4602      	mov	r2, r0
 801c734:	460b      	mov	r3, r1
 801c736:	4640      	mov	r0, r8
 801c738:	4649      	mov	r1, r9
 801c73a:	f7e3 fdd5 	bl	80002e8 <__aeabi_dsub>
 801c73e:	4632      	mov	r2, r6
 801c740:	463b      	mov	r3, r7
 801c742:	f7e3 fdd3 	bl	80002ec <__adddf3>
 801c746:	ed9d 7b06 	vldr	d7, [sp, #24]
 801c74a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801c74e:	ed8a 7b00 	vstr	d7, [sl]
 801c752:	e770      	b.n	801c636 <__kernel_rem_pio2+0x50e>
 801c754:	e9d4 8900 	ldrd	r8, r9, [r4]
 801c758:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801c75c:	4640      	mov	r0, r8
 801c75e:	4632      	mov	r2, r6
 801c760:	463b      	mov	r3, r7
 801c762:	4649      	mov	r1, r9
 801c764:	f7e3 fdc2 	bl	80002ec <__adddf3>
 801c768:	e9cd 0100 	strd	r0, r1, [sp]
 801c76c:	4602      	mov	r2, r0
 801c76e:	460b      	mov	r3, r1
 801c770:	4640      	mov	r0, r8
 801c772:	4649      	mov	r1, r9
 801c774:	f7e3 fdb8 	bl	80002e8 <__aeabi_dsub>
 801c778:	4632      	mov	r2, r6
 801c77a:	463b      	mov	r3, r7
 801c77c:	f7e3 fdb6 	bl	80002ec <__adddf3>
 801c780:	ed9d 7b00 	vldr	d7, [sp]
 801c784:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801c788:	ed84 7b00 	vstr	d7, [r4]
 801c78c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c790:	e757      	b.n	801c642 <__kernel_rem_pio2+0x51a>
 801c792:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801c796:	f7e3 fda9 	bl	80002ec <__adddf3>
 801c79a:	3d01      	subs	r5, #1
 801c79c:	e75c      	b.n	801c658 <__kernel_rem_pio2+0x530>
 801c79e:	9b04      	ldr	r3, [sp, #16]
 801c7a0:	9a04      	ldr	r2, [sp, #16]
 801c7a2:	601f      	str	r7, [r3, #0]
 801c7a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801c7a8:	605c      	str	r4, [r3, #4]
 801c7aa:	609d      	str	r5, [r3, #8]
 801c7ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801c7b0:	60d3      	str	r3, [r2, #12]
 801c7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c7b6:	6110      	str	r0, [r2, #16]
 801c7b8:	6153      	str	r3, [r2, #20]
 801c7ba:	e727      	b.n	801c60c <__kernel_rem_pio2+0x4e4>
 801c7bc:	41700000 	.word	0x41700000
 801c7c0:	3e700000 	.word	0x3e700000

0801c7c4 <__kernel_rem_pio2f>:
 801c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c8:	ed2d 8b04 	vpush	{d8-d9}
 801c7cc:	b0d9      	sub	sp, #356	; 0x164
 801c7ce:	4688      	mov	r8, r1
 801c7d0:	9002      	str	r0, [sp, #8]
 801c7d2:	49b8      	ldr	r1, [pc, #736]	; (801cab4 <__kernel_rem_pio2f+0x2f0>)
 801c7d4:	9866      	ldr	r0, [sp, #408]	; 0x198
 801c7d6:	9301      	str	r3, [sp, #4]
 801c7d8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801c7dc:	9901      	ldr	r1, [sp, #4]
 801c7de:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801c7e0:	f101 3bff 	add.w	fp, r1, #4294967295
 801c7e4:	1d11      	adds	r1, r2, #4
 801c7e6:	db25      	blt.n	801c834 <__kernel_rem_pio2f+0x70>
 801c7e8:	1ed0      	subs	r0, r2, #3
 801c7ea:	bf48      	it	mi
 801c7ec:	1d10      	addmi	r0, r2, #4
 801c7ee:	10c0      	asrs	r0, r0, #3
 801c7f0:	1c45      	adds	r5, r0, #1
 801c7f2:	00e9      	lsls	r1, r5, #3
 801c7f4:	eba0 070b 	sub.w	r7, r0, fp
 801c7f8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801c7fc:	9103      	str	r1, [sp, #12]
 801c7fe:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801c802:	eb0a 0c0b 	add.w	ip, sl, fp
 801c806:	ae1c      	add	r6, sp, #112	; 0x70
 801c808:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801c80c:	2400      	movs	r4, #0
 801c80e:	4564      	cmp	r4, ip
 801c810:	dd12      	ble.n	801c838 <__kernel_rem_pio2f+0x74>
 801c812:	9901      	ldr	r1, [sp, #4]
 801c814:	ac1c      	add	r4, sp, #112	; 0x70
 801c816:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c81a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801c81e:	f04f 0c00 	mov.w	ip, #0
 801c822:	45d4      	cmp	ip, sl
 801c824:	dc27      	bgt.n	801c876 <__kernel_rem_pio2f+0xb2>
 801c826:	f8dd e008 	ldr.w	lr, [sp, #8]
 801c82a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801c82e:	4627      	mov	r7, r4
 801c830:	2600      	movs	r6, #0
 801c832:	e016      	b.n	801c862 <__kernel_rem_pio2f+0x9e>
 801c834:	2000      	movs	r0, #0
 801c836:	e7db      	b.n	801c7f0 <__kernel_rem_pio2f+0x2c>
 801c838:	42e7      	cmn	r7, r4
 801c83a:	bf5d      	ittte	pl
 801c83c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801c840:	ee07 1a90 	vmovpl	s15, r1
 801c844:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801c848:	eef0 7a47 	vmovmi.f32	s15, s14
 801c84c:	ece6 7a01 	vstmia	r6!, {s15}
 801c850:	3401      	adds	r4, #1
 801c852:	e7dc      	b.n	801c80e <__kernel_rem_pio2f+0x4a>
 801c854:	ecfe 6a01 	vldmia	lr!, {s13}
 801c858:	ed97 7a00 	vldr	s14, [r7]
 801c85c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c860:	3601      	adds	r6, #1
 801c862:	455e      	cmp	r6, fp
 801c864:	f1a7 0704 	sub.w	r7, r7, #4
 801c868:	ddf4      	ble.n	801c854 <__kernel_rem_pio2f+0x90>
 801c86a:	ece9 7a01 	vstmia	r9!, {s15}
 801c86e:	f10c 0c01 	add.w	ip, ip, #1
 801c872:	3404      	adds	r4, #4
 801c874:	e7d5      	b.n	801c822 <__kernel_rem_pio2f+0x5e>
 801c876:	a908      	add	r1, sp, #32
 801c878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c87c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801c880:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801cac0 <__kernel_rem_pio2f+0x2fc>
 801c884:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801cabc <__kernel_rem_pio2f+0x2f8>
 801c888:	9105      	str	r1, [sp, #20]
 801c88a:	9304      	str	r3, [sp, #16]
 801c88c:	4656      	mov	r6, sl
 801c88e:	00b3      	lsls	r3, r6, #2
 801c890:	9306      	str	r3, [sp, #24]
 801c892:	ab58      	add	r3, sp, #352	; 0x160
 801c894:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801c898:	ac08      	add	r4, sp, #32
 801c89a:	ab44      	add	r3, sp, #272	; 0x110
 801c89c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801c8a0:	46a4      	mov	ip, r4
 801c8a2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801c8a6:	4637      	mov	r7, r6
 801c8a8:	2f00      	cmp	r7, #0
 801c8aa:	f1a0 0004 	sub.w	r0, r0, #4
 801c8ae:	dc4a      	bgt.n	801c946 <__kernel_rem_pio2f+0x182>
 801c8b0:	4628      	mov	r0, r5
 801c8b2:	9207      	str	r2, [sp, #28]
 801c8b4:	f7ff fbd2 	bl	801c05c <scalbnf>
 801c8b8:	eeb0 8a40 	vmov.f32	s16, s0
 801c8bc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801c8c0:	ee28 0a00 	vmul.f32	s0, s16, s0
 801c8c4:	f000 f9f0 	bl	801cca8 <floorf>
 801c8c8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801c8cc:	eea0 8a67 	vfms.f32	s16, s0, s15
 801c8d0:	2d00      	cmp	r5, #0
 801c8d2:	9a07      	ldr	r2, [sp, #28]
 801c8d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801c8d8:	ee17 9a90 	vmov	r9, s15
 801c8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c8e0:	ee38 8a67 	vsub.f32	s16, s16, s15
 801c8e4:	dd41      	ble.n	801c96a <__kernel_rem_pio2f+0x1a6>
 801c8e6:	f106 3cff 	add.w	ip, r6, #4294967295
 801c8ea:	ab08      	add	r3, sp, #32
 801c8ec:	f1c5 0e08 	rsb	lr, r5, #8
 801c8f0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801c8f4:	fa47 f00e 	asr.w	r0, r7, lr
 801c8f8:	4481      	add	r9, r0
 801c8fa:	fa00 f00e 	lsl.w	r0, r0, lr
 801c8fe:	1a3f      	subs	r7, r7, r0
 801c900:	f1c5 0007 	rsb	r0, r5, #7
 801c904:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801c908:	4107      	asrs	r7, r0
 801c90a:	2f00      	cmp	r7, #0
 801c90c:	dd3c      	ble.n	801c988 <__kernel_rem_pio2f+0x1c4>
 801c90e:	f04f 0e00 	mov.w	lr, #0
 801c912:	f109 0901 	add.w	r9, r9, #1
 801c916:	4671      	mov	r1, lr
 801c918:	4576      	cmp	r6, lr
 801c91a:	dc67      	bgt.n	801c9ec <__kernel_rem_pio2f+0x228>
 801c91c:	2d00      	cmp	r5, #0
 801c91e:	dd03      	ble.n	801c928 <__kernel_rem_pio2f+0x164>
 801c920:	2d01      	cmp	r5, #1
 801c922:	d074      	beq.n	801ca0e <__kernel_rem_pio2f+0x24a>
 801c924:	2d02      	cmp	r5, #2
 801c926:	d07b      	beq.n	801ca20 <__kernel_rem_pio2f+0x25c>
 801c928:	2f02      	cmp	r7, #2
 801c92a:	d12d      	bne.n	801c988 <__kernel_rem_pio2f+0x1c4>
 801c92c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c930:	ee30 8a48 	vsub.f32	s16, s0, s16
 801c934:	b341      	cbz	r1, 801c988 <__kernel_rem_pio2f+0x1c4>
 801c936:	4628      	mov	r0, r5
 801c938:	9207      	str	r2, [sp, #28]
 801c93a:	f7ff fb8f 	bl	801c05c <scalbnf>
 801c93e:	9a07      	ldr	r2, [sp, #28]
 801c940:	ee38 8a40 	vsub.f32	s16, s16, s0
 801c944:	e020      	b.n	801c988 <__kernel_rem_pio2f+0x1c4>
 801c946:	ee60 7a28 	vmul.f32	s15, s0, s17
 801c94a:	3f01      	subs	r7, #1
 801c94c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c954:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801c958:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c95c:	ecac 0a01 	vstmia	ip!, {s0}
 801c960:	ed90 0a00 	vldr	s0, [r0]
 801c964:	ee37 0a80 	vadd.f32	s0, s15, s0
 801c968:	e79e      	b.n	801c8a8 <__kernel_rem_pio2f+0xe4>
 801c96a:	d105      	bne.n	801c978 <__kernel_rem_pio2f+0x1b4>
 801c96c:	1e70      	subs	r0, r6, #1
 801c96e:	ab08      	add	r3, sp, #32
 801c970:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801c974:	11ff      	asrs	r7, r7, #7
 801c976:	e7c8      	b.n	801c90a <__kernel_rem_pio2f+0x146>
 801c978:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c97c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c984:	da30      	bge.n	801c9e8 <__kernel_rem_pio2f+0x224>
 801c986:	2700      	movs	r7, #0
 801c988:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c990:	f040 809a 	bne.w	801cac8 <__kernel_rem_pio2f+0x304>
 801c994:	1e74      	subs	r4, r6, #1
 801c996:	46a4      	mov	ip, r4
 801c998:	2100      	movs	r1, #0
 801c99a:	45d4      	cmp	ip, sl
 801c99c:	da47      	bge.n	801ca2e <__kernel_rem_pio2f+0x26a>
 801c99e:	2900      	cmp	r1, #0
 801c9a0:	d063      	beq.n	801ca6a <__kernel_rem_pio2f+0x2a6>
 801c9a2:	ab08      	add	r3, sp, #32
 801c9a4:	3d08      	subs	r5, #8
 801c9a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d07f      	beq.n	801caae <__kernel_rem_pio2f+0x2ea>
 801c9ae:	4628      	mov	r0, r5
 801c9b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c9b4:	f7ff fb52 	bl	801c05c <scalbnf>
 801c9b8:	1c63      	adds	r3, r4, #1
 801c9ba:	aa44      	add	r2, sp, #272	; 0x110
 801c9bc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801cac0 <__kernel_rem_pio2f+0x2fc>
 801c9c0:	0099      	lsls	r1, r3, #2
 801c9c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801c9c6:	4623      	mov	r3, r4
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	f280 80ad 	bge.w	801cb28 <__kernel_rem_pio2f+0x364>
 801c9ce:	4623      	mov	r3, r4
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	f2c0 80cb 	blt.w	801cb6c <__kernel_rem_pio2f+0x3a8>
 801c9d6:	aa44      	add	r2, sp, #272	; 0x110
 801c9d8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801c9dc:	4e36      	ldr	r6, [pc, #216]	; (801cab8 <__kernel_rem_pio2f+0x2f4>)
 801c9de:	eddf 7a39 	vldr	s15, [pc, #228]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801c9e2:	2000      	movs	r0, #0
 801c9e4:	1ae2      	subs	r2, r4, r3
 801c9e6:	e0b6      	b.n	801cb56 <__kernel_rem_pio2f+0x392>
 801c9e8:	2702      	movs	r7, #2
 801c9ea:	e790      	b.n	801c90e <__kernel_rem_pio2f+0x14a>
 801c9ec:	6820      	ldr	r0, [r4, #0]
 801c9ee:	b949      	cbnz	r1, 801ca04 <__kernel_rem_pio2f+0x240>
 801c9f0:	b118      	cbz	r0, 801c9fa <__kernel_rem_pio2f+0x236>
 801c9f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801c9f6:	6020      	str	r0, [r4, #0]
 801c9f8:	2001      	movs	r0, #1
 801c9fa:	f10e 0e01 	add.w	lr, lr, #1
 801c9fe:	3404      	adds	r4, #4
 801ca00:	4601      	mov	r1, r0
 801ca02:	e789      	b.n	801c918 <__kernel_rem_pio2f+0x154>
 801ca04:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ca08:	6020      	str	r0, [r4, #0]
 801ca0a:	4608      	mov	r0, r1
 801ca0c:	e7f5      	b.n	801c9fa <__kernel_rem_pio2f+0x236>
 801ca0e:	1e74      	subs	r4, r6, #1
 801ca10:	ab08      	add	r3, sp, #32
 801ca12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ca16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ca1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ca1e:	e783      	b.n	801c928 <__kernel_rem_pio2f+0x164>
 801ca20:	1e74      	subs	r4, r6, #1
 801ca22:	ab08      	add	r3, sp, #32
 801ca24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ca28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ca2c:	e7f5      	b.n	801ca1a <__kernel_rem_pio2f+0x256>
 801ca2e:	ab08      	add	r3, sp, #32
 801ca30:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801ca34:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ca38:	4301      	orrs	r1, r0
 801ca3a:	e7ae      	b.n	801c99a <__kernel_rem_pio2f+0x1d6>
 801ca3c:	3001      	adds	r0, #1
 801ca3e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801ca42:	2f00      	cmp	r7, #0
 801ca44:	d0fa      	beq.n	801ca3c <__kernel_rem_pio2f+0x278>
 801ca46:	9b06      	ldr	r3, [sp, #24]
 801ca48:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ca4c:	eb0d 0403 	add.w	r4, sp, r3
 801ca50:	9b01      	ldr	r3, [sp, #4]
 801ca52:	18f7      	adds	r7, r6, r3
 801ca54:	ab1c      	add	r3, sp, #112	; 0x70
 801ca56:	f106 0c01 	add.w	ip, r6, #1
 801ca5a:	3c4c      	subs	r4, #76	; 0x4c
 801ca5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ca60:	4430      	add	r0, r6
 801ca62:	4560      	cmp	r0, ip
 801ca64:	da04      	bge.n	801ca70 <__kernel_rem_pio2f+0x2ac>
 801ca66:	4606      	mov	r6, r0
 801ca68:	e711      	b.n	801c88e <__kernel_rem_pio2f+0xca>
 801ca6a:	9c05      	ldr	r4, [sp, #20]
 801ca6c:	2001      	movs	r0, #1
 801ca6e:	e7e6      	b.n	801ca3e <__kernel_rem_pio2f+0x27a>
 801ca70:	9b04      	ldr	r3, [sp, #16]
 801ca72:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ca76:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ca7a:	9306      	str	r3, [sp, #24]
 801ca7c:	ee07 3a90 	vmov	s15, r3
 801ca80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ca84:	2600      	movs	r6, #0
 801ca86:	ece7 7a01 	vstmia	r7!, {s15}
 801ca8a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801ca8e:	46b9      	mov	r9, r7
 801ca90:	455e      	cmp	r6, fp
 801ca92:	dd04      	ble.n	801ca9e <__kernel_rem_pio2f+0x2da>
 801ca94:	ece4 7a01 	vstmia	r4!, {s15}
 801ca98:	f10c 0c01 	add.w	ip, ip, #1
 801ca9c:	e7e1      	b.n	801ca62 <__kernel_rem_pio2f+0x29e>
 801ca9e:	ecfe 6a01 	vldmia	lr!, {s13}
 801caa2:	ed39 7a01 	vldmdb	r9!, {s14}
 801caa6:	3601      	adds	r6, #1
 801caa8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801caac:	e7f0      	b.n	801ca90 <__kernel_rem_pio2f+0x2cc>
 801caae:	3c01      	subs	r4, #1
 801cab0:	e777      	b.n	801c9a2 <__kernel_rem_pio2f+0x1de>
 801cab2:	bf00      	nop
 801cab4:	08028dc4 	.word	0x08028dc4
 801cab8:	08028d98 	.word	0x08028d98
 801cabc:	43800000 	.word	0x43800000
 801cac0:	3b800000 	.word	0x3b800000
 801cac4:	00000000 	.word	0x00000000
 801cac8:	9b03      	ldr	r3, [sp, #12]
 801caca:	eeb0 0a48 	vmov.f32	s0, s16
 801cace:	1a98      	subs	r0, r3, r2
 801cad0:	f7ff fac4 	bl	801c05c <scalbnf>
 801cad4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801cabc <__kernel_rem_pio2f+0x2f8>
 801cad8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801cadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae0:	db19      	blt.n	801cb16 <__kernel_rem_pio2f+0x352>
 801cae2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801cac0 <__kernel_rem_pio2f+0x2fc>
 801cae6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801caea:	aa08      	add	r2, sp, #32
 801caec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801caf0:	1c74      	adds	r4, r6, #1
 801caf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801caf6:	3508      	adds	r5, #8
 801caf8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801cafc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cb00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801cb04:	ee10 3a10 	vmov	r3, s0
 801cb08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801cb0c:	ee17 3a90 	vmov	r3, s15
 801cb10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801cb14:	e74b      	b.n	801c9ae <__kernel_rem_pio2f+0x1ea>
 801cb16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801cb1a:	aa08      	add	r2, sp, #32
 801cb1c:	ee10 3a10 	vmov	r3, s0
 801cb20:	4634      	mov	r4, r6
 801cb22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801cb26:	e742      	b.n	801c9ae <__kernel_rem_pio2f+0x1ea>
 801cb28:	a808      	add	r0, sp, #32
 801cb2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801cb2e:	9001      	str	r0, [sp, #4]
 801cb30:	ee07 0a90 	vmov	s15, r0
 801cb34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb38:	3b01      	subs	r3, #1
 801cb3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801cb3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801cb42:	ed62 7a01 	vstmdb	r2!, {s15}
 801cb46:	e73f      	b.n	801c9c8 <__kernel_rem_pio2f+0x204>
 801cb48:	ecf6 6a01 	vldmia	r6!, {s13}
 801cb4c:	ecb5 7a01 	vldmia	r5!, {s14}
 801cb50:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cb54:	3001      	adds	r0, #1
 801cb56:	4550      	cmp	r0, sl
 801cb58:	dc01      	bgt.n	801cb5e <__kernel_rem_pio2f+0x39a>
 801cb5a:	4290      	cmp	r0, r2
 801cb5c:	ddf4      	ble.n	801cb48 <__kernel_rem_pio2f+0x384>
 801cb5e:	a858      	add	r0, sp, #352	; 0x160
 801cb60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801cb64:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801cb68:	3b01      	subs	r3, #1
 801cb6a:	e731      	b.n	801c9d0 <__kernel_rem_pio2f+0x20c>
 801cb6c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801cb6e:	2b02      	cmp	r3, #2
 801cb70:	dc09      	bgt.n	801cb86 <__kernel_rem_pio2f+0x3c2>
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	dc2b      	bgt.n	801cbce <__kernel_rem_pio2f+0x40a>
 801cb76:	d044      	beq.n	801cc02 <__kernel_rem_pio2f+0x43e>
 801cb78:	f009 0007 	and.w	r0, r9, #7
 801cb7c:	b059      	add	sp, #356	; 0x164
 801cb7e:	ecbd 8b04 	vpop	{d8-d9}
 801cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801cb88:	2b03      	cmp	r3, #3
 801cb8a:	d1f5      	bne.n	801cb78 <__kernel_rem_pio2f+0x3b4>
 801cb8c:	aa30      	add	r2, sp, #192	; 0xc0
 801cb8e:	1f0b      	subs	r3, r1, #4
 801cb90:	4413      	add	r3, r2
 801cb92:	461a      	mov	r2, r3
 801cb94:	4620      	mov	r0, r4
 801cb96:	2800      	cmp	r0, #0
 801cb98:	f1a2 0204 	sub.w	r2, r2, #4
 801cb9c:	dc52      	bgt.n	801cc44 <__kernel_rem_pio2f+0x480>
 801cb9e:	4622      	mov	r2, r4
 801cba0:	2a01      	cmp	r2, #1
 801cba2:	f1a3 0304 	sub.w	r3, r3, #4
 801cba6:	dc5d      	bgt.n	801cc64 <__kernel_rem_pio2f+0x4a0>
 801cba8:	ab30      	add	r3, sp, #192	; 0xc0
 801cbaa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801cbae:	440b      	add	r3, r1
 801cbb0:	2c01      	cmp	r4, #1
 801cbb2:	dc67      	bgt.n	801cc84 <__kernel_rem_pio2f+0x4c0>
 801cbb4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801cbb8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801cbbc:	2f00      	cmp	r7, #0
 801cbbe:	d167      	bne.n	801cc90 <__kernel_rem_pio2f+0x4cc>
 801cbc0:	edc8 6a00 	vstr	s13, [r8]
 801cbc4:	ed88 7a01 	vstr	s14, [r8, #4]
 801cbc8:	edc8 7a02 	vstr	s15, [r8, #8]
 801cbcc:	e7d4      	b.n	801cb78 <__kernel_rem_pio2f+0x3b4>
 801cbce:	ab30      	add	r3, sp, #192	; 0xc0
 801cbd0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801cbd4:	440b      	add	r3, r1
 801cbd6:	4622      	mov	r2, r4
 801cbd8:	2a00      	cmp	r2, #0
 801cbda:	da24      	bge.n	801cc26 <__kernel_rem_pio2f+0x462>
 801cbdc:	b34f      	cbz	r7, 801cc32 <__kernel_rem_pio2f+0x46e>
 801cbde:	eef1 7a47 	vneg.f32	s15, s14
 801cbe2:	edc8 7a00 	vstr	s15, [r8]
 801cbe6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801cbea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cbee:	aa31      	add	r2, sp, #196	; 0xc4
 801cbf0:	2301      	movs	r3, #1
 801cbf2:	429c      	cmp	r4, r3
 801cbf4:	da20      	bge.n	801cc38 <__kernel_rem_pio2f+0x474>
 801cbf6:	b10f      	cbz	r7, 801cbfc <__kernel_rem_pio2f+0x438>
 801cbf8:	eef1 7a67 	vneg.f32	s15, s15
 801cbfc:	edc8 7a01 	vstr	s15, [r8, #4]
 801cc00:	e7ba      	b.n	801cb78 <__kernel_rem_pio2f+0x3b4>
 801cc02:	ab30      	add	r3, sp, #192	; 0xc0
 801cc04:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801cac4 <__kernel_rem_pio2f+0x300>
 801cc08:	440b      	add	r3, r1
 801cc0a:	2c00      	cmp	r4, #0
 801cc0c:	da05      	bge.n	801cc1a <__kernel_rem_pio2f+0x456>
 801cc0e:	b10f      	cbz	r7, 801cc14 <__kernel_rem_pio2f+0x450>
 801cc10:	eef1 7a67 	vneg.f32	s15, s15
 801cc14:	edc8 7a00 	vstr	s15, [r8]
 801cc18:	e7ae      	b.n	801cb78 <__kernel_rem_pio2f+0x3b4>
 801cc1a:	ed33 7a01 	vldmdb	r3!, {s14}
 801cc1e:	3c01      	subs	r4, #1
 801cc20:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc24:	e7f1      	b.n	801cc0a <__kernel_rem_pio2f+0x446>
 801cc26:	ed73 7a01 	vldmdb	r3!, {s15}
 801cc2a:	3a01      	subs	r2, #1
 801cc2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cc30:	e7d2      	b.n	801cbd8 <__kernel_rem_pio2f+0x414>
 801cc32:	eef0 7a47 	vmov.f32	s15, s14
 801cc36:	e7d4      	b.n	801cbe2 <__kernel_rem_pio2f+0x41e>
 801cc38:	ecb2 7a01 	vldmia	r2!, {s14}
 801cc3c:	3301      	adds	r3, #1
 801cc3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc42:	e7d6      	b.n	801cbf2 <__kernel_rem_pio2f+0x42e>
 801cc44:	edd2 7a00 	vldr	s15, [r2]
 801cc48:	edd2 6a01 	vldr	s13, [r2, #4]
 801cc4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cc50:	3801      	subs	r0, #1
 801cc52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc56:	ed82 7a00 	vstr	s14, [r2]
 801cc5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cc5e:	edc2 7a01 	vstr	s15, [r2, #4]
 801cc62:	e798      	b.n	801cb96 <__kernel_rem_pio2f+0x3d2>
 801cc64:	edd3 7a00 	vldr	s15, [r3]
 801cc68:	edd3 6a01 	vldr	s13, [r3, #4]
 801cc6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801cc70:	3a01      	subs	r2, #1
 801cc72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cc76:	ed83 7a00 	vstr	s14, [r3]
 801cc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cc7e:	edc3 7a01 	vstr	s15, [r3, #4]
 801cc82:	e78d      	b.n	801cba0 <__kernel_rem_pio2f+0x3dc>
 801cc84:	ed33 7a01 	vldmdb	r3!, {s14}
 801cc88:	3c01      	subs	r4, #1
 801cc8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cc8e:	e78f      	b.n	801cbb0 <__kernel_rem_pio2f+0x3ec>
 801cc90:	eef1 6a66 	vneg.f32	s13, s13
 801cc94:	eeb1 7a47 	vneg.f32	s14, s14
 801cc98:	edc8 6a00 	vstr	s13, [r8]
 801cc9c:	ed88 7a01 	vstr	s14, [r8, #4]
 801cca0:	eef1 7a67 	vneg.f32	s15, s15
 801cca4:	e790      	b.n	801cbc8 <__kernel_rem_pio2f+0x404>
 801cca6:	bf00      	nop

0801cca8 <floorf>:
 801cca8:	ee10 3a10 	vmov	r3, s0
 801ccac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ccb0:	3a7f      	subs	r2, #127	; 0x7f
 801ccb2:	2a16      	cmp	r2, #22
 801ccb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ccb8:	dc2a      	bgt.n	801cd10 <floorf+0x68>
 801ccba:	2a00      	cmp	r2, #0
 801ccbc:	da11      	bge.n	801cce2 <floorf+0x3a>
 801ccbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 801cd20 <floorf+0x78>
 801ccc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ccc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ccca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccce:	dd05      	ble.n	801ccdc <floorf+0x34>
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	da23      	bge.n	801cd1c <floorf+0x74>
 801ccd4:	4a13      	ldr	r2, [pc, #76]	; (801cd24 <floorf+0x7c>)
 801ccd6:	2900      	cmp	r1, #0
 801ccd8:	bf18      	it	ne
 801ccda:	4613      	movne	r3, r2
 801ccdc:	ee00 3a10 	vmov	s0, r3
 801cce0:	4770      	bx	lr
 801cce2:	4911      	ldr	r1, [pc, #68]	; (801cd28 <floorf+0x80>)
 801cce4:	4111      	asrs	r1, r2
 801cce6:	420b      	tst	r3, r1
 801cce8:	d0fa      	beq.n	801cce0 <floorf+0x38>
 801ccea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801cd20 <floorf+0x78>
 801ccee:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ccf2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ccf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccfa:	ddef      	ble.n	801ccdc <floorf+0x34>
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	bfbe      	ittt	lt
 801cd00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801cd04:	fa40 f202 	asrlt.w	r2, r0, r2
 801cd08:	189b      	addlt	r3, r3, r2
 801cd0a:	ea23 0301 	bic.w	r3, r3, r1
 801cd0e:	e7e5      	b.n	801ccdc <floorf+0x34>
 801cd10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801cd14:	d3e4      	bcc.n	801cce0 <floorf+0x38>
 801cd16:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cd1a:	4770      	bx	lr
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	e7dd      	b.n	801ccdc <floorf+0x34>
 801cd20:	7149f2ca 	.word	0x7149f2ca
 801cd24:	bf800000 	.word	0xbf800000
 801cd28:	007fffff 	.word	0x007fffff

0801cd2c <abort>:
 801cd2c:	b508      	push	{r3, lr}
 801cd2e:	2006      	movs	r0, #6
 801cd30:	f001 f8fe 	bl	801df30 <raise>
 801cd34:	2001      	movs	r0, #1
 801cd36:	f7f3 fb79 	bl	801042c <_exit>
	...

0801cd3c <__assert_func>:
 801cd3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd3e:	4614      	mov	r4, r2
 801cd40:	461a      	mov	r2, r3
 801cd42:	4b09      	ldr	r3, [pc, #36]	; (801cd68 <__assert_func+0x2c>)
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	4605      	mov	r5, r0
 801cd48:	68d8      	ldr	r0, [r3, #12]
 801cd4a:	b14c      	cbz	r4, 801cd60 <__assert_func+0x24>
 801cd4c:	4b07      	ldr	r3, [pc, #28]	; (801cd6c <__assert_func+0x30>)
 801cd4e:	9100      	str	r1, [sp, #0]
 801cd50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd54:	4906      	ldr	r1, [pc, #24]	; (801cd70 <__assert_func+0x34>)
 801cd56:	462b      	mov	r3, r5
 801cd58:	f000 ffda 	bl	801dd10 <fiprintf>
 801cd5c:	f7ff ffe6 	bl	801cd2c <abort>
 801cd60:	4b04      	ldr	r3, [pc, #16]	; (801cd74 <__assert_func+0x38>)
 801cd62:	461c      	mov	r4, r3
 801cd64:	e7f3      	b.n	801cd4e <__assert_func+0x12>
 801cd66:	bf00      	nop
 801cd68:	2000538c 	.word	0x2000538c
 801cd6c:	08028dd0 	.word	0x08028dd0
 801cd70:	08028ddd 	.word	0x08028ddd
 801cd74:	08028e0b 	.word	0x08028e0b

0801cd78 <atof>:
 801cd78:	2100      	movs	r1, #0
 801cd7a:	f000 bf19 	b.w	801dbb0 <strtod>
	...

0801cd80 <calloc>:
 801cd80:	4b02      	ldr	r3, [pc, #8]	; (801cd8c <calloc+0xc>)
 801cd82:	460a      	mov	r2, r1
 801cd84:	4601      	mov	r1, r0
 801cd86:	6818      	ldr	r0, [r3, #0]
 801cd88:	f000 b802 	b.w	801cd90 <_calloc_r>
 801cd8c:	2000538c 	.word	0x2000538c

0801cd90 <_calloc_r>:
 801cd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cd92:	fba1 2402 	umull	r2, r4, r1, r2
 801cd96:	b94c      	cbnz	r4, 801cdac <_calloc_r+0x1c>
 801cd98:	4611      	mov	r1, r2
 801cd9a:	9201      	str	r2, [sp, #4]
 801cd9c:	f000 f83e 	bl	801ce1c <_malloc_r>
 801cda0:	9a01      	ldr	r2, [sp, #4]
 801cda2:	4605      	mov	r5, r0
 801cda4:	b930      	cbnz	r0, 801cdb4 <_calloc_r+0x24>
 801cda6:	4628      	mov	r0, r5
 801cda8:	b003      	add	sp, #12
 801cdaa:	bd30      	pop	{r4, r5, pc}
 801cdac:	220c      	movs	r2, #12
 801cdae:	6002      	str	r2, [r0, #0]
 801cdb0:	2500      	movs	r5, #0
 801cdb2:	e7f8      	b.n	801cda6 <_calloc_r+0x16>
 801cdb4:	4621      	mov	r1, r4
 801cdb6:	f001 f879 	bl	801deac <memset>
 801cdba:	e7f4      	b.n	801cda6 <_calloc_r+0x16>

0801cdbc <malloc>:
 801cdbc:	4b02      	ldr	r3, [pc, #8]	; (801cdc8 <malloc+0xc>)
 801cdbe:	4601      	mov	r1, r0
 801cdc0:	6818      	ldr	r0, [r3, #0]
 801cdc2:	f000 b82b 	b.w	801ce1c <_malloc_r>
 801cdc6:	bf00      	nop
 801cdc8:	2000538c 	.word	0x2000538c

0801cdcc <free>:
 801cdcc:	4b02      	ldr	r3, [pc, #8]	; (801cdd8 <free+0xc>)
 801cdce:	4601      	mov	r1, r0
 801cdd0:	6818      	ldr	r0, [r3, #0]
 801cdd2:	f001 b95b 	b.w	801e08c <_free_r>
 801cdd6:	bf00      	nop
 801cdd8:	2000538c 	.word	0x2000538c

0801cddc <sbrk_aligned>:
 801cddc:	b570      	push	{r4, r5, r6, lr}
 801cdde:	4e0e      	ldr	r6, [pc, #56]	; (801ce18 <sbrk_aligned+0x3c>)
 801cde0:	460c      	mov	r4, r1
 801cde2:	6831      	ldr	r1, [r6, #0]
 801cde4:	4605      	mov	r5, r0
 801cde6:	b911      	cbnz	r1, 801cdee <sbrk_aligned+0x12>
 801cde8:	f001 f8f2 	bl	801dfd0 <_sbrk_r>
 801cdec:	6030      	str	r0, [r6, #0]
 801cdee:	4621      	mov	r1, r4
 801cdf0:	4628      	mov	r0, r5
 801cdf2:	f001 f8ed 	bl	801dfd0 <_sbrk_r>
 801cdf6:	1c43      	adds	r3, r0, #1
 801cdf8:	d00a      	beq.n	801ce10 <sbrk_aligned+0x34>
 801cdfa:	1cc4      	adds	r4, r0, #3
 801cdfc:	f024 0403 	bic.w	r4, r4, #3
 801ce00:	42a0      	cmp	r0, r4
 801ce02:	d007      	beq.n	801ce14 <sbrk_aligned+0x38>
 801ce04:	1a21      	subs	r1, r4, r0
 801ce06:	4628      	mov	r0, r5
 801ce08:	f001 f8e2 	bl	801dfd0 <_sbrk_r>
 801ce0c:	3001      	adds	r0, #1
 801ce0e:	d101      	bne.n	801ce14 <sbrk_aligned+0x38>
 801ce10:	f04f 34ff 	mov.w	r4, #4294967295
 801ce14:	4620      	mov	r0, r4
 801ce16:	bd70      	pop	{r4, r5, r6, pc}
 801ce18:	200056ac 	.word	0x200056ac

0801ce1c <_malloc_r>:
 801ce1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce20:	1ccd      	adds	r5, r1, #3
 801ce22:	f025 0503 	bic.w	r5, r5, #3
 801ce26:	3508      	adds	r5, #8
 801ce28:	2d0c      	cmp	r5, #12
 801ce2a:	bf38      	it	cc
 801ce2c:	250c      	movcc	r5, #12
 801ce2e:	2d00      	cmp	r5, #0
 801ce30:	4607      	mov	r7, r0
 801ce32:	db01      	blt.n	801ce38 <_malloc_r+0x1c>
 801ce34:	42a9      	cmp	r1, r5
 801ce36:	d905      	bls.n	801ce44 <_malloc_r+0x28>
 801ce38:	230c      	movs	r3, #12
 801ce3a:	603b      	str	r3, [r7, #0]
 801ce3c:	2600      	movs	r6, #0
 801ce3e:	4630      	mov	r0, r6
 801ce40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cf18 <_malloc_r+0xfc>
 801ce48:	f000 f868 	bl	801cf1c <__malloc_lock>
 801ce4c:	f8d8 3000 	ldr.w	r3, [r8]
 801ce50:	461c      	mov	r4, r3
 801ce52:	bb5c      	cbnz	r4, 801ceac <_malloc_r+0x90>
 801ce54:	4629      	mov	r1, r5
 801ce56:	4638      	mov	r0, r7
 801ce58:	f7ff ffc0 	bl	801cddc <sbrk_aligned>
 801ce5c:	1c43      	adds	r3, r0, #1
 801ce5e:	4604      	mov	r4, r0
 801ce60:	d155      	bne.n	801cf0e <_malloc_r+0xf2>
 801ce62:	f8d8 4000 	ldr.w	r4, [r8]
 801ce66:	4626      	mov	r6, r4
 801ce68:	2e00      	cmp	r6, #0
 801ce6a:	d145      	bne.n	801cef8 <_malloc_r+0xdc>
 801ce6c:	2c00      	cmp	r4, #0
 801ce6e:	d048      	beq.n	801cf02 <_malloc_r+0xe6>
 801ce70:	6823      	ldr	r3, [r4, #0]
 801ce72:	4631      	mov	r1, r6
 801ce74:	4638      	mov	r0, r7
 801ce76:	eb04 0903 	add.w	r9, r4, r3
 801ce7a:	f001 f8a9 	bl	801dfd0 <_sbrk_r>
 801ce7e:	4581      	cmp	r9, r0
 801ce80:	d13f      	bne.n	801cf02 <_malloc_r+0xe6>
 801ce82:	6821      	ldr	r1, [r4, #0]
 801ce84:	1a6d      	subs	r5, r5, r1
 801ce86:	4629      	mov	r1, r5
 801ce88:	4638      	mov	r0, r7
 801ce8a:	f7ff ffa7 	bl	801cddc <sbrk_aligned>
 801ce8e:	3001      	adds	r0, #1
 801ce90:	d037      	beq.n	801cf02 <_malloc_r+0xe6>
 801ce92:	6823      	ldr	r3, [r4, #0]
 801ce94:	442b      	add	r3, r5
 801ce96:	6023      	str	r3, [r4, #0]
 801ce98:	f8d8 3000 	ldr.w	r3, [r8]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d038      	beq.n	801cf12 <_malloc_r+0xf6>
 801cea0:	685a      	ldr	r2, [r3, #4]
 801cea2:	42a2      	cmp	r2, r4
 801cea4:	d12b      	bne.n	801cefe <_malloc_r+0xe2>
 801cea6:	2200      	movs	r2, #0
 801cea8:	605a      	str	r2, [r3, #4]
 801ceaa:	e00f      	b.n	801cecc <_malloc_r+0xb0>
 801ceac:	6822      	ldr	r2, [r4, #0]
 801ceae:	1b52      	subs	r2, r2, r5
 801ceb0:	d41f      	bmi.n	801cef2 <_malloc_r+0xd6>
 801ceb2:	2a0b      	cmp	r2, #11
 801ceb4:	d917      	bls.n	801cee6 <_malloc_r+0xca>
 801ceb6:	1961      	adds	r1, r4, r5
 801ceb8:	42a3      	cmp	r3, r4
 801ceba:	6025      	str	r5, [r4, #0]
 801cebc:	bf18      	it	ne
 801cebe:	6059      	strne	r1, [r3, #4]
 801cec0:	6863      	ldr	r3, [r4, #4]
 801cec2:	bf08      	it	eq
 801cec4:	f8c8 1000 	streq.w	r1, [r8]
 801cec8:	5162      	str	r2, [r4, r5]
 801ceca:	604b      	str	r3, [r1, #4]
 801cecc:	4638      	mov	r0, r7
 801cece:	f104 060b 	add.w	r6, r4, #11
 801ced2:	f000 f829 	bl	801cf28 <__malloc_unlock>
 801ced6:	f026 0607 	bic.w	r6, r6, #7
 801ceda:	1d23      	adds	r3, r4, #4
 801cedc:	1af2      	subs	r2, r6, r3
 801cede:	d0ae      	beq.n	801ce3e <_malloc_r+0x22>
 801cee0:	1b9b      	subs	r3, r3, r6
 801cee2:	50a3      	str	r3, [r4, r2]
 801cee4:	e7ab      	b.n	801ce3e <_malloc_r+0x22>
 801cee6:	42a3      	cmp	r3, r4
 801cee8:	6862      	ldr	r2, [r4, #4]
 801ceea:	d1dd      	bne.n	801cea8 <_malloc_r+0x8c>
 801ceec:	f8c8 2000 	str.w	r2, [r8]
 801cef0:	e7ec      	b.n	801cecc <_malloc_r+0xb0>
 801cef2:	4623      	mov	r3, r4
 801cef4:	6864      	ldr	r4, [r4, #4]
 801cef6:	e7ac      	b.n	801ce52 <_malloc_r+0x36>
 801cef8:	4634      	mov	r4, r6
 801cefa:	6876      	ldr	r6, [r6, #4]
 801cefc:	e7b4      	b.n	801ce68 <_malloc_r+0x4c>
 801cefe:	4613      	mov	r3, r2
 801cf00:	e7cc      	b.n	801ce9c <_malloc_r+0x80>
 801cf02:	230c      	movs	r3, #12
 801cf04:	603b      	str	r3, [r7, #0]
 801cf06:	4638      	mov	r0, r7
 801cf08:	f000 f80e 	bl	801cf28 <__malloc_unlock>
 801cf0c:	e797      	b.n	801ce3e <_malloc_r+0x22>
 801cf0e:	6025      	str	r5, [r4, #0]
 801cf10:	e7dc      	b.n	801cecc <_malloc_r+0xb0>
 801cf12:	605b      	str	r3, [r3, #4]
 801cf14:	deff      	udf	#255	; 0xff
 801cf16:	bf00      	nop
 801cf18:	200056a8 	.word	0x200056a8

0801cf1c <__malloc_lock>:
 801cf1c:	4801      	ldr	r0, [pc, #4]	; (801cf24 <__malloc_lock+0x8>)
 801cf1e:	f001 b8a4 	b.w	801e06a <__retarget_lock_acquire_recursive>
 801cf22:	bf00      	nop
 801cf24:	200057f0 	.word	0x200057f0

0801cf28 <__malloc_unlock>:
 801cf28:	4801      	ldr	r0, [pc, #4]	; (801cf30 <__malloc_unlock+0x8>)
 801cf2a:	f001 b89f 	b.w	801e06c <__retarget_lock_release_recursive>
 801cf2e:	bf00      	nop
 801cf30:	200057f0 	.word	0x200057f0

0801cf34 <_realloc_r>:
 801cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf38:	4680      	mov	r8, r0
 801cf3a:	4614      	mov	r4, r2
 801cf3c:	460e      	mov	r6, r1
 801cf3e:	b921      	cbnz	r1, 801cf4a <_realloc_r+0x16>
 801cf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf44:	4611      	mov	r1, r2
 801cf46:	f7ff bf69 	b.w	801ce1c <_malloc_r>
 801cf4a:	b92a      	cbnz	r2, 801cf58 <_realloc_r+0x24>
 801cf4c:	f001 f89e 	bl	801e08c <_free_r>
 801cf50:	4625      	mov	r5, r4
 801cf52:	4628      	mov	r0, r5
 801cf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf58:	f002 f8fb 	bl	801f152 <_malloc_usable_size_r>
 801cf5c:	4284      	cmp	r4, r0
 801cf5e:	4607      	mov	r7, r0
 801cf60:	d802      	bhi.n	801cf68 <_realloc_r+0x34>
 801cf62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cf66:	d812      	bhi.n	801cf8e <_realloc_r+0x5a>
 801cf68:	4621      	mov	r1, r4
 801cf6a:	4640      	mov	r0, r8
 801cf6c:	f7ff ff56 	bl	801ce1c <_malloc_r>
 801cf70:	4605      	mov	r5, r0
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d0ed      	beq.n	801cf52 <_realloc_r+0x1e>
 801cf76:	42bc      	cmp	r4, r7
 801cf78:	4622      	mov	r2, r4
 801cf7a:	4631      	mov	r1, r6
 801cf7c:	bf28      	it	cs
 801cf7e:	463a      	movcs	r2, r7
 801cf80:	f001 f875 	bl	801e06e <memcpy>
 801cf84:	4631      	mov	r1, r6
 801cf86:	4640      	mov	r0, r8
 801cf88:	f001 f880 	bl	801e08c <_free_r>
 801cf8c:	e7e1      	b.n	801cf52 <_realloc_r+0x1e>
 801cf8e:	4635      	mov	r5, r6
 801cf90:	e7df      	b.n	801cf52 <_realloc_r+0x1e>

0801cf92 <sulp>:
 801cf92:	b570      	push	{r4, r5, r6, lr}
 801cf94:	4604      	mov	r4, r0
 801cf96:	460d      	mov	r5, r1
 801cf98:	ec45 4b10 	vmov	d0, r4, r5
 801cf9c:	4616      	mov	r6, r2
 801cf9e:	f001 ff97 	bl	801eed0 <__ulp>
 801cfa2:	ec51 0b10 	vmov	r0, r1, d0
 801cfa6:	b17e      	cbz	r6, 801cfc8 <sulp+0x36>
 801cfa8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cfac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	dd09      	ble.n	801cfc8 <sulp+0x36>
 801cfb4:	051b      	lsls	r3, r3, #20
 801cfb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801cfba:	2400      	movs	r4, #0
 801cfbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801cfc0:	4622      	mov	r2, r4
 801cfc2:	462b      	mov	r3, r5
 801cfc4:	f7e3 fb48 	bl	8000658 <__aeabi_dmul>
 801cfc8:	bd70      	pop	{r4, r5, r6, pc}
 801cfca:	0000      	movs	r0, r0
 801cfcc:	0000      	movs	r0, r0
	...

0801cfd0 <_strtod_l>:
 801cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfd4:	ed2d 8b02 	vpush	{d8}
 801cfd8:	b09b      	sub	sp, #108	; 0x6c
 801cfda:	4604      	mov	r4, r0
 801cfdc:	9213      	str	r2, [sp, #76]	; 0x4c
 801cfde:	2200      	movs	r2, #0
 801cfe0:	9216      	str	r2, [sp, #88]	; 0x58
 801cfe2:	460d      	mov	r5, r1
 801cfe4:	f04f 0800 	mov.w	r8, #0
 801cfe8:	f04f 0900 	mov.w	r9, #0
 801cfec:	460a      	mov	r2, r1
 801cfee:	9215      	str	r2, [sp, #84]	; 0x54
 801cff0:	7811      	ldrb	r1, [r2, #0]
 801cff2:	292b      	cmp	r1, #43	; 0x2b
 801cff4:	d04c      	beq.n	801d090 <_strtod_l+0xc0>
 801cff6:	d83a      	bhi.n	801d06e <_strtod_l+0x9e>
 801cff8:	290d      	cmp	r1, #13
 801cffa:	d834      	bhi.n	801d066 <_strtod_l+0x96>
 801cffc:	2908      	cmp	r1, #8
 801cffe:	d834      	bhi.n	801d06a <_strtod_l+0x9a>
 801d000:	2900      	cmp	r1, #0
 801d002:	d03d      	beq.n	801d080 <_strtod_l+0xb0>
 801d004:	2200      	movs	r2, #0
 801d006:	920a      	str	r2, [sp, #40]	; 0x28
 801d008:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d00a:	7832      	ldrb	r2, [r6, #0]
 801d00c:	2a30      	cmp	r2, #48	; 0x30
 801d00e:	f040 80b4 	bne.w	801d17a <_strtod_l+0x1aa>
 801d012:	7872      	ldrb	r2, [r6, #1]
 801d014:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d018:	2a58      	cmp	r2, #88	; 0x58
 801d01a:	d170      	bne.n	801d0fe <_strtod_l+0x12e>
 801d01c:	9302      	str	r3, [sp, #8]
 801d01e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d020:	9301      	str	r3, [sp, #4]
 801d022:	ab16      	add	r3, sp, #88	; 0x58
 801d024:	9300      	str	r3, [sp, #0]
 801d026:	4a8e      	ldr	r2, [pc, #568]	; (801d260 <_strtod_l+0x290>)
 801d028:	ab17      	add	r3, sp, #92	; 0x5c
 801d02a:	a915      	add	r1, sp, #84	; 0x54
 801d02c:	4620      	mov	r0, r4
 801d02e:	f001 f8e1 	bl	801e1f4 <__gethex>
 801d032:	f010 070f 	ands.w	r7, r0, #15
 801d036:	4605      	mov	r5, r0
 801d038:	d005      	beq.n	801d046 <_strtod_l+0x76>
 801d03a:	2f06      	cmp	r7, #6
 801d03c:	d12a      	bne.n	801d094 <_strtod_l+0xc4>
 801d03e:	3601      	adds	r6, #1
 801d040:	2300      	movs	r3, #0
 801d042:	9615      	str	r6, [sp, #84]	; 0x54
 801d044:	930a      	str	r3, [sp, #40]	; 0x28
 801d046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d048:	2b00      	cmp	r3, #0
 801d04a:	f040 857f 	bne.w	801db4c <_strtod_l+0xb7c>
 801d04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d050:	b1db      	cbz	r3, 801d08a <_strtod_l+0xba>
 801d052:	4642      	mov	r2, r8
 801d054:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d058:	ec43 2b10 	vmov	d0, r2, r3
 801d05c:	b01b      	add	sp, #108	; 0x6c
 801d05e:	ecbd 8b02 	vpop	{d8}
 801d062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d066:	2920      	cmp	r1, #32
 801d068:	d1cc      	bne.n	801d004 <_strtod_l+0x34>
 801d06a:	3201      	adds	r2, #1
 801d06c:	e7bf      	b.n	801cfee <_strtod_l+0x1e>
 801d06e:	292d      	cmp	r1, #45	; 0x2d
 801d070:	d1c8      	bne.n	801d004 <_strtod_l+0x34>
 801d072:	2101      	movs	r1, #1
 801d074:	910a      	str	r1, [sp, #40]	; 0x28
 801d076:	1c51      	adds	r1, r2, #1
 801d078:	9115      	str	r1, [sp, #84]	; 0x54
 801d07a:	7852      	ldrb	r2, [r2, #1]
 801d07c:	2a00      	cmp	r2, #0
 801d07e:	d1c3      	bne.n	801d008 <_strtod_l+0x38>
 801d080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d082:	9515      	str	r5, [sp, #84]	; 0x54
 801d084:	2b00      	cmp	r3, #0
 801d086:	f040 855f 	bne.w	801db48 <_strtod_l+0xb78>
 801d08a:	4642      	mov	r2, r8
 801d08c:	464b      	mov	r3, r9
 801d08e:	e7e3      	b.n	801d058 <_strtod_l+0x88>
 801d090:	2100      	movs	r1, #0
 801d092:	e7ef      	b.n	801d074 <_strtod_l+0xa4>
 801d094:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d096:	b13a      	cbz	r2, 801d0a8 <_strtod_l+0xd8>
 801d098:	2135      	movs	r1, #53	; 0x35
 801d09a:	a818      	add	r0, sp, #96	; 0x60
 801d09c:	f002 f815 	bl	801f0ca <__copybits>
 801d0a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d0a2:	4620      	mov	r0, r4
 801d0a4:	f001 fbe8 	bl	801e878 <_Bfree>
 801d0a8:	3f01      	subs	r7, #1
 801d0aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d0ac:	2f04      	cmp	r7, #4
 801d0ae:	d806      	bhi.n	801d0be <_strtod_l+0xee>
 801d0b0:	e8df f007 	tbb	[pc, r7]
 801d0b4:	201d0314 	.word	0x201d0314
 801d0b8:	14          	.byte	0x14
 801d0b9:	00          	.byte	0x00
 801d0ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801d0be:	05e9      	lsls	r1, r5, #23
 801d0c0:	bf48      	it	mi
 801d0c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d0c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d0ca:	0d1b      	lsrs	r3, r3, #20
 801d0cc:	051b      	lsls	r3, r3, #20
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d1b9      	bne.n	801d046 <_strtod_l+0x76>
 801d0d2:	f000 ff9f 	bl	801e014 <__errno>
 801d0d6:	2322      	movs	r3, #34	; 0x22
 801d0d8:	6003      	str	r3, [r0, #0]
 801d0da:	e7b4      	b.n	801d046 <_strtod_l+0x76>
 801d0dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801d0e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d0e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801d0e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801d0ec:	e7e7      	b.n	801d0be <_strtod_l+0xee>
 801d0ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801d268 <_strtod_l+0x298>
 801d0f2:	e7e4      	b.n	801d0be <_strtod_l+0xee>
 801d0f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801d0f8:	f04f 38ff 	mov.w	r8, #4294967295
 801d0fc:	e7df      	b.n	801d0be <_strtod_l+0xee>
 801d0fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d100:	1c5a      	adds	r2, r3, #1
 801d102:	9215      	str	r2, [sp, #84]	; 0x54
 801d104:	785b      	ldrb	r3, [r3, #1]
 801d106:	2b30      	cmp	r3, #48	; 0x30
 801d108:	d0f9      	beq.n	801d0fe <_strtod_l+0x12e>
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d09b      	beq.n	801d046 <_strtod_l+0x76>
 801d10e:	2301      	movs	r3, #1
 801d110:	f04f 0a00 	mov.w	sl, #0
 801d114:	9304      	str	r3, [sp, #16]
 801d116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d118:	930b      	str	r3, [sp, #44]	; 0x2c
 801d11a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d11e:	46d3      	mov	fp, sl
 801d120:	220a      	movs	r2, #10
 801d122:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d124:	7806      	ldrb	r6, [r0, #0]
 801d126:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801d12a:	b2d9      	uxtb	r1, r3
 801d12c:	2909      	cmp	r1, #9
 801d12e:	d926      	bls.n	801d17e <_strtod_l+0x1ae>
 801d130:	494c      	ldr	r1, [pc, #304]	; (801d264 <_strtod_l+0x294>)
 801d132:	2201      	movs	r2, #1
 801d134:	f000 fec2 	bl	801debc <strncmp>
 801d138:	2800      	cmp	r0, #0
 801d13a:	d030      	beq.n	801d19e <_strtod_l+0x1ce>
 801d13c:	2000      	movs	r0, #0
 801d13e:	4632      	mov	r2, r6
 801d140:	9005      	str	r0, [sp, #20]
 801d142:	465e      	mov	r6, fp
 801d144:	4603      	mov	r3, r0
 801d146:	2a65      	cmp	r2, #101	; 0x65
 801d148:	d001      	beq.n	801d14e <_strtod_l+0x17e>
 801d14a:	2a45      	cmp	r2, #69	; 0x45
 801d14c:	d113      	bne.n	801d176 <_strtod_l+0x1a6>
 801d14e:	b91e      	cbnz	r6, 801d158 <_strtod_l+0x188>
 801d150:	9a04      	ldr	r2, [sp, #16]
 801d152:	4302      	orrs	r2, r0
 801d154:	d094      	beq.n	801d080 <_strtod_l+0xb0>
 801d156:	2600      	movs	r6, #0
 801d158:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d15a:	1c6a      	adds	r2, r5, #1
 801d15c:	9215      	str	r2, [sp, #84]	; 0x54
 801d15e:	786a      	ldrb	r2, [r5, #1]
 801d160:	2a2b      	cmp	r2, #43	; 0x2b
 801d162:	d074      	beq.n	801d24e <_strtod_l+0x27e>
 801d164:	2a2d      	cmp	r2, #45	; 0x2d
 801d166:	d078      	beq.n	801d25a <_strtod_l+0x28a>
 801d168:	f04f 0c00 	mov.w	ip, #0
 801d16c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801d170:	2909      	cmp	r1, #9
 801d172:	d97f      	bls.n	801d274 <_strtod_l+0x2a4>
 801d174:	9515      	str	r5, [sp, #84]	; 0x54
 801d176:	2700      	movs	r7, #0
 801d178:	e09e      	b.n	801d2b8 <_strtod_l+0x2e8>
 801d17a:	2300      	movs	r3, #0
 801d17c:	e7c8      	b.n	801d110 <_strtod_l+0x140>
 801d17e:	f1bb 0f08 	cmp.w	fp, #8
 801d182:	bfd8      	it	le
 801d184:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801d186:	f100 0001 	add.w	r0, r0, #1
 801d18a:	bfda      	itte	le
 801d18c:	fb02 3301 	mlale	r3, r2, r1, r3
 801d190:	9309      	strle	r3, [sp, #36]	; 0x24
 801d192:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801d196:	f10b 0b01 	add.w	fp, fp, #1
 801d19a:	9015      	str	r0, [sp, #84]	; 0x54
 801d19c:	e7c1      	b.n	801d122 <_strtod_l+0x152>
 801d19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1a0:	1c5a      	adds	r2, r3, #1
 801d1a2:	9215      	str	r2, [sp, #84]	; 0x54
 801d1a4:	785a      	ldrb	r2, [r3, #1]
 801d1a6:	f1bb 0f00 	cmp.w	fp, #0
 801d1aa:	d037      	beq.n	801d21c <_strtod_l+0x24c>
 801d1ac:	9005      	str	r0, [sp, #20]
 801d1ae:	465e      	mov	r6, fp
 801d1b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801d1b4:	2b09      	cmp	r3, #9
 801d1b6:	d912      	bls.n	801d1de <_strtod_l+0x20e>
 801d1b8:	2301      	movs	r3, #1
 801d1ba:	e7c4      	b.n	801d146 <_strtod_l+0x176>
 801d1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1be:	1c5a      	adds	r2, r3, #1
 801d1c0:	9215      	str	r2, [sp, #84]	; 0x54
 801d1c2:	785a      	ldrb	r2, [r3, #1]
 801d1c4:	3001      	adds	r0, #1
 801d1c6:	2a30      	cmp	r2, #48	; 0x30
 801d1c8:	d0f8      	beq.n	801d1bc <_strtod_l+0x1ec>
 801d1ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801d1ce:	2b08      	cmp	r3, #8
 801d1d0:	f200 84c1 	bhi.w	801db56 <_strtod_l+0xb86>
 801d1d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1d6:	9005      	str	r0, [sp, #20]
 801d1d8:	2000      	movs	r0, #0
 801d1da:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1dc:	4606      	mov	r6, r0
 801d1de:	3a30      	subs	r2, #48	; 0x30
 801d1e0:	f100 0301 	add.w	r3, r0, #1
 801d1e4:	d014      	beq.n	801d210 <_strtod_l+0x240>
 801d1e6:	9905      	ldr	r1, [sp, #20]
 801d1e8:	4419      	add	r1, r3
 801d1ea:	9105      	str	r1, [sp, #20]
 801d1ec:	4633      	mov	r3, r6
 801d1ee:	eb00 0c06 	add.w	ip, r0, r6
 801d1f2:	210a      	movs	r1, #10
 801d1f4:	4563      	cmp	r3, ip
 801d1f6:	d113      	bne.n	801d220 <_strtod_l+0x250>
 801d1f8:	1833      	adds	r3, r6, r0
 801d1fa:	2b08      	cmp	r3, #8
 801d1fc:	f106 0601 	add.w	r6, r6, #1
 801d200:	4406      	add	r6, r0
 801d202:	dc1a      	bgt.n	801d23a <_strtod_l+0x26a>
 801d204:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d206:	230a      	movs	r3, #10
 801d208:	fb03 2301 	mla	r3, r3, r1, r2
 801d20c:	9309      	str	r3, [sp, #36]	; 0x24
 801d20e:	2300      	movs	r3, #0
 801d210:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d212:	1c51      	adds	r1, r2, #1
 801d214:	9115      	str	r1, [sp, #84]	; 0x54
 801d216:	7852      	ldrb	r2, [r2, #1]
 801d218:	4618      	mov	r0, r3
 801d21a:	e7c9      	b.n	801d1b0 <_strtod_l+0x1e0>
 801d21c:	4658      	mov	r0, fp
 801d21e:	e7d2      	b.n	801d1c6 <_strtod_l+0x1f6>
 801d220:	2b08      	cmp	r3, #8
 801d222:	f103 0301 	add.w	r3, r3, #1
 801d226:	dc03      	bgt.n	801d230 <_strtod_l+0x260>
 801d228:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d22a:	434f      	muls	r7, r1
 801d22c:	9709      	str	r7, [sp, #36]	; 0x24
 801d22e:	e7e1      	b.n	801d1f4 <_strtod_l+0x224>
 801d230:	2b10      	cmp	r3, #16
 801d232:	bfd8      	it	le
 801d234:	fb01 fa0a 	mulle.w	sl, r1, sl
 801d238:	e7dc      	b.n	801d1f4 <_strtod_l+0x224>
 801d23a:	2e10      	cmp	r6, #16
 801d23c:	bfdc      	itt	le
 801d23e:	230a      	movle	r3, #10
 801d240:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801d244:	e7e3      	b.n	801d20e <_strtod_l+0x23e>
 801d246:	2300      	movs	r3, #0
 801d248:	9305      	str	r3, [sp, #20]
 801d24a:	2301      	movs	r3, #1
 801d24c:	e780      	b.n	801d150 <_strtod_l+0x180>
 801d24e:	f04f 0c00 	mov.w	ip, #0
 801d252:	1caa      	adds	r2, r5, #2
 801d254:	9215      	str	r2, [sp, #84]	; 0x54
 801d256:	78aa      	ldrb	r2, [r5, #2]
 801d258:	e788      	b.n	801d16c <_strtod_l+0x19c>
 801d25a:	f04f 0c01 	mov.w	ip, #1
 801d25e:	e7f8      	b.n	801d252 <_strtod_l+0x282>
 801d260:	08028e1c 	.word	0x08028e1c
 801d264:	08028e0c 	.word	0x08028e0c
 801d268:	7ff00000 	.word	0x7ff00000
 801d26c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d26e:	1c51      	adds	r1, r2, #1
 801d270:	9115      	str	r1, [sp, #84]	; 0x54
 801d272:	7852      	ldrb	r2, [r2, #1]
 801d274:	2a30      	cmp	r2, #48	; 0x30
 801d276:	d0f9      	beq.n	801d26c <_strtod_l+0x29c>
 801d278:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801d27c:	2908      	cmp	r1, #8
 801d27e:	f63f af7a 	bhi.w	801d176 <_strtod_l+0x1a6>
 801d282:	3a30      	subs	r2, #48	; 0x30
 801d284:	9208      	str	r2, [sp, #32]
 801d286:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d288:	920c      	str	r2, [sp, #48]	; 0x30
 801d28a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d28c:	1c57      	adds	r7, r2, #1
 801d28e:	9715      	str	r7, [sp, #84]	; 0x54
 801d290:	7852      	ldrb	r2, [r2, #1]
 801d292:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801d296:	f1be 0f09 	cmp.w	lr, #9
 801d29a:	d938      	bls.n	801d30e <_strtod_l+0x33e>
 801d29c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d29e:	1a7f      	subs	r7, r7, r1
 801d2a0:	2f08      	cmp	r7, #8
 801d2a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801d2a6:	dc03      	bgt.n	801d2b0 <_strtod_l+0x2e0>
 801d2a8:	9908      	ldr	r1, [sp, #32]
 801d2aa:	428f      	cmp	r7, r1
 801d2ac:	bfa8      	it	ge
 801d2ae:	460f      	movge	r7, r1
 801d2b0:	f1bc 0f00 	cmp.w	ip, #0
 801d2b4:	d000      	beq.n	801d2b8 <_strtod_l+0x2e8>
 801d2b6:	427f      	negs	r7, r7
 801d2b8:	2e00      	cmp	r6, #0
 801d2ba:	d14f      	bne.n	801d35c <_strtod_l+0x38c>
 801d2bc:	9904      	ldr	r1, [sp, #16]
 801d2be:	4301      	orrs	r1, r0
 801d2c0:	f47f aec1 	bne.w	801d046 <_strtod_l+0x76>
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	f47f aedb 	bne.w	801d080 <_strtod_l+0xb0>
 801d2ca:	2a69      	cmp	r2, #105	; 0x69
 801d2cc:	d029      	beq.n	801d322 <_strtod_l+0x352>
 801d2ce:	dc26      	bgt.n	801d31e <_strtod_l+0x34e>
 801d2d0:	2a49      	cmp	r2, #73	; 0x49
 801d2d2:	d026      	beq.n	801d322 <_strtod_l+0x352>
 801d2d4:	2a4e      	cmp	r2, #78	; 0x4e
 801d2d6:	f47f aed3 	bne.w	801d080 <_strtod_l+0xb0>
 801d2da:	499b      	ldr	r1, [pc, #620]	; (801d548 <_strtod_l+0x578>)
 801d2dc:	a815      	add	r0, sp, #84	; 0x54
 801d2de:	f001 f9c9 	bl	801e674 <__match>
 801d2e2:	2800      	cmp	r0, #0
 801d2e4:	f43f aecc 	beq.w	801d080 <_strtod_l+0xb0>
 801d2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	2b28      	cmp	r3, #40	; 0x28
 801d2ee:	d12f      	bne.n	801d350 <_strtod_l+0x380>
 801d2f0:	4996      	ldr	r1, [pc, #600]	; (801d54c <_strtod_l+0x57c>)
 801d2f2:	aa18      	add	r2, sp, #96	; 0x60
 801d2f4:	a815      	add	r0, sp, #84	; 0x54
 801d2f6:	f001 f9d1 	bl	801e69c <__hexnan>
 801d2fa:	2805      	cmp	r0, #5
 801d2fc:	d128      	bne.n	801d350 <_strtod_l+0x380>
 801d2fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801d304:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801d308:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801d30c:	e69b      	b.n	801d046 <_strtod_l+0x76>
 801d30e:	9f08      	ldr	r7, [sp, #32]
 801d310:	210a      	movs	r1, #10
 801d312:	fb01 2107 	mla	r1, r1, r7, r2
 801d316:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801d31a:	9208      	str	r2, [sp, #32]
 801d31c:	e7b5      	b.n	801d28a <_strtod_l+0x2ba>
 801d31e:	2a6e      	cmp	r2, #110	; 0x6e
 801d320:	e7d9      	b.n	801d2d6 <_strtod_l+0x306>
 801d322:	498b      	ldr	r1, [pc, #556]	; (801d550 <_strtod_l+0x580>)
 801d324:	a815      	add	r0, sp, #84	; 0x54
 801d326:	f001 f9a5 	bl	801e674 <__match>
 801d32a:	2800      	cmp	r0, #0
 801d32c:	f43f aea8 	beq.w	801d080 <_strtod_l+0xb0>
 801d330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d332:	4988      	ldr	r1, [pc, #544]	; (801d554 <_strtod_l+0x584>)
 801d334:	3b01      	subs	r3, #1
 801d336:	a815      	add	r0, sp, #84	; 0x54
 801d338:	9315      	str	r3, [sp, #84]	; 0x54
 801d33a:	f001 f99b 	bl	801e674 <__match>
 801d33e:	b910      	cbnz	r0, 801d346 <_strtod_l+0x376>
 801d340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d342:	3301      	adds	r3, #1
 801d344:	9315      	str	r3, [sp, #84]	; 0x54
 801d346:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801d564 <_strtod_l+0x594>
 801d34a:	f04f 0800 	mov.w	r8, #0
 801d34e:	e67a      	b.n	801d046 <_strtod_l+0x76>
 801d350:	4881      	ldr	r0, [pc, #516]	; (801d558 <_strtod_l+0x588>)
 801d352:	f7fc fd2d 	bl	8019db0 <nan>
 801d356:	ec59 8b10 	vmov	r8, r9, d0
 801d35a:	e674      	b.n	801d046 <_strtod_l+0x76>
 801d35c:	9b05      	ldr	r3, [sp, #20]
 801d35e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d360:	1afb      	subs	r3, r7, r3
 801d362:	f1bb 0f00 	cmp.w	fp, #0
 801d366:	bf08      	it	eq
 801d368:	46b3      	moveq	fp, r6
 801d36a:	2e10      	cmp	r6, #16
 801d36c:	9308      	str	r3, [sp, #32]
 801d36e:	4635      	mov	r5, r6
 801d370:	bfa8      	it	ge
 801d372:	2510      	movge	r5, #16
 801d374:	f7e3 f8f6 	bl	8000564 <__aeabi_ui2d>
 801d378:	2e09      	cmp	r6, #9
 801d37a:	4680      	mov	r8, r0
 801d37c:	4689      	mov	r9, r1
 801d37e:	dd13      	ble.n	801d3a8 <_strtod_l+0x3d8>
 801d380:	4b76      	ldr	r3, [pc, #472]	; (801d55c <_strtod_l+0x58c>)
 801d382:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d386:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d38a:	f7e3 f965 	bl	8000658 <__aeabi_dmul>
 801d38e:	4680      	mov	r8, r0
 801d390:	4650      	mov	r0, sl
 801d392:	4689      	mov	r9, r1
 801d394:	f7e3 f8e6 	bl	8000564 <__aeabi_ui2d>
 801d398:	4602      	mov	r2, r0
 801d39a:	460b      	mov	r3, r1
 801d39c:	4640      	mov	r0, r8
 801d39e:	4649      	mov	r1, r9
 801d3a0:	f7e2 ffa4 	bl	80002ec <__adddf3>
 801d3a4:	4680      	mov	r8, r0
 801d3a6:	4689      	mov	r9, r1
 801d3a8:	2e0f      	cmp	r6, #15
 801d3aa:	dc38      	bgt.n	801d41e <_strtod_l+0x44e>
 801d3ac:	9b08      	ldr	r3, [sp, #32]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	f43f ae49 	beq.w	801d046 <_strtod_l+0x76>
 801d3b4:	dd24      	ble.n	801d400 <_strtod_l+0x430>
 801d3b6:	2b16      	cmp	r3, #22
 801d3b8:	dc0b      	bgt.n	801d3d2 <_strtod_l+0x402>
 801d3ba:	4968      	ldr	r1, [pc, #416]	; (801d55c <_strtod_l+0x58c>)
 801d3bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d3c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3c4:	4642      	mov	r2, r8
 801d3c6:	464b      	mov	r3, r9
 801d3c8:	f7e3 f946 	bl	8000658 <__aeabi_dmul>
 801d3cc:	4680      	mov	r8, r0
 801d3ce:	4689      	mov	r9, r1
 801d3d0:	e639      	b.n	801d046 <_strtod_l+0x76>
 801d3d2:	9a08      	ldr	r2, [sp, #32]
 801d3d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801d3d8:	4293      	cmp	r3, r2
 801d3da:	db20      	blt.n	801d41e <_strtod_l+0x44e>
 801d3dc:	4c5f      	ldr	r4, [pc, #380]	; (801d55c <_strtod_l+0x58c>)
 801d3de:	f1c6 060f 	rsb	r6, r6, #15
 801d3e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801d3e6:	4642      	mov	r2, r8
 801d3e8:	464b      	mov	r3, r9
 801d3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3ee:	f7e3 f933 	bl	8000658 <__aeabi_dmul>
 801d3f2:	9b08      	ldr	r3, [sp, #32]
 801d3f4:	1b9e      	subs	r6, r3, r6
 801d3f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801d3fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d3fe:	e7e3      	b.n	801d3c8 <_strtod_l+0x3f8>
 801d400:	9b08      	ldr	r3, [sp, #32]
 801d402:	3316      	adds	r3, #22
 801d404:	db0b      	blt.n	801d41e <_strtod_l+0x44e>
 801d406:	9b05      	ldr	r3, [sp, #20]
 801d408:	1bdf      	subs	r7, r3, r7
 801d40a:	4b54      	ldr	r3, [pc, #336]	; (801d55c <_strtod_l+0x58c>)
 801d40c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801d410:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d414:	4640      	mov	r0, r8
 801d416:	4649      	mov	r1, r9
 801d418:	f7e3 fa48 	bl	80008ac <__aeabi_ddiv>
 801d41c:	e7d6      	b.n	801d3cc <_strtod_l+0x3fc>
 801d41e:	9b08      	ldr	r3, [sp, #32]
 801d420:	1b75      	subs	r5, r6, r5
 801d422:	441d      	add	r5, r3
 801d424:	2d00      	cmp	r5, #0
 801d426:	dd70      	ble.n	801d50a <_strtod_l+0x53a>
 801d428:	f015 030f 	ands.w	r3, r5, #15
 801d42c:	d00a      	beq.n	801d444 <_strtod_l+0x474>
 801d42e:	494b      	ldr	r1, [pc, #300]	; (801d55c <_strtod_l+0x58c>)
 801d430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d434:	4642      	mov	r2, r8
 801d436:	464b      	mov	r3, r9
 801d438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d43c:	f7e3 f90c 	bl	8000658 <__aeabi_dmul>
 801d440:	4680      	mov	r8, r0
 801d442:	4689      	mov	r9, r1
 801d444:	f035 050f 	bics.w	r5, r5, #15
 801d448:	d04d      	beq.n	801d4e6 <_strtod_l+0x516>
 801d44a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801d44e:	dd22      	ble.n	801d496 <_strtod_l+0x4c6>
 801d450:	2500      	movs	r5, #0
 801d452:	46ab      	mov	fp, r5
 801d454:	9509      	str	r5, [sp, #36]	; 0x24
 801d456:	9505      	str	r5, [sp, #20]
 801d458:	2322      	movs	r3, #34	; 0x22
 801d45a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d564 <_strtod_l+0x594>
 801d45e:	6023      	str	r3, [r4, #0]
 801d460:	f04f 0800 	mov.w	r8, #0
 801d464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d466:	2b00      	cmp	r3, #0
 801d468:	f43f aded 	beq.w	801d046 <_strtod_l+0x76>
 801d46c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d46e:	4620      	mov	r0, r4
 801d470:	f001 fa02 	bl	801e878 <_Bfree>
 801d474:	9905      	ldr	r1, [sp, #20]
 801d476:	4620      	mov	r0, r4
 801d478:	f001 f9fe 	bl	801e878 <_Bfree>
 801d47c:	4659      	mov	r1, fp
 801d47e:	4620      	mov	r0, r4
 801d480:	f001 f9fa 	bl	801e878 <_Bfree>
 801d484:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d486:	4620      	mov	r0, r4
 801d488:	f001 f9f6 	bl	801e878 <_Bfree>
 801d48c:	4629      	mov	r1, r5
 801d48e:	4620      	mov	r0, r4
 801d490:	f001 f9f2 	bl	801e878 <_Bfree>
 801d494:	e5d7      	b.n	801d046 <_strtod_l+0x76>
 801d496:	4b32      	ldr	r3, [pc, #200]	; (801d560 <_strtod_l+0x590>)
 801d498:	9304      	str	r3, [sp, #16]
 801d49a:	2300      	movs	r3, #0
 801d49c:	112d      	asrs	r5, r5, #4
 801d49e:	4640      	mov	r0, r8
 801d4a0:	4649      	mov	r1, r9
 801d4a2:	469a      	mov	sl, r3
 801d4a4:	2d01      	cmp	r5, #1
 801d4a6:	dc21      	bgt.n	801d4ec <_strtod_l+0x51c>
 801d4a8:	b10b      	cbz	r3, 801d4ae <_strtod_l+0x4de>
 801d4aa:	4680      	mov	r8, r0
 801d4ac:	4689      	mov	r9, r1
 801d4ae:	492c      	ldr	r1, [pc, #176]	; (801d560 <_strtod_l+0x590>)
 801d4b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801d4b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801d4b8:	4642      	mov	r2, r8
 801d4ba:	464b      	mov	r3, r9
 801d4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4c0:	f7e3 f8ca 	bl	8000658 <__aeabi_dmul>
 801d4c4:	4b27      	ldr	r3, [pc, #156]	; (801d564 <_strtod_l+0x594>)
 801d4c6:	460a      	mov	r2, r1
 801d4c8:	400b      	ands	r3, r1
 801d4ca:	4927      	ldr	r1, [pc, #156]	; (801d568 <_strtod_l+0x598>)
 801d4cc:	428b      	cmp	r3, r1
 801d4ce:	4680      	mov	r8, r0
 801d4d0:	d8be      	bhi.n	801d450 <_strtod_l+0x480>
 801d4d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d4d6:	428b      	cmp	r3, r1
 801d4d8:	bf86      	itte	hi
 801d4da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801d56c <_strtod_l+0x59c>
 801d4de:	f04f 38ff 	movhi.w	r8, #4294967295
 801d4e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	9304      	str	r3, [sp, #16]
 801d4ea:	e07b      	b.n	801d5e4 <_strtod_l+0x614>
 801d4ec:	07ea      	lsls	r2, r5, #31
 801d4ee:	d505      	bpl.n	801d4fc <_strtod_l+0x52c>
 801d4f0:	9b04      	ldr	r3, [sp, #16]
 801d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f6:	f7e3 f8af 	bl	8000658 <__aeabi_dmul>
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	9a04      	ldr	r2, [sp, #16]
 801d4fe:	3208      	adds	r2, #8
 801d500:	f10a 0a01 	add.w	sl, sl, #1
 801d504:	106d      	asrs	r5, r5, #1
 801d506:	9204      	str	r2, [sp, #16]
 801d508:	e7cc      	b.n	801d4a4 <_strtod_l+0x4d4>
 801d50a:	d0ec      	beq.n	801d4e6 <_strtod_l+0x516>
 801d50c:	426d      	negs	r5, r5
 801d50e:	f015 020f 	ands.w	r2, r5, #15
 801d512:	d00a      	beq.n	801d52a <_strtod_l+0x55a>
 801d514:	4b11      	ldr	r3, [pc, #68]	; (801d55c <_strtod_l+0x58c>)
 801d516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d51a:	4640      	mov	r0, r8
 801d51c:	4649      	mov	r1, r9
 801d51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d522:	f7e3 f9c3 	bl	80008ac <__aeabi_ddiv>
 801d526:	4680      	mov	r8, r0
 801d528:	4689      	mov	r9, r1
 801d52a:	112d      	asrs	r5, r5, #4
 801d52c:	d0db      	beq.n	801d4e6 <_strtod_l+0x516>
 801d52e:	2d1f      	cmp	r5, #31
 801d530:	dd1e      	ble.n	801d570 <_strtod_l+0x5a0>
 801d532:	2500      	movs	r5, #0
 801d534:	46ab      	mov	fp, r5
 801d536:	9509      	str	r5, [sp, #36]	; 0x24
 801d538:	9505      	str	r5, [sp, #20]
 801d53a:	2322      	movs	r3, #34	; 0x22
 801d53c:	f04f 0800 	mov.w	r8, #0
 801d540:	f04f 0900 	mov.w	r9, #0
 801d544:	6023      	str	r3, [r4, #0]
 801d546:	e78d      	b.n	801d464 <_strtod_l+0x494>
 801d548:	08028e17 	.word	0x08028e17
 801d54c:	08028e30 	.word	0x08028e30
 801d550:	08028e0e 	.word	0x08028e0e
 801d554:	08028e11 	.word	0x08028e11
 801d558:	08028e0b 	.word	0x08028e0b
 801d55c:	08029088 	.word	0x08029088
 801d560:	08029060 	.word	0x08029060
 801d564:	7ff00000 	.word	0x7ff00000
 801d568:	7ca00000 	.word	0x7ca00000
 801d56c:	7fefffff 	.word	0x7fefffff
 801d570:	f015 0310 	ands.w	r3, r5, #16
 801d574:	bf18      	it	ne
 801d576:	236a      	movne	r3, #106	; 0x6a
 801d578:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801d91c <_strtod_l+0x94c>
 801d57c:	9304      	str	r3, [sp, #16]
 801d57e:	4640      	mov	r0, r8
 801d580:	4649      	mov	r1, r9
 801d582:	2300      	movs	r3, #0
 801d584:	07ea      	lsls	r2, r5, #31
 801d586:	d504      	bpl.n	801d592 <_strtod_l+0x5c2>
 801d588:	e9da 2300 	ldrd	r2, r3, [sl]
 801d58c:	f7e3 f864 	bl	8000658 <__aeabi_dmul>
 801d590:	2301      	movs	r3, #1
 801d592:	106d      	asrs	r5, r5, #1
 801d594:	f10a 0a08 	add.w	sl, sl, #8
 801d598:	d1f4      	bne.n	801d584 <_strtod_l+0x5b4>
 801d59a:	b10b      	cbz	r3, 801d5a0 <_strtod_l+0x5d0>
 801d59c:	4680      	mov	r8, r0
 801d59e:	4689      	mov	r9, r1
 801d5a0:	9b04      	ldr	r3, [sp, #16]
 801d5a2:	b1bb      	cbz	r3, 801d5d4 <_strtod_l+0x604>
 801d5a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801d5a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	4649      	mov	r1, r9
 801d5b0:	dd10      	ble.n	801d5d4 <_strtod_l+0x604>
 801d5b2:	2b1f      	cmp	r3, #31
 801d5b4:	f340 811e 	ble.w	801d7f4 <_strtod_l+0x824>
 801d5b8:	2b34      	cmp	r3, #52	; 0x34
 801d5ba:	bfde      	ittt	le
 801d5bc:	f04f 33ff 	movle.w	r3, #4294967295
 801d5c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d5c4:	4093      	lslle	r3, r2
 801d5c6:	f04f 0800 	mov.w	r8, #0
 801d5ca:	bfcc      	ite	gt
 801d5cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801d5d0:	ea03 0901 	andle.w	r9, r3, r1
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	4640      	mov	r0, r8
 801d5da:	4649      	mov	r1, r9
 801d5dc:	f7e3 faa4 	bl	8000b28 <__aeabi_dcmpeq>
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	d1a6      	bne.n	801d532 <_strtod_l+0x562>
 801d5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d5ea:	4633      	mov	r3, r6
 801d5ec:	465a      	mov	r2, fp
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f001 f9aa 	bl	801e948 <__s2b>
 801d5f4:	9009      	str	r0, [sp, #36]	; 0x24
 801d5f6:	2800      	cmp	r0, #0
 801d5f8:	f43f af2a 	beq.w	801d450 <_strtod_l+0x480>
 801d5fc:	9a08      	ldr	r2, [sp, #32]
 801d5fe:	9b05      	ldr	r3, [sp, #20]
 801d600:	2a00      	cmp	r2, #0
 801d602:	eba3 0307 	sub.w	r3, r3, r7
 801d606:	bfa8      	it	ge
 801d608:	2300      	movge	r3, #0
 801d60a:	930c      	str	r3, [sp, #48]	; 0x30
 801d60c:	2500      	movs	r5, #0
 801d60e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d612:	9312      	str	r3, [sp, #72]	; 0x48
 801d614:	46ab      	mov	fp, r5
 801d616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d618:	4620      	mov	r0, r4
 801d61a:	6859      	ldr	r1, [r3, #4]
 801d61c:	f001 f8ec 	bl	801e7f8 <_Balloc>
 801d620:	9005      	str	r0, [sp, #20]
 801d622:	2800      	cmp	r0, #0
 801d624:	f43f af18 	beq.w	801d458 <_strtod_l+0x488>
 801d628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d62a:	691a      	ldr	r2, [r3, #16]
 801d62c:	3202      	adds	r2, #2
 801d62e:	f103 010c 	add.w	r1, r3, #12
 801d632:	0092      	lsls	r2, r2, #2
 801d634:	300c      	adds	r0, #12
 801d636:	f000 fd1a 	bl	801e06e <memcpy>
 801d63a:	ec49 8b10 	vmov	d0, r8, r9
 801d63e:	aa18      	add	r2, sp, #96	; 0x60
 801d640:	a917      	add	r1, sp, #92	; 0x5c
 801d642:	4620      	mov	r0, r4
 801d644:	f001 fcb4 	bl	801efb0 <__d2b>
 801d648:	ec49 8b18 	vmov	d8, r8, r9
 801d64c:	9016      	str	r0, [sp, #88]	; 0x58
 801d64e:	2800      	cmp	r0, #0
 801d650:	f43f af02 	beq.w	801d458 <_strtod_l+0x488>
 801d654:	2101      	movs	r1, #1
 801d656:	4620      	mov	r0, r4
 801d658:	f001 fa0e 	bl	801ea78 <__i2b>
 801d65c:	4683      	mov	fp, r0
 801d65e:	2800      	cmp	r0, #0
 801d660:	f43f aefa 	beq.w	801d458 <_strtod_l+0x488>
 801d664:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d666:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d668:	2e00      	cmp	r6, #0
 801d66a:	bfab      	itete	ge
 801d66c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801d66e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801d670:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d672:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801d676:	bfac      	ite	ge
 801d678:	eb06 0a03 	addge.w	sl, r6, r3
 801d67c:	1b9f      	sublt	r7, r3, r6
 801d67e:	9b04      	ldr	r3, [sp, #16]
 801d680:	1af6      	subs	r6, r6, r3
 801d682:	4416      	add	r6, r2
 801d684:	4ba0      	ldr	r3, [pc, #640]	; (801d908 <_strtod_l+0x938>)
 801d686:	3e01      	subs	r6, #1
 801d688:	429e      	cmp	r6, r3
 801d68a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d68e:	f280 80c4 	bge.w	801d81a <_strtod_l+0x84a>
 801d692:	1b9b      	subs	r3, r3, r6
 801d694:	2b1f      	cmp	r3, #31
 801d696:	eba2 0203 	sub.w	r2, r2, r3
 801d69a:	f04f 0101 	mov.w	r1, #1
 801d69e:	f300 80b0 	bgt.w	801d802 <_strtod_l+0x832>
 801d6a2:	fa01 f303 	lsl.w	r3, r1, r3
 801d6a6:	930e      	str	r3, [sp, #56]	; 0x38
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	930d      	str	r3, [sp, #52]	; 0x34
 801d6ac:	eb0a 0602 	add.w	r6, sl, r2
 801d6b0:	9b04      	ldr	r3, [sp, #16]
 801d6b2:	45b2      	cmp	sl, r6
 801d6b4:	4417      	add	r7, r2
 801d6b6:	441f      	add	r7, r3
 801d6b8:	4653      	mov	r3, sl
 801d6ba:	bfa8      	it	ge
 801d6bc:	4633      	movge	r3, r6
 801d6be:	42bb      	cmp	r3, r7
 801d6c0:	bfa8      	it	ge
 801d6c2:	463b      	movge	r3, r7
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	bfc2      	ittt	gt
 801d6c8:	1af6      	subgt	r6, r6, r3
 801d6ca:	1aff      	subgt	r7, r7, r3
 801d6cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 801d6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	dd17      	ble.n	801d706 <_strtod_l+0x736>
 801d6d6:	4659      	mov	r1, fp
 801d6d8:	461a      	mov	r2, r3
 801d6da:	4620      	mov	r0, r4
 801d6dc:	f001 fa8c 	bl	801ebf8 <__pow5mult>
 801d6e0:	4683      	mov	fp, r0
 801d6e2:	2800      	cmp	r0, #0
 801d6e4:	f43f aeb8 	beq.w	801d458 <_strtod_l+0x488>
 801d6e8:	4601      	mov	r1, r0
 801d6ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f001 f9d9 	bl	801eaa4 <__multiply>
 801d6f2:	900b      	str	r0, [sp, #44]	; 0x2c
 801d6f4:	2800      	cmp	r0, #0
 801d6f6:	f43f aeaf 	beq.w	801d458 <_strtod_l+0x488>
 801d6fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	f001 f8bb 	bl	801e878 <_Bfree>
 801d702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d704:	9316      	str	r3, [sp, #88]	; 0x58
 801d706:	2e00      	cmp	r6, #0
 801d708:	f300 808c 	bgt.w	801d824 <_strtod_l+0x854>
 801d70c:	9b08      	ldr	r3, [sp, #32]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	dd08      	ble.n	801d724 <_strtod_l+0x754>
 801d712:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d714:	9905      	ldr	r1, [sp, #20]
 801d716:	4620      	mov	r0, r4
 801d718:	f001 fa6e 	bl	801ebf8 <__pow5mult>
 801d71c:	9005      	str	r0, [sp, #20]
 801d71e:	2800      	cmp	r0, #0
 801d720:	f43f ae9a 	beq.w	801d458 <_strtod_l+0x488>
 801d724:	2f00      	cmp	r7, #0
 801d726:	dd08      	ble.n	801d73a <_strtod_l+0x76a>
 801d728:	9905      	ldr	r1, [sp, #20]
 801d72a:	463a      	mov	r2, r7
 801d72c:	4620      	mov	r0, r4
 801d72e:	f001 fabd 	bl	801ecac <__lshift>
 801d732:	9005      	str	r0, [sp, #20]
 801d734:	2800      	cmp	r0, #0
 801d736:	f43f ae8f 	beq.w	801d458 <_strtod_l+0x488>
 801d73a:	f1ba 0f00 	cmp.w	sl, #0
 801d73e:	dd08      	ble.n	801d752 <_strtod_l+0x782>
 801d740:	4659      	mov	r1, fp
 801d742:	4652      	mov	r2, sl
 801d744:	4620      	mov	r0, r4
 801d746:	f001 fab1 	bl	801ecac <__lshift>
 801d74a:	4683      	mov	fp, r0
 801d74c:	2800      	cmp	r0, #0
 801d74e:	f43f ae83 	beq.w	801d458 <_strtod_l+0x488>
 801d752:	9a05      	ldr	r2, [sp, #20]
 801d754:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d756:	4620      	mov	r0, r4
 801d758:	f001 fb30 	bl	801edbc <__mdiff>
 801d75c:	4605      	mov	r5, r0
 801d75e:	2800      	cmp	r0, #0
 801d760:	f43f ae7a 	beq.w	801d458 <_strtod_l+0x488>
 801d764:	68c3      	ldr	r3, [r0, #12]
 801d766:	930b      	str	r3, [sp, #44]	; 0x2c
 801d768:	2300      	movs	r3, #0
 801d76a:	60c3      	str	r3, [r0, #12]
 801d76c:	4659      	mov	r1, fp
 801d76e:	f001 fb09 	bl	801ed84 <__mcmp>
 801d772:	2800      	cmp	r0, #0
 801d774:	da60      	bge.n	801d838 <_strtod_l+0x868>
 801d776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d778:	ea53 0308 	orrs.w	r3, r3, r8
 801d77c:	f040 8084 	bne.w	801d888 <_strtod_l+0x8b8>
 801d780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d784:	2b00      	cmp	r3, #0
 801d786:	d17f      	bne.n	801d888 <_strtod_l+0x8b8>
 801d788:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d78c:	0d1b      	lsrs	r3, r3, #20
 801d78e:	051b      	lsls	r3, r3, #20
 801d790:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d794:	d978      	bls.n	801d888 <_strtod_l+0x8b8>
 801d796:	696b      	ldr	r3, [r5, #20]
 801d798:	b913      	cbnz	r3, 801d7a0 <_strtod_l+0x7d0>
 801d79a:	692b      	ldr	r3, [r5, #16]
 801d79c:	2b01      	cmp	r3, #1
 801d79e:	dd73      	ble.n	801d888 <_strtod_l+0x8b8>
 801d7a0:	4629      	mov	r1, r5
 801d7a2:	2201      	movs	r2, #1
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f001 fa81 	bl	801ecac <__lshift>
 801d7aa:	4659      	mov	r1, fp
 801d7ac:	4605      	mov	r5, r0
 801d7ae:	f001 fae9 	bl	801ed84 <__mcmp>
 801d7b2:	2800      	cmp	r0, #0
 801d7b4:	dd68      	ble.n	801d888 <_strtod_l+0x8b8>
 801d7b6:	9904      	ldr	r1, [sp, #16]
 801d7b8:	4a54      	ldr	r2, [pc, #336]	; (801d90c <_strtod_l+0x93c>)
 801d7ba:	464b      	mov	r3, r9
 801d7bc:	2900      	cmp	r1, #0
 801d7be:	f000 8084 	beq.w	801d8ca <_strtod_l+0x8fa>
 801d7c2:	ea02 0109 	and.w	r1, r2, r9
 801d7c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d7ca:	dc7e      	bgt.n	801d8ca <_strtod_l+0x8fa>
 801d7cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d7d0:	f77f aeb3 	ble.w	801d53a <_strtod_l+0x56a>
 801d7d4:	4b4e      	ldr	r3, [pc, #312]	; (801d910 <_strtod_l+0x940>)
 801d7d6:	4640      	mov	r0, r8
 801d7d8:	4649      	mov	r1, r9
 801d7da:	2200      	movs	r2, #0
 801d7dc:	f7e2 ff3c 	bl	8000658 <__aeabi_dmul>
 801d7e0:	4b4a      	ldr	r3, [pc, #296]	; (801d90c <_strtod_l+0x93c>)
 801d7e2:	400b      	ands	r3, r1
 801d7e4:	4680      	mov	r8, r0
 801d7e6:	4689      	mov	r9, r1
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	f47f ae3f 	bne.w	801d46c <_strtod_l+0x49c>
 801d7ee:	2322      	movs	r3, #34	; 0x22
 801d7f0:	6023      	str	r3, [r4, #0]
 801d7f2:	e63b      	b.n	801d46c <_strtod_l+0x49c>
 801d7f4:	f04f 32ff 	mov.w	r2, #4294967295
 801d7f8:	fa02 f303 	lsl.w	r3, r2, r3
 801d7fc:	ea03 0808 	and.w	r8, r3, r8
 801d800:	e6e8      	b.n	801d5d4 <_strtod_l+0x604>
 801d802:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801d806:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801d80a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801d80e:	36e2      	adds	r6, #226	; 0xe2
 801d810:	fa01 f306 	lsl.w	r3, r1, r6
 801d814:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801d818:	e748      	b.n	801d6ac <_strtod_l+0x6dc>
 801d81a:	2100      	movs	r1, #0
 801d81c:	2301      	movs	r3, #1
 801d81e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801d822:	e743      	b.n	801d6ac <_strtod_l+0x6dc>
 801d824:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d826:	4632      	mov	r2, r6
 801d828:	4620      	mov	r0, r4
 801d82a:	f001 fa3f 	bl	801ecac <__lshift>
 801d82e:	9016      	str	r0, [sp, #88]	; 0x58
 801d830:	2800      	cmp	r0, #0
 801d832:	f47f af6b 	bne.w	801d70c <_strtod_l+0x73c>
 801d836:	e60f      	b.n	801d458 <_strtod_l+0x488>
 801d838:	46ca      	mov	sl, r9
 801d83a:	d171      	bne.n	801d920 <_strtod_l+0x950>
 801d83c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d83e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d842:	b352      	cbz	r2, 801d89a <_strtod_l+0x8ca>
 801d844:	4a33      	ldr	r2, [pc, #204]	; (801d914 <_strtod_l+0x944>)
 801d846:	4293      	cmp	r3, r2
 801d848:	d12a      	bne.n	801d8a0 <_strtod_l+0x8d0>
 801d84a:	9b04      	ldr	r3, [sp, #16]
 801d84c:	4641      	mov	r1, r8
 801d84e:	b1fb      	cbz	r3, 801d890 <_strtod_l+0x8c0>
 801d850:	4b2e      	ldr	r3, [pc, #184]	; (801d90c <_strtod_l+0x93c>)
 801d852:	ea09 0303 	and.w	r3, r9, r3
 801d856:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d85a:	f04f 32ff 	mov.w	r2, #4294967295
 801d85e:	d81a      	bhi.n	801d896 <_strtod_l+0x8c6>
 801d860:	0d1b      	lsrs	r3, r3, #20
 801d862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d866:	fa02 f303 	lsl.w	r3, r2, r3
 801d86a:	4299      	cmp	r1, r3
 801d86c:	d118      	bne.n	801d8a0 <_strtod_l+0x8d0>
 801d86e:	4b2a      	ldr	r3, [pc, #168]	; (801d918 <_strtod_l+0x948>)
 801d870:	459a      	cmp	sl, r3
 801d872:	d102      	bne.n	801d87a <_strtod_l+0x8aa>
 801d874:	3101      	adds	r1, #1
 801d876:	f43f adef 	beq.w	801d458 <_strtod_l+0x488>
 801d87a:	4b24      	ldr	r3, [pc, #144]	; (801d90c <_strtod_l+0x93c>)
 801d87c:	ea0a 0303 	and.w	r3, sl, r3
 801d880:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d884:	f04f 0800 	mov.w	r8, #0
 801d888:	9b04      	ldr	r3, [sp, #16]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d1a2      	bne.n	801d7d4 <_strtod_l+0x804>
 801d88e:	e5ed      	b.n	801d46c <_strtod_l+0x49c>
 801d890:	f04f 33ff 	mov.w	r3, #4294967295
 801d894:	e7e9      	b.n	801d86a <_strtod_l+0x89a>
 801d896:	4613      	mov	r3, r2
 801d898:	e7e7      	b.n	801d86a <_strtod_l+0x89a>
 801d89a:	ea53 0308 	orrs.w	r3, r3, r8
 801d89e:	d08a      	beq.n	801d7b6 <_strtod_l+0x7e6>
 801d8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8a2:	b1e3      	cbz	r3, 801d8de <_strtod_l+0x90e>
 801d8a4:	ea13 0f0a 	tst.w	r3, sl
 801d8a8:	d0ee      	beq.n	801d888 <_strtod_l+0x8b8>
 801d8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8ac:	9a04      	ldr	r2, [sp, #16]
 801d8ae:	4640      	mov	r0, r8
 801d8b0:	4649      	mov	r1, r9
 801d8b2:	b1c3      	cbz	r3, 801d8e6 <_strtod_l+0x916>
 801d8b4:	f7ff fb6d 	bl	801cf92 <sulp>
 801d8b8:	4602      	mov	r2, r0
 801d8ba:	460b      	mov	r3, r1
 801d8bc:	ec51 0b18 	vmov	r0, r1, d8
 801d8c0:	f7e2 fd14 	bl	80002ec <__adddf3>
 801d8c4:	4680      	mov	r8, r0
 801d8c6:	4689      	mov	r9, r1
 801d8c8:	e7de      	b.n	801d888 <_strtod_l+0x8b8>
 801d8ca:	4013      	ands	r3, r2
 801d8cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d8d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d8d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d8d8:	f04f 38ff 	mov.w	r8, #4294967295
 801d8dc:	e7d4      	b.n	801d888 <_strtod_l+0x8b8>
 801d8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8e0:	ea13 0f08 	tst.w	r3, r8
 801d8e4:	e7e0      	b.n	801d8a8 <_strtod_l+0x8d8>
 801d8e6:	f7ff fb54 	bl	801cf92 <sulp>
 801d8ea:	4602      	mov	r2, r0
 801d8ec:	460b      	mov	r3, r1
 801d8ee:	ec51 0b18 	vmov	r0, r1, d8
 801d8f2:	f7e2 fcf9 	bl	80002e8 <__aeabi_dsub>
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	4680      	mov	r8, r0
 801d8fc:	4689      	mov	r9, r1
 801d8fe:	f7e3 f913 	bl	8000b28 <__aeabi_dcmpeq>
 801d902:	2800      	cmp	r0, #0
 801d904:	d0c0      	beq.n	801d888 <_strtod_l+0x8b8>
 801d906:	e618      	b.n	801d53a <_strtod_l+0x56a>
 801d908:	fffffc02 	.word	0xfffffc02
 801d90c:	7ff00000 	.word	0x7ff00000
 801d910:	39500000 	.word	0x39500000
 801d914:	000fffff 	.word	0x000fffff
 801d918:	7fefffff 	.word	0x7fefffff
 801d91c:	08028e48 	.word	0x08028e48
 801d920:	4659      	mov	r1, fp
 801d922:	4628      	mov	r0, r5
 801d924:	f001 fb9e 	bl	801f064 <__ratio>
 801d928:	ec57 6b10 	vmov	r6, r7, d0
 801d92c:	ee10 0a10 	vmov	r0, s0
 801d930:	2200      	movs	r2, #0
 801d932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d936:	4639      	mov	r1, r7
 801d938:	f7e3 f90a 	bl	8000b50 <__aeabi_dcmple>
 801d93c:	2800      	cmp	r0, #0
 801d93e:	d071      	beq.n	801da24 <_strtod_l+0xa54>
 801d940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d942:	2b00      	cmp	r3, #0
 801d944:	d17c      	bne.n	801da40 <_strtod_l+0xa70>
 801d946:	f1b8 0f00 	cmp.w	r8, #0
 801d94a:	d15a      	bne.n	801da02 <_strtod_l+0xa32>
 801d94c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d950:	2b00      	cmp	r3, #0
 801d952:	d15d      	bne.n	801da10 <_strtod_l+0xa40>
 801d954:	4b90      	ldr	r3, [pc, #576]	; (801db98 <_strtod_l+0xbc8>)
 801d956:	2200      	movs	r2, #0
 801d958:	4630      	mov	r0, r6
 801d95a:	4639      	mov	r1, r7
 801d95c:	f7e3 f8ee 	bl	8000b3c <__aeabi_dcmplt>
 801d960:	2800      	cmp	r0, #0
 801d962:	d15c      	bne.n	801da1e <_strtod_l+0xa4e>
 801d964:	4630      	mov	r0, r6
 801d966:	4639      	mov	r1, r7
 801d968:	4b8c      	ldr	r3, [pc, #560]	; (801db9c <_strtod_l+0xbcc>)
 801d96a:	2200      	movs	r2, #0
 801d96c:	f7e2 fe74 	bl	8000658 <__aeabi_dmul>
 801d970:	4606      	mov	r6, r0
 801d972:	460f      	mov	r7, r1
 801d974:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801d978:	9606      	str	r6, [sp, #24]
 801d97a:	9307      	str	r3, [sp, #28]
 801d97c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801d984:	4b86      	ldr	r3, [pc, #536]	; (801dba0 <_strtod_l+0xbd0>)
 801d986:	ea0a 0303 	and.w	r3, sl, r3
 801d98a:	930d      	str	r3, [sp, #52]	; 0x34
 801d98c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d98e:	4b85      	ldr	r3, [pc, #532]	; (801dba4 <_strtod_l+0xbd4>)
 801d990:	429a      	cmp	r2, r3
 801d992:	f040 8090 	bne.w	801dab6 <_strtod_l+0xae6>
 801d996:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801d99a:	ec49 8b10 	vmov	d0, r8, r9
 801d99e:	f001 fa97 	bl	801eed0 <__ulp>
 801d9a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d9a6:	ec51 0b10 	vmov	r0, r1, d0
 801d9aa:	f7e2 fe55 	bl	8000658 <__aeabi_dmul>
 801d9ae:	4642      	mov	r2, r8
 801d9b0:	464b      	mov	r3, r9
 801d9b2:	f7e2 fc9b 	bl	80002ec <__adddf3>
 801d9b6:	460b      	mov	r3, r1
 801d9b8:	4979      	ldr	r1, [pc, #484]	; (801dba0 <_strtod_l+0xbd0>)
 801d9ba:	4a7b      	ldr	r2, [pc, #492]	; (801dba8 <_strtod_l+0xbd8>)
 801d9bc:	4019      	ands	r1, r3
 801d9be:	4291      	cmp	r1, r2
 801d9c0:	4680      	mov	r8, r0
 801d9c2:	d944      	bls.n	801da4e <_strtod_l+0xa7e>
 801d9c4:	ee18 2a90 	vmov	r2, s17
 801d9c8:	4b78      	ldr	r3, [pc, #480]	; (801dbac <_strtod_l+0xbdc>)
 801d9ca:	429a      	cmp	r2, r3
 801d9cc:	d104      	bne.n	801d9d8 <_strtod_l+0xa08>
 801d9ce:	ee18 3a10 	vmov	r3, s16
 801d9d2:	3301      	adds	r3, #1
 801d9d4:	f43f ad40 	beq.w	801d458 <_strtod_l+0x488>
 801d9d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801dbac <_strtod_l+0xbdc>
 801d9dc:	f04f 38ff 	mov.w	r8, #4294967295
 801d9e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d9e2:	4620      	mov	r0, r4
 801d9e4:	f000 ff48 	bl	801e878 <_Bfree>
 801d9e8:	9905      	ldr	r1, [sp, #20]
 801d9ea:	4620      	mov	r0, r4
 801d9ec:	f000 ff44 	bl	801e878 <_Bfree>
 801d9f0:	4659      	mov	r1, fp
 801d9f2:	4620      	mov	r0, r4
 801d9f4:	f000 ff40 	bl	801e878 <_Bfree>
 801d9f8:	4629      	mov	r1, r5
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f000 ff3c 	bl	801e878 <_Bfree>
 801da00:	e609      	b.n	801d616 <_strtod_l+0x646>
 801da02:	f1b8 0f01 	cmp.w	r8, #1
 801da06:	d103      	bne.n	801da10 <_strtod_l+0xa40>
 801da08:	f1b9 0f00 	cmp.w	r9, #0
 801da0c:	f43f ad95 	beq.w	801d53a <_strtod_l+0x56a>
 801da10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801db68 <_strtod_l+0xb98>
 801da14:	4f60      	ldr	r7, [pc, #384]	; (801db98 <_strtod_l+0xbc8>)
 801da16:	ed8d 7b06 	vstr	d7, [sp, #24]
 801da1a:	2600      	movs	r6, #0
 801da1c:	e7ae      	b.n	801d97c <_strtod_l+0x9ac>
 801da1e:	4f5f      	ldr	r7, [pc, #380]	; (801db9c <_strtod_l+0xbcc>)
 801da20:	2600      	movs	r6, #0
 801da22:	e7a7      	b.n	801d974 <_strtod_l+0x9a4>
 801da24:	4b5d      	ldr	r3, [pc, #372]	; (801db9c <_strtod_l+0xbcc>)
 801da26:	4630      	mov	r0, r6
 801da28:	4639      	mov	r1, r7
 801da2a:	2200      	movs	r2, #0
 801da2c:	f7e2 fe14 	bl	8000658 <__aeabi_dmul>
 801da30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da32:	4606      	mov	r6, r0
 801da34:	460f      	mov	r7, r1
 801da36:	2b00      	cmp	r3, #0
 801da38:	d09c      	beq.n	801d974 <_strtod_l+0x9a4>
 801da3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801da3e:	e79d      	b.n	801d97c <_strtod_l+0x9ac>
 801da40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801db70 <_strtod_l+0xba0>
 801da44:	ed8d 7b06 	vstr	d7, [sp, #24]
 801da48:	ec57 6b17 	vmov	r6, r7, d7
 801da4c:	e796      	b.n	801d97c <_strtod_l+0x9ac>
 801da4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801da52:	9b04      	ldr	r3, [sp, #16]
 801da54:	46ca      	mov	sl, r9
 801da56:	2b00      	cmp	r3, #0
 801da58:	d1c2      	bne.n	801d9e0 <_strtod_l+0xa10>
 801da5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801da5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da60:	0d1b      	lsrs	r3, r3, #20
 801da62:	051b      	lsls	r3, r3, #20
 801da64:	429a      	cmp	r2, r3
 801da66:	d1bb      	bne.n	801d9e0 <_strtod_l+0xa10>
 801da68:	4630      	mov	r0, r6
 801da6a:	4639      	mov	r1, r7
 801da6c:	f7e3 f9a4 	bl	8000db8 <__aeabi_d2lz>
 801da70:	f7e2 fdc4 	bl	80005fc <__aeabi_l2d>
 801da74:	4602      	mov	r2, r0
 801da76:	460b      	mov	r3, r1
 801da78:	4630      	mov	r0, r6
 801da7a:	4639      	mov	r1, r7
 801da7c:	f7e2 fc34 	bl	80002e8 <__aeabi_dsub>
 801da80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801da82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801da86:	ea43 0308 	orr.w	r3, r3, r8
 801da8a:	4313      	orrs	r3, r2
 801da8c:	4606      	mov	r6, r0
 801da8e:	460f      	mov	r7, r1
 801da90:	d054      	beq.n	801db3c <_strtod_l+0xb6c>
 801da92:	a339      	add	r3, pc, #228	; (adr r3, 801db78 <_strtod_l+0xba8>)
 801da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da98:	f7e3 f850 	bl	8000b3c <__aeabi_dcmplt>
 801da9c:	2800      	cmp	r0, #0
 801da9e:	f47f ace5 	bne.w	801d46c <_strtod_l+0x49c>
 801daa2:	a337      	add	r3, pc, #220	; (adr r3, 801db80 <_strtod_l+0xbb0>)
 801daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa8:	4630      	mov	r0, r6
 801daaa:	4639      	mov	r1, r7
 801daac:	f7e3 f864 	bl	8000b78 <__aeabi_dcmpgt>
 801dab0:	2800      	cmp	r0, #0
 801dab2:	d095      	beq.n	801d9e0 <_strtod_l+0xa10>
 801dab4:	e4da      	b.n	801d46c <_strtod_l+0x49c>
 801dab6:	9b04      	ldr	r3, [sp, #16]
 801dab8:	b333      	cbz	r3, 801db08 <_strtod_l+0xb38>
 801daba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dabc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801dac0:	d822      	bhi.n	801db08 <_strtod_l+0xb38>
 801dac2:	a331      	add	r3, pc, #196	; (adr r3, 801db88 <_strtod_l+0xbb8>)
 801dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dac8:	4630      	mov	r0, r6
 801daca:	4639      	mov	r1, r7
 801dacc:	f7e3 f840 	bl	8000b50 <__aeabi_dcmple>
 801dad0:	b1a0      	cbz	r0, 801dafc <_strtod_l+0xb2c>
 801dad2:	4639      	mov	r1, r7
 801dad4:	4630      	mov	r0, r6
 801dad6:	f7e3 f897 	bl	8000c08 <__aeabi_d2uiz>
 801dada:	2801      	cmp	r0, #1
 801dadc:	bf38      	it	cc
 801dade:	2001      	movcc	r0, #1
 801dae0:	f7e2 fd40 	bl	8000564 <__aeabi_ui2d>
 801dae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dae6:	4606      	mov	r6, r0
 801dae8:	460f      	mov	r7, r1
 801daea:	bb23      	cbnz	r3, 801db36 <_strtod_l+0xb66>
 801daec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801daf0:	9010      	str	r0, [sp, #64]	; 0x40
 801daf2:	9311      	str	r3, [sp, #68]	; 0x44
 801daf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801daf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801dafc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dafe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801db04:	1a9b      	subs	r3, r3, r2
 801db06:	930f      	str	r3, [sp, #60]	; 0x3c
 801db08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801db0c:	eeb0 0a48 	vmov.f32	s0, s16
 801db10:	eef0 0a68 	vmov.f32	s1, s17
 801db14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801db18:	f001 f9da 	bl	801eed0 <__ulp>
 801db1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801db20:	ec53 2b10 	vmov	r2, r3, d0
 801db24:	f7e2 fd98 	bl	8000658 <__aeabi_dmul>
 801db28:	ec53 2b18 	vmov	r2, r3, d8
 801db2c:	f7e2 fbde 	bl	80002ec <__adddf3>
 801db30:	4680      	mov	r8, r0
 801db32:	4689      	mov	r9, r1
 801db34:	e78d      	b.n	801da52 <_strtod_l+0xa82>
 801db36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801db3a:	e7db      	b.n	801daf4 <_strtod_l+0xb24>
 801db3c:	a314      	add	r3, pc, #80	; (adr r3, 801db90 <_strtod_l+0xbc0>)
 801db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db42:	f7e2 fffb 	bl	8000b3c <__aeabi_dcmplt>
 801db46:	e7b3      	b.n	801dab0 <_strtod_l+0xae0>
 801db48:	2300      	movs	r3, #0
 801db4a:	930a      	str	r3, [sp, #40]	; 0x28
 801db4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801db4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801db50:	6013      	str	r3, [r2, #0]
 801db52:	f7ff ba7c 	b.w	801d04e <_strtod_l+0x7e>
 801db56:	2a65      	cmp	r2, #101	; 0x65
 801db58:	f43f ab75 	beq.w	801d246 <_strtod_l+0x276>
 801db5c:	2a45      	cmp	r2, #69	; 0x45
 801db5e:	f43f ab72 	beq.w	801d246 <_strtod_l+0x276>
 801db62:	2301      	movs	r3, #1
 801db64:	f7ff bbaa 	b.w	801d2bc <_strtod_l+0x2ec>
 801db68:	00000000 	.word	0x00000000
 801db6c:	bff00000 	.word	0xbff00000
 801db70:	00000000 	.word	0x00000000
 801db74:	3ff00000 	.word	0x3ff00000
 801db78:	94a03595 	.word	0x94a03595
 801db7c:	3fdfffff 	.word	0x3fdfffff
 801db80:	35afe535 	.word	0x35afe535
 801db84:	3fe00000 	.word	0x3fe00000
 801db88:	ffc00000 	.word	0xffc00000
 801db8c:	41dfffff 	.word	0x41dfffff
 801db90:	94a03595 	.word	0x94a03595
 801db94:	3fcfffff 	.word	0x3fcfffff
 801db98:	3ff00000 	.word	0x3ff00000
 801db9c:	3fe00000 	.word	0x3fe00000
 801dba0:	7ff00000 	.word	0x7ff00000
 801dba4:	7fe00000 	.word	0x7fe00000
 801dba8:	7c9fffff 	.word	0x7c9fffff
 801dbac:	7fefffff 	.word	0x7fefffff

0801dbb0 <strtod>:
 801dbb0:	460a      	mov	r2, r1
 801dbb2:	4601      	mov	r1, r0
 801dbb4:	4802      	ldr	r0, [pc, #8]	; (801dbc0 <strtod+0x10>)
 801dbb6:	4b03      	ldr	r3, [pc, #12]	; (801dbc4 <strtod+0x14>)
 801dbb8:	6800      	ldr	r0, [r0, #0]
 801dbba:	f7ff ba09 	b.w	801cfd0 <_strtod_l>
 801dbbe:	bf00      	nop
 801dbc0:	2000538c 	.word	0x2000538c
 801dbc4:	200051d4 	.word	0x200051d4

0801dbc8 <std>:
 801dbc8:	2300      	movs	r3, #0
 801dbca:	b510      	push	{r4, lr}
 801dbcc:	4604      	mov	r4, r0
 801dbce:	e9c0 3300 	strd	r3, r3, [r0]
 801dbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbd6:	6083      	str	r3, [r0, #8]
 801dbd8:	8181      	strh	r1, [r0, #12]
 801dbda:	6643      	str	r3, [r0, #100]	; 0x64
 801dbdc:	81c2      	strh	r2, [r0, #14]
 801dbde:	6183      	str	r3, [r0, #24]
 801dbe0:	4619      	mov	r1, r3
 801dbe2:	2208      	movs	r2, #8
 801dbe4:	305c      	adds	r0, #92	; 0x5c
 801dbe6:	f000 f961 	bl	801deac <memset>
 801dbea:	4b0d      	ldr	r3, [pc, #52]	; (801dc20 <std+0x58>)
 801dbec:	6263      	str	r3, [r4, #36]	; 0x24
 801dbee:	4b0d      	ldr	r3, [pc, #52]	; (801dc24 <std+0x5c>)
 801dbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 801dbf2:	4b0d      	ldr	r3, [pc, #52]	; (801dc28 <std+0x60>)
 801dbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dbf6:	4b0d      	ldr	r3, [pc, #52]	; (801dc2c <std+0x64>)
 801dbf8:	6323      	str	r3, [r4, #48]	; 0x30
 801dbfa:	4b0d      	ldr	r3, [pc, #52]	; (801dc30 <std+0x68>)
 801dbfc:	6224      	str	r4, [r4, #32]
 801dbfe:	429c      	cmp	r4, r3
 801dc00:	d006      	beq.n	801dc10 <std+0x48>
 801dc02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801dc06:	4294      	cmp	r4, r2
 801dc08:	d002      	beq.n	801dc10 <std+0x48>
 801dc0a:	33d0      	adds	r3, #208	; 0xd0
 801dc0c:	429c      	cmp	r4, r3
 801dc0e:	d105      	bne.n	801dc1c <std+0x54>
 801dc10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc18:	f000 ba26 	b.w	801e068 <__retarget_lock_init_recursive>
 801dc1c:	bd10      	pop	{r4, pc}
 801dc1e:	bf00      	nop
 801dc20:	0801ddb1 	.word	0x0801ddb1
 801dc24:	0801ddd3 	.word	0x0801ddd3
 801dc28:	0801de0b 	.word	0x0801de0b
 801dc2c:	0801de2f 	.word	0x0801de2f
 801dc30:	200056b0 	.word	0x200056b0

0801dc34 <stdio_exit_handler>:
 801dc34:	4a02      	ldr	r2, [pc, #8]	; (801dc40 <stdio_exit_handler+0xc>)
 801dc36:	4903      	ldr	r1, [pc, #12]	; (801dc44 <stdio_exit_handler+0x10>)
 801dc38:	4803      	ldr	r0, [pc, #12]	; (801dc48 <stdio_exit_handler+0x14>)
 801dc3a:	f000 b87b 	b.w	801dd34 <_fwalk_sglue>
 801dc3e:	bf00      	nop
 801dc40:	200051c8 	.word	0x200051c8
 801dc44:	0801fae1 	.word	0x0801fae1
 801dc48:	20005340 	.word	0x20005340

0801dc4c <cleanup_stdio>:
 801dc4c:	6841      	ldr	r1, [r0, #4]
 801dc4e:	4b0c      	ldr	r3, [pc, #48]	; (801dc80 <cleanup_stdio+0x34>)
 801dc50:	4299      	cmp	r1, r3
 801dc52:	b510      	push	{r4, lr}
 801dc54:	4604      	mov	r4, r0
 801dc56:	d001      	beq.n	801dc5c <cleanup_stdio+0x10>
 801dc58:	f001 ff42 	bl	801fae0 <_fflush_r>
 801dc5c:	68a1      	ldr	r1, [r4, #8]
 801dc5e:	4b09      	ldr	r3, [pc, #36]	; (801dc84 <cleanup_stdio+0x38>)
 801dc60:	4299      	cmp	r1, r3
 801dc62:	d002      	beq.n	801dc6a <cleanup_stdio+0x1e>
 801dc64:	4620      	mov	r0, r4
 801dc66:	f001 ff3b 	bl	801fae0 <_fflush_r>
 801dc6a:	68e1      	ldr	r1, [r4, #12]
 801dc6c:	4b06      	ldr	r3, [pc, #24]	; (801dc88 <cleanup_stdio+0x3c>)
 801dc6e:	4299      	cmp	r1, r3
 801dc70:	d004      	beq.n	801dc7c <cleanup_stdio+0x30>
 801dc72:	4620      	mov	r0, r4
 801dc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc78:	f001 bf32 	b.w	801fae0 <_fflush_r>
 801dc7c:	bd10      	pop	{r4, pc}
 801dc7e:	bf00      	nop
 801dc80:	200056b0 	.word	0x200056b0
 801dc84:	20005718 	.word	0x20005718
 801dc88:	20005780 	.word	0x20005780

0801dc8c <global_stdio_init.part.0>:
 801dc8c:	b510      	push	{r4, lr}
 801dc8e:	4b0b      	ldr	r3, [pc, #44]	; (801dcbc <global_stdio_init.part.0+0x30>)
 801dc90:	4c0b      	ldr	r4, [pc, #44]	; (801dcc0 <global_stdio_init.part.0+0x34>)
 801dc92:	4a0c      	ldr	r2, [pc, #48]	; (801dcc4 <global_stdio_init.part.0+0x38>)
 801dc94:	601a      	str	r2, [r3, #0]
 801dc96:	4620      	mov	r0, r4
 801dc98:	2200      	movs	r2, #0
 801dc9a:	2104      	movs	r1, #4
 801dc9c:	f7ff ff94 	bl	801dbc8 <std>
 801dca0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801dca4:	2201      	movs	r2, #1
 801dca6:	2109      	movs	r1, #9
 801dca8:	f7ff ff8e 	bl	801dbc8 <std>
 801dcac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801dcb0:	2202      	movs	r2, #2
 801dcb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcb6:	2112      	movs	r1, #18
 801dcb8:	f7ff bf86 	b.w	801dbc8 <std>
 801dcbc:	200057e8 	.word	0x200057e8
 801dcc0:	200056b0 	.word	0x200056b0
 801dcc4:	0801dc35 	.word	0x0801dc35

0801dcc8 <__sfp_lock_acquire>:
 801dcc8:	4801      	ldr	r0, [pc, #4]	; (801dcd0 <__sfp_lock_acquire+0x8>)
 801dcca:	f000 b9ce 	b.w	801e06a <__retarget_lock_acquire_recursive>
 801dcce:	bf00      	nop
 801dcd0:	200057f1 	.word	0x200057f1

0801dcd4 <__sfp_lock_release>:
 801dcd4:	4801      	ldr	r0, [pc, #4]	; (801dcdc <__sfp_lock_release+0x8>)
 801dcd6:	f000 b9c9 	b.w	801e06c <__retarget_lock_release_recursive>
 801dcda:	bf00      	nop
 801dcdc:	200057f1 	.word	0x200057f1

0801dce0 <__sinit>:
 801dce0:	b510      	push	{r4, lr}
 801dce2:	4604      	mov	r4, r0
 801dce4:	f7ff fff0 	bl	801dcc8 <__sfp_lock_acquire>
 801dce8:	6a23      	ldr	r3, [r4, #32]
 801dcea:	b11b      	cbz	r3, 801dcf4 <__sinit+0x14>
 801dcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcf0:	f7ff bff0 	b.w	801dcd4 <__sfp_lock_release>
 801dcf4:	4b04      	ldr	r3, [pc, #16]	; (801dd08 <__sinit+0x28>)
 801dcf6:	6223      	str	r3, [r4, #32]
 801dcf8:	4b04      	ldr	r3, [pc, #16]	; (801dd0c <__sinit+0x2c>)
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d1f5      	bne.n	801dcec <__sinit+0xc>
 801dd00:	f7ff ffc4 	bl	801dc8c <global_stdio_init.part.0>
 801dd04:	e7f2      	b.n	801dcec <__sinit+0xc>
 801dd06:	bf00      	nop
 801dd08:	0801dc4d 	.word	0x0801dc4d
 801dd0c:	200057e8 	.word	0x200057e8

0801dd10 <fiprintf>:
 801dd10:	b40e      	push	{r1, r2, r3}
 801dd12:	b503      	push	{r0, r1, lr}
 801dd14:	4601      	mov	r1, r0
 801dd16:	ab03      	add	r3, sp, #12
 801dd18:	4805      	ldr	r0, [pc, #20]	; (801dd30 <fiprintf+0x20>)
 801dd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd1e:	6800      	ldr	r0, [r0, #0]
 801dd20:	9301      	str	r3, [sp, #4]
 801dd22:	f001 fbad 	bl	801f480 <_vfiprintf_r>
 801dd26:	b002      	add	sp, #8
 801dd28:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd2c:	b003      	add	sp, #12
 801dd2e:	4770      	bx	lr
 801dd30:	2000538c 	.word	0x2000538c

0801dd34 <_fwalk_sglue>:
 801dd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd38:	4607      	mov	r7, r0
 801dd3a:	4688      	mov	r8, r1
 801dd3c:	4614      	mov	r4, r2
 801dd3e:	2600      	movs	r6, #0
 801dd40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd44:	f1b9 0901 	subs.w	r9, r9, #1
 801dd48:	d505      	bpl.n	801dd56 <_fwalk_sglue+0x22>
 801dd4a:	6824      	ldr	r4, [r4, #0]
 801dd4c:	2c00      	cmp	r4, #0
 801dd4e:	d1f7      	bne.n	801dd40 <_fwalk_sglue+0xc>
 801dd50:	4630      	mov	r0, r6
 801dd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd56:	89ab      	ldrh	r3, [r5, #12]
 801dd58:	2b01      	cmp	r3, #1
 801dd5a:	d907      	bls.n	801dd6c <_fwalk_sglue+0x38>
 801dd5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd60:	3301      	adds	r3, #1
 801dd62:	d003      	beq.n	801dd6c <_fwalk_sglue+0x38>
 801dd64:	4629      	mov	r1, r5
 801dd66:	4638      	mov	r0, r7
 801dd68:	47c0      	blx	r8
 801dd6a:	4306      	orrs	r6, r0
 801dd6c:	3568      	adds	r5, #104	; 0x68
 801dd6e:	e7e9      	b.n	801dd44 <_fwalk_sglue+0x10>

0801dd70 <siprintf>:
 801dd70:	b40e      	push	{r1, r2, r3}
 801dd72:	b500      	push	{lr}
 801dd74:	b09c      	sub	sp, #112	; 0x70
 801dd76:	ab1d      	add	r3, sp, #116	; 0x74
 801dd78:	9002      	str	r0, [sp, #8]
 801dd7a:	9006      	str	r0, [sp, #24]
 801dd7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801dd80:	4809      	ldr	r0, [pc, #36]	; (801dda8 <siprintf+0x38>)
 801dd82:	9107      	str	r1, [sp, #28]
 801dd84:	9104      	str	r1, [sp, #16]
 801dd86:	4909      	ldr	r1, [pc, #36]	; (801ddac <siprintf+0x3c>)
 801dd88:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd8c:	9105      	str	r1, [sp, #20]
 801dd8e:	6800      	ldr	r0, [r0, #0]
 801dd90:	9301      	str	r3, [sp, #4]
 801dd92:	a902      	add	r1, sp, #8
 801dd94:	f001 fa4c 	bl	801f230 <_svfiprintf_r>
 801dd98:	9b02      	ldr	r3, [sp, #8]
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	701a      	strb	r2, [r3, #0]
 801dd9e:	b01c      	add	sp, #112	; 0x70
 801dda0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dda4:	b003      	add	sp, #12
 801dda6:	4770      	bx	lr
 801dda8:	2000538c 	.word	0x2000538c
 801ddac:	ffff0208 	.word	0xffff0208

0801ddb0 <__sread>:
 801ddb0:	b510      	push	{r4, lr}
 801ddb2:	460c      	mov	r4, r1
 801ddb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddb8:	f000 f8e4 	bl	801df84 <_read_r>
 801ddbc:	2800      	cmp	r0, #0
 801ddbe:	bfab      	itete	ge
 801ddc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ddc2:	89a3      	ldrhlt	r3, [r4, #12]
 801ddc4:	181b      	addge	r3, r3, r0
 801ddc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ddca:	bfac      	ite	ge
 801ddcc:	6563      	strge	r3, [r4, #84]	; 0x54
 801ddce:	81a3      	strhlt	r3, [r4, #12]
 801ddd0:	bd10      	pop	{r4, pc}

0801ddd2 <__swrite>:
 801ddd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddd6:	461f      	mov	r7, r3
 801ddd8:	898b      	ldrh	r3, [r1, #12]
 801ddda:	05db      	lsls	r3, r3, #23
 801dddc:	4605      	mov	r5, r0
 801ddde:	460c      	mov	r4, r1
 801dde0:	4616      	mov	r6, r2
 801dde2:	d505      	bpl.n	801ddf0 <__swrite+0x1e>
 801dde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dde8:	2302      	movs	r3, #2
 801ddea:	2200      	movs	r2, #0
 801ddec:	f000 f8b8 	bl	801df60 <_lseek_r>
 801ddf0:	89a3      	ldrh	r3, [r4, #12]
 801ddf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ddfa:	81a3      	strh	r3, [r4, #12]
 801ddfc:	4632      	mov	r2, r6
 801ddfe:	463b      	mov	r3, r7
 801de00:	4628      	mov	r0, r5
 801de02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de06:	f000 b8f3 	b.w	801dff0 <_write_r>

0801de0a <__sseek>:
 801de0a:	b510      	push	{r4, lr}
 801de0c:	460c      	mov	r4, r1
 801de0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de12:	f000 f8a5 	bl	801df60 <_lseek_r>
 801de16:	1c43      	adds	r3, r0, #1
 801de18:	89a3      	ldrh	r3, [r4, #12]
 801de1a:	bf15      	itete	ne
 801de1c:	6560      	strne	r0, [r4, #84]	; 0x54
 801de1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801de22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801de26:	81a3      	strheq	r3, [r4, #12]
 801de28:	bf18      	it	ne
 801de2a:	81a3      	strhne	r3, [r4, #12]
 801de2c:	bd10      	pop	{r4, pc}

0801de2e <__sclose>:
 801de2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de32:	f000 b885 	b.w	801df40 <_close_r>
	...

0801de38 <_vsiprintf_r>:
 801de38:	b500      	push	{lr}
 801de3a:	b09b      	sub	sp, #108	; 0x6c
 801de3c:	9100      	str	r1, [sp, #0]
 801de3e:	9104      	str	r1, [sp, #16]
 801de40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801de44:	9105      	str	r1, [sp, #20]
 801de46:	9102      	str	r1, [sp, #8]
 801de48:	4905      	ldr	r1, [pc, #20]	; (801de60 <_vsiprintf_r+0x28>)
 801de4a:	9103      	str	r1, [sp, #12]
 801de4c:	4669      	mov	r1, sp
 801de4e:	f001 f9ef 	bl	801f230 <_svfiprintf_r>
 801de52:	9b00      	ldr	r3, [sp, #0]
 801de54:	2200      	movs	r2, #0
 801de56:	701a      	strb	r2, [r3, #0]
 801de58:	b01b      	add	sp, #108	; 0x6c
 801de5a:	f85d fb04 	ldr.w	pc, [sp], #4
 801de5e:	bf00      	nop
 801de60:	ffff0208 	.word	0xffff0208

0801de64 <vsiprintf>:
 801de64:	4613      	mov	r3, r2
 801de66:	460a      	mov	r2, r1
 801de68:	4601      	mov	r1, r0
 801de6a:	4802      	ldr	r0, [pc, #8]	; (801de74 <vsiprintf+0x10>)
 801de6c:	6800      	ldr	r0, [r0, #0]
 801de6e:	f7ff bfe3 	b.w	801de38 <_vsiprintf_r>
 801de72:	bf00      	nop
 801de74:	2000538c 	.word	0x2000538c

0801de78 <memmove>:
 801de78:	4288      	cmp	r0, r1
 801de7a:	b510      	push	{r4, lr}
 801de7c:	eb01 0402 	add.w	r4, r1, r2
 801de80:	d902      	bls.n	801de88 <memmove+0x10>
 801de82:	4284      	cmp	r4, r0
 801de84:	4623      	mov	r3, r4
 801de86:	d807      	bhi.n	801de98 <memmove+0x20>
 801de88:	1e43      	subs	r3, r0, #1
 801de8a:	42a1      	cmp	r1, r4
 801de8c:	d008      	beq.n	801dea0 <memmove+0x28>
 801de8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801de92:	f803 2f01 	strb.w	r2, [r3, #1]!
 801de96:	e7f8      	b.n	801de8a <memmove+0x12>
 801de98:	4402      	add	r2, r0
 801de9a:	4601      	mov	r1, r0
 801de9c:	428a      	cmp	r2, r1
 801de9e:	d100      	bne.n	801dea2 <memmove+0x2a>
 801dea0:	bd10      	pop	{r4, pc}
 801dea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801deaa:	e7f7      	b.n	801de9c <memmove+0x24>

0801deac <memset>:
 801deac:	4402      	add	r2, r0
 801deae:	4603      	mov	r3, r0
 801deb0:	4293      	cmp	r3, r2
 801deb2:	d100      	bne.n	801deb6 <memset+0xa>
 801deb4:	4770      	bx	lr
 801deb6:	f803 1b01 	strb.w	r1, [r3], #1
 801deba:	e7f9      	b.n	801deb0 <memset+0x4>

0801debc <strncmp>:
 801debc:	b510      	push	{r4, lr}
 801debe:	b16a      	cbz	r2, 801dedc <strncmp+0x20>
 801dec0:	3901      	subs	r1, #1
 801dec2:	1884      	adds	r4, r0, r2
 801dec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dec8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801decc:	429a      	cmp	r2, r3
 801dece:	d103      	bne.n	801ded8 <strncmp+0x1c>
 801ded0:	42a0      	cmp	r0, r4
 801ded2:	d001      	beq.n	801ded8 <strncmp+0x1c>
 801ded4:	2a00      	cmp	r2, #0
 801ded6:	d1f5      	bne.n	801dec4 <strncmp+0x8>
 801ded8:	1ad0      	subs	r0, r2, r3
 801deda:	bd10      	pop	{r4, pc}
 801dedc:	4610      	mov	r0, r2
 801dede:	e7fc      	b.n	801deda <strncmp+0x1e>

0801dee0 <_raise_r>:
 801dee0:	291f      	cmp	r1, #31
 801dee2:	b538      	push	{r3, r4, r5, lr}
 801dee4:	4604      	mov	r4, r0
 801dee6:	460d      	mov	r5, r1
 801dee8:	d904      	bls.n	801def4 <_raise_r+0x14>
 801deea:	2316      	movs	r3, #22
 801deec:	6003      	str	r3, [r0, #0]
 801deee:	f04f 30ff 	mov.w	r0, #4294967295
 801def2:	bd38      	pop	{r3, r4, r5, pc}
 801def4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801def6:	b112      	cbz	r2, 801defe <_raise_r+0x1e>
 801def8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801defc:	b94b      	cbnz	r3, 801df12 <_raise_r+0x32>
 801defe:	4620      	mov	r0, r4
 801df00:	f000 f864 	bl	801dfcc <_getpid_r>
 801df04:	462a      	mov	r2, r5
 801df06:	4601      	mov	r1, r0
 801df08:	4620      	mov	r0, r4
 801df0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df0e:	f000 b84b 	b.w	801dfa8 <_kill_r>
 801df12:	2b01      	cmp	r3, #1
 801df14:	d00a      	beq.n	801df2c <_raise_r+0x4c>
 801df16:	1c59      	adds	r1, r3, #1
 801df18:	d103      	bne.n	801df22 <_raise_r+0x42>
 801df1a:	2316      	movs	r3, #22
 801df1c:	6003      	str	r3, [r0, #0]
 801df1e:	2001      	movs	r0, #1
 801df20:	e7e7      	b.n	801def2 <_raise_r+0x12>
 801df22:	2400      	movs	r4, #0
 801df24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801df28:	4628      	mov	r0, r5
 801df2a:	4798      	blx	r3
 801df2c:	2000      	movs	r0, #0
 801df2e:	e7e0      	b.n	801def2 <_raise_r+0x12>

0801df30 <raise>:
 801df30:	4b02      	ldr	r3, [pc, #8]	; (801df3c <raise+0xc>)
 801df32:	4601      	mov	r1, r0
 801df34:	6818      	ldr	r0, [r3, #0]
 801df36:	f7ff bfd3 	b.w	801dee0 <_raise_r>
 801df3a:	bf00      	nop
 801df3c:	2000538c 	.word	0x2000538c

0801df40 <_close_r>:
 801df40:	b538      	push	{r3, r4, r5, lr}
 801df42:	4d06      	ldr	r5, [pc, #24]	; (801df5c <_close_r+0x1c>)
 801df44:	2300      	movs	r3, #0
 801df46:	4604      	mov	r4, r0
 801df48:	4608      	mov	r0, r1
 801df4a:	602b      	str	r3, [r5, #0]
 801df4c:	f7f2 fab1 	bl	80104b2 <_close>
 801df50:	1c43      	adds	r3, r0, #1
 801df52:	d102      	bne.n	801df5a <_close_r+0x1a>
 801df54:	682b      	ldr	r3, [r5, #0]
 801df56:	b103      	cbz	r3, 801df5a <_close_r+0x1a>
 801df58:	6023      	str	r3, [r4, #0]
 801df5a:	bd38      	pop	{r3, r4, r5, pc}
 801df5c:	200057ec 	.word	0x200057ec

0801df60 <_lseek_r>:
 801df60:	b538      	push	{r3, r4, r5, lr}
 801df62:	4d07      	ldr	r5, [pc, #28]	; (801df80 <_lseek_r+0x20>)
 801df64:	4604      	mov	r4, r0
 801df66:	4608      	mov	r0, r1
 801df68:	4611      	mov	r1, r2
 801df6a:	2200      	movs	r2, #0
 801df6c:	602a      	str	r2, [r5, #0]
 801df6e:	461a      	mov	r2, r3
 801df70:	f7f2 fac6 	bl	8010500 <_lseek>
 801df74:	1c43      	adds	r3, r0, #1
 801df76:	d102      	bne.n	801df7e <_lseek_r+0x1e>
 801df78:	682b      	ldr	r3, [r5, #0]
 801df7a:	b103      	cbz	r3, 801df7e <_lseek_r+0x1e>
 801df7c:	6023      	str	r3, [r4, #0]
 801df7e:	bd38      	pop	{r3, r4, r5, pc}
 801df80:	200057ec 	.word	0x200057ec

0801df84 <_read_r>:
 801df84:	b538      	push	{r3, r4, r5, lr}
 801df86:	4d07      	ldr	r5, [pc, #28]	; (801dfa4 <_read_r+0x20>)
 801df88:	4604      	mov	r4, r0
 801df8a:	4608      	mov	r0, r1
 801df8c:	4611      	mov	r1, r2
 801df8e:	2200      	movs	r2, #0
 801df90:	602a      	str	r2, [r5, #0]
 801df92:	461a      	mov	r2, r3
 801df94:	f7f2 fa54 	bl	8010440 <_read>
 801df98:	1c43      	adds	r3, r0, #1
 801df9a:	d102      	bne.n	801dfa2 <_read_r+0x1e>
 801df9c:	682b      	ldr	r3, [r5, #0]
 801df9e:	b103      	cbz	r3, 801dfa2 <_read_r+0x1e>
 801dfa0:	6023      	str	r3, [r4, #0]
 801dfa2:	bd38      	pop	{r3, r4, r5, pc}
 801dfa4:	200057ec 	.word	0x200057ec

0801dfa8 <_kill_r>:
 801dfa8:	b538      	push	{r3, r4, r5, lr}
 801dfaa:	4d07      	ldr	r5, [pc, #28]	; (801dfc8 <_kill_r+0x20>)
 801dfac:	2300      	movs	r3, #0
 801dfae:	4604      	mov	r4, r0
 801dfb0:	4608      	mov	r0, r1
 801dfb2:	4611      	mov	r1, r2
 801dfb4:	602b      	str	r3, [r5, #0]
 801dfb6:	f7f2 fa29 	bl	801040c <_kill>
 801dfba:	1c43      	adds	r3, r0, #1
 801dfbc:	d102      	bne.n	801dfc4 <_kill_r+0x1c>
 801dfbe:	682b      	ldr	r3, [r5, #0]
 801dfc0:	b103      	cbz	r3, 801dfc4 <_kill_r+0x1c>
 801dfc2:	6023      	str	r3, [r4, #0]
 801dfc4:	bd38      	pop	{r3, r4, r5, pc}
 801dfc6:	bf00      	nop
 801dfc8:	200057ec 	.word	0x200057ec

0801dfcc <_getpid_r>:
 801dfcc:	f7f2 ba16 	b.w	80103fc <_getpid>

0801dfd0 <_sbrk_r>:
 801dfd0:	b538      	push	{r3, r4, r5, lr}
 801dfd2:	4d06      	ldr	r5, [pc, #24]	; (801dfec <_sbrk_r+0x1c>)
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	4604      	mov	r4, r0
 801dfd8:	4608      	mov	r0, r1
 801dfda:	602b      	str	r3, [r5, #0]
 801dfdc:	f7f2 fa9e 	bl	801051c <_sbrk>
 801dfe0:	1c43      	adds	r3, r0, #1
 801dfe2:	d102      	bne.n	801dfea <_sbrk_r+0x1a>
 801dfe4:	682b      	ldr	r3, [r5, #0]
 801dfe6:	b103      	cbz	r3, 801dfea <_sbrk_r+0x1a>
 801dfe8:	6023      	str	r3, [r4, #0]
 801dfea:	bd38      	pop	{r3, r4, r5, pc}
 801dfec:	200057ec 	.word	0x200057ec

0801dff0 <_write_r>:
 801dff0:	b538      	push	{r3, r4, r5, lr}
 801dff2:	4d07      	ldr	r5, [pc, #28]	; (801e010 <_write_r+0x20>)
 801dff4:	4604      	mov	r4, r0
 801dff6:	4608      	mov	r0, r1
 801dff8:	4611      	mov	r1, r2
 801dffa:	2200      	movs	r2, #0
 801dffc:	602a      	str	r2, [r5, #0]
 801dffe:	461a      	mov	r2, r3
 801e000:	f7f2 fa3b 	bl	801047a <_write>
 801e004:	1c43      	adds	r3, r0, #1
 801e006:	d102      	bne.n	801e00e <_write_r+0x1e>
 801e008:	682b      	ldr	r3, [r5, #0]
 801e00a:	b103      	cbz	r3, 801e00e <_write_r+0x1e>
 801e00c:	6023      	str	r3, [r4, #0]
 801e00e:	bd38      	pop	{r3, r4, r5, pc}
 801e010:	200057ec 	.word	0x200057ec

0801e014 <__errno>:
 801e014:	4b01      	ldr	r3, [pc, #4]	; (801e01c <__errno+0x8>)
 801e016:	6818      	ldr	r0, [r3, #0]
 801e018:	4770      	bx	lr
 801e01a:	bf00      	nop
 801e01c:	2000538c 	.word	0x2000538c

0801e020 <__libc_init_array>:
 801e020:	b570      	push	{r4, r5, r6, lr}
 801e022:	4d0d      	ldr	r5, [pc, #52]	; (801e058 <__libc_init_array+0x38>)
 801e024:	4c0d      	ldr	r4, [pc, #52]	; (801e05c <__libc_init_array+0x3c>)
 801e026:	1b64      	subs	r4, r4, r5
 801e028:	10a4      	asrs	r4, r4, #2
 801e02a:	2600      	movs	r6, #0
 801e02c:	42a6      	cmp	r6, r4
 801e02e:	d109      	bne.n	801e044 <__libc_init_array+0x24>
 801e030:	4d0b      	ldr	r5, [pc, #44]	; (801e060 <__libc_init_array+0x40>)
 801e032:	4c0c      	ldr	r4, [pc, #48]	; (801e064 <__libc_init_array+0x44>)
 801e034:	f001 fe96 	bl	801fd64 <_init>
 801e038:	1b64      	subs	r4, r4, r5
 801e03a:	10a4      	asrs	r4, r4, #2
 801e03c:	2600      	movs	r6, #0
 801e03e:	42a6      	cmp	r6, r4
 801e040:	d105      	bne.n	801e04e <__libc_init_array+0x2e>
 801e042:	bd70      	pop	{r4, r5, r6, pc}
 801e044:	f855 3b04 	ldr.w	r3, [r5], #4
 801e048:	4798      	blx	r3
 801e04a:	3601      	adds	r6, #1
 801e04c:	e7ee      	b.n	801e02c <__libc_init_array+0xc>
 801e04e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e052:	4798      	blx	r3
 801e054:	3601      	adds	r6, #1
 801e056:	e7f2      	b.n	801e03e <__libc_init_array+0x1e>
 801e058:	08029198 	.word	0x08029198
 801e05c:	08029198 	.word	0x08029198
 801e060:	08029198 	.word	0x08029198
 801e064:	080291a4 	.word	0x080291a4

0801e068 <__retarget_lock_init_recursive>:
 801e068:	4770      	bx	lr

0801e06a <__retarget_lock_acquire_recursive>:
 801e06a:	4770      	bx	lr

0801e06c <__retarget_lock_release_recursive>:
 801e06c:	4770      	bx	lr

0801e06e <memcpy>:
 801e06e:	440a      	add	r2, r1
 801e070:	4291      	cmp	r1, r2
 801e072:	f100 33ff 	add.w	r3, r0, #4294967295
 801e076:	d100      	bne.n	801e07a <memcpy+0xc>
 801e078:	4770      	bx	lr
 801e07a:	b510      	push	{r4, lr}
 801e07c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e080:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e084:	4291      	cmp	r1, r2
 801e086:	d1f9      	bne.n	801e07c <memcpy+0xe>
 801e088:	bd10      	pop	{r4, pc}
	...

0801e08c <_free_r>:
 801e08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e08e:	2900      	cmp	r1, #0
 801e090:	d044      	beq.n	801e11c <_free_r+0x90>
 801e092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e096:	9001      	str	r0, [sp, #4]
 801e098:	2b00      	cmp	r3, #0
 801e09a:	f1a1 0404 	sub.w	r4, r1, #4
 801e09e:	bfb8      	it	lt
 801e0a0:	18e4      	addlt	r4, r4, r3
 801e0a2:	f7fe ff3b 	bl	801cf1c <__malloc_lock>
 801e0a6:	4a1e      	ldr	r2, [pc, #120]	; (801e120 <_free_r+0x94>)
 801e0a8:	9801      	ldr	r0, [sp, #4]
 801e0aa:	6813      	ldr	r3, [r2, #0]
 801e0ac:	b933      	cbnz	r3, 801e0bc <_free_r+0x30>
 801e0ae:	6063      	str	r3, [r4, #4]
 801e0b0:	6014      	str	r4, [r2, #0]
 801e0b2:	b003      	add	sp, #12
 801e0b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e0b8:	f7fe bf36 	b.w	801cf28 <__malloc_unlock>
 801e0bc:	42a3      	cmp	r3, r4
 801e0be:	d908      	bls.n	801e0d2 <_free_r+0x46>
 801e0c0:	6825      	ldr	r5, [r4, #0]
 801e0c2:	1961      	adds	r1, r4, r5
 801e0c4:	428b      	cmp	r3, r1
 801e0c6:	bf01      	itttt	eq
 801e0c8:	6819      	ldreq	r1, [r3, #0]
 801e0ca:	685b      	ldreq	r3, [r3, #4]
 801e0cc:	1949      	addeq	r1, r1, r5
 801e0ce:	6021      	streq	r1, [r4, #0]
 801e0d0:	e7ed      	b.n	801e0ae <_free_r+0x22>
 801e0d2:	461a      	mov	r2, r3
 801e0d4:	685b      	ldr	r3, [r3, #4]
 801e0d6:	b10b      	cbz	r3, 801e0dc <_free_r+0x50>
 801e0d8:	42a3      	cmp	r3, r4
 801e0da:	d9fa      	bls.n	801e0d2 <_free_r+0x46>
 801e0dc:	6811      	ldr	r1, [r2, #0]
 801e0de:	1855      	adds	r5, r2, r1
 801e0e0:	42a5      	cmp	r5, r4
 801e0e2:	d10b      	bne.n	801e0fc <_free_r+0x70>
 801e0e4:	6824      	ldr	r4, [r4, #0]
 801e0e6:	4421      	add	r1, r4
 801e0e8:	1854      	adds	r4, r2, r1
 801e0ea:	42a3      	cmp	r3, r4
 801e0ec:	6011      	str	r1, [r2, #0]
 801e0ee:	d1e0      	bne.n	801e0b2 <_free_r+0x26>
 801e0f0:	681c      	ldr	r4, [r3, #0]
 801e0f2:	685b      	ldr	r3, [r3, #4]
 801e0f4:	6053      	str	r3, [r2, #4]
 801e0f6:	440c      	add	r4, r1
 801e0f8:	6014      	str	r4, [r2, #0]
 801e0fa:	e7da      	b.n	801e0b2 <_free_r+0x26>
 801e0fc:	d902      	bls.n	801e104 <_free_r+0x78>
 801e0fe:	230c      	movs	r3, #12
 801e100:	6003      	str	r3, [r0, #0]
 801e102:	e7d6      	b.n	801e0b2 <_free_r+0x26>
 801e104:	6825      	ldr	r5, [r4, #0]
 801e106:	1961      	adds	r1, r4, r5
 801e108:	428b      	cmp	r3, r1
 801e10a:	bf04      	itt	eq
 801e10c:	6819      	ldreq	r1, [r3, #0]
 801e10e:	685b      	ldreq	r3, [r3, #4]
 801e110:	6063      	str	r3, [r4, #4]
 801e112:	bf04      	itt	eq
 801e114:	1949      	addeq	r1, r1, r5
 801e116:	6021      	streq	r1, [r4, #0]
 801e118:	6054      	str	r4, [r2, #4]
 801e11a:	e7ca      	b.n	801e0b2 <_free_r+0x26>
 801e11c:	b003      	add	sp, #12
 801e11e:	bd30      	pop	{r4, r5, pc}
 801e120:	200056a8 	.word	0x200056a8

0801e124 <rshift>:
 801e124:	6903      	ldr	r3, [r0, #16]
 801e126:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e12a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e12e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e132:	f100 0414 	add.w	r4, r0, #20
 801e136:	dd45      	ble.n	801e1c4 <rshift+0xa0>
 801e138:	f011 011f 	ands.w	r1, r1, #31
 801e13c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e140:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e144:	d10c      	bne.n	801e160 <rshift+0x3c>
 801e146:	f100 0710 	add.w	r7, r0, #16
 801e14a:	4629      	mov	r1, r5
 801e14c:	42b1      	cmp	r1, r6
 801e14e:	d334      	bcc.n	801e1ba <rshift+0x96>
 801e150:	1a9b      	subs	r3, r3, r2
 801e152:	009b      	lsls	r3, r3, #2
 801e154:	1eea      	subs	r2, r5, #3
 801e156:	4296      	cmp	r6, r2
 801e158:	bf38      	it	cc
 801e15a:	2300      	movcc	r3, #0
 801e15c:	4423      	add	r3, r4
 801e15e:	e015      	b.n	801e18c <rshift+0x68>
 801e160:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e164:	f1c1 0820 	rsb	r8, r1, #32
 801e168:	40cf      	lsrs	r7, r1
 801e16a:	f105 0e04 	add.w	lr, r5, #4
 801e16e:	46a1      	mov	r9, r4
 801e170:	4576      	cmp	r6, lr
 801e172:	46f4      	mov	ip, lr
 801e174:	d815      	bhi.n	801e1a2 <rshift+0x7e>
 801e176:	1a9a      	subs	r2, r3, r2
 801e178:	0092      	lsls	r2, r2, #2
 801e17a:	3a04      	subs	r2, #4
 801e17c:	3501      	adds	r5, #1
 801e17e:	42ae      	cmp	r6, r5
 801e180:	bf38      	it	cc
 801e182:	2200      	movcc	r2, #0
 801e184:	18a3      	adds	r3, r4, r2
 801e186:	50a7      	str	r7, [r4, r2]
 801e188:	b107      	cbz	r7, 801e18c <rshift+0x68>
 801e18a:	3304      	adds	r3, #4
 801e18c:	1b1a      	subs	r2, r3, r4
 801e18e:	42a3      	cmp	r3, r4
 801e190:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e194:	bf08      	it	eq
 801e196:	2300      	moveq	r3, #0
 801e198:	6102      	str	r2, [r0, #16]
 801e19a:	bf08      	it	eq
 801e19c:	6143      	streq	r3, [r0, #20]
 801e19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e1a2:	f8dc c000 	ldr.w	ip, [ip]
 801e1a6:	fa0c fc08 	lsl.w	ip, ip, r8
 801e1aa:	ea4c 0707 	orr.w	r7, ip, r7
 801e1ae:	f849 7b04 	str.w	r7, [r9], #4
 801e1b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e1b6:	40cf      	lsrs	r7, r1
 801e1b8:	e7da      	b.n	801e170 <rshift+0x4c>
 801e1ba:	f851 cb04 	ldr.w	ip, [r1], #4
 801e1be:	f847 cf04 	str.w	ip, [r7, #4]!
 801e1c2:	e7c3      	b.n	801e14c <rshift+0x28>
 801e1c4:	4623      	mov	r3, r4
 801e1c6:	e7e1      	b.n	801e18c <rshift+0x68>

0801e1c8 <__hexdig_fun>:
 801e1c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e1cc:	2b09      	cmp	r3, #9
 801e1ce:	d802      	bhi.n	801e1d6 <__hexdig_fun+0xe>
 801e1d0:	3820      	subs	r0, #32
 801e1d2:	b2c0      	uxtb	r0, r0
 801e1d4:	4770      	bx	lr
 801e1d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e1da:	2b05      	cmp	r3, #5
 801e1dc:	d801      	bhi.n	801e1e2 <__hexdig_fun+0x1a>
 801e1de:	3847      	subs	r0, #71	; 0x47
 801e1e0:	e7f7      	b.n	801e1d2 <__hexdig_fun+0xa>
 801e1e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e1e6:	2b05      	cmp	r3, #5
 801e1e8:	d801      	bhi.n	801e1ee <__hexdig_fun+0x26>
 801e1ea:	3827      	subs	r0, #39	; 0x27
 801e1ec:	e7f1      	b.n	801e1d2 <__hexdig_fun+0xa>
 801e1ee:	2000      	movs	r0, #0
 801e1f0:	4770      	bx	lr
	...

0801e1f4 <__gethex>:
 801e1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1f8:	4617      	mov	r7, r2
 801e1fa:	680a      	ldr	r2, [r1, #0]
 801e1fc:	b085      	sub	sp, #20
 801e1fe:	f102 0b02 	add.w	fp, r2, #2
 801e202:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e206:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e20a:	4681      	mov	r9, r0
 801e20c:	468a      	mov	sl, r1
 801e20e:	9302      	str	r3, [sp, #8]
 801e210:	32fe      	adds	r2, #254	; 0xfe
 801e212:	eb02 030b 	add.w	r3, r2, fp
 801e216:	46d8      	mov	r8, fp
 801e218:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801e21c:	9301      	str	r3, [sp, #4]
 801e21e:	2830      	cmp	r0, #48	; 0x30
 801e220:	d0f7      	beq.n	801e212 <__gethex+0x1e>
 801e222:	f7ff ffd1 	bl	801e1c8 <__hexdig_fun>
 801e226:	4604      	mov	r4, r0
 801e228:	2800      	cmp	r0, #0
 801e22a:	d138      	bne.n	801e29e <__gethex+0xaa>
 801e22c:	49a7      	ldr	r1, [pc, #668]	; (801e4cc <__gethex+0x2d8>)
 801e22e:	2201      	movs	r2, #1
 801e230:	4640      	mov	r0, r8
 801e232:	f7ff fe43 	bl	801debc <strncmp>
 801e236:	4606      	mov	r6, r0
 801e238:	2800      	cmp	r0, #0
 801e23a:	d169      	bne.n	801e310 <__gethex+0x11c>
 801e23c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e240:	465d      	mov	r5, fp
 801e242:	f7ff ffc1 	bl	801e1c8 <__hexdig_fun>
 801e246:	2800      	cmp	r0, #0
 801e248:	d064      	beq.n	801e314 <__gethex+0x120>
 801e24a:	465a      	mov	r2, fp
 801e24c:	7810      	ldrb	r0, [r2, #0]
 801e24e:	2830      	cmp	r0, #48	; 0x30
 801e250:	4690      	mov	r8, r2
 801e252:	f102 0201 	add.w	r2, r2, #1
 801e256:	d0f9      	beq.n	801e24c <__gethex+0x58>
 801e258:	f7ff ffb6 	bl	801e1c8 <__hexdig_fun>
 801e25c:	2301      	movs	r3, #1
 801e25e:	fab0 f480 	clz	r4, r0
 801e262:	0964      	lsrs	r4, r4, #5
 801e264:	465e      	mov	r6, fp
 801e266:	9301      	str	r3, [sp, #4]
 801e268:	4642      	mov	r2, r8
 801e26a:	4615      	mov	r5, r2
 801e26c:	3201      	adds	r2, #1
 801e26e:	7828      	ldrb	r0, [r5, #0]
 801e270:	f7ff ffaa 	bl	801e1c8 <__hexdig_fun>
 801e274:	2800      	cmp	r0, #0
 801e276:	d1f8      	bne.n	801e26a <__gethex+0x76>
 801e278:	4994      	ldr	r1, [pc, #592]	; (801e4cc <__gethex+0x2d8>)
 801e27a:	2201      	movs	r2, #1
 801e27c:	4628      	mov	r0, r5
 801e27e:	f7ff fe1d 	bl	801debc <strncmp>
 801e282:	b978      	cbnz	r0, 801e2a4 <__gethex+0xb0>
 801e284:	b946      	cbnz	r6, 801e298 <__gethex+0xa4>
 801e286:	1c6e      	adds	r6, r5, #1
 801e288:	4632      	mov	r2, r6
 801e28a:	4615      	mov	r5, r2
 801e28c:	3201      	adds	r2, #1
 801e28e:	7828      	ldrb	r0, [r5, #0]
 801e290:	f7ff ff9a 	bl	801e1c8 <__hexdig_fun>
 801e294:	2800      	cmp	r0, #0
 801e296:	d1f8      	bne.n	801e28a <__gethex+0x96>
 801e298:	1b73      	subs	r3, r6, r5
 801e29a:	009e      	lsls	r6, r3, #2
 801e29c:	e004      	b.n	801e2a8 <__gethex+0xb4>
 801e29e:	2400      	movs	r4, #0
 801e2a0:	4626      	mov	r6, r4
 801e2a2:	e7e1      	b.n	801e268 <__gethex+0x74>
 801e2a4:	2e00      	cmp	r6, #0
 801e2a6:	d1f7      	bne.n	801e298 <__gethex+0xa4>
 801e2a8:	782b      	ldrb	r3, [r5, #0]
 801e2aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e2ae:	2b50      	cmp	r3, #80	; 0x50
 801e2b0:	d13d      	bne.n	801e32e <__gethex+0x13a>
 801e2b2:	786b      	ldrb	r3, [r5, #1]
 801e2b4:	2b2b      	cmp	r3, #43	; 0x2b
 801e2b6:	d02f      	beq.n	801e318 <__gethex+0x124>
 801e2b8:	2b2d      	cmp	r3, #45	; 0x2d
 801e2ba:	d031      	beq.n	801e320 <__gethex+0x12c>
 801e2bc:	1c69      	adds	r1, r5, #1
 801e2be:	f04f 0b00 	mov.w	fp, #0
 801e2c2:	7808      	ldrb	r0, [r1, #0]
 801e2c4:	f7ff ff80 	bl	801e1c8 <__hexdig_fun>
 801e2c8:	1e42      	subs	r2, r0, #1
 801e2ca:	b2d2      	uxtb	r2, r2
 801e2cc:	2a18      	cmp	r2, #24
 801e2ce:	d82e      	bhi.n	801e32e <__gethex+0x13a>
 801e2d0:	f1a0 0210 	sub.w	r2, r0, #16
 801e2d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e2d8:	f7ff ff76 	bl	801e1c8 <__hexdig_fun>
 801e2dc:	f100 3cff 	add.w	ip, r0, #4294967295
 801e2e0:	fa5f fc8c 	uxtb.w	ip, ip
 801e2e4:	f1bc 0f18 	cmp.w	ip, #24
 801e2e8:	d91d      	bls.n	801e326 <__gethex+0x132>
 801e2ea:	f1bb 0f00 	cmp.w	fp, #0
 801e2ee:	d000      	beq.n	801e2f2 <__gethex+0xfe>
 801e2f0:	4252      	negs	r2, r2
 801e2f2:	4416      	add	r6, r2
 801e2f4:	f8ca 1000 	str.w	r1, [sl]
 801e2f8:	b1dc      	cbz	r4, 801e332 <__gethex+0x13e>
 801e2fa:	9b01      	ldr	r3, [sp, #4]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	bf14      	ite	ne
 801e300:	f04f 0800 	movne.w	r8, #0
 801e304:	f04f 0806 	moveq.w	r8, #6
 801e308:	4640      	mov	r0, r8
 801e30a:	b005      	add	sp, #20
 801e30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e310:	4645      	mov	r5, r8
 801e312:	4626      	mov	r6, r4
 801e314:	2401      	movs	r4, #1
 801e316:	e7c7      	b.n	801e2a8 <__gethex+0xb4>
 801e318:	f04f 0b00 	mov.w	fp, #0
 801e31c:	1ca9      	adds	r1, r5, #2
 801e31e:	e7d0      	b.n	801e2c2 <__gethex+0xce>
 801e320:	f04f 0b01 	mov.w	fp, #1
 801e324:	e7fa      	b.n	801e31c <__gethex+0x128>
 801e326:	230a      	movs	r3, #10
 801e328:	fb03 0002 	mla	r0, r3, r2, r0
 801e32c:	e7d0      	b.n	801e2d0 <__gethex+0xdc>
 801e32e:	4629      	mov	r1, r5
 801e330:	e7e0      	b.n	801e2f4 <__gethex+0x100>
 801e332:	eba5 0308 	sub.w	r3, r5, r8
 801e336:	3b01      	subs	r3, #1
 801e338:	4621      	mov	r1, r4
 801e33a:	2b07      	cmp	r3, #7
 801e33c:	dc0a      	bgt.n	801e354 <__gethex+0x160>
 801e33e:	4648      	mov	r0, r9
 801e340:	f000 fa5a 	bl	801e7f8 <_Balloc>
 801e344:	4604      	mov	r4, r0
 801e346:	b940      	cbnz	r0, 801e35a <__gethex+0x166>
 801e348:	4b61      	ldr	r3, [pc, #388]	; (801e4d0 <__gethex+0x2dc>)
 801e34a:	4602      	mov	r2, r0
 801e34c:	21e4      	movs	r1, #228	; 0xe4
 801e34e:	4861      	ldr	r0, [pc, #388]	; (801e4d4 <__gethex+0x2e0>)
 801e350:	f7fe fcf4 	bl	801cd3c <__assert_func>
 801e354:	3101      	adds	r1, #1
 801e356:	105b      	asrs	r3, r3, #1
 801e358:	e7ef      	b.n	801e33a <__gethex+0x146>
 801e35a:	f100 0a14 	add.w	sl, r0, #20
 801e35e:	2300      	movs	r3, #0
 801e360:	495a      	ldr	r1, [pc, #360]	; (801e4cc <__gethex+0x2d8>)
 801e362:	f8cd a004 	str.w	sl, [sp, #4]
 801e366:	469b      	mov	fp, r3
 801e368:	45a8      	cmp	r8, r5
 801e36a:	d342      	bcc.n	801e3f2 <__gethex+0x1fe>
 801e36c:	9801      	ldr	r0, [sp, #4]
 801e36e:	f840 bb04 	str.w	fp, [r0], #4
 801e372:	eba0 000a 	sub.w	r0, r0, sl
 801e376:	1080      	asrs	r0, r0, #2
 801e378:	6120      	str	r0, [r4, #16]
 801e37a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801e37e:	4658      	mov	r0, fp
 801e380:	f000 fb2c 	bl	801e9dc <__hi0bits>
 801e384:	683d      	ldr	r5, [r7, #0]
 801e386:	eba8 0000 	sub.w	r0, r8, r0
 801e38a:	42a8      	cmp	r0, r5
 801e38c:	dd59      	ble.n	801e442 <__gethex+0x24e>
 801e38e:	eba0 0805 	sub.w	r8, r0, r5
 801e392:	4641      	mov	r1, r8
 801e394:	4620      	mov	r0, r4
 801e396:	f000 febb 	bl	801f110 <__any_on>
 801e39a:	4683      	mov	fp, r0
 801e39c:	b1b8      	cbz	r0, 801e3ce <__gethex+0x1da>
 801e39e:	f108 33ff 	add.w	r3, r8, #4294967295
 801e3a2:	1159      	asrs	r1, r3, #5
 801e3a4:	f003 021f 	and.w	r2, r3, #31
 801e3a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e3ac:	f04f 0b01 	mov.w	fp, #1
 801e3b0:	fa0b f202 	lsl.w	r2, fp, r2
 801e3b4:	420a      	tst	r2, r1
 801e3b6:	d00a      	beq.n	801e3ce <__gethex+0x1da>
 801e3b8:	455b      	cmp	r3, fp
 801e3ba:	dd06      	ble.n	801e3ca <__gethex+0x1d6>
 801e3bc:	f1a8 0102 	sub.w	r1, r8, #2
 801e3c0:	4620      	mov	r0, r4
 801e3c2:	f000 fea5 	bl	801f110 <__any_on>
 801e3c6:	2800      	cmp	r0, #0
 801e3c8:	d138      	bne.n	801e43c <__gethex+0x248>
 801e3ca:	f04f 0b02 	mov.w	fp, #2
 801e3ce:	4641      	mov	r1, r8
 801e3d0:	4620      	mov	r0, r4
 801e3d2:	f7ff fea7 	bl	801e124 <rshift>
 801e3d6:	4446      	add	r6, r8
 801e3d8:	68bb      	ldr	r3, [r7, #8]
 801e3da:	42b3      	cmp	r3, r6
 801e3dc:	da41      	bge.n	801e462 <__gethex+0x26e>
 801e3de:	4621      	mov	r1, r4
 801e3e0:	4648      	mov	r0, r9
 801e3e2:	f000 fa49 	bl	801e878 <_Bfree>
 801e3e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	6013      	str	r3, [r2, #0]
 801e3ec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801e3f0:	e78a      	b.n	801e308 <__gethex+0x114>
 801e3f2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801e3f6:	2a2e      	cmp	r2, #46	; 0x2e
 801e3f8:	d014      	beq.n	801e424 <__gethex+0x230>
 801e3fa:	2b20      	cmp	r3, #32
 801e3fc:	d106      	bne.n	801e40c <__gethex+0x218>
 801e3fe:	9b01      	ldr	r3, [sp, #4]
 801e400:	f843 bb04 	str.w	fp, [r3], #4
 801e404:	f04f 0b00 	mov.w	fp, #0
 801e408:	9301      	str	r3, [sp, #4]
 801e40a:	465b      	mov	r3, fp
 801e40c:	7828      	ldrb	r0, [r5, #0]
 801e40e:	9303      	str	r3, [sp, #12]
 801e410:	f7ff feda 	bl	801e1c8 <__hexdig_fun>
 801e414:	9b03      	ldr	r3, [sp, #12]
 801e416:	f000 000f 	and.w	r0, r0, #15
 801e41a:	4098      	lsls	r0, r3
 801e41c:	ea4b 0b00 	orr.w	fp, fp, r0
 801e420:	3304      	adds	r3, #4
 801e422:	e7a1      	b.n	801e368 <__gethex+0x174>
 801e424:	45a8      	cmp	r8, r5
 801e426:	d8e8      	bhi.n	801e3fa <__gethex+0x206>
 801e428:	2201      	movs	r2, #1
 801e42a:	4628      	mov	r0, r5
 801e42c:	9303      	str	r3, [sp, #12]
 801e42e:	f7ff fd45 	bl	801debc <strncmp>
 801e432:	4926      	ldr	r1, [pc, #152]	; (801e4cc <__gethex+0x2d8>)
 801e434:	9b03      	ldr	r3, [sp, #12]
 801e436:	2800      	cmp	r0, #0
 801e438:	d1df      	bne.n	801e3fa <__gethex+0x206>
 801e43a:	e795      	b.n	801e368 <__gethex+0x174>
 801e43c:	f04f 0b03 	mov.w	fp, #3
 801e440:	e7c5      	b.n	801e3ce <__gethex+0x1da>
 801e442:	da0b      	bge.n	801e45c <__gethex+0x268>
 801e444:	eba5 0800 	sub.w	r8, r5, r0
 801e448:	4621      	mov	r1, r4
 801e44a:	4642      	mov	r2, r8
 801e44c:	4648      	mov	r0, r9
 801e44e:	f000 fc2d 	bl	801ecac <__lshift>
 801e452:	eba6 0608 	sub.w	r6, r6, r8
 801e456:	4604      	mov	r4, r0
 801e458:	f100 0a14 	add.w	sl, r0, #20
 801e45c:	f04f 0b00 	mov.w	fp, #0
 801e460:	e7ba      	b.n	801e3d8 <__gethex+0x1e4>
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	42b3      	cmp	r3, r6
 801e466:	dd73      	ble.n	801e550 <__gethex+0x35c>
 801e468:	1b9e      	subs	r6, r3, r6
 801e46a:	42b5      	cmp	r5, r6
 801e46c:	dc34      	bgt.n	801e4d8 <__gethex+0x2e4>
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	2b02      	cmp	r3, #2
 801e472:	d023      	beq.n	801e4bc <__gethex+0x2c8>
 801e474:	2b03      	cmp	r3, #3
 801e476:	d025      	beq.n	801e4c4 <__gethex+0x2d0>
 801e478:	2b01      	cmp	r3, #1
 801e47a:	d115      	bne.n	801e4a8 <__gethex+0x2b4>
 801e47c:	42b5      	cmp	r5, r6
 801e47e:	d113      	bne.n	801e4a8 <__gethex+0x2b4>
 801e480:	2d01      	cmp	r5, #1
 801e482:	d10b      	bne.n	801e49c <__gethex+0x2a8>
 801e484:	9a02      	ldr	r2, [sp, #8]
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	6013      	str	r3, [r2, #0]
 801e48a:	2301      	movs	r3, #1
 801e48c:	6123      	str	r3, [r4, #16]
 801e48e:	f8ca 3000 	str.w	r3, [sl]
 801e492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e494:	f04f 0862 	mov.w	r8, #98	; 0x62
 801e498:	601c      	str	r4, [r3, #0]
 801e49a:	e735      	b.n	801e308 <__gethex+0x114>
 801e49c:	1e69      	subs	r1, r5, #1
 801e49e:	4620      	mov	r0, r4
 801e4a0:	f000 fe36 	bl	801f110 <__any_on>
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	d1ed      	bne.n	801e484 <__gethex+0x290>
 801e4a8:	4621      	mov	r1, r4
 801e4aa:	4648      	mov	r0, r9
 801e4ac:	f000 f9e4 	bl	801e878 <_Bfree>
 801e4b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	6013      	str	r3, [r2, #0]
 801e4b6:	f04f 0850 	mov.w	r8, #80	; 0x50
 801e4ba:	e725      	b.n	801e308 <__gethex+0x114>
 801e4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d1f2      	bne.n	801e4a8 <__gethex+0x2b4>
 801e4c2:	e7df      	b.n	801e484 <__gethex+0x290>
 801e4c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d1dc      	bne.n	801e484 <__gethex+0x290>
 801e4ca:	e7ed      	b.n	801e4a8 <__gethex+0x2b4>
 801e4cc:	08028e0c 	.word	0x08028e0c
 801e4d0:	08028f79 	.word	0x08028f79
 801e4d4:	08028f8a 	.word	0x08028f8a
 801e4d8:	f106 38ff 	add.w	r8, r6, #4294967295
 801e4dc:	f1bb 0f00 	cmp.w	fp, #0
 801e4e0:	d133      	bne.n	801e54a <__gethex+0x356>
 801e4e2:	f1b8 0f00 	cmp.w	r8, #0
 801e4e6:	d004      	beq.n	801e4f2 <__gethex+0x2fe>
 801e4e8:	4641      	mov	r1, r8
 801e4ea:	4620      	mov	r0, r4
 801e4ec:	f000 fe10 	bl	801f110 <__any_on>
 801e4f0:	4683      	mov	fp, r0
 801e4f2:	ea4f 1268 	mov.w	r2, r8, asr #5
 801e4f6:	2301      	movs	r3, #1
 801e4f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e4fc:	f008 081f 	and.w	r8, r8, #31
 801e500:	fa03 f308 	lsl.w	r3, r3, r8
 801e504:	4213      	tst	r3, r2
 801e506:	4631      	mov	r1, r6
 801e508:	4620      	mov	r0, r4
 801e50a:	bf18      	it	ne
 801e50c:	f04b 0b02 	orrne.w	fp, fp, #2
 801e510:	1bad      	subs	r5, r5, r6
 801e512:	f7ff fe07 	bl	801e124 <rshift>
 801e516:	687e      	ldr	r6, [r7, #4]
 801e518:	f04f 0802 	mov.w	r8, #2
 801e51c:	f1bb 0f00 	cmp.w	fp, #0
 801e520:	d04a      	beq.n	801e5b8 <__gethex+0x3c4>
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	2b02      	cmp	r3, #2
 801e526:	d016      	beq.n	801e556 <__gethex+0x362>
 801e528:	2b03      	cmp	r3, #3
 801e52a:	d018      	beq.n	801e55e <__gethex+0x36a>
 801e52c:	2b01      	cmp	r3, #1
 801e52e:	d109      	bne.n	801e544 <__gethex+0x350>
 801e530:	f01b 0f02 	tst.w	fp, #2
 801e534:	d006      	beq.n	801e544 <__gethex+0x350>
 801e536:	f8da 3000 	ldr.w	r3, [sl]
 801e53a:	ea4b 0b03 	orr.w	fp, fp, r3
 801e53e:	f01b 0f01 	tst.w	fp, #1
 801e542:	d10f      	bne.n	801e564 <__gethex+0x370>
 801e544:	f048 0810 	orr.w	r8, r8, #16
 801e548:	e036      	b.n	801e5b8 <__gethex+0x3c4>
 801e54a:	f04f 0b01 	mov.w	fp, #1
 801e54e:	e7d0      	b.n	801e4f2 <__gethex+0x2fe>
 801e550:	f04f 0801 	mov.w	r8, #1
 801e554:	e7e2      	b.n	801e51c <__gethex+0x328>
 801e556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e558:	f1c3 0301 	rsb	r3, r3, #1
 801e55c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e55e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e560:	2b00      	cmp	r3, #0
 801e562:	d0ef      	beq.n	801e544 <__gethex+0x350>
 801e564:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e568:	f104 0214 	add.w	r2, r4, #20
 801e56c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801e570:	9301      	str	r3, [sp, #4]
 801e572:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801e576:	2300      	movs	r3, #0
 801e578:	4694      	mov	ip, r2
 801e57a:	f852 1b04 	ldr.w	r1, [r2], #4
 801e57e:	f1b1 3fff 	cmp.w	r1, #4294967295
 801e582:	d01e      	beq.n	801e5c2 <__gethex+0x3ce>
 801e584:	3101      	adds	r1, #1
 801e586:	f8cc 1000 	str.w	r1, [ip]
 801e58a:	f1b8 0f02 	cmp.w	r8, #2
 801e58e:	f104 0214 	add.w	r2, r4, #20
 801e592:	d13d      	bne.n	801e610 <__gethex+0x41c>
 801e594:	683b      	ldr	r3, [r7, #0]
 801e596:	3b01      	subs	r3, #1
 801e598:	42ab      	cmp	r3, r5
 801e59a:	d10b      	bne.n	801e5b4 <__gethex+0x3c0>
 801e59c:	1169      	asrs	r1, r5, #5
 801e59e:	2301      	movs	r3, #1
 801e5a0:	f005 051f 	and.w	r5, r5, #31
 801e5a4:	fa03 f505 	lsl.w	r5, r3, r5
 801e5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e5ac:	421d      	tst	r5, r3
 801e5ae:	bf18      	it	ne
 801e5b0:	f04f 0801 	movne.w	r8, #1
 801e5b4:	f048 0820 	orr.w	r8, r8, #32
 801e5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5ba:	601c      	str	r4, [r3, #0]
 801e5bc:	9b02      	ldr	r3, [sp, #8]
 801e5be:	601e      	str	r6, [r3, #0]
 801e5c0:	e6a2      	b.n	801e308 <__gethex+0x114>
 801e5c2:	4290      	cmp	r0, r2
 801e5c4:	f842 3c04 	str.w	r3, [r2, #-4]
 801e5c8:	d8d6      	bhi.n	801e578 <__gethex+0x384>
 801e5ca:	68a2      	ldr	r2, [r4, #8]
 801e5cc:	4593      	cmp	fp, r2
 801e5ce:	db17      	blt.n	801e600 <__gethex+0x40c>
 801e5d0:	6861      	ldr	r1, [r4, #4]
 801e5d2:	4648      	mov	r0, r9
 801e5d4:	3101      	adds	r1, #1
 801e5d6:	f000 f90f 	bl	801e7f8 <_Balloc>
 801e5da:	4682      	mov	sl, r0
 801e5dc:	b918      	cbnz	r0, 801e5e6 <__gethex+0x3f2>
 801e5de:	4b1b      	ldr	r3, [pc, #108]	; (801e64c <__gethex+0x458>)
 801e5e0:	4602      	mov	r2, r0
 801e5e2:	2184      	movs	r1, #132	; 0x84
 801e5e4:	e6b3      	b.n	801e34e <__gethex+0x15a>
 801e5e6:	6922      	ldr	r2, [r4, #16]
 801e5e8:	3202      	adds	r2, #2
 801e5ea:	f104 010c 	add.w	r1, r4, #12
 801e5ee:	0092      	lsls	r2, r2, #2
 801e5f0:	300c      	adds	r0, #12
 801e5f2:	f7ff fd3c 	bl	801e06e <memcpy>
 801e5f6:	4621      	mov	r1, r4
 801e5f8:	4648      	mov	r0, r9
 801e5fa:	f000 f93d 	bl	801e878 <_Bfree>
 801e5fe:	4654      	mov	r4, sl
 801e600:	6922      	ldr	r2, [r4, #16]
 801e602:	1c51      	adds	r1, r2, #1
 801e604:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e608:	6121      	str	r1, [r4, #16]
 801e60a:	2101      	movs	r1, #1
 801e60c:	6151      	str	r1, [r2, #20]
 801e60e:	e7bc      	b.n	801e58a <__gethex+0x396>
 801e610:	6921      	ldr	r1, [r4, #16]
 801e612:	4559      	cmp	r1, fp
 801e614:	dd0b      	ble.n	801e62e <__gethex+0x43a>
 801e616:	2101      	movs	r1, #1
 801e618:	4620      	mov	r0, r4
 801e61a:	f7ff fd83 	bl	801e124 <rshift>
 801e61e:	68bb      	ldr	r3, [r7, #8]
 801e620:	3601      	adds	r6, #1
 801e622:	42b3      	cmp	r3, r6
 801e624:	f6ff aedb 	blt.w	801e3de <__gethex+0x1ea>
 801e628:	f04f 0801 	mov.w	r8, #1
 801e62c:	e7c2      	b.n	801e5b4 <__gethex+0x3c0>
 801e62e:	f015 051f 	ands.w	r5, r5, #31
 801e632:	d0f9      	beq.n	801e628 <__gethex+0x434>
 801e634:	9b01      	ldr	r3, [sp, #4]
 801e636:	441a      	add	r2, r3
 801e638:	f1c5 0520 	rsb	r5, r5, #32
 801e63c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801e640:	f000 f9cc 	bl	801e9dc <__hi0bits>
 801e644:	42a8      	cmp	r0, r5
 801e646:	dbe6      	blt.n	801e616 <__gethex+0x422>
 801e648:	e7ee      	b.n	801e628 <__gethex+0x434>
 801e64a:	bf00      	nop
 801e64c:	08028f79 	.word	0x08028f79

0801e650 <L_shift>:
 801e650:	f1c2 0208 	rsb	r2, r2, #8
 801e654:	0092      	lsls	r2, r2, #2
 801e656:	b570      	push	{r4, r5, r6, lr}
 801e658:	f1c2 0620 	rsb	r6, r2, #32
 801e65c:	6843      	ldr	r3, [r0, #4]
 801e65e:	6804      	ldr	r4, [r0, #0]
 801e660:	fa03 f506 	lsl.w	r5, r3, r6
 801e664:	432c      	orrs	r4, r5
 801e666:	40d3      	lsrs	r3, r2
 801e668:	6004      	str	r4, [r0, #0]
 801e66a:	f840 3f04 	str.w	r3, [r0, #4]!
 801e66e:	4288      	cmp	r0, r1
 801e670:	d3f4      	bcc.n	801e65c <L_shift+0xc>
 801e672:	bd70      	pop	{r4, r5, r6, pc}

0801e674 <__match>:
 801e674:	b530      	push	{r4, r5, lr}
 801e676:	6803      	ldr	r3, [r0, #0]
 801e678:	3301      	adds	r3, #1
 801e67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e67e:	b914      	cbnz	r4, 801e686 <__match+0x12>
 801e680:	6003      	str	r3, [r0, #0]
 801e682:	2001      	movs	r0, #1
 801e684:	bd30      	pop	{r4, r5, pc}
 801e686:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e68a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e68e:	2d19      	cmp	r5, #25
 801e690:	bf98      	it	ls
 801e692:	3220      	addls	r2, #32
 801e694:	42a2      	cmp	r2, r4
 801e696:	d0f0      	beq.n	801e67a <__match+0x6>
 801e698:	2000      	movs	r0, #0
 801e69a:	e7f3      	b.n	801e684 <__match+0x10>

0801e69c <__hexnan>:
 801e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6a0:	680b      	ldr	r3, [r1, #0]
 801e6a2:	6801      	ldr	r1, [r0, #0]
 801e6a4:	115e      	asrs	r6, r3, #5
 801e6a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e6aa:	f013 031f 	ands.w	r3, r3, #31
 801e6ae:	b087      	sub	sp, #28
 801e6b0:	bf18      	it	ne
 801e6b2:	3604      	addne	r6, #4
 801e6b4:	2500      	movs	r5, #0
 801e6b6:	1f37      	subs	r7, r6, #4
 801e6b8:	4682      	mov	sl, r0
 801e6ba:	4690      	mov	r8, r2
 801e6bc:	9301      	str	r3, [sp, #4]
 801e6be:	f846 5c04 	str.w	r5, [r6, #-4]
 801e6c2:	46b9      	mov	r9, r7
 801e6c4:	463c      	mov	r4, r7
 801e6c6:	9502      	str	r5, [sp, #8]
 801e6c8:	46ab      	mov	fp, r5
 801e6ca:	784a      	ldrb	r2, [r1, #1]
 801e6cc:	1c4b      	adds	r3, r1, #1
 801e6ce:	9303      	str	r3, [sp, #12]
 801e6d0:	b342      	cbz	r2, 801e724 <__hexnan+0x88>
 801e6d2:	4610      	mov	r0, r2
 801e6d4:	9105      	str	r1, [sp, #20]
 801e6d6:	9204      	str	r2, [sp, #16]
 801e6d8:	f7ff fd76 	bl	801e1c8 <__hexdig_fun>
 801e6dc:	2800      	cmp	r0, #0
 801e6de:	d14f      	bne.n	801e780 <__hexnan+0xe4>
 801e6e0:	9a04      	ldr	r2, [sp, #16]
 801e6e2:	9905      	ldr	r1, [sp, #20]
 801e6e4:	2a20      	cmp	r2, #32
 801e6e6:	d818      	bhi.n	801e71a <__hexnan+0x7e>
 801e6e8:	9b02      	ldr	r3, [sp, #8]
 801e6ea:	459b      	cmp	fp, r3
 801e6ec:	dd13      	ble.n	801e716 <__hexnan+0x7a>
 801e6ee:	454c      	cmp	r4, r9
 801e6f0:	d206      	bcs.n	801e700 <__hexnan+0x64>
 801e6f2:	2d07      	cmp	r5, #7
 801e6f4:	dc04      	bgt.n	801e700 <__hexnan+0x64>
 801e6f6:	462a      	mov	r2, r5
 801e6f8:	4649      	mov	r1, r9
 801e6fa:	4620      	mov	r0, r4
 801e6fc:	f7ff ffa8 	bl	801e650 <L_shift>
 801e700:	4544      	cmp	r4, r8
 801e702:	d950      	bls.n	801e7a6 <__hexnan+0x10a>
 801e704:	2300      	movs	r3, #0
 801e706:	f1a4 0904 	sub.w	r9, r4, #4
 801e70a:	f844 3c04 	str.w	r3, [r4, #-4]
 801e70e:	f8cd b008 	str.w	fp, [sp, #8]
 801e712:	464c      	mov	r4, r9
 801e714:	461d      	mov	r5, r3
 801e716:	9903      	ldr	r1, [sp, #12]
 801e718:	e7d7      	b.n	801e6ca <__hexnan+0x2e>
 801e71a:	2a29      	cmp	r2, #41	; 0x29
 801e71c:	d155      	bne.n	801e7ca <__hexnan+0x12e>
 801e71e:	3102      	adds	r1, #2
 801e720:	f8ca 1000 	str.w	r1, [sl]
 801e724:	f1bb 0f00 	cmp.w	fp, #0
 801e728:	d04f      	beq.n	801e7ca <__hexnan+0x12e>
 801e72a:	454c      	cmp	r4, r9
 801e72c:	d206      	bcs.n	801e73c <__hexnan+0xa0>
 801e72e:	2d07      	cmp	r5, #7
 801e730:	dc04      	bgt.n	801e73c <__hexnan+0xa0>
 801e732:	462a      	mov	r2, r5
 801e734:	4649      	mov	r1, r9
 801e736:	4620      	mov	r0, r4
 801e738:	f7ff ff8a 	bl	801e650 <L_shift>
 801e73c:	4544      	cmp	r4, r8
 801e73e:	d934      	bls.n	801e7aa <__hexnan+0x10e>
 801e740:	f1a8 0204 	sub.w	r2, r8, #4
 801e744:	4623      	mov	r3, r4
 801e746:	f853 1b04 	ldr.w	r1, [r3], #4
 801e74a:	f842 1f04 	str.w	r1, [r2, #4]!
 801e74e:	429f      	cmp	r7, r3
 801e750:	d2f9      	bcs.n	801e746 <__hexnan+0xaa>
 801e752:	1b3b      	subs	r3, r7, r4
 801e754:	f023 0303 	bic.w	r3, r3, #3
 801e758:	3304      	adds	r3, #4
 801e75a:	3e03      	subs	r6, #3
 801e75c:	3401      	adds	r4, #1
 801e75e:	42a6      	cmp	r6, r4
 801e760:	bf38      	it	cc
 801e762:	2304      	movcc	r3, #4
 801e764:	4443      	add	r3, r8
 801e766:	2200      	movs	r2, #0
 801e768:	f843 2b04 	str.w	r2, [r3], #4
 801e76c:	429f      	cmp	r7, r3
 801e76e:	d2fb      	bcs.n	801e768 <__hexnan+0xcc>
 801e770:	683b      	ldr	r3, [r7, #0]
 801e772:	b91b      	cbnz	r3, 801e77c <__hexnan+0xe0>
 801e774:	4547      	cmp	r7, r8
 801e776:	d126      	bne.n	801e7c6 <__hexnan+0x12a>
 801e778:	2301      	movs	r3, #1
 801e77a:	603b      	str	r3, [r7, #0]
 801e77c:	2005      	movs	r0, #5
 801e77e:	e025      	b.n	801e7cc <__hexnan+0x130>
 801e780:	3501      	adds	r5, #1
 801e782:	2d08      	cmp	r5, #8
 801e784:	f10b 0b01 	add.w	fp, fp, #1
 801e788:	dd06      	ble.n	801e798 <__hexnan+0xfc>
 801e78a:	4544      	cmp	r4, r8
 801e78c:	d9c3      	bls.n	801e716 <__hexnan+0x7a>
 801e78e:	2300      	movs	r3, #0
 801e790:	f844 3c04 	str.w	r3, [r4, #-4]
 801e794:	2501      	movs	r5, #1
 801e796:	3c04      	subs	r4, #4
 801e798:	6822      	ldr	r2, [r4, #0]
 801e79a:	f000 000f 	and.w	r0, r0, #15
 801e79e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e7a2:	6020      	str	r0, [r4, #0]
 801e7a4:	e7b7      	b.n	801e716 <__hexnan+0x7a>
 801e7a6:	2508      	movs	r5, #8
 801e7a8:	e7b5      	b.n	801e716 <__hexnan+0x7a>
 801e7aa:	9b01      	ldr	r3, [sp, #4]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d0df      	beq.n	801e770 <__hexnan+0xd4>
 801e7b0:	f1c3 0320 	rsb	r3, r3, #32
 801e7b4:	f04f 32ff 	mov.w	r2, #4294967295
 801e7b8:	40da      	lsrs	r2, r3
 801e7ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e7be:	4013      	ands	r3, r2
 801e7c0:	f846 3c04 	str.w	r3, [r6, #-4]
 801e7c4:	e7d4      	b.n	801e770 <__hexnan+0xd4>
 801e7c6:	3f04      	subs	r7, #4
 801e7c8:	e7d2      	b.n	801e770 <__hexnan+0xd4>
 801e7ca:	2004      	movs	r0, #4
 801e7cc:	b007      	add	sp, #28
 801e7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7d2 <__ascii_mbtowc>:
 801e7d2:	b082      	sub	sp, #8
 801e7d4:	b901      	cbnz	r1, 801e7d8 <__ascii_mbtowc+0x6>
 801e7d6:	a901      	add	r1, sp, #4
 801e7d8:	b142      	cbz	r2, 801e7ec <__ascii_mbtowc+0x1a>
 801e7da:	b14b      	cbz	r3, 801e7f0 <__ascii_mbtowc+0x1e>
 801e7dc:	7813      	ldrb	r3, [r2, #0]
 801e7de:	600b      	str	r3, [r1, #0]
 801e7e0:	7812      	ldrb	r2, [r2, #0]
 801e7e2:	1e10      	subs	r0, r2, #0
 801e7e4:	bf18      	it	ne
 801e7e6:	2001      	movne	r0, #1
 801e7e8:	b002      	add	sp, #8
 801e7ea:	4770      	bx	lr
 801e7ec:	4610      	mov	r0, r2
 801e7ee:	e7fb      	b.n	801e7e8 <__ascii_mbtowc+0x16>
 801e7f0:	f06f 0001 	mvn.w	r0, #1
 801e7f4:	e7f8      	b.n	801e7e8 <__ascii_mbtowc+0x16>
	...

0801e7f8 <_Balloc>:
 801e7f8:	b570      	push	{r4, r5, r6, lr}
 801e7fa:	69c6      	ldr	r6, [r0, #28]
 801e7fc:	4604      	mov	r4, r0
 801e7fe:	460d      	mov	r5, r1
 801e800:	b976      	cbnz	r6, 801e820 <_Balloc+0x28>
 801e802:	2010      	movs	r0, #16
 801e804:	f7fe fada 	bl	801cdbc <malloc>
 801e808:	4602      	mov	r2, r0
 801e80a:	61e0      	str	r0, [r4, #28]
 801e80c:	b920      	cbnz	r0, 801e818 <_Balloc+0x20>
 801e80e:	4b18      	ldr	r3, [pc, #96]	; (801e870 <_Balloc+0x78>)
 801e810:	4818      	ldr	r0, [pc, #96]	; (801e874 <_Balloc+0x7c>)
 801e812:	216b      	movs	r1, #107	; 0x6b
 801e814:	f7fe fa92 	bl	801cd3c <__assert_func>
 801e818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e81c:	6006      	str	r6, [r0, #0]
 801e81e:	60c6      	str	r6, [r0, #12]
 801e820:	69e6      	ldr	r6, [r4, #28]
 801e822:	68f3      	ldr	r3, [r6, #12]
 801e824:	b183      	cbz	r3, 801e848 <_Balloc+0x50>
 801e826:	69e3      	ldr	r3, [r4, #28]
 801e828:	68db      	ldr	r3, [r3, #12]
 801e82a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e82e:	b9b8      	cbnz	r0, 801e860 <_Balloc+0x68>
 801e830:	2101      	movs	r1, #1
 801e832:	fa01 f605 	lsl.w	r6, r1, r5
 801e836:	1d72      	adds	r2, r6, #5
 801e838:	0092      	lsls	r2, r2, #2
 801e83a:	4620      	mov	r0, r4
 801e83c:	f7fe faa8 	bl	801cd90 <_calloc_r>
 801e840:	b160      	cbz	r0, 801e85c <_Balloc+0x64>
 801e842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e846:	e00e      	b.n	801e866 <_Balloc+0x6e>
 801e848:	2221      	movs	r2, #33	; 0x21
 801e84a:	2104      	movs	r1, #4
 801e84c:	4620      	mov	r0, r4
 801e84e:	f7fe fa9f 	bl	801cd90 <_calloc_r>
 801e852:	69e3      	ldr	r3, [r4, #28]
 801e854:	60f0      	str	r0, [r6, #12]
 801e856:	68db      	ldr	r3, [r3, #12]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d1e4      	bne.n	801e826 <_Balloc+0x2e>
 801e85c:	2000      	movs	r0, #0
 801e85e:	bd70      	pop	{r4, r5, r6, pc}
 801e860:	6802      	ldr	r2, [r0, #0]
 801e862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e866:	2300      	movs	r3, #0
 801e868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e86c:	e7f7      	b.n	801e85e <_Balloc+0x66>
 801e86e:	bf00      	nop
 801e870:	08028fea 	.word	0x08028fea
 801e874:	08029001 	.word	0x08029001

0801e878 <_Bfree>:
 801e878:	b570      	push	{r4, r5, r6, lr}
 801e87a:	69c6      	ldr	r6, [r0, #28]
 801e87c:	4605      	mov	r5, r0
 801e87e:	460c      	mov	r4, r1
 801e880:	b976      	cbnz	r6, 801e8a0 <_Bfree+0x28>
 801e882:	2010      	movs	r0, #16
 801e884:	f7fe fa9a 	bl	801cdbc <malloc>
 801e888:	4602      	mov	r2, r0
 801e88a:	61e8      	str	r0, [r5, #28]
 801e88c:	b920      	cbnz	r0, 801e898 <_Bfree+0x20>
 801e88e:	4b09      	ldr	r3, [pc, #36]	; (801e8b4 <_Bfree+0x3c>)
 801e890:	4809      	ldr	r0, [pc, #36]	; (801e8b8 <_Bfree+0x40>)
 801e892:	218f      	movs	r1, #143	; 0x8f
 801e894:	f7fe fa52 	bl	801cd3c <__assert_func>
 801e898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e89c:	6006      	str	r6, [r0, #0]
 801e89e:	60c6      	str	r6, [r0, #12]
 801e8a0:	b13c      	cbz	r4, 801e8b2 <_Bfree+0x3a>
 801e8a2:	69eb      	ldr	r3, [r5, #28]
 801e8a4:	6862      	ldr	r2, [r4, #4]
 801e8a6:	68db      	ldr	r3, [r3, #12]
 801e8a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e8ac:	6021      	str	r1, [r4, #0]
 801e8ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e8b2:	bd70      	pop	{r4, r5, r6, pc}
 801e8b4:	08028fea 	.word	0x08028fea
 801e8b8:	08029001 	.word	0x08029001

0801e8bc <__multadd>:
 801e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8c0:	690d      	ldr	r5, [r1, #16]
 801e8c2:	4607      	mov	r7, r0
 801e8c4:	460c      	mov	r4, r1
 801e8c6:	461e      	mov	r6, r3
 801e8c8:	f101 0c14 	add.w	ip, r1, #20
 801e8cc:	2000      	movs	r0, #0
 801e8ce:	f8dc 3000 	ldr.w	r3, [ip]
 801e8d2:	b299      	uxth	r1, r3
 801e8d4:	fb02 6101 	mla	r1, r2, r1, r6
 801e8d8:	0c1e      	lsrs	r6, r3, #16
 801e8da:	0c0b      	lsrs	r3, r1, #16
 801e8dc:	fb02 3306 	mla	r3, r2, r6, r3
 801e8e0:	b289      	uxth	r1, r1
 801e8e2:	3001      	adds	r0, #1
 801e8e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e8e8:	4285      	cmp	r5, r0
 801e8ea:	f84c 1b04 	str.w	r1, [ip], #4
 801e8ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e8f2:	dcec      	bgt.n	801e8ce <__multadd+0x12>
 801e8f4:	b30e      	cbz	r6, 801e93a <__multadd+0x7e>
 801e8f6:	68a3      	ldr	r3, [r4, #8]
 801e8f8:	42ab      	cmp	r3, r5
 801e8fa:	dc19      	bgt.n	801e930 <__multadd+0x74>
 801e8fc:	6861      	ldr	r1, [r4, #4]
 801e8fe:	4638      	mov	r0, r7
 801e900:	3101      	adds	r1, #1
 801e902:	f7ff ff79 	bl	801e7f8 <_Balloc>
 801e906:	4680      	mov	r8, r0
 801e908:	b928      	cbnz	r0, 801e916 <__multadd+0x5a>
 801e90a:	4602      	mov	r2, r0
 801e90c:	4b0c      	ldr	r3, [pc, #48]	; (801e940 <__multadd+0x84>)
 801e90e:	480d      	ldr	r0, [pc, #52]	; (801e944 <__multadd+0x88>)
 801e910:	21ba      	movs	r1, #186	; 0xba
 801e912:	f7fe fa13 	bl	801cd3c <__assert_func>
 801e916:	6922      	ldr	r2, [r4, #16]
 801e918:	3202      	adds	r2, #2
 801e91a:	f104 010c 	add.w	r1, r4, #12
 801e91e:	0092      	lsls	r2, r2, #2
 801e920:	300c      	adds	r0, #12
 801e922:	f7ff fba4 	bl	801e06e <memcpy>
 801e926:	4621      	mov	r1, r4
 801e928:	4638      	mov	r0, r7
 801e92a:	f7ff ffa5 	bl	801e878 <_Bfree>
 801e92e:	4644      	mov	r4, r8
 801e930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e934:	3501      	adds	r5, #1
 801e936:	615e      	str	r6, [r3, #20]
 801e938:	6125      	str	r5, [r4, #16]
 801e93a:	4620      	mov	r0, r4
 801e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e940:	08028f79 	.word	0x08028f79
 801e944:	08029001 	.word	0x08029001

0801e948 <__s2b>:
 801e948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e94c:	460c      	mov	r4, r1
 801e94e:	4615      	mov	r5, r2
 801e950:	461f      	mov	r7, r3
 801e952:	2209      	movs	r2, #9
 801e954:	3308      	adds	r3, #8
 801e956:	4606      	mov	r6, r0
 801e958:	fb93 f3f2 	sdiv	r3, r3, r2
 801e95c:	2100      	movs	r1, #0
 801e95e:	2201      	movs	r2, #1
 801e960:	429a      	cmp	r2, r3
 801e962:	db09      	blt.n	801e978 <__s2b+0x30>
 801e964:	4630      	mov	r0, r6
 801e966:	f7ff ff47 	bl	801e7f8 <_Balloc>
 801e96a:	b940      	cbnz	r0, 801e97e <__s2b+0x36>
 801e96c:	4602      	mov	r2, r0
 801e96e:	4b19      	ldr	r3, [pc, #100]	; (801e9d4 <__s2b+0x8c>)
 801e970:	4819      	ldr	r0, [pc, #100]	; (801e9d8 <__s2b+0x90>)
 801e972:	21d3      	movs	r1, #211	; 0xd3
 801e974:	f7fe f9e2 	bl	801cd3c <__assert_func>
 801e978:	0052      	lsls	r2, r2, #1
 801e97a:	3101      	adds	r1, #1
 801e97c:	e7f0      	b.n	801e960 <__s2b+0x18>
 801e97e:	9b08      	ldr	r3, [sp, #32]
 801e980:	6143      	str	r3, [r0, #20]
 801e982:	2d09      	cmp	r5, #9
 801e984:	f04f 0301 	mov.w	r3, #1
 801e988:	6103      	str	r3, [r0, #16]
 801e98a:	dd16      	ble.n	801e9ba <__s2b+0x72>
 801e98c:	f104 0909 	add.w	r9, r4, #9
 801e990:	46c8      	mov	r8, r9
 801e992:	442c      	add	r4, r5
 801e994:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e998:	4601      	mov	r1, r0
 801e99a:	3b30      	subs	r3, #48	; 0x30
 801e99c:	220a      	movs	r2, #10
 801e99e:	4630      	mov	r0, r6
 801e9a0:	f7ff ff8c 	bl	801e8bc <__multadd>
 801e9a4:	45a0      	cmp	r8, r4
 801e9a6:	d1f5      	bne.n	801e994 <__s2b+0x4c>
 801e9a8:	f1a5 0408 	sub.w	r4, r5, #8
 801e9ac:	444c      	add	r4, r9
 801e9ae:	1b2d      	subs	r5, r5, r4
 801e9b0:	1963      	adds	r3, r4, r5
 801e9b2:	42bb      	cmp	r3, r7
 801e9b4:	db04      	blt.n	801e9c0 <__s2b+0x78>
 801e9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9ba:	340a      	adds	r4, #10
 801e9bc:	2509      	movs	r5, #9
 801e9be:	e7f6      	b.n	801e9ae <__s2b+0x66>
 801e9c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e9c4:	4601      	mov	r1, r0
 801e9c6:	3b30      	subs	r3, #48	; 0x30
 801e9c8:	220a      	movs	r2, #10
 801e9ca:	4630      	mov	r0, r6
 801e9cc:	f7ff ff76 	bl	801e8bc <__multadd>
 801e9d0:	e7ee      	b.n	801e9b0 <__s2b+0x68>
 801e9d2:	bf00      	nop
 801e9d4:	08028f79 	.word	0x08028f79
 801e9d8:	08029001 	.word	0x08029001

0801e9dc <__hi0bits>:
 801e9dc:	0c03      	lsrs	r3, r0, #16
 801e9de:	041b      	lsls	r3, r3, #16
 801e9e0:	b9d3      	cbnz	r3, 801ea18 <__hi0bits+0x3c>
 801e9e2:	0400      	lsls	r0, r0, #16
 801e9e4:	2310      	movs	r3, #16
 801e9e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e9ea:	bf04      	itt	eq
 801e9ec:	0200      	lsleq	r0, r0, #8
 801e9ee:	3308      	addeq	r3, #8
 801e9f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e9f4:	bf04      	itt	eq
 801e9f6:	0100      	lsleq	r0, r0, #4
 801e9f8:	3304      	addeq	r3, #4
 801e9fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e9fe:	bf04      	itt	eq
 801ea00:	0080      	lsleq	r0, r0, #2
 801ea02:	3302      	addeq	r3, #2
 801ea04:	2800      	cmp	r0, #0
 801ea06:	db05      	blt.n	801ea14 <__hi0bits+0x38>
 801ea08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ea0c:	f103 0301 	add.w	r3, r3, #1
 801ea10:	bf08      	it	eq
 801ea12:	2320      	moveq	r3, #32
 801ea14:	4618      	mov	r0, r3
 801ea16:	4770      	bx	lr
 801ea18:	2300      	movs	r3, #0
 801ea1a:	e7e4      	b.n	801e9e6 <__hi0bits+0xa>

0801ea1c <__lo0bits>:
 801ea1c:	6803      	ldr	r3, [r0, #0]
 801ea1e:	f013 0207 	ands.w	r2, r3, #7
 801ea22:	d00c      	beq.n	801ea3e <__lo0bits+0x22>
 801ea24:	07d9      	lsls	r1, r3, #31
 801ea26:	d422      	bmi.n	801ea6e <__lo0bits+0x52>
 801ea28:	079a      	lsls	r2, r3, #30
 801ea2a:	bf49      	itett	mi
 801ea2c:	085b      	lsrmi	r3, r3, #1
 801ea2e:	089b      	lsrpl	r3, r3, #2
 801ea30:	6003      	strmi	r3, [r0, #0]
 801ea32:	2201      	movmi	r2, #1
 801ea34:	bf5c      	itt	pl
 801ea36:	6003      	strpl	r3, [r0, #0]
 801ea38:	2202      	movpl	r2, #2
 801ea3a:	4610      	mov	r0, r2
 801ea3c:	4770      	bx	lr
 801ea3e:	b299      	uxth	r1, r3
 801ea40:	b909      	cbnz	r1, 801ea46 <__lo0bits+0x2a>
 801ea42:	0c1b      	lsrs	r3, r3, #16
 801ea44:	2210      	movs	r2, #16
 801ea46:	b2d9      	uxtb	r1, r3
 801ea48:	b909      	cbnz	r1, 801ea4e <__lo0bits+0x32>
 801ea4a:	3208      	adds	r2, #8
 801ea4c:	0a1b      	lsrs	r3, r3, #8
 801ea4e:	0719      	lsls	r1, r3, #28
 801ea50:	bf04      	itt	eq
 801ea52:	091b      	lsreq	r3, r3, #4
 801ea54:	3204      	addeq	r2, #4
 801ea56:	0799      	lsls	r1, r3, #30
 801ea58:	bf04      	itt	eq
 801ea5a:	089b      	lsreq	r3, r3, #2
 801ea5c:	3202      	addeq	r2, #2
 801ea5e:	07d9      	lsls	r1, r3, #31
 801ea60:	d403      	bmi.n	801ea6a <__lo0bits+0x4e>
 801ea62:	085b      	lsrs	r3, r3, #1
 801ea64:	f102 0201 	add.w	r2, r2, #1
 801ea68:	d003      	beq.n	801ea72 <__lo0bits+0x56>
 801ea6a:	6003      	str	r3, [r0, #0]
 801ea6c:	e7e5      	b.n	801ea3a <__lo0bits+0x1e>
 801ea6e:	2200      	movs	r2, #0
 801ea70:	e7e3      	b.n	801ea3a <__lo0bits+0x1e>
 801ea72:	2220      	movs	r2, #32
 801ea74:	e7e1      	b.n	801ea3a <__lo0bits+0x1e>
	...

0801ea78 <__i2b>:
 801ea78:	b510      	push	{r4, lr}
 801ea7a:	460c      	mov	r4, r1
 801ea7c:	2101      	movs	r1, #1
 801ea7e:	f7ff febb 	bl	801e7f8 <_Balloc>
 801ea82:	4602      	mov	r2, r0
 801ea84:	b928      	cbnz	r0, 801ea92 <__i2b+0x1a>
 801ea86:	4b05      	ldr	r3, [pc, #20]	; (801ea9c <__i2b+0x24>)
 801ea88:	4805      	ldr	r0, [pc, #20]	; (801eaa0 <__i2b+0x28>)
 801ea8a:	f240 1145 	movw	r1, #325	; 0x145
 801ea8e:	f7fe f955 	bl	801cd3c <__assert_func>
 801ea92:	2301      	movs	r3, #1
 801ea94:	6144      	str	r4, [r0, #20]
 801ea96:	6103      	str	r3, [r0, #16]
 801ea98:	bd10      	pop	{r4, pc}
 801ea9a:	bf00      	nop
 801ea9c:	08028f79 	.word	0x08028f79
 801eaa0:	08029001 	.word	0x08029001

0801eaa4 <__multiply>:
 801eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa8:	4691      	mov	r9, r2
 801eaaa:	690a      	ldr	r2, [r1, #16]
 801eaac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801eab0:	429a      	cmp	r2, r3
 801eab2:	bfb8      	it	lt
 801eab4:	460b      	movlt	r3, r1
 801eab6:	460c      	mov	r4, r1
 801eab8:	bfbc      	itt	lt
 801eaba:	464c      	movlt	r4, r9
 801eabc:	4699      	movlt	r9, r3
 801eabe:	6927      	ldr	r7, [r4, #16]
 801eac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801eac4:	68a3      	ldr	r3, [r4, #8]
 801eac6:	6861      	ldr	r1, [r4, #4]
 801eac8:	eb07 060a 	add.w	r6, r7, sl
 801eacc:	42b3      	cmp	r3, r6
 801eace:	b085      	sub	sp, #20
 801ead0:	bfb8      	it	lt
 801ead2:	3101      	addlt	r1, #1
 801ead4:	f7ff fe90 	bl	801e7f8 <_Balloc>
 801ead8:	b930      	cbnz	r0, 801eae8 <__multiply+0x44>
 801eada:	4602      	mov	r2, r0
 801eadc:	4b44      	ldr	r3, [pc, #272]	; (801ebf0 <__multiply+0x14c>)
 801eade:	4845      	ldr	r0, [pc, #276]	; (801ebf4 <__multiply+0x150>)
 801eae0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801eae4:	f7fe f92a 	bl	801cd3c <__assert_func>
 801eae8:	f100 0514 	add.w	r5, r0, #20
 801eaec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801eaf0:	462b      	mov	r3, r5
 801eaf2:	2200      	movs	r2, #0
 801eaf4:	4543      	cmp	r3, r8
 801eaf6:	d321      	bcc.n	801eb3c <__multiply+0x98>
 801eaf8:	f104 0314 	add.w	r3, r4, #20
 801eafc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801eb00:	f109 0314 	add.w	r3, r9, #20
 801eb04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801eb08:	9202      	str	r2, [sp, #8]
 801eb0a:	1b3a      	subs	r2, r7, r4
 801eb0c:	3a15      	subs	r2, #21
 801eb0e:	f022 0203 	bic.w	r2, r2, #3
 801eb12:	3204      	adds	r2, #4
 801eb14:	f104 0115 	add.w	r1, r4, #21
 801eb18:	428f      	cmp	r7, r1
 801eb1a:	bf38      	it	cc
 801eb1c:	2204      	movcc	r2, #4
 801eb1e:	9201      	str	r2, [sp, #4]
 801eb20:	9a02      	ldr	r2, [sp, #8]
 801eb22:	9303      	str	r3, [sp, #12]
 801eb24:	429a      	cmp	r2, r3
 801eb26:	d80c      	bhi.n	801eb42 <__multiply+0x9e>
 801eb28:	2e00      	cmp	r6, #0
 801eb2a:	dd03      	ble.n	801eb34 <__multiply+0x90>
 801eb2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d05b      	beq.n	801ebec <__multiply+0x148>
 801eb34:	6106      	str	r6, [r0, #16]
 801eb36:	b005      	add	sp, #20
 801eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3c:	f843 2b04 	str.w	r2, [r3], #4
 801eb40:	e7d8      	b.n	801eaf4 <__multiply+0x50>
 801eb42:	f8b3 a000 	ldrh.w	sl, [r3]
 801eb46:	f1ba 0f00 	cmp.w	sl, #0
 801eb4a:	d024      	beq.n	801eb96 <__multiply+0xf2>
 801eb4c:	f104 0e14 	add.w	lr, r4, #20
 801eb50:	46a9      	mov	r9, r5
 801eb52:	f04f 0c00 	mov.w	ip, #0
 801eb56:	f85e 2b04 	ldr.w	r2, [lr], #4
 801eb5a:	f8d9 1000 	ldr.w	r1, [r9]
 801eb5e:	fa1f fb82 	uxth.w	fp, r2
 801eb62:	b289      	uxth	r1, r1
 801eb64:	fb0a 110b 	mla	r1, sl, fp, r1
 801eb68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801eb6c:	f8d9 2000 	ldr.w	r2, [r9]
 801eb70:	4461      	add	r1, ip
 801eb72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801eb76:	fb0a c20b 	mla	r2, sl, fp, ip
 801eb7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801eb7e:	b289      	uxth	r1, r1
 801eb80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801eb84:	4577      	cmp	r7, lr
 801eb86:	f849 1b04 	str.w	r1, [r9], #4
 801eb8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801eb8e:	d8e2      	bhi.n	801eb56 <__multiply+0xb2>
 801eb90:	9a01      	ldr	r2, [sp, #4]
 801eb92:	f845 c002 	str.w	ip, [r5, r2]
 801eb96:	9a03      	ldr	r2, [sp, #12]
 801eb98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801eb9c:	3304      	adds	r3, #4
 801eb9e:	f1b9 0f00 	cmp.w	r9, #0
 801eba2:	d021      	beq.n	801ebe8 <__multiply+0x144>
 801eba4:	6829      	ldr	r1, [r5, #0]
 801eba6:	f104 0c14 	add.w	ip, r4, #20
 801ebaa:	46ae      	mov	lr, r5
 801ebac:	f04f 0a00 	mov.w	sl, #0
 801ebb0:	f8bc b000 	ldrh.w	fp, [ip]
 801ebb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ebb8:	fb09 220b 	mla	r2, r9, fp, r2
 801ebbc:	4452      	add	r2, sl
 801ebbe:	b289      	uxth	r1, r1
 801ebc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ebc4:	f84e 1b04 	str.w	r1, [lr], #4
 801ebc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ebcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ebd0:	f8be 1000 	ldrh.w	r1, [lr]
 801ebd4:	fb09 110a 	mla	r1, r9, sl, r1
 801ebd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801ebdc:	4567      	cmp	r7, ip
 801ebde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ebe2:	d8e5      	bhi.n	801ebb0 <__multiply+0x10c>
 801ebe4:	9a01      	ldr	r2, [sp, #4]
 801ebe6:	50a9      	str	r1, [r5, r2]
 801ebe8:	3504      	adds	r5, #4
 801ebea:	e799      	b.n	801eb20 <__multiply+0x7c>
 801ebec:	3e01      	subs	r6, #1
 801ebee:	e79b      	b.n	801eb28 <__multiply+0x84>
 801ebf0:	08028f79 	.word	0x08028f79
 801ebf4:	08029001 	.word	0x08029001

0801ebf8 <__pow5mult>:
 801ebf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ebfc:	4615      	mov	r5, r2
 801ebfe:	f012 0203 	ands.w	r2, r2, #3
 801ec02:	4606      	mov	r6, r0
 801ec04:	460f      	mov	r7, r1
 801ec06:	d007      	beq.n	801ec18 <__pow5mult+0x20>
 801ec08:	4c25      	ldr	r4, [pc, #148]	; (801eca0 <__pow5mult+0xa8>)
 801ec0a:	3a01      	subs	r2, #1
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ec12:	f7ff fe53 	bl	801e8bc <__multadd>
 801ec16:	4607      	mov	r7, r0
 801ec18:	10ad      	asrs	r5, r5, #2
 801ec1a:	d03d      	beq.n	801ec98 <__pow5mult+0xa0>
 801ec1c:	69f4      	ldr	r4, [r6, #28]
 801ec1e:	b97c      	cbnz	r4, 801ec40 <__pow5mult+0x48>
 801ec20:	2010      	movs	r0, #16
 801ec22:	f7fe f8cb 	bl	801cdbc <malloc>
 801ec26:	4602      	mov	r2, r0
 801ec28:	61f0      	str	r0, [r6, #28]
 801ec2a:	b928      	cbnz	r0, 801ec38 <__pow5mult+0x40>
 801ec2c:	4b1d      	ldr	r3, [pc, #116]	; (801eca4 <__pow5mult+0xac>)
 801ec2e:	481e      	ldr	r0, [pc, #120]	; (801eca8 <__pow5mult+0xb0>)
 801ec30:	f240 11b3 	movw	r1, #435	; 0x1b3
 801ec34:	f7fe f882 	bl	801cd3c <__assert_func>
 801ec38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ec3c:	6004      	str	r4, [r0, #0]
 801ec3e:	60c4      	str	r4, [r0, #12]
 801ec40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801ec44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ec48:	b94c      	cbnz	r4, 801ec5e <__pow5mult+0x66>
 801ec4a:	f240 2171 	movw	r1, #625	; 0x271
 801ec4e:	4630      	mov	r0, r6
 801ec50:	f7ff ff12 	bl	801ea78 <__i2b>
 801ec54:	2300      	movs	r3, #0
 801ec56:	f8c8 0008 	str.w	r0, [r8, #8]
 801ec5a:	4604      	mov	r4, r0
 801ec5c:	6003      	str	r3, [r0, #0]
 801ec5e:	f04f 0900 	mov.w	r9, #0
 801ec62:	07eb      	lsls	r3, r5, #31
 801ec64:	d50a      	bpl.n	801ec7c <__pow5mult+0x84>
 801ec66:	4639      	mov	r1, r7
 801ec68:	4622      	mov	r2, r4
 801ec6a:	4630      	mov	r0, r6
 801ec6c:	f7ff ff1a 	bl	801eaa4 <__multiply>
 801ec70:	4639      	mov	r1, r7
 801ec72:	4680      	mov	r8, r0
 801ec74:	4630      	mov	r0, r6
 801ec76:	f7ff fdff 	bl	801e878 <_Bfree>
 801ec7a:	4647      	mov	r7, r8
 801ec7c:	106d      	asrs	r5, r5, #1
 801ec7e:	d00b      	beq.n	801ec98 <__pow5mult+0xa0>
 801ec80:	6820      	ldr	r0, [r4, #0]
 801ec82:	b938      	cbnz	r0, 801ec94 <__pow5mult+0x9c>
 801ec84:	4622      	mov	r2, r4
 801ec86:	4621      	mov	r1, r4
 801ec88:	4630      	mov	r0, r6
 801ec8a:	f7ff ff0b 	bl	801eaa4 <__multiply>
 801ec8e:	6020      	str	r0, [r4, #0]
 801ec90:	f8c0 9000 	str.w	r9, [r0]
 801ec94:	4604      	mov	r4, r0
 801ec96:	e7e4      	b.n	801ec62 <__pow5mult+0x6a>
 801ec98:	4638      	mov	r0, r7
 801ec9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec9e:	bf00      	nop
 801eca0:	08029150 	.word	0x08029150
 801eca4:	08028fea 	.word	0x08028fea
 801eca8:	08029001 	.word	0x08029001

0801ecac <__lshift>:
 801ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ecb0:	460c      	mov	r4, r1
 801ecb2:	6849      	ldr	r1, [r1, #4]
 801ecb4:	6923      	ldr	r3, [r4, #16]
 801ecb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ecba:	68a3      	ldr	r3, [r4, #8]
 801ecbc:	4607      	mov	r7, r0
 801ecbe:	4691      	mov	r9, r2
 801ecc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ecc4:	f108 0601 	add.w	r6, r8, #1
 801ecc8:	42b3      	cmp	r3, r6
 801ecca:	db0b      	blt.n	801ece4 <__lshift+0x38>
 801eccc:	4638      	mov	r0, r7
 801ecce:	f7ff fd93 	bl	801e7f8 <_Balloc>
 801ecd2:	4605      	mov	r5, r0
 801ecd4:	b948      	cbnz	r0, 801ecea <__lshift+0x3e>
 801ecd6:	4602      	mov	r2, r0
 801ecd8:	4b28      	ldr	r3, [pc, #160]	; (801ed7c <__lshift+0xd0>)
 801ecda:	4829      	ldr	r0, [pc, #164]	; (801ed80 <__lshift+0xd4>)
 801ecdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801ece0:	f7fe f82c 	bl	801cd3c <__assert_func>
 801ece4:	3101      	adds	r1, #1
 801ece6:	005b      	lsls	r3, r3, #1
 801ece8:	e7ee      	b.n	801ecc8 <__lshift+0x1c>
 801ecea:	2300      	movs	r3, #0
 801ecec:	f100 0114 	add.w	r1, r0, #20
 801ecf0:	f100 0210 	add.w	r2, r0, #16
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	4553      	cmp	r3, sl
 801ecf8:	db33      	blt.n	801ed62 <__lshift+0xb6>
 801ecfa:	6920      	ldr	r0, [r4, #16]
 801ecfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ed00:	f104 0314 	add.w	r3, r4, #20
 801ed04:	f019 091f 	ands.w	r9, r9, #31
 801ed08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ed0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ed10:	d02b      	beq.n	801ed6a <__lshift+0xbe>
 801ed12:	f1c9 0e20 	rsb	lr, r9, #32
 801ed16:	468a      	mov	sl, r1
 801ed18:	2200      	movs	r2, #0
 801ed1a:	6818      	ldr	r0, [r3, #0]
 801ed1c:	fa00 f009 	lsl.w	r0, r0, r9
 801ed20:	4310      	orrs	r0, r2
 801ed22:	f84a 0b04 	str.w	r0, [sl], #4
 801ed26:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed2a:	459c      	cmp	ip, r3
 801ed2c:	fa22 f20e 	lsr.w	r2, r2, lr
 801ed30:	d8f3      	bhi.n	801ed1a <__lshift+0x6e>
 801ed32:	ebac 0304 	sub.w	r3, ip, r4
 801ed36:	3b15      	subs	r3, #21
 801ed38:	f023 0303 	bic.w	r3, r3, #3
 801ed3c:	3304      	adds	r3, #4
 801ed3e:	f104 0015 	add.w	r0, r4, #21
 801ed42:	4584      	cmp	ip, r0
 801ed44:	bf38      	it	cc
 801ed46:	2304      	movcc	r3, #4
 801ed48:	50ca      	str	r2, [r1, r3]
 801ed4a:	b10a      	cbz	r2, 801ed50 <__lshift+0xa4>
 801ed4c:	f108 0602 	add.w	r6, r8, #2
 801ed50:	3e01      	subs	r6, #1
 801ed52:	4638      	mov	r0, r7
 801ed54:	612e      	str	r6, [r5, #16]
 801ed56:	4621      	mov	r1, r4
 801ed58:	f7ff fd8e 	bl	801e878 <_Bfree>
 801ed5c:	4628      	mov	r0, r5
 801ed5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed62:	f842 0f04 	str.w	r0, [r2, #4]!
 801ed66:	3301      	adds	r3, #1
 801ed68:	e7c5      	b.n	801ecf6 <__lshift+0x4a>
 801ed6a:	3904      	subs	r1, #4
 801ed6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed70:	f841 2f04 	str.w	r2, [r1, #4]!
 801ed74:	459c      	cmp	ip, r3
 801ed76:	d8f9      	bhi.n	801ed6c <__lshift+0xc0>
 801ed78:	e7ea      	b.n	801ed50 <__lshift+0xa4>
 801ed7a:	bf00      	nop
 801ed7c:	08028f79 	.word	0x08028f79
 801ed80:	08029001 	.word	0x08029001

0801ed84 <__mcmp>:
 801ed84:	b530      	push	{r4, r5, lr}
 801ed86:	6902      	ldr	r2, [r0, #16]
 801ed88:	690c      	ldr	r4, [r1, #16]
 801ed8a:	1b12      	subs	r2, r2, r4
 801ed8c:	d10e      	bne.n	801edac <__mcmp+0x28>
 801ed8e:	f100 0314 	add.w	r3, r0, #20
 801ed92:	3114      	adds	r1, #20
 801ed94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ed98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ed9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801eda0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801eda4:	42a5      	cmp	r5, r4
 801eda6:	d003      	beq.n	801edb0 <__mcmp+0x2c>
 801eda8:	d305      	bcc.n	801edb6 <__mcmp+0x32>
 801edaa:	2201      	movs	r2, #1
 801edac:	4610      	mov	r0, r2
 801edae:	bd30      	pop	{r4, r5, pc}
 801edb0:	4283      	cmp	r3, r0
 801edb2:	d3f3      	bcc.n	801ed9c <__mcmp+0x18>
 801edb4:	e7fa      	b.n	801edac <__mcmp+0x28>
 801edb6:	f04f 32ff 	mov.w	r2, #4294967295
 801edba:	e7f7      	b.n	801edac <__mcmp+0x28>

0801edbc <__mdiff>:
 801edbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc0:	460c      	mov	r4, r1
 801edc2:	4606      	mov	r6, r0
 801edc4:	4611      	mov	r1, r2
 801edc6:	4620      	mov	r0, r4
 801edc8:	4690      	mov	r8, r2
 801edca:	f7ff ffdb 	bl	801ed84 <__mcmp>
 801edce:	1e05      	subs	r5, r0, #0
 801edd0:	d110      	bne.n	801edf4 <__mdiff+0x38>
 801edd2:	4629      	mov	r1, r5
 801edd4:	4630      	mov	r0, r6
 801edd6:	f7ff fd0f 	bl	801e7f8 <_Balloc>
 801edda:	b930      	cbnz	r0, 801edea <__mdiff+0x2e>
 801eddc:	4b3a      	ldr	r3, [pc, #232]	; (801eec8 <__mdiff+0x10c>)
 801edde:	4602      	mov	r2, r0
 801ede0:	f240 2137 	movw	r1, #567	; 0x237
 801ede4:	4839      	ldr	r0, [pc, #228]	; (801eecc <__mdiff+0x110>)
 801ede6:	f7fd ffa9 	bl	801cd3c <__assert_func>
 801edea:	2301      	movs	r3, #1
 801edec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801edf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf4:	bfa4      	itt	ge
 801edf6:	4643      	movge	r3, r8
 801edf8:	46a0      	movge	r8, r4
 801edfa:	4630      	mov	r0, r6
 801edfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ee00:	bfa6      	itte	ge
 801ee02:	461c      	movge	r4, r3
 801ee04:	2500      	movge	r5, #0
 801ee06:	2501      	movlt	r5, #1
 801ee08:	f7ff fcf6 	bl	801e7f8 <_Balloc>
 801ee0c:	b920      	cbnz	r0, 801ee18 <__mdiff+0x5c>
 801ee0e:	4b2e      	ldr	r3, [pc, #184]	; (801eec8 <__mdiff+0x10c>)
 801ee10:	4602      	mov	r2, r0
 801ee12:	f240 2145 	movw	r1, #581	; 0x245
 801ee16:	e7e5      	b.n	801ede4 <__mdiff+0x28>
 801ee18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ee1c:	6926      	ldr	r6, [r4, #16]
 801ee1e:	60c5      	str	r5, [r0, #12]
 801ee20:	f104 0914 	add.w	r9, r4, #20
 801ee24:	f108 0514 	add.w	r5, r8, #20
 801ee28:	f100 0e14 	add.w	lr, r0, #20
 801ee2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801ee30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801ee34:	f108 0210 	add.w	r2, r8, #16
 801ee38:	46f2      	mov	sl, lr
 801ee3a:	2100      	movs	r1, #0
 801ee3c:	f859 3b04 	ldr.w	r3, [r9], #4
 801ee40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ee44:	fa11 f88b 	uxtah	r8, r1, fp
 801ee48:	b299      	uxth	r1, r3
 801ee4a:	0c1b      	lsrs	r3, r3, #16
 801ee4c:	eba8 0801 	sub.w	r8, r8, r1
 801ee50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ee54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ee58:	fa1f f888 	uxth.w	r8, r8
 801ee5c:	1419      	asrs	r1, r3, #16
 801ee5e:	454e      	cmp	r6, r9
 801ee60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ee64:	f84a 3b04 	str.w	r3, [sl], #4
 801ee68:	d8e8      	bhi.n	801ee3c <__mdiff+0x80>
 801ee6a:	1b33      	subs	r3, r6, r4
 801ee6c:	3b15      	subs	r3, #21
 801ee6e:	f023 0303 	bic.w	r3, r3, #3
 801ee72:	3304      	adds	r3, #4
 801ee74:	3415      	adds	r4, #21
 801ee76:	42a6      	cmp	r6, r4
 801ee78:	bf38      	it	cc
 801ee7a:	2304      	movcc	r3, #4
 801ee7c:	441d      	add	r5, r3
 801ee7e:	4473      	add	r3, lr
 801ee80:	469e      	mov	lr, r3
 801ee82:	462e      	mov	r6, r5
 801ee84:	4566      	cmp	r6, ip
 801ee86:	d30e      	bcc.n	801eea6 <__mdiff+0xea>
 801ee88:	f10c 0203 	add.w	r2, ip, #3
 801ee8c:	1b52      	subs	r2, r2, r5
 801ee8e:	f022 0203 	bic.w	r2, r2, #3
 801ee92:	3d03      	subs	r5, #3
 801ee94:	45ac      	cmp	ip, r5
 801ee96:	bf38      	it	cc
 801ee98:	2200      	movcc	r2, #0
 801ee9a:	4413      	add	r3, r2
 801ee9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801eea0:	b17a      	cbz	r2, 801eec2 <__mdiff+0x106>
 801eea2:	6107      	str	r7, [r0, #16]
 801eea4:	e7a4      	b.n	801edf0 <__mdiff+0x34>
 801eea6:	f856 8b04 	ldr.w	r8, [r6], #4
 801eeaa:	fa11 f288 	uxtah	r2, r1, r8
 801eeae:	1414      	asrs	r4, r2, #16
 801eeb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801eeb4:	b292      	uxth	r2, r2
 801eeb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801eeba:	f84e 2b04 	str.w	r2, [lr], #4
 801eebe:	1421      	asrs	r1, r4, #16
 801eec0:	e7e0      	b.n	801ee84 <__mdiff+0xc8>
 801eec2:	3f01      	subs	r7, #1
 801eec4:	e7ea      	b.n	801ee9c <__mdiff+0xe0>
 801eec6:	bf00      	nop
 801eec8:	08028f79 	.word	0x08028f79
 801eecc:	08029001 	.word	0x08029001

0801eed0 <__ulp>:
 801eed0:	b082      	sub	sp, #8
 801eed2:	ed8d 0b00 	vstr	d0, [sp]
 801eed6:	9a01      	ldr	r2, [sp, #4]
 801eed8:	4b0f      	ldr	r3, [pc, #60]	; (801ef18 <__ulp+0x48>)
 801eeda:	4013      	ands	r3, r2
 801eedc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	dc08      	bgt.n	801eef6 <__ulp+0x26>
 801eee4:	425b      	negs	r3, r3
 801eee6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801eeea:	ea4f 5223 	mov.w	r2, r3, asr #20
 801eeee:	da04      	bge.n	801eefa <__ulp+0x2a>
 801eef0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801eef4:	4113      	asrs	r3, r2
 801eef6:	2200      	movs	r2, #0
 801eef8:	e008      	b.n	801ef0c <__ulp+0x3c>
 801eefa:	f1a2 0314 	sub.w	r3, r2, #20
 801eefe:	2b1e      	cmp	r3, #30
 801ef00:	bfda      	itte	le
 801ef02:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801ef06:	40da      	lsrle	r2, r3
 801ef08:	2201      	movgt	r2, #1
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	4619      	mov	r1, r3
 801ef0e:	4610      	mov	r0, r2
 801ef10:	ec41 0b10 	vmov	d0, r0, r1
 801ef14:	b002      	add	sp, #8
 801ef16:	4770      	bx	lr
 801ef18:	7ff00000 	.word	0x7ff00000

0801ef1c <__b2d>:
 801ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef20:	6906      	ldr	r6, [r0, #16]
 801ef22:	f100 0814 	add.w	r8, r0, #20
 801ef26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801ef2a:	1f37      	subs	r7, r6, #4
 801ef2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ef30:	4610      	mov	r0, r2
 801ef32:	f7ff fd53 	bl	801e9dc <__hi0bits>
 801ef36:	f1c0 0320 	rsb	r3, r0, #32
 801ef3a:	280a      	cmp	r0, #10
 801ef3c:	600b      	str	r3, [r1, #0]
 801ef3e:	491b      	ldr	r1, [pc, #108]	; (801efac <__b2d+0x90>)
 801ef40:	dc15      	bgt.n	801ef6e <__b2d+0x52>
 801ef42:	f1c0 0c0b 	rsb	ip, r0, #11
 801ef46:	fa22 f30c 	lsr.w	r3, r2, ip
 801ef4a:	45b8      	cmp	r8, r7
 801ef4c:	ea43 0501 	orr.w	r5, r3, r1
 801ef50:	bf34      	ite	cc
 801ef52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ef56:	2300      	movcs	r3, #0
 801ef58:	3015      	adds	r0, #21
 801ef5a:	fa02 f000 	lsl.w	r0, r2, r0
 801ef5e:	fa23 f30c 	lsr.w	r3, r3, ip
 801ef62:	4303      	orrs	r3, r0
 801ef64:	461c      	mov	r4, r3
 801ef66:	ec45 4b10 	vmov	d0, r4, r5
 801ef6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef6e:	45b8      	cmp	r8, r7
 801ef70:	bf3a      	itte	cc
 801ef72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801ef76:	f1a6 0708 	subcc.w	r7, r6, #8
 801ef7a:	2300      	movcs	r3, #0
 801ef7c:	380b      	subs	r0, #11
 801ef7e:	d012      	beq.n	801efa6 <__b2d+0x8a>
 801ef80:	f1c0 0120 	rsb	r1, r0, #32
 801ef84:	fa23 f401 	lsr.w	r4, r3, r1
 801ef88:	4082      	lsls	r2, r0
 801ef8a:	4322      	orrs	r2, r4
 801ef8c:	4547      	cmp	r7, r8
 801ef8e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801ef92:	bf8c      	ite	hi
 801ef94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801ef98:	2200      	movls	r2, #0
 801ef9a:	4083      	lsls	r3, r0
 801ef9c:	40ca      	lsrs	r2, r1
 801ef9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801efa2:	4313      	orrs	r3, r2
 801efa4:	e7de      	b.n	801ef64 <__b2d+0x48>
 801efa6:	ea42 0501 	orr.w	r5, r2, r1
 801efaa:	e7db      	b.n	801ef64 <__b2d+0x48>
 801efac:	3ff00000 	.word	0x3ff00000

0801efb0 <__d2b>:
 801efb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801efb4:	460f      	mov	r7, r1
 801efb6:	2101      	movs	r1, #1
 801efb8:	ec59 8b10 	vmov	r8, r9, d0
 801efbc:	4616      	mov	r6, r2
 801efbe:	f7ff fc1b 	bl	801e7f8 <_Balloc>
 801efc2:	4604      	mov	r4, r0
 801efc4:	b930      	cbnz	r0, 801efd4 <__d2b+0x24>
 801efc6:	4602      	mov	r2, r0
 801efc8:	4b24      	ldr	r3, [pc, #144]	; (801f05c <__d2b+0xac>)
 801efca:	4825      	ldr	r0, [pc, #148]	; (801f060 <__d2b+0xb0>)
 801efcc:	f240 310f 	movw	r1, #783	; 0x30f
 801efd0:	f7fd feb4 	bl	801cd3c <__assert_func>
 801efd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801efd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801efdc:	bb2d      	cbnz	r5, 801f02a <__d2b+0x7a>
 801efde:	9301      	str	r3, [sp, #4]
 801efe0:	f1b8 0300 	subs.w	r3, r8, #0
 801efe4:	d026      	beq.n	801f034 <__d2b+0x84>
 801efe6:	4668      	mov	r0, sp
 801efe8:	9300      	str	r3, [sp, #0]
 801efea:	f7ff fd17 	bl	801ea1c <__lo0bits>
 801efee:	e9dd 1200 	ldrd	r1, r2, [sp]
 801eff2:	b1e8      	cbz	r0, 801f030 <__d2b+0x80>
 801eff4:	f1c0 0320 	rsb	r3, r0, #32
 801eff8:	fa02 f303 	lsl.w	r3, r2, r3
 801effc:	430b      	orrs	r3, r1
 801effe:	40c2      	lsrs	r2, r0
 801f000:	6163      	str	r3, [r4, #20]
 801f002:	9201      	str	r2, [sp, #4]
 801f004:	9b01      	ldr	r3, [sp, #4]
 801f006:	61a3      	str	r3, [r4, #24]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	bf14      	ite	ne
 801f00c:	2202      	movne	r2, #2
 801f00e:	2201      	moveq	r2, #1
 801f010:	6122      	str	r2, [r4, #16]
 801f012:	b1bd      	cbz	r5, 801f044 <__d2b+0x94>
 801f014:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f018:	4405      	add	r5, r0
 801f01a:	603d      	str	r5, [r7, #0]
 801f01c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f020:	6030      	str	r0, [r6, #0]
 801f022:	4620      	mov	r0, r4
 801f024:	b003      	add	sp, #12
 801f026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f02a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f02e:	e7d6      	b.n	801efde <__d2b+0x2e>
 801f030:	6161      	str	r1, [r4, #20]
 801f032:	e7e7      	b.n	801f004 <__d2b+0x54>
 801f034:	a801      	add	r0, sp, #4
 801f036:	f7ff fcf1 	bl	801ea1c <__lo0bits>
 801f03a:	9b01      	ldr	r3, [sp, #4]
 801f03c:	6163      	str	r3, [r4, #20]
 801f03e:	3020      	adds	r0, #32
 801f040:	2201      	movs	r2, #1
 801f042:	e7e5      	b.n	801f010 <__d2b+0x60>
 801f044:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f04c:	6038      	str	r0, [r7, #0]
 801f04e:	6918      	ldr	r0, [r3, #16]
 801f050:	f7ff fcc4 	bl	801e9dc <__hi0bits>
 801f054:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f058:	e7e2      	b.n	801f020 <__d2b+0x70>
 801f05a:	bf00      	nop
 801f05c:	08028f79 	.word	0x08028f79
 801f060:	08029001 	.word	0x08029001

0801f064 <__ratio>:
 801f064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f068:	4688      	mov	r8, r1
 801f06a:	4669      	mov	r1, sp
 801f06c:	4681      	mov	r9, r0
 801f06e:	f7ff ff55 	bl	801ef1c <__b2d>
 801f072:	a901      	add	r1, sp, #4
 801f074:	4640      	mov	r0, r8
 801f076:	ec55 4b10 	vmov	r4, r5, d0
 801f07a:	f7ff ff4f 	bl	801ef1c <__b2d>
 801f07e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f082:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f086:	eba3 0c02 	sub.w	ip, r3, r2
 801f08a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f08e:	1a9b      	subs	r3, r3, r2
 801f090:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f094:	ec51 0b10 	vmov	r0, r1, d0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	bfd6      	itet	le
 801f09c:	460a      	movle	r2, r1
 801f09e:	462a      	movgt	r2, r5
 801f0a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f0a4:	468b      	mov	fp, r1
 801f0a6:	462f      	mov	r7, r5
 801f0a8:	bfd4      	ite	le
 801f0aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f0ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	ee10 2a10 	vmov	r2, s0
 801f0b8:	465b      	mov	r3, fp
 801f0ba:	4639      	mov	r1, r7
 801f0bc:	f7e1 fbf6 	bl	80008ac <__aeabi_ddiv>
 801f0c0:	ec41 0b10 	vmov	d0, r0, r1
 801f0c4:	b003      	add	sp, #12
 801f0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0ca <__copybits>:
 801f0ca:	3901      	subs	r1, #1
 801f0cc:	b570      	push	{r4, r5, r6, lr}
 801f0ce:	1149      	asrs	r1, r1, #5
 801f0d0:	6914      	ldr	r4, [r2, #16]
 801f0d2:	3101      	adds	r1, #1
 801f0d4:	f102 0314 	add.w	r3, r2, #20
 801f0d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f0dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f0e0:	1f05      	subs	r5, r0, #4
 801f0e2:	42a3      	cmp	r3, r4
 801f0e4:	d30c      	bcc.n	801f100 <__copybits+0x36>
 801f0e6:	1aa3      	subs	r3, r4, r2
 801f0e8:	3b11      	subs	r3, #17
 801f0ea:	f023 0303 	bic.w	r3, r3, #3
 801f0ee:	3211      	adds	r2, #17
 801f0f0:	42a2      	cmp	r2, r4
 801f0f2:	bf88      	it	hi
 801f0f4:	2300      	movhi	r3, #0
 801f0f6:	4418      	add	r0, r3
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	4288      	cmp	r0, r1
 801f0fc:	d305      	bcc.n	801f10a <__copybits+0x40>
 801f0fe:	bd70      	pop	{r4, r5, r6, pc}
 801f100:	f853 6b04 	ldr.w	r6, [r3], #4
 801f104:	f845 6f04 	str.w	r6, [r5, #4]!
 801f108:	e7eb      	b.n	801f0e2 <__copybits+0x18>
 801f10a:	f840 3b04 	str.w	r3, [r0], #4
 801f10e:	e7f4      	b.n	801f0fa <__copybits+0x30>

0801f110 <__any_on>:
 801f110:	f100 0214 	add.w	r2, r0, #20
 801f114:	6900      	ldr	r0, [r0, #16]
 801f116:	114b      	asrs	r3, r1, #5
 801f118:	4298      	cmp	r0, r3
 801f11a:	b510      	push	{r4, lr}
 801f11c:	db11      	blt.n	801f142 <__any_on+0x32>
 801f11e:	dd0a      	ble.n	801f136 <__any_on+0x26>
 801f120:	f011 011f 	ands.w	r1, r1, #31
 801f124:	d007      	beq.n	801f136 <__any_on+0x26>
 801f126:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f12a:	fa24 f001 	lsr.w	r0, r4, r1
 801f12e:	fa00 f101 	lsl.w	r1, r0, r1
 801f132:	428c      	cmp	r4, r1
 801f134:	d10b      	bne.n	801f14e <__any_on+0x3e>
 801f136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d803      	bhi.n	801f146 <__any_on+0x36>
 801f13e:	2000      	movs	r0, #0
 801f140:	bd10      	pop	{r4, pc}
 801f142:	4603      	mov	r3, r0
 801f144:	e7f7      	b.n	801f136 <__any_on+0x26>
 801f146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f14a:	2900      	cmp	r1, #0
 801f14c:	d0f5      	beq.n	801f13a <__any_on+0x2a>
 801f14e:	2001      	movs	r0, #1
 801f150:	e7f6      	b.n	801f140 <__any_on+0x30>

0801f152 <_malloc_usable_size_r>:
 801f152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f156:	1f18      	subs	r0, r3, #4
 801f158:	2b00      	cmp	r3, #0
 801f15a:	bfbc      	itt	lt
 801f15c:	580b      	ldrlt	r3, [r1, r0]
 801f15e:	18c0      	addlt	r0, r0, r3
 801f160:	4770      	bx	lr

0801f162 <__ascii_wctomb>:
 801f162:	b149      	cbz	r1, 801f178 <__ascii_wctomb+0x16>
 801f164:	2aff      	cmp	r2, #255	; 0xff
 801f166:	bf85      	ittet	hi
 801f168:	238a      	movhi	r3, #138	; 0x8a
 801f16a:	6003      	strhi	r3, [r0, #0]
 801f16c:	700a      	strbls	r2, [r1, #0]
 801f16e:	f04f 30ff 	movhi.w	r0, #4294967295
 801f172:	bf98      	it	ls
 801f174:	2001      	movls	r0, #1
 801f176:	4770      	bx	lr
 801f178:	4608      	mov	r0, r1
 801f17a:	4770      	bx	lr

0801f17c <__ssputs_r>:
 801f17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f180:	688e      	ldr	r6, [r1, #8]
 801f182:	461f      	mov	r7, r3
 801f184:	42be      	cmp	r6, r7
 801f186:	680b      	ldr	r3, [r1, #0]
 801f188:	4682      	mov	sl, r0
 801f18a:	460c      	mov	r4, r1
 801f18c:	4690      	mov	r8, r2
 801f18e:	d82c      	bhi.n	801f1ea <__ssputs_r+0x6e>
 801f190:	898a      	ldrh	r2, [r1, #12]
 801f192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f196:	d026      	beq.n	801f1e6 <__ssputs_r+0x6a>
 801f198:	6965      	ldr	r5, [r4, #20]
 801f19a:	6909      	ldr	r1, [r1, #16]
 801f19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f1a0:	eba3 0901 	sub.w	r9, r3, r1
 801f1a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f1a8:	1c7b      	adds	r3, r7, #1
 801f1aa:	444b      	add	r3, r9
 801f1ac:	106d      	asrs	r5, r5, #1
 801f1ae:	429d      	cmp	r5, r3
 801f1b0:	bf38      	it	cc
 801f1b2:	461d      	movcc	r5, r3
 801f1b4:	0553      	lsls	r3, r2, #21
 801f1b6:	d527      	bpl.n	801f208 <__ssputs_r+0x8c>
 801f1b8:	4629      	mov	r1, r5
 801f1ba:	f7fd fe2f 	bl	801ce1c <_malloc_r>
 801f1be:	4606      	mov	r6, r0
 801f1c0:	b360      	cbz	r0, 801f21c <__ssputs_r+0xa0>
 801f1c2:	6921      	ldr	r1, [r4, #16]
 801f1c4:	464a      	mov	r2, r9
 801f1c6:	f7fe ff52 	bl	801e06e <memcpy>
 801f1ca:	89a3      	ldrh	r3, [r4, #12]
 801f1cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1d4:	81a3      	strh	r3, [r4, #12]
 801f1d6:	6126      	str	r6, [r4, #16]
 801f1d8:	6165      	str	r5, [r4, #20]
 801f1da:	444e      	add	r6, r9
 801f1dc:	eba5 0509 	sub.w	r5, r5, r9
 801f1e0:	6026      	str	r6, [r4, #0]
 801f1e2:	60a5      	str	r5, [r4, #8]
 801f1e4:	463e      	mov	r6, r7
 801f1e6:	42be      	cmp	r6, r7
 801f1e8:	d900      	bls.n	801f1ec <__ssputs_r+0x70>
 801f1ea:	463e      	mov	r6, r7
 801f1ec:	6820      	ldr	r0, [r4, #0]
 801f1ee:	4632      	mov	r2, r6
 801f1f0:	4641      	mov	r1, r8
 801f1f2:	f7fe fe41 	bl	801de78 <memmove>
 801f1f6:	68a3      	ldr	r3, [r4, #8]
 801f1f8:	1b9b      	subs	r3, r3, r6
 801f1fa:	60a3      	str	r3, [r4, #8]
 801f1fc:	6823      	ldr	r3, [r4, #0]
 801f1fe:	4433      	add	r3, r6
 801f200:	6023      	str	r3, [r4, #0]
 801f202:	2000      	movs	r0, #0
 801f204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f208:	462a      	mov	r2, r5
 801f20a:	f7fd fe93 	bl	801cf34 <_realloc_r>
 801f20e:	4606      	mov	r6, r0
 801f210:	2800      	cmp	r0, #0
 801f212:	d1e0      	bne.n	801f1d6 <__ssputs_r+0x5a>
 801f214:	6921      	ldr	r1, [r4, #16]
 801f216:	4650      	mov	r0, sl
 801f218:	f7fe ff38 	bl	801e08c <_free_r>
 801f21c:	230c      	movs	r3, #12
 801f21e:	f8ca 3000 	str.w	r3, [sl]
 801f222:	89a3      	ldrh	r3, [r4, #12]
 801f224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f228:	81a3      	strh	r3, [r4, #12]
 801f22a:	f04f 30ff 	mov.w	r0, #4294967295
 801f22e:	e7e9      	b.n	801f204 <__ssputs_r+0x88>

0801f230 <_svfiprintf_r>:
 801f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f234:	4698      	mov	r8, r3
 801f236:	898b      	ldrh	r3, [r1, #12]
 801f238:	061b      	lsls	r3, r3, #24
 801f23a:	b09d      	sub	sp, #116	; 0x74
 801f23c:	4607      	mov	r7, r0
 801f23e:	460d      	mov	r5, r1
 801f240:	4614      	mov	r4, r2
 801f242:	d50e      	bpl.n	801f262 <_svfiprintf_r+0x32>
 801f244:	690b      	ldr	r3, [r1, #16]
 801f246:	b963      	cbnz	r3, 801f262 <_svfiprintf_r+0x32>
 801f248:	2140      	movs	r1, #64	; 0x40
 801f24a:	f7fd fde7 	bl	801ce1c <_malloc_r>
 801f24e:	6028      	str	r0, [r5, #0]
 801f250:	6128      	str	r0, [r5, #16]
 801f252:	b920      	cbnz	r0, 801f25e <_svfiprintf_r+0x2e>
 801f254:	230c      	movs	r3, #12
 801f256:	603b      	str	r3, [r7, #0]
 801f258:	f04f 30ff 	mov.w	r0, #4294967295
 801f25c:	e0d0      	b.n	801f400 <_svfiprintf_r+0x1d0>
 801f25e:	2340      	movs	r3, #64	; 0x40
 801f260:	616b      	str	r3, [r5, #20]
 801f262:	2300      	movs	r3, #0
 801f264:	9309      	str	r3, [sp, #36]	; 0x24
 801f266:	2320      	movs	r3, #32
 801f268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f26c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f270:	2330      	movs	r3, #48	; 0x30
 801f272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801f418 <_svfiprintf_r+0x1e8>
 801f276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f27a:	f04f 0901 	mov.w	r9, #1
 801f27e:	4623      	mov	r3, r4
 801f280:	469a      	mov	sl, r3
 801f282:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f286:	b10a      	cbz	r2, 801f28c <_svfiprintf_r+0x5c>
 801f288:	2a25      	cmp	r2, #37	; 0x25
 801f28a:	d1f9      	bne.n	801f280 <_svfiprintf_r+0x50>
 801f28c:	ebba 0b04 	subs.w	fp, sl, r4
 801f290:	d00b      	beq.n	801f2aa <_svfiprintf_r+0x7a>
 801f292:	465b      	mov	r3, fp
 801f294:	4622      	mov	r2, r4
 801f296:	4629      	mov	r1, r5
 801f298:	4638      	mov	r0, r7
 801f29a:	f7ff ff6f 	bl	801f17c <__ssputs_r>
 801f29e:	3001      	adds	r0, #1
 801f2a0:	f000 80a9 	beq.w	801f3f6 <_svfiprintf_r+0x1c6>
 801f2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2a6:	445a      	add	r2, fp
 801f2a8:	9209      	str	r2, [sp, #36]	; 0x24
 801f2aa:	f89a 3000 	ldrb.w	r3, [sl]
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	f000 80a1 	beq.w	801f3f6 <_svfiprintf_r+0x1c6>
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	f04f 32ff 	mov.w	r2, #4294967295
 801f2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f2be:	f10a 0a01 	add.w	sl, sl, #1
 801f2c2:	9304      	str	r3, [sp, #16]
 801f2c4:	9307      	str	r3, [sp, #28]
 801f2c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f2ca:	931a      	str	r3, [sp, #104]	; 0x68
 801f2cc:	4654      	mov	r4, sl
 801f2ce:	2205      	movs	r2, #5
 801f2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f2d4:	4850      	ldr	r0, [pc, #320]	; (801f418 <_svfiprintf_r+0x1e8>)
 801f2d6:	f7e0 ffab 	bl	8000230 <memchr>
 801f2da:	9a04      	ldr	r2, [sp, #16]
 801f2dc:	b9d8      	cbnz	r0, 801f316 <_svfiprintf_r+0xe6>
 801f2de:	06d0      	lsls	r0, r2, #27
 801f2e0:	bf44      	itt	mi
 801f2e2:	2320      	movmi	r3, #32
 801f2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2e8:	0711      	lsls	r1, r2, #28
 801f2ea:	bf44      	itt	mi
 801f2ec:	232b      	movmi	r3, #43	; 0x2b
 801f2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f2f2:	f89a 3000 	ldrb.w	r3, [sl]
 801f2f6:	2b2a      	cmp	r3, #42	; 0x2a
 801f2f8:	d015      	beq.n	801f326 <_svfiprintf_r+0xf6>
 801f2fa:	9a07      	ldr	r2, [sp, #28]
 801f2fc:	4654      	mov	r4, sl
 801f2fe:	2000      	movs	r0, #0
 801f300:	f04f 0c0a 	mov.w	ip, #10
 801f304:	4621      	mov	r1, r4
 801f306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f30a:	3b30      	subs	r3, #48	; 0x30
 801f30c:	2b09      	cmp	r3, #9
 801f30e:	d94d      	bls.n	801f3ac <_svfiprintf_r+0x17c>
 801f310:	b1b0      	cbz	r0, 801f340 <_svfiprintf_r+0x110>
 801f312:	9207      	str	r2, [sp, #28]
 801f314:	e014      	b.n	801f340 <_svfiprintf_r+0x110>
 801f316:	eba0 0308 	sub.w	r3, r0, r8
 801f31a:	fa09 f303 	lsl.w	r3, r9, r3
 801f31e:	4313      	orrs	r3, r2
 801f320:	9304      	str	r3, [sp, #16]
 801f322:	46a2      	mov	sl, r4
 801f324:	e7d2      	b.n	801f2cc <_svfiprintf_r+0x9c>
 801f326:	9b03      	ldr	r3, [sp, #12]
 801f328:	1d19      	adds	r1, r3, #4
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	9103      	str	r1, [sp, #12]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	bfbb      	ittet	lt
 801f332:	425b      	neglt	r3, r3
 801f334:	f042 0202 	orrlt.w	r2, r2, #2
 801f338:	9307      	strge	r3, [sp, #28]
 801f33a:	9307      	strlt	r3, [sp, #28]
 801f33c:	bfb8      	it	lt
 801f33e:	9204      	strlt	r2, [sp, #16]
 801f340:	7823      	ldrb	r3, [r4, #0]
 801f342:	2b2e      	cmp	r3, #46	; 0x2e
 801f344:	d10c      	bne.n	801f360 <_svfiprintf_r+0x130>
 801f346:	7863      	ldrb	r3, [r4, #1]
 801f348:	2b2a      	cmp	r3, #42	; 0x2a
 801f34a:	d134      	bne.n	801f3b6 <_svfiprintf_r+0x186>
 801f34c:	9b03      	ldr	r3, [sp, #12]
 801f34e:	1d1a      	adds	r2, r3, #4
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	9203      	str	r2, [sp, #12]
 801f354:	2b00      	cmp	r3, #0
 801f356:	bfb8      	it	lt
 801f358:	f04f 33ff 	movlt.w	r3, #4294967295
 801f35c:	3402      	adds	r4, #2
 801f35e:	9305      	str	r3, [sp, #20]
 801f360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801f428 <_svfiprintf_r+0x1f8>
 801f364:	7821      	ldrb	r1, [r4, #0]
 801f366:	2203      	movs	r2, #3
 801f368:	4650      	mov	r0, sl
 801f36a:	f7e0 ff61 	bl	8000230 <memchr>
 801f36e:	b138      	cbz	r0, 801f380 <_svfiprintf_r+0x150>
 801f370:	9b04      	ldr	r3, [sp, #16]
 801f372:	eba0 000a 	sub.w	r0, r0, sl
 801f376:	2240      	movs	r2, #64	; 0x40
 801f378:	4082      	lsls	r2, r0
 801f37a:	4313      	orrs	r3, r2
 801f37c:	3401      	adds	r4, #1
 801f37e:	9304      	str	r3, [sp, #16]
 801f380:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f384:	4825      	ldr	r0, [pc, #148]	; (801f41c <_svfiprintf_r+0x1ec>)
 801f386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f38a:	2206      	movs	r2, #6
 801f38c:	f7e0 ff50 	bl	8000230 <memchr>
 801f390:	2800      	cmp	r0, #0
 801f392:	d038      	beq.n	801f406 <_svfiprintf_r+0x1d6>
 801f394:	4b22      	ldr	r3, [pc, #136]	; (801f420 <_svfiprintf_r+0x1f0>)
 801f396:	bb1b      	cbnz	r3, 801f3e0 <_svfiprintf_r+0x1b0>
 801f398:	9b03      	ldr	r3, [sp, #12]
 801f39a:	3307      	adds	r3, #7
 801f39c:	f023 0307 	bic.w	r3, r3, #7
 801f3a0:	3308      	adds	r3, #8
 801f3a2:	9303      	str	r3, [sp, #12]
 801f3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3a6:	4433      	add	r3, r6
 801f3a8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3aa:	e768      	b.n	801f27e <_svfiprintf_r+0x4e>
 801f3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 801f3b0:	460c      	mov	r4, r1
 801f3b2:	2001      	movs	r0, #1
 801f3b4:	e7a6      	b.n	801f304 <_svfiprintf_r+0xd4>
 801f3b6:	2300      	movs	r3, #0
 801f3b8:	3401      	adds	r4, #1
 801f3ba:	9305      	str	r3, [sp, #20]
 801f3bc:	4619      	mov	r1, r3
 801f3be:	f04f 0c0a 	mov.w	ip, #10
 801f3c2:	4620      	mov	r0, r4
 801f3c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f3c8:	3a30      	subs	r2, #48	; 0x30
 801f3ca:	2a09      	cmp	r2, #9
 801f3cc:	d903      	bls.n	801f3d6 <_svfiprintf_r+0x1a6>
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d0c6      	beq.n	801f360 <_svfiprintf_r+0x130>
 801f3d2:	9105      	str	r1, [sp, #20]
 801f3d4:	e7c4      	b.n	801f360 <_svfiprintf_r+0x130>
 801f3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 801f3da:	4604      	mov	r4, r0
 801f3dc:	2301      	movs	r3, #1
 801f3de:	e7f0      	b.n	801f3c2 <_svfiprintf_r+0x192>
 801f3e0:	ab03      	add	r3, sp, #12
 801f3e2:	9300      	str	r3, [sp, #0]
 801f3e4:	462a      	mov	r2, r5
 801f3e6:	4b0f      	ldr	r3, [pc, #60]	; (801f424 <_svfiprintf_r+0x1f4>)
 801f3e8:	a904      	add	r1, sp, #16
 801f3ea:	4638      	mov	r0, r7
 801f3ec:	f3af 8000 	nop.w
 801f3f0:	1c42      	adds	r2, r0, #1
 801f3f2:	4606      	mov	r6, r0
 801f3f4:	d1d6      	bne.n	801f3a4 <_svfiprintf_r+0x174>
 801f3f6:	89ab      	ldrh	r3, [r5, #12]
 801f3f8:	065b      	lsls	r3, r3, #25
 801f3fa:	f53f af2d 	bmi.w	801f258 <_svfiprintf_r+0x28>
 801f3fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f400:	b01d      	add	sp, #116	; 0x74
 801f402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f406:	ab03      	add	r3, sp, #12
 801f408:	9300      	str	r3, [sp, #0]
 801f40a:	462a      	mov	r2, r5
 801f40c:	4b05      	ldr	r3, [pc, #20]	; (801f424 <_svfiprintf_r+0x1f4>)
 801f40e:	a904      	add	r1, sp, #16
 801f410:	4638      	mov	r0, r7
 801f412:	f000 f9bd 	bl	801f790 <_printf_i>
 801f416:	e7eb      	b.n	801f3f0 <_svfiprintf_r+0x1c0>
 801f418:	0802915c 	.word	0x0802915c
 801f41c:	08029166 	.word	0x08029166
 801f420:	00000000 	.word	0x00000000
 801f424:	0801f17d 	.word	0x0801f17d
 801f428:	08029162 	.word	0x08029162

0801f42c <__sfputc_r>:
 801f42c:	6893      	ldr	r3, [r2, #8]
 801f42e:	3b01      	subs	r3, #1
 801f430:	2b00      	cmp	r3, #0
 801f432:	b410      	push	{r4}
 801f434:	6093      	str	r3, [r2, #8]
 801f436:	da08      	bge.n	801f44a <__sfputc_r+0x1e>
 801f438:	6994      	ldr	r4, [r2, #24]
 801f43a:	42a3      	cmp	r3, r4
 801f43c:	db01      	blt.n	801f442 <__sfputc_r+0x16>
 801f43e:	290a      	cmp	r1, #10
 801f440:	d103      	bne.n	801f44a <__sfputc_r+0x1e>
 801f442:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f446:	f000 bb73 	b.w	801fb30 <__swbuf_r>
 801f44a:	6813      	ldr	r3, [r2, #0]
 801f44c:	1c58      	adds	r0, r3, #1
 801f44e:	6010      	str	r0, [r2, #0]
 801f450:	7019      	strb	r1, [r3, #0]
 801f452:	4608      	mov	r0, r1
 801f454:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f458:	4770      	bx	lr

0801f45a <__sfputs_r>:
 801f45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f45c:	4606      	mov	r6, r0
 801f45e:	460f      	mov	r7, r1
 801f460:	4614      	mov	r4, r2
 801f462:	18d5      	adds	r5, r2, r3
 801f464:	42ac      	cmp	r4, r5
 801f466:	d101      	bne.n	801f46c <__sfputs_r+0x12>
 801f468:	2000      	movs	r0, #0
 801f46a:	e007      	b.n	801f47c <__sfputs_r+0x22>
 801f46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f470:	463a      	mov	r2, r7
 801f472:	4630      	mov	r0, r6
 801f474:	f7ff ffda 	bl	801f42c <__sfputc_r>
 801f478:	1c43      	adds	r3, r0, #1
 801f47a:	d1f3      	bne.n	801f464 <__sfputs_r+0xa>
 801f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f480 <_vfiprintf_r>:
 801f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f484:	460d      	mov	r5, r1
 801f486:	b09d      	sub	sp, #116	; 0x74
 801f488:	4614      	mov	r4, r2
 801f48a:	4698      	mov	r8, r3
 801f48c:	4606      	mov	r6, r0
 801f48e:	b118      	cbz	r0, 801f498 <_vfiprintf_r+0x18>
 801f490:	6a03      	ldr	r3, [r0, #32]
 801f492:	b90b      	cbnz	r3, 801f498 <_vfiprintf_r+0x18>
 801f494:	f7fe fc24 	bl	801dce0 <__sinit>
 801f498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f49a:	07d9      	lsls	r1, r3, #31
 801f49c:	d405      	bmi.n	801f4aa <_vfiprintf_r+0x2a>
 801f49e:	89ab      	ldrh	r3, [r5, #12]
 801f4a0:	059a      	lsls	r2, r3, #22
 801f4a2:	d402      	bmi.n	801f4aa <_vfiprintf_r+0x2a>
 801f4a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4a6:	f7fe fde0 	bl	801e06a <__retarget_lock_acquire_recursive>
 801f4aa:	89ab      	ldrh	r3, [r5, #12]
 801f4ac:	071b      	lsls	r3, r3, #28
 801f4ae:	d501      	bpl.n	801f4b4 <_vfiprintf_r+0x34>
 801f4b0:	692b      	ldr	r3, [r5, #16]
 801f4b2:	b99b      	cbnz	r3, 801f4dc <_vfiprintf_r+0x5c>
 801f4b4:	4629      	mov	r1, r5
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	f000 fb78 	bl	801fbac <__swsetup_r>
 801f4bc:	b170      	cbz	r0, 801f4dc <_vfiprintf_r+0x5c>
 801f4be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f4c0:	07dc      	lsls	r4, r3, #31
 801f4c2:	d504      	bpl.n	801f4ce <_vfiprintf_r+0x4e>
 801f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 801f4c8:	b01d      	add	sp, #116	; 0x74
 801f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ce:	89ab      	ldrh	r3, [r5, #12]
 801f4d0:	0598      	lsls	r0, r3, #22
 801f4d2:	d4f7      	bmi.n	801f4c4 <_vfiprintf_r+0x44>
 801f4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f4d6:	f7fe fdc9 	bl	801e06c <__retarget_lock_release_recursive>
 801f4da:	e7f3      	b.n	801f4c4 <_vfiprintf_r+0x44>
 801f4dc:	2300      	movs	r3, #0
 801f4de:	9309      	str	r3, [sp, #36]	; 0x24
 801f4e0:	2320      	movs	r3, #32
 801f4e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 801f4ea:	2330      	movs	r3, #48	; 0x30
 801f4ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f6a0 <_vfiprintf_r+0x220>
 801f4f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f4f4:	f04f 0901 	mov.w	r9, #1
 801f4f8:	4623      	mov	r3, r4
 801f4fa:	469a      	mov	sl, r3
 801f4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f500:	b10a      	cbz	r2, 801f506 <_vfiprintf_r+0x86>
 801f502:	2a25      	cmp	r2, #37	; 0x25
 801f504:	d1f9      	bne.n	801f4fa <_vfiprintf_r+0x7a>
 801f506:	ebba 0b04 	subs.w	fp, sl, r4
 801f50a:	d00b      	beq.n	801f524 <_vfiprintf_r+0xa4>
 801f50c:	465b      	mov	r3, fp
 801f50e:	4622      	mov	r2, r4
 801f510:	4629      	mov	r1, r5
 801f512:	4630      	mov	r0, r6
 801f514:	f7ff ffa1 	bl	801f45a <__sfputs_r>
 801f518:	3001      	adds	r0, #1
 801f51a:	f000 80a9 	beq.w	801f670 <_vfiprintf_r+0x1f0>
 801f51e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f520:	445a      	add	r2, fp
 801f522:	9209      	str	r2, [sp, #36]	; 0x24
 801f524:	f89a 3000 	ldrb.w	r3, [sl]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	f000 80a1 	beq.w	801f670 <_vfiprintf_r+0x1f0>
 801f52e:	2300      	movs	r3, #0
 801f530:	f04f 32ff 	mov.w	r2, #4294967295
 801f534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f538:	f10a 0a01 	add.w	sl, sl, #1
 801f53c:	9304      	str	r3, [sp, #16]
 801f53e:	9307      	str	r3, [sp, #28]
 801f540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f544:	931a      	str	r3, [sp, #104]	; 0x68
 801f546:	4654      	mov	r4, sl
 801f548:	2205      	movs	r2, #5
 801f54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f54e:	4854      	ldr	r0, [pc, #336]	; (801f6a0 <_vfiprintf_r+0x220>)
 801f550:	f7e0 fe6e 	bl	8000230 <memchr>
 801f554:	9a04      	ldr	r2, [sp, #16]
 801f556:	b9d8      	cbnz	r0, 801f590 <_vfiprintf_r+0x110>
 801f558:	06d1      	lsls	r1, r2, #27
 801f55a:	bf44      	itt	mi
 801f55c:	2320      	movmi	r3, #32
 801f55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f562:	0713      	lsls	r3, r2, #28
 801f564:	bf44      	itt	mi
 801f566:	232b      	movmi	r3, #43	; 0x2b
 801f568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f56c:	f89a 3000 	ldrb.w	r3, [sl]
 801f570:	2b2a      	cmp	r3, #42	; 0x2a
 801f572:	d015      	beq.n	801f5a0 <_vfiprintf_r+0x120>
 801f574:	9a07      	ldr	r2, [sp, #28]
 801f576:	4654      	mov	r4, sl
 801f578:	2000      	movs	r0, #0
 801f57a:	f04f 0c0a 	mov.w	ip, #10
 801f57e:	4621      	mov	r1, r4
 801f580:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f584:	3b30      	subs	r3, #48	; 0x30
 801f586:	2b09      	cmp	r3, #9
 801f588:	d94d      	bls.n	801f626 <_vfiprintf_r+0x1a6>
 801f58a:	b1b0      	cbz	r0, 801f5ba <_vfiprintf_r+0x13a>
 801f58c:	9207      	str	r2, [sp, #28]
 801f58e:	e014      	b.n	801f5ba <_vfiprintf_r+0x13a>
 801f590:	eba0 0308 	sub.w	r3, r0, r8
 801f594:	fa09 f303 	lsl.w	r3, r9, r3
 801f598:	4313      	orrs	r3, r2
 801f59a:	9304      	str	r3, [sp, #16]
 801f59c:	46a2      	mov	sl, r4
 801f59e:	e7d2      	b.n	801f546 <_vfiprintf_r+0xc6>
 801f5a0:	9b03      	ldr	r3, [sp, #12]
 801f5a2:	1d19      	adds	r1, r3, #4
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	9103      	str	r1, [sp, #12]
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	bfbb      	ittet	lt
 801f5ac:	425b      	neglt	r3, r3
 801f5ae:	f042 0202 	orrlt.w	r2, r2, #2
 801f5b2:	9307      	strge	r3, [sp, #28]
 801f5b4:	9307      	strlt	r3, [sp, #28]
 801f5b6:	bfb8      	it	lt
 801f5b8:	9204      	strlt	r2, [sp, #16]
 801f5ba:	7823      	ldrb	r3, [r4, #0]
 801f5bc:	2b2e      	cmp	r3, #46	; 0x2e
 801f5be:	d10c      	bne.n	801f5da <_vfiprintf_r+0x15a>
 801f5c0:	7863      	ldrb	r3, [r4, #1]
 801f5c2:	2b2a      	cmp	r3, #42	; 0x2a
 801f5c4:	d134      	bne.n	801f630 <_vfiprintf_r+0x1b0>
 801f5c6:	9b03      	ldr	r3, [sp, #12]
 801f5c8:	1d1a      	adds	r2, r3, #4
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	9203      	str	r2, [sp, #12]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	bfb8      	it	lt
 801f5d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801f5d6:	3402      	adds	r4, #2
 801f5d8:	9305      	str	r3, [sp, #20]
 801f5da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f6b0 <_vfiprintf_r+0x230>
 801f5de:	7821      	ldrb	r1, [r4, #0]
 801f5e0:	2203      	movs	r2, #3
 801f5e2:	4650      	mov	r0, sl
 801f5e4:	f7e0 fe24 	bl	8000230 <memchr>
 801f5e8:	b138      	cbz	r0, 801f5fa <_vfiprintf_r+0x17a>
 801f5ea:	9b04      	ldr	r3, [sp, #16]
 801f5ec:	eba0 000a 	sub.w	r0, r0, sl
 801f5f0:	2240      	movs	r2, #64	; 0x40
 801f5f2:	4082      	lsls	r2, r0
 801f5f4:	4313      	orrs	r3, r2
 801f5f6:	3401      	adds	r4, #1
 801f5f8:	9304      	str	r3, [sp, #16]
 801f5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f5fe:	4829      	ldr	r0, [pc, #164]	; (801f6a4 <_vfiprintf_r+0x224>)
 801f600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f604:	2206      	movs	r2, #6
 801f606:	f7e0 fe13 	bl	8000230 <memchr>
 801f60a:	2800      	cmp	r0, #0
 801f60c:	d03f      	beq.n	801f68e <_vfiprintf_r+0x20e>
 801f60e:	4b26      	ldr	r3, [pc, #152]	; (801f6a8 <_vfiprintf_r+0x228>)
 801f610:	bb1b      	cbnz	r3, 801f65a <_vfiprintf_r+0x1da>
 801f612:	9b03      	ldr	r3, [sp, #12]
 801f614:	3307      	adds	r3, #7
 801f616:	f023 0307 	bic.w	r3, r3, #7
 801f61a:	3308      	adds	r3, #8
 801f61c:	9303      	str	r3, [sp, #12]
 801f61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f620:	443b      	add	r3, r7
 801f622:	9309      	str	r3, [sp, #36]	; 0x24
 801f624:	e768      	b.n	801f4f8 <_vfiprintf_r+0x78>
 801f626:	fb0c 3202 	mla	r2, ip, r2, r3
 801f62a:	460c      	mov	r4, r1
 801f62c:	2001      	movs	r0, #1
 801f62e:	e7a6      	b.n	801f57e <_vfiprintf_r+0xfe>
 801f630:	2300      	movs	r3, #0
 801f632:	3401      	adds	r4, #1
 801f634:	9305      	str	r3, [sp, #20]
 801f636:	4619      	mov	r1, r3
 801f638:	f04f 0c0a 	mov.w	ip, #10
 801f63c:	4620      	mov	r0, r4
 801f63e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f642:	3a30      	subs	r2, #48	; 0x30
 801f644:	2a09      	cmp	r2, #9
 801f646:	d903      	bls.n	801f650 <_vfiprintf_r+0x1d0>
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d0c6      	beq.n	801f5da <_vfiprintf_r+0x15a>
 801f64c:	9105      	str	r1, [sp, #20]
 801f64e:	e7c4      	b.n	801f5da <_vfiprintf_r+0x15a>
 801f650:	fb0c 2101 	mla	r1, ip, r1, r2
 801f654:	4604      	mov	r4, r0
 801f656:	2301      	movs	r3, #1
 801f658:	e7f0      	b.n	801f63c <_vfiprintf_r+0x1bc>
 801f65a:	ab03      	add	r3, sp, #12
 801f65c:	9300      	str	r3, [sp, #0]
 801f65e:	462a      	mov	r2, r5
 801f660:	4b12      	ldr	r3, [pc, #72]	; (801f6ac <_vfiprintf_r+0x22c>)
 801f662:	a904      	add	r1, sp, #16
 801f664:	4630      	mov	r0, r6
 801f666:	f3af 8000 	nop.w
 801f66a:	4607      	mov	r7, r0
 801f66c:	1c78      	adds	r0, r7, #1
 801f66e:	d1d6      	bne.n	801f61e <_vfiprintf_r+0x19e>
 801f670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f672:	07d9      	lsls	r1, r3, #31
 801f674:	d405      	bmi.n	801f682 <_vfiprintf_r+0x202>
 801f676:	89ab      	ldrh	r3, [r5, #12]
 801f678:	059a      	lsls	r2, r3, #22
 801f67a:	d402      	bmi.n	801f682 <_vfiprintf_r+0x202>
 801f67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f67e:	f7fe fcf5 	bl	801e06c <__retarget_lock_release_recursive>
 801f682:	89ab      	ldrh	r3, [r5, #12]
 801f684:	065b      	lsls	r3, r3, #25
 801f686:	f53f af1d 	bmi.w	801f4c4 <_vfiprintf_r+0x44>
 801f68a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f68c:	e71c      	b.n	801f4c8 <_vfiprintf_r+0x48>
 801f68e:	ab03      	add	r3, sp, #12
 801f690:	9300      	str	r3, [sp, #0]
 801f692:	462a      	mov	r2, r5
 801f694:	4b05      	ldr	r3, [pc, #20]	; (801f6ac <_vfiprintf_r+0x22c>)
 801f696:	a904      	add	r1, sp, #16
 801f698:	4630      	mov	r0, r6
 801f69a:	f000 f879 	bl	801f790 <_printf_i>
 801f69e:	e7e4      	b.n	801f66a <_vfiprintf_r+0x1ea>
 801f6a0:	0802915c 	.word	0x0802915c
 801f6a4:	08029166 	.word	0x08029166
 801f6a8:	00000000 	.word	0x00000000
 801f6ac:	0801f45b 	.word	0x0801f45b
 801f6b0:	08029162 	.word	0x08029162

0801f6b4 <_printf_common>:
 801f6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6b8:	4616      	mov	r6, r2
 801f6ba:	4699      	mov	r9, r3
 801f6bc:	688a      	ldr	r2, [r1, #8]
 801f6be:	690b      	ldr	r3, [r1, #16]
 801f6c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f6c4:	4293      	cmp	r3, r2
 801f6c6:	bfb8      	it	lt
 801f6c8:	4613      	movlt	r3, r2
 801f6ca:	6033      	str	r3, [r6, #0]
 801f6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f6d0:	4607      	mov	r7, r0
 801f6d2:	460c      	mov	r4, r1
 801f6d4:	b10a      	cbz	r2, 801f6da <_printf_common+0x26>
 801f6d6:	3301      	adds	r3, #1
 801f6d8:	6033      	str	r3, [r6, #0]
 801f6da:	6823      	ldr	r3, [r4, #0]
 801f6dc:	0699      	lsls	r1, r3, #26
 801f6de:	bf42      	ittt	mi
 801f6e0:	6833      	ldrmi	r3, [r6, #0]
 801f6e2:	3302      	addmi	r3, #2
 801f6e4:	6033      	strmi	r3, [r6, #0]
 801f6e6:	6825      	ldr	r5, [r4, #0]
 801f6e8:	f015 0506 	ands.w	r5, r5, #6
 801f6ec:	d106      	bne.n	801f6fc <_printf_common+0x48>
 801f6ee:	f104 0a19 	add.w	sl, r4, #25
 801f6f2:	68e3      	ldr	r3, [r4, #12]
 801f6f4:	6832      	ldr	r2, [r6, #0]
 801f6f6:	1a9b      	subs	r3, r3, r2
 801f6f8:	42ab      	cmp	r3, r5
 801f6fa:	dc26      	bgt.n	801f74a <_printf_common+0x96>
 801f6fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f700:	1e13      	subs	r3, r2, #0
 801f702:	6822      	ldr	r2, [r4, #0]
 801f704:	bf18      	it	ne
 801f706:	2301      	movne	r3, #1
 801f708:	0692      	lsls	r2, r2, #26
 801f70a:	d42b      	bmi.n	801f764 <_printf_common+0xb0>
 801f70c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f710:	4649      	mov	r1, r9
 801f712:	4638      	mov	r0, r7
 801f714:	47c0      	blx	r8
 801f716:	3001      	adds	r0, #1
 801f718:	d01e      	beq.n	801f758 <_printf_common+0xa4>
 801f71a:	6823      	ldr	r3, [r4, #0]
 801f71c:	6922      	ldr	r2, [r4, #16]
 801f71e:	f003 0306 	and.w	r3, r3, #6
 801f722:	2b04      	cmp	r3, #4
 801f724:	bf02      	ittt	eq
 801f726:	68e5      	ldreq	r5, [r4, #12]
 801f728:	6833      	ldreq	r3, [r6, #0]
 801f72a:	1aed      	subeq	r5, r5, r3
 801f72c:	68a3      	ldr	r3, [r4, #8]
 801f72e:	bf0c      	ite	eq
 801f730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f734:	2500      	movne	r5, #0
 801f736:	4293      	cmp	r3, r2
 801f738:	bfc4      	itt	gt
 801f73a:	1a9b      	subgt	r3, r3, r2
 801f73c:	18ed      	addgt	r5, r5, r3
 801f73e:	2600      	movs	r6, #0
 801f740:	341a      	adds	r4, #26
 801f742:	42b5      	cmp	r5, r6
 801f744:	d11a      	bne.n	801f77c <_printf_common+0xc8>
 801f746:	2000      	movs	r0, #0
 801f748:	e008      	b.n	801f75c <_printf_common+0xa8>
 801f74a:	2301      	movs	r3, #1
 801f74c:	4652      	mov	r2, sl
 801f74e:	4649      	mov	r1, r9
 801f750:	4638      	mov	r0, r7
 801f752:	47c0      	blx	r8
 801f754:	3001      	adds	r0, #1
 801f756:	d103      	bne.n	801f760 <_printf_common+0xac>
 801f758:	f04f 30ff 	mov.w	r0, #4294967295
 801f75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f760:	3501      	adds	r5, #1
 801f762:	e7c6      	b.n	801f6f2 <_printf_common+0x3e>
 801f764:	18e1      	adds	r1, r4, r3
 801f766:	1c5a      	adds	r2, r3, #1
 801f768:	2030      	movs	r0, #48	; 0x30
 801f76a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f76e:	4422      	add	r2, r4
 801f770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f778:	3302      	adds	r3, #2
 801f77a:	e7c7      	b.n	801f70c <_printf_common+0x58>
 801f77c:	2301      	movs	r3, #1
 801f77e:	4622      	mov	r2, r4
 801f780:	4649      	mov	r1, r9
 801f782:	4638      	mov	r0, r7
 801f784:	47c0      	blx	r8
 801f786:	3001      	adds	r0, #1
 801f788:	d0e6      	beq.n	801f758 <_printf_common+0xa4>
 801f78a:	3601      	adds	r6, #1
 801f78c:	e7d9      	b.n	801f742 <_printf_common+0x8e>
	...

0801f790 <_printf_i>:
 801f790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f794:	7e0f      	ldrb	r7, [r1, #24]
 801f796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f798:	2f78      	cmp	r7, #120	; 0x78
 801f79a:	4691      	mov	r9, r2
 801f79c:	4680      	mov	r8, r0
 801f79e:	460c      	mov	r4, r1
 801f7a0:	469a      	mov	sl, r3
 801f7a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f7a6:	d807      	bhi.n	801f7b8 <_printf_i+0x28>
 801f7a8:	2f62      	cmp	r7, #98	; 0x62
 801f7aa:	d80a      	bhi.n	801f7c2 <_printf_i+0x32>
 801f7ac:	2f00      	cmp	r7, #0
 801f7ae:	f000 80d4 	beq.w	801f95a <_printf_i+0x1ca>
 801f7b2:	2f58      	cmp	r7, #88	; 0x58
 801f7b4:	f000 80c0 	beq.w	801f938 <_printf_i+0x1a8>
 801f7b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f7c0:	e03a      	b.n	801f838 <_printf_i+0xa8>
 801f7c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f7c6:	2b15      	cmp	r3, #21
 801f7c8:	d8f6      	bhi.n	801f7b8 <_printf_i+0x28>
 801f7ca:	a101      	add	r1, pc, #4	; (adr r1, 801f7d0 <_printf_i+0x40>)
 801f7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f7d0:	0801f829 	.word	0x0801f829
 801f7d4:	0801f83d 	.word	0x0801f83d
 801f7d8:	0801f7b9 	.word	0x0801f7b9
 801f7dc:	0801f7b9 	.word	0x0801f7b9
 801f7e0:	0801f7b9 	.word	0x0801f7b9
 801f7e4:	0801f7b9 	.word	0x0801f7b9
 801f7e8:	0801f83d 	.word	0x0801f83d
 801f7ec:	0801f7b9 	.word	0x0801f7b9
 801f7f0:	0801f7b9 	.word	0x0801f7b9
 801f7f4:	0801f7b9 	.word	0x0801f7b9
 801f7f8:	0801f7b9 	.word	0x0801f7b9
 801f7fc:	0801f941 	.word	0x0801f941
 801f800:	0801f869 	.word	0x0801f869
 801f804:	0801f8fb 	.word	0x0801f8fb
 801f808:	0801f7b9 	.word	0x0801f7b9
 801f80c:	0801f7b9 	.word	0x0801f7b9
 801f810:	0801f963 	.word	0x0801f963
 801f814:	0801f7b9 	.word	0x0801f7b9
 801f818:	0801f869 	.word	0x0801f869
 801f81c:	0801f7b9 	.word	0x0801f7b9
 801f820:	0801f7b9 	.word	0x0801f7b9
 801f824:	0801f903 	.word	0x0801f903
 801f828:	682b      	ldr	r3, [r5, #0]
 801f82a:	1d1a      	adds	r2, r3, #4
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	602a      	str	r2, [r5, #0]
 801f830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f838:	2301      	movs	r3, #1
 801f83a:	e09f      	b.n	801f97c <_printf_i+0x1ec>
 801f83c:	6820      	ldr	r0, [r4, #0]
 801f83e:	682b      	ldr	r3, [r5, #0]
 801f840:	0607      	lsls	r7, r0, #24
 801f842:	f103 0104 	add.w	r1, r3, #4
 801f846:	6029      	str	r1, [r5, #0]
 801f848:	d501      	bpl.n	801f84e <_printf_i+0xbe>
 801f84a:	681e      	ldr	r6, [r3, #0]
 801f84c:	e003      	b.n	801f856 <_printf_i+0xc6>
 801f84e:	0646      	lsls	r6, r0, #25
 801f850:	d5fb      	bpl.n	801f84a <_printf_i+0xba>
 801f852:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f856:	2e00      	cmp	r6, #0
 801f858:	da03      	bge.n	801f862 <_printf_i+0xd2>
 801f85a:	232d      	movs	r3, #45	; 0x2d
 801f85c:	4276      	negs	r6, r6
 801f85e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f862:	485a      	ldr	r0, [pc, #360]	; (801f9cc <_printf_i+0x23c>)
 801f864:	230a      	movs	r3, #10
 801f866:	e012      	b.n	801f88e <_printf_i+0xfe>
 801f868:	682b      	ldr	r3, [r5, #0]
 801f86a:	6820      	ldr	r0, [r4, #0]
 801f86c:	1d19      	adds	r1, r3, #4
 801f86e:	6029      	str	r1, [r5, #0]
 801f870:	0605      	lsls	r5, r0, #24
 801f872:	d501      	bpl.n	801f878 <_printf_i+0xe8>
 801f874:	681e      	ldr	r6, [r3, #0]
 801f876:	e002      	b.n	801f87e <_printf_i+0xee>
 801f878:	0641      	lsls	r1, r0, #25
 801f87a:	d5fb      	bpl.n	801f874 <_printf_i+0xe4>
 801f87c:	881e      	ldrh	r6, [r3, #0]
 801f87e:	4853      	ldr	r0, [pc, #332]	; (801f9cc <_printf_i+0x23c>)
 801f880:	2f6f      	cmp	r7, #111	; 0x6f
 801f882:	bf0c      	ite	eq
 801f884:	2308      	moveq	r3, #8
 801f886:	230a      	movne	r3, #10
 801f888:	2100      	movs	r1, #0
 801f88a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f88e:	6865      	ldr	r5, [r4, #4]
 801f890:	60a5      	str	r5, [r4, #8]
 801f892:	2d00      	cmp	r5, #0
 801f894:	bfa2      	ittt	ge
 801f896:	6821      	ldrge	r1, [r4, #0]
 801f898:	f021 0104 	bicge.w	r1, r1, #4
 801f89c:	6021      	strge	r1, [r4, #0]
 801f89e:	b90e      	cbnz	r6, 801f8a4 <_printf_i+0x114>
 801f8a0:	2d00      	cmp	r5, #0
 801f8a2:	d04b      	beq.n	801f93c <_printf_i+0x1ac>
 801f8a4:	4615      	mov	r5, r2
 801f8a6:	fbb6 f1f3 	udiv	r1, r6, r3
 801f8aa:	fb03 6711 	mls	r7, r3, r1, r6
 801f8ae:	5dc7      	ldrb	r7, [r0, r7]
 801f8b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f8b4:	4637      	mov	r7, r6
 801f8b6:	42bb      	cmp	r3, r7
 801f8b8:	460e      	mov	r6, r1
 801f8ba:	d9f4      	bls.n	801f8a6 <_printf_i+0x116>
 801f8bc:	2b08      	cmp	r3, #8
 801f8be:	d10b      	bne.n	801f8d8 <_printf_i+0x148>
 801f8c0:	6823      	ldr	r3, [r4, #0]
 801f8c2:	07de      	lsls	r6, r3, #31
 801f8c4:	d508      	bpl.n	801f8d8 <_printf_i+0x148>
 801f8c6:	6923      	ldr	r3, [r4, #16]
 801f8c8:	6861      	ldr	r1, [r4, #4]
 801f8ca:	4299      	cmp	r1, r3
 801f8cc:	bfde      	ittt	le
 801f8ce:	2330      	movle	r3, #48	; 0x30
 801f8d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f8d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f8d8:	1b52      	subs	r2, r2, r5
 801f8da:	6122      	str	r2, [r4, #16]
 801f8dc:	f8cd a000 	str.w	sl, [sp]
 801f8e0:	464b      	mov	r3, r9
 801f8e2:	aa03      	add	r2, sp, #12
 801f8e4:	4621      	mov	r1, r4
 801f8e6:	4640      	mov	r0, r8
 801f8e8:	f7ff fee4 	bl	801f6b4 <_printf_common>
 801f8ec:	3001      	adds	r0, #1
 801f8ee:	d14a      	bne.n	801f986 <_printf_i+0x1f6>
 801f8f0:	f04f 30ff 	mov.w	r0, #4294967295
 801f8f4:	b004      	add	sp, #16
 801f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8fa:	6823      	ldr	r3, [r4, #0]
 801f8fc:	f043 0320 	orr.w	r3, r3, #32
 801f900:	6023      	str	r3, [r4, #0]
 801f902:	4833      	ldr	r0, [pc, #204]	; (801f9d0 <_printf_i+0x240>)
 801f904:	2778      	movs	r7, #120	; 0x78
 801f906:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f90a:	6823      	ldr	r3, [r4, #0]
 801f90c:	6829      	ldr	r1, [r5, #0]
 801f90e:	061f      	lsls	r7, r3, #24
 801f910:	f851 6b04 	ldr.w	r6, [r1], #4
 801f914:	d402      	bmi.n	801f91c <_printf_i+0x18c>
 801f916:	065f      	lsls	r7, r3, #25
 801f918:	bf48      	it	mi
 801f91a:	b2b6      	uxthmi	r6, r6
 801f91c:	07df      	lsls	r7, r3, #31
 801f91e:	bf48      	it	mi
 801f920:	f043 0320 	orrmi.w	r3, r3, #32
 801f924:	6029      	str	r1, [r5, #0]
 801f926:	bf48      	it	mi
 801f928:	6023      	strmi	r3, [r4, #0]
 801f92a:	b91e      	cbnz	r6, 801f934 <_printf_i+0x1a4>
 801f92c:	6823      	ldr	r3, [r4, #0]
 801f92e:	f023 0320 	bic.w	r3, r3, #32
 801f932:	6023      	str	r3, [r4, #0]
 801f934:	2310      	movs	r3, #16
 801f936:	e7a7      	b.n	801f888 <_printf_i+0xf8>
 801f938:	4824      	ldr	r0, [pc, #144]	; (801f9cc <_printf_i+0x23c>)
 801f93a:	e7e4      	b.n	801f906 <_printf_i+0x176>
 801f93c:	4615      	mov	r5, r2
 801f93e:	e7bd      	b.n	801f8bc <_printf_i+0x12c>
 801f940:	682b      	ldr	r3, [r5, #0]
 801f942:	6826      	ldr	r6, [r4, #0]
 801f944:	6961      	ldr	r1, [r4, #20]
 801f946:	1d18      	adds	r0, r3, #4
 801f948:	6028      	str	r0, [r5, #0]
 801f94a:	0635      	lsls	r5, r6, #24
 801f94c:	681b      	ldr	r3, [r3, #0]
 801f94e:	d501      	bpl.n	801f954 <_printf_i+0x1c4>
 801f950:	6019      	str	r1, [r3, #0]
 801f952:	e002      	b.n	801f95a <_printf_i+0x1ca>
 801f954:	0670      	lsls	r0, r6, #25
 801f956:	d5fb      	bpl.n	801f950 <_printf_i+0x1c0>
 801f958:	8019      	strh	r1, [r3, #0]
 801f95a:	2300      	movs	r3, #0
 801f95c:	6123      	str	r3, [r4, #16]
 801f95e:	4615      	mov	r5, r2
 801f960:	e7bc      	b.n	801f8dc <_printf_i+0x14c>
 801f962:	682b      	ldr	r3, [r5, #0]
 801f964:	1d1a      	adds	r2, r3, #4
 801f966:	602a      	str	r2, [r5, #0]
 801f968:	681d      	ldr	r5, [r3, #0]
 801f96a:	6862      	ldr	r2, [r4, #4]
 801f96c:	2100      	movs	r1, #0
 801f96e:	4628      	mov	r0, r5
 801f970:	f7e0 fc5e 	bl	8000230 <memchr>
 801f974:	b108      	cbz	r0, 801f97a <_printf_i+0x1ea>
 801f976:	1b40      	subs	r0, r0, r5
 801f978:	6060      	str	r0, [r4, #4]
 801f97a:	6863      	ldr	r3, [r4, #4]
 801f97c:	6123      	str	r3, [r4, #16]
 801f97e:	2300      	movs	r3, #0
 801f980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f984:	e7aa      	b.n	801f8dc <_printf_i+0x14c>
 801f986:	6923      	ldr	r3, [r4, #16]
 801f988:	462a      	mov	r2, r5
 801f98a:	4649      	mov	r1, r9
 801f98c:	4640      	mov	r0, r8
 801f98e:	47d0      	blx	sl
 801f990:	3001      	adds	r0, #1
 801f992:	d0ad      	beq.n	801f8f0 <_printf_i+0x160>
 801f994:	6823      	ldr	r3, [r4, #0]
 801f996:	079b      	lsls	r3, r3, #30
 801f998:	d413      	bmi.n	801f9c2 <_printf_i+0x232>
 801f99a:	68e0      	ldr	r0, [r4, #12]
 801f99c:	9b03      	ldr	r3, [sp, #12]
 801f99e:	4298      	cmp	r0, r3
 801f9a0:	bfb8      	it	lt
 801f9a2:	4618      	movlt	r0, r3
 801f9a4:	e7a6      	b.n	801f8f4 <_printf_i+0x164>
 801f9a6:	2301      	movs	r3, #1
 801f9a8:	4632      	mov	r2, r6
 801f9aa:	4649      	mov	r1, r9
 801f9ac:	4640      	mov	r0, r8
 801f9ae:	47d0      	blx	sl
 801f9b0:	3001      	adds	r0, #1
 801f9b2:	d09d      	beq.n	801f8f0 <_printf_i+0x160>
 801f9b4:	3501      	adds	r5, #1
 801f9b6:	68e3      	ldr	r3, [r4, #12]
 801f9b8:	9903      	ldr	r1, [sp, #12]
 801f9ba:	1a5b      	subs	r3, r3, r1
 801f9bc:	42ab      	cmp	r3, r5
 801f9be:	dcf2      	bgt.n	801f9a6 <_printf_i+0x216>
 801f9c0:	e7eb      	b.n	801f99a <_printf_i+0x20a>
 801f9c2:	2500      	movs	r5, #0
 801f9c4:	f104 0619 	add.w	r6, r4, #25
 801f9c8:	e7f5      	b.n	801f9b6 <_printf_i+0x226>
 801f9ca:	bf00      	nop
 801f9cc:	0802916d 	.word	0x0802916d
 801f9d0:	0802917e 	.word	0x0802917e

0801f9d4 <__sflush_r>:
 801f9d4:	898a      	ldrh	r2, [r1, #12]
 801f9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9da:	4605      	mov	r5, r0
 801f9dc:	0710      	lsls	r0, r2, #28
 801f9de:	460c      	mov	r4, r1
 801f9e0:	d458      	bmi.n	801fa94 <__sflush_r+0xc0>
 801f9e2:	684b      	ldr	r3, [r1, #4]
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	dc05      	bgt.n	801f9f4 <__sflush_r+0x20>
 801f9e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	dc02      	bgt.n	801f9f4 <__sflush_r+0x20>
 801f9ee:	2000      	movs	r0, #0
 801f9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9f6:	2e00      	cmp	r6, #0
 801f9f8:	d0f9      	beq.n	801f9ee <__sflush_r+0x1a>
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa00:	682f      	ldr	r7, [r5, #0]
 801fa02:	6a21      	ldr	r1, [r4, #32]
 801fa04:	602b      	str	r3, [r5, #0]
 801fa06:	d032      	beq.n	801fa6e <__sflush_r+0x9a>
 801fa08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fa0a:	89a3      	ldrh	r3, [r4, #12]
 801fa0c:	075a      	lsls	r2, r3, #29
 801fa0e:	d505      	bpl.n	801fa1c <__sflush_r+0x48>
 801fa10:	6863      	ldr	r3, [r4, #4]
 801fa12:	1ac0      	subs	r0, r0, r3
 801fa14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fa16:	b10b      	cbz	r3, 801fa1c <__sflush_r+0x48>
 801fa18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fa1a:	1ac0      	subs	r0, r0, r3
 801fa1c:	2300      	movs	r3, #0
 801fa1e:	4602      	mov	r2, r0
 801fa20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fa22:	6a21      	ldr	r1, [r4, #32]
 801fa24:	4628      	mov	r0, r5
 801fa26:	47b0      	blx	r6
 801fa28:	1c43      	adds	r3, r0, #1
 801fa2a:	89a3      	ldrh	r3, [r4, #12]
 801fa2c:	d106      	bne.n	801fa3c <__sflush_r+0x68>
 801fa2e:	6829      	ldr	r1, [r5, #0]
 801fa30:	291d      	cmp	r1, #29
 801fa32:	d82b      	bhi.n	801fa8c <__sflush_r+0xb8>
 801fa34:	4a29      	ldr	r2, [pc, #164]	; (801fadc <__sflush_r+0x108>)
 801fa36:	410a      	asrs	r2, r1
 801fa38:	07d6      	lsls	r6, r2, #31
 801fa3a:	d427      	bmi.n	801fa8c <__sflush_r+0xb8>
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	6062      	str	r2, [r4, #4]
 801fa40:	04d9      	lsls	r1, r3, #19
 801fa42:	6922      	ldr	r2, [r4, #16]
 801fa44:	6022      	str	r2, [r4, #0]
 801fa46:	d504      	bpl.n	801fa52 <__sflush_r+0x7e>
 801fa48:	1c42      	adds	r2, r0, #1
 801fa4a:	d101      	bne.n	801fa50 <__sflush_r+0x7c>
 801fa4c:	682b      	ldr	r3, [r5, #0]
 801fa4e:	b903      	cbnz	r3, 801fa52 <__sflush_r+0x7e>
 801fa50:	6560      	str	r0, [r4, #84]	; 0x54
 801fa52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fa54:	602f      	str	r7, [r5, #0]
 801fa56:	2900      	cmp	r1, #0
 801fa58:	d0c9      	beq.n	801f9ee <__sflush_r+0x1a>
 801fa5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fa5e:	4299      	cmp	r1, r3
 801fa60:	d002      	beq.n	801fa68 <__sflush_r+0x94>
 801fa62:	4628      	mov	r0, r5
 801fa64:	f7fe fb12 	bl	801e08c <_free_r>
 801fa68:	2000      	movs	r0, #0
 801fa6a:	6360      	str	r0, [r4, #52]	; 0x34
 801fa6c:	e7c0      	b.n	801f9f0 <__sflush_r+0x1c>
 801fa6e:	2301      	movs	r3, #1
 801fa70:	4628      	mov	r0, r5
 801fa72:	47b0      	blx	r6
 801fa74:	1c41      	adds	r1, r0, #1
 801fa76:	d1c8      	bne.n	801fa0a <__sflush_r+0x36>
 801fa78:	682b      	ldr	r3, [r5, #0]
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d0c5      	beq.n	801fa0a <__sflush_r+0x36>
 801fa7e:	2b1d      	cmp	r3, #29
 801fa80:	d001      	beq.n	801fa86 <__sflush_r+0xb2>
 801fa82:	2b16      	cmp	r3, #22
 801fa84:	d101      	bne.n	801fa8a <__sflush_r+0xb6>
 801fa86:	602f      	str	r7, [r5, #0]
 801fa88:	e7b1      	b.n	801f9ee <__sflush_r+0x1a>
 801fa8a:	89a3      	ldrh	r3, [r4, #12]
 801fa8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa90:	81a3      	strh	r3, [r4, #12]
 801fa92:	e7ad      	b.n	801f9f0 <__sflush_r+0x1c>
 801fa94:	690f      	ldr	r7, [r1, #16]
 801fa96:	2f00      	cmp	r7, #0
 801fa98:	d0a9      	beq.n	801f9ee <__sflush_r+0x1a>
 801fa9a:	0793      	lsls	r3, r2, #30
 801fa9c:	680e      	ldr	r6, [r1, #0]
 801fa9e:	bf08      	it	eq
 801faa0:	694b      	ldreq	r3, [r1, #20]
 801faa2:	600f      	str	r7, [r1, #0]
 801faa4:	bf18      	it	ne
 801faa6:	2300      	movne	r3, #0
 801faa8:	eba6 0807 	sub.w	r8, r6, r7
 801faac:	608b      	str	r3, [r1, #8]
 801faae:	f1b8 0f00 	cmp.w	r8, #0
 801fab2:	dd9c      	ble.n	801f9ee <__sflush_r+0x1a>
 801fab4:	6a21      	ldr	r1, [r4, #32]
 801fab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fab8:	4643      	mov	r3, r8
 801faba:	463a      	mov	r2, r7
 801fabc:	4628      	mov	r0, r5
 801fabe:	47b0      	blx	r6
 801fac0:	2800      	cmp	r0, #0
 801fac2:	dc06      	bgt.n	801fad2 <__sflush_r+0xfe>
 801fac4:	89a3      	ldrh	r3, [r4, #12]
 801fac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801faca:	81a3      	strh	r3, [r4, #12]
 801facc:	f04f 30ff 	mov.w	r0, #4294967295
 801fad0:	e78e      	b.n	801f9f0 <__sflush_r+0x1c>
 801fad2:	4407      	add	r7, r0
 801fad4:	eba8 0800 	sub.w	r8, r8, r0
 801fad8:	e7e9      	b.n	801faae <__sflush_r+0xda>
 801fada:	bf00      	nop
 801fadc:	dfbffffe 	.word	0xdfbffffe

0801fae0 <_fflush_r>:
 801fae0:	b538      	push	{r3, r4, r5, lr}
 801fae2:	690b      	ldr	r3, [r1, #16]
 801fae4:	4605      	mov	r5, r0
 801fae6:	460c      	mov	r4, r1
 801fae8:	b913      	cbnz	r3, 801faf0 <_fflush_r+0x10>
 801faea:	2500      	movs	r5, #0
 801faec:	4628      	mov	r0, r5
 801faee:	bd38      	pop	{r3, r4, r5, pc}
 801faf0:	b118      	cbz	r0, 801fafa <_fflush_r+0x1a>
 801faf2:	6a03      	ldr	r3, [r0, #32]
 801faf4:	b90b      	cbnz	r3, 801fafa <_fflush_r+0x1a>
 801faf6:	f7fe f8f3 	bl	801dce0 <__sinit>
 801fafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d0f3      	beq.n	801faea <_fflush_r+0xa>
 801fb02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fb04:	07d0      	lsls	r0, r2, #31
 801fb06:	d404      	bmi.n	801fb12 <_fflush_r+0x32>
 801fb08:	0599      	lsls	r1, r3, #22
 801fb0a:	d402      	bmi.n	801fb12 <_fflush_r+0x32>
 801fb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb0e:	f7fe faac 	bl	801e06a <__retarget_lock_acquire_recursive>
 801fb12:	4628      	mov	r0, r5
 801fb14:	4621      	mov	r1, r4
 801fb16:	f7ff ff5d 	bl	801f9d4 <__sflush_r>
 801fb1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb1c:	07da      	lsls	r2, r3, #31
 801fb1e:	4605      	mov	r5, r0
 801fb20:	d4e4      	bmi.n	801faec <_fflush_r+0xc>
 801fb22:	89a3      	ldrh	r3, [r4, #12]
 801fb24:	059b      	lsls	r3, r3, #22
 801fb26:	d4e1      	bmi.n	801faec <_fflush_r+0xc>
 801fb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb2a:	f7fe fa9f 	bl	801e06c <__retarget_lock_release_recursive>
 801fb2e:	e7dd      	b.n	801faec <_fflush_r+0xc>

0801fb30 <__swbuf_r>:
 801fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb32:	460e      	mov	r6, r1
 801fb34:	4614      	mov	r4, r2
 801fb36:	4605      	mov	r5, r0
 801fb38:	b118      	cbz	r0, 801fb42 <__swbuf_r+0x12>
 801fb3a:	6a03      	ldr	r3, [r0, #32]
 801fb3c:	b90b      	cbnz	r3, 801fb42 <__swbuf_r+0x12>
 801fb3e:	f7fe f8cf 	bl	801dce0 <__sinit>
 801fb42:	69a3      	ldr	r3, [r4, #24]
 801fb44:	60a3      	str	r3, [r4, #8]
 801fb46:	89a3      	ldrh	r3, [r4, #12]
 801fb48:	071a      	lsls	r2, r3, #28
 801fb4a:	d525      	bpl.n	801fb98 <__swbuf_r+0x68>
 801fb4c:	6923      	ldr	r3, [r4, #16]
 801fb4e:	b31b      	cbz	r3, 801fb98 <__swbuf_r+0x68>
 801fb50:	6823      	ldr	r3, [r4, #0]
 801fb52:	6922      	ldr	r2, [r4, #16]
 801fb54:	1a98      	subs	r0, r3, r2
 801fb56:	6963      	ldr	r3, [r4, #20]
 801fb58:	b2f6      	uxtb	r6, r6
 801fb5a:	4283      	cmp	r3, r0
 801fb5c:	4637      	mov	r7, r6
 801fb5e:	dc04      	bgt.n	801fb6a <__swbuf_r+0x3a>
 801fb60:	4621      	mov	r1, r4
 801fb62:	4628      	mov	r0, r5
 801fb64:	f7ff ffbc 	bl	801fae0 <_fflush_r>
 801fb68:	b9e0      	cbnz	r0, 801fba4 <__swbuf_r+0x74>
 801fb6a:	68a3      	ldr	r3, [r4, #8]
 801fb6c:	3b01      	subs	r3, #1
 801fb6e:	60a3      	str	r3, [r4, #8]
 801fb70:	6823      	ldr	r3, [r4, #0]
 801fb72:	1c5a      	adds	r2, r3, #1
 801fb74:	6022      	str	r2, [r4, #0]
 801fb76:	701e      	strb	r6, [r3, #0]
 801fb78:	6962      	ldr	r2, [r4, #20]
 801fb7a:	1c43      	adds	r3, r0, #1
 801fb7c:	429a      	cmp	r2, r3
 801fb7e:	d004      	beq.n	801fb8a <__swbuf_r+0x5a>
 801fb80:	89a3      	ldrh	r3, [r4, #12]
 801fb82:	07db      	lsls	r3, r3, #31
 801fb84:	d506      	bpl.n	801fb94 <__swbuf_r+0x64>
 801fb86:	2e0a      	cmp	r6, #10
 801fb88:	d104      	bne.n	801fb94 <__swbuf_r+0x64>
 801fb8a:	4621      	mov	r1, r4
 801fb8c:	4628      	mov	r0, r5
 801fb8e:	f7ff ffa7 	bl	801fae0 <_fflush_r>
 801fb92:	b938      	cbnz	r0, 801fba4 <__swbuf_r+0x74>
 801fb94:	4638      	mov	r0, r7
 801fb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb98:	4621      	mov	r1, r4
 801fb9a:	4628      	mov	r0, r5
 801fb9c:	f000 f806 	bl	801fbac <__swsetup_r>
 801fba0:	2800      	cmp	r0, #0
 801fba2:	d0d5      	beq.n	801fb50 <__swbuf_r+0x20>
 801fba4:	f04f 37ff 	mov.w	r7, #4294967295
 801fba8:	e7f4      	b.n	801fb94 <__swbuf_r+0x64>
	...

0801fbac <__swsetup_r>:
 801fbac:	b538      	push	{r3, r4, r5, lr}
 801fbae:	4b2a      	ldr	r3, [pc, #168]	; (801fc58 <__swsetup_r+0xac>)
 801fbb0:	4605      	mov	r5, r0
 801fbb2:	6818      	ldr	r0, [r3, #0]
 801fbb4:	460c      	mov	r4, r1
 801fbb6:	b118      	cbz	r0, 801fbc0 <__swsetup_r+0x14>
 801fbb8:	6a03      	ldr	r3, [r0, #32]
 801fbba:	b90b      	cbnz	r3, 801fbc0 <__swsetup_r+0x14>
 801fbbc:	f7fe f890 	bl	801dce0 <__sinit>
 801fbc0:	89a3      	ldrh	r3, [r4, #12]
 801fbc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbc6:	0718      	lsls	r0, r3, #28
 801fbc8:	d422      	bmi.n	801fc10 <__swsetup_r+0x64>
 801fbca:	06d9      	lsls	r1, r3, #27
 801fbcc:	d407      	bmi.n	801fbde <__swsetup_r+0x32>
 801fbce:	2309      	movs	r3, #9
 801fbd0:	602b      	str	r3, [r5, #0]
 801fbd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fbd6:	81a3      	strh	r3, [r4, #12]
 801fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 801fbdc:	e034      	b.n	801fc48 <__swsetup_r+0x9c>
 801fbde:	0758      	lsls	r0, r3, #29
 801fbe0:	d512      	bpl.n	801fc08 <__swsetup_r+0x5c>
 801fbe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fbe4:	b141      	cbz	r1, 801fbf8 <__swsetup_r+0x4c>
 801fbe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbea:	4299      	cmp	r1, r3
 801fbec:	d002      	beq.n	801fbf4 <__swsetup_r+0x48>
 801fbee:	4628      	mov	r0, r5
 801fbf0:	f7fe fa4c 	bl	801e08c <_free_r>
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	6363      	str	r3, [r4, #52]	; 0x34
 801fbf8:	89a3      	ldrh	r3, [r4, #12]
 801fbfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fbfe:	81a3      	strh	r3, [r4, #12]
 801fc00:	2300      	movs	r3, #0
 801fc02:	6063      	str	r3, [r4, #4]
 801fc04:	6923      	ldr	r3, [r4, #16]
 801fc06:	6023      	str	r3, [r4, #0]
 801fc08:	89a3      	ldrh	r3, [r4, #12]
 801fc0a:	f043 0308 	orr.w	r3, r3, #8
 801fc0e:	81a3      	strh	r3, [r4, #12]
 801fc10:	6923      	ldr	r3, [r4, #16]
 801fc12:	b94b      	cbnz	r3, 801fc28 <__swsetup_r+0x7c>
 801fc14:	89a3      	ldrh	r3, [r4, #12]
 801fc16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc1e:	d003      	beq.n	801fc28 <__swsetup_r+0x7c>
 801fc20:	4621      	mov	r1, r4
 801fc22:	4628      	mov	r0, r5
 801fc24:	f000 f840 	bl	801fca8 <__smakebuf_r>
 801fc28:	89a0      	ldrh	r0, [r4, #12]
 801fc2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fc2e:	f010 0301 	ands.w	r3, r0, #1
 801fc32:	d00a      	beq.n	801fc4a <__swsetup_r+0x9e>
 801fc34:	2300      	movs	r3, #0
 801fc36:	60a3      	str	r3, [r4, #8]
 801fc38:	6963      	ldr	r3, [r4, #20]
 801fc3a:	425b      	negs	r3, r3
 801fc3c:	61a3      	str	r3, [r4, #24]
 801fc3e:	6923      	ldr	r3, [r4, #16]
 801fc40:	b943      	cbnz	r3, 801fc54 <__swsetup_r+0xa8>
 801fc42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fc46:	d1c4      	bne.n	801fbd2 <__swsetup_r+0x26>
 801fc48:	bd38      	pop	{r3, r4, r5, pc}
 801fc4a:	0781      	lsls	r1, r0, #30
 801fc4c:	bf58      	it	pl
 801fc4e:	6963      	ldrpl	r3, [r4, #20]
 801fc50:	60a3      	str	r3, [r4, #8]
 801fc52:	e7f4      	b.n	801fc3e <__swsetup_r+0x92>
 801fc54:	2000      	movs	r0, #0
 801fc56:	e7f7      	b.n	801fc48 <__swsetup_r+0x9c>
 801fc58:	2000538c 	.word	0x2000538c

0801fc5c <__swhatbuf_r>:
 801fc5c:	b570      	push	{r4, r5, r6, lr}
 801fc5e:	460c      	mov	r4, r1
 801fc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc64:	2900      	cmp	r1, #0
 801fc66:	b096      	sub	sp, #88	; 0x58
 801fc68:	4615      	mov	r5, r2
 801fc6a:	461e      	mov	r6, r3
 801fc6c:	da0d      	bge.n	801fc8a <__swhatbuf_r+0x2e>
 801fc6e:	89a3      	ldrh	r3, [r4, #12]
 801fc70:	f013 0f80 	tst.w	r3, #128	; 0x80
 801fc74:	f04f 0100 	mov.w	r1, #0
 801fc78:	bf0c      	ite	eq
 801fc7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fc7e:	2340      	movne	r3, #64	; 0x40
 801fc80:	2000      	movs	r0, #0
 801fc82:	6031      	str	r1, [r6, #0]
 801fc84:	602b      	str	r3, [r5, #0]
 801fc86:	b016      	add	sp, #88	; 0x58
 801fc88:	bd70      	pop	{r4, r5, r6, pc}
 801fc8a:	466a      	mov	r2, sp
 801fc8c:	f000 f848 	bl	801fd20 <_fstat_r>
 801fc90:	2800      	cmp	r0, #0
 801fc92:	dbec      	blt.n	801fc6e <__swhatbuf_r+0x12>
 801fc94:	9901      	ldr	r1, [sp, #4]
 801fc96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801fc9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801fc9e:	4259      	negs	r1, r3
 801fca0:	4159      	adcs	r1, r3
 801fca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fca6:	e7eb      	b.n	801fc80 <__swhatbuf_r+0x24>

0801fca8 <__smakebuf_r>:
 801fca8:	898b      	ldrh	r3, [r1, #12]
 801fcaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fcac:	079d      	lsls	r5, r3, #30
 801fcae:	4606      	mov	r6, r0
 801fcb0:	460c      	mov	r4, r1
 801fcb2:	d507      	bpl.n	801fcc4 <__smakebuf_r+0x1c>
 801fcb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fcb8:	6023      	str	r3, [r4, #0]
 801fcba:	6123      	str	r3, [r4, #16]
 801fcbc:	2301      	movs	r3, #1
 801fcbe:	6163      	str	r3, [r4, #20]
 801fcc0:	b002      	add	sp, #8
 801fcc2:	bd70      	pop	{r4, r5, r6, pc}
 801fcc4:	ab01      	add	r3, sp, #4
 801fcc6:	466a      	mov	r2, sp
 801fcc8:	f7ff ffc8 	bl	801fc5c <__swhatbuf_r>
 801fccc:	9900      	ldr	r1, [sp, #0]
 801fcce:	4605      	mov	r5, r0
 801fcd0:	4630      	mov	r0, r6
 801fcd2:	f7fd f8a3 	bl	801ce1c <_malloc_r>
 801fcd6:	b948      	cbnz	r0, 801fcec <__smakebuf_r+0x44>
 801fcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fcdc:	059a      	lsls	r2, r3, #22
 801fcde:	d4ef      	bmi.n	801fcc0 <__smakebuf_r+0x18>
 801fce0:	f023 0303 	bic.w	r3, r3, #3
 801fce4:	f043 0302 	orr.w	r3, r3, #2
 801fce8:	81a3      	strh	r3, [r4, #12]
 801fcea:	e7e3      	b.n	801fcb4 <__smakebuf_r+0xc>
 801fcec:	89a3      	ldrh	r3, [r4, #12]
 801fcee:	6020      	str	r0, [r4, #0]
 801fcf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fcf4:	81a3      	strh	r3, [r4, #12]
 801fcf6:	9b00      	ldr	r3, [sp, #0]
 801fcf8:	6163      	str	r3, [r4, #20]
 801fcfa:	9b01      	ldr	r3, [sp, #4]
 801fcfc:	6120      	str	r0, [r4, #16]
 801fcfe:	b15b      	cbz	r3, 801fd18 <__smakebuf_r+0x70>
 801fd00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd04:	4630      	mov	r0, r6
 801fd06:	f000 f81d 	bl	801fd44 <_isatty_r>
 801fd0a:	b128      	cbz	r0, 801fd18 <__smakebuf_r+0x70>
 801fd0c:	89a3      	ldrh	r3, [r4, #12]
 801fd0e:	f023 0303 	bic.w	r3, r3, #3
 801fd12:	f043 0301 	orr.w	r3, r3, #1
 801fd16:	81a3      	strh	r3, [r4, #12]
 801fd18:	89a3      	ldrh	r3, [r4, #12]
 801fd1a:	431d      	orrs	r5, r3
 801fd1c:	81a5      	strh	r5, [r4, #12]
 801fd1e:	e7cf      	b.n	801fcc0 <__smakebuf_r+0x18>

0801fd20 <_fstat_r>:
 801fd20:	b538      	push	{r3, r4, r5, lr}
 801fd22:	4d07      	ldr	r5, [pc, #28]	; (801fd40 <_fstat_r+0x20>)
 801fd24:	2300      	movs	r3, #0
 801fd26:	4604      	mov	r4, r0
 801fd28:	4608      	mov	r0, r1
 801fd2a:	4611      	mov	r1, r2
 801fd2c:	602b      	str	r3, [r5, #0]
 801fd2e:	f7f0 fbcc 	bl	80104ca <_fstat>
 801fd32:	1c43      	adds	r3, r0, #1
 801fd34:	d102      	bne.n	801fd3c <_fstat_r+0x1c>
 801fd36:	682b      	ldr	r3, [r5, #0]
 801fd38:	b103      	cbz	r3, 801fd3c <_fstat_r+0x1c>
 801fd3a:	6023      	str	r3, [r4, #0]
 801fd3c:	bd38      	pop	{r3, r4, r5, pc}
 801fd3e:	bf00      	nop
 801fd40:	200057ec 	.word	0x200057ec

0801fd44 <_isatty_r>:
 801fd44:	b538      	push	{r3, r4, r5, lr}
 801fd46:	4d06      	ldr	r5, [pc, #24]	; (801fd60 <_isatty_r+0x1c>)
 801fd48:	2300      	movs	r3, #0
 801fd4a:	4604      	mov	r4, r0
 801fd4c:	4608      	mov	r0, r1
 801fd4e:	602b      	str	r3, [r5, #0]
 801fd50:	f7f0 fbcb 	bl	80104ea <_isatty>
 801fd54:	1c43      	adds	r3, r0, #1
 801fd56:	d102      	bne.n	801fd5e <_isatty_r+0x1a>
 801fd58:	682b      	ldr	r3, [r5, #0]
 801fd5a:	b103      	cbz	r3, 801fd5e <_isatty_r+0x1a>
 801fd5c:	6023      	str	r3, [r4, #0]
 801fd5e:	bd38      	pop	{r3, r4, r5, pc}
 801fd60:	200057ec 	.word	0x200057ec

0801fd64 <_init>:
 801fd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd66:	bf00      	nop
 801fd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd6a:	bc08      	pop	{r3}
 801fd6c:	469e      	mov	lr, r3
 801fd6e:	4770      	bx	lr

0801fd70 <_fini>:
 801fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd72:	bf00      	nop
 801fd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd76:	bc08      	pop	{r3}
 801fd78:	469e      	mov	lr, r3
 801fd7a:	4770      	bx	lr
