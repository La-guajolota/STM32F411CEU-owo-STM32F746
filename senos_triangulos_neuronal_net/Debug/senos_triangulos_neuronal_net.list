
senos_triangulos_neuronal_net.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000204c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009410  080206a0  080206a0  000306a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ab0  08029ab0  00045390  2**0
                  CONTENTS
  4 .ARM          00000008  08029ab0  08029ab0  00039ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ab8  08029ab8  00045390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08029ab8  08029ab8  00039ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08029ac4  08029ac4  00039ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005390  20000000  08029acc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20005390  0802ee5c  00045390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200057f4  0802ee5c  000457f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00045390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000453c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0017fa47  00000000  00000000  00045403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010b30  00000000  00000000  001c4e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00005130  00000000  00000000  001d5980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003ecf  00000000  00000000  001daab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a722  00000000  00000000  001de97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006094c  00000000  00000000  002190a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f14fd  00000000  00000000  002799ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00019198  00000000  00000000  0046aeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00484084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20005390 	.word	0x20005390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802067c 	.word	0x0802067c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20005394 	.word	0x20005394
 800020c:	0802067c 	.word	0x0802067c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9f1 	b.w	80010ec <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f883 	bl	8000e24 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f876 	bl	8000e24 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f865 	bl	8000e24 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f857 	bl	8000e24 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b9a6 	b.w	80010ec <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f83c 	bl	8000e24 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_d2lz>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	f7ff febb 	bl	8000b3c <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x1c>
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4629      	mov	r1, r5
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fc31 	bl	8000658 <__aeabi_dmul>
 8000df6:	f7ff ff07 	bl	8000c08 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff fbb2 	bl	8000564 <__aeabi_ui2d>
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f7ff fc28 	bl	8000658 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff fa6a 	bl	80002e8 <__aeabi_dsub>
 8000e14:	f7ff fef8 	bl	8000c08 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	460f      	mov	r7, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d14a      	bne.n	8000eca <__udivmoddi4+0xa6>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	4694      	mov	ip, r2
 8000e38:	d965      	bls.n	8000f06 <__udivmoddi4+0xe2>
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	b143      	cbz	r3, 8000e52 <__udivmoddi4+0x2e>
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	f1c3 0220 	rsb	r2, r3, #32
 8000e48:	409f      	lsls	r7, r3
 8000e4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4e:	4317      	orrs	r7, r2
 8000e50:	409c      	lsls	r4, r3
 8000e52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e56:	fa1f f58c 	uxth.w	r5, ip
 8000e5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e5e:	0c22      	lsrs	r2, r4, #16
 8000e60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e68:	fb01 f005 	mul.w	r0, r1, r5
 8000e6c:	4290      	cmp	r0, r2
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x62>
 8000e70:	eb1c 0202 	adds.w	r2, ip, r2
 8000e74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e78:	f080 811c 	bcs.w	80010b4 <__udivmoddi4+0x290>
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	f240 8119 	bls.w	80010b4 <__udivmoddi4+0x290>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4462      	add	r2, ip
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	b2a4      	uxth	r4, r4
 8000e8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e96:	fb00 f505 	mul.w	r5, r0, r5
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d90a      	bls.n	8000eb4 <__udivmoddi4+0x90>
 8000e9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea6:	f080 8107 	bcs.w	80010b8 <__udivmoddi4+0x294>
 8000eaa:	42a5      	cmp	r5, r4
 8000eac:	f240 8104 	bls.w	80010b8 <__udivmoddi4+0x294>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11e      	cbz	r6, 8000ec6 <__udivmoddi4+0xa2>
 8000ebe:	40dc      	lsrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0xbc>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	f000 80ed 	beq.w	80010ae <__udivmoddi4+0x28a>
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eda:	4608      	mov	r0, r1
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	fab3 f183 	clz	r1, r3
 8000ee4:	2900      	cmp	r1, #0
 8000ee6:	d149      	bne.n	8000f7c <__udivmoddi4+0x158>
 8000ee8:	42ab      	cmp	r3, r5
 8000eea:	d302      	bcc.n	8000ef2 <__udivmoddi4+0xce>
 8000eec:	4282      	cmp	r2, r0
 8000eee:	f200 80f8 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d0e2      	beq.n	8000ec6 <__udivmoddi4+0xa2>
 8000f00:	e9c6 4700 	strd	r4, r7, [r6]
 8000f04:	e7df      	b.n	8000ec6 <__udivmoddi4+0xa2>
 8000f06:	b902      	cbnz	r2, 8000f0a <__udivmoddi4+0xe6>
 8000f08:	deff      	udf	#255	; 0xff
 8000f0a:	fab2 f382 	clz	r3, r2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8090 	bne.w	8001034 <__udivmoddi4+0x210>
 8000f14:	1a8a      	subs	r2, r1, r2
 8000f16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1a:	fa1f fe8c 	uxth.w	lr, ip
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f24:	fb07 2015 	mls	r0, r7, r5, r2
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f2e:	fb0e f005 	mul.w	r0, lr, r5
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x124>
 8000f36:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x122>
 8000f40:	4290      	cmp	r0, r2
 8000f42:	f200 80cb 	bhi.w	80010dc <__udivmoddi4+0x2b8>
 8000f46:	4645      	mov	r5, r8
 8000f48:	1a12      	subs	r2, r2, r0
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f50:	fb07 2210 	mls	r2, r7, r0, r2
 8000f54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f58:	fb0e fe00 	mul.w	lr, lr, r0
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x14e>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x14c>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f200 80bb 	bhi.w	80010e6 <__udivmoddi4+0x2c2>
 8000f70:	4610      	mov	r0, r2
 8000f72:	eba4 040e 	sub.w	r4, r4, lr
 8000f76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f7a:	e79f      	b.n	8000ebc <__udivmoddi4+0x98>
 8000f7c:	f1c1 0720 	rsb	r7, r1, #32
 8000f80:	408b      	lsls	r3, r1
 8000f82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f92:	40fd      	lsrs	r5, r7
 8000f94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f9e:	fa1f fe8c 	uxth.w	lr, ip
 8000fa2:	fb09 5518 	mls	r5, r9, r8, r5
 8000fa6:	0c1c      	lsrs	r4, r3, #16
 8000fa8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000fac:	fb08 f50e 	mul.w	r5, r8, lr
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000fba:	d90b      	bls.n	8000fd4 <__udivmoddi4+0x1b0>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc4:	f080 8088 	bcs.w	80010d8 <__udivmoddi4+0x2b4>
 8000fc8:	42a5      	cmp	r5, r4
 8000fca:	f240 8085 	bls.w	80010d8 <__udivmoddi4+0x2b4>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	1b64      	subs	r4, r4, r5
 8000fd6:	b29d      	uxth	r5, r3
 8000fd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fe0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x1da>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ff4:	d26c      	bcs.n	80010d0 <__udivmoddi4+0x2ac>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	d96a      	bls.n	80010d0 <__udivmoddi4+0x2ac>
 8000ffa:	3b02      	subs	r3, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001002:	fba3 9502 	umull	r9, r5, r3, r2
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	42ac      	cmp	r4, r5
 800100c:	46c8      	mov	r8, r9
 800100e:	46ae      	mov	lr, r5
 8001010:	d356      	bcc.n	80010c0 <__udivmoddi4+0x29c>
 8001012:	d053      	beq.n	80010bc <__udivmoddi4+0x298>
 8001014:	b156      	cbz	r6, 800102c <__udivmoddi4+0x208>
 8001016:	ebb0 0208 	subs.w	r2, r0, r8
 800101a:	eb64 040e 	sbc.w	r4, r4, lr
 800101e:	fa04 f707 	lsl.w	r7, r4, r7
 8001022:	40ca      	lsrs	r2, r1
 8001024:	40cc      	lsrs	r4, r1
 8001026:	4317      	orrs	r7, r2
 8001028:	e9c6 7400 	strd	r7, r4, [r6]
 800102c:	4618      	mov	r0, r3
 800102e:	2100      	movs	r1, #0
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	f1c3 0120 	rsb	r1, r3, #32
 8001038:	fa02 fc03 	lsl.w	ip, r2, r3
 800103c:	fa20 f201 	lsr.w	r2, r0, r1
 8001040:	fa25 f101 	lsr.w	r1, r5, r1
 8001044:	409d      	lsls	r5, r3
 8001046:	432a      	orrs	r2, r5
 8001048:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800104c:	fa1f fe8c 	uxth.w	lr, ip
 8001050:	fbb1 f0f7 	udiv	r0, r1, r7
 8001054:	fb07 1510 	mls	r5, r7, r0, r1
 8001058:	0c11      	lsrs	r1, r2, #16
 800105a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800105e:	fb00 f50e 	mul.w	r5, r0, lr
 8001062:	428d      	cmp	r5, r1
 8001064:	fa04 f403 	lsl.w	r4, r4, r3
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x258>
 800106a:	eb1c 0101 	adds.w	r1, ip, r1
 800106e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001072:	d22f      	bcs.n	80010d4 <__udivmoddi4+0x2b0>
 8001074:	428d      	cmp	r5, r1
 8001076:	d92d      	bls.n	80010d4 <__udivmoddi4+0x2b0>
 8001078:	3802      	subs	r0, #2
 800107a:	4461      	add	r1, ip
 800107c:	1b49      	subs	r1, r1, r5
 800107e:	b292      	uxth	r2, r2
 8001080:	fbb1 f5f7 	udiv	r5, r1, r7
 8001084:	fb07 1115 	mls	r1, r7, r5, r1
 8001088:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800108c:	fb05 f10e 	mul.w	r1, r5, lr
 8001090:	4291      	cmp	r1, r2
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x282>
 8001094:	eb1c 0202 	adds.w	r2, ip, r2
 8001098:	f105 38ff 	add.w	r8, r5, #4294967295
 800109c:	d216      	bcs.n	80010cc <__udivmoddi4+0x2a8>
 800109e:	4291      	cmp	r1, r2
 80010a0:	d914      	bls.n	80010cc <__udivmoddi4+0x2a8>
 80010a2:	3d02      	subs	r5, #2
 80010a4:	4462      	add	r2, ip
 80010a6:	1a52      	subs	r2, r2, r1
 80010a8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010ac:	e738      	b.n	8000f20 <__udivmoddi4+0xfc>
 80010ae:	4631      	mov	r1, r6
 80010b0:	4630      	mov	r0, r6
 80010b2:	e708      	b.n	8000ec6 <__udivmoddi4+0xa2>
 80010b4:	4639      	mov	r1, r7
 80010b6:	e6e6      	b.n	8000e86 <__udivmoddi4+0x62>
 80010b8:	4610      	mov	r0, r2
 80010ba:	e6fb      	b.n	8000eb4 <__udivmoddi4+0x90>
 80010bc:	4548      	cmp	r0, r9
 80010be:	d2a9      	bcs.n	8001014 <__udivmoddi4+0x1f0>
 80010c0:	ebb9 0802 	subs.w	r8, r9, r2
 80010c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c8:	3b01      	subs	r3, #1
 80010ca:	e7a3      	b.n	8001014 <__udivmoddi4+0x1f0>
 80010cc:	4645      	mov	r5, r8
 80010ce:	e7ea      	b.n	80010a6 <__udivmoddi4+0x282>
 80010d0:	462b      	mov	r3, r5
 80010d2:	e794      	b.n	8000ffe <__udivmoddi4+0x1da>
 80010d4:	4640      	mov	r0, r8
 80010d6:	e7d1      	b.n	800107c <__udivmoddi4+0x258>
 80010d8:	46d0      	mov	r8, sl
 80010da:	e77b      	b.n	8000fd4 <__udivmoddi4+0x1b0>
 80010dc:	3d02      	subs	r5, #2
 80010de:	4462      	add	r2, ip
 80010e0:	e732      	b.n	8000f48 <__udivmoddi4+0x124>
 80010e2:	4608      	mov	r0, r1
 80010e4:	e70a      	b.n	8000efc <__udivmoddi4+0xd8>
 80010e6:	4464      	add	r4, ip
 80010e8:	3802      	subs	r0, #2
 80010ea:	e742      	b.n	8000f72 <__udivmoddi4+0x14e>

080010ec <__aeabi_idiv0>:
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	ed87 0a01 	vstr	s0, [r7, #4]
 800111a:	ed97 0a01 	vldr	s0, [r7, #4]
 800111e:	f019 f9ab 	bl	801a478 <expf>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	eef0 7ae7 	vabs.f32	s15, s15
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZSt3logf>:
  using ::log;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log(float __x)
  { return __builtin_logf(__x); }
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
 800115a:	ed97 0a01 	vldr	s0, [r7, #4]
 800115e:	f019 f9c1 	bl	801a4e4 <logf>
 8001162:	eef0 7a40 	vmov.f32	s15, s0
 8001166:	eeb0 0a67 	vmov.f32	s0, s15
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a01 	vstr	s0, [r7, #4]
 800117a:	ed97 0a01 	vldr	s0, [r7, #4]
 800117e:	f019 fa51 	bl	801a624 <sinf>
 8001182:	eef0 7a40 	vmov.f32	s15, s0
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a01 	vstr	s0, [r7, #4]
 800119a:	ed97 0a01 	vldr	s0, [r7, #4]
 800119e:	f019 f9fd 	bl	801a59c <sqrtf>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80011ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80011be:	fef8 7a67 	vrinta.f32	s15, s15
 80011c2:	eeb0 0a67 	vmov.f32	s0, s15
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	bf00      	nop
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	7039      	strb	r1, [r7, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	7138      	strb	r0, [r7, #4]
 8001218:	bf00      	nop
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	f1c3 031f 	rsb	r3, r3, #31
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4798      	blx	r3
    }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf0c      	ite	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	2300      	movne	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x26>
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x78>)
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x7c>)
 80012d6:	2137      	movs	r1, #55	; 0x37
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x80>)
 80012da:	f01c f9bb 	bl	801d654 <__assert_func>

	if(align && size)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d01c      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
		void * p = ei_calloc(size + hdr_size, 1);
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f016 f851 	bl	80173a0 <_Z9ei_callocjj>
 80012fe:	60f8      	str	r0, [r7, #12]

		if(p)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00e      	beq.n	8001324 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	425b      	negs	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3b02      	subs	r3, #2
 8001320:	b292      	uxth	r2, r2
 8001322:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8001324:	697b      	ldr	r3, [r7, #20]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	080206a0 	.word	0x080206a0
 8001334:	080206bc 	.word	0x080206bc
 8001338:	080206f4 	.word	0x080206f4

0800133c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 800134e:	215a      	movs	r1, #90	; 0x5a
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8001352:	f01c f97f 	bl	801d654 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800135c:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	425b      	negs	r3, r3
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f016 f827 	bl	80173bc <_Z7ei_freePv>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	08020778 	.word	0x08020778
 800137c:	0802077c 	.word	0x0802077c
 8001380:	080206f4 	.word	0x080206f4

08001384 <_ZNSt14_Bit_referenceC1EPmm>:
  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_mask(__y) { }
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZNKSt14_Bit_referencecvbEv>:

#if __cplusplus >= 201103L
    _Bit_reference(const _Bit_reference&) = default;
#endif

    operator bool() const _GLIBCXX_NOEXCEPT
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
    { return !!(*_M_p & _M_mask); }
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZNSt14_Bit_referenceaSEb>:

    _Bit_reference&
    operator=(bool __x) _GLIBCXX_NOEXCEPT
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    {
      if (__x)
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <_ZNSt14_Bit_referenceaSEb+0x26>
	*_M_p |= _M_mask;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e009      	b.n	800140e <_ZNSt14_Bit_referenceaSEb+0x3a>
      else
	*_M_p &= ~_M_mask;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	43da      	mvns	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
      return *this;
 800140e:	687b      	ldr	r3, [r7, #4]
    }
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_ZNSt18_Bit_iterator_baseC1EPmj>:
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
    : _M_p(__x), _M_offset(__y) { }
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZNSt18_Bit_iterator_base7_M_incrEi>:
	  --_M_p;
	}
    }

    void
    _M_incr(ptrdiff_t __i)
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
    {
      difference_type __n = __i + _M_offset;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
      _M_p += __n / int(_S_word_bit);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x20>
 8001460:	331f      	adds	r3, #31
 8001462:	115b      	asrs	r3, r3, #5
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	441a      	add	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
      __n = __n % int(_S_word_bit);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	425a      	negs	r2, r3
 8001470:	f003 031f 	and.w	r3, r3, #31
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	bf58      	it	pl
 800147a:	4253      	negpl	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
      if (__n < 0)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da07      	bge.n	8001494 <_ZNSt18_Bit_iterator_base7_M_incrEi+0x52>
	{
	  __n += int(_S_word_bit);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	3320      	adds	r3, #32
 8001488:	60fb      	str	r3, [r7, #12]
	  --_M_p;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	1f1a      	subs	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
	}
      _M_offset = static_cast<unsigned int>(__n);
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
    }
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZNSt13_Bit_iteratorC1Ev>:
#else
    typedef _Bit_reference* pointer;
#endif
    typedef _Bit_iterator   iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffb1 	bl	800141c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZNSt13_Bit_iteratorC1EPmj>:

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
    : _Bit_iterator_base(__x, __y) { }
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffa0 	bl	800141c <_ZNSt18_Bit_iterator_baseC1EPmj>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNKSt13_Bit_iteratordeEv>:
    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
    { return reference(_M_p, 1UL << _M_offset); }
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff3f 	bl	8001384 <_ZNSt14_Bit_referenceC1EPmm>
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZNSt13_Bit_iteratorpLEi>:
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
    {
      _M_incr(__i);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff90 	bl	8001442 <_ZNSt18_Bit_iterator_base7_M_incrEi>
      return *this;
 8001522:	687b      	ldr	r3, [r7, #4]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZNKSt13_Bit_iteratorixEi>:
      *this += -__i;
      return *this;
    }

    reference
    operator[](difference_type __i) const
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    { return *(*this + __i); }
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f80b 	bl	800155c <_ZStplRKSt13_Bit_iteratori>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f107 0210 	add.w	r2, r7, #16
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffc9 	bl	80014e6 <_ZNKSt13_Bit_iteratordeEv>
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZStplRKSt13_Bit_iteratori>:

    friend iterator
    operator+(const iterator& __x, difference_type __n)
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
    {
      iterator __tmp = __x;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001570:	e883 0003 	stmia.w	r3, {r0, r1}
      __tmp += __n;
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff ffc9 	bl	800150e <_ZNSt13_Bit_iteratorpLEi>
      return __tmp;
 800157c:	bf00      	nop
    }
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	731a      	strb	r2, [r3, #12]
 80015a6:	e00e      	b.n	80015c6 <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	fb02 f303 	mul.w	r3, r2, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f015 fef3 	bl	80173a0 <_Z9ei_callocjj>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <_ZN2ei9ei_matrixD1Ev+0x22>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7b1b      	ldrb	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f015 fedf 	bl	80173bc <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZN2ei9ei_matrix11get_row_ptrEj>:
     * @brief Get a pointer to the buffer advanced by n rows
     *
     * @param row Numer of rows to advance the returned buffer pointer
     * @return float* Pointer to the buffer at the start of row n
     */
    float *get_row_ptr(size_t row)
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    {
        return buffer + row * cols;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
    }
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN2ei5numpy4sqrtEf>:
// clang-format on

class numpy {
public:

    static float sqrt(float x) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	ed87 0a01 	vstr	s0, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001644:	edd7 7a05 	vldr	s15, [r7, #20]
 8001648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001650:	db09      	blt.n	8001666 <_ZN2ei5numpy4sqrtEf+0x36>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001652:	ed97 0a05 	vldr	s0, [r7, #20]
 8001656:	f018 ffa1 	bl	801a59c <sqrtf>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8001664:	e004      	b.n	8001670 <_ZN2ei5numpy4sqrtEf+0x40>
    }
    else
    {
      *pOut = 0.0f;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800166e:	bf00      	nop
#if EIDSP_USE_CMSIS_DSP
        float temp;
        arm_sqrt_f32(x, &temp);
        return temp;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	ee07 3a90 	vmov	s15, r3
#else
        return sqrtf(x);
#endif
    }
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_ZN2ei5numpy3sumEPfj>:
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(int16_t));

        return EIDSP_OK;
    }

    static float sum(float *input_array, size_t input_array_size) {
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e00e      	b.n	80016b4 <_ZN2ei5numpy3sumEPfj+0x34>
            res += input_array[ix];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3ec      	bcc.n	8001696 <_ZN2ei5numpy3sumEPfj+0x16>
        }
        return res;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	ee07 3a90 	vmov	s15, r3
    }
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
        }

        return EIDSP_OK;
    }

    static void transpose_in_place(matrix_t *matrix) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b096      	sub	sp, #88	; 0x58
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
        size_t size = matrix->cols * matrix->rows - 1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6852      	ldr	r2, [r2, #4]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
        float temp; // temp for swap
        size_t next; // next item to swap
        size_t cycleBegin; // index of start of cycle
        size_t i; // location in matrix
        size_t all_done_mark = 1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        ei_vector<bool> done(size+1,false);
 80016ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ee:	1c59      	adds	r1, r3, #1
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	f107 021f 	add.w	r2, r7, #31
 80016fc:	f107 0008 	add.w	r0, r7, #8
 8001700:	f008 fa6c 	bl	8009bdc <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>

        i = 1; // Note that matrix[0] and last element of matrix won't move
 8001704:	2301      	movs	r3, #1
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
        while (1)
        {
            cycleBegin = i;
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
            temp = matrix->buffer[i];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
            do
            {
                size_t col = i % matrix->cols;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001720:	fbb3 f1f2 	udiv	r1, r3, r2
 8001724:	fb01 f202 	mul.w	r2, r1, r2
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
                size_t row = i / matrix->cols;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
                // swap row and col to make new idx, b/c we want to know where in the transposed matrix
                next = col*matrix->rows + row;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001744:	4413      	add	r3, r2
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
                float temp2 = matrix->buffer[next];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
                matrix->buffer[next] = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001762:	601a      	str	r2, [r3, #0]
                temp = temp2;
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
                done[next] = true;
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	f107 0108 	add.w	r1, r7, #8
 8001770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fa5a 	bl	8009c2c <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 8001778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe28 	bl	80013d4 <_ZNSt14_Bit_referenceaSEb>
                i = next;
 8001784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
            }
            while (i != cycleBegin);
 8001788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800178a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800178c:	429a      	cmp	r2, r3
 800178e:	d1c4      	bne.n	800171a <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x4a>

            // start next cycle by find next not done
            for (i = all_done_mark; done[i]; i++) {
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
 8001794:	e009      	b.n	80017aa <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xda>
                all_done_mark++; // move the high water mark so we don't look again
 8001796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001798:	3301      	adds	r3, #1
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
                if(i>=size) { goto LOOP_END; }
 800179c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800179e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d213      	bcs.n	80017cc <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xfc>
            for (i = all_done_mark; done[i]; i++) {
 80017a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017a6:	3301      	adds	r3, #1
 80017a8:	653b      	str	r3, [r7, #80]	; 0x50
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	f107 0108 	add.w	r1, r7, #8
 80017b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 fa39 	bl	8009c2c <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fdf3 	bl	80013aa <_ZNKSt14_Bit_referencecvbEv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1e5      	bne.n	8001796 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xc6>
            }
        }
 80017ca:	e79d      	b.n	8001708 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x38>
                if(i>=size) { goto LOOP_END; }
 80017cc:	bf00      	nop
        LOOP_END:
        // finally, swap the row and column dimensions
        std::swap(matrix->rows, matrix->cols);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	1d1a      	adds	r2, r3, #4
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3308      	adds	r3, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	4610      	mov	r0, r2
 80017da:	f008 fa4a 	bl	8009c72 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f008 fa15 	bl	8009c12 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>
 80017e8:	3758      	adds	r7, #88	; 0x58
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4619      	mov	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	f000 f817 	bl	8001838 <_ZN2ei5numpy9transposeEPfii>
 800180a:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	e00c      	b.n	8001830 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 8001822:	893a      	ldrh	r2, [r7, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 8001828:	897a      	ldrh	r2, [r7, #10]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800182e:	2300      	movs	r3, #0
    }
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN2ei5numpy9transposeEPfii>:
     * @param rows
     * @param columns
     * @deprecated You probably want to use transpose_in_place
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b08f      	sub	sp, #60	; 0x3c
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800184c:	2300      	movs	r3, #0
 800184e:	f7ff fe9a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <_ZN2ei5numpy9transposeEPfii+0x24>
 8001858:	4c23      	ldr	r4, [pc, #140]	; (80018e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 800185a:	e03b      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001862:	4c21      	ldr	r4, [pc, #132]	; (80018e8 <_ZN2ei5numpy9transposeEPfii+0xb0>)
 8001864:	e036      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	da03      	bge.n	8001876 <_ZN2ei5numpy9transposeEPfii+0x3e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	db01      	blt.n	800187a <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 8001876:	4c1d      	ldr	r4, [pc, #116]	; (80018ec <_ZN2ei5numpy9transposeEPfii+0xb4>)
 8001878:	e02c      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	b29b      	uxth	r3, r3
 800187e:	83bb      	strh	r3, [r7, #28]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	b29b      	uxth	r3, r3
 8001884:	83fb      	strh	r3, [r7, #30]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	b29b      	uxth	r3, r3
 800188e:	82bb      	strh	r3, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b29b      	uxth	r3, r3
 8001894:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001898:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800189a:	f107 0214 	add.w	r2, r7, #20
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f011 fbe8 	bl	801307a <arm_mat_trans_f32>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80018b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 80018b8:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80018bc:	e00a      	b.n	80018d4 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80018be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	461a      	mov	r2, r3
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f01d f85a 	bl	801e986 <memcpy>

        return EIDSP_OK;
 80018d2:	2400      	movs	r4, #0
    }
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe7f 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80018de:	4623      	mov	r3, r4
 80018e0:	4618      	mov	r0, r3
 80018e2:	373c      	adds	r7, #60	; 0x3c
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}
 80018e8:	fffffc16 	.word	0xfffffc16
 80018ec:	fffffc0c 	.word	0xfffffc0c

080018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 80018fc:	edd7 7a00 	vldr	s15, [r7]
 8001900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001904:	eef4 7a47 	vcmp.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	d101      	bne.n	8001912 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 800190e:	2300      	movs	r3, #0
 8001910:	e033      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d204      	bcs.n	8001926 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d301      	bcc.n	800192a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 8001928:	e027      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	b29b      	uxth	r3, r3
 8001930:	82bb      	strh	r3, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	b29b      	uxth	r3, r3
 8001938:	82fb      	strh	r3, [r7, #22]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	b29b      	uxth	r3, r3
 8001946:	81bb      	strh	r3, [r7, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	b29b      	uxth	r3, r3
 800194e:	81fb      	strh	r3, [r7, #14]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4611      	mov	r1, r2
 8001960:	ed97 0a00 	vldr	s0, [r7]
 8001964:	4618      	mov	r0, r3
 8001966:	f011 fb52 	bl	801300e <arm_mat_scale_f32>
 800196a:	4603      	mov	r3, r0
 800196c:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	e000      	b.n	800197a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 8001978:	2300      	movs	r3, #0
    }
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	fffffc0c 	.word	0xfffffc0c

08001988 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e014      	b.n	80019c4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x3c>
            matrix->buffer[ix] -= subtraction;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edd7 7a00 	vldr	s15, [r7]
 80019b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ba:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6892      	ldr	r2, [r2, #8]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3e1      	bcc.n	800199a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x12>
        }
        return EIDSP_OK;
 80019d6:	2300      	movs	r3, #0
    }
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 80019e4:	b5b0      	push	{r4, r5, r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80019fa:	4c26      	ldr	r4, [pc, #152]	; (8001a94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 80019fc:	e045      	b.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        if (subtract_matrix->cols != 1) {
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001a06:	4c23      	ldr	r4, [pc, #140]	; (8001a94 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb0>)
 8001a08:	e03f      	b.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e036      	b.n	8001a7e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x9a>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689d      	ldr	r5, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	f107 0008 	add.w	r0, r7, #8
 8001a2a:	462a      	mov	r2, r5
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	f7ff fdaa 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5a>
 8001a38:	4c17      	ldr	r4, [pc, #92]	; (8001a98 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	e015      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff97 	bl	8001988 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 8001a5a:	61b8      	str	r0, [r7, #24]
            if (ret != EIDSP_OK) {
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x84>
                EIDSP_ERR(ret);
 8001a62:	69bc      	ldr	r4, [r7, #24]
 8001a64:	2500      	movs	r5, #0
 8001a66:	e000      	b.n	8001a6a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x86>
            }
        }
 8001a68:	2501      	movs	r5, #1
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fdb4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8001a74:	2d01      	cmp	r5, #1
 8001a76:	d108      	bne.n	8001a8a <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa6>
        for (size_t row = 0; row < matrix->rows; row++) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3c3      	bcc.n	8001a10 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2c>

        return EIDSP_OK;
 8001a88:	2400      	movs	r4, #0
    }
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bdb0      	pop	{r4, r5, r7, pc}
 8001a94:	fffffc14 	.word	0xfffffc14
 8001a98:	fffffc16 	.word	0xfffffc16

08001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ab4:	e028      	b.n	8001b08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001ac0:	e022      	b.n	8001b08 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	e019      	b.n	8001afc <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	18d0      	adds	r0, r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f107 0208 	add.w	r2, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f011 fb39 	bl	801315a <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3e0      	bcc.n	8001ac8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2c>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 8001b06:	2300      	movs	r3, #0
    }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	fffffc14 	.word	0xfffffc14

08001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b2c:	e028      	b.n	8001b80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 8001b38:	e022      	b.n	8001b80 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e019      	b.n	8001b74 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x60>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	18d0      	adds	r0, r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f107 0208 	add.w	r2, r7, #8
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f011 face 	bl	80130fc <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d3e0      	bcc.n	8001b40 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001b7e:	2300      	movs	r3, #0
    }
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	fffffc14 	.word	0xfffffc14

08001b8c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>:
    /**
     * Get the stdev value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int stdev(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001ba2:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001ba4:	e043      	b.n	8001c2e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }
        if (output_matrix->cols != 1) {
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xac>)
 8001bb0:	e03d      	b.n	8001c2e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0xa2>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	e034      	b.n	8001c22 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x96>
#if EIDSP_USE_CMSIS_DSP
            float std;
            float var;
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	69f9      	ldr	r1, [r7, #28]
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	18d0      	adds	r0, r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f107 020c 	add.w	r2, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f000 fc96 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001be2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	db09      	blt.n	8001c04 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x78>
      *pOut = sqrtf(in);
 8001bf0:	ed97 0a06 	vldr	s0, [r7, #24]
 8001bf4:	f018 fcd2 	bl	801a59c <sqrtf>
 8001bf8:	eef0 7a40 	vmov.f32	s15, s0
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001c02:	e004      	b.n	8001c0e <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x82>
      *pOut = 0.0f;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001c0c:	bf00      	nop
            output_matrix->buffer[row] = std;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3c5      	bcc.n	8001bb8 <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_+0x2c>

            output_matrix->buffer[row] = sqrt(std / input_matrix->cols);
#endif
        }

        return EIDSP_OK;
 8001c2c:	2300      	movs	r3, #0
    }
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	fffffc14 	.word	0xfffffc14

08001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    /**
     * Get the skewness value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c54:	e087      	b.n	8001d66 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }
        if (output_matrix->cols != 1) {
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d001      	beq.n	8001c62 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>)
 8001c60:	e081      	b.n	8001d66 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e078      	b.n	8001d5a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x11e>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate the mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	69f9      	ldr	r1, [r7, #28]
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	18d0      	adds	r0, r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f107 0210 	add.w	r2, r7, #16
 8001c82:	4619      	mov	r1, r3
 8001c84:	f011 fa3a 	bl	80130fc <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	69f9      	ldr	r1, [r7, #28]
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	18d0      	adds	r0, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f000 fc2e 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_3
            float m_3;
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	69f9      	ldr	r1, [r7, #28]
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	18d0      	adds	r0, r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc2:	f107 0208 	add.w	r2, r7, #8
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f000 fd18 	bl	8002700 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>

            // Calculate (variance)^(3/2)
            arm_sqrt_f32(var * var * var, &var);
 8001cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	edc7 7a06 	vstr	s15, [r7, #24]
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8001cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	db09      	blt.n	8001d10 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
      *pOut = sqrtf(in);
 8001cfc:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d00:	f018 fc4c 	bl	801a59c <sqrtf>
 8001d04:	eef0 7a40 	vmov.f32	s15, s0
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001d0e:	e004      	b.n	8001d1a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xde>
      *pOut = 0.0f;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d18:	bf00      	nop

            // Calculate skew = (m_3) / (variance)^(3/2)
            if (var == 0.0f) {
 8001d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	d108      	bne.n	8001d3a <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xfe>
                output_matrix->buffer[row] = 0.0f;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e00c      	b.n	8001d54 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x118>
            } else {
                output_matrix->buffer[row] = m_3 / var;
 8001d3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3301      	adds	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d381      	bcc.n	8001c68 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = m_3 / m_2;
            }
#endif
        }

        return EIDSP_OK;
 8001d64:	2300      	movs	r3, #0
    }
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	fffffc14 	.word	0xfffffc14

08001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    /**
     * Get the kurtosis value in a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d8c:	e06d      	b.n	8001e6a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }
        if (output_matrix->cols != 1) {
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x100>)
 8001d98:	e067      	b.n	8001e6a <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xf6>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e05e      	b.n	8001e5e <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xea>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            float var;

            // Calculate mean & variance
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	18d0      	adds	r0, r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f011 f99e 	bl	80130fc <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	6979      	ldr	r1, [r7, #20]
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	18d0      	adds	r0, r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f000 fb92 	bl	8002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>

            // Calculate m_4
            float m_4;
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	fb01 f303 	mul.w	r3, r1, r3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	18d0      	adds	r0, r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfa:	f107 0208 	add.w	r2, r7, #8
 8001dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001e02:	4619      	mov	r1, r3
 8001e04:	f000 fd37 	bl	8002876 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>

            // Calculate Fisher kurtosis = (m_4 / variance^2) - 3
            var = var * var;
 8001e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e14:	edc7 7a03 	vstr	s15, [r7, #12]
            if (var == 0.0f) {
 8001e18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d107      	bne.n	8001e36 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xc2>
                output_matrix->buffer[row] = -3.0f;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x104>)
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	e010      	b.n	8001e58 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xe4>
            } else {
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 8001e36:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e54:	edc3 7a00 	vstr	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d39b      	bcc.n	8001da0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x2c>
                output_matrix->buffer[row] = (m_4 / variance) - 3.0f;
            }
#endif
        }

        return EIDSP_OK;
 8001e68:	2300      	movs	r3, #0
    }
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	fffffc14 	.word	0xfffffc14
 8001e78:	c0400000 	.word	0xc0400000

08001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b098      	sub	sp, #96	; 0x60
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	3301      	adds	r3, #1
 8001e90:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001e9a:	4c65      	ldr	r4, [pc, #404]	; (8002030 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b4>)
 8001e9c:	e0c2      	b.n	8002024 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d901      	bls.n	8001eaa <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 8001ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea8:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001eaa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001eae:	2300      	movs	r3, #0
 8001eb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	f7ff fb67 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001ebe:	4c5d      	ldr	r4, [pc, #372]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001ec0:	e0ab      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        if (!fft_input.buffer) {
 8001ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ec8:	4c5a      	ldr	r4, [pc, #360]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001eca:	e0a6      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001ecc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	f01c fd56 	bl	801e986 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	18d0      	adds	r0, r2, r3
 8001ee2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	f01c fc69 	bl	801e7c4 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d025      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d022      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d01f      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d01b      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f12:	d017      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d013      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f22:	d00f      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
 8001f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2a:	d00b      	beq.n	8001f44 <_ZN2ei5numpy4rfftEPKfjPfjj+0xc8>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f000 fa4e 	bl	80023d4 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001f38:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d068      	beq.n	8002012 <_ZN2ei5numpy4rfftEPKfjPfjj+0x196>
                EIDSP_ERR(ret);
 8001f40:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001f42:	e06a      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd58 	bl	8002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8001f50:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (status != ARM_MATH_SUCCESS) {
 8001f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZN2ei5numpy4rfftEPKfjPfjj+0xe0>
                return status;
 8001f58:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8001f5a:	e05d      	b.n	8002018 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001f5c:	f107 0014 	add.w	r0, r7, #20
 8001f60:	2300      	movs	r3, #0
 8001f62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f64:	2101      	movs	r1, #1
 8001f66:	f7ff fb0e 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <_ZN2ei5numpy4rfftEPKfjPfjj+0xfa>
 8001f70:	4c30      	ldr	r4, [pc, #192]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f72:	2500      	movs	r5, #0
 8001f74:	e045      	b.n	8002002 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            if (!fft_output.buffer) {
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_ZN2ei5numpy4rfftEPKfjPfjj+0x106>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f7c:	4c2d      	ldr	r4, [pc, #180]	; (8002034 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1b8>)
 8001f7e:	2500      	movs	r5, #0
 8001f80:	e03f      	b.n	8002002 <_ZN2ei5numpy4rfftEPKfjPfjj+0x186>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f013 fc82 	bl	8015894 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f9c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8001fa0:	440b      	add	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	6852      	ldr	r2, [r2, #4]
 8001faa:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fb4:	e01f      	b.n	8001ff6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x17a>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f011 f8c8 	bl	801315a <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001fca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001fce:	f7ff fb2f 	bl	8001630 <_ZN2ei5numpy4sqrtEf>
 8001fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc3 7a00 	vstr	s15, [r3]

                fft_output_buffer_ix += 2;
 8001fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fec:	3302      	adds	r3, #2
 8001fee:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3da      	bcc.n	8001fb6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x13a>
            }
        }
 8002000:	2501      	movs	r5, #1
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fae8 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800200c:	2d01      	cmp	r5, #1
 800200e:	d103      	bne.n	8002018 <_ZN2ei5numpy4rfftEPKfjPfjj+0x19c>
 8002010:	e000      	b.n	8002014 <_ZN2ei5numpy4rfftEPKfjPfjj+0x198>
        }
 8002012:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8002014:	2400      	movs	r4, #0
 8002016:	e000      	b.n	800201a <_ZN2ei5numpy4rfftEPKfjPfjj+0x19e>
                return status;
 8002018:	bf00      	nop
    }
 800201a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fadc 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8002024:	4623      	mov	r3, r4
 8002026:	4618      	mov	r0, r3
 8002028:	3760      	adds	r7, #96	; 0x60
 800202a:	46bd      	mov	sp, r7
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	bf00      	nop
 8002030:	fffffc11 	.word	0xfffffc11
 8002034:	fffffc16 	.word	0xfffffc16

08002038 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b098      	sub	sp, #96	; 0x60
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8002046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3301      	adds	r3, #1
 800204c:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8002056:	4c6f      	ldr	r4, [pc, #444]	; (8002214 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1dc>)
 8002058:	e0d6      	b.n	8002208 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d0>
        }

        // truncate if needed
        if (src_size > n_fft) {
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205e:	429a      	cmp	r2, r3
 8002060:	d901      	bls.n	8002066 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 8002062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002064:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8002066:	2300      	movs	r3, #0
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8002076:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800207a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800207e:	2101      	movs	r1, #1
 8002080:	f7ff fa81 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8002084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 800208a:	4c63      	ldr	r4, [pc, #396]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 800208c:	e0b7      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        if (!fft_input.buffer) {
 800208e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002094:	4c60      	ldr	r4, [pc, #384]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002096:	e0b2      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
        }

        if (!fft_input_buffer) {
 8002098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d112      	bne.n	80020c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800209e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	f01c fc6d 	bl	801e986 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 80020ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	18d0      	adds	r0, r2, r3
 80020b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	461a      	mov	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f01c fb80 	bl	801e7c4 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 80020c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d025      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d022      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d01f      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020dc:	d01b      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d017      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ec:	d013      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f4:	d00f      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fc:	d00b      	beq.n	8002116 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xde>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80020fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	f000 f9d7 	bl	80024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 800210a:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 800210c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d071      	beq.n	80021f6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1be>
                EIDSP_ERR(ret);
 8002112:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002114:	e073      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            int status = cmsis_rfft_init_f32(&rfft_instance, n_fft);
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fc6f 	bl	8002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>
 8002122:	64b8      	str	r0, [r7, #72]	; 0x48
            if (status != ARM_MATH_SUCCESS) {
 8002124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xf6>
                return status;
 800212a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800212c:	e066      	b.n	80021fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 800212e:	f107 0010 	add.w	r0, r7, #16
 8002132:	2300      	movs	r3, #0
 8002134:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002136:	2101      	movs	r1, #1
 8002138:	f7ff fa25 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x110>
 8002142:	4c35      	ldr	r4, [pc, #212]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002144:	2500      	movs	r5, #0
 8002146:	e04e      	b.n	80021e6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            if (!fft_output.buffer) {
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800214e:	4c32      	ldr	r4, [pc, #200]	; (8002218 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e0>)
 8002150:	2500      	movs	r5, #0
 8002152:	e048      	b.n	80021e6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ae>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002154:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	f107 0020 	add.w	r0, r7, #32
 800215c:	2300      	movs	r3, #0
 800215e:	f013 fb99 	bl	8015894 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002176:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800217a:	440b      	add	r3, r1
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	440b      	add	r3, r1
 8002182:	6852      	ldr	r2, [r2, #4]
 8002184:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002188:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 800219a:	2302      	movs	r3, #2
 800219c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800219e:	2301      	movs	r3, #1
 80021a0:	657b      	str	r3, [r7, #84]	; 0x54
 80021a2:	e01a      	b.n	80021da <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1a2>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	441a      	add	r2, r3
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	440b      	add	r3, r1
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021bc:	3301      	adds	r3, #1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	441a      	add	r2, r3
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	440b      	add	r3, r1
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80021ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021d0:	3302      	adds	r3, #2
 80021d2:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80021d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d6:	3301      	adds	r3, #1
 80021d8:	657b      	str	r3, [r7, #84]	; 0x54
 80021da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021dc:	3b01      	subs	r3, #1
 80021de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3df      	bcc.n	80021a4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x16c>
            }
        }
 80021e4:	2501      	movs	r5, #1
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f9f6 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80021f0:	2d01      	cmp	r5, #1
 80021f2:	d103      	bne.n	80021fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c4>
 80021f4:	e000      	b.n	80021f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c0>
        }
 80021f6:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80021f8:	2400      	movs	r4, #0
 80021fa:	e000      	b.n	80021fe <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1c6>
                return status;
 80021fc:	bf00      	nop
    }
 80021fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f9ea 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8002208:	4623      	mov	r3, r4
 800220a:	4618      	mov	r0, r3
 800220c:	3760      	adds	r7, #96	; 0x60
 800220e:	46bd      	mov	sp, r7
 8002210:	bdb0      	pop	{r4, r5, r7, pc}
 8002212:	bf00      	nop
 8002214:	fffffc11 	.word	0xfffffc11
 8002218:	fffffc16 	.word	0xfffffc16

0800221c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	ed87 0a03 	vstr	s0, [r7, #12]
 8002226:	edc7 0a02 	vstr	s1, [r7, #8]
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 800223c:	e03f      	b.n	80022be <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d104      	bne.n	800224e <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e037      	b.n	80022be <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 800224e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002252:	edd7 7a03 	vldr	s15, [r7, #12]
 8002256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3b01      	subs	r3, #1
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226a:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e015      	b.n	80022a0 <_ZN2ei5numpy8linspaceEffmPf+0x84>
            out[ix] = start + ix * step;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3e4      	bcc.n	8002274 <_ZN2ei5numpy8linspaceEffmPf+0x58>
        }

        // last entry always stop
        out[number - 1] = stop;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80022bc:	2300      	movs	r3, #0
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	fffffc10 	.word	0xfffffc10

080022d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>:
    /**
     * Calculate the log10 of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log10(matrix_t *matrix)
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e062      	b.n	80023a4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xd4>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	188c      	adds	r4, r1, r2
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	617b      	str	r3, [r7, #20]
        float f = frexpf(fabsf(a), &e);
 80022fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fe:	eef0 7ae7 	vabs.f32	s15, s15
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4618      	mov	r0, r3
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	f018 f964 	bl	801a5d8 <frexpf>
 8002310:	ed87 0a04 	vstr	s0, [r7, #16]
        float y = 1.23149591368684f;
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf0>)
 8002316:	60fb      	str	r3, [r7, #12]
        y *= f;
 8002318:	ed97 7a03 	vldr	s14, [r7, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -4.11852516267426f;
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80023c4 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf4>
 8002330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002334:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002338:	ed97 7a03 	vldr	s14, [r7, #12]
 800233c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	edc7 7a03 	vstr	s15, [r7, #12]
        y += 6.02197014179219f;
 8002348:	edd7 7a03 	vldr	s15, [r7, #12]
 800234c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80023c8 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xf8>
 8002350:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002354:	edc7 7a03 	vstr	s15, [r7, #12]
        y *= f;
 8002358:	ed97 7a03 	vldr	s14, [r7, #12]
 800235c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	edc7 7a03 	vstr	s15, [r7, #12]
        y += -3.13396450166353f;
 8002368:	edd7 7a03 	vldr	s15, [r7, #12]
 800236c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80023cc <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xfc>
 8002370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002374:	edc7 7a03 	vstr	s15, [r7, #12]
        y += e;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002382:	ed97 7a03 	vldr	s14, [r7, #12]
 8002386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238a:	edc7 7a03 	vstr	s15, [r7, #12]
        return y;
 800238e:	edd7 7a03 	vldr	s15, [r7, #12]
        return numpy::log2(a) * 0.3010299956639812f;
 8002392:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80023d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0x100>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 800239a:	edc4 7a00 	vstr	s15, [r4]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6892      	ldr	r2, [r2, #8]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d393      	bcc.n	80022de <_ZN2ei5numpy5log10EPNS_9ei_matrixE+0xe>
        }

        return EIDSP_OK;
 80023b6:	2300      	movs	r3, #0
    }
 80023b8:	4618      	mov	r0, r3
 80023ba:	3724      	adds	r7, #36	; 0x24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	3f9da1a8 	.word	0x3f9da1a8
 80023c4:	4083caf5 	.word	0x4083caf5
 80023c8:	40c0b3fb 	.word	0x40c0b3fb
 80023cc:	404892e0 	.word	0x404892e0
 80023d0:	3e9a209b 	.word	0x3e9a209b

080023d4 <_ZN2ei5numpy13software_rfftEPfS1_jj>:
        }

        return EIDSP_OK;
    }

    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 80023d4:	b5b0      	push	{r4, r5, r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f014 ffce 	bl	8017388 <_Z9ei_mallocj>
 80023ec:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 80023f6:	e058      	b.n	80024aa <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	f014 fc13 	bl	8016c30 <kiss_fftr_alloc>
 800240a:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002412:	69b8      	ldr	r0, [r7, #24]
 8002414:	f014 ffd2 	bl	80173bc <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 800241a:	e046      	b.n	80024aa <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd6>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	68f9      	ldr	r1, [r7, #12]
 8002420:	6978      	ldr	r0, [r7, #20]
 8002422:	f014 fd29 	bl	8016e78 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e033      	b.n	8002494 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xc0>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	2002      	movs	r0, #2
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	f007 fc37 	bl	8009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002442:	ec55 4b10 	vmov	r4, r5, d0
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002452:	2002      	movs	r0, #2
 8002454:	eeb0 0a67 	vmov.f32	s0, s15
 8002458:	f007 fc2a 	bl	8009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800245c:	ec53 2b10 	vmov	r2, r3, d0
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fd ff42 	bl	80002ec <__adddf3>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f7fe fbea 	bl	8000c48 <__aeabi_d2f>
 8002474:	4601      	mov	r1, r0
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	18d4      	adds	r4, r2, r3
 800247e:	ee00 1a10 	vmov	s0, r1
 8002482:	f7ff f8d5 	bl	8001630 <_ZN2ei5numpy4sqrtEf>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	edc4 7a00 	vstr	s15, [r4]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3c7      	bcc.n	800242c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x58>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f014 ff8d 	bl	80173bc <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 80024a2:	69b8      	ldr	r0, [r7, #24]
 80024a4:	f014 ff8a 	bl	80173bc <_Z7ei_freePv>

        return EIDSP_OK;
 80024a8:	2300      	movs	r3, #0
    }
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bdb0      	pop	{r4, r5, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	fffffc16 	.word	0xfffffc16

080024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	f014 fbac 	bl	8016c30 <kiss_fftr_alloc>
 80024d8:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 80024e2:	e008      	b.n	80024f6 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f014 fcc5 	bl	8016e78 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f014 ff64 	bl	80173bc <_Z7ei_freePv>

        return EIDSP_OK;
 80024f4:	2300      	movs	r3, #0
    }
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	fffffc16 	.word	0xfffffc16

08002504 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 8002504:	b480      	push	{r7}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d804      	bhi.n	8002530 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
            return;
 800252e:	e0e2      	b.n	80026f6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002536:	e02e      	b.n	8002596 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x92>
            sum += *pInput++;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	61ba      	str	r2, [r7, #24]
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	ed97 7a08 	vldr	s14, [r7, #32]
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1d1a      	adds	r2, r3, #4
 8002552:	61ba      	str	r2, [r7, #24]
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ed97 7a08 	vldr	s14, [r7, #32]
 800255c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002560:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	61ba      	str	r2, [r7, #24]
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	61ba      	str	r2, [r7, #24]
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ed97 7a08 	vldr	s14, [r7, #32]
 8002588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800258c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1cd      	bne.n	8002538 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x34>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025a4:	e00d      	b.n	80025c2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xbe>
            sum += *pInput++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1d1a      	adds	r2, r3, #4
 80025aa:	61ba      	str	r2, [r7, #24]
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ee      	bne.n	80025a6 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa2>
        }

        fMean = sum / (float32_t)blockSize;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80025d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025da:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025e8:	e056      	b.n	8002698 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x194>
            fValue = *pInput++ - fMean;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	61ba      	str	r2, [r7, #24]
 80025f0:	ed93 7a00 	vldr	s14, [r3]
 80025f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002600:	edd7 7a04 	vldr	s15, [r7, #16]
 8002604:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002608:	ed97 7a07 	vldr	s14, [r7, #28]
 800260c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002610:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	61ba      	str	r2, [r7, #24]
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002626:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800262a:	edd7 7a04 	vldr	s15, [r7, #16]
 800262e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002632:	ed97 7a07 	vldr	s14, [r7, #28]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	61ba      	str	r2, [r7, #24]
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	edd7 7a05 	vldr	s15, [r7, #20]
 800264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002650:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002654:	edd7 7a04 	vldr	s15, [r7, #16]
 8002658:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800265c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a05 	vldr	s15, [r7, #20]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002686:	ed97 7a07 	vldr	s14, [r7, #28]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3b01      	subs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a5      	bne.n	80025ea <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe6>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80026a6:	e017      	b.n	80026d8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1d4>
            fValue = *pInput++ - fMean;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1d1a      	adds	r2, r3, #4
 80026ac:	61ba      	str	r2, [r7, #24]
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80026be:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3b01      	subs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e4      	bne.n	80026a8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a4>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80026ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edc3 7a00 	vstr	s15, [r3]
    }
 80026f6:	372c      	adds	r7, #44	; 0x2c
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before cubing
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	ed87 0a01 	vstr	s0, [r7, #4]
 800270e:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 800271c:	e06e      	b.n	80027fc <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0xfc>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1d1a      	adds	r2, r3, #4
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002728:	ed97 7a05 	vldr	s14, [r7, #20]
 800272c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002740:	edd7 7a05 	vldr	s15, [r7, #20]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	ed97 7a06 	vldr	s14, [r7, #24]
 800274c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002750:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	60fa      	str	r2, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
            in = in - mean;
 800275e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002762:	edd7 7a01 	vldr	s15, [r7, #4]
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 800276e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002772:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002776:	edd7 7a05 	vldr	s15, [r7, #20]
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1d1a      	adds	r2, r3, #4
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002794:	ed97 7a05 	vldr	s14, [r7, #20]
 8002798:	edd7 7a01 	vldr	s15, [r7, #4]
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027bc:	edc7 7a06 	vstr	s15, [r7, #24]

            in = *pSrc++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1d1a      	adds	r2, r3, #4
 80027c4:	60fa      	str	r2, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
            in = in - mean;
 80027ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 80027da:	edd7 7a05 	vldr	s15, [r7, #20]
 80027de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d18d      	bne.n	800271e <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	61fb      	str	r3, [r7, #28]

        while (blkCnt > 0U) {
 800280a:	e01d      	b.n	8002848 <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x148>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1d1a      	adds	r2, r3, #4
 8002810:	60fa      	str	r2, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	617b      	str	r3, [r7, #20]
            in = in - mean;
 8002816:	ed97 7a05 	vldr	s14, [r7, #20]
 800281a:	edd7 7a01 	vldr	s15, [r7, #4]
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += in * in * in;
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800282e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002836:	ed97 7a06 	vldr	s14, [r7, #24]
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	edc7 7a06 	vstr	s15, [r7, #24]

            /* Decrement loop counter */
            blkCnt--;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b01      	subs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
        while (blkCnt > 0U) {
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1de      	bne.n	800280c <_ZN2ei5numpy22cmsis_arm_third_momentEPKfmfPf+0x10c>
        }

        sum = sum / blockSize;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002858:	edd7 6a06 	vldr	s13, [r7, #24]
 800285c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002860:	edc7 7a06 	vstr	s15, [r7, #24]
        /* Store result to destination */
        *pResult = sum;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	601a      	str	r2, [r3, #0]
    }
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf>:
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param[in]  mean       The mean to subtract from each value before calculating fourth power
     * @param      pResult    The fourth central moment of the input
     */
    static void cmsis_arm_fourth_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
 8002876:	b480      	push	{r7}
 8002878:	b08b      	sub	sp, #44	; 0x2c
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	ed87 0a01 	vstr	s0, [r7, #4]
 8002884:	603a      	str	r2, [r7, #0]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002892:	e076      	b.n	8002982 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x10c>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	60fa      	str	r2, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800289e:	ed97 7a07 	vldr	s14, [r7, #28]
 80028a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028aa:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80028ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80028b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028b6:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80028be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80028c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ca:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1d1a      	adds	r2, r3, #4
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 80028d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e4:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f0:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 80028f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	60fa      	str	r2, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 8002912:	ed97 7a07 	vldr	s14, [r7, #28]
 8002916:	edd7 7a01 	vldr	s15, [r7, #4]
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 8002922:	edd7 7a07 	vldr	s15, [r7, #28]
 8002926:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800292a:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 800292e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002932:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002936:	ed97 7a08 	vldr	s14, [r7, #32]
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a08 	vstr	s15, [r7, #32]

            in = *pSrc++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1d1a      	adds	r2, r3, #4
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800294c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002950:	edd7 7a01 	vldr	s15, [r7, #4]
 8002954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002958:	edc7 7a07 	vstr	s15, [r7, #28]
            square = in * in;
 800295c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002964:	edc7 7a05 	vstr	s15, [r7, #20]
            sum += square * square;
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002970:	ed97 7a08 	vldr	s14, [r7, #32]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	3b01      	subs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	2b00      	cmp	r3, #0
 8002986:	d185      	bne.n	8002894 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x1e>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002990:	e01f      	b.n	80029d2 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x15c>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1d1a      	adds	r2, r3, #4
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61fb      	str	r3, [r7, #28]
            in = in - mean;
 800299c:	ed97 7a07 	vldr	s14, [r7, #28]
 80029a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	edc7 7a07 	vstr	s15, [r7, #28]
            float square;
            square = in * in;
 80029ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029b4:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += square * square;
 80029b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	edc7 7a08 	vstr	s15, [r7, #32]

            /* Decrement loop counter */
            blkCnt--;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3b01      	subs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1dc      	bne.n	8002992 <_ZN2ei5numpy23cmsis_arm_fourth_momentEPKfmfPf+0x11c>
        }

        sum = sum / blockSize;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029e2:	edd7 6a08 	vldr	s13, [r7, #32]
 80029e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ea:	edc7 7a08 	vstr	s15, [r7, #32]
        /* Store result to destination */
        *pResult = sum;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	601a      	str	r2, [r3, #0]
    }
 80029f4:	bf00      	nop
 80029f6:	372c      	adds	r7, #44	; 0x2c
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j>:
    /**
     * Initialize a CMSIS-DSP fast rfft structure
     * We do it this way as this means we can compile out fast_init calls which hints the compiler
     * to which tables can be removed
     */
    static int cmsis_rfft_init_f32(arm_rfft_fast_instance_f32 *rfft_instance, const size_t n_fft)
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    {
// ARM cores (ex M55) with Helium extensions (MVEF) need special treatment (Issue 2843)
#if EI_CLASSIFIER_HAS_FFT_INFO == 1 && !defined(ARM_MATH_MVEF) && !defined(EI_CLASSIFIER_LOAD_ALL_FFTS)
        arm_status status;
        switch (n_fft) {
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d11f      	bne.n	8002a50 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x50>
                break;
            }
#endif
#if EI_CLASSIFIER_LOAD_FFT_64 == 1
            case 64: {
                arm_cfft_instance_f32 *S = &(rfft_instance->Sint);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
                S->fftLen = 32U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	801a      	strh	r2, [r3, #0]
                S->pTwiddle = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
                S->bitRevLength = arm_cfft_sR_f32_len32.bitRevLength;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a22:	899a      	ldrh	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	819a      	strh	r2, [r3, #12]
                S->pBitRevTable = arm_cfft_sR_f32_len32.pBitRevTable;
 8002a28:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
                S->pTwiddle = arm_cfft_sR_f32_len32.pTwiddle;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x60>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	605a      	str	r2, [r3, #4]
                rfft_instance->fftLenRFFT = 64U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	821a      	strh	r2, [r3, #16]
                rfft_instance->pTwiddleRFFT = (float32_t *) twiddleCoef_rfft_64;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x64>)
 8002a42:	615a      	str	r2, [r3, #20]
                status = ARM_MATH_SUCCESS;
 8002a44:	2300      	movs	r3, #0
 8002a46:	72fb      	strb	r3, [r7, #11]
                break;
 8002a48:	bf00      	nop
#endif
            default:
                return EIDSP_FFT_TABLE_NOT_LOADED;
        }

        return status;
 8002a4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a4e:	e000      	b.n	8002a52 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x52>
                return EIDSP_FFT_TABLE_NOT_LOADED;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <_ZN2ei5numpy19cmsis_rfft_init_f32EP26arm_rfft_fast_instance_f32j+0x68>)
#else
        return arm_rfft_fast_init_f32(rfft_instance, n_fft);
#endif
    }
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	08024778 	.word	0x08024778
 8002a64:	08024678 	.word	0x08024678
 8002a68:	fffffc08 	.word	0xfffffc08

08002a6c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 8002a7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	461a      	mov	r2, r3
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d001      	beq.n	8002a8e <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xcc>)
 8002a8c:	e050      	b.n	8002b30 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 8002a8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7ff f9ef 	bl	8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>
 8002a9e:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x3e>
            return r;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	e042      	b.n	8002b30 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xc4>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e03a      	b.n	8002b26 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xba>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002ab0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ab2:	ee07 3a90 	vmov	s15, r3
 8002ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aba:	ee17 0a90 	vmov	r0, s15
 8002abe:	f7fd fd73 	bl	80005a8 <__aeabi_f2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	f04f 0000 	mov.w	r0, #0
 8002aca:	491c      	ldr	r1, [pc, #112]	; (8002b3c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0xd0>)
 8002acc:	f7fd feee 	bl	80008ac <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4614      	mov	r4, r2
 8002ad6:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd56 	bl	80005a8 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fda8 	bl	8000658 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	18d4      	adds	r4, r2, r3
 8002b18:	f7fe f896 	bl	8000c48 <__aeabi_d2f>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3c0      	bcc.n	8002ab0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x44>
        }

        return EIDSP_OK;
 8002b2e:	2300      	movs	r3, #0
    }
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	fffffc14 	.word	0xfffffc14
 8002b3c:	3ff00000 	.word	0x3ff00000

08002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:

    static int welch_max_hold(
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b093      	sub	sp, #76	; 0x4c
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
        size_t stop_bin,
        size_t fft_points,
        bool do_overlap)
    {
        // save off one point to put back, b/c we're going to calculate in place
        float saved_point = 0;
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        bool do_saved_point = false;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        size_t fft_out_size = fft_points / 2 + 1;
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3301      	adds	r3, #1
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
        float *fft_out;
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x160>)
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	f107 0218 	add.w	r2, r7, #24
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f007 f8cf 	bl	8009d14 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>
        if (input_size < fft_points) {
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20b      	bcs.n	8002b96 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x56>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 8002b7e:	2104      	movs	r1, #4
 8002b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b82:	f014 fc0d 	bl	80173a0 <_Z9ei_callocjj>
 8002b86:	6378      	str	r0, [r7, #52]	; 0x34
            p_fft_out.reset(fft_out);
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f007 f8f6 	bl	8009d80 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>
 8002b94:	e00b      	b.n	8002bae <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x6e>
        }
        else {
            // set input as output for in place operation
            fft_out = input;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
            // save off one point to put back, b/c we're going to calculate in place
            saved_point = input[fft_points / 2];
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
            do_saved_point = true;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        // init the output to zeros
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 8002bae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2100      	movs	r1, #0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f01b fe02 	bl	801e7c4 <memset>
        int input_ix = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002bc4:	e05d      	b.n	8002c82 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            // Figure out if we need any zero padding
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bca:	4413      	add	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d203      	bcs.n	8002bda <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9a>
                                                                        : input_size - input_ix;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	e000      	b.n	8002bdc <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x9c>
 8002bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bdc:	623b      	str	r3, [r7, #32]
            EI_TRY(power_spectrum(
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	18d0      	adds	r0, r2, r3
 8002be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be8:	085b      	lsrs	r3, r3, #1
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	6a39      	ldr	r1, [r7, #32]
 8002bf8:	f7ff ff38 	bl	8002a6c <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 8002bfc:	61f8      	str	r0, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xc8>
 8002c04:	69fc      	ldr	r4, [r7, #28]
 8002c06:	e041      	b.n	8002c8c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x14c>
                input + input_ix,
                n_input_points,
                fft_out,
                fft_points / 2 + 1,
                fft_points));
            int j = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            // keep the max of the last frame and everything before
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c10:	e017      	b.n	8002c42 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x102>
                output[j] = std::max(output[j], fft_out[i]);
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	18d0      	adds	r0, r2, r3
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c20:	4413      	add	r3, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f007 f8c0 	bl	8009da8 <_ZSt3maxIfERKT_S2_S2_>
 8002c28:	4601      	mov	r1, r0
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	680a      	ldr	r2, [r1, #0]
 8002c34:	601a      	str	r2, [r3, #0]
                j++;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	3301      	adds	r3, #1
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (size_t i = start_bin; i < stop_bin; i++) {
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	3301      	adds	r3, #1
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3e3      	bcc.n	8002c12 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd2>
            }
            if (do_overlap) {
 8002c4a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x13a>
                if (do_saved_point) {
 8002c52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x12e>
                    // This step only matters first time through
                    input[fft_points / 2] = saved_point;
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c66:	601a      	str	r2, [r3, #0]
                    do_saved_point = false;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                }
                input_ix += fft_points / 2;
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	085a      	lsrs	r2, r3, #1
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	4413      	add	r3, r2
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
 8002c78:	e003      	b.n	8002c82 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x142>
            }
            else {
                input_ix += fft_points;
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7e:	4413      	add	r3, r2
 8002c80:	633b      	str	r3, [r7, #48]	; 0x30
        while (input_ix < (int)input_size) {
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	429a      	cmp	r2, r3
 8002c88:	db9d      	blt.n	8002bc6 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x86>
            }
        }

        return EIDSP_OK;
 8002c8a:	2400      	movs	r4, #0
    }
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4618      	mov	r0, r3
 8002c92:	f007 f854 	bl	8009d3e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 8002c96:	4623      	mov	r3, r4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3744      	adds	r7, #68	; 0x44
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	080173bd 	.word	0x080173bd

08002ca4 <_ZN2ei5numpy8varianceEPfj>:

    static float variance(float *input, size_t size)
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
    {
        // Use CMSIS either way.  Will fall back to straight C when needed
        float temp;
#if EIDSP_USE_CMSIS_DSP
        arm_var_f32(input, size, &temp);
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f010 fa97 	bl	80131ea <arm_var_f32>
        for (size_t i = 0; i < size; i++) {
            temp += (input[i] - mean) * (input[i] - mean);
        }
        temp /= (size - 1);
#endif
        return temp;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	ee07 3a90 	vmov	s15, r3
    }
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_ZN2ei5numpy13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size)
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e013      	b.n	8002d04 <_ZN2ei5numpy13zero_handlingEPfj+0x38>
            if (input[ix] == 0) {
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d105      	bne.n	8002cfe <_ZN2ei5numpy13zero_handlingEPfj+0x32>
                input[ix] = 1e-10;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <_ZN2ei5numpy13zero_handlingEPfj+0x50>)
 8002cfc:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3301      	adds	r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3e7      	bcc.n	8002cdc <_ZN2ei5numpy13zero_handlingEPfj+0x10>
            }
        }
    }
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2edbe6ff 	.word	0x2edbe6ff

08002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>:
     * @param input Array
     * @param input_size Size of array
     * @param epsilon Smallest valid non-zero value
     * @returns void
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e021      	b.n	8002d78 <_ZN2ei5numpy18underflow_handlingEPfjf+0x58>
            if (fabs(input[ix]) < epsilon) {
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eeb0 0a67 	vmov.f32	s0, s15
 8002d44:	f7fe f9f4 	bl	8001130 <_ZSt4fabsf>
 8002d48:	eeb0 7a40 	vmov.f32	s14, s0
 8002d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	bfcc      	ite	gt
 8002d5a:	2301      	movgt	r3, #1
 8002d5c:	2300      	movle	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d006      	beq.n	8002d72 <_ZN2ei5numpy18underflow_handlingEPfjf+0x52>
                input[ix] = 0.0f;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3d9      	bcc.n	8002d34 <_ZN2ei5numpy18underflow_handlingEPfjf+0x14>
            }
        }
    }
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>:
typedef DspHandle* _dsp_handle_ptr_t;
public:
    const ei_impulse_t *impulse; // keep a pointer to the impulse
    _dsp_handle_ptr_t *dsp_handles;
    bool is_temp_handle = false; // to know if we're using the old (stateless) API
    ei_impulse_state_t(const ei_impulse_t *impulse)
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
        : impulse(impulse)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	721a      	strb	r2, [r3, #8]
    {
        const auto num_dsp_blocks = impulse->dsp_blocks_size;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	60bb      	str	r3, [r7, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f014 faec 	bl	8017388 <_Z9ei_mallocj>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e009      	b.n	8002dd0 <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x46>
            dsp_handles[ix] = nullptr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
        for(size_t ix = 0; ix < num_dsp_blocks; ix++) {
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d3f1      	bcc.n	8002dbc <_ZN18ei_impulse_state_tC1EPK10ei_impulse+0x32>
        }
    }
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>:

    DspHandle* get_dsp_handle(size_t ix) {
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
        if (dsp_handles[ix] == nullptr) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d115      	bne.n	8002e28 <_ZN18ei_impulse_state_t14get_dsp_handleEj+0x46>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	4413      	add	r3, r2
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	0152      	lsls	r2, r2, #5
 8002e14:	440a      	add	r2, r1
 8002e16:	68d0      	ldr	r0, [r2, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6851      	ldr	r1, [r2, #4]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	188c      	adds	r4, r1, r2
 8002e22:	4798      	blx	r3
 8002e24:	4603      	mov	r3, r0
 8002e26:	6023      	str	r3, [r4, #0]
        }
        return dsp_handles[ix];
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
    }
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}

08002e3c <_ZN18ei_impulse_state_t5resetEv>:

    void reset()
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
    {
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e01e      	b.n	8002e88 <_ZN18ei_impulse_state_t5resetEv+0x4c>
            if (dsp_handles[ix] != nullptr) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d013      	beq.n	8002e82 <_ZN18ei_impulse_state_t5resetEv+0x46>
                delete dsp_handles[ix];
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <_ZN18ei_impulse_state_t5resetEv+0x38>
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	320c      	adds	r2, #12
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	4790      	blx	r2
                dsp_handles[ix] = nullptr;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3da      	bcc.n	8002e4a <_ZN18ei_impulse_state_t5resetEv+0xe>
            }
        }
    }
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZN18ei_impulse_state_tD1Ev>:

    void operator delete[](void* ptr) {
        ei_free(ptr);
    }

    ~ei_impulse_state_t()
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    {
        reset();
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffc8 	bl	8002e3c <_ZN18ei_impulse_state_t5resetEv>
        ei_free(dsp_handles);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f014 fa83 	bl	80173bc <_Z7ei_freePv>
    }
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>:
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
        : state(impulse), impulse(impulse) {};
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6839      	ldr	r1, [r7, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff5b 	bl	8002d8a <_ZN18ei_impulse_state_tC1EPK10ei_impulse>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	0000      	movs	r0, r0
	...

08002ee8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	b095      	sub	sp, #84	; 0x54
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6178      	str	r0, [r7, #20]
 8002ef2:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ef6:	edc7 0a03 	vstr	s1, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	da00      	bge.n	8002f08 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x20>
 8002f06:	3301      	adds	r3, #1
 8002f08:	105b      	asrs	r3, r3, #1
 8002f0a:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7fd fb4b 	bl	80005a8 <__aeabi_f2d>
 8002f12:	a3a9      	add	r3, pc, #676	; (adr r3, 80031b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb9e 	bl	8000658 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4690      	mov	r8, r2
 8002f22:	4699      	mov	r9, r3
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f7fd fb3f 	bl	80005a8 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4640      	mov	r0, r8
 8002f30:	4649      	mov	r1, r9
 8002f32:	f7fd fcbb 	bl	80008ac <__aeabi_ddiv>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	ec43 2b17 	vmov	d7, r2, r3
 8002f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f42:	eef0 0a67 	vmov.f32	s1, s15
 8002f46:	f017 fa63 	bl	801a410 <tan>
 8002f4a:	ec53 2b10 	vmov	r2, r3, d0
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe79 	bl	8000c48 <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002f60:	f006 fea6 	bl	8009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002f64:	ec53 2b10 	vmov	r2, r3, d0
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe6c 	bl	8000c48 <__aeabi_d2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8002f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f76:	2104      	movs	r1, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f014 fa11 	bl	80173a0 <_Z9ei_callocjj>
 8002f7e:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f82:	2104      	movs	r1, #4
 8002f84:	4618      	mov	r0, r3
 8002f86:	f014 fa0b 	bl	80173a0 <_Z9ei_callocjj>
 8002f8a:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8e:	2104      	movs	r1, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f014 fa05 	bl	80173a0 <_Z9ei_callocjj>
 8002f96:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8002f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f014 f9ff 	bl	80173a0 <_Z9ei_callocjj>
 8002fa2:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f014 f9f9 	bl	80173a0 <_Z9ei_callocjj>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8002fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb2:	2104      	movs	r1, #4
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f014 f9f3 	bl	80173a0 <_Z9ei_callocjj>
 8002fba:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc0:	e0e3      	b.n	800318a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8002fc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fc4:	f7fd fade 	bl	8000584 <__aeabi_i2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	f7fd f98e 	bl	80002ec <__adddf3>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8002fde:	f7fd f985 	bl	80002ec <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	a373      	add	r3, pc, #460	; (adr r3, 80031b8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fb32 	bl	8000658 <__aeabi_dmul>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4690      	mov	r8, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	6978      	ldr	r0, [r7, #20]
 8002ffe:	f7fd fac1 	bl	8000584 <__aeabi_i2d>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	f7fd f971 	bl	80002ec <__adddf3>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4640      	mov	r0, r8
 8003010:	4649      	mov	r1, r9
 8003012:	f7fd fc4b 	bl	80008ac <__aeabi_ddiv>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	ec43 2b17 	vmov	d7, r2, r3
 800301e:	eeb0 0a47 	vmov.f32	s0, s14
 8003022:	eef0 0a67 	vmov.f32	s1, s15
 8003026:	f017 f99b 	bl	801a360 <sin>
 800302a:	ec53 2b10 	vmov	r2, r3, d0
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fe09 	bl	8000c48 <__aeabi_d2f>
 8003036:	4603      	mov	r3, r0
 8003038:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800303a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800303c:	f7fd fab4 	bl	80005a8 <__aeabi_f2d>
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003046:	f7fd faaf 	bl	80005a8 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	f7fd f94d 	bl	80002ec <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4692      	mov	sl, r2
 8003058:	469b      	mov	fp, r3
 800305a:	69f8      	ldr	r0, [r7, #28]
 800305c:	f7fd faa4 	bl	80005a8 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4650      	mov	r0, sl
 8003066:	4659      	mov	r1, fp
 8003068:	f7fd faf6 	bl	8000658 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4640      	mov	r0, r8
 8003072:	4649      	mov	r1, r9
 8003074:	f7fd f93a 	bl	80002ec <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 8003086:	f7fd f931 	bl	80002ec <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fdd9 	bl	8000c48 <__aeabi_d2f>
 8003096:	4603      	mov	r3, r0
 8003098:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 800309a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a0:	4413      	add	r3, r2
 80030a2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80030a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80030aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ae:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80030b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030b6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	ee17 0a90 	vmov	r0, s15
 80030c2:	f7fd fa71 	bl	80005a8 <__aeabi_f2d>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	f7fd f90f 	bl	80002ec <__adddf3>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4690      	mov	r8, r2
 80030d4:	4699      	mov	r9, r3
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f7fd fa66 	bl	80005a8 <__aeabi_f2d>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4640      	mov	r0, r8
 80030e2:	4649      	mov	r1, r9
 80030e4:	f7fd fbe2 	bl	80008ac <__aeabi_ddiv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	18d6      	adds	r6, r2, r3
 80030f8:	f7fd fda6 	bl	8000c48 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003102:	f7fd fa51 	bl	80005a8 <__aeabi_f2d>
 8003106:	4680      	mov	r8, r0
 8003108:	4689      	mov	r9, r1
 800310a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800310c:	f7fd fa4c 	bl	80005a8 <__aeabi_f2d>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	f7fd f8ea 	bl	80002ec <__adddf3>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4692      	mov	sl, r2
 800311e:	469b      	mov	fp, r3
 8003120:	69f8      	ldr	r0, [r7, #28]
 8003122:	f7fd fa41 	bl	80005a8 <__aeabi_f2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4650      	mov	r0, sl
 800312c:	4659      	mov	r1, fp
 800312e:	f7fd fa93 	bl	8000658 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	f7fd f8d5 	bl	80002e8 <__aeabi_dsub>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d8>)
 800314c:	f7fd f8ce 	bl	80002ec <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4614      	mov	r4, r2
 8003156:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800315a:	6938      	ldr	r0, [r7, #16]
 800315c:	f7fd fa24 	bl	80005a8 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd fba0 	bl	80008ac <__aeabi_ddiv>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317a:	18d6      	adds	r6, r2, r3
 800317c:	f7fd fd64 	bl	8000c48 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003186:	3301      	adds	r3, #1
 8003188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	429a      	cmp	r2, r3
 8003190:	f6ff af17 	blt.w	8002fc2 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8003194:	2300      	movs	r3, #0
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
 8003198:	e0a9      	b.n	80032ee <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	441a      	add	r2, r3
 80031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	440b      	add	r3, r1
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80031ae:	2300      	movs	r3, #0
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	e094      	b.n	80032de <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
 80031b4:	f3af 8000 	nop.w
 80031b8:	54442d18 	.word	0x54442d18
 80031bc:	400921fb 	.word	0x400921fb
 80031c0:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80031c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	4413      	add	r3, r2
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	4413      	add	r3, r2
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e6:	4413      	add	r3, r2
 80031e8:	edd3 6a00 	vldr	s13, [r3]
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	4413      	add	r3, r2
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003212:	4413      	add	r3, r2
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 800321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003222:	4413      	add	r3, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f9be 	bl	80005a8 <__aeabi_f2d>
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003236:	4413      	add	r3, r2
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9b4 	bl	80005a8 <__aeabi_f2d>
 8003240:	4680      	mov	r8, r0
 8003242:	4689      	mov	r9, r1
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	4413      	add	r3, r2
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f9aa 	bl	80005a8 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	f7fd f848 	bl	80002ec <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f7fd f842 	bl	80002ec <__adddf3>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4690      	mov	r8, r2
 800326e:	4699      	mov	r9, r3
 8003270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	4413      	add	r3, r2
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f994 	bl	80005a8 <__aeabi_f2d>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	f7fd f830 	bl	80002ec <__adddf3>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4620      	mov	r0, r4
 8003292:	4629      	mov	r1, r5
 8003294:	f7fd f9e0 	bl	8000658 <__aeabi_dmul>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	18d4      	adds	r4, r2, r3
 80032a8:	f7fd fcce 	bl	8000c48 <__aeabi_d2f>
 80032ac:	4603      	mov	r3, r0
 80032ae:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80032b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	441a      	add	r2, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	6a39      	ldr	r1, [r7, #32]
 80032be:	440b      	add	r3, r1
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ca:	441a      	add	r2, r3
 80032cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032d2:	440b      	add	r3, r1
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 80032d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032da:	3301      	adds	r3, #1
 80032dc:	647b      	str	r3, [r7, #68]	; 0x44
 80032de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f6ff af6e 	blt.w	80031c4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 80032e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ea:	3301      	adds	r3, #1
 80032ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f4ff af51 	bcc.w	800319a <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 80032f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032fa:	f014 f85f 	bl	80173bc <_Z7ei_freePv>
        ei_free(d1);
 80032fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003300:	f014 f85c 	bl	80173bc <_Z7ei_freePv>
        ei_free(d2);
 8003304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003306:	f014 f859 	bl	80173bc <_Z7ei_freePv>
        ei_free(w0);
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f014 f856 	bl	80173bc <_Z7ei_freePv>
        ei_free(w1);
 8003310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003312:	f014 f853 	bl	80173bc <_Z7ei_freePv>
        ei_free(w2);
 8003316:	6a38      	ldr	r0, [r7, #32]
 8003318:	f014 f850 	bl	80173bc <_Z7ei_freePv>
    }
 800331c:	bf00      	nop
 800331e:	3754      	adds	r7, #84	; 0x54
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop

08003328 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	b095      	sub	sp, #84	; 0x54
 800332e:	af00      	add	r7, sp, #0
 8003330:	6178      	str	r0, [r7, #20]
 8003332:	ed87 0a04 	vstr	s0, [r7, #16]
 8003336:	edc7 0a03 	vstr	s1, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da00      	bge.n	8003348 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x20>
 8003346:	3301      	adds	r3, #1
 8003348:	105b      	asrs	r3, r3, #1
 800334a:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7fd f92b 	bl	80005a8 <__aeabi_f2d>
 8003352:	a3a9      	add	r3, pc, #676	; (adr r3, 80035f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f97e 	bl	8000658 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4690      	mov	r8, r2
 8003362:	4699      	mov	r9, r3
 8003364:	6938      	ldr	r0, [r7, #16]
 8003366:	f7fd f91f 	bl	80005a8 <__aeabi_f2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4640      	mov	r0, r8
 8003370:	4649      	mov	r1, r9
 8003372:	f7fd fa9b 	bl	80008ac <__aeabi_ddiv>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	ec43 2b17 	vmov	d7, r2, r3
 800337e:	eeb0 0a47 	vmov.f32	s0, s14
 8003382:	eef0 0a67 	vmov.f32	s1, s15
 8003386:	f017 f843 	bl	801a410 <tan>
 800338a:	ec53 2b10 	vmov	r2, r3, d0
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7fd fc59 	bl	8000c48 <__aeabi_d2f>
 8003396:	4603      	mov	r3, r0
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 800339a:	2002      	movs	r0, #2
 800339c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80033a0:	f006 fc86 	bl	8009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80033a4:	ec53 2b10 	vmov	r2, r3, d0
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fc4c 	bl	8000c48 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	2104      	movs	r1, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f013 fff1 	bl	80173a0 <_Z9ei_callocjj>
 80033be:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c2:	2104      	movs	r1, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f013 ffeb 	bl	80173a0 <_Z9ei_callocjj>
 80033ca:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ce:	2104      	movs	r1, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f013 ffe5 	bl	80173a0 <_Z9ei_callocjj>
 80033d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	2104      	movs	r1, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f013 ffdf 	bl	80173a0 <_Z9ei_callocjj>
 80033e2:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80033e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e6:	2104      	movs	r1, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f013 ffd9 	bl	80173a0 <_Z9ei_callocjj>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	2104      	movs	r1, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f013 ffd3 	bl	80173a0 <_Z9ei_callocjj>
 80033fa:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80033fc:	2300      	movs	r3, #0
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	e0e3      	b.n	80035ca <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2a2>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8003402:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003404:	f7fd f8be 	bl	8000584 <__aeabi_i2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	f7fc ff6e 	bl	80002ec <__adddf3>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800341e:	f7fc ff65 	bl	80002ec <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	a373      	add	r3, pc, #460	; (adr r3, 80035f8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd f912 	bl	8000658 <__aeabi_dmul>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	6978      	ldr	r0, [r7, #20]
 800343e:	f7fd f8a1 	bl	8000584 <__aeabi_i2d>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	f7fc ff51 	bl	80002ec <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fd fa2b 	bl	80008ac <__aeabi_ddiv>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	ec43 2b17 	vmov	d7, r2, r3
 800345e:	eeb0 0a47 	vmov.f32	s0, s14
 8003462:	eef0 0a67 	vmov.f32	s1, s15
 8003466:	f016 ff7b 	bl	801a360 <sin>
 800346a:	ec53 2b10 	vmov	r2, r3, d0
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	f7fd fbe9 	bl	8000c48 <__aeabi_d2f>
 8003476:	4603      	mov	r3, r0
 8003478:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 800347a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800347c:	f7fd f894 	bl	80005a8 <__aeabi_f2d>
 8003480:	4680      	mov	r8, r0
 8003482:	4689      	mov	r9, r1
 8003484:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003486:	f7fd f88f 	bl	80005a8 <__aeabi_f2d>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	f7fc ff2d 	bl	80002ec <__adddf3>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4692      	mov	sl, r2
 8003498:	469b      	mov	fp, r3
 800349a:	69f8      	ldr	r0, [r7, #28]
 800349c:	f7fd f884 	bl	80005a8 <__aeabi_f2d>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4650      	mov	r0, sl
 80034a6:	4659      	mov	r1, fp
 80034a8:	f7fd f8d6 	bl	8000658 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4640      	mov	r0, r8
 80034b2:	4649      	mov	r1, r9
 80034b4:	f7fc ff1a 	bl	80002ec <__adddf3>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 80034c6:	f7fc ff11 	bl	80002ec <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f7fd fbb9 	bl	8000c48 <__aeabi_d2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e0:	4413      	add	r3, r2
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ee:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80034f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f851 	bl	80005a8 <__aeabi_f2d>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	f7fc feef 	bl	80002ec <__adddf3>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	6938      	ldr	r0, [r7, #16]
 8003518:	f7fd f846 	bl	80005a8 <__aeabi_f2d>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fd f9c2 	bl	80008ac <__aeabi_ddiv>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	18d6      	adds	r6, r2, r3
 8003538:	f7fd fb86 	bl	8000c48 <__aeabi_d2f>
 800353c:	4603      	mov	r3, r0
 800353e:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8003540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003542:	f7fd f831 	bl	80005a8 <__aeabi_f2d>
 8003546:	4680      	mov	r8, r0
 8003548:	4689      	mov	r9, r1
 800354a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800354c:	f7fd f82c 	bl	80005a8 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	f7fc feca 	bl	80002ec <__adddf3>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4692      	mov	sl, r2
 800355e:	469b      	mov	fp, r3
 8003560:	69f8      	ldr	r0, [r7, #28]
 8003562:	f7fd f821 	bl	80005a8 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4650      	mov	r0, sl
 800356c:	4659      	mov	r1, fp
 800356e:	f7fd f873 	bl	8000658 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fc feb5 	bl	80002e8 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d8>)
 800358c:	f7fc feae 	bl	80002ec <__adddf3>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f7fd f804 	bl	80005a8 <__aeabi_f2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fd f980 	bl	80008ac <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ba:	18d6      	adds	r6, r2, r3
 80035bc:	f7fd fb44 	bl	8000c48 <__aeabi_d2f>
 80035c0:	4603      	mov	r3, r0
 80035c2:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80035c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c6:	3301      	adds	r3, #1
 80035c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f6ff af17 	blt.w	8003402 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xda>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80035d4:	2300      	movs	r3, #0
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80035d8:	e0a9      	b.n	800372e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x406>
            dest[sx] = src[sx];
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	441a      	add	r2, r3
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	440b      	add	r3, r1
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80035ee:	2300      	movs	r3, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	e094      	b.n	800371e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
 80035f4:	f3af 8000 	nop.w
 80035f8:	54442d18 	.word	0x54442d18
 80035fc:	400921fb 	.word	0x400921fb
 8003600:	3ff00000 	.word	0x3ff00000
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8003604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	4413      	add	r3, r2
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	4413      	add	r3, r2
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003626:	4413      	add	r3, r2
 8003628:	edd3 6a00 	vldr	s13, [r3]
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	4413      	add	r3, r2
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003652:	4413      	add	r3, r2
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff9e 	bl	80005a8 <__aeabi_f2d>
 800366c:	4604      	mov	r4, r0
 800366e:	460d      	mov	r5, r1
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003676:	4413      	add	r3, r2
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff94 	bl	80005a8 <__aeabi_f2d>
 8003680:	4680      	mov	r8, r0
 8003682:	4689      	mov	r9, r1
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff8a 	bl	80005a8 <__aeabi_f2d>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	f7fc fe28 	bl	80002ec <__adddf3>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4640      	mov	r0, r8
 80036a2:	4649      	mov	r1, r9
 80036a4:	f7fc fe20 	bl	80002e8 <__aeabi_dsub>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	4699      	mov	r9, r3
 80036b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff74 	bl	80005a8 <__aeabi_f2d>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fc fe10 	bl	80002ec <__adddf3>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4620      	mov	r0, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7fc ffc0 	bl	8000658 <__aeabi_dmul>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	18d4      	adds	r4, r2, r3
 80036e8:	f7fd faae 	bl	8000c48 <__aeabi_d2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80036f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	441a      	add	r2, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	6a39      	ldr	r1, [r7, #32]
 80036fe:	440b      	add	r3, r1
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8003704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	441a      	add	r2, r3
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003712:	440b      	add	r3, r1
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	3301      	adds	r3, #1
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003722:	429a      	cmp	r2, r3
 8003724:	f6ff af6e 	blt.w	8003604 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2dc>
        for (size_t sx = 0; sx < size; sx++) {
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	3301      	adds	r3, #1
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
 800372e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	f4ff af51 	bcc.w	80035da <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2b2>
            }
        }

        ei_free(A);
 8003738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800373a:	f013 fe3f 	bl	80173bc <_Z7ei_freePv>
        ei_free(d1);
 800373e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003740:	f013 fe3c 	bl	80173bc <_Z7ei_freePv>
        ei_free(d2);
 8003744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003746:	f013 fe39 	bl	80173bc <_Z7ei_freePv>
        ei_free(w0);
 800374a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800374c:	f013 fe36 	bl	80173bc <_Z7ei_freePv>
        ei_free(w1);
 8003750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003752:	f013 fe33 	bl	80173bc <_Z7ei_freePv>
        ei_free(w2);
 8003756:	6a38      	ldr	r0, [r7, #32]
 8003758:	f013 fe30 	bl	80173bc <_Z7ei_freePv>
    }
 800375c:	bf00      	nop
 800375e:	3754      	adds	r7, #84	; 0x54
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop

08003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	ed87 0a02 	vstr	s0, [r7, #8]
 8003774:	edc7 0a01 	vstr	s1, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e01e      	b.n	80037c0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_lowpass(
 8003782:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 80037a6:	441a      	add	r2, r3
                matrix->cols);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80037ac:	4621      	mov	r1, r4
 80037ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80037b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80037b6:	f7ff fb97 	bl	8002ee8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3db      	bcc.n	8003782 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 80037ca:	2300      	movs	r3, #0
    }
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd90      	pop	{r4, r7, pc}

080037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80037e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e01e      	b.n	800382c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x58>
            filters::butterworth_highpass(
 80037ee:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	6979      	ldr	r1, [r7, #20]
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8003812:	441a      	add	r2, r3
                matrix->cols);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 8003818:	4621      	mov	r1, r4
 800381a:	edd7 0a01 	vldr	s1, [r7, #4]
 800381e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003822:	f7ff fd81 	bl	8003328 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	429a      	cmp	r2, r3
 8003834:	d3db      	bcc.n	80037ee <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1a>
        }

        return EIDSP_OK;
 8003836:	2300      	movs	r3, #0
    }
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}

08003840 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 8003840:	b480      	push	{r7}
 8003842:	b091      	sub	sp, #68	; 0x44
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	ed87 0a01 	vstr	s0, [r7, #4]
 800384e:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003858:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 800385a:	e0ba      	b.n	80039d2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        if (output_matrix->cols != 1) {
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8003866:	e0b4      	b.n	80039d2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x192>
        }

        uint16_t out_ix = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8003884:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a4>)
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	e028      	b.n	80038e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa6>
            if (in[ix] < min) {
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	6a3a      	ldr	r2, [r7, #32]
 800389a:	4413      	add	r3, r2
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80038a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	dd05      	ble.n	80038ba <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x7a>
                min = in[ix];
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	4413      	add	r3, r2
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	4413      	add	r3, r2
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	d505      	bpl.n	80038e0 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa0>
                max = in[ix];
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	3301      	adds	r3, #1
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	3b01      	subs	r3, #1
 80038ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3d1      	bcc.n	8003894 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x54>
            }
        }


        float prev = in[0];
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80038f6:	2301      	movs	r3, #1
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fa:	e05f      	b.n	80039bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x17c>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	4413      	add	r3, r2
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800390c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d549      	bpl.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	4413      	add	r3, r2
 800391e:	ed93 7a00 	vldr	s14, [r3]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	3301      	adds	r3, #1
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	4413      	add	r3, r2
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	dd37      	ble.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	4413      	add	r3, r2
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800394a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	4413      	add	r3, r2
 8003956:	edd3 6a00 	vldr	s13, [r3]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	3301      	adds	r3, #1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	6a3a      	ldr	r2, [r7, #32]
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8003974:	ed97 7a05 	vldr	s14, [r7, #20]
 8003978:	edd7 7a01 	vldr	s15, [r7, #4]
 800397c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003984:	dd11      	ble.n	80039aa <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x16a>
                    out[out_ix] = ix;
 8003986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4413      	add	r3, r2
 800398e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003990:	ee07 2a90 	vmov	s15, r2
 8003994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003998:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 800399c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800399e:	3301      	adds	r3, #1
 80039a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 80039a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00e      	beq.n	80039c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
                }
            }

            prev = in[ix];
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	4413      	add	r3, r2
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	3301      	adds	r3, #1
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3b01      	subs	r3, #1
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d39a      	bcc.n	80038fc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xbc>
 80039c6:	e000      	b.n	80039ca <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x18a>
                    if (out_ix == out_size) break;
 80039c8:	bf00      	nop
        }

        *peaks_found = out_ix;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80039ce:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80039d0:	2300      	movs	r3, #0
    }
 80039d2:	4618      	mov	r0, r3
 80039d4:	3744      	adds	r7, #68	; 0x44
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	fffffc14 	.word	0xfffffc14
 80039e4:	7f7fffff 	.word	0x7f7fffff

080039e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f006 fbda 	bl	800a1ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ffeb 	bl	80039e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3c:	bfcc      	ite	gt
 8003a3e:	2301      	movgt	r3, #1
 8003a40:	2300      	movle	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
        });
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	ed2d 8b02 	vpush	{d8}
 8003a56:	b09c      	sub	sp, #112	; 0x70
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6178      	str	r0, [r7, #20]
 8003a5c:	6139      	str	r1, [r7, #16]
 8003a5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a62:	edc7 0a02 	vstr	s1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a72:	4c95      	ldr	r4, [pc, #596]	; (8003cc8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a74:	e121      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->cols != 2) {
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d001      	beq.n	8003a82 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a7e:	4c92      	ldr	r4, [pc, #584]	; (8003cc8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>)
 8003a80:	e11b      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        if (output_matrix->rows == 0) {
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x3e>
            return EIDSP_OK;
 8003a8a:	2400      	movs	r4, #0
 8003a8c:	e115      	b.n	8003cba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26a>
        int N = static_cast<int>(fft_length);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
        float T = 1.0f / sampling_freq;
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	f7fd fd6a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x6c>
 8003ab8:	4c84      	ldr	r4, [pc, #528]	; (8003ccc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003aba:	e0f9      	b.n	8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8003abc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003ac0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da00      	bge.n	8003ad4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x84>
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	105b      	asrs	r3, r3, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 fb56 	bl	800a188 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003adc:	ec53 2b10 	vmov	r2, r3, d0
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f890 	bl	8000c08 <__aeabi_d2uiz>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	eef0 0a48 	vmov.f32	s1, s16
 8003af4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003af8:	f7fe fb90 	bl	800221c <_ZN2ei5numpy8linspaceEffmPf>
 8003afc:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xb8>
            EIDSP_ERR(ret);
 8003b04:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b06:	e0d3      	b.n	8003cb0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4619      	mov	r1, r3
 8003b16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f7fd fd32 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xdc>
 8003b28:	4c68      	ldr	r4, [pc, #416]	; (8003ccc <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x27c>)
 8003b2a:	e0bc      	b.n	8003ca6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 8003b2c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8003b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b34:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8003cd0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x280>
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7ff fe80 	bl	8003840 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 8003b40:	65b8      	str	r0, [r7, #88]	; 0x58
        if (ret != EIDSP_OK) {
 8003b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xfc>
            EIDSP_ERR(ret);
 8003b48:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b4a:	e0ac      	b.n	8003ca6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ei_vector<freq_peak_t> peaks;
 8003b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff56 	bl	8003a02 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003b5c:	e03c      	b.n	8003bd8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 3a90 	vmov	r3, s15
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	623b      	str	r3, [r7, #32]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
            if (d.amplitude < threshold) {
 8003ba0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ba4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	dd05      	ble.n	8003bbe <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16e>
                d.freq = 0.0f;
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
                d.amplitude = 0.0f;
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
            peaks.push_back(d);
 8003bbe:	f107 0220 	add.w	r2, r7, #32
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f006 fb2c 	bl	800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8003bce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bdc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003bde:	4293      	cmp	r3, r2
 8003be0:	dbbd      	blt.n	8003b5e <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x10e>
        sort(peaks.begin(), peaks.end(),
 8003be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be6:	4618      	mov	r0, r3
 8003be8:	f006 fb43 	bl	800a272 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 8003bec:	4604      	mov	r4, r0
 8003bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f006 fb4d 	bl	800a292 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	462a      	mov	r2, r5
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f006 fb58 	bl	800a2b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f006 fb65 	bl	800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 8003c0e:	66b8      	str	r0, [r7, #104]	; 0x68
 8003c10:	e010      	b.n	8003c34 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
            d.amplitude = 0;
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
            peaks.push_back(d);
 8003c1e:	f107 0218 	add.w	r2, r7, #24
 8003c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f006 fafc 	bl	800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 8003c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c30:	3301      	adds	r3, #1
 8003c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3e9      	bcc.n	8003c12 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1c2>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
 8003c42:	e025      	b.n	8003c90 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 8003c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f006 fb54 	bl	800a2f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	6802      	ldr	r2, [r0, #0]
 8003c64:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8003c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f006 fb43 	bl	800a2f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	6842      	ldr	r2, [r0, #4]
 8003c88:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 8003c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3d4      	bcc.n	8003c44 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1f4>
        }

        return EIDSP_OK;
 8003c9a:	2400      	movs	r4, #0
    }
 8003c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f006 faa5 	bl	800a1f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 8003ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fc96 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003cb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fd fc91 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3770      	adds	r7, #112	; 0x70
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	ecbd 8b02 	vpop	{d8}
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc8:	fffffc14 	.word	0xfffffc14
 8003ccc:	fffffc16 	.word	0xfffffc16
 8003cd0:	00000000 	.word	0x00000000

08003cd4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b093      	sub	sp, #76	; 0x4c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6178      	str	r0, [r7, #20]
 8003cdc:	6139      	str	r1, [r7, #16]
 8003cde:	60fa      	str	r2, [r7, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d103      	bne.n	8003cf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003cf6:	4c7b      	ldr	r4, [pc, #492]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003cf8:	e0ef      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d02:	4c78      	ldr	r4, [pc, #480]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d04:	e0e9      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d105      	bne.n	8003d20 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d20:	4c70      	ldr	r4, [pc, #448]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d22:	e0da      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003d30:	4c6c      	ldr	r4, [pc, #432]	; (8003ee4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 8003d32:	e0d2      	b.n	8003eda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2101      	movs	r1, #1
 8003d42:	f7fd fc20 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 8003d4c:	4c66      	ldr	r4, [pc, #408]	; (8003ee8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d4e:	e0bf      	b.n	8003ed0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	f107 0018 	add.w	r0, r7, #24
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	f7fd fc12 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8003d68:	4c5f      	ldr	r4, [pc, #380]	; (8003ee8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8003d6a:	e0ac      	b.n	8003ec6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d72:	e063      	b.n	8003e3c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            float t = freq_matrix->buffer[ix];
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d9a:	e043      	b.n	8003e24 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	db2f      	blt.n	8003e1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d51f      	bpl.n	8003e1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
                    buckets.buffer[ex] += v;
 8003dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ddc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e14:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8003e18:	e00b      	b.n	8003e32 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e24:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b4      	bcc.n	8003d9c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xc8>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8003e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e36:	3301      	adds	r3, #1
 8003e38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d395      	bcc.n	8003d74 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003e4e:	e032      	b.n	8003eb6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e2>
            if (bucket_count.buffer[ex] == 0.0f) {
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d109      	bne.n	8003e7c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1a8>
                output_matrix->buffer[ex] = 0.0f;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e017      	b.n	8003eac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1d8>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8003e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	edd3 6a00 	vldr	s13, [r3]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	ed93 7a00 	vldr	s14, [r3]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8003eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003eb6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3c5      	bcc.n	8003e50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17c>
            }
        }

        return EIDSP_OK;
 8003ec4:	2400      	movs	r4, #0
    }
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd fb86 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fb81 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8003eda:	4623      	mov	r3, r4
 8003edc:	4618      	mov	r0, r3
 8003ede:	374c      	adds	r7, #76	; 0x4c
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	fffffc14 	.word	0xfffffc14
 8003ee8:	fffffc16 	.word	0xfffffc16

08003eec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	ed2d 8b02 	vpush	{d8}
 8003ef2:	b09b      	sub	sp, #108	; 0x6c
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6178      	str	r0, [r7, #20]
 8003ef8:	6139      	str	r1, [r7, #16]
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f00:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f0a:	4c82      	ldr	r4, [pc, #520]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f0c:	e192      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d107      	bne.n	8003f26 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	0852      	lsrs	r2, r2, #1
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	3201      	adds	r2, #1
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d001      	beq.n	8003f2a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f26:	4c7b      	ldr	r4, [pc, #492]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f28:	e184      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	0852      	lsrs	r2, r2, #1
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d001      	beq.n	8003f46 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003f42:	4c74      	ldr	r4, [pc, #464]	; (8004114 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8003f44:	e176      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (input_matrix->buffer == NULL) {
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f4e:	4c72      	ldr	r4, [pc, #456]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f50:	e170      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_fft_matrix->buffer == NULL) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f5a:	4c6f      	ldr	r4, [pc, #444]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f5c:	e16a      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        if (out_freq_matrix->buffer == NULL) {
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003f66:	4c6c      	ldr	r4, [pc, #432]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f68:	e164      	b.n	8004234 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6859      	ldr	r1, [r3, #4]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003f7a:	f7fd fb04 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8003f84:	4c64      	ldr	r4, [pc, #400]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003f86:	e150      	b.n	800422a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>

        uint16_t nperseg = n_fft;
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d904      	bls.n	8003fa2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003fa0:	e006      	b.n	8003fb0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d201      	bcs.n	8003fb0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8003fb0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003fb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2101      	movs	r1, #1
 8003fbc:	f7fd fae3 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8003fc6:	4c54      	ldr	r4, [pc, #336]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8003fc8:	e12a      	b.n	8004220 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fd0:	e00c      	b.n	8003fec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x100>
            triage_segments.buffer[ix] = 1.0f;
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003fe0:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8003fe2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003fec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003ff0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3ec      	bcc.n	8003fd2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe6>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8003ff8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004004:	edd7 7a02 	vldr	s15, [r7, #8]
 8004008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004014:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004018:	2300      	movs	r3, #0
 800401a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800401e:	e025      	b.n	800406c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x180>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8004020:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004036:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800403a:	ed97 6a02 	vldr	s12, [r7, #8]
 800403e:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004042:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004046:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800404a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8004062:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004066:	3301      	adds	r3, #1
 8004068:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004076:	429a      	cmp	r2, r3
 8004078:	d9d2      	bls.n	8004020 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x134>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 800407a:	f107 001c 	add.w	r0, r7, #28
 800407e:	2300      	movs	r3, #0
 8004080:	2201      	movs	r2, #1
 8004082:	2101      	movs	r1, #1
 8004084:	f7fd fa7f 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
 800408e:	4c22      	ldr	r4, [pc, #136]	; (8004118 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8004090:	e0c1      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8004092:	f107 021c 	add.w	r2, r7, #28
 8004096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fd39 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 80040a2:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c2>
            EIDSP_ERR(ret);
 80040aa:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040ac:	e0b3      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 80040ae:	f107 021c 	add.w	r2, r7, #28
 80040b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fc93 	bl	80019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 80040be:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1de>
            EIDSP_ERR(ret);
 80040c6:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80040c8:	e0a5      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f013 f962 	bl	80173a0 <_Z9ei_callocjj>
 80040dc:	64f8      	str	r0, [r7, #76]	; 0x4c
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 80040de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3301      	adds	r3, #1
 80040ea:	461a      	mov	r2, r3
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	f7fd ffa0 	bl	8002038 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 80040f8:	6538      	str	r0, [r7, #80]	; 0x50
        if (ret != EIDSP_OK) {
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x21e>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8004100:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004102:	f013 f95b 	bl	80173bc <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8004106:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004108:	e085      	b.n	8004216 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32a>
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 800410a:	2300      	movs	r3, #0
 800410c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004110:	e076      	b.n	8004200 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x314>
 8004112:	bf00      	nop
 8004114:	fffffc14 	.word	0xfffffc14
 8004118:	fffffc16 	.word	0xfffffc16
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 800411c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004124:	4413      	add	r3, r2
 8004126:	ed93 7a00 	vldr	s14, [r3]
 800412a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004132:	4413      	add	r3, r2
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 800413c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004144:	4413      	add	r3, r2
 8004146:	ed93 7a01 	vldr	s14, [r3, #4]
 800414a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004152:	4413      	add	r3, r2
 8004154:	edd3 7a01 	vldr	s15, [r3, #4]
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	f7fc ffc6 	bl	80010f0 <_ZSt3absf>
 8004164:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8004168:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004170:	4413      	add	r3, r2
 8004172:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004176:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 800417a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004182:	4413      	add	r3, r2
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 800418a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	4413      	add	r3, r2
 8004194:	ed93 7a00 	vldr	s14, [r3]
 8004198:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a0:	4413      	add	r3, r2
 80041a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d00f      	beq.n	80041dc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x2f0>
                fft_output[ix].r *= 2;
 80041bc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c4:	4413      	add	r3, r2
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d2:	4413      	add	r3, r2
 80041d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041d8:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 80041dc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e4:	441a      	add	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 80041f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80041fa:	3301      	adds	r3, #1
 80041fc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800420a:	429a      	cmp	r2, r3
 800420c:	d986      	bls.n	800411c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 800420e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004210:	f013 f8d4 	bl	80173bc <_Z7ei_freePv>

        return EIDSP_OK;
 8004214:	2400      	movs	r4, #0
    }
 8004216:	f107 031c 	add.w	r3, r7, #28
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd f9de 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8004220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd f9d9 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800422a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd f9d4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8004234:	4623      	mov	r3, r4
 8004236:	4618      	mov	r0, r3
 8004238:	3764      	adds	r7, #100	; 0x64
 800423a:	46bd      	mov	sp, r7
 800423c:	ecbd 8b02 	vpop	{d8}
 8004240:	bd90      	pop	{r4, r7, pc}
 8004242:	bf00      	nop

08004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:

    static int subtract_mean(matrix_t* input_matrix) {
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	f107 000c 	add.w	r0, r7, #12
 8004254:	2300      	movs	r3, #0
 8004256:	2201      	movs	r2, #1
 8004258:	f7fd f995 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x22>
 8004262:	4c12      	ldr	r4, [pc, #72]	; (80042ac <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x68>)
 8004264:	e018      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 8004266:	f107 030c 	add.w	r3, r7, #12
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fd fc51 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8004272:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800427a:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 800427c:	e00c      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fd fbad 	bl	80019e4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 800428a:	61f8      	str	r0, [r7, #28]
        if (ret != EIDSP_OK) {
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x52>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004292:	4c07      	ldr	r4, [pc, #28]	; (80042b0 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x6c>)
 8004294:	e000      	b.n	8004298 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x54>
        }

        return EIDSP_OK;
 8004296:	2400      	movs	r4, #0
    }
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd f99d 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80042a2:	4623      	mov	r3, r4
 80042a4:	4618      	mov	r0, r3
 80042a6:	3724      	adds	r7, #36	; 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd90      	pop	{r4, r7, pc}
 80042ac:	fffffc16 	.word	0xfffffc16
 80042b0:	fffffc14 	.word	0xfffffc14

080042b4 <_ZN2ei8spectral3dotEPKfS2_j>:
namespace spectral {

using fvec = ei_vector<float>;

inline float dot(const float *x, const float *y, size_t sz)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
    float sum = 0.0f;
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e016      	b.n	80042fa <_ZN2ei8spectral3dotEPKfS2_j+0x46>
        sum += x[i] * y[i];
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	ed93 7a00 	vldr	s14, [r3]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	edd3 7a00 	vldr	s15, [r3]
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80042ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f0:	edc7 7a05 	vstr	s15, [r7, #20]
    for (size_t i = 0; i < sz; i++) {
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d3e4      	bcc.n	80042cc <_ZN2ei8spectral3dotEPKfS2_j+0x18>
    }
    return sum;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	ee07 3a90 	vmov	s15, r3
}
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:

inline void histo(const fvec &x, size_t nbins, fvec &h, bool normalize = false)
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b08f      	sub	sp, #60	; 0x3c
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	70fb      	strb	r3, [r7, #3]
    float min = *std::min_element(x.begin(), x.end());
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f005 fe07 	bl	8009f38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800432a:	4604      	mov	r4, r0
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f005 fe13 	bl	8009f58 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 8004332:	4603      	mov	r3, r0
 8004334:	4619      	mov	r1, r3
 8004336:	4620      	mov	r0, r4
 8004338:	f005 ffee 	bl	800a318 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 800433c:	4603      	mov	r3, r0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4618      	mov	r0, r3
 8004346:	f005 fe40 	bl	8009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800434a:	4603      	mov	r3, r0
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
    float max = *std::max_element(x.begin(), x.end());
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f005 fdf1 	bl	8009f38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 8004356:	4604      	mov	r4, r0
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f005 fdfd 	bl	8009f58 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800435e:	4603      	mov	r3, r0
 8004360:	4619      	mov	r1, r3
 8004362:	4620      	mov	r0, r4
 8004364:	f005 fe5c 	bl	800a020 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>
 8004368:	4603      	mov	r3, r0
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	4618      	mov	r0, r3
 8004372:	f005 fe2a 	bl	8009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8004376:	4603      	mov	r3, r0
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    float step = (max - min) / nbins;
 800437c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004380:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004384:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	edc7 7a08 	vstr	s15, [r7, #32]
    h.resize(nbins);
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f005 ffcc 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
 80043a6:	e02a      	b.n	80043fe <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe8>
        size_t bin = (x[i] - min) / step;
 80043a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f005 fe79 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043b0:	4603      	mov	r3, r0
 80043b2:	ed93 7a00 	vldr	s14, [r3]
 80043b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80043ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043be:	ed97 7a08 	vldr	s14, [r7, #32]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 3a90 	vmov	r3, s15
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
        if (bin >= nbins)
 80043d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xc8>
            bin = nbins - 1;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
        h[bin]++;
 80043de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f005 fd84 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80043e6:	4603      	mov	r3, r0
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043f4:	edc3 7a00 	vstr	s15, [r3]
    for (size_t i = 0; i < x.size(); i++) {
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	3301      	adds	r3, #1
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f005 fbcd 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8004404:	4602      	mov	r2, r0
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	4293      	cmp	r3, r2
 800440a:	bf34      	ite	cc
 800440c:	2301      	movcc	r3, #1
 800440e:	2300      	movcs	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1c8      	bne.n	80043a8 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x92>
    }
    if (normalize) {
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d024      	beq.n	8004466 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x150>
        float s = numpy::sum(h.data(), h.size());
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f005 fbce 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8004422:	4604      	mov	r4, r0
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f005 fbba 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800442a:	4603      	mov	r3, r0
 800442c:	4619      	mov	r1, r3
 800442e:	4620      	mov	r0, r4
 8004430:	f7fd f926 	bl	8001680 <_ZN2ei5numpy3sumEPfj>
 8004434:	ed87 0a07 	vstr	s0, [r7, #28]
        for (size_t i = 0; i < nbins; i++) {
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443c:	e00f      	b.n	800445e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x148>
            h[i] /= s;
 800443e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f005 fd54 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8004446:	4603      	mov	r3, r0
 8004448:	edd3 6a00 	vldr	s13, [r3]
 800444c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004454:	edc3 7a00 	vstr	s15, [r3]
        for (size_t i = 0; i < nbins; i++) {
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	3301      	adds	r3, #1
 800445c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d3eb      	bcc.n	800443e <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x128>
        }
    }
}
 8004466:	bf00      	nop
 8004468:	373c      	adds	r7, #60	; 0x3c
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
	...

08004470 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
            h[i] = wav[0][n - i - 1];
            g[i] = wav[1][n - i - 1];
        }
    }

    static void find_filter(const char *wav, fvec &h, fvec &g)
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	b0ab      	sub	sp, #172	; 0xac
 8004474:	af26      	add	r7, sp, #152	; 0x98
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
    {
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 800447c:	49ae      	ldr	r1, [pc, #696]	; (8004738 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7fb fec6 	bl	8000210 <strcmp>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
 800448a:	4eac      	ldr	r6, [pc, #688]	; (800473c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	9308      	str	r3, [sp, #32]
 8004494:	466d      	mov	r5, sp
 8004496:	f106 0410 	add.w	r4, r6, #16
 800449a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800449c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044aa:	f005 ff9c 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
        else assert(0); // wavelet not in the list
    }
 80044ae:	f000 bd9a 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 80044b2:	49a3      	ldr	r1, [pc, #652]	; (8004740 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7fb feab 	bl	8000210 <strcmp>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d117      	bne.n	80044f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80>
 80044c0:	4ea0      	ldr	r6, [pc, #640]	; (8004744 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9311      	str	r3, [sp, #68]	; 0x44
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	9310      	str	r3, [sp, #64]	; 0x40
 80044ca:	466d      	mov	r5, sp
 80044cc:	f106 0410 	add.w	r4, r6, #16
 80044d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80044e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80044e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044e8:	f005 ffea 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80044ec:	f000 bd7b 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 80044f0:	4995      	ldr	r1, [pc, #596]	; (8004748 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7fb fe8c 	bl	8000210 <strcmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6>
 80044fe:	4e93      	ldr	r6, [pc, #588]	; (800474c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9309      	str	r3, [sp, #36]	; 0x24
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	9308      	str	r3, [sp, #32]
 8004508:	466d      	mov	r5, sp
 800450a:	f106 0410 	add.w	r4, r6, #16
 800450e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004512:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004516:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800451a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800451e:	f005 ff62 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004522:	f000 bd60 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 8004526:	498a      	ldr	r1, [pc, #552]	; (8004750 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7fb fe71 	bl	8000210 <strcmp>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d117      	bne.n	8004564 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf4>
 8004534:	4e87      	ldr	r6, [pc, #540]	; (8004754 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	9311      	str	r3, [sp, #68]	; 0x44
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	9310      	str	r3, [sp, #64]	; 0x40
 800453e:	466d      	mov	r5, sp
 8004540:	f106 0410 	add.w	r4, r6, #16
 8004544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800454a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800454c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800454e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004550:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004554:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004558:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800455c:	f005 ffb0 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004560:	f000 bd41 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 8004564:	497c      	ldr	r1, [pc, #496]	; (8004758 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7fb fe52 	bl	8000210 <strcmp>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d111      	bne.n	8004596 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 8004572:	4c7a      	ldr	r4, [pc, #488]	; (800475c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9319      	str	r3, [sp, #100]	; 0x64
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	9318      	str	r3, [sp, #96]	; 0x60
 800457c:	4668      	mov	r0, sp
 800457e:	f104 0310 	add.w	r3, r4, #16
 8004582:	2260      	movs	r2, #96	; 0x60
 8004584:	4619      	mov	r1, r3
 8004586:	f01a f9fe 	bl	801e986 <memcpy>
 800458a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800458e:	f006 f804 	bl	800a59a <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004592:	f000 bd28 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 8004596:	4972      	ldr	r1, [pc, #456]	; (8004760 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7fb fe39 	bl	8000210 <strcmp>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d111      	bne.n	80045c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
 80045a4:	4c6f      	ldr	r4, [pc, #444]	; (8004764 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	9321      	str	r3, [sp, #132]	; 0x84
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	9320      	str	r3, [sp, #128]	; 0x80
 80045ae:	4668      	mov	r0, sp
 80045b0:	f104 0310 	add.w	r3, r4, #16
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	4619      	mov	r1, r3
 80045b8:	f01a f9e5 	bl	801e986 <memcpy>
 80045bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045c0:	f006 f85c 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045c4:	f000 bd0f 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 80045c8:	4967      	ldr	r1, [pc, #412]	; (8004768 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7fb fe20 	bl	8000210 <strcmp>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d110      	bne.n	80045f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x188>
 80045d6:	4c65      	ldr	r4, [pc, #404]	; (800476c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	466d      	mov	r5, sp
 80045e2:	f104 0310 	add.w	r3, r4, #16
 80045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80045ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80045f0:	f006 f8b2 	bl	800a758 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80045f4:	f000 bcf7 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 80045f8:	495d      	ldr	r1, [pc, #372]	; (8004770 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7fb fe08 	bl	8000210 <strcmp>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d115      	bne.n	8004632 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 8004606:	4e5b      	ldr	r6, [pc, #364]	; (8004774 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	930d      	str	r3, [sp, #52]	; 0x34
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	930c      	str	r3, [sp, #48]	; 0x30
 8004610:	466d      	mov	r5, sp
 8004612:	f106 0410 	add.w	r4, r6, #16
 8004616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004622:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004626:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800462a:	f006 f8ff 	bl	800a82c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800462e:	f000 bcda 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 8004632:	4951      	ldr	r1, [pc, #324]	; (8004778 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fb fdeb 	bl	8000210 <strcmp>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d111      	bne.n	8004664 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1f4>
 8004640:	4c4e      	ldr	r4, [pc, #312]	; (800477c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	9315      	str	r3, [sp, #84]	; 0x54
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	9314      	str	r3, [sp, #80]	; 0x50
 800464a:	4668      	mov	r0, sp
 800464c:	f104 0310 	add.w	r3, r4, #16
 8004650:	2250      	movs	r2, #80	; 0x50
 8004652:	4619      	mov	r1, r3
 8004654:	f01a f997 	bl	801e986 <memcpy>
 8004658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800465c:	f006 f953 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004660:	f000 bcc1 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 8004664:	4946      	ldr	r1, [pc, #280]	; (8004780 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fb fdd2 	bl	8000210 <strcmp>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d111      	bne.n	8004696 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x226>
 8004672:	4c44      	ldr	r4, [pc, #272]	; (8004784 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	931d      	str	r3, [sp, #116]	; 0x74
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	931c      	str	r3, [sp, #112]	; 0x70
 800467c:	4668      	mov	r0, sp
 800467e:	f104 0310 	add.w	r3, r4, #16
 8004682:	2270      	movs	r2, #112	; 0x70
 8004684:	4619      	mov	r1, r3
 8004686:	f01a f97e 	bl	801e986 <memcpy>
 800468a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800468e:	f006 f9a4 	bl	800a9da <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004692:	f000 bca8 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 8004696:	493c      	ldr	r1, [pc, #240]	; (8004788 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fb fdb9 	bl	8000210 <strcmp>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x258>
 80046a4:	4c39      	ldr	r4, [pc, #228]	; (800478c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	9325      	str	r3, [sp, #148]	; 0x94
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	9324      	str	r3, [sp, #144]	; 0x90
 80046ae:	4668      	mov	r0, sp
 80046b0:	f104 0310 	add.w	r3, r4, #16
 80046b4:	2290      	movs	r2, #144	; 0x90
 80046b6:	4619      	mov	r1, r3
 80046b8:	f01a f965 	bl	801e986 <memcpy>
 80046bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046c0:	f006 f9fc 	bl	800aabc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80046c4:	f000 bc8f 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 80046c8:	4931      	ldr	r1, [pc, #196]	; (8004790 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7fb fda0 	bl	8000210 <strcmp>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d117      	bne.n	8004706 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x296>
 80046d6:	4e2f      	ldr	r6, [pc, #188]	; (8004794 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9311      	str	r3, [sp, #68]	; 0x44
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	9310      	str	r3, [sp, #64]	; 0x40
 80046e0:	466d      	mov	r5, sp
 80046e2:	f106 0410 	add.w	r4, r6, #16
 80046e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80046f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80046fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80046fe:	f005 fedf 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004702:	f000 bc70 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 8004706:	4924      	ldr	r1, [pc, #144]	; (8004798 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7fb fd81 	bl	8000210 <strcmp>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d145      	bne.n	80047a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>
 8004714:	4c21      	ldr	r4, [pc, #132]	; (800479c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	9315      	str	r3, [sp, #84]	; 0x54
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	9314      	str	r3, [sp, #80]	; 0x50
 800471e:	4668      	mov	r0, sp
 8004720:	f104 0310 	add.w	r3, r4, #16
 8004724:	2250      	movs	r2, #80	; 0x50
 8004726:	4619      	mov	r1, r3
 8004728:	f01a f92d 	bl	801e986 <memcpy>
 800472c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004730:	f006 f8e9 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004734:	f000 bc57 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004738:	080207a8 	.word	0x080207a8
 800473c:	0802309c 	.word	0x0802309c
 8004740:	080207b0 	.word	0x080207b0
 8004744:	080230cc 	.word	0x080230cc
 8004748:	080207b8 	.word	0x080207b8
 800474c:	0802311c 	.word	0x0802311c
 8004750:	080207c0 	.word	0x080207c0
 8004754:	0802314c 	.word	0x0802314c
 8004758:	080207c8 	.word	0x080207c8
 800475c:	0802319c 	.word	0x0802319c
 8004760:	080207d0 	.word	0x080207d0
 8004764:	0802320c 	.word	0x0802320c
 8004768:	080207d8 	.word	0x080207d8
 800476c:	0802329c 	.word	0x0802329c
 8004770:	080207e0 	.word	0x080207e0
 8004774:	080232bc 	.word	0x080232bc
 8004778:	080207e8 	.word	0x080207e8
 800477c:	080232fc 	.word	0x080232fc
 8004780:	080207f0 	.word	0x080207f0
 8004784:	0802335c 	.word	0x0802335c
 8004788:	080207f8 	.word	0x080207f8
 800478c:	080233dc 	.word	0x080233dc
 8004790:	08020800 	.word	0x08020800
 8004794:	0802347c 	.word	0x0802347c
 8004798:	08020808 	.word	0x08020808
 800479c:	080234cc 	.word	0x080234cc
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 80047a0:	49b1      	ldr	r1, [pc, #708]	; (8004a68 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5f8>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7fb fd34 	bl	8000210 <strcmp>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d111      	bne.n	80047d2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x362>
 80047ae:	4caf      	ldr	r4, [pc, #700]	; (8004a6c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5fc>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	9321      	str	r3, [sp, #132]	; 0x84
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	9320      	str	r3, [sp, #128]	; 0x80
 80047b8:	4668      	mov	r0, sp
 80047ba:	f104 0310 	add.w	r3, r4, #16
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	4619      	mov	r1, r3
 80047c2:	f01a f8e0 	bl	801e986 <memcpy>
 80047c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047ca:	f005 ff57 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80047ce:	f000 bc0a 	b.w	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 80047d2:	49a7      	ldr	r1, [pc, #668]	; (8004a70 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x600>)
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7fb fd1b 	bl	8000210 <strcmp>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d112      	bne.n	8004806 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 80047e0:	4ea4      	ldr	r6, [pc, #656]	; (8004a74 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x604>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	9309      	str	r3, [sp, #36]	; 0x24
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	466d      	mov	r5, sp
 80047ec:	f106 0410 	add.w	r4, r6, #16
 80047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80047f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80047fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004800:	f005 fdf1 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004804:	e3ef      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 8004806:	499c      	ldr	r1, [pc, #624]	; (8004a78 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x608>)
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f7fb fd01 	bl	8000210 <strcmp>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d110      	bne.n	8004836 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c6>
 8004814:	4c99      	ldr	r4, [pc, #612]	; (8004a7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x60c>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	9315      	str	r3, [sp, #84]	; 0x54
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	9314      	str	r3, [sp, #80]	; 0x50
 800481e:	4668      	mov	r0, sp
 8004820:	f104 0310 	add.w	r3, r4, #16
 8004824:	2250      	movs	r2, #80	; 0x50
 8004826:	4619      	mov	r1, r3
 8004828:	f01a f8ad 	bl	801e986 <memcpy>
 800482c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004830:	f006 f869 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004834:	e3d7      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 8004836:	4992      	ldr	r1, [pc, #584]	; (8004a80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x610>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7fb fce9 	bl	8000210 <strcmp>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d110      	bne.n	8004866 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f6>
 8004844:	4c8f      	ldr	r4, [pc, #572]	; (8004a84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x614>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	9321      	str	r3, [sp, #132]	; 0x84
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	9320      	str	r3, [sp, #128]	; 0x80
 800484e:	4668      	mov	r0, sp
 8004850:	f104 0310 	add.w	r3, r4, #16
 8004854:	2280      	movs	r2, #128	; 0x80
 8004856:	4619      	mov	r1, r3
 8004858:	f01a f895 	bl	801e986 <memcpy>
 800485c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004860:	f005 ff0c 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004864:	e3bf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 8004866:	4988      	ldr	r1, [pc, #544]	; (8004a88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x618>)
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7fb fcd1 	bl	8000210 <strcmp>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x424>
 8004874:	4c85      	ldr	r4, [pc, #532]	; (8004a8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x61c>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	9305      	str	r3, [sp, #20]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	9304      	str	r3, [sp, #16]
 800487e:	466d      	mov	r5, sp
 8004880:	f104 0310 	add.w	r3, r4, #16
 8004884:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004886:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800488a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800488e:	f005 ff63 	bl	800a758 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004892:	e3a8      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 8004894:	497e      	ldr	r1, [pc, #504]	; (8004a90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x620>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7fb fcba 	bl	8000210 <strcmp>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d112      	bne.n	80048c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x458>
 80048a2:	4e7c      	ldr	r6, [pc, #496]	; (8004a94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x624>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	9308      	str	r3, [sp, #32]
 80048ac:	466d      	mov	r5, sp
 80048ae:	f106 0410 	add.w	r4, r6, #16
 80048b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048c2:	f005 fd90 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048c6:	e38e      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 80048c8:	4973      	ldr	r1, [pc, #460]	; (8004a98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x628>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7fb fca0 	bl	8000210 <strcmp>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d114      	bne.n	8004900 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x490>
 80048d6:	4e71      	ldr	r6, [pc, #452]	; (8004a9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x62c>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	930d      	str	r3, [sp, #52]	; 0x34
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	930c      	str	r3, [sp, #48]	; 0x30
 80048e0:	466d      	mov	r5, sp
 80048e2:	f106 0410 	add.w	r4, r6, #16
 80048e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80048fa:	f005 ff97 	bl	800a82c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80048fe:	e372      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 8004900:	4967      	ldr	r1, [pc, #412]	; (8004aa0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x630>)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7fb fc84 	bl	8000210 <strcmp>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>
 800490e:	4e65      	ldr	r6, [pc, #404]	; (8004aa4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x634>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	9311      	str	r3, [sp, #68]	; 0x44
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	9310      	str	r3, [sp, #64]	; 0x40
 8004918:	466d      	mov	r5, sp
 800491a:	f106 0410 	add.w	r4, r6, #16
 800491e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800492e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004932:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004936:	f005 fdc3 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800493a:	e354      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 800493c:	495a      	ldr	r1, [pc, #360]	; (8004aa8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x638>)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fb fc66 	bl	8000210 <strcmp>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>
 800494a:	4c58      	ldr	r4, [pc, #352]	; (8004aac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x63c>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	9315      	str	r3, [sp, #84]	; 0x54
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	9314      	str	r3, [sp, #80]	; 0x50
 8004954:	4668      	mov	r0, sp
 8004956:	f104 0310 	add.w	r3, r4, #16
 800495a:	2250      	movs	r2, #80	; 0x50
 800495c:	4619      	mov	r1, r3
 800495e:	f01a f812 	bl	801e986 <memcpy>
 8004962:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004966:	f005 ffce 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800496a:	e33c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 800496c:	4950      	ldr	r1, [pc, #320]	; (8004ab0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x640>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7fb fc4e 	bl	8000210 <strcmp>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d110      	bne.n	800499c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>
 800497a:	4c4e      	ldr	r4, [pc, #312]	; (8004ab4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x644>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	9319      	str	r3, [sp, #100]	; 0x64
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	9318      	str	r3, [sp, #96]	; 0x60
 8004984:	4668      	mov	r0, sp
 8004986:	f104 0310 	add.w	r3, r4, #16
 800498a:	2260      	movs	r2, #96	; 0x60
 800498c:	4619      	mov	r1, r3
 800498e:	f019 fffa 	bl	801e986 <memcpy>
 8004992:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004996:	f005 fe00 	bl	800a59a <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 800499a:	e324      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 800499c:	4946      	ldr	r1, [pc, #280]	; (8004ab8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x648>)
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7fb fc36 	bl	8000210 <strcmp>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d110      	bne.n	80049cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>
 80049aa:	4c44      	ldr	r4, [pc, #272]	; (8004abc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x64c>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	931d      	str	r3, [sp, #116]	; 0x74
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	931c      	str	r3, [sp, #112]	; 0x70
 80049b4:	4668      	mov	r0, sp
 80049b6:	f104 0310 	add.w	r3, r4, #16
 80049ba:	2270      	movs	r2, #112	; 0x70
 80049bc:	4619      	mov	r1, r3
 80049be:	f019 ffe2 	bl	801e986 <memcpy>
 80049c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049c6:	f006 f808 	bl	800a9da <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049ca:	e30c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 80049cc:	493c      	ldr	r1, [pc, #240]	; (8004ac0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x650>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7fb fc1e 	bl	8000210 <strcmp>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x58c>
 80049da:	4c3a      	ldr	r4, [pc, #232]	; (8004ac4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x654>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	9321      	str	r3, [sp, #132]	; 0x84
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	9320      	str	r3, [sp, #128]	; 0x80
 80049e4:	4668      	mov	r0, sp
 80049e6:	f104 0310 	add.w	r3, r4, #16
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	4619      	mov	r1, r3
 80049ee:	f019 ffca 	bl	801e986 <memcpy>
 80049f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80049f6:	f005 fe41 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 80049fa:	e2f4      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 80049fc:	4932      	ldr	r1, [pc, #200]	; (8004ac8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x658>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fb fc06 	bl	8000210 <strcmp>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d110      	bne.n	8004a2c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x5bc>
 8004a0a:	4c30      	ldr	r4, [pc, #192]	; (8004acc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x65c>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9325      	str	r3, [sp, #148]	; 0x94
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	9324      	str	r3, [sp, #144]	; 0x90
 8004a14:	4668      	mov	r0, sp
 8004a16:	f104 0310 	add.w	r3, r4, #16
 8004a1a:	2290      	movs	r2, #144	; 0x90
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f019 ffb2 	bl	801e986 <memcpy>
 8004a22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004a26:	f006 f849 	bl	800aabc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a2a:	e2dc      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 8004a2c:	4928      	ldr	r1, [pc, #160]	; (8004ad0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x660>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7fb fbee 	bl	8000210 <strcmp>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d14e      	bne.n	8004ad8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x668>
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x664>)
 8004a3c:	ed93 6a00 	vldr	s12, [r3]
 8004a40:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a44:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a48:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	eeb0 0a46 	vmov.f32	s0, s12
 8004a54:	eef0 0a66 	vmov.f32	s1, s13
 8004a58:	eeb0 1a47 	vmov.f32	s2, s14
 8004a5c:	eef0 1a67 	vmov.f32	s3, s15
 8004a60:	f006 f89a 	bl	800ab98 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004a64:	e2bf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004a66:	bf00      	nop
 8004a68:	08020810 	.word	0x08020810
 8004a6c:	0802352c 	.word	0x0802352c
 8004a70:	08020818 	.word	0x08020818
 8004a74:	080235bc 	.word	0x080235bc
 8004a78:	08020820 	.word	0x08020820
 8004a7c:	080235ec 	.word	0x080235ec
 8004a80:	08020828 	.word	0x08020828
 8004a84:	0802364c 	.word	0x0802364c
 8004a88:	08020830 	.word	0x08020830
 8004a8c:	080236dc 	.word	0x080236dc
 8004a90:	08020834 	.word	0x08020834
 8004a94:	080236fc 	.word	0x080236fc
 8004a98:	08020838 	.word	0x08020838
 8004a9c:	0802372c 	.word	0x0802372c
 8004aa0:	0802083c 	.word	0x0802083c
 8004aa4:	0802376c 	.word	0x0802376c
 8004aa8:	08020840 	.word	0x08020840
 8004aac:	080237bc 	.word	0x080237bc
 8004ab0:	08020844 	.word	0x08020844
 8004ab4:	0802381c 	.word	0x0802381c
 8004ab8:	08020848 	.word	0x08020848
 8004abc:	0802388c 	.word	0x0802388c
 8004ac0:	0802084c 	.word	0x0802084c
 8004ac4:	0802390c 	.word	0x0802390c
 8004ac8:	08020850 	.word	0x08020850
 8004acc:	0802399c 	.word	0x0802399c
 8004ad0:	08020858 	.word	0x08020858
 8004ad4:	08023a3c 	.word	0x08023a3c
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 8004ad8:	49a8      	ldr	r1, [pc, #672]	; (8004d7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x90c>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fb fb98 	bl	8000210 <strcmp>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d112      	bne.n	8004b0c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x69c>
 8004ae6:	4ea6      	ldr	r6, [pc, #664]	; (8004d80 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x910>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9309      	str	r3, [sp, #36]	; 0x24
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	9308      	str	r3, [sp, #32]
 8004af0:	466d      	mov	r5, sp
 8004af2:	f106 0410 	add.w	r4, r6, #16
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004afe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b06:	f005 fc6e 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b0a:	e26c      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 8004b0c:	499d      	ldr	r1, [pc, #628]	; (8004d84 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x914>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7fb fb7e 	bl	8000210 <strcmp>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d116      	bne.n	8004b48 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6d8>
 8004b1a:	4e9b      	ldr	r6, [pc, #620]	; (8004d88 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x918>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	9310      	str	r3, [sp, #64]	; 0x40
 8004b24:	466d      	mov	r5, sp
 8004b26:	f106 0410 	add.w	r4, r6, #16
 8004b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b42:	f005 fcbd 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b46:	e24e      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 8004b48:	4990      	ldr	r1, [pc, #576]	; (8004d8c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x91c>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7fb fb60 	bl	8000210 <strcmp>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d112      	bne.n	8004b7c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x70c>
 8004b56:	4e8e      	ldr	r6, [pc, #568]	; (8004d90 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x920>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	9308      	str	r3, [sp, #32]
 8004b60:	466d      	mov	r5, sp
 8004b62:	f106 0410 	add.w	r4, r6, #16
 8004b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004b72:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004b76:	f005 fc36 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004b7a:	e234      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 8004b7c:	4985      	ldr	r1, [pc, #532]	; (8004d94 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x924>)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7fb fb46 	bl	8000210 <strcmp>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x748>
 8004b8a:	4e83      	ldr	r6, [pc, #524]	; (8004d98 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x928>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	9311      	str	r3, [sp, #68]	; 0x44
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	9310      	str	r3, [sp, #64]	; 0x40
 8004b94:	466d      	mov	r5, sp
 8004b96:	f106 0410 	add.w	r4, r6, #16
 8004b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004baa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004bae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004bb2:	f005 fc85 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004bb6:	e216      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 8004bb8:	4978      	ldr	r1, [pc, #480]	; (8004d9c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92c>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7fb fb28 	bl	8000210 <strcmp>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d110      	bne.n	8004be8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x778>
 8004bc6:	4c76      	ldr	r4, [pc, #472]	; (8004da0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x930>)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9319      	str	r3, [sp, #100]	; 0x64
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	9318      	str	r3, [sp, #96]	; 0x60
 8004bd0:	4668      	mov	r0, sp
 8004bd2:	f104 0310 	add.w	r3, r4, #16
 8004bd6:	2260      	movs	r2, #96	; 0x60
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f019 fed4 	bl	801e986 <memcpy>
 8004bde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004be2:	f005 fcda 	bl	800a59a <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004be6:	e1fe      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 8004be8:	496e      	ldr	r1, [pc, #440]	; (8004da4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x934>)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7fb fb10 	bl	8000210 <strcmp>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7a8>
 8004bf6:	4c6c      	ldr	r4, [pc, #432]	; (8004da8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x938>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	9321      	str	r3, [sp, #132]	; 0x84
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	9320      	str	r3, [sp, #128]	; 0x80
 8004c00:	4668      	mov	r0, sp
 8004c02:	f104 0310 	add.w	r3, r4, #16
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f019 febc 	bl	801e986 <memcpy>
 8004c0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c12:	f005 fd33 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c16:	e1e6      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 8004c18:	4964      	ldr	r1, [pc, #400]	; (8004dac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x93c>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7fb faf8 	bl	8000210 <strcmp>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x7d6>
 8004c26:	4c62      	ldr	r4, [pc, #392]	; (8004db0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x940>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	9305      	str	r3, [sp, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	466d      	mov	r5, sp
 8004c32:	f104 0310 	add.w	r3, r4, #16
 8004c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c40:	f005 fd8a 	bl	800a758 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c44:	e1cf      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 8004c46:	495b      	ldr	r1, [pc, #364]	; (8004db4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x944>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f7fb fae1 	bl	8000210 <strcmp>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d114      	bne.n	8004c7e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x80e>
 8004c54:	4e58      	ldr	r6, [pc, #352]	; (8004db8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x948>)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8004c5e:	466d      	mov	r5, sp
 8004c60:	f106 0410 	add.w	r4, r6, #16
 8004c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004c70:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004c74:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004c78:	f005 fdd8 	bl	800a82c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004c7c:	e1b3      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 8004c7e:	494f      	ldr	r1, [pc, #316]	; (8004dbc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x94c>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7fb fac5 	bl	8000210 <strcmp>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x83e>
 8004c8c:	4c4c      	ldr	r4, [pc, #304]	; (8004dc0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x950>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	9315      	str	r3, [sp, #84]	; 0x54
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	9314      	str	r3, [sp, #80]	; 0x50
 8004c96:	4668      	mov	r0, sp
 8004c98:	f104 0310 	add.w	r3, r4, #16
 8004c9c:	2250      	movs	r2, #80	; 0x50
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f019 fe71 	bl	801e986 <memcpy>
 8004ca4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ca8:	f005 fe2d 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cac:	e19b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 8004cae:	4945      	ldr	r1, [pc, #276]	; (8004dc4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x954>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fb faad 	bl	8000210 <strcmp>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d110      	bne.n	8004cde <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86e>
 8004cbc:	4c42      	ldr	r4, [pc, #264]	; (8004dc8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x958>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	931d      	str	r3, [sp, #116]	; 0x74
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	931c      	str	r3, [sp, #112]	; 0x70
 8004cc6:	4668      	mov	r0, sp
 8004cc8:	f104 0310 	add.w	r3, r4, #16
 8004ccc:	2270      	movs	r2, #112	; 0x70
 8004cce:	4619      	mov	r1, r3
 8004cd0:	f019 fe59 	bl	801e986 <memcpy>
 8004cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cd8:	f005 fe7f 	bl	800a9da <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004cdc:	e183      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 8004cde:	493b      	ldr	r1, [pc, #236]	; (8004dcc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x95c>)
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7fb fa95 	bl	8000210 <strcmp>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d110      	bne.n	8004d0e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x89e>
 8004cec:	4c38      	ldr	r4, [pc, #224]	; (8004dd0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x960>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	9325      	str	r3, [sp, #148]	; 0x94
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	9324      	str	r3, [sp, #144]	; 0x90
 8004cf6:	4668      	mov	r0, sp
 8004cf8:	f104 0310 	add.w	r3, r4, #16
 8004cfc:	2290      	movs	r2, #144	; 0x90
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f019 fe41 	bl	801e986 <memcpy>
 8004d04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d08:	f005 fed8 	bl	800aabc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d0c:	e16b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 8004d0e:	4931      	ldr	r1, [pc, #196]	; (8004dd4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x964>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7fb fa7d 	bl	8000210 <strcmp>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d116      	bne.n	8004d4a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x8da>
 8004d1c:	4e2e      	ldr	r6, [pc, #184]	; (8004dd8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x968>)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	9311      	str	r3, [sp, #68]	; 0x44
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	9310      	str	r3, [sp, #64]	; 0x40
 8004d26:	466d      	mov	r5, sp
 8004d28:	f106 0410 	add.w	r4, r6, #16
 8004d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004d40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004d44:	f005 fbbc 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d48:	e14d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 8004d4a:	4924      	ldr	r1, [pc, #144]	; (8004ddc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x96c>)
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7fb fa5f 	bl	8000210 <strcmp>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d145      	bne.n	8004de4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x974>
 8004d58:	4c21      	ldr	r4, [pc, #132]	; (8004de0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x970>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	9315      	str	r3, [sp, #84]	; 0x54
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	9314      	str	r3, [sp, #80]	; 0x50
 8004d62:	4668      	mov	r0, sp
 8004d64:	f104 0310 	add.w	r3, r4, #16
 8004d68:	2250      	movs	r2, #80	; 0x50
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f019 fe0b 	bl	801e986 <memcpy>
 8004d70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d74:	f005 fdc7 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004d78:	e135      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
 8004d7a:	bf00      	nop
 8004d7c:	08020860 	.word	0x08020860
 8004d80:	08023a4c 	.word	0x08023a4c
 8004d84:	08020868 	.word	0x08020868
 8004d88:	08023a7c 	.word	0x08023a7c
 8004d8c:	08020870 	.word	0x08020870
 8004d90:	08023acc 	.word	0x08023acc
 8004d94:	08020878 	.word	0x08020878
 8004d98:	08023afc 	.word	0x08023afc
 8004d9c:	08020880 	.word	0x08020880
 8004da0:	08023b4c 	.word	0x08023b4c
 8004da4:	08020888 	.word	0x08020888
 8004da8:	08023bbc 	.word	0x08023bbc
 8004dac:	08020890 	.word	0x08020890
 8004db0:	08023c4c 	.word	0x08023c4c
 8004db4:	08020898 	.word	0x08020898
 8004db8:	08023c6c 	.word	0x08023c6c
 8004dbc:	080208a0 	.word	0x080208a0
 8004dc0:	08023cac 	.word	0x08023cac
 8004dc4:	080208a8 	.word	0x080208a8
 8004dc8:	08023d0c 	.word	0x08023d0c
 8004dcc:	080208b0 	.word	0x080208b0
 8004dd0:	08023d8c 	.word	0x08023d8c
 8004dd4:	080208b8 	.word	0x080208b8
 8004dd8:	08023e2c 	.word	0x08023e2c
 8004ddc:	080208c0 	.word	0x080208c0
 8004de0:	08023e7c 	.word	0x08023e7c
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 8004de4:	4981      	ldr	r1, [pc, #516]	; (8004fec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb7c>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fb fa12 	bl	8000210 <strcmp>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d110      	bne.n	8004e14 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9a4>
 8004df2:	4c7f      	ldr	r4, [pc, #508]	; (8004ff0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb80>)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	9321      	str	r3, [sp, #132]	; 0x84
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	9320      	str	r3, [sp, #128]	; 0x80
 8004dfc:	4668      	mov	r0, sp
 8004dfe:	f104 0310 	add.w	r3, r4, #16
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	4619      	mov	r1, r3
 8004e06:	f019 fdbe 	bl	801e986 <memcpy>
 8004e0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e0e:	f005 fc35 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e12:	e0e8      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 8004e14:	4977      	ldr	r1, [pc, #476]	; (8004ff4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb84>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7fb f9fa 	bl	8000210 <strcmp>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x9d2>
 8004e22:	4c75      	ldr	r4, [pc, #468]	; (8004ff8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb88>)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	9305      	str	r3, [sp, #20]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	466d      	mov	r5, sp
 8004e2e:	f104 0310 	add.w	r3, r4, #16
 8004e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e3c:	f005 fc8c 	bl	800a758 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e40:	e0d1      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 8004e42:	496e      	ldr	r1, [pc, #440]	; (8004ffc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8c>)
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7fb f9e3 	bl	8000210 <strcmp>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d112      	bne.n	8004e76 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa06>
 8004e50:	4e6b      	ldr	r6, [pc, #428]	; (8005000 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb90>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9309      	str	r3, [sp, #36]	; 0x24
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	9308      	str	r3, [sp, #32]
 8004e5a:	466d      	mov	r5, sp
 8004e5c:	f106 0410 	add.w	r4, r6, #16
 8004e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004e68:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004e6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004e70:	f005 fab9 	bl	800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004e74:	e0b7      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 8004e76:	4963      	ldr	r1, [pc, #396]	; (8005004 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb94>)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7fb f9c9 	bl	8000210 <strcmp>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d114      	bne.n	8004eae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa3e>
 8004e84:	4e60      	ldr	r6, [pc, #384]	; (8005008 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb98>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	930d      	str	r3, [sp, #52]	; 0x34
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e8e:	466d      	mov	r5, sp
 8004e90:	f106 0410 	add.w	r4, r6, #16
 8004e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ea0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ea4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ea8:	f005 fcc0 	bl	800a82c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004eac:	e09b      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 8004eae:	4957      	ldr	r1, [pc, #348]	; (800500c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb9c>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7fb f9ad 	bl	8000210 <strcmp>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d116      	bne.n	8004eea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xa7a>
 8004ebc:	4e54      	ldr	r6, [pc, #336]	; (8005010 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba0>)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	9310      	str	r3, [sp, #64]	; 0x40
 8004ec6:	466d      	mov	r5, sp
 8004ec8:	f106 0410 	add.w	r4, r6, #16
 8004ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ed8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004edc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ee0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004ee4:	f005 faec 	bl	800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004ee8:	e07d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 8004eea:	494a      	ldr	r1, [pc, #296]	; (8005014 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba4>)
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7fb f98f 	bl	8000210 <strcmp>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xaaa>
 8004ef8:	4c47      	ldr	r4, [pc, #284]	; (8005018 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xba8>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9315      	str	r3, [sp, #84]	; 0x54
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	9314      	str	r3, [sp, #80]	; 0x50
 8004f02:	4668      	mov	r0, sp
 8004f04:	f104 0310 	add.w	r3, r4, #16
 8004f08:	2250      	movs	r2, #80	; 0x50
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f019 fd3b 	bl	801e986 <memcpy>
 8004f10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f14:	f005 fcf7 	bl	800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f18:	e065      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 8004f1a:	4940      	ldr	r1, [pc, #256]	; (800501c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbac>)
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7fb f977 	bl	8000210 <strcmp>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d110      	bne.n	8004f4a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xada>
 8004f28:	4c3d      	ldr	r4, [pc, #244]	; (8005020 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb0>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	9318      	str	r3, [sp, #96]	; 0x60
 8004f32:	4668      	mov	r0, sp
 8004f34:	f104 0310 	add.w	r3, r4, #16
 8004f38:	2260      	movs	r2, #96	; 0x60
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f019 fd23 	bl	801e986 <memcpy>
 8004f40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f44:	f005 fb29 	bl	800a59a <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f48:	e04d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 8004f4a:	4936      	ldr	r1, [pc, #216]	; (8005024 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb4>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7fb f95f 	bl	8000210 <strcmp>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb0a>
 8004f58:	4c33      	ldr	r4, [pc, #204]	; (8005028 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbb8>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	931d      	str	r3, [sp, #116]	; 0x74
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	931c      	str	r3, [sp, #112]	; 0x70
 8004f62:	4668      	mov	r0, sp
 8004f64:	f104 0310 	add.w	r3, r4, #16
 8004f68:	2270      	movs	r2, #112	; 0x70
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f019 fd0b 	bl	801e986 <memcpy>
 8004f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f74:	f005 fd31 	bl	800a9da <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004f78:	e035      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 8004f7a:	492c      	ldr	r1, [pc, #176]	; (800502c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbbc>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7fb f947 	bl	8000210 <strcmp>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb3a>
 8004f88:	4c29      	ldr	r4, [pc, #164]	; (8005030 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc0>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	9321      	str	r3, [sp, #132]	; 0x84
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	9320      	str	r3, [sp, #128]	; 0x80
 8004f92:	4668      	mov	r0, sp
 8004f94:	f104 0310 	add.w	r3, r4, #16
 8004f98:	2280      	movs	r2, #128	; 0x80
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f019 fcf3 	bl	801e986 <memcpy>
 8004fa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fa4:	f005 fb6a 	bl	800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fa8:	e01d      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 8004faa:	4922      	ldr	r1, [pc, #136]	; (8005034 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc4>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7fb f92f 	bl	8000210 <strcmp>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d110      	bne.n	8004fda <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb6a>
 8004fb8:	4c1f      	ldr	r4, [pc, #124]	; (8005038 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbc8>)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	9325      	str	r3, [sp, #148]	; 0x94
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	9324      	str	r3, [sp, #144]	; 0x90
 8004fc2:	4668      	mov	r0, sp
 8004fc4:	f104 0310 	add.w	r3, r4, #16
 8004fc8:	2290      	movs	r2, #144	; 0x90
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f019 fcdb 	bl	801e986 <memcpy>
 8004fd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004fd4:	f005 fd72 	bl	800aabc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 8004fd8:	e005      	b.n	8004fe6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb76>
        else assert(0); // wavelet not in the list
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbcc>)
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd0>)
 8004fde:	2184      	movs	r1, #132	; 0x84
 8004fe0:	4818      	ldr	r0, [pc, #96]	; (8005044 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xbd4>)
 8004fe2:	f018 fb37 	bl	801d654 <__assert_func>
    }
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fec:	080208c8 	.word	0x080208c8
 8004ff0:	08023edc 	.word	0x08023edc
 8004ff4:	080208d0 	.word	0x080208d0
 8004ff8:	08023f6c 	.word	0x08023f6c
 8004ffc:	080208d8 	.word	0x080208d8
 8005000:	08023f8c 	.word	0x08023f8c
 8005004:	080208e0 	.word	0x080208e0
 8005008:	08023fbc 	.word	0x08023fbc
 800500c:	080208e8 	.word	0x080208e8
 8005010:	08023ffc 	.word	0x08023ffc
 8005014:	080208f0 	.word	0x080208f0
 8005018:	0802404c 	.word	0x0802404c
 800501c:	080208f8 	.word	0x080208f8
 8005020:	080240ac 	.word	0x080240ac
 8005024:	08020900 	.word	0x08020900
 8005028:	0802411c 	.word	0x0802411c
 800502c:	08020908 	.word	0x08020908
 8005030:	0802419c 	.word	0x0802419c
 8005034:	08020910 	.word	0x08020910
 8005038:	0802422c 	.word	0x0802422c
 800503c:	08020918 	.word	0x08020918
 8005040:	0802091c 	.word	0x0802091c
 8005044:	08020984 	.word	0x08020984

08005048 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>:
      _Vector_base() = default;
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 fdf8 	bl	800ac48 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>:
      vector() = default;
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ffeb 	bl	8005048 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1Ev>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:

    static void calculate_entropy(const fvec &y, fvec &features)
 800507c:	b580      	push	{r7, lr}
 800507e:	ed2d 8b02 	vpush	{d8}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
    {
        fvec h;
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ffe7 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        histo(y, 100, h, true);
 8005094:	f107 0210 	add.w	r2, r7, #16
 8005098:	2301      	movs	r3, #1
 800509a:	2164      	movs	r1, #100	; 0x64
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff f93a 	bl	8004316 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        // entropy = -sum(prob * log(prob)
        float entropy = 0.0f;
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e035      	b.n	800511a <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x9e>
            if (h[i] > 0.0f) {
 80050ae:	f107 0310 	add.w	r3, r7, #16
 80050b2:	69f9      	ldr	r1, [r7, #28]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f004 ff1a 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050ba:	4603      	mov	r3, r0
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	bfcc      	ite	gt
 80050ca:	2301      	movgt	r3, #1
 80050cc:	2300      	movle	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01f      	beq.n	8005114 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x98>
                entropy -= h[i] * log(h[i]);
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	4618      	mov	r0, r3
 80050dc:	f004 ff07 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050e0:	4603      	mov	r3, r0
 80050e2:	ed93 8a00 	vldr	s16, [r3]
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 fefe 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80050f2:	4603      	mov	r3, r0
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	eeb0 0a67 	vmov.f32	s0, s15
 80050fc:	f7fc f828 	bl	8001150 <_ZSt3logf>
 8005100:	eef0 7a40 	vmov.f32	s15, s0
 8005104:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005108:	ed97 7a03 	vldr	s14, [r7, #12]
 800510c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005110:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t i = 0; i < h.size(); i++) {
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	f107 0310 	add.w	r3, r7, #16
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fd3d 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005124:	4602      	mov	r2, r0
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4293      	cmp	r3, r2
 800512a:	bf34      	ite	cc
 800512c:	2301      	movcc	r3, #1
 800512e:	2300      	movcs	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1bb      	bne.n	80050ae <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x32>
            }
        }
        features.push_back(entropy);
 8005136:	f107 030c 	add.w	r3, r7, #12
 800513a:	4619      	mov	r1, r3
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f005 fd90 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 8005142:	f107 0310 	add.w	r3, r7, #16
 8005146:	4618      	mov	r0, r3
 8005148:	f004 feb6 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	ecbd 8b02 	vpop	{d8}
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	ed87 0a00 	vstr	s0, [r7]
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f004 fd1a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800516a:	4603      	mov	r3, r0
 800516c:	3b01      	subs	r3, #1
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005176:	edd7 7a00 	vldr	s15, [r7]
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	ee17 0a90 	vmov	r0, s15
 8005182:	f7fb fa11 	bl	80005a8 <__aeabi_f2d>
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x64>)
 800518c:	f7fb f8ae 	bl	80002ec <__adddf3>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	f7fb fd36 	bl	8000c08 <__aeabi_d2uiz>
 800519c:	4603      	mov	r3, r0
 800519e:	60fb      	str	r3, [r7, #12]
        return sorted[index];
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f004 ff7d 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80051a8:	4603      	mov	r3, r0
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	ee07 3a90 	vmov	s15, r3
    }
 80051b0:	eeb0 0a67 	vmov.f32	s0, s15
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	3fe00000 	.word	0x3fe00000

080051c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b097      	sub	sp, #92	; 0x5c
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        fvec sorted = y;
 80051ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 ff74 	bl	800a0c2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>
        std::sort(sorted.begin(), sorted.end());
 80051da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 fdfb 	bl	8009dda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 80051e4:	4604      	mov	r4, r0
 80051e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 fe05 	bl	8009dfa <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4619      	mov	r1, r3
 80051f4:	4620      	mov	r0, r4
 80051f6:	f004 fef4 	bl	8009fe2 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 80051fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051fe:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8005400 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x240>
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff ffa8 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005208:	eef0 7a40 	vmov.f32	s15, s0
 800520c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8005210:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005214:	4619      	mov	r1, r3
 8005216:	68b8      	ldr	r0, [r7, #8]
 8005218:	f005 fd48 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 800521c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005220:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff97 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8005232:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005236:	4619      	mov	r1, r3
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f005 fd37 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 800523e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005242:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff86 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800524c:	eef0 7a40 	vmov.f32	s15, s0
 8005250:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8005254:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005258:	4619      	mov	r1, r3
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f005 fd26 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 8005260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005264:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8005404 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x244>
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff ff75 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 800526e:	eef0 7a40 	vmov.f32	s15, s0
 8005272:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8005276:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800527a:	4619      	mov	r1, r3
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f005 fd15 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 8005282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005286:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff64 	bl	8005158 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 8005290:	eef0 7a40 	vmov.f32	s15, s0
 8005294:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800529c:	4619      	mov	r1, r3
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f005 fd04 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f004 fc7a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80052aa:	4604      	mov	r4, r0
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f004 fea8 	bl	800a002 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052b8:	4622      	mov	r2, r4
 80052ba:	2101      	movs	r1, #1
 80052bc:	f7fc f963 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 80052c0:	f107 0014 	add.w	r0, r7, #20
 80052c4:	2300      	movs	r3, #0
 80052c6:	2201      	movs	r2, #1
 80052c8:	2101      	movs	r1, #1
 80052ca:	f7fc f95c 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

        features.push_back(mean);
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	68b8      	ldr	r0, [r7, #8]
 80052d4:	f005 fcc5 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::stdev(&x, &out) == EIDSP_OK)
 80052d8:	f107 0214 	add.w	r2, r7, #20
 80052dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fc52 	bl	8001b8c <_ZN2ei5numpy5stdevEPNS_9ei_matrixES2_>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14e>
            features.push_back(out.get_row_ptr(0)[0]);
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc f982 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005304:	4603      	mov	r3, r0
 8005306:	4619      	mov	r1, r3
 8005308:	68b8      	ldr	r0, [r7, #8]
 800530a:	f005 fcaa 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        features.push_back(numpy::variance(const_cast<float *>(y.data()), y.size()));
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f004 fe77 	bl	800a002 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005314:	4604      	mov	r4, r0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f004 fc41 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800531c:	4603      	mov	r3, r0
 800531e:	4619      	mov	r1, r3
 8005320:	4620      	mov	r0, r4
 8005322:	f7fd fcbf 	bl	8002ca4 <_ZN2ei5numpy8varianceEPfj>
 8005326:	eef0 7a40 	vmov.f32	s15, s0
 800532a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 800532e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005332:	4619      	mov	r1, r3
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	f005 fcb9 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 800533a:	f107 0214 	add.w	r2, r7, #20
 800533e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fba9 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b0>
            features.push_back(out.get_row_ptr(0)[0]);
 800535a:	f107 0314 	add.w	r3, r7, #20
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f7fc f951 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005366:	4603      	mov	r3, r0
 8005368:	4619      	mov	r1, r3
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f005 fc79 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 8005370:	f107 0214 	add.w	r2, r7, #20
 8005374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f7fc fc5e 	bl	8001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1e6>
            features.push_back(out.get_row_ptr(0)[0]);
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	2100      	movs	r1, #0
 8005396:	4618      	mov	r0, r3
 8005398:	f7fc f936 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800539c:	4603      	mov	r3, r0
 800539e:	4619      	mov	r1, r3
 80053a0:	68b8      	ldr	r0, [r7, #8]
 80053a2:	f005 fc5e 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 80053a6:	f107 0214 	add.w	r2, r7, #20
 80053aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fc fcdf 	bl	8001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x21c>
            features.push_back(out.get_row_ptr(0)[0]);
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fc f91b 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4619      	mov	r1, r3
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f005 fc43 	bl	800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
    }
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc f8fb 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80053e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc f8f6 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80053f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 fd5f 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80053fa:	375c      	adds	r7, #92	; 0x5c
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd90      	pop	{r4, r7, pc}
 8005400:	3d4ccccd 	.word	0x3d4ccccd
 8005404:	3f733333 	.word	0x3f733333

08005408 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:

    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 8005408:	b580      	push	{r7, lr}
 800540a:	ed2d 8b02 	vpush	{d8}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        size_t zc = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 800541e:	2301      	movs	r3, #1
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e021      	b.n	8005468 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x60>
            if (y[i] * y[i - 1] < 0) {
 8005424:	6a39      	ldr	r1, [r7, #32]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f004 fe3b 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800542c:	4603      	mov	r3, r0
 800542e:	ed93 8a00 	vldr	s16, [r3]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	3b01      	subs	r3, #1
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f004 fe32 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800543e:	4603      	mov	r3, r0
 8005440:	edd3 7a00 	vldr	s15, [r3]
 8005444:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800544c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005450:	bf4c      	ite	mi
 8005452:	2301      	movmi	r3, #1
 8005454:	2300      	movpl	r3, #0
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x5a>
                zc++;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	3301      	adds	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
        for (size_t i = 1; i < y.size(); i++) {
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	3301      	adds	r3, #1
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f004 fb98 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800546e:	4602      	mov	r2, r0
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	4293      	cmp	r3, r2
 8005474:	bf34      	ite	cc
 8005476:	2301      	movcc	r3, #1
 8005478:	2300      	movcs	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1d1      	bne.n	8005424 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
            }
        }
        features.push_back(zc / (float)y.size());
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f004 fb87 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005490:	ee07 0a90 	vmov	s15, r0
 8005494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005498:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800549c:	edc7 7a04 	vstr	s15, [r7, #16]
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f005 fc00 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>

        size_t mc = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 80054b0:	2301      	movs	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e029      	b.n	800550a <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x102>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f004 fdf2 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054be:	4603      	mov	r3, r0
 80054c0:	ed93 7a00 	vldr	s14, [r3]
 80054c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80054c8:	ee37 8a67 	vsub.f32	s16, s14, s15
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f004 fde5 	bl	800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80054d8:	4603      	mov	r3, r0
 80054da:	ed93 7a00 	vldr	s14, [r3]
 80054de:	edd7 7a01 	vldr	s15, [r7, #4]
 80054e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80054ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	bf4c      	ite	mi
 80054f4:	2301      	movmi	r3, #1
 80054f6:	2300      	movpl	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xfc>
                mc++;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
        for (size_t i = 1; i < y.size(); i++) {
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	3301      	adds	r3, #1
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f004 fb47 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005510:	4602      	mov	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4293      	cmp	r3, r2
 8005516:	bf34      	ite	cc
 8005518:	2301      	movcc	r3, #1
 800551a:	2300      	movcs	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1c9      	bne.n	80054b6 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xae>
            }
        }
        features.push_back(mc / (float)y.size());
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f004 fb36 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005532:	ee07 0a90 	vmov	s15, r0
 8005536:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800553a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800553e:	edc7 7a05 	vstr	s15, [r7, #20]
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4619      	mov	r1, r3
 8005548:	68b8      	ldr	r0, [r7, #8]
 800554a:	f005 fbaf 	bl	800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>
    }
 800554e:	bf00      	nop
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	ecbd 8b02 	vpop	{d8}
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b090      	sub	sp, #64	; 0x40
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 800556a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556c:	2b14      	cmp	r3, #20
 800556e:	d805      	bhi.n	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x20>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d105      	bne.n	8005588 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c>
 800557c:	4b67      	ldr	r3, [pc, #412]	; (800571c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c0>)
 800557e:	4a68      	ldr	r2, [pc, #416]	; (8005720 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c4>)
 8005580:	21cb      	movs	r1, #203	; 0xcb
 8005582:	4868      	ldr	r0, [pc, #416]	; (8005724 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c8>)
 8005584:	f018 f866 	bl	801d654 <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 8005588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558a:	005a      	lsls	r2, r3, #1
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4413      	add	r3, r2
 8005590:	3b02      	subs	r3, #2
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        fvec x_padded(nx_padded);
 8005594:	f107 0220 	add.w	r2, r7, #32
 8005598:	f107 0314 	add.w	r3, r7, #20
 800559c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fc70 	bl	8009e84 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a8:	e012      	b.n	80055d0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x74>
            x_padded[i] = x[nh - 3 - i];
 80055aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	3b03      	subs	r3, #3
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	18d4      	adds	r4, r2, r3
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055be:	4618      	mov	r0, r3
 80055c0:	f004 fc95 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh - 2; i++)
 80055ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055cc:	3301      	adds	r3, #1
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d2:	3b02      	subs	r3, #2
 80055d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3e7      	bcc.n	80055aa <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e>
        for (size_t i = 0; i < nx; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055de:	e013      	b.n	8005608 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
            x_padded[i + nh - 2] = x[i];
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	18d4      	adds	r4, r2, r3
 80055e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ec:	4413      	add	r3, r2
 80055ee:	1e9a      	subs	r2, r3, #2
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 fc79 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nx; i++)
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	3301      	adds	r3, #1
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
 8005608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d3e7      	bcc.n	80055e0 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x84>
        for (size_t i = 0; i < nh; i++)
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
 8005614:	e018      	b.n	8005648 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xec>
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	18d4      	adds	r4, r2, r3
 8005624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	441a      	add	r2, r3
 800562a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800562c:	4413      	add	r3, r2
 800562e:	1e9a      	subs	r2, r3, #2
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f004 fc59 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800563c:	4602      	mov	r2, r0
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < nh; i++)
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	3301      	adds	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	429a      	cmp	r2, r3
 800564e:	d3e2      	bcc.n	8005616 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xba>

        size_t ny = (nx + nh - 1) / 2;
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	4413      	add	r3, r2
 8005656:	3b01      	subs	r3, #1
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
        a.resize(ny);
 800565c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005660:	f004 fe6b 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 8005664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005666:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005668:	f004 fe67 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
 800566c:	f107 0314 	add.w	r3, r7, #20
 8005670:	4618      	mov	r0, r3
 8005672:	f004 faa4 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005676:	6278      	str	r0, [r7, #36]	; 0x24
        for (size_t i = 0; i < ny; i++) {
 8005678:	2300      	movs	r3, #0
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	e026      	b.n	80056cc <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x170>
            a[i] = dot(xx + 2 * i, h, nh);
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	18d5      	adds	r5, r2, r3
 8005686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005688:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800568a:	f004 fc30 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800568e:	4604      	mov	r4, r0
 8005690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4628      	mov	r0, r5
 8005696:	f7fe fe0d 	bl	80042b4 <_ZN2ei8spectral3dotEPKfS2_j>
 800569a:	eef0 7a40 	vmov.f32	s15, s0
 800569e:	edc4 7a00 	vstr	s15, [r4]
            d[i] = dot(xx + 2 * i, g, nh);
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	18d5      	adds	r5, r2, r3
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056ae:	f004 fc1e 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 80056b2:	4604      	mov	r4, r0
 80056b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7fe fdfb 	bl	80042b4 <_ZN2ei8spectral3dotEPKfS2_j>
 80056be:	eef0 7a40 	vmov.f32	s15, s0
 80056c2:	edc4 7a00 	vstr	s15, [r4]
        for (size_t i = 0; i < ny; i++) {
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	3301      	adds	r3, #1
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
 80056cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3d4      	bcc.n	800567e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x122>
        }

        numpy::underflow_handling(d.data(), d.size());
 80056d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056d6:	f004 fa72 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056da:	4604      	mov	r4, r0
 80056dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80056de:	f004 fa5e 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056e2:	4603      	mov	r3, r0
 80056e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005728 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 80056e8:	4619      	mov	r1, r3
 80056ea:	4620      	mov	r0, r4
 80056ec:	f7fd fb18 	bl	8002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>
        numpy::underflow_handling(a.data(), a.size());
 80056f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056f2:	f004 fa64 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80056f6:	4604      	mov	r4, r0
 80056f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80056fa:	f004 fa50 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80056fe:	4603      	mov	r3, r0
 8005700:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005728 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1cc>
 8005704:	4619      	mov	r1, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f7fd fb0a 	bl	8002d20 <_ZN2ei5numpy18underflow_handlingEPfjf>
    }
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	4618      	mov	r0, r3
 8005712:	f004 fbd1 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005716:	3740      	adds	r7, #64	; 0x40
 8005718:	46bd      	mov	sp, r7
 800571a:	bdb0      	pop	{r4, r5, r7, pc}
 800571c:	08020a04 	.word	0x08020a04
 8005720:	08020a24 	.word	0x08020a24
 8005724:	08020984 	.word	0x08020984
 8005728:	33d6bf95 	.word	0x33d6bf95

0800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b08d      	sub	sp, #52	; 0x34
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f004 fa31 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800573c:	4604      	mov	r4, r0
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f004 fa3d 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005744:	4603      	mov	r3, r0
 8005746:	f107 001c 	add.w	r0, r7, #28
 800574a:	4622      	mov	r2, r4
 800574c:	2101      	movs	r1, #1
 800574e:	f7fb ff1a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 8005752:	f107 000c 	add.w	r0, r7, #12
 8005756:	2300      	movs	r3, #0
 8005758:	2201      	movs	r2, #1
 800575a:	2101      	movs	r1, #1
 800575c:	f7fb ff13 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 8005760:	f107 020c 	add.w	r2, r7, #12
 8005764:	f107 031c 	add.w	r3, r7, #28
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc f9d2 	bl	8001b14 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x60>
            assert(0);
 8005780:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xac>)
 8005782:	4a16      	ldr	r2, [pc, #88]	; (80057dc <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb0>)
 8005784:	21eb      	movs	r1, #235	; 0xeb
 8005786:	4816      	ldr	r0, [pc, #88]	; (80057e0 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0xb4>)
 8005788:	f017 ff64 	bl	801d654 <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 800578c:	f107 030c 	add.w	r3, r7, #12
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f7fb ff38 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005798:	4603      	mov	r3, r0
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c

        calculate_entropy(y, features);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fc6b 	bl	800507c <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 80057a6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fe2b 	bl	8005408 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 80057b2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff fd01 	bl	80051c0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
    }
 80057be:	f107 030c 	add.w	r3, r7, #12
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fb ff0a 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80057c8:	f107 031c 	add.w	r3, r7, #28
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fb ff05 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80057d2:	3734      	adds	r7, #52	; 0x34
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd90      	pop	{r4, r7, pc}
 80057d8:	08020918 	.word	0x08020918
 80057dc:	08020ab0 	.word	0x08020ab0
 80057e0:	08020984 	.word	0x08020984

080057e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 80057e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e8:	b098      	sub	sp, #96	; 0x60
 80057ea:	af04      	add	r7, sp, #16
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
    {
        assert(level > 0 && level < 8);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd02      	ble.n	8005800 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1c>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	dd05      	ble.n	800580c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x28>
 8005800:	4b6e      	ldr	r3, [pc, #440]	; (80059bc <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1d8>)
 8005802:	4a6f      	ldr	r2, [pc, #444]	; (80059c0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1dc>)
 8005804:	21f6      	movs	r1, #246	; 0xf6
 8005806:	486f      	ldr	r0, [pc, #444]	; (80059c4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x1e0>)
 8005808:	f017 ff24 	bl	801d654 <__assert_func>

        fvec h;
 800580c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fc26 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec g;
 8005816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fc21 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        find_filter(wav, h, g);
 8005820:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe fe20 	bl	8004470 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>

        features.clear();
 8005830:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005832:	f005 fa4c 	bl	800acce <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>
        fvec a;
 8005836:	f107 0320 	add.w	r3, r7, #32
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fc11 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        fvec d;
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fc0c 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 800584a:	68bc      	ldr	r4, [r7, #8]
 800584c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005850:	4618      	mov	r0, r3
 8005852:	f004 f9b4 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005856:	4605      	mov	r5, r0
 8005858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800585c:	4618      	mov	r0, r3
 800585e:	f004 f9ae 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005862:	4606      	mov	r6, r0
 8005864:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005868:	4618      	mov	r0, r3
 800586a:	f004 f998 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800586e:	4602      	mov	r2, r0
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	f107 0320 	add.w	r3, r7, #32
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	9200      	str	r2, [sp, #0]
 800587e:	4633      	mov	r3, r6
 8005880:	462a      	mov	r2, r5
 8005882:	4621      	mov	r1, r4
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fe69 	bl	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 800588a:	f107 0314 	add.w	r3, r7, #20
 800588e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff4b 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 8005896:	2301      	movs	r3, #1
 8005898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589a:	e033      	b.n	8005904 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x120>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 800589c:	f107 0320 	add.w	r3, r7, #32
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 f98c 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058a6:	4604      	mov	r4, r0
 80058a8:	f107 0320 	add.w	r3, r7, #32
 80058ac:	4618      	mov	r0, r3
 80058ae:	f004 f976 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058b2:	4605      	mov	r5, r0
 80058b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058b8:	4618      	mov	r0, r3
 80058ba:	f004 f980 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058be:	4606      	mov	r6, r0
 80058c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058c4:	4618      	mov	r0, r3
 80058c6:	f004 f97a 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 80058ca:	4680      	mov	r8, r0
 80058cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058d0:	4618      	mov	r0, r3
 80058d2:	f004 f964 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80058d6:	4602      	mov	r2, r0
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	9302      	str	r3, [sp, #8]
 80058de:	f107 0320 	add.w	r3, r7, #32
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	4643      	mov	r3, r8
 80058e8:	4632      	mov	r2, r6
 80058ea:	4629      	mov	r1, r5
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff fe35 	bl	800555c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 80058f2:	f107 0314 	add.w	r3, r7, #20
 80058f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff17 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 80058fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005900:	3301      	adds	r3, #1
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	dbc7      	blt.n	800589c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb8>
        }

        extract_features(a, features);
 800590c:	f107 0320 	add.w	r3, r7, #32
 8005910:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff ff0a 	bl	800572c <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005918:	2300      	movs	r3, #0
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
 800591c:	e02c      	b.n	8005978 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x194>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 800591e:	2300      	movs	r3, #0
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
 8005922:	e023      	b.n	800596c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x188>
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	4613      	mov	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	461a      	mov	r2, r3
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	4413      	add	r3, r2
 8005934:	4619      	mov	r1, r3
 8005936:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005938:	f004 fad9 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800593c:	4604      	mov	r4, r0
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	461a      	mov	r2, r3
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	461a      	mov	r2, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005952:	4413      	add	r3, r2
 8005954:	4619      	mov	r1, r3
 8005956:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005958:	f004 fac9 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800595c:	4603      	mov	r3, r0
                std::swap(
 800595e:	4619      	mov	r1, r3
 8005960:	4620      	mov	r0, r4
 8005962:	f005 f9cd 	bl	800ad00 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	3301      	adds	r3, #1
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	2b0d      	cmp	r3, #13
 8005970:	ddd8      	ble.n	8005924 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x140>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005974:	3301      	adds	r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	da00      	bge.n	8005980 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x19c>
 800597e:	3301      	adds	r3, #1
 8005980:	105b      	asrs	r3, r3, #1
 8005982:	461a      	mov	r2, r3
 8005984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005986:	4293      	cmp	r3, r2
 8005988:	ddc9      	ble.n	800591e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x13a>
            }
        }
    }
 800598a:	f107 0314 	add.w	r3, r7, #20
 800598e:	4618      	mov	r0, r3
 8005990:	f004 fa92 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005994:	f107 0320 	add.w	r3, r7, #32
 8005998:	4618      	mov	r0, r3
 800599a:	f004 fa8d 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 800599e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fa88 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059ac:	4618      	mov	r0, r3
 80059ae:	f004 fa83 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 80059b2:	3750      	adds	r7, #80	; 0x50
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ba:	bf00      	nop
 80059bc:	08020b10 	.word	0x08020b10
 80059c0:	08020b28 	.word	0x08020b28
 80059c4:	08020984 	.word	0x08020984

080059c8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static int dwt_features(const float *x, int len, const char *wav, int level, fvec &features)
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
    {
        assert(level <= 7);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b07      	cmp	r3, #7
 80059da:	dd06      	ble.n	80059ea <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>)
 80059de:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80059e4:	4817      	ldr	r0, [pc, #92]	; (8005a44 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 80059e6:	f017 fe35 	bl	801d654 <__assert_func>

        assert(features.size() == 0); // make sure features is empty
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f004 f8d7 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x3c>
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x80>)
 80059f8:	4a11      	ldr	r2, [pc, #68]	; (8005a40 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x78>)
 80059fa:	f44f 718b 	mov.w	r1, #278	; 0x116
 80059fe:	4811      	ldr	r0, [pc, #68]	; (8005a44 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x7c>)
 8005a00:	f017 fe28 	bl	801d654 <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4619      	mov	r1, r3
 8005a14:	69b8      	ldr	r0, [r7, #24]
 8005a16:	f005 f9a9 	bl	800ad6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>

        wavedec_features(x, len, wav, level, features);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fedd 	bl	80057e4 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>

        return features.size();
 8005a2a:	69b8      	ldr	r0, [r7, #24]
 8005a2c:	f004 f8b7 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8005a30:	4603      	mov	r3, r0
    }
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	08020b98 	.word	0x08020b98
 8005a40:	08020ba4 	.word	0x08020ba4
 8005a44:	08020984 	.word	0x08020984
 8005a48:	08020c10 	.word	0x08020c10

08005a4c <_ZN2ei8spectral7wavelet14check_min_sizeEii>:

    static bool check_min_size(int len, int level)
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
    {
        int min_size = 32 * (1 << level);
 8005a56:	2220      	movs	r2, #32
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	60fb      	str	r3, [r7, #12]
        return (len >= min_size);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	bfac      	ite	ge
 8005a68:	2301      	movge	r3, #1
 8005a6a:	2300      	movlt	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
    }
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

public:
    static int extract_wavelet_features(
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b094      	sub	sp, #80	; 0x50
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7fb fe1f 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a98:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7fb ff27 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8005aa2:	63b8      	str	r0, [r7, #56]	; 0x38
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x32>
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	e0b0      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4959      	ldr	r1, [pc, #356]	; (8005c18 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fbab 	bl	8000210 <strcmp>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d117      	bne.n	8005af0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x74>
            if (config->filter_order) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d034      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	eef0 0a67 	vmov.f32	s1, s15
 8005ada:	ed97 0a00 	vldr	s0, [r7]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7fd fe42 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8005ae4:	6338      	str	r0, [r7, #48]	; 0x30
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d022      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	e08f      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	4949      	ldr	r1, [pc, #292]	; (8005c1c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fa fb8a 	bl	8000210 <strcmp>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d117      	bne.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
            if (config->filter_order) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4619      	mov	r1, r3
 8005b18:	eef0 0a67 	vmov.f32	s1, s15
 8005b1c:	ed97 0a00 	vldr	s0, [r7]
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7fd fe57 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8005b26:	6378      	str	r0, [r7, #52]	; 0x34
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb6>
 8005b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b30:	e06e      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7fe fb86 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005b38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc8>
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	e065      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

        int out_idx = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005b48:	2300      	movs	r3, #0
 8005b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b4c:	e05a      	b.n	8005c04 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>
            float *data_window = input_matrix->get_row_ptr(row);
 8005b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7fb fd59 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8005b56:	62b8      	str	r0, [r7, #40]	; 0x28
            size_t data_size = input_matrix->cols;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24

            if (!check_min_size(data_size, config->wavelet_level))
 8005b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7ff ff70 	bl	8005a4c <_ZN2ei8spectral7wavelet14check_min_sizeEii>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f083 0301 	eor.w	r3, r3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8005b78:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 8005b7a:	e049      	b.n	8005c10 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>

            fvec features;
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff fa6e 	bl	8005062 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1Ev>
            size_t num_features = dwt_features(
 8005b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	4603      	mov	r3, r0
 8005b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9a:	f7ff ff15 	bl	80059c8 <_ZN2ei8spectral7wavelet12dwt_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
 8005b9e:	4603      	mov	r3, r0
                data_window,
                data_size,
                config->wavelet,
                config->wavelet_level,
                features);
 8005ba0:	623b      	str	r3, [r7, #32]

            assert(num_features == output_matrix->cols / input_matrix->rows);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d006      	beq.n	8005bc2 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x146>
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a8>)
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1ac>)
 8005bb8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bbc:	481b      	ldr	r0, [pc, #108]	; (8005c2c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b0>)
 8005bbe:	f017 fd49 	bl	801d654 <__assert_func>
            for (size_t i = 0; i < num_features; i++) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc6:	e011      	b.n	8005bec <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f004 f98d 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	6479      	str	r1, [r7, #68]	; 0x44
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	6802      	ldr	r2, [r0, #0]
 8005be4:	601a      	str	r2, [r3, #0]
            for (size_t i = 0; i < num_features; i++) {
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	3301      	adds	r3, #1
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3e9      	bcc.n	8005bc8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>
            }
        }
 8005bf4:	f107 0314 	add.w	r3, r7, #20
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 f95d 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	3301      	adds	r3, #1
 8005c02:	643b      	str	r3, [r7, #64]	; 0x40
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d39f      	bcc.n	8005b4e <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd2>
        return EIDSP_OK;
 8005c0e:	2300      	movs	r3, #0
    }
 8005c10:	4618      	mov	r0, r3
 8005c12:	3748      	adds	r7, #72	; 0x48
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	08020c28 	.word	0x08020c28
 8005c1c:	08020c2c 	.word	0x08020c2c
 8005c20:	fffffc11 	.word	0xfffffc11
 8005c24:	08020c34 	.word	0x08020c34
 8005c28:	08020c70 	.word	0x08020c70
 8005c2c:	08020984 	.word	0x08020984

08005c30 <_ZN2ei6signal18get_decimated_sizeEjj>:
        for (size_t ix = 0; ix < output_size; ix++) {
            output[ix] = filtered[ix * factor];
        }
    }

    static size_t get_decimated_size(size_t input_size, size_t factor)
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
    {
        return (input_size + factor - 1) / factor;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4413      	add	r3, r2
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
    }
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <_ZN2ei6signal7sosfiltC1EPKfS3_j>:
        const float *coeff; // 6 * num_sections coefficients
        float* zi;
        fvec zi_vec; // 2 * num_sections initial conditions
        size_t num_sections;

        sosfilt(const float *coeff_, const float *zi_, size_t num_sections_)
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
            : coeff(coeff_),
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	601a      	str	r2, [r3, #0]
              zi_vec(zi_, zi_ + (num_sections_ * 2)),
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f103 0008 	add.w	r0, r3, #8
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	f107 0314 	add.w	r3, r7, #20
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	f005 f8f6 	bl	800ae6c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>
              num_sections(num_sections_)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	615a      	str	r2, [r3, #20]
        {
            zi = zi_vec.data();
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 ff97 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
        }
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZN2ei6signal7sosfilt3runEPKfjPf>:
         * This is the counterpart of scipy.signal.sosfilt .
         * @param input Input signal
         * @param output Output signal. Can be the same as input for in place
         * @param x_size Minimum size of input and output signal
         */
        void run(const float *input, const size_t size, float* output)
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
        {
            assert(num_sections > 0);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d105      	bne.n	8005cc2 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x22>
 8005cb6:	4b21      	ldr	r3, [pc, #132]	; (8005d3c <_ZN2ei6signal7sosfilt3runEPKfjPf+0x9c>)
 8005cb8:	4a21      	ldr	r2, [pc, #132]	; (8005d40 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa0>)
 8005cba:	216e      	movs	r1, #110	; 0x6e
 8005cbc:	4821      	ldr	r0, [pc, #132]	; (8005d44 <_ZN2ei6signal7sosfilt3runEPKfjPf+0xa4>)
 8005cbe:	f017 fcc9 	bl	801d654 <__assert_func>

            iir2(input, output, size, coeff, coeff + 3, zi);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6819      	ldr	r1, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	6852      	ldr	r2, [r2, #4]
 8005cd0:	9201      	str	r2, [sp, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f000 f8cc 	bl	8005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>

            for (size_t sect = 1; sect < num_sections; sect++) {
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e020      	b.n	8005d28 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x88>
                iir2(
                    output,
                    output,
                    size,
                    coeff + sect * 6,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6819      	ldr	r1, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
                iir2(
 8005cf4:	18c8      	adds	r0, r1, r3
                    coeff + sect * 6 + 3,
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	330c      	adds	r3, #12
                iir2(
 8005d06:	440b      	add	r3, r1
                    zi + sect * 2);
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	6851      	ldr	r1, [r2, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	00d2      	lsls	r2, r2, #3
                iir2(
 8005d10:	440a      	add	r2, r1
 8005d12:	9201      	str	r2, [sp, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4603      	mov	r3, r0
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6838      	ldr	r0, [r7, #0]
 8005d1e:	f000 f8ab 	bl	8005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	3301      	adds	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3d9      	bcc.n	8005ce6 <_ZN2ei6signal7sosfilt3runEPKfjPf+0x46>
            }
        }
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	08020cf4 	.word	0x08020cf4
 8005d40:	08020d08 	.word	0x08020d08
 8005d44:	08020d44 	.word	0x08020d44

08005d48 <_ZN2ei6signal7sosfilt4initEf>:

        void init(float x0)
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	ed87 0a00 	vstr	s0, [r7]
        {
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e028      	b.n	8005dac <_ZN2ei6signal7sosfilt4initEf+0x64>
                zi[sect * 2] *= x0;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	ed93 7a00 	vldr	s14, [r3]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	edd7 7a00 	vldr	s15, [r7]
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc3 7a00 	vstr	s15, [r3]
                zi[sect * 2 + 1] *= x0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	3304      	adds	r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	3304      	adds	r3, #4
 8005d98:	4413      	add	r3, r2
 8005d9a:	edd7 7a00 	vldr	s15, [r7]
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t sect = 0; sect < num_sections; sect++) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3d1      	bcc.n	8005d5a <_ZN2ei6signal7sosfilt4initEf+0x12>
            }
        }
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>:
     * @param input Input signal
     * @param output Output signal
     * @param factor Decimation factor
     * @param sos Second-order section
     */
    static void decimate_simple(
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
        float *output,
        const size_t output_size,
        size_t factor,
        sosfilt &sos)
    {
        sos.init(input[0]);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dde:	f7ff ffb3 	bl	8005d48 <_ZN2ei6signal7sosfilt4initEf>

        fvec filtered(input_size);
 8005de2:	f107 021c 	add.w	r2, r7, #28
 8005de6:	f107 0310 	add.w	r3, r7, #16
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f004 f849 	bl	8009e84 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
        sos.run(input, input_size, filtered.data());
 8005df2:	f107 0310 	add.w	r3, r7, #16
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fee1 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e04:	f7ff ff4c 	bl	8005ca0 <_ZN2ei6signal7sosfilt3runEPKfjPf>

        size_t expected_size = get_decimated_size(input_size, factor);
 8005e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	f7ff ff10 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8005e10:	6238      	str	r0, [r7, #32]
        assert(output_size >= expected_size);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d205      	bcs.n	8005e26 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x62>
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xa8>)
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xac>)
 8005e1e:	219c      	movs	r1, #156	; 0x9c
 8005e20:	4814      	ldr	r0, [pc, #80]	; (8005e74 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0xb0>)
 8005e22:	f017 fc17 	bl	801d654 <__assert_func>

        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e013      	b.n	8005e54 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x90>
            output[ix] = filtered[ix * factor];
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e30:	fb03 f202 	mul.w	r2, r3, r2
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f004 f857 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8005e40:	4601      	mov	r1, r0
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	680a      	ldr	r2, [r1, #0]
 8005e4c:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < expected_size; ix++) {
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	3301      	adds	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3e7      	bcc.n	8005e2c <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE+0x68>
        }
    }
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	f004 f829 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	08020dc0 	.word	0x08020dc0
 8005e70:	08020de0 	.word	0x08020de0
 8005e74:	08020d44 	.word	0x08020d44

08005e78 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e94:	edc7 7a06 	vstr	s15, [r7, #24]
        for (size_t ix = 0; ix < n; ix++) {
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e063      	b.n	8005f66 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0xee>
            const float xx = x[ix];
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
            y[ix] = b[0] * xx + d[0];
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	ed93 7a00 	vldr	s14, [r3]
 8005eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eca:	edc3 7a00 	vstr	s15, [r3]
            y[ix] *= one_over_a0;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	ed93 7a00 	vldr	s14, [r3]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc3 7a00 	vstr	s15, [r3]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	ed93 7a00 	vldr	s14, [r3]
 8005ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	3304      	adds	r3, #4
 8005f02:	edd3 6a00 	vldr	s13, [r3]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	edd3 7a00 	vldr	s15, [r3]
 8005f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	edd3 7a00 	vldr	s15, [r3]
 8005f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	edc3 7a00 	vstr	s15, [r3]
            d[1] = b[2] * xx - a[2] * y[ix];
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	ed93 7a00 	vldr	s14, [r3]
 8005f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	3308      	adds	r3, #8
 8005f40:	edd3 6a00 	vldr	s13, [r3]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	edd3 7a00 	vldr	s15, [r3]
 8005f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	3304      	adds	r3, #4
 8005f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f5c:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < n; ix++) {
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d397      	bcc.n	8005e9e <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x26>
        }
    }
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	3724      	adds	r7, #36	; 0x24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8005f7c:	b5b0      	push	{r4, r5, r7, lr}
 8005f7e:	b0b0      	sub	sp, #192	; 0xc0
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	6178      	str	r0, [r7, #20]
 8005f84:	6139      	str	r1, [r7, #16]
 8005f86:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f90:	461a      	mov	r2, r3
 8005f92:	ed87 1a00 	vstr	s2, [r7]
 8005f96:	460b      	mov	r3, r1
 8005f98:	72fb      	strb	r3, [r7, #11]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d001      	beq.n	8005fae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005faa:	4cbe      	ldr	r4, [pc, #760]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fac:	e227      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	689d      	ldr	r5, [r3, #8]
 8005fb2:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8005fb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	f000 fa22 	bl	8006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	429d      	cmp	r5, r3
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fd4:	4cb3      	ldr	r4, [pc, #716]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fd6:	e212      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        if (edges_matrix_in->cols != 1) {
 8005fd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8005fe2:	4cb0      	ldr	r4, [pc, #704]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8005fe4:	e20b      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        EI_TRY(processing::subtract_mean(input_matrix) );
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	f7fe f928 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 8005ff4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8005ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8a>
 8006000:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8006004:	e1fb      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>

        // apply filter
        if (filter_type == filter_lowpass) {
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d110      	bne.n	800602e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xb2>
            ret = spectral::processing::butterworth_lowpass_filter(
 800600c:	7abb      	ldrb	r3, [r7, #10]
 800600e:	4619      	mov	r1, r3
 8006010:	edd7 0a01 	vldr	s1, [r7, #4]
 8006014:	ed97 0a03 	vldr	s0, [r7, #12]
 8006018:	6938      	ldr	r0, [r7, #16]
 800601a:	f7fd fba5 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800601e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8006022:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d015      	beq.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800602a:	4c9e      	ldr	r4, [pc, #632]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800602c:	e1e7      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }
        else if (filter_type == filter_highpass) {
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d110      	bne.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
            ret = spectral::processing::butterworth_highpass_filter(
 8006034:	7abb      	ldrb	r3, [r7, #10]
 8006036:	4619      	mov	r1, r3
 8006038:	edd7 0a01 	vldr	s1, [r7, #4]
 800603c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006040:	6938      	ldr	r0, [r7, #16]
 8006042:	f7fd fbc7 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006046:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800604a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xda>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006052:	4c94      	ldr	r4, [pc, #592]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006054:	e1d3      	b.n	80063fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x482>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8006056:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800605a:	2300      	movs	r3, #0
 800605c:	2201      	movs	r2, #1
 800605e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006062:	f7fb fa90 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf6>
 800606e:	4c8e      	ldr	r4, [pc, #568]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006070:	e1c0      	b.n	80063f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8006072:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006076:	4619      	mov	r1, r3
 8006078:	6938      	ldr	r0, [r7, #16]
 800607a:	f7fb fd0f 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800607e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (ret != EIDSP_OK) {
 8006082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x112>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800608a:	4c86      	ldr	r4, [pc, #536]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800608c:	e1b2      	b.n	80063f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 800608e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	461a      	mov	r2, r3
 8006096:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800609a:	2300      	movs	r3, #0
 800609c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060a0:	f7fb fa71 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x132>
 80060aa:	4c7f      	ldr	r4, [pc, #508]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060ac:	e19d      	b.n	80063ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	e191      	b.n	80063da <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45e>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	689d      	ldr	r5, [r3, #8]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80060d2:	462a      	mov	r2, r5
 80060d4:	2101      	movs	r1, #1
 80060d6:	f7fb fa56 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
 80060e0:	4c71      	ldr	r4, [pc, #452]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80060e2:	2500      	movs	r5, #0
 80060e4:	e16d      	b.n	80063c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80060e6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	461a      	mov	r2, r3
 80060f2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80060f6:	2300      	movs	r3, #0
 80060f8:	2101      	movs	r1, #1
 80060fa:	f7fb fa44 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80060fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x18e>
 8006104:	4c68      	ldr	r4, [pc, #416]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 8006106:	2500      	movs	r5, #0
 8006108:	e151      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 800610a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800610c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800610e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006110:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8006112:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	462b      	mov	r3, r5
 800611a:	f7fb feaf 	bl	8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj>
 800611e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (ret != EIDSP_OK) {
 8006122:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1b4>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800612a:	4c5e      	ldr	r4, [pc, #376]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 800612c:	2500      	movs	r5, #0
 800612e:	e13e      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8006130:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006134:	ee07 3a90 	vmov	s15, r3
 8006138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006148:	eeb0 0a47 	vmov.f32	s0, s14
 800614c:	4618      	mov	r0, r3
 800614e:	f7fb fbcf 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8006152:	f897 10cc 	ldrb.w	r1, [r7, #204]	; 0xcc
 8006156:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800615a:	2300      	movs	r3, #0
 800615c:	2202      	movs	r2, #2
 800615e:	f7fb fa12 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1f2>
 8006168:	4c4f      	ldr	r4, [pc, #316]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800616a:	2500      	movs	r5, #0
 800616c:	e115      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800616e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8006172:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800617a:	edd7 0a00 	vldr	s1, [r7]
 800617e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fd fc64 	bl	8003a50 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8006188:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 800618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x21e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8006194:	4c43      	ldr	r4, [pc, #268]	; (80062a4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x328>)
 8006196:	2500      	movs	r5, #0
 8006198:	e0ff      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 800619a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	461a      	mov	r2, r3
 80061a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80061aa:	2300      	movs	r3, #0
 80061ac:	2101      	movs	r1, #1
 80061ae:	f7fb f9ea 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x242>
 80061b8:	4c3b      	ldr	r4, [pc, #236]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061ba:	2500      	movs	r5, #0
 80061bc:	e0e3      	b.n	8006386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 80061be:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	461a      	mov	r2, r3
 80061ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80061ce:	2300      	movs	r3, #0
 80061d0:	2101      	movs	r1, #1
 80061d2:	f7fb f9d8 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x266>
 80061dc:	4c32      	ldr	r4, [pc, #200]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 80061de:	2500      	movs	r5, #0
 80061e0:	e0c7      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            ret = spectral::processing::periodogram(&axis_matrix,
 80061e2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80061e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80061ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061ee:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80061f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80061f6:	f7fd fe79 	bl	8003eec <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80061fa:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80061fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
                EIDSP_ERR(ret);
 8006206:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800620a:	2500      	movs	r5, #0
 800620c:	e0b1      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 800620e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	1e59      	subs	r1, r3, #1
 8006216:	f107 0018 	add.w	r0, r7, #24
 800621a:	2300      	movs	r3, #0
 800621c:	2201      	movs	r2, #1
 800621e:	f7fb f9b2 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b2>
 8006228:	4c1f      	ldr	r4, [pc, #124]	; (80062a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32c>)
 800622a:	2500      	movs	r5, #0
 800622c:	e097      	b.n	800635e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            ret = spectral::processing::spectral_power_edges(
 800622e:	f107 0318 	add.w	r3, r7, #24
 8006232:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006236:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800623a:	ed97 0a03 	vldr	s0, [r7, #12]
 800623e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006242:	f7fd fd47 	bl	8003cd4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 8006246:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 800624a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2de>
                EIDSP_ERR(ret);
 8006252:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8006256:	2500      	movs	r5, #0
 8006258:	e081      	b.n	800635e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006266:	fb01 f303 	mul.w	r3, r1, r3
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

            size_t fx = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            features_row[fx++] = rms_matrix.buffer[row];
 8006278:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800627c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	441a      	add	r2, r3
 8006284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006294:	440b      	add	r3, r1
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 800629a:	2300      	movs	r3, #0
 800629c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062a0:	e030      	b.n	8006304 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x388>
 80062a2:	bf00      	nop
 80062a4:	fffffc14 	.word	0xfffffc14
 80062a8:	fffffc16 	.word	0xfffffc16
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 80062ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	441a      	add	r2, r3
 80062bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062c0:	1c59      	adds	r1, r3, #1
 80062c2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062cc:	440b      	add	r3, r1
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80062d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	3301      	adds	r3, #1
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80062f4:	440b      	add	r3, r1
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80062fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fe:	3301      	adds	r3, #1
 8006300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800630a:	429a      	cmp	r2, r3
 800630c:	d3ce      	bcc.n	80062ac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x330>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 800630e:	2300      	movs	r3, #0
 8006310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006314:	e01d      	b.n	8006352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	ed93 7a00 	vldr	s14, [r3]
 800632a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800633a:	4413      	add	r3, r2
 800633c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006344:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8006348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800634c:	3301      	adds	r3, #1
 800634e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006358:	429a      	cmp	r2, r3
 800635a:	d3dc      	bcc.n	8006316 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            }
        }
 800635c:	2501      	movs	r5, #1
 800635e:	f107 0318 	add.w	r3, r7, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7fb f93a 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006368:	2d01      	cmp	r5, #1
 800636a:	d101      	bne.n	8006370 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f4>
 800636c:	2501      	movs	r5, #1
 800636e:	e000      	b.n	8006372 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f6>
 8006370:	2500      	movs	r5, #0
 8006372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006376:	4618      	mov	r0, r3
 8006378:	f7fb f930 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800637c:	2d01      	cmp	r5, #1
 800637e:	d101      	bne.n	8006384 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x408>
 8006380:	2501      	movs	r5, #1
 8006382:	e000      	b.n	8006386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
 8006384:	2500      	movs	r5, #0
 8006386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb f926 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006390:	2d01      	cmp	r5, #1
 8006392:	d101      	bne.n	8006398 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41c>
 8006394:	2501      	movs	r5, #1
 8006396:	e000      	b.n	800639a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x41e>
 8006398:	2500      	movs	r5, #0
 800639a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fb f91c 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063a4:	2d01      	cmp	r5, #1
 80063a6:	d101      	bne.n	80063ac <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x430>
 80063a8:	2501      	movs	r5, #1
 80063aa:	e000      	b.n	80063ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
 80063ac:	2500      	movs	r5, #0
 80063ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fb f912 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063b8:	2d01      	cmp	r5, #1
 80063ba:	d101      	bne.n	80063c0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x444>
 80063bc:	2501      	movs	r5, #1
 80063be:	e000      	b.n	80063c2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x446>
 80063c0:	2500      	movs	r5, #0
 80063c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fb f908 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063cc:	2d01      	cmp	r5, #1
 80063ce:	d10c      	bne.n	80063ea <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46e>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80063d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f4ff ae67 	bcc.w	80060b6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>

        return EIDSP_OK;
 80063e8:	2400      	movs	r4, #0
    }
 80063ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fb f8f4 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fb f8ef 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80063fe:	4623      	mov	r3, r4
 8006400:	4618      	mov	r0, r3
 8006402:	37b8      	adds	r7, #184	; 0xb8
 8006404:	46bd      	mov	sp, r7
 8006406:	bdb0      	pop	{r4, r5, r7, pc}

08006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	3301      	adds	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4413      	add	r3, r2
 800643c:	3b01      	subs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8006440:	697b      	ldr	r3, [r7, #20]
    }
 8006442:	4618      	mov	r0, r3
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v1(
 8006450:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8006454:	b0b3      	sub	sp, #204	; 0xcc
 8006456:	af04      	add	r7, sp, #16
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_ptr,
        const float sampling_freq)
    {
        // scale the signal
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	edd3 7a03 	vldr	s15, [r3, #12]
 8006468:	eeb0 0a67 	vmov.f32	s0, s15
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7fb fa3f 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8006472:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x3e>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 800647e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006482:	488c      	ldr	r0, [pc, #560]	; (80066b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x264>)
 8006484:	f002 fcd6 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 8006488:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800648c:	e10b      	b.n	80066a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // transpose the matrix so we have one row per axis (nifty!)
        ret = numpy::transpose(input_matrix);
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7fb f9ad 	bl	80017ee <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8006494:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (ret != EIDSP_OK) {
 8006498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x60>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80064a0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80064a4:	4884      	ldr	r0, [pc, #528]	; (80066b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x268>)
 80064a6:	f002 fcc5 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 80064aa:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80064ae:	e0fa      	b.n	80066a6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x256>
        }

        // the spectral edges that we want to calculate
        matrix_t edges_matrix_in(64, 1);
 80064b0:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80064b4:	2300      	movs	r3, #0
 80064b6:	2201      	movs	r2, #1
 80064b8:	2140      	movs	r1, #64	; 0x40
 80064ba:	f7fb f864 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
        size_t edge_matrix_ix = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        char spectral_str[128] = { 0 };
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	f107 0318 	add.w	r3, r7, #24
 80064cc:	227c      	movs	r2, #124	; 0x7c
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f018 f977 	bl	801e7c4 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	4618      	mov	r0, r3
 80064dc:	f7f9 fef8 	bl	80002d0 <strlen>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b7f      	cmp	r3, #127	; 0x7f
 80064e4:	d901      	bls.n	80064ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x9a>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 80064e6:	4c75      	ldr	r4, [pc, #468]	; (80066bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x26c>)
 80064e8:	e0d8      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }
        memcpy(
            spectral_str,
            config_ptr->spectral_power_edges,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
        memcpy(
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7f9 feec 	bl	80002d0 <strlen>
 80064f8:	4602      	mov	r2, r0
 80064fa:	f107 0314 	add.w	r3, r7, #20
 80064fe:	4621      	mov	r1, r4
 8006500:	4618      	mov	r0, r3
 8006502:	f018 fa40 	bl	801e986 <memcpy>
            strlen(config_ptr->spectral_power_edges));

        // convert spectral_power_edges (string) into float array
        char *spectral_ptr = spectral_str;
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800650e:	e03e      	b.n	800658e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            while ((*spectral_ptr) == ' ') {
                spectral_ptr++;
 8006510:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006514:	3301      	adds	r3, #1
 8006516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            while ((*spectral_ptr) == ' ') {
 800651a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b20      	cmp	r3, #32
 8006522:	d0f5      	beq.n	8006510 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            }

            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8006524:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006528:	f017 f8b2 	bl	801d690 <atof>
 800652c:	ec59 8b10 	vmov	r8, r9, d0
 8006530:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18d4      	adds	r4, r2, r3
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7fa fb7f 	bl	8000c48 <__aeabi_d2f>
 800654a:	4603      	mov	r3, r0
 800654c:	6023      	str	r3, [r4, #0]

            // find next (spectral) delimiter (or '\0' character)
            while ((*spectral_ptr != ',')) {
 800654e:	e009      	b.n	8006564 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x114>
                spectral_ptr++;
 8006550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                if (*spectral_ptr == '\0')
 800655a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x120>
            while ((*spectral_ptr != ',')) {
 8006564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b2c      	cmp	r3, #44	; 0x2c
 800656c:	d1f0      	bne.n	8006550 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
 800656e:	e000      	b.n	8006572 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
                    break;
 8006570:	bf00      	nop
            }

            if (*spectral_ptr == '\0') {
 8006572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
                spectral_ptr = NULL;
 800657c:	2300      	movs	r3, #0
 800657e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006582:	e004      	b.n	800658e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13e>
            }
            else {
                spectral_ptr++;
 8006584:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006588:	3301      	adds	r3, #1
 800658a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        while (spectral_ptr != NULL) {
 800658e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1c1      	bne.n	800651a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xca>
            }
        }
        edges_matrix_in.rows = edge_matrix_ix;
 8006596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800659a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // calculate how much room we need for the output matrix
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
            true,
            config_ptr->spectral_peaks_count,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065a2:	4619      	mov	r1, r3
            edges_matrix_in.rows);
 80065a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
        size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80065a8:	461a      	mov	r2, r3
 80065aa:	2001      	movs	r0, #1
 80065ac:	f7ff ff2c 	bl	8006408 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80065b0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
        if (output_matrix->cols * output_matrix->rows !=
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	6852      	ldr	r2, [r2, #4]
 80065bc:	fb03 f202 	mul.w	r2, r3, r2
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4619      	mov	r1, r3
 80065c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
        if (output_matrix->cols * output_matrix->rows !=
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x186>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80065d2:	4c3b      	ldr	r4, [pc, #236]	; (80066c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x270>)
 80065d4:	e062      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        output_matrix->cols = output_matrix_cols;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80065dc:	609a      	str	r2, [r3, #8]
        output_matrix->rows = config_ptr->axes;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	461a      	mov	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	605a      	str	r2, [r3, #4]

        spectral::filter_t filter_type;
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	4935      	ldr	r1, [pc, #212]	; (80066c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x274>)
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7f9 fe0e 	bl	8000210 <strcmp>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b2>
            filter_type = spectral::filter_lowpass;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006600:	e00f      	b.n	8006622 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	4930      	ldr	r1, [pc, #192]	; (80066c8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x278>)
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 fe01 	bl	8000210 <strcmp>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>
            filter_type = spectral::filter_highpass;
 8006614:	2302      	movs	r3, #2
 8006616:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800661a:	e002      	b.n	8006622 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d2>
        }
        else {
            filter_type = spectral::filter_none;
 800661c:	2300      	movs	r3, #0
 800661e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        }

        ret = spectral::feature::spectral_analysis(
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	edd3 7a06 	vldr	s15, [r3, #24]
            output_matrix,
            input_matrix,
            sampling_freq,
            filter_type,
            config_ptr->filter_cutoff,
            config_ptr->filter_order,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69db      	ldr	r3, [r3, #28]
        ret = spectral::feature::spectral_analysis(
 800662c:	b2dc      	uxtb	r4, r3
            config_ptr->fft_length,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        ret = spectral::feature::spectral_analysis(
 8006632:	b29b      	uxth	r3, r3
            config_ptr->spectral_peaks_count,
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6a92      	ldr	r2, [r2, #40]	; 0x28
        ret = spectral::feature::spectral_analysis(
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006640:	f897 00af 	ldrb.w	r0, [r7, #175]	; 0xaf
 8006644:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006648:	9102      	str	r1, [sp, #8]
 800664a:	9201      	str	r2, [sp, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	eeb0 1a47 	vmov.f32	s2, s14
 8006652:	4623      	mov	r3, r4
 8006654:	eef0 0a67 	vmov.f32	s1, s15
 8006658:	4602      	mov	r2, r0
 800665a:	ed97 0a00 	vldr	s0, [r7]
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f7ff fc8b 	bl	8005f7c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 8006666:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            config_ptr->spectral_peaks_threshold,
            &edges_matrix_in);
        if (ret != EIDSP_OK) {
 800666a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x232>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 8006672:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006676:	4815      	ldr	r0, [pc, #84]	; (80066cc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x27c>)
 8006678:	f002 fbdc 	bl	8008e34 <_Z9ei_printfPKcz>
            EIDSP_ERR(ret);
 800667c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8006680:	e00c      	b.n	800669c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24c>
        }

        // flatten again
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	461a      	mov	r2, r3
 8006688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800668c:	fb03 f202 	mul.w	r2, r3, r2
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
        output_matrix->rows = 1;
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2201      	movs	r2, #1
 8006698:	605a      	str	r2, [r3, #4]

        return EIDSP_OK;
 800669a:	2400      	movs	r4, #0
    }
 800669c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fa ff9b 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 80066a6:	4623      	mov	r3, r4
 80066a8:	4618      	mov	r0, r3
 80066aa:	37bc      	adds	r7, #188	; 0xbc
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	08020e4c 	.word	0x08020e4c
 80066b8:	08020e70 	.word	0x08020e70
 80066bc:	fffffc10 	.word	0xfffffc10
 80066c0:	fffffc14 	.word	0xfffffc14
 80066c4:	08020c28 	.word	0x08020c28
 80066c8:	08020c2c 	.word	0x08020c2c
 80066cc:	08020e98 	.word	0x08020e98

080066d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>:

    static void get_start_stop_bin(
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80066da:	6138      	str	r0, [r7, #16]
 80066dc:	edc7 0a03 	vstr	s1, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	70fb      	strb	r3, [r7, #3]
        size_t *stop_bin,
        bool is_high_pass)
    {
        // we want to find n such that fcutoff < sample_f / fft * n ( or > for high pass )
        // also, + - half bin width (sample_f/(fft*2)) for high / low pass
        if (filter_cutoff > sampling_freq / 2) {
 80066e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80066ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80066ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80066f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066fe:	dd07      	ble.n	8006710 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x40>
            filter_cutoff = sampling_freq / 2;
 8006700:	ed97 7a05 	vldr	s14, [r7, #20]
 8006704:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800670c:	edc7 7a03 	vstr	s15, [r7, #12]
        }
        float bin = filter_cutoff * fft_length / sampling_freq;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800671a:	edd7 7a03 	vldr	s15, [r7, #12]
 800671e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006722:	ed97 7a05 	vldr	s14, [r7, #20]
 8006726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
        if (is_high_pass) {
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d021      	beq.n	8006778 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xa8>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 8006734:	69f8      	ldr	r0, [r7, #28]
 8006736:	f7f9 ff37 	bl	80005a8 <__aeabi_f2d>
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 8006740:	f7f9 fdd2 	bl	80002e8 <__aeabi_dsub>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4610      	mov	r0, r2
 800674a:	4619      	mov	r1, r3
 800674c:	f7fa fa5c 	bl	8000c08 <__aeabi_d2uiz>
 8006750:	4603      	mov	r3, r0
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	601a      	str	r2, [r3, #0]
            // don't use the DC bin b/c it's zero
            *start_bin = *start_bin == 0 ? 1 : *start_bin;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x96>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	e000      	b.n	8006768 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0x98>
 8006766:	2301      	movs	r3, #1
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	6013      	str	r3, [r2, #0]
            *stop_bin = fft_length / 2 + 1; // go one past
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
        }
        else {
            *start_bin = 1;
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
        }
    }
 8006776:	e014      	b.n	80067a2 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xd2>
            *start_bin = 1;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 800677e:	69f8      	ldr	r0, [r7, #28]
 8006780:	f7f9 ff12 	bl	80005a8 <__aeabi_f2d>
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b+0xdc>)
 800678a:	f7f9 fdaf 	bl	80002ec <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	f7fa fa37 	bl	8000c08 <__aeabi_d2uiz>
 800679a:	4603      	mov	r3, r0
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
    }
 80067a2:	bf00      	nop
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	3fe00000 	.word	0x3fe00000

080067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    /**
     * @brief Calculates the spectral analysis features.
     *
     * @return the number of features calculated
     */
    static size_t extract_spec_features(
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	b0ba      	sub	sp, #232	; 0xe8
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	6178      	str	r0, [r7, #20]
 80067b8:	6139      	str	r1, [r7, #16]
 80067ba:	60fa      	str	r2, [r7, #12]
 80067bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80067c0:	71fb      	strb	r3, [r7, #7]
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq,
        const bool remove_mean = true,
        const bool transpose_and_scale_input = true)
    {
        if (transpose_and_scale_input) {
 80067c2:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
            // transpose the matrix so we have one row per axis
            numpy::transpose_in_place(input_matrix);
 80067ca:	6978      	ldr	r0, [r7, #20]
 80067cc:	f7fa ff80 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

            // func tests for scale of 1 and does a no op in that case
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80067d6:	eeb0 0a67 	vmov.f32	s0, s15
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7fb f888 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80067e0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80067e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x42>
 80067ec:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80067f0:	e297      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        bool do_filter = false;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
        bool is_high_pass;

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	49cd      	ldr	r1, [pc, #820]	; (8006b34 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x384>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 fd06 	bl	8000210 <strcmp>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d121      	bne.n	800684e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x9e>
            if( config->filter_order ) {
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	edd3 7a06 	vldr	s15, [r3, #24]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	eef0 0a67 	vmov.f32	s1, s15
 8006824:	ed97 0a02 	vldr	s0, [r7, #8]
 8006828:	6978      	ldr	r0, [r7, #20]
 800682a:	f7fc ff9d 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800682e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8006832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x90>
 800683a:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800683e:	e270      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = false;
 8006846:	2300      	movs	r3, #0
 8006848:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800684c:	e029      	b.n	80068a2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
        }
        else if (strcmp(config->filter_type, "high") == 0) {
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	49b9      	ldr	r1, [pc, #740]	; (8006b38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x388>)
 8006854:	4618      	mov	r0, r3
 8006856:	f7f9 fcdb 	bl	8000210 <strcmp>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d120      	bne.n	80068a2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xf2>
            if( config->filter_order ) {
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d016      	beq.n	8006896 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	edd3 7a06 	vldr	s15, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	eef0 0a67 	vmov.f32	s1, s15
 800687a:	ed97 0a02 	vldr	s0, [r7, #8]
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	f7fc ffa8 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8006884:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8006888:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xe6>
 8006890:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8006894:	e245      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
                    input_matrix,
                    sampling_freq,
                    config->filter_cutoff,
                    config->filter_order));
            }
            do_filter = true;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
            is_high_pass = true;
 800689c:	2301      	movs	r3, #1
 800689e:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        }

        if (remove_mean){
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
            EI_TRY(processing::subtract_mean(input_matrix));
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f7fd fccb 	bl	8004244 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 80068ae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80068b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x110>
 80068ba:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 80068be:	e230      	b.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        }

        // Figure bins we remove based on filter cutoff
        size_t start_bin, stop_bin;
        if (do_filter) {
 80068c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d012      	beq.n	80068ee <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x13e>
            get_start_stop_bin(
                sampling_freq,
                config->fft_length,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            get_start_stop_bin(
 80068cc:	4618      	mov	r0, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80068d4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80068d8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80068dc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80068e0:	eef0 0a67 	vmov.f32	s1, s15
 80068e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80068e8:	f7ff fef2 	bl	80066d0 <_ZN2ei8spectral7feature18get_start_stop_binEfjfPjS2_b>
 80068ec:	e009      	b.n	8006902 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x152>
                &start_bin,
                &stop_bin,
                is_high_pass);
        }
        else {
            start_bin = 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	67bb      	str	r3, [r7, #120]	; 0x78
            stop_bin = config->fft_length / 2 + 1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da00      	bge.n	80068fc <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x14c>
 80068fa:	3301      	adds	r3, #1
 80068fc:	105b      	asrs	r3, r3, #1
 80068fe:	3301      	adds	r3, #1
 8006900:	677b      	str	r3, [r7, #116]	; 0x74
        }
        size_t num_bins = stop_bin - start_bin;
 8006902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

        float *feature_out = output_matrix->buffer;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        const float *feature_out_ori = feature_out;
 8006914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006918:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006922:	e1ed      	b.n	8006d00 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x550>
            float *data_window = input_matrix->get_row_ptr(row);
 8006924:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8006928:	6978      	ldr	r0, [r7, #20]
 800692a:	f7fa fe6d 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 800692e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            size_t data_size = input_matrix->cols;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            matrix_t rms_in_matrix(1, data_size, data_window);
 800693a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800693e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006946:	2101      	movs	r1, #1
 8006948:	f7fa fe1d 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 800694c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006950:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006954:	2201      	movs	r2, #1
 8006956:	2101      	movs	r1, #1
 8006958:	f7fa fe15 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 800695c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fb f898 	bl	8001a9c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800696c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8006970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d0>
 8006978:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800697c:	2500      	movs	r5, #0
 800697e:	e1a9      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>

            feature_out++;
 8006980:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006984:	3304      	adds	r3, #4
 8006986:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            // Standard Deviation
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 800698a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800698e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8006992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (stddev == 0.0f) {
 8006996:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800699a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	d102      	bne.n	80069aa <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1fa>
                stddev = 1e-10f;
 80069a4:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x38c>)
 80069a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            // Substitute 0 for mean (b/c it is subtracted out above)
            // Skew becomes: mean(X^3) / stddev^3
            // Kurtosis becomes: mean(X^4) / stddev^4
            // Note, this is the Fisher definition of Kurtosis, so subtract 3
            // (see https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html)
            float s_sum = 0;
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            float k_sum = 0;
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            float temp;
            for (size_t i = 0; i < data_size; i++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80069c0:	e03c      	b.n	8006a3c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x28c>
                temp = data_window[i] * data_window[i] * data_window[i];
 80069c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069cc:	4413      	add	r3, r2
 80069ce:	ed93 7a00 	vldr	s14, [r3]
 80069d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069dc:	4413      	add	r3, r2
 80069de:	edd3 7a00 	vldr	s15, [r3]
 80069e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80069f0:	4413      	add	r3, r2
 80069f2:	edd3 7a00 	vldr	s15, [r3]
 80069f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
                s_sum += temp;
 80069fe:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
                k_sum += temp * data_window[i];
 8006a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006a18:	4413      	add	r3, r2
 8006a1a:	ed93 7a00 	vldr	s14, [r3]
 8006a1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2e:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
            for (size_t i = 0; i < data_size; i++) {
 8006a32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a36:	3301      	adds	r3, #1
 8006a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8006a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d3bc      	bcc.n	80069c2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x212>
            }
            // Skewness out
            temp = stddev * stddev * stddev;
 8006a48:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006a4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a50:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a58:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            *feature_out++ = (s_sum / data_size) / temp;
 8006a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a68:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006a7a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a82:	edc3 7a00 	vstr	s15, [r3]
            // Kurtosis out
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 8006a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a9a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006a9e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aae:	1d1a      	adds	r2, r3, #4
 8006ab0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006ab4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006abc:	edc3 7a00 	vstr	s15, [r3]

            if (config->implementation_version == 4) {
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	889b      	ldrh	r3, [r3, #4]
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	f040 80c0 	bne.w	8006c4a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x49a>

                size_t fft_out_size = config->fft_length / 2 + 1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	da00      	bge.n	8006ad4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x324>
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	105b      	asrs	r3, r3, #1
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ei_vector<float> fft_out(fft_out_size);
 8006adc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8006ae0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ae4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f003 f9cb 	bl	8009e84 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 8006aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 f863 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	4619      	mov	r1, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	9101      	str	r1, [sp, #4]
 8006b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006b16:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006b1a:	f7fc f811 	bl	8002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006b1e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8006b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x390>
 8006b2a:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006b2e:	2500      	movs	r5, #0
 8006b30:	e082      	b.n	8006c38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x488>
 8006b32:	bf00      	nop
 8006b34:	08020c28 	.word	0x08020c28
 8006b38:	08020c2c 	.word	0x08020c2c
 8006b3c:	2edbe6ff 	.word	0x2edbe6ff
                    0,
                    fft_out_size,
                    config->fft_length,
                    config->do_fft_overlap));

                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 8006b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b44:	4618      	mov	r0, r3
 8006b46:	f003 f82a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b50:	4618      	mov	r0, r3
 8006b52:	f003 f834 	bl	8009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	2101      	movs	r1, #1
 8006b60:	f7fa fd11 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 8006b64:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	f7fa fd0a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006b72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006b76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fb f85d 	bl	8001c3c <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d108      	bne.n	8006b9a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ea>
 8006b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa fd3a 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006b94:	4603      	mov	r3, r0
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	e001      	b.n	8006b9e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3ee>
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ba2:	1d19      	adds	r1, r3, #4
 8006ba4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006ba8:	601a      	str	r2, [r3, #0]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 8006baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fb f8dd 	bl	8001d74 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x422>
 8006bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa fd1e 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	e001      	b.n	8006bd6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x426>
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bda:	1d19      	adds	r1, r3, #4
 8006bdc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006be0:	601a      	str	r2, [r3, #0]

                for (size_t i = start_bin; i < stop_bin; i++) {
 8006be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be8:	e016      	b.n	8006c18 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x468>
                    feature_out[i - start_bin] = fft_out[i];
 8006bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f003 f97b 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c08:	4413      	add	r3, r2
 8006c0a:	680a      	ldr	r2, [r1, #0]
 8006c0c:	601a      	str	r2, [r3, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 8006c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c12:	3301      	adds	r3, #1
 8006c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d3e3      	bcc.n	8006bea <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x43a>
                }
            } else {
 8006c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fa fcd8 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa fcd3 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006c36:	2501      	movs	r5, #1
 8006c38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f003 f93b 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006c42:	2d01      	cmp	r5, #1
 8006c44:	d01f      	beq.n	8006c86 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c46:	2500      	movs	r5, #0
 8006c48:	e044      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                EI_TRY(numpy::welch_max_hold(
 8006c4a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c52:	4610      	mov	r0, r2
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006c5a:	9202      	str	r2, [sp, #8]
 8006c5c:	9001      	str	r0, [sp, #4]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	460b      	mov	r3, r1
 8006c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c66:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006c6a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006c6e:	f7fb ff67 	bl	8002b40 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 8006c72:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8006c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x4d6>
 8006c7e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8006c82:	2500      	movs	r5, #0
 8006c84:	e026      	b.n	8006cd4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x524>
                    start_bin,
                    stop_bin,
                    config->fft_length,
                    config->do_fft_overlap));
            }
            if (config->do_log) {
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d018      	beq.n	8006cc2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x512>
                numpy::zero_handling(feature_out, num_bins);
 8006c90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c94:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8006c98:	f7fc f818 	bl	8002ccc <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 8006c9c:	f107 0018 	add.w	r0, r7, #24
 8006ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006caa:	f7fa fc6c 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
                numpy::log10(&temp);
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fb fb0c 	bl	80022d0 <_ZN2ei5numpy5log10EPNS_9ei_matrixE>
            }
 8006cb8:	f107 0318 	add.w	r3, r7, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fa fc8d 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 8006cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ccc:	4413      	add	r3, r2
 8006cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        }
 8006cd2:	2501      	movs	r5, #1
 8006cd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fa fc7f 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006cde:	2d01      	cmp	r5, #1
 8006ce0:	d101      	bne.n	8006ce6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x536>
 8006ce2:	2501      	movs	r5, #1
 8006ce4:	e000      	b.n	8006ce8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x538>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fa fc75 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8006cf2:	2d01      	cmp	r5, #1
 8006cf4:	d115      	bne.n	8006d22 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x572>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006cf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f4ff ae0b 	bcc.w	8006924 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x174>
        size_t num_features = feature_out - feature_out_ori;
 8006d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	109b      	asrs	r3, r3, #2
 8006d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        return num_features;
 8006d1e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    }
 8006d22:	4623      	mov	r3, r4
 8006d24:	4618      	mov	r0, r3
 8006d26:	37d8      	adds	r7, #216	; 0xd8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bdb0      	pop	{r4, r5, r7, pc}

08006d2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v2(
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        size_t n_features =
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	ed97 0a00 	vldr	s0, [r7]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff fd30 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006d50:	6178      	str	r0, [r7, #20]
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d101      	bne.n	8006d60 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 8006d60:	4b02      	ldr	r3, [pc, #8]	; (8006d6c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x40>)
    }
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	fffffc14 	.word	0xfffffc14

08006d70 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09a      	sub	sp, #104	; 0x68
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
    {
        if (r == 1 || r == 3 || r == 10) {
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d005      	beq.n	8006d8c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d002      	beq.n	8006d8c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x1c>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b0a      	cmp	r3, #10
 8006d8a:	d10f      	bne.n	8006dac <_ZN2ei8spectral7feature15get_ratio_comboEi+0x3c>
            return {r};
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	2301      	movs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	f107 0314 	add.w	r3, r7, #20
 8006d9e:	f107 0208 	add.w	r2, r7, #8
 8006da2:	ca06      	ldmia	r2, {r1, r2}
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f004 f87e 	bl	800aea6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
            return {10, 10, 10};
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 8006daa:	e04e      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 30) {
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b1e      	cmp	r3, #30
 8006db0:	d114      	bne.n	8006ddc <_ZN2ei8spectral7feature15get_ratio_comboEi+0x6c>
            return {3, 10};
 8006db2:	4a28      	ldr	r2, [pc, #160]	; (8006e54 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe4>)
 8006db4:	f107 0320 	add.w	r3, r7, #32
 8006db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dbc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006dc0:	f107 0320 	add.w	r3, r7, #32
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dce:	f107 0218 	add.w	r2, r7, #24
 8006dd2:	ca06      	ldmia	r2, {r1, r2}
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f004 f866 	bl	800aea6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006dda:	e036      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 100) {
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b64      	cmp	r3, #100	; 0x64
 8006de0:	d114      	bne.n	8006e0c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>
            return {10, 10};
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xe8>)
 8006de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8006df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006df6:	2302      	movs	r3, #2
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006dfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006e02:	ca06      	ldmia	r2, {r1, r2}
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f004 f84e 	bl	800aea6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e0a:	e01e      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
        } else if (r == 1000) {
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e12:	d113      	bne.n	8006e3c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xcc>
            return {10, 10, 10};
 8006e14:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <_ZN2ei8spectral7feature15get_ratio_comboEi+0xec>)
 8006e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006e20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006e24:	643b      	str	r3, [r7, #64]	; 0x40
 8006e26:	2303      	movs	r3, #3
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e32:	ca06      	ldmia	r2, {r1, r2}
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f004 f836 	bl	800aea6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
    }
 8006e3a:	e006      	b.n	8006e4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0xda>
            assert(0);
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf0>)
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf4>)
 8006e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e44:	4808      	ldr	r0, [pc, #32]	; (8006e68 <_ZN2ei8spectral7feature15get_ratio_comboEi+0xf8>)
 8006e46:	f016 fc05 	bl	801d654 <__assert_func>
    }
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	3768      	adds	r7, #104	; 0x68
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08020f90 	.word	0x08020f90
 8006e58:	08020f98 	.word	0x08020f98
 8006e5c:	08020fa0 	.word	0x08020fa0
 8006e60:	08020918 	.word	0x08020918
 8006e64:	08020ecc 	.word	0x08020ecc
 8006e68:	08020f10 	.word	0x08020f10

08006e6c <_ZN2ei6signal7sosfiltD1Ev>:
    struct sosfilt {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3308      	adds	r3, #8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f003 f81d 	bl	8009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b092      	sub	sp, #72	; 0x48
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d009      	beq.n	8006eae <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b0a      	cmp	r3, #10
 8006e9e:	d006      	beq.n	8006eae <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xb8>)
 8006ea2:	4a28      	ldr	r2, [pc, #160]	; (8006f44 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>)
 8006ea4:	f240 212b 	movw	r1, #555	; 0x22b
 8006ea8:	4827      	ldr	r0, [pc, #156]	; (8006f48 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc0>)
 8006eaa:	f016 fbd3 	bl	801d654 <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d101      	bne.n	8006eb8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x30>
 8006eb4:	4b25      	ldr	r3, [pc, #148]	; (8006f4c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc4>)
 8006eb6:	e000      	b.n	8006eba <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x32>
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xc8>)
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d101      	bne.n	8006ec6 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x3e>
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xcc>)
 8006ec4:	e000      	b.n	8006ec8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x40>
 8006ec6:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xd0>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fe fead 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8006ed6:	6338      	str	r0, [r7, #48]	; 0x30

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006edc:	e026      	b.n	8006f2c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
            const float *x = input_matrix->get_row_ptr(row);
 8006ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fa fb91 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
            float *y = output_matrix->get_row_ptr(row);
 8006ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006eea:	68b8      	ldr	r0, [r7, #8]
 8006eec:	f7fa fb8c 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 8006ef0:	62b8      	str	r0, [r7, #40]	; 0x28
            signal::sosfilt sosfilt(sos, sos_zi, 4);
 8006ef2:	f107 0010 	add.w	r0, r7, #16
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006efc:	f7fe feaa 	bl	8005c54 <_ZN2ei6signal7sosfiltC1EPKfS3_j>
            signal::decimate_simple(
                x,
                input_matrix->cols,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6899      	ldr	r1, [r3, #8]
                y,
                output_matrix->cols,
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689a      	ldr	r2, [r3, #8]
            signal::decimate_simple(
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f18:	f7fe ff54 	bl	8005dc4 <_ZN2ei6signal15decimate_simpleEPKfjPfjjRNS0_7sosfiltE>
                ratio,
                sosfilt);
        }
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ffa3 	bl	8006e6c <_ZN2ei6signal7sosfiltD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	3301      	adds	r3, #1
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d3d3      	bcc.n	8006ede <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x56>

        return out_size;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3740      	adds	r7, #64	; 0x40
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	08020fac 	.word	0x08020fac
 8006f44:	08020fc8 	.word	0x08020fc8
 8006f48:	08020f10 	.word	0x08020f10
 8006f4c:	20000000 	.word	0x20000000
 8006f50:	20000080 	.word	0x20000080
 8006f54:	20000060 	.word	0x20000060
 8006f58:	200000e0 	.word	0x200000e0

08006f5c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 8006f5c:	b590      	push	{r4, r7, lr}
 8006f5e:	b0b5      	sub	sp, #212	; 0xd4
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	ed87 0a00 	vstr	s0, [r7]
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f72:	4611      	mov	r1, r2
 8006f74:	2244      	movs	r2, #68	; 0x44
 8006f76:	4618      	mov	r0, r3
 8006f78:	f017 fd05 	bl	801e986 <memcpy>
        auto config = &config_copy;
 8006f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 8006f84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	4998      	ldr	r1, [pc, #608]	; (80071ec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x290>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7f9 f93f 	bl	8000210 <strcmp>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x50>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 8006f98:	ed97 0a00 	vldr	s0, [r7]
 8006f9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fe fd6a 	bl	8005a7c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	e19e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 8006fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
 8006fb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d116      	bne.n	8006ff0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x94>
            size_t n_features =
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	ed97 0a00 	vldr	s0, [r7]
 8006fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff fbec 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8006fd8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d101      	bne.n	8006fec <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
 8006fe8:	2400      	movs	r4, #0
 8006fea:	e17e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 8006fec:	4c80      	ldr	r4, [pc, #512]	; (80071f0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x294>)
 8006fee:	e17c      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
        }
        else {
            numpy::transpose_in_place(input_matrix);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fa fb6d 	bl	80016d0 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 8006ff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ffa:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7fa fc74 	bl	80018f0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 8007008:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800700c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
 8007014:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8007018:	e167      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>

            if (config->input_decimation_ratio > 1) {
 800701a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b01      	cmp	r3, #1
 8007022:	f340 8086 	ble.w	8007132 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d6>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 8007026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fe9c 	bl	8006d70 <_ZN2ei8spectral7feature15get_ratio_comboEi>
                size_t out_size = input_matrix->cols;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007048:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800704c:	f003 ff4c 	bl	800aee8 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>
 8007050:	4603      	mov	r3, r0
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
 8007054:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8007058:	f003 ff56 	bl	800af08 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>
 800705c:	4603      	mov	r3, r0
 800705e:	623b      	str	r3, [r7, #32]
 8007060:	e016      	b.n	8007090 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x134>
 8007062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f003 ff87 	bl	800af7a <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>
 800706c:	4603      	mov	r3, r0
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    out_size = _decimate(input_matrix, input_matrix, r);
 8007074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007078:	461a      	mov	r2, r3
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff03 	bl	8006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
 8007082:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
                for (int r : ratio_combo) {
 8007086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800708a:	4618      	mov	r0, r3
 800708c:	f003 ff65 	bl	800af5a <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>
 8007090:	f107 0220 	add.w	r2, r7, #32
 8007094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f003 ff45 	bl	800af2a <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1dd      	bne.n	8007062 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x106>
                }

                // rearrange input matrix to be in the right shape after decimation
                float* out = input_matrix->get_row_ptr(0) + out_size;
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7fa faad 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ae:	4602      	mov	r2, r0
 80070b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 80070bc:	2301      	movs	r3, #1
 80070be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80070c2:	e027      	b.n	8007114 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1b8>
                    float *row = input_matrix->get_row_ptr(r);
 80070c4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fa fa9d 	bl	8001608 <_ZN2ei9ei_matrix11get_row_ptrEj>
 80070ce:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                    for(size_t c = 0; c < out_size; c++) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d8:	e011      	b.n	80070fe <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a2>
                        *out++ = row[c];
 80070da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80070e4:	441a      	add	r2, r3
 80070e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]
                    for(size_t c = 0; c < out_size; c++) {
 80070f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007106:	429a      	cmp	r2, r3
 8007108:	d3e7      	bcc.n	80070da <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x17e>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 800710a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800710e:	3301      	adds	r3, #1
 8007110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800711c:	429a      	cmp	r2, r3
 800711e:	d3d1      	bcc.n	80070c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                    }
                }
                input_matrix->cols = out_size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007126:	609a      	str	r2, [r3, #8]
            }
 8007128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800712c:	4618      	mov	r0, r3
 800712e:	f002 ff88 	bl	800a042 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>

            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 8007132:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007140:	edd7 6a00 	vldr	s13, [r7]
 8007144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007148:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

            // filter here, before decimating, instead of inside extract_spec_features
            if (strcmp(config->filter_type, "low") == 0) {
 800714c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	4928      	ldr	r1, [pc, #160]	; (80071f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x298>)
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 f85b 	bl	8000210 <strcmp>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11d      	bne.n	800719c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x240>
                if( config->filter_order ) {
 8007160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d048      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 800716a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800716e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	4619      	mov	r1, r3
 800717c:	eef0 0a67 	vmov.f32	s1, s15
 8007180:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7fc faef 	bl	8003768 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 800718a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800718e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007192:	2b00      	cmp	r3, #0
 8007194:	d032      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 8007196:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800719a:	e0a6      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
                        new_sampling_freq,
                        config->filter_cutoff,
                        config->filter_order));
                }
            }
            else if (strcmp(config->filter_type, "high") == 0) {
 800719c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4915      	ldr	r1, [pc, #84]	; (80071f8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x29c>)
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7f9 f833 	bl	8000210 <strcmp>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d125      	bne.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                if( config->filter_order ) {
 80071b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d020      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 80071ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071be:	edd3 7a06 	vldr	s15, [r3, #24]
 80071c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	eef0 0a67 	vmov.f32	s1, s15
 80071d0:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7fc fafd 	bl	80037d4 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 80071da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80071de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x2a0>
 80071e6:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 80071ea:	e07e      	b.n	80072ea <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x38e>
 80071ec:	08021020 	.word	0x08021020
 80071f0:	fffffc14 	.word	0xfffffc14
 80071f4:	08020c28 	.word	0x08020c28
 80071f8:	08020c2c 	.word	0x08020c2c
                        config->filter_order));
                }
            }
            
            // set the filter order to 0, so that we won't double filter
            config->filter_order = 0;
 80071fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007200:	2200      	movs	r2, #0
 8007202:	61da      	str	r2, [r3, #28]

            // do this before extract_spec_features because extract_spec_features modifies the matrix
            constexpr size_t decimation = 10;
 8007204:	230a      	movs	r3, #10
 8007206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            const size_t decimated_size =
                signal::get_decimated_size(input_matrix->cols, decimation);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	210a      	movs	r1, #10
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fd0d 	bl	8005c30 <_ZN2ei6signal18get_decimated_sizeEjj>
 8007216:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6859      	ldr	r1, [r3, #4]
 800721e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007222:	2300      	movs	r3, #0
 8007224:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007228:	f7fa f9ad 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 800722c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007230:	220a      	movs	r2, #10
 8007232:	4619      	mov	r1, r3
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fe27 	bl	8006e88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>

            size_t n_features = extract_spec_features(
 800723a:	2300      	movs	r3, #0
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2301      	movs	r3, #1
 8007240:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8007244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fab0 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 8007250:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
                config,
                new_sampling_freq,
                true,
                false);

            if (n_features > 0 && config->extra_low_freq) {
 8007254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d038      	beq.n	80072ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
 800725c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d032      	beq.n	80072ce <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x372>
                // disable filtering post decimation
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	6892      	ldr	r2, [r2, #8]
 8007270:	fb03 f202 	mul.w	r2, r3, r2
                    output_matrix->buffer + n_features);
 8007274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007278:	1ad1      	subs	r1, r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	f107 0010 	add.w	r0, r7, #16
 800728a:	460a      	mov	r2, r1
 800728c:	2101      	movs	r1, #1
 800728e:	f7fa f97a 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>

                n_features += extract_spec_features(
 8007292:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8007296:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800729a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800729e:	f107 0110 	add.w	r1, r7, #16
 80072a2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2301      	movs	r3, #1
 80072ac:	eeb0 0a47 	vmov.f32	s0, s14
 80072b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072b4:	f7ff fa7c 	bl	80067b0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072be:	4413      	add	r3, r2
 80072c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    &lf_features,
                    config,
                    new_sampling_freq / decimation,
                    true,
                    false);
            }
 80072c4:	f107 0310 	add.w	r3, r7, #16
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fa f987 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d101      	bne.n	80072de <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x382>
 80072da:	2400      	movs	r4, #0
 80072dc:	e000      	b.n	80072e0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x384>
 80072de:	4c05      	ldr	r4, [pc, #20]	; (80072f4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x398>)
        }
 80072e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fa f979 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
    }
 80072ea:	4623      	mov	r3, r4
 80072ec:	4618      	mov	r0, r3
 80072ee:	37cc      	adds	r7, #204	; 0xcc
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}
 80072f4:	fffffc14 	.word	0xfffffc14

080072f8 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f7f9 ffb4 	bl	8001270 <_ZNSt14_Function_baseD1Ev>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <_ZN2ei11ei_signal_tC1Ev>:
} DCT_NORMALIZATION_MODE;

/**
 * Sensor signal structure
 */
typedef struct ei_signal_t {
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4618      	mov	r0, r3
 800731e:	f003 fe4b 	bl	800afb8 <_ZNSt8functionIFijjPfEEC1Ev>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_ZN2ei11ei_signal_tD1Ev>:
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ffde 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
__attribute__((unused)) int extract_spectral_analysis_features(
    signal_t *signal,
    matrix_t *output_matrix,
    void *config_ptr,
    const float frequency)
{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b08b      	sub	sp, #44	; 0x2c
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t *config = (ei_dsp_config_spectral_analysis_t *)config_ptr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	6892      	ldr	r2, [r2, #8]
 8007364:	fbb3 f1f2 	udiv	r1, r3, r2
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	461a      	mov	r2, r3
 800736e:	f107 0014 	add.w	r0, r7, #20
 8007372:	2300      	movs	r3, #0
 8007374:	f7fa f907 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x3a>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800737e:	4c23      	ldr	r4, [pc, #140]	; (800740c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>)
 8007380:	e039      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2100      	movs	r1, #0
 800738c:	f002 fece 	bl	800a12c <_ZNKSt8functionIFijjPfEEclEjjS0_>
        return spectral::wavelet::extract_wavelet_features(&input_matrix, output_matrix, config, frequency);
    }
#endif

#if EI_DSP_PARAMS_SPECTRAL_ANALYSIS_ANALYSIS_TYPE_FFT || EI_DSP_PARAMS_ALL
    if (strcmp(config->analysis_type, "FFT") == 0) {
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	491e      	ldr	r1, [pc, #120]	; (8007410 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc8>)
 8007396:	4618      	mov	r0, r3
 8007398:	f7f8 ff3a 	bl	8000210 <strcmp>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d128      	bne.n	80073f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xac>
        if (config->implementation_version == 1) {
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10a      	bne.n	80073c0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x78>
            return spectral::feature::extract_spectral_analysis_features_v1(
 80073aa:	f107 0314 	add.w	r3, r7, #20
 80073ae:	ed97 0a00 	vldr	s0, [r7]
 80073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff f84a 	bl	8006450 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073bc:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073be:	e01a      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else if (config->implementation_version == 4) {
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	889b      	ldrh	r3, [r3, #4]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d10a      	bne.n	80073de <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
            return spectral::feature::extract_spectral_analysis_features_v4(
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	ed97 0a00 	vldr	s0, [r7]
 80073d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fdc1 	bl	8006f5c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073da:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073dc:	e00b      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
        } else {
            return spectral::feature::extract_spectral_analysis_features_v2(
 80073de:	f107 0314 	add.w	r3, r7, #20
 80073e2:	ed97 0a00 	vldr	s0, [r7]
 80073e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fc9e 	bl	8006d2c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v2EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 80073f0:	4604      	mov	r4, r0
                &input_matrix,
                output_matrix,
                config,
                frequency);
 80073f2:	e000      	b.n	80073f6 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xae>
            output_matrix,
            config,
            frequency);
    }
#endif
    return EIDSP_NOT_SUPPORTED;
 80073f4:	4c07      	ldr	r4, [pc, #28]	; (8007414 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xcc>)
}
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fa f8ee 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 8007400:	4623      	mov	r3, r4
 8007402:	4618      	mov	r0, r3
 8007404:	372c      	adds	r7, #44	; 0x2c
 8007406:	46bd      	mov	sp, r7
 8007408:	bd90      	pop	{r4, r7, pc}
 800740a:	bf00      	nop
 800740c:	fffffc16 	.word	0xfffffc16
 8007410:	0802119c 	.word	0x0802119c
 8007414:	fffffc0a 	.word	0xfffffc0a

08007418 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count, const ei_impulse_t *impulse):
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	60da      	str	r2, [r3, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3310      	adds	r3, #16
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff65 	bl	8007312 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	f000 f832 	bl	80074d2 <_ZN14SignalWithAxes8get_dataEjjPf>
 800746e:	4603      	mov	r3, r0
        };
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	429a      	cmp	r2, r3
 800748c:	d102      	bne.n	8007494 <_ZN14SignalWithAxes10get_signalEv+0x1c>
            return this->_original_signal;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	e01a      	b.n	80074ca <_ZN14SignalWithAxes10get_signalEv+0x52>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691a      	ldr	r2, [r3, #16]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6892      	ldr	r2, [r2, #8]
 80074a8:	fb03 f202 	mul.w	r2, r3, r2
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]
        };
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 0210 	add.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f003 fdae 	bl	800b022 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>
#endif
        return &wrapped_signal;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3310      	adds	r3, #16
    }
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	; 0x28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	68d2      	ldr	r2, [r2, #12]
 80074ee:	6992      	ldr	r2, [r2, #24]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	61bb      	str	r3, [r7, #24]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	68d2      	ldr	r2, [r2, #12]
 8007504:	6992      	ldr	r2, [r2, #24]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
 800750a:	617b      	str	r3, [r7, #20]

        size_t out_ptr_ix = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	623b      	str	r3, [r7, #32]
 8007514:	e02a      	b.n	800756c <_ZN14SignalWithAxes8get_dataEjjPf+0x9a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	e01c      	b.n	8007556 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	18d1      	adds	r1, r2, r3
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	627a      	str	r2, [r7, #36]	; 0x24
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	2201      	movs	r2, #1
 8007540:	f002 fdf4 	bl	800a12c <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8007544:	6138      	str	r0, [r7, #16]
                if (r != 0) {
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <_ZN14SignalWithAxes8get_dataEjjPf+0x7e>
                    return r;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	e014      	b.n	800757a <_ZN14SignalWithAxes8get_dataEjjPf+0xa8>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	429a      	cmp	r2, r3
 800755e:	d3dd      	bcc.n	800751c <_ZN14SignalWithAxes8get_dataEjjPf+0x4a>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	6a3a      	ldr	r2, [r7, #32]
 8007568:	4413      	add	r3, r2
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	4413      	add	r3, r2
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	429a      	cmp	r2, r3
 8007576:	d3ce      	bcc.n	8007516 <_ZN14SignalWithAxes8get_dataEjjPf+0x44>
                }
            }
        }

        return 0;
 8007578:	2300      	movs	r3, #0
    }
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	; 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZN19ei_impulse_handle_tD1Ev>:
class ei_impulse_handle_t {
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fb fc86 	bl	8002e9e <_ZN18ei_impulse_state_tD1Ev>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>:

__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_fomo(const ei_impulse_t *impulse,
                                                                            ei_impulse_result_t *result,
                                                                            float *data,
                                                                            int out_width,
                                                                            int out_height) {
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075aa:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>:
                                                                           ei_impulse_result_t *result,
                                                                           int8_t *data,
                                                                           float zero_point,
                                                                           float scale,
                                                                           int out_width,
                                                                           int out_height) {
 80075ba:	b480      	push	{r7}
 80075bc:	b087      	sub	sp, #28
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6178      	str	r0, [r7, #20]
 80075c2:	6139      	str	r1, [r7, #16]
 80075c4:	60fa      	str	r2, [r7, #12]
 80075c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80075ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80075ce:	603b      	str	r3, [r7, #0]

    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80075d0:	f06f 0314 	mvn.w	r3, #20
#endif
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_i8(const ei_impulse_t *impulse,
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6178      	str	r0, [r7, #20]
 80075e8:	6139      	str	r1, [r7, #16]
 80075ea:	60fa      	str	r2, [r7, #12]
 80075ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80075f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80075f4:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	e03e      	b.n	800767a <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x9a>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f993 3000 	ldrsb.w	r3, [r3]
 8007606:	ee07 3a90 	vmov	s15, r3
 800760a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800760e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007616:	ed97 7a01 	vldr	s14, [r7, #4]
 800761a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800761e:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d011      	beq.n	800764c <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x6c>
            ei_printf("%s:\t", impulse->categories[ix]);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4619      	mov	r1, r3
 8007638:	4816      	ldr	r0, [pc, #88]	; (8007694 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb4>)
 800763a:	f001 fbfb 	bl	8008e34 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 800763e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007642:	f00f fd9d 	bl	8017180 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8007646:	4814      	ldr	r0, [pc, #80]	; (8007698 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0xb8>)
 8007648:	f001 fbf4 	bl	8008e34 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	3201      	adds	r2, #1
 8007660:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	3304      	adds	r3, #4
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3301      	adds	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8007680:	461a      	mov	r2, r3
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4293      	cmp	r3, r2
 8007686:	d3b9      	bcc.n	80075fc <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb+0x1c>
    }

    return EI_IMPULSE_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	08021440 	.word	0x08021440
 8007698:	08021198 	.word	0x08021198

0800769c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	70fb      	strb	r3, [r7, #3]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	e031      	b.n	8007714 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x78>
        float value = data[ix];
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4413      	add	r3, r2
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]

        if (debug) {
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d011      	beq.n	80076e6 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x4a>
            ei_printf("%s:\t", impulse->categories[ix]);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	4816      	ldr	r0, [pc, #88]	; (800772c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x90>)
 80076d4:	f001 fbae 	bl	8008e34 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80076d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80076dc:	f00f fd50 	bl	8017180 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80076e0:	4813      	ldr	r0, [pc, #76]	; (8007730 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x94>)
 80076e2:	f001 fba7 	bl	8008e34 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	3201      	adds	r2, #1
 80076fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3301      	adds	r3, #1
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	4413      	add	r3, r2
 8007708:	3304      	adds	r3, #4
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3301      	adds	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800771a:	461a      	mov	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4293      	cmp	r3, r2
 8007720:	d3c6      	bcc.n	80076b0 <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb+0x14>
    }

    return EI_IMPULSE_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	08021440 	.word	0x08021440
 8007730:	08021198 	.word	0x08021198

08007734 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>:
 * Fill the visual anomaly result structures from an unquantized output tensor
 */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_visual_ad_struct_f32(const ei_impulse_t *impulse,
                                                                       ei_impulse_result_t *result,
                                                                       float *data,
                                                                       bool debug) {
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	70fb      	strb	r3, [r7, #3]
    }

    result->visual_ad_grid_cells = results.data();
    result->visual_ad_count = results.size();
#endif // EI_CLASSIFIER_HAS_VISUAL_ANOMALY
    return EI_IMPULSE_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov5(const ei_impulse_t *impulse,
                                                                              ei_impulse_result_t *result,
                                                                              int version,
                                                                              float *data,
                                                                              size_t output_features_count,
                                                                              bool debug = false) {
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800775e:	f06f 0314 	mvn.w	r3, #20
#endif
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>:
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolox(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                             float *data,
                                                                             size_t output_features_count,
                                                                             bool debug = false) {
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800777c:	f06f 0314 	mvn.w	r3, #20
#endif // EI_HAS_YOLOX
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>:
  * Fill the result structure from an unquantized output tensor
  * (we don't support quantized here a.t.m.)
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_yolov7(const ei_impulse_t *impulse, ei_impulse_result_t *result,
                                                                              float *data,
                                                                              size_t output_features_count) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
    result->bounding_boxes = results.data();
    result->bounding_boxes_count = results.size();

    return EI_IMPULSE_OK;
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800779a:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_YOLOV7
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_decode_detections(const ei_impulse_t *impulse,
                                                                                     ei_impulse_result_t *result,
                                                                                     float *data,
                                                                                     size_t output_features_count,
                                                                                     bool debug = false) {
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_DECODE_DETECTIONS
    return fill_result_struct_tao_decode_detections_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077b8:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_DETECT_DETECTIONS
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov3(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV3
    return fill_result_struct_tao_yolov3_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077d6:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV3
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>:
  */
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_f32_tao_yolov4(const ei_impulse_t *impulse,
                                                                                ei_impulse_result_t *result,
                                                                                float *data,
                                                                                size_t output_features_count,
                                                                                bool debug = false) {
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	603b      	str	r3, [r7, #0]
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, 0.0f, 1.0f, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 80077f4:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>:
 * @param input Array of input values
 * @param scale Array of scale values (obtain from StandardScaler in Python)
 * @param mean Array of mean values (obtain from StandardScaler in Python)
 * @param input_size Size of input, scale and mean arrays
 */
void standard_scaler(float *input, const float *scale, const float *mean, size_t input_size) {
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	603b      	str	r3, [r7, #0]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e01e      	b.n	8007856 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x52>
        input[ix] = (input[ix] - mean[ix]) / scale[ix];
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	ed93 7a00 	vldr	s14, [r3]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	edd3 7a00 	vldr	s15, [r3]
 8007830:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	ed93 7a00 	vldr	s14, [r3]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	edc3 7a00 	vstr	s15, [r3]
    for (size_t ix = 0; ix < input_size; ix++) {
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3301      	adds	r3, #1
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d3dc      	bcc.n	8007818 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j+0x14>
    }
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>:
 * Calculate the distance between input vector and the cluster
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param cluster A cluster (number of centroids should match input_size)
 */
float calculate_cluster_distance(float *input, size_t input_size, const ei_classifier_anom_cluster_t *cluster) {
 800786c:	b5b0      	push	{r4, r5, r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
    // todo: check input_size and centroid size?

    float dist = 0.0f;
 8007878:	f04f 0300 	mov.w	r3, #0
 800787c:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e029      	b.n	80078d8 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x6c>
        dist += pow(input[ix] - cluster->centroid[ix], 2);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	ed93 7a00 	vldr	s14, [r3]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	edd3 7a00 	vldr	s15, [r3]
 800789e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078a2:	2002      	movs	r0, #2
 80078a4:	eeb0 0a67 	vmov.f32	s0, s15
 80078a8:	f002 fa02 	bl	8009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80078ac:	ec55 4b10 	vmov	r4, r5, d0
 80078b0:	6978      	ldr	r0, [r7, #20]
 80078b2:	f7f8 fe79 	bl	80005a8 <__aeabi_f2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fd15 	bl	80002ec <__adddf3>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7f9 f9bd 	bl	8000c48 <__aeabi_d2f>
 80078ce:	4603      	mov	r3, r0
 80078d0:	617b      	str	r3, [r7, #20]
    for (size_t ix = 0; ix < input_size; ix++) {
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3301      	adds	r3, #1
 80078d6:	613b      	str	r3, [r7, #16]
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d3d1      	bcc.n	8007884 <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t+0x18>
    }
    return sqrt(dist) - cluster->max_error;
 80078e0:	ed97 0a05 	vldr	s0, [r7, #20]
 80078e4:	f7f9 fc54 	bl	8001190 <_ZSt4sqrtf>
 80078e8:	eeb0 7a40 	vmov.f32	s14, s0
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80078f2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80078f6:	eeb0 0a67 	vmov.f32	s0, s15
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}

08007900 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>:
 * @param input Array of input values (already scaled by standard_scaler)
 * @param input_size Size of the input array
 * @param clusters Array of clusters
 * @param cluster_size Size of cluster array
 */
float get_min_distance_to_cluster(float *input, size_t input_size, const ei_classifier_anom_cluster_t *clusters, size_t cluster_size) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
    float min = 1000.0f;
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x64>)
 8007910:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007912:	2300      	movs	r3, #0
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e018      	b.n	800794a <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x4a>
        float dist = calculate_cluster_distance(input, input_size, &clusters[ix]);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	461a      	mov	r2, r3
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ffa1 	bl	800786c <_ZN12_GLOBAL__N_126calculate_cluster_distanceEPfjPK28ei_classifier_anom_cluster_t>
 800792a:	ed87 0a05 	vstr	s0, [r7, #20]
        if (dist < min) {
 800792e:	ed97 7a05 	vldr	s14, [r7, #20]
 8007932:	edd7 7a07 	vldr	s15, [r7, #28]
 8007936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	d501      	bpl.n	8007944 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x44>
            min = dist;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	61fb      	str	r3, [r7, #28]
    for (size_t ix = 0; ix < cluster_size; ix++) {
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	3301      	adds	r3, #1
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3e2      	bcc.n	8007918 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj+0x18>
        }
    }
    return min;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	ee07 3a90 	vmov	s15, r3
}
 8007958:	eeb0 0a67 	vmov.f32	s0, s15
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	447a0000 	.word	0x447a0000

08007968 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    uint32_t anom_axes_size,
    const uint16_t *anom_axis,
    float *input)
{
 8007968:	b480      	push	{r7}
 800796a:	b08d      	sub	sp, #52	; 0x34
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
    if (input_block_ids_size == 1) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d11a      	bne.n	80079b2 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x4a>
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	e012      	b.n	80079a8 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x40>
            input[ix] = fmatrix[0].matrix->buffer[anom_axis[ix]];
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800798e:	440b      	add	r3, r1
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	441a      	add	r2, r3
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800799c:	440b      	add	r3, r1
 800799e:	6812      	ldr	r2, [r2, #0]
 80079a0:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	3301      	adds	r3, #1
 80079a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3e8      	bcc.n	8007982 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x1a>
 80079b0:	e053      	b.n	8007a5a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
    else {
#if EI_CLASSIFIER_SINGLE_FEATURE_INPUT == 0
        ei::matrix_t* matrix = NULL;
#endif
        // tracks where we are now in the combined feature matrix
        uint32_t global_buf_pos = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]
        // we add the size of passed matrix to it
        uint32_t buf_offset = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
        // current index of input feature
        uint32_t input_pos = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t i = 0; i < input_block_ids_size; i++) {
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e044      	b.n	8007a4e <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xe6>
            if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, anom_axes_size)) {
                ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
                return EI_IMPULSE_INVALID_SIZE;
            }
#else
            ei::matrix_t* matrix = fmatrix[0].matrix;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	617b      	str	r3, [r7, #20]
#endif
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	e02c      	b.n	8007a2a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xc2>
                global_buf_pos = anom_axis[input_pos];
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
                if (global_buf_pos <= buf_offset + (matrix->rows * matrix->cols)) {
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	6892      	ldr	r2, [r2, #8]
 80079e4:	fb03 f202 	mul.w	r2, r3, r2
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	4413      	add	r3, r2
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d820      	bhi.n	8007a34 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xcc>
                    input[input_pos] = matrix->buffer[anom_axis[input_pos] - buf_offset];
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079fc:	440b      	add	r3, r1
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	1acb      	subs	r3, r1, r3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a10:	440b      	add	r3, r1
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	601a      	str	r2, [r3, #0]
                    input_pos++;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	3301      	adds	r3, #1
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
                if (input_pos >= anom_axes_size) { goto end; }
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d219      	bcs.n	8007a58 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf0>
            for (size_t ix = 0; ix < anom_axes_size; ix++) {
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3ce      	bcc.n	80079d0 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x68>
 8007a32:	e000      	b.n	8007a36 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xce>
                }
                else {
                    break;
 8007a34:	bf00      	nop
                }
            }
            buf_offset += matrix->rows * matrix->cols;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	6892      	ldr	r2, [r2, #8]
 8007a3e:	fb02 f303 	mul.w	r3, r2, r3
 8007a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a44:	4413      	add	r3, r2
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
        for (size_t i = 0; i < input_block_ids_size; i++) {
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3b6      	bcc.n	80079c4 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0x5c>
        }
        end:;
 8007a56:	e000      	b.n	8007a5a <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf+0xf2>
                if (input_pos >= anom_axes_size) { goto end; }
 8007a58:	bf00      	nop
    }
    return EI_IMPULSE_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3734      	adds	r7, #52	; 0x34
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08e      	sub	sp, #56	; 0x38
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
    ei_learning_block_config_anomaly_kmeans_t *block_config = (ei_learning_block_config_anomaly_kmeans_t*)config_ptr;
 8007a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint64_t anomaly_start_ms = ei_read_timer_ms();
 8007a7a:	f00f fb63 	bl	8017144 <_Z16ei_read_timer_msv>
 8007a7e:	e9c7 0108 	strd	r0, r1, [r7, #32]

    float *input = (float*)ei_malloc(block_config->anom_axes_size * sizeof(float));
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f00f fc7d 	bl	8017388 <_Z9ei_mallocj>
 8007a8e:	61f8      	str	r0, [r7, #28]
    if (!input) {
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3a>
        ei_printf("Failed to allocate memory for anomaly input buffer");
 8007a96:	4829      	ldr	r0, [pc, #164]	; (8007b3c <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
 8007a98:	f001 f9cc 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_OUT_OF_MEMORY;
 8007a9c:	f06f 030a 	mvn.w	r3, #10
 8007aa0:	e047      	b.n	8007b32 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xca>
    }

    extract_anomaly_input_values(fmatrix, input_block_ids, input_block_ids_size, block_config->anom_axes_size, block_config->anom_axis, input);
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	891b      	ldrh	r3, [r3, #8]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	9201      	str	r2, [sp, #4]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f7ff ff55 	bl	8007968 <_Z28extract_anomaly_input_valuesP12ei_feature_tPmmmPKtPf>

    standard_scaler(input, block_config->anom_scale, block_config->anom_mean, block_config->anom_axes_size);
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac0:	6959      	ldr	r1, [r3, #20]
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	891b      	ldrh	r3, [r3, #8]
 8007aca:	69f8      	ldr	r0, [r7, #28]
 8007acc:	f7ff fe9a 	bl	8007804 <_ZN12_GLOBAL__N_115standard_scalerEPfPKfS2_j>
    float anomaly = get_min_distance_to_cluster(
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	891b      	ldrh	r3, [r3, #8]
    float anomaly = get_min_distance_to_cluster(
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	68da      	ldr	r2, [r3, #12]
        input, block_config->anom_axes_size, block_config->anom_clusters, block_config->anom_cluster_count);
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	8a1b      	ldrh	r3, [r3, #16]
    float anomaly = get_min_distance_to_cluster(
 8007ade:	69f8      	ldr	r0, [r7, #28]
 8007ae0:	f7ff ff0e 	bl	8007900 <_ZN12_GLOBAL__N_127get_min_distance_to_clusterEPfjPK28ei_classifier_anom_cluster_tj>
 8007ae4:	ed87 0a06 	vstr	s0, [r7, #24]

    uint64_t anomaly_end_ms = ei_read_timer_ms();
 8007ae8:	f00f fb2c 	bl	8017144 <_Z16ei_read_timer_msv>
 8007aec:	e9c7 0104 	strd	r0, r1, [r7, #16]

    if (debug) {
 8007af0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xac>
        ei_printf("Anomaly score (time: %d ms.): ", static_cast<int>(anomaly_end_ms - anomaly_start_ms));
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	480f      	ldr	r0, [pc, #60]	; (8007b40 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 8007b02:	f001 f997 	bl	8008e34 <_Z9ei_printfPKcz>
        ei_printf_float(anomaly);
 8007b06:	ed97 0a06 	vldr	s0, [r7, #24]
 8007b0a:	f00f fb39 	bl	8017180 <_Z15ei_printf_floatf>
        ei_printf("\n");
 8007b0e:	480d      	ldr	r0, [pc, #52]	; (8007b44 <_Z18run_kmeans_anomalyPK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xdc>)
 8007b10:	f001 f990 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    result->timing.anomaly = anomaly_end_ms - anomaly_start_ms;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    result->anomaly = anomaly;
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    ei_free(input);
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	f00f fc46 	bl	80173bc <_Z7ei_freePv>

    return EI_IMPULSE_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3730      	adds	r7, #48	; 0x30
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	08021448 	.word	0x08021448
 8007b40:	0802147c 	.word	0x0802147c
 8007b44:	08021198 	.word	0x08021198

08007b48 <_ZL17pre_cast_quantizefflb>:
#define __EI_QUANTIZE__H__

#include <algorithm>
#include <cmath>

static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007b52:	edc7 0a02 	vstr	s1, [r7, #8]
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]

    int32_t max_value = is_signed ? 127 : 255;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <_ZL17pre_cast_quantizefflb+0x1e>
 8007b62:	237f      	movs	r3, #127	; 0x7f
 8007b64:	e000      	b.n	8007b68 <_ZL17pre_cast_quantizefflb+0x20>
 8007b66:	23ff      	movs	r3, #255	; 0xff
 8007b68:	61bb      	str	r3, [r7, #24]
    int32_t min_value = is_signed ? -128 : 0;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <_ZL17pre_cast_quantizefflb+0x2e>
 8007b70:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007b74:	e000      	b.n	8007b78 <_ZL17pre_cast_quantizefflb+0x30>
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 8007b7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b86:	eeb0 0a66 	vmov.f32	s0, s13
 8007b8a:	f7f9 fb11 	bl	80011b0 <_ZSt5roundf>
 8007b8e:	eef0 7a40 	vmov.f32	s15, s0
 8007b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b96:	ee17 2a90 	vmov	r2, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	61fb      	str	r3, [r7, #28]
 8007ba0:	f107 0214 	add.w	r2, r7, #20
 8007ba4:	f107 031c 	add.w	r3, r7, #28
 8007ba8:	4611      	mov	r1, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f003 fb05 	bl	800b1ba <_ZSt3maxIlERKT_S2_S2_>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4610      	mov	r0, r2
 8007bba:	f003 faea 	bl	800b192 <_ZSt3minIlERKT_S2_S2_>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	681b      	ldr	r3, [r3, #0]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d201      	bcs.n	8007be4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	e000      	b.n	8007be6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007be4:	687b      	ldr	r3, [r7, #4]
    }
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08e      	sub	sp, #56	; 0x38
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
    size_t matrix_els = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t input_idx = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	633b      	str	r3, [r7, #48]	; 0x30

    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	e098      	b.n	8007d42 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14e>
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	61fb      	str	r3, [r7, #28]
#endif

        matrix_els += matrix->rows * matrix->cols;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	6892      	ldr	r2, [r2, #8]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c24:	4413      	add	r3, r2
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34

        switch (input->type) {
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d024      	beq.n	8007c7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x86>
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	dc7a      	bgt.n	8007d2a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d002      	beq.n	8007c3e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d04a      	beq.n	8007cd2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xde>
 8007c3c:	e075      	b.n	8007d2a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x136>
            case kTfLiteFloat32: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c3e:	2300      	movs	r3, #0
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c42:	e010      	b.n	8007c66 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x72>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	1c58      	adds	r0, r3, #1
 8007c56:	6338      	str	r0, [r7, #48]	; 0x30
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	6812      	ldr	r2, [r2, #0]
 8007c5e:	601a      	str	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	3301      	adds	r3, #1
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	6892      	ldr	r2, [r2, #8]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d3e5      	bcc.n	8007c44 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x50>
                }
                break;
 8007c78:	e060      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	e01e      	b.n	8007cbe <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xca>
                    float val = (float)matrix->buffer[ix];
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	61bb      	str	r3, [r7, #24]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	edd3 7a03 	vldr	s15, [r3, #12]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	eef0 0a67 	vmov.f32	s1, s15
 8007ca0:	ed97 0a06 	vldr	s0, [r7, #24]
 8007ca4:	f7ff ff50 	bl	8007b48 <_ZL17pre_cast_quantizefflb>
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8007cb2:	4413      	add	r3, r2
 8007cb4:	b242      	sxtb	r2, r0
 8007cb6:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	3301      	adds	r3, #1
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	6892      	ldr	r2, [r2, #8]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d3d7      	bcc.n	8007c80 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8c>
                }
                break;
 8007cd0:	e034      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	623b      	str	r3, [r7, #32]
 8007cd6:	e01e      	b.n	8007d16 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x122>
                    float val = (float)matrix->buffer[ix];
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	617b      	str	r3, [r7, #20]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	edd3 7a03 	vldr	s15, [r3, #12]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	eef0 0a67 	vmov.f32	s1, s15
 8007cf8:	ed97 0a05 	vldr	s0, [r7, #20]
 8007cfc:	f7ff ff24 	bl	8007b48 <_ZL17pre_cast_quantizefflb>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	1c59      	adds	r1, r3, #1
 8007d08:	6339      	str	r1, [r7, #48]	; 0x30
 8007d0a:	4413      	add	r3, r2
 8007d0c:	b2c2      	uxtb	r2, r0
 8007d0e:	701a      	strb	r2, [r3, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	3301      	adds	r3, #1
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	6892      	ldr	r2, [r2, #8]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d3d7      	bcc.n	8007cd8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe4>
                break;
 8007d28:	e008      	b.n	8007d3c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x148>
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4814      	ldr	r0, [pc, #80]	; (8007d84 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x190>)
 8007d32:	f001 f87f 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 8007d36:	f06f 030c 	mvn.w	r3, #12
 8007d3a:	e01e      	b.n	8007d7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    for (size_t i = 0; i < input_block_ids_size; i++) {
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	3301      	adds	r3, #1
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	f4ff af62 	bcc.w	8007c10 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c>
            }
        }
    }

    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	089b      	lsrs	r3, r3, #2
 8007d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d00f      	beq.n	8007d78 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d00a      	beq.n	8007d78 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x184>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
            (int)input->bytes, (int)matrix_els);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	699b      	ldr	r3, [r3, #24]
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 8007d66:	4619      	mov	r1, r3
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x194>)
 8007d6e:	f001 f861 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 8007d72:	f06f 0317 	mvn.w	r3, #23
 8007d76:	e000      	b.n	8007d7a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x186>
    }

    return EI_IMPULSE_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3738      	adds	r7, #56	; 0x38
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	0802149c 	.word	0x0802149c
 8007d88:	080214c0 	.word	0x080214c0

08007d8c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
 8007da2:	617b      	str	r3, [r7, #20]

    switch (output->type) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b09      	cmp	r3, #9
 8007daa:	d026      	beq.n	8007dfa <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x6e>
 8007dac:	2b09      	cmp	r3, #9
 8007dae:	f300 8093 	bgt.w	8007ed8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d002      	beq.n	8007dbc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x30>
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d057      	beq.n	8007e6a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xde>
 8007dba:	e08d      	b.n	8007ed8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x14c>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	089b      	lsrs	r3, r3, #2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d00e      	beq.n	8007de6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x5a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	da00      	bge.n	8007dd2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	109b      	asrs	r3, r3, #2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4846      	ldr	r0, [pc, #280]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007ddc:	f001 f82a 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007de0:	f06f 0317 	mvn.w	r3, #23
 8007de4:	e082      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f016 fdc7 	bl	801e986 <memcpy>
            break;
 8007df8:	e077      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteInt8: {
            if (output->bytes != matrix_els) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d00a      	beq.n	8007e1a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8e>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e08:	4619      	mov	r1, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4839      	ldr	r0, [pc, #228]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e10:	f001 f810 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e14:	f06f 0317 	mvn.w	r3, #23
 8007e18:	e068      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e01e      	b.n	8007e5e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd2>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	f993 3000 	ldrsb.w	r3, [r3]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e46:	edc7 7a04 	vstr	s15, [r7, #16]
                output_matrix->buffer[ix] = value;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d3db      	bcc.n	8007e20 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x94>
            }
            break;
 8007e68:	e03f      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d00a      	beq.n	8007e8a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xfe>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes, (int)matrix_els);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	699b      	ldr	r3, [r3, #24]
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 8007e78:	4619      	mov	r1, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	481d      	ldr	r0, [pc, #116]	; (8007ef4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x168>)
 8007e80:	f000 ffd8 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
 8007e84:	f06f 0317 	mvn.w	r3, #23
 8007e88:	e030      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
            }

            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	e01d      	b.n	8007ecc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x140>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	edd3 7a03 	vldr	s15, [r3, #12]
 8007eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb4:	edc7 7a03 	vstr	s15, [r7, #12]
                output_matrix->buffer[ix] = value;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d3dc      	bcc.n	8007e90 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x104>
            }
            break;
 8007ed6:	e008      	b.n	8007eea <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x15e>
        }
        default: {
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	4806      	ldr	r0, [pc, #24]	; (8007ef8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x16c>)
 8007ee0:	f000 ffa8 	bl	8008e34 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 8007ee4:	f06f 030d 	mvn.w	r3, #13
 8007ee8:	e000      	b.n	8007eec <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x160>
        }
    }

    return EI_IMPULSE_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	08021548 	.word	0x08021548
 8007ef8:	0802158c 	.word	0x0802158c

08007efc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	789b      	ldrb	r3, [r3, #2]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	f040 822d 	bne.w	8008374 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x478>
        switch (block_config->object_detection_last_layer) {
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	2b09      	cmp	r3, #9
 8007f24:	f200 821c 	bhi.w	8008360 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x464>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007fcb 	.word	0x08007fcb
 8007f34:	08007f59 	.word	0x08007f59
 8007f38:	08007fd7 	.word	0x08007fd7
 8007f3c:	080080b3 	.word	0x080080b3
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	080080d3 	.word	0x080080d3
 8007f48:	0800811b 	.word	0x0800811b
 8007f4c:	0800811b 	.word	0x0800811b
 8007f50:	080081d9 	.word	0x080081d9
 8007f54:	080082a3 	.word	0x080082a3
            case EI_CLASSIFIER_LAST_LAYER_FOMO: {
                bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b09      	cmp	r3, #9
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	74fb      	strb	r3, [r7, #19]
                if (int8_output) {
 8007f66:	7cfb      	ldrb	r3, [r7, #19]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01d      	beq.n	8007fa8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xac>
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685a      	ldr	r2, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	ee07 3a90 	vmov	s15, r3
 8007f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f86:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_i8_fomo(impulse, result, output->data.int8, output->params.zero_point, output->params.scale,
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	eef0 0a47 	vmov.f32	s1, s14
 8007f94:	eeb0 0a67 	vmov.f32	s0, s15
 8007f98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f7ff fb0d 	bl	80075ba <_ZL26fill_result_struct_i8_fomoPK10ei_impulseP19ei_impulse_result_tPaffii>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
                        impulse->fomo_output_size, impulse->fomo_output_size);
                }
                break;
 8007fa6:	e233      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685a      	ldr	r2, [r3, #4]
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fb0:	4619      	mov	r1, r3
                        impulse->fomo_output_size, impulse->fomo_output_size);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    fill_res = fill_result_struct_f32_fomo(impulse, result, output->data.f,
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff faed 	bl	800759c <_ZL27fill_result_struct_f32_fomoPK10ei_impulseP19ei_impulse_result_tPfii>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8007fc8:	e222      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 8007fca:	48a4      	ldr	r0, [pc, #656]	; (800825c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
 8007fcc:	f000 ff32 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 8007fd0:	f06f 0309 	mvn.w	r3, #9
 8007fd4:	e21e      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE_FULL
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5:
            case EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI: {
                int version = impulse->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_YOLOV5_V5_DRPAI ?
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d101      	bne.n	8007fe4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xe8>
 8007fe0:	2305      	movs	r3, #5
 8007fe2:	e000      	b.n	8007fe6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xea>
 8007fe4:	2306      	movs	r3, #6
 8007fe6:	617b      	str	r3, [r7, #20]
                    5 : 6;

                if (output->type == kTfLiteInt8) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d11e      	bne.n	800802e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x132>
                    fill_res = fill_result_struct_quantized_yolov5(
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6859      	ldr	r1, [r3, #4]
                        impulse,
                        result,
                        version,
                        output->data.int8,
                        output->params.zero_point,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 800800a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	eef0 0a47 	vmov.f32	s1, s14
 8008016:	eeb0 0a67 	vmov.f32	s0, s15
 800801a:	460b      	mov	r3, r1
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f003 f8fd 	bl	800b220 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800802c:	e1f0      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b03      	cmp	r3, #3
 8008034:	d11e      	bne.n	8008074 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    fill_res = fill_result_struct_quantized_yolov5(
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6859      	ldr	r1, [r3, #4]
                        output->params.zero_point,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_yolov5(
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_yolov5(
 8008050:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008054:	9201      	str	r2, [sp, #4]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	eef0 0a47 	vmov.f32	s1, s14
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	460b      	mov	r3, r1
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f003 f8ed 	bl	800b246 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008072:	e1cd      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d111      	bne.n	80080a0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1a4>
                    fill_res = fill_result_struct_f32_yolov5(
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6859      	ldr	r1, [r3, #4]
                        impulse->tflite_output_features_count,
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolov5(
 8008084:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008088:	9201      	str	r2, [sp, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	460b      	mov	r3, r1
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fb5c 	bl	8007750 <_ZL29fill_result_struct_f32_yolov5PK10ei_impulseP19ei_impulse_result_tiPfjb>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800809e:	e1b7      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	486e      	ldr	r0, [pc, #440]	; (8008260 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
 80080a8:	f000 fec4 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80080ac:	f06f 0309 	mvn.w	r3, #9
 80080b0:	e1b0      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    fill_res = fill_result_struct_f32_yolox(
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.f,
                        impulse->tflite_output_features_count,
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_yolox(
 80080ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	460b      	mov	r3, r1
 80080c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff fb52 	bl	800776e <_ZL28fill_result_struct_f32_yoloxPK10ei_impulseP19ei_impulse_result_tPfjb>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        debug);
                #endif
                break;
 80080d0:	e19e      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            case EI_CLASSIFIER_LAST_LAYER_YOLOV7: {
                #if EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED == 1
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                #else
                    size_t output_feature_count = 1;
 80080d2:	2301      	movs	r3, #1
 80080d4:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080d6:	2300      	movs	r3, #0
 80080d8:	61fb      	str	r3, [r7, #28]
 80080da:	e00d      	b.n	80080f8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                        output_feature_count *= output->dims->data[ix];
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	fb02 f303 	mul.w	r3, r2, r3
 80080f0:	623b      	str	r3, [r7, #32]
                    for (int ix = 0; ix < output->dims->size; ix++) {
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	3301      	adds	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	dbeb      	blt.n	80080dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e0>
                    }
                    fill_res = fill_result_struct_f32_yolov7(
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff fb3d 	bl	800778c <_ZL29fill_result_struct_f32_yolov7PK10ei_impulseP19ei_impulse_result_tPfj>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                        impulse,
                        result,
                        output->data.f,
                        output_feature_count);
                #endif
                break;
 8008118:	e17a      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_SSD:
            case EI_CLASSIFIER_LAST_LAYER_TAO_RETINANET: {

                if (output->type == kTfLiteInt8) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b09      	cmp	r3, #9
 8008120:	d11c      	bne.n	800815c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x260>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800813c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	460b      	mov	r3, r1
 8008144:	eef0 0a47 	vmov.f32	s1, s14
 8008148:	eeb0 0a67 	vmov.f32	s0, s15
 800814c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f003 f88c 	bl	800b26c <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 800815a:	e159      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d11c      	bne.n	800819e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2a2>
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800816c:	ee07 3a90 	vmov	s15, r3
 8008170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_decode_detections(
 800817e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	460b      	mov	r3, r1
 8008186:	eef0 0a47 	vmov.f32	s1, s14
 800818a:	eeb0 0a67 	vmov.f32	s0, s15
 800818e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f003 f87e 	bl	800b292 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008196:	4603      	mov	r3, r0
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800819c:	e138      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d10f      	bne.n	80081c6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ca>
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_decode_detections(
 80081ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	460b      	mov	r3, r1
 80081b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff faf6 	bl	80077aa <_ZL44fill_result_struct_f32_tao_decode_detectionsPK10ei_impulseP19ei_impulse_result_tPfjb>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 80081c4:	e124      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	4825      	ldr	r0, [pc, #148]	; (8008264 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
 80081ce:	f000 fe31 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 80081d2:	f06f 0309 	mvn.w	r3, #9
 80081d6:	e11d      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV3: {

                if (output->type == kTfLiteInt8) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d11c      	bne.n	800821a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x31e>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 80081fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	eef0 0a47 	vmov.f32	s1, s14
 8008206:	eeb0 0a67 	vmov.f32	s0, s15
 800820a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f003 f853 	bl	800b2b8 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 8008218:	e0fa      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b03      	cmp	r3, #3
 8008220:	d122      	bne.n	8008268 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov3(
 800823c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	460b      	mov	r3, r1
 8008244:	eef0 0a47 	vmov.f32	s1, s14
 8008248:	eeb0 0a67 	vmov.f32	s0, s15
 800824c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f003 f845 	bl	800b2de <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800825a:	e0d9      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
 800825c:	080215b4 	.word	0x080215b4
 8008260:	080215fc 	.word	0x080215fc
 8008264:	08021634 	.word	0x08021634
                else if (output->type == kTfLiteFloat32) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10f      	bne.n	8008290 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x394>
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov3(
 8008278:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	460b      	mov	r3, r1
 8008280:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff faa0 	bl	80077c8 <_ZL33fill_result_struct_f32_tao_yolov3PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800828e:	e0bf      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	4619      	mov	r1, r3
 8008296:	4861      	ldr	r0, [pc, #388]	; (800841c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x520>)
 8008298:	f000 fdcc 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800829c:	f06f 0309 	mvn.w	r3, #9
 80082a0:	e0b8      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            case EI_CLASSIFIER_LAST_LAYER_TAO_YOLOV4: {

                if (output->type == kTfLiteInt8) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d11c      	bne.n	80082e4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3e8>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685a      	ldr	r2, [r3, #4]
                        impulse,
                        result,
                        output->data.int8,
                        output->params.zero_point,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	ed93 7a03 	vldr	s14, [r3, #12]
                        output->params.scale,
                        impulse->tflite_output_features_count,
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	460b      	mov	r3, r1
 80082cc:	eef0 0a47 	vmov.f32	s1, s14
 80082d0:	eeb0 0a67 	vmov.f32	s0, s15
 80082d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f003 f814 	bl	800b304 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
                }
                break;
 80082e2:	e095      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteUInt8) {
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d11c      	bne.n	8008326 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42a>
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685a      	ldr	r2, [r3, #4]
                        output->params.zero_point,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	ed93 7a03 	vldr	s14, [r3, #12]
                        impulse->tflite_output_features_count,
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_quantized_tao_yolov4(
 8008306:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	460b      	mov	r3, r1
 800830e:	eef0 0a47 	vmov.f32	s1, s14
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f003 f806 	bl	800b32a <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8008324:	e074      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                else if (output->type == kTfLiteFloat32) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10f      	bne.n	800834e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x452>
                    fill_res = fill_result_struct_f32_tao_yolov4(
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
                        impulse->tflite_output_features_count,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
                    fill_res = fill_result_struct_f32_tao_yolov4(
 8008336:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	460b      	mov	r3, r1
 800833e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa50 	bl	80077e6 <_ZL33fill_result_struct_f32_tao_yolov4PK10ei_impulseP19ei_impulse_result_tPfjb>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 800834c:	e060      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	4832      	ldr	r0, [pc, #200]	; (8008420 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x524>)
 8008356:	f000 fd6d 	bl	8008e34 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800835a:	f06f 0309 	mvn.w	r3, #9
 800835e:	e059      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    impulse->object_detection_last_layer);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f993 3044 	ldrsb.w	r3, [r3, #68]	; 0x44
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 8008366:	4619      	mov	r1, r3
 8008368:	482e      	ldr	r0, [pc, #184]	; (8008424 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x528>)
 800836a:	f000 fd63 	bl	8008e34 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 800836e:	f06f 0309 	mvn.w	r3, #9
 8008372:	e04f      	b.n	8008414 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x518>
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	789b      	ldrb	r3, [r3, #2]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d113      	bne.n	80083a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4a8>
    {
        if (!result->copy_output) {
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008382:	f083 0301 	eor.w	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d041      	beq.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            fill_res = fill_result_visual_ad_struct_f32(impulse, result, output->data.f, debug);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff f9cc 	bl	8007734 <_ZL32fill_result_visual_ad_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800839c:	4603      	mov	r3, r0
 800839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083a2:	e035      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80083aa:	f083 0301 	eor.w	r3, r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02d      	beq.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	76fb      	strb	r3, [r7, #27]
            if (int8_output) {
 80083c2:	7efb      	ldrb	r3, [r7, #27]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d018      	beq.n	80083fa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fe>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	ed93 7a03 	vldr	s14, [r3, #12]
 80083de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80083e2:	eef0 0a47 	vmov.f32	s1, s14
 80083e6:	eeb0 0a67 	vmov.f32	s0, s15
 80083ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff f8f7 	bl	80075e0 <_ZL21fill_result_struct_i8PK10ei_impulseP19ei_impulse_result_tPaffb>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80083f8:	e00a      	b.n	8008410 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x514>
            }
            else {
                fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff f949 	bl	800769c <_ZL22fill_result_struct_f32PK10ei_impulseP19ei_impulse_result_tPfb>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
        }
    }

    return fill_res;
 8008410:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	; 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	08021668 	.word	0x08021668
 8008420:	0802169c 	.word	0x0802169c
 8008424:	080216d0 	.word	0x080216d0

08008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>:
    uint64_t *ctx_start_us,
    TfLiteTensor* input,
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	617b      	str	r3, [r7, #20]

    *ctx_start_us = ei_read_timer_us();
 800843c:	f00e fe8f 	bl	801715e <_Z16ei_read_timer_usv>
 8008440:	4602      	mov	r2, r0
 8008442:	460b      	mov	r3, r1
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	e9c1 2300 	strd	r2, r3, [r1]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	4829      	ldr	r0, [pc, #164]	; (80084f4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xcc>)
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	74fb      	strb	r3, [r7, #19]
    if (init_status != kTfLiteOk) {
 8008456:	7cfb      	ldrb	r3, [r7, #19]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d007      	beq.n	800846c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x44>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 800845c:	7cfb      	ldrb	r3, [r7, #19]
 800845e:	4619      	mov	r1, r3
 8008460:	4825      	ldr	r0, [pc, #148]	; (80084f8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xd0>)
 8008462:	f000 fce7 	bl	8008e34 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8008466:	f06f 0305 	mvn.w	r3, #5
 800846a:	e03f      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	2000      	movs	r0, #0
 8008474:	4798      	blx	r3
 8008476:	4603      	mov	r3, r0
 8008478:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 800847a:	7cbb      	ldrb	r3, [r7, #18]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x5e>
        return EI_IMPULSE_TFLITE_ERROR;
 8008480:	f06f 0302 	mvn.w	r3, #2
 8008484:	e032      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	7a92      	ldrb	r2, [r2, #10]
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	4603      	mov	r3, r0
 8008496:	74bb      	strb	r3, [r7, #18]
    if (status != kTfLiteOk) {
 8008498:	7cbb      	ldrb	r3, [r7, #18]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0x7c>
        return EI_IMPULSE_TFLITE_ERROR;
 800849e:	f06f 0302 	mvn.w	r3, #2
 80084a2:	e023      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d11d      	bne.n	80084ea <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	7b12      	ldrb	r2, [r2, #12]
 80084b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	4603      	mov	r3, r0
 80084be:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084c0:	7cbb      	ldrb	r3, [r7, #18]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xa4>
            return EI_IMPULSE_TFLITE_ERROR;
 80084c6:	f06f 0302 	mvn.w	r3, #2
 80084ca:	e00f      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	7ad2      	ldrb	r2, [r2, #11]
 80084d4:	6a39      	ldr	r1, [r7, #32]
 80084d6:	4610      	mov	r0, r2
 80084d8:	4798      	blx	r3
 80084da:	4603      	mov	r3, r0
 80084dc:	74bb      	strb	r3, [r7, #18]
        if (status != kTfLiteOk) {
 80084de:	7cbb      	ldrb	r3, [r7, #18]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc2>
            return EI_IMPULSE_TFLITE_ERROR;
 80084e4:	f06f 0302 	mvn.w	r3, #2
 80084e8:	e000      	b.n	80084ec <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE+0xc4>
        }
    }

    return EI_IMPULSE_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	080012b9 	.word	0x080012b9
 80084f8:	08021704 	.word	0x08021704

080084fc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 80084fc:	b5b0      	push	{r4, r5, r7, lr}
 80084fe:	b08e      	sub	sp, #56	; 0x38
 8008500:	af04      	add	r7, sp, #16
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	e9c7 2300 	strd	r2, r3, [r7]

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24

    if (graph_config->model_invoke() != kTfLiteOk) {
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4798      	blx	r3
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf14      	ite	ne
 800851c:	2301      	movne	r3, #1
 800851e:	2300      	moveq	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x30>
        return EI_IMPULSE_TFLITE_ERROR;
 8008526:	f06f 0302 	mvn.w	r3, #2
 800852a:	e04d      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 800852c:	f00e fe17 	bl	801715e <_Z16ei_read_timer_usv>
 8008530:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 8008534:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	1a84      	subs	r4, r0, r2
 800853e:	eb61 0503 	sbc.w	r5, r1, r3
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008548:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 800854c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800854e:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 8008552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	f7f8 fbc5 	bl	8000ce8 <__aeabi_ldivmod>
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008564:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8008568:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0x82>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8008570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008576:	4619      	mov	r1, r3
 8008578:	4815      	ldr	r0, [pc, #84]	; (80085d0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xd4>)
 800857a:	f000 fc5b 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 800857e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008590:	68b9      	ldr	r1, [r7, #8]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7ff fcb2 	bl	8007efc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
 8008598:	4603      	mov	r3, r0
 800859a:	75fb      	strb	r3, [r7, #23]
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 800859c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xae>
        return fill_res;
 80085a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085a8:	e00e      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 80085aa:	f00e fdc3 	bl	8017134 <_Z29ei_run_impulse_check_canceledv>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f113 0f02 	cmn.w	r3, #2
 80085b4:	bf0c      	ite	eq
 80085b6:	2301      	moveq	r3, #1
 80085b8:	2300      	movne	r3, #0
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xca>
        return EI_IMPULSE_CANCELED;
 80085c0:	f06f 0301 	mvn.w	r3, #1
 80085c4:	e000      	b.n	80085c8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb+0xcc>
    }

    return EI_IMPULSE_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	; 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}
 80085d0:	08021734 	.word	0x08021734

080085d4 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 80085d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085d6:	b0d7      	sub	sp, #348	; 0x15c
 80085d8:	af06      	add	r7, sp, #24
 80085da:	f507 76a0 	add.w	r6, r7, #320	; 0x140
 80085de:	f5a6 769a 	sub.w	r6, r6, #308	; 0x134
 80085e2:	6030      	str	r0, [r6, #0]
 80085e4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80085e8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80085ec:	6001      	str	r1, [r0, #0]
 80085ee:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80085f2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80085f6:	600a      	str	r2, [r1, #0]
 80085f8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80085fc:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8008600:	6013      	str	r3, [r2, #0]
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
 8008602:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8008606:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 800860a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 8008614:	f00e fda3 	bl	801715e <_Z16ei_read_timer_usv>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 8008620:	4b65      	ldr	r3, [pc, #404]	; (80087b8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008626:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	2100      	movs	r1, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f001 fb6f 	bl	8009d14 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 8008636:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 800863a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800863e:	f107 0118 	add.w	r1, r7, #24
 8008642:	f107 0310 	add.w	r3, r7, #16
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4603      	mov	r3, r0
 8008656:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800865a:	f7ff fee5 	bl	8008428 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE>
 800865e:	4603      	mov	r3, r0
 8008660:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 8008664:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9e>
        return init_res;
 800866c:	f997 4137 	ldrsb.w	r4, [r7, #311]	; 0x137
 8008670:	e096      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	4618      	mov	r0, r3
 8008678:	f002 fe6a 	bl	800b350 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>
 800867c:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 8008680:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008684:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008690:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008698:	4413      	add	r3, r2
 800869a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 800869e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086a2:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80086a6:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80086aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086ae:	f5a3 709c 	sub.w	r0, r3, #312	; 0x138
 80086b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	f7ff fa98 	bl	8007bf4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    if (input_res != EI_IMPULSE_OK) {
 80086ca:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
        return input_res;
 80086d2:	f997 412b 	ldrsb.w	r4, [r7, #299]	; 0x12b
 80086d6:	e063      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 80086d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086dc:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80086e0:	f5a1 709a 	sub.w	r0, r1, #308	; 0x134
 80086e4:	f897 1164 	ldrb.w	r1, [r7, #356]	; 0x164
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80086ee:	9104      	str	r1, [sp, #16]
 80086f0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80086f4:	9103      	str	r1, [sp, #12]
 80086f6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80086fa:	9102      	str	r1, [sp, #8]
 80086fc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008700:	9101      	str	r1, [sp, #4]
 8008702:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8008706:	9100      	str	r1, [sp, #0]
 8008708:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800870c:	6800      	ldr	r0, [r0, #0]
 800870e:	f7ff fef5 	bl	80084fc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 8008718:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800871c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d023      	beq.n	800876c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 8008724:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008728:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008730:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008734:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4413      	add	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008742:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	4413      	add	r3, r2
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fb1a 	bl	8007d8c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
        if (output_res != EI_IMPULSE_OK) {
 800875e:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x198>
            return output_res;
 8008766:	f997 4129 	ldrsb.w	r4, [r7, #297]	; 0x129
 800876a:	e019      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
        }
    }

    graph_config->model_reset(ei_aligned_free);
 800876c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	4811      	ldr	r0, [pc, #68]	; (80087b8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1e4>)
 8008774:	4798      	blx	r3

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 8008776:	f00e fcf2 	bl	801715e <_Z16ei_read_timer_usv>
 800877a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800877e:	1a84      	subs	r4, r0, r2
 8008780:	eb61 0503 	sbc.w	r5, r1, r3
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800878c:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0

    if (run_res != EI_IMPULSE_OK) {
 8008790:	f997 312a 	ldrsb.w	r3, [r7, #298]	; 0x12a
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1ca>
        return run_res;
 8008798:	f997 412a 	ldrsb.w	r4, [r7, #298]	; 0x12a
 800879c:	e000      	b.n	80087a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x1cc>
    }

    return EI_IMPULSE_OK;
 800879e:	2400      	movs	r4, #0
}
 80087a0:	f107 0310 	add.w	r3, r7, #16
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 faca 	bl	8009d3e <_ZNSt10unique_ptrIvPFvPvEED1Ev>
 80087aa:	4623      	mov	r3, r4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b6:	bf00      	nop
 80087b8:	0800133d 	.word	0x0800133d

080087bc <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	b094      	sub	sp, #80	; 0x50
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	70fb      	strb	r3, [r7, #3]
    auto& impulse = handle->impulse;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	330c      	adds	r3, #12
 80087ce:	63bb      	str	r3, [r7, #56]	; 0x38
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d4:	e02f      	b.n	8008836 <run_inference+0x7a>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087de:	015b      	lsls	r3, r3, #5
 80087e0:	4413      	add	r3, r2
 80087e2:	f107 0414 	add.w	r4, r7, #20
 80087e6:	461d      	mov	r5, r3
 80087e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80087f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        result->copy_output = block.keep_output;
 80087f4:	7e3a      	ldrb	r2, [r7, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 80087fc:	69fc      	ldr	r4, [r7, #28]
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	78f9      	ldrb	r1, [r7, #3]
 800880a:	9103      	str	r1, [sp, #12]
 800880c:	9202      	str	r2, [sp, #8]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	9201      	str	r2, [sp, #4]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	462b      	mov	r3, r5
 8008816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	47a0      	blx	r4
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (res != EI_IMPULSE_OK) {
 8008822:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <run_inference+0x74>
            return res;
 800882a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800882e:	e017      	b.n	8008860 <run_inference+0xa4>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 8008830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008832:	3301      	adds	r3, #1
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800883e:	429a      	cmp	r2, r3
 8008840:	d3c9      	bcc.n	80087d6 <run_inference+0x1a>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008842:	f00e fc77 	bl	8017134 <_Z29ei_run_impulse_check_canceledv>
 8008846:	4603      	mov	r3, r0
 8008848:	f113 0f02 	cmn.w	r3, #2
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <run_inference+0xa2>
        return EI_IMPULSE_CANCELED;
 8008858:	f06f 0301 	mvn.w	r3, #1
 800885c:	e000      	b.n	8008860 <run_inference+0xa4>
    }

    return EI_IMPULSE_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3740      	adds	r7, #64	; 0x40
 8008864:	46bd      	mov	sp, r7
 8008866:	bdb0      	pop	{r4, r5, r7, pc}

08008868 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	4611      	mov	r1, r2
 8008878:	4618      	mov	r0, r3
 800887a:	f002 fdad 	bl	800b3d8 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff ffe5 	bl	8008868 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EEaSEOS4_>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3310      	adds	r3, #16
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fd39 	bl	800732c <_ZN2ei11ei_signal_tD1Ev>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
 80088c4:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80088c8:	b0a6      	sub	sp, #152	; 0x98
 80088ca:	af02      	add	r7, sp, #8
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	70fb      	strb	r3, [r7, #3]
 80088d4:	2600      	movs	r6, #0
    if(!handle) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <process_impulse+0x1e>
        return EI_IMPULSE_INFERENCE_ERROR;
 80088dc:	f06f 0615 	mvn.w	r6, #21
 80088e0:	e24c      	b.n	8008d7c <process_impulse+0x4b8>
    if (can_run_classifier_image_quantized(handle->impulse, block) == EI_IMPULSE_OK) {
        return run_classifier_image_quantized(handle->impulse, signal, result, debug);
    }
#endif

    memset(result, 0, sizeof(ei_impulse_result_t));
 80088e2:	f44f 7284 	mov.w	r2, #264	; 0x108
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f015 ff6b 	bl	801e7c4 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	4413      	add	r3, r2
 80088fc:	67bb      	str	r3, [r7, #120]	; 0x78

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 80088fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008904:	d201      	bcs.n	800890a <process_impulse+0x46>
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	e001      	b.n	800890e <process_impulse+0x4a>
 800890a:	f04f 33ff 	mov.w	r3, #4294967295
 800890e:	4618      	mov	r0, r3
 8008910:	f011 fbe9 	bl	801a0e6 <_Znaj>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f002 fbae 	bl	800b080 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>
    ei_feature_t* features = features_ptr.get();
 8008924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008928:	4618      	mov	r0, r3
 800892a:	f002 fbd7 	bl	800b0dc <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>
 800892e:	6778      	str	r0, [r7, #116]	; 0x74
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 8008930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	461a      	mov	r2, r3
 8008936:	2100      	movs	r1, #0
 8008938:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800893a:	f015 ff43 	bl	801e7c4 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
 800893e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8008940:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8008944:	429c      	cmp	r4, r3
 8008946:	d202      	bcs.n	800894e <process_impulse+0x8a>
 8008948:	1ca3      	adds	r3, r4, #2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	e001      	b.n	8008952 <process_impulse+0x8e>
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
 8008952:	4618      	mov	r0, r3
 8008954:	f011 fbc7 	bl	801a0e6 <_Znaj>
 8008958:	4603      	mov	r3, r0
 800895a:	461d      	mov	r5, r3
 800895c:	2304      	movs	r3, #4
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	1d2b      	adds	r3, r5, #4
 8008962:	601c      	str	r4, [r3, #0]
 8008964:	f105 0308 	add.w	r3, r5, #8
 8008968:	1e62      	subs	r2, r4, #1
 800896a:	4614      	mov	r4, r2
 800896c:	4698      	mov	r8, r3
 800896e:	e005      	b.n	800897c <process_impulse+0xb8>
 8008970:	4640      	mov	r0, r8
 8008972:	f002 fd21 	bl	800b3b8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>
 8008976:	f108 0804 	add.w	r8, r8, #4
 800897a:	3c01      	subs	r4, #1
 800897c:	2c00      	cmp	r4, #0
 800897e:	daf7      	bge.n	8008970 <process_impulse+0xac>
 8008980:	f105 0308 	add.w	r3, r5, #8
 8008984:	673b      	str	r3, [r7, #112]	; 0x70

    uint64_t dsp_start_us = ei_read_timer_us();
 8008986:	f00e fbea 	bl	801715e <_Z16ei_read_timer_usv>
 800898a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 800898e:	2300      	movs	r3, #0
 8008990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008994:	2300      	movs	r3, #0
 8008996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800899a:	e13c      	b.n	8008c16 <process_impulse+0x352>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a6:	015b      	lsls	r3, r3, #5
 80089a8:	4413      	add	r3, r2
 80089aa:	f107 0410 	add.w	r4, r7, #16
 80089ae:	461d      	mov	r5, r3
 80089b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 80089bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80089c4:	18d4      	adds	r4, r2, r3
 80089c6:	2010      	movs	r0, #16
 80089c8:	f011 fb7c 	bl	801a0c4 <_Znwj>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461d      	mov	r5, r3
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	2101      	movs	r1, #1
 80089d6:	4628      	mov	r0, r5
 80089d8:	f7f8 fdd5 	bl	8001586 <_ZN2ei9ei_matrixC1EmmPf>
 80089dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089e0:	4629      	mov	r1, r5
 80089e2:	4618      	mov	r0, r3
 80089e4:	f002 fb97 	bl	800b116 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>
 80089e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089ec:	4619      	mov	r1, r3
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff4a 	bl	8008888 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>
 80089f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089f8:	4618      	mov	r0, r3
 80089fa:	f002 fb9b 	bl	800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 80089fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a06:	18d1      	adds	r1, r2, r3
 8008a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a10:	18d4      	adds	r4, r2, r3
 8008a12:	4608      	mov	r0, r1
 8008a14:	f002 fbb0 	bl	800b178 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	6023      	str	r3, [r4, #0]
        features[ix].blockId = block.blockId;
 8008a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a24:	4413      	add	r3, r2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	605a      	str	r2, [r3, #4]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a30:	441a      	add	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d922      	bls.n	8008a82 <process_impulse+0x1be>
            ei_printf("ERR: Would write outside feature buffer\n");
 8008a3c:	48a6      	ldr	r0, [pc, #664]	; (8008cd8 <process_impulse+0x414>)
 8008a3e:	f000 f9f9 	bl	8008e34 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d019      	beq.n	8008a7c <process_impulse+0x1b8>
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	3b04      	subs	r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a52:	18d4      	adds	r4, r2, r3
 8008a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d004      	beq.n	8008a64 <process_impulse+0x1a0>
 8008a5a:	3c04      	subs	r4, #4
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f002 fb69 	bl	800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008a62:	e7f7      	b.n	8008a54 <process_impulse+0x190>
 8008a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a66:	f1a3 0208 	sub.w	r2, r3, #8
 8008a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3302      	adds	r3, #2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f011 fb22 	bl	801a0c0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008a7c:	f06f 0604 	mvn.w	r6, #4
 8008a80:	e176      	b.n	8008d70 <process_impulse+0x4ac>
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }
        auto internal_signal = signal;
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	460b      	mov	r3, r1
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	f7fe fcc0 	bl	8007418 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhjPK10ei_impulse>
        auto internal_signal = swa.get_signal();
 8008a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fceb 	bl	8007478 <_ZN14SignalWithAxes10get_signalEv>
 8008aa2:	6638      	str	r0, [r7, #96]	; 0x60
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d038      	beq.n	8008b1c <process_impulse+0x258>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
 8008aaa:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <process_impulse+0x418>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f083 0301 	eor.w	r3, r3, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <process_impulse+0x20c>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 8008ab8:	4b89      	ldr	r3, [pc, #548]	; (8008ce0 <process_impulse+0x41c>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4889      	ldr	r0, [pc, #548]	; (8008ce4 <process_impulse+0x420>)
 8008ac0:	f000 f9b8 	bl	8008e34 <_Z9ei_printfPKcz>
 8008ac4:	4888      	ldr	r0, [pc, #544]	; (8008ce8 <process_impulse+0x424>)
 8008ac6:	f000 f9b5 	bl	8008e34 <_Z9ei_printfPKcz>
                has_printed = true;
 8008aca:	4b84      	ldr	r3, [pc, #528]	; (8008cdc <process_impulse+0x418>)
 8008acc:	2201      	movs	r2, #1
 8008ace:	701a      	strb	r2, [r3, #0]
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fa f983 	bl	8002de2 <_ZN18ei_impulse_state_t14get_dsp_handleEj>
 8008adc:	65f8      	str	r0, [r7, #92]	; 0x5c
            if(dsp_handle) {
 8008ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d017      	beq.n	8008b14 <process_impulse+0x250>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	681c      	ldr	r4, [r3, #0]
 8008aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008af4:	4413      	add	r3, r2
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	69f9      	ldr	r1, [r7, #28]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008b02:	eeb0 0a67 	vmov.f32	s0, s15
 8008b06:	460b      	mov	r3, r1
 8008b08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008b0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008b0c:	47a0      	blx	r4
 8008b0e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8008b12:	e016      	b.n	8008b42 <process_impulse+0x27e>
            } else {
                return EI_IMPULSE_OUT_OF_MEMORY;
 8008b14:	f06f 060a 	mvn.w	r6, #10
 8008b18:	2400      	movs	r4, #0
 8008b1a:	e06f      	b.n	8008bfc <process_impulse+0x338>
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b22:	00d2      	lsls	r2, r2, #3
 8008b24:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008b26:	440a      	add	r2, r1
 8008b28:	6811      	ldr	r1, [r2, #0]
 8008b2a:	69f8      	ldr	r0, [r7, #28]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	68d2      	ldr	r2, [r2, #12]
 8008b30:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008b34:	eeb0 0a67 	vmov.f32	s0, s15
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008b3c:	4798      	blx	r3
 8008b3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
        }

        if (ret != EIDSP_OK) {
 8008b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d025      	beq.n	8008b96 <process_impulse+0x2d2>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8008b4a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008b4e:	4867      	ldr	r0, [pc, #412]	; (8008cec <process_impulse+0x428>)
 8008b50:	f000 f970 	bl	8008e34 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
 8008b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d019      	beq.n	8008b8e <process_impulse+0x2ca>
 8008b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b64:	18d4      	adds	r4, r2, r3
 8008b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	d004      	beq.n	8008b76 <process_impulse+0x2b2>
 8008b6c:	3c04      	subs	r4, #4
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f002 fae0 	bl	800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008b74:	e7f7      	b.n	8008b66 <process_impulse+0x2a2>
 8008b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b78:	f1a3 0208 	sub.w	r2, r3, #8
 8008b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b7e:	3b04      	subs	r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3302      	adds	r3, #2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f011 fa99 	bl	801a0c0 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
 8008b8e:	f06f 0604 	mvn.w	r6, #4
 8008b92:	2400      	movs	r4, #0
 8008b94:	e032      	b.n	8008bfc <process_impulse+0x338>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8008b96:	f00e facd 	bl	8017134 <_Z29ei_run_impulse_check_canceledv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f113 0f02 	cmn.w	r3, #2
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d020      	beq.n	8008bee <process_impulse+0x32a>
            delete[] matrix_ptrs;
 8008bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d019      	beq.n	8008be6 <process_impulse+0x322>
 8008bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb4:	3b04      	subs	r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008bbc:	18d4      	adds	r4, r2, r3
 8008bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bc0:	429c      	cmp	r4, r3
 8008bc2:	d004      	beq.n	8008bce <process_impulse+0x30a>
 8008bc4:	3c04      	subs	r4, #4
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f002 fab4 	bl	800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008bcc:	e7f7      	b.n	8008bbe <process_impulse+0x2fa>
 8008bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd0:	f1a3 0208 	sub.w	r2, r3, #8
 8008bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd6:	3b04      	subs	r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3302      	adds	r3, #2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4619      	mov	r1, r3
 8008be0:	4610      	mov	r0, r2
 8008be2:	f011 fa6d 	bl	801a0c0 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
 8008be6:	f06f 0601 	mvn.w	r6, #1
 8008bea:	2400      	movs	r4, #0
 8008bec:	e006      	b.n	8008bfc <process_impulse+0x338>
        }

        out_features_index += block.n_output_features;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }
 8008bfa:	2401      	movs	r4, #1
 8008bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fe51 	bl	80088a8 <_ZN14SignalWithAxesD1Ev>
 8008c06:	2c01      	cmp	r4, #1
 8008c08:	f040 80b2 	bne.w	8008d70 <process_impulse+0x4ac>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 8008c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c10:	3301      	adds	r3, #1
 8008c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c20:	429a      	cmp	r2, r3
 8008c22:	f4ff aebb 	bcc.w	800899c <process_impulse+0xd8>
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 8008c26:	f00e fa9a 	bl	801715e <_Z16ei_read_timer_usv>
 8008c2a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c2e:	ebb0 0a02 	subs.w	sl, r0, r2
 8008c32:	eb61 0b03 	sbc.w	fp, r1, r3
 8008c36:	4652      	mov	r2, sl
 8008c38:	465b      	mov	r3, fp
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8008c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	f7f8 f84b 	bl	8000ce8 <__aeabi_ldivmod>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    if (debug) {
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d057      	beq.n	8008d12 <process_impulse+0x44e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4821      	ldr	r0, [pc, #132]	; (8008cf0 <process_impulse+0x42c>)
 8008c6c:	f000 f8e2 	bl	8008e34 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c76:	e047      	b.n	8008d08 <process_impulse+0x444>
            if (features[ix].matrix == nullptr) {
 8008c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c80:	4413      	add	r3, r2
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d039      	beq.n	8008cfc <process_impulse+0x438>
                continue;
            }
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008c88:	2300      	movs	r3, #0
 8008c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c8c:	e015      	b.n	8008cba <process_impulse+0x3f6>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 8008c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008c96:	4413      	add	r3, r2
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	edd3 7a00 	vldr	s15, [r3]
 8008ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8008caa:	f00e fa69 	bl	8017180 <_Z15ei_printf_floatf>
                ei_printf(" ");
 8008cae:	4811      	ldr	r0, [pc, #68]	; (8008cf4 <process_impulse+0x430>)
 8008cb0:	f000 f8c0 	bl	8008e34 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 8008cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008cc2:	4413      	add	r3, r2
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3df      	bcc.n	8008c8e <process_impulse+0x3ca>
            }
            ei_printf("\n");
 8008cce:	480a      	ldr	r0, [pc, #40]	; (8008cf8 <process_impulse+0x434>)
 8008cd0:	f000 f8b0 	bl	8008e34 <_Z9ei_printfPKcz>
 8008cd4:	e013      	b.n	8008cfe <process_impulse+0x43a>
 8008cd6:	bf00      	nop
 8008cd8:	080217e0 	.word	0x080217e0
 8008cdc:	200053c0 	.word	0x200053c0
 8008ce0:	20000100 	.word	0x20000100
 8008ce4:	0802180c 	.word	0x0802180c
 8008ce8:	08021814 	.word	0x08021814
 8008cec:	08021880 	.word	0x08021880
 8008cf0:	080218a8 	.word	0x080218a8
 8008cf4:	080218bc 	.word	0x080218bc
 8008cf8:	08021198 	.word	0x08021198
                continue;
 8008cfc:	bf00      	nop
        for (size_t ix = 0; ix < block_num; ix++) {
 8008cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d02:	3301      	adds	r3, #1
 8008d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3b2      	bcc.n	8008c78 <process_impulse+0x3b4>
        }
    }

    if (debug) {
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <process_impulse+0x45a>
        ei_printf("Running impulse...\n");
 8008d18:	481b      	ldr	r0, [pc, #108]	; (8008d88 <process_impulse+0x4c4>)
 8008d1a:	f000 f88b 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff fd49 	bl	80087bc <run_inference>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    delete[] matrix_ptrs;
 8008d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d019      	beq.n	8008d6a <process_impulse+0x4a6>
 8008d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d40:	18d4      	adds	r4, r2, r3
 8008d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d004      	beq.n	8008d52 <process_impulse+0x48e>
 8008d48:	3c04      	subs	r4, #4
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f002 f9f2 	bl	800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 8008d50:	e7f7      	b.n	8008d42 <process_impulse+0x47e>
 8008d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d54:	f1a3 0208 	sub.w	r2, r3, #8
 8008d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d5a:	3b04      	subs	r3, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3302      	adds	r3, #2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4619      	mov	r1, r3
 8008d64:	4610      	mov	r0, r2
 8008d66:	f011 f9ab 	bl	801a0c0 <_ZdaPvj>
    return res;
 8008d6a:	f997 6067 	ldrsb.w	r6, [r7, #103]	; 0x67
 8008d6e:	e000      	b.n	8008d72 <process_impulse+0x4ae>
            return EI_IMPULSE_DSP_ERROR;
 8008d70:	bf00      	nop
}
 8008d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 f991 	bl	800b09e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
 8008d7c:	4633      	mov	r3, r6
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3790      	adds	r7, #144	; 0x90
 8008d82:	46bd      	mov	sp, r7
 8008d84:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 8008d88:	080218c0 	.word	0x080218c0

08008d8c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
    return process_impulse(&ei_default_impulse, signal, result, debug);
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <run_classifier+0x24>)
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	f7ff fd8f 	bl	80088c4 <process_impulse>
 8008da6:	4603      	mov	r3, r0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	200053b0 	.word	0x200053b0

08008db4 <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		0, 4226, 2404, 2074, 2686, 6996, 6725, 10013, 9478, 7429, 12300, 12051, 16235, 12341, 17600, 18024, 18819, 20205, 22752, 20706, 20925, 26055, 27399, 29008, 27685, 28535, 31524, 34594, 32046, 34334, 35736, 37925, 34295, 40814, 36455, 43797, 42089, 40380, 47345, 45431, 48147, 45291, 46017, 52655, 49953, 54078, 53054, 55085, 57357, 58097, 57469, 59857, 58689, 62048, 65293, 64239, 65535, 65535, 61898, 61885, 58359, 60703, 61475, 55373, 55396, 58326, 56746, 55329, 53219, 51655, 46958, 48134, 45836, 46156, 46932, 43203, 40441, 41329, 41821, 38584, 37014, 35744, 37841, 37358, 35790, 33636, 32857, 31578, 27924, 26619, 23366, 25299, 26463, 21117, 18880, 21922, 20036, 18189, 18078, 18694, 11755, 13736, 9324, 10654, 8219, 8055, 5886, 4722, 2956, 1491, 5381, 3958, 0, 0, 0, 941, 6800, 4085, 5521, 10585, 7832, 13439, 12506, 15803, 11960, 14379, 19182, 16104, 17336, 19139, 17842, 21920, 23756, 23638, 22727, 24653, 28254, 30340, 32642, 28795, 34140, 34749, 35593, 39031, 38065, 39825, 39001, 40032, 44716, 44774, 46003, 46840, 46546, 49920, 48248, 51181, 54001, 52136, 56509, 56068, 53770, 56926, 61359, 58500, 63218, 61394, 62260, 64172, 64320, 63066, 64499, 64527, 60994, 62280, 61184, 55466, 55940, 53242, 53551, 51521, 51564, 53160, 46756, 47717, 49781, 48218, 44564, 43552, 45563, 43017, 41761, 42197, 40361, 38445, 38173, 37477, 30848, 29370, 28375, 29437, 27768, 25694, 23078, 26896, 25270, 22551, 21749, 21046, 21079, 21006, 18336, 18167, 14142, 15391, 13789, 10530, 8865, 7957, 8869, 4551, 3668, 5589, 1079, 2173, 619, 2964, 442, 0, 3252, 6052, 7737, 8348, 9410, 12957, 12476, 10166, 12868, 14001, 14997, 19971, 19285, 20796, 17628, 20909, 24696, 22090, 27962, 29005, 25017, 30667, 31600, 32376, 32245, 34970, 33747, 33905, 39583, 36948, 41287, 37764, 39520, 39877, 44796, 46561, 43201, 49838, 49331, 47141, 50873, 48871, 54431, 54136, 57731, 59674, 55436, 57937, 60182, 62442, 64942, 61256, 65535, 61899, 65326, 63102, 58250, 59869, 57523, 56766, 56192, 56889, 56199, 55359, 49481, 50699, 51080, 46190, 45818, 46989, 45149, 43128, 45652, 39362, 41901, 38166, 37933, 35135, 36425, 37508, 34885, 33225, 28877, 27860, 29309, 25181, 25758, 24968, 24555, 23451, 23227, 19200, 16998, 15980, 16957, 16608, 11760, 13905, 12554, 9045, 11431, 9792, 10616, 5767, 3669, 2032, 1813, 3637, 3049, 0, 3094, 3414, 4918, 3356, 9222, 8012, 7753, 8839, 12915, 8985, 10856, 12336, 18586, 16970, 14858, 21710, 22590, 20372, 20902, 24747, 24384, 23564, 30337, 31656, 31386, 29872, 32921, 34488, 32743, 37732, 38381, 39405, 40132, 43366, 40050, 41249, 46419, 45633, 47805, 46250, 47525, 50544, 49229, 52247, 52613, 55966, 55214, 55915, 57953, 57927, 61515, 61953, 59385, 64807, 63267, 62251, 64069, 61721, 59466, 58540, 56521, 54991, 58322, 54114, 57252, 54300, 52790, 52698, 47711, 49301, 50997, 43328, 46483, 45585, 46163, 39196, 43794, 40252, 39957, 40244, 35736, 37209, 36546, 31608, 34099, 27604, 29973, 30562, 24401, 28303, 24162, 20135, 23518, 18690, 20232, 17317, 18864, 16458, 12288, 13528, 11556, 11815, 12191, 9158, 8870, 4660, 5920, 4145, 2038, 3772, 2005, 0, 2482, 3928, 5070, 3232, 4366, 5465, 6893, 10615, 8527, 11468, 13695, 12873, 12178, 19560, 20398, 21897, 21468, 23095, 20007, 21409, 24648, 26193, 24686, 29381, 27401, 31834, 33990, 29846, 33389, 36340, 37733, 34404, 37933, 37989, 42231, 39803, 43028, 46176, 48258, 43756, 45937, 47941, 51766, 50910, 53337, 51267, 57348, 53644, 56249, 57162, 58544, 61154, 61299, 64990, 65535, 65535, 62054, 65535, 62173, 62009, 59566, 59148, 55394, 53456, 53203, 51365, 55886, 49093, 53230, 52408, 45170, 47549, 48401, 41522, 41844, 39789, 39771, 38643, 36082, 39674, 37950, 34023, 32245, 33812, 28802, 30764, 26886, 24986, 29213, 23186, 24467, 23030, 21309, 18457, 23178, 19817, 19364, 14201, 12769, 17189, 13661, 14884, 10517, 9477, 11052, 5673, 4964, 2315, 2937, 3127, 2932, 2172, 1060, 0, 4127, 6628, 6621, 6972, 7045, 10361, 7172, 11709, 15922, 14165, 17948, 18364, 14603, 16406, 21617, 18249, 22206, 22827, 21242, 23725, 24471, 30651, 32091, 28537, 32885, 34914, 30919, 34711, 36912, 36445, 37472, 42092, 42142, 39642, 39940, 45015, 45149, 46978, 50336, 48078, 52236, 50378, 49997, 51227, 57825, 57160, 54561, 57718, 62569, 63818, 61339, 61907, 64111, 65535, 65483, 63738, 62686, 61581, 61851, 61375, 59746, 57307, 55008, 52157, 53653, 54854, 49302, 51283, 46718, 45170, 43007, 41919, 44128, 43831, 38823, 37984, 35760, 37286, 36365, 32133, 32112, 32722, 34577, 28513, 30127, 29135, 28734, 26725, 23651, 23189, 24439, 23345, 17155, 22275, 19060, 19793, 12445, 13966, 14716, 11956, 10976, 6514, 8571, 7647, 6575, 5906, 2456, 4328, 2176, 1638, 0, 1995, 3330, 6694, 8028, 6778, 9730, 6614, 10351, 12650, 15522, 11881, 11676, 13238, 15713, 16945, 18092, 17860, 19195, 23500, 24082, 25463, 29608, 27438, 27386, 32097, 30745, 34051, 34867, 35094, 34734, 36876, 39140, 38185, 37299, 44913, 44443, 43084, 47594, 46268, 44881, 46907, 46657, 53061, 49635, 52079, 53794, 57628, 54638, 60505, 61261, 59804, 59849, 63293, 62034, 65136, 65527, 63834, 65535, 63587, 62324, 56204, 58177, 57902, 58418, 54104, 56317, 50322, 49180, 47781, 50177, 48414, 47105, 47005, 45944, 40814, 42570, 43178, 40438, 39271, 35178, 33036, 32723, 33114, 30098, 30274, 31523, 25579, 30067, 26249, 27937, 27034, 19769, 18893, 21765, 19194, 15856, 19392, 12890, 15622, 11049, 10628, 12506, 9304, 11196, 8481, 9241, 3789, 6047, 2989, 3318, 72, 3140, 3266, 5624, 2694, 3897, 7017, 6881, 6672, 11875, 7860, 9587, 10942, 16232, 18347, 17345, 19639, 18131, 18758, 18506, 20338, 21828, 22839, 23342, 26371, 30717, 28711, 32612, 35285, 30421, 35200, 34958, 36093, 35655, 38314, 39836, 44506, 42113, 43297, 45210, 46560, 45752, 48617, 50355, 51980, 54786, 55236, 54356, 55825, 56503, 55555, 60388, 59292, 64551, 60341, 62056, 65535, 63508, 65535, 60858, 63294, 58318, 58809, 59148, 56994, 52954, 55439, 53517, 50781, 53760, 50258, 46933, 45301, 45498, 43007, 45359, 40343, 43159, 43024, 37718, 38013, 39384, 36928, 35649, 35501, 33344, 30933, 32691, 32040, 24968, 23637, 23469, 25084, 26245, 21321, 22430, 18238, 16598, 18983, 13986, 17022, 15762, 10964, 10558, 12167, 9148, 5105, 5377, 3892, 7263, 4136, 3193, 0, 3389, 1867, 1342, 4461, 6230, 9394, 8866, 9486, 8838, 8760, 10968, 13583, 11506, 13137, 13979, 20267, 18262, 18205, 22216, 20808, 21434, 24764, 24986, 24421, 25296, 31211, 33884, 30947, 30713, 35776, 36310, 39341, 38891, 38376, 39477, 42225, 43980, 46485, 46448, 44002, 47782, 49062, 52151, 52235, 54269, 50089, 52481, 52744, 54317, 54763, 60223, 57500, 59205, 65083, 64990, 64457, 65535, 65535, 64171, 61904, 57610, 59513, 57385, 54189, 58454, 55392, 52445, 55553, 49263, 50095, 46182, 46518, 45669, 46950, 45273, 44988, 41773, 39089, 37798, 40988, 40042, 34436, 38283, 31188, 34497, 33994, 31799, 27654, 26504, 28914, 28924, 25761, 20352, 23431, 19753, 18657, 19854, 15661, 18205, 15856, 16157, 11941, 13535, 9328, 6634, 8307, 8435, 4543, 4198, 1709, 3946, 0, 0, 0, 1019, 2349, 4646, 7026, 9477, 7054, 9009, 7852, 12089, 15597, 16402, 18167, 14565, 20420, 15772, 20773, 22424, 25439, 23242, 27022, 27655, 27751, 27164, 28184, 27502, 28961, 33555, 31484, 35721, 35617, 38037, 38998, 39621, 42578, 40366, 42888, 44035, 43433, 48442, 47776, 51183, 47644, 51396, 51641, 54314, 56757, 53648, 56426, 61229, 62114, 59041, 65141, 61193, 62483, 65535, 64933, 62383, 60891, 58997, 58626, 57334, 57760, 54726, 55954, 56459, 52511, 50538, 51873, 50818, 50402, 46552, 46884, 46344, 44389, 44119, 38210, 41147, 38743, 35638, 38808, 35215, 36944, 31917, 34584, 27707, 28214, 26641, 28589, 23994, 23055, 20649, 25691, 20378, 20305, 17929, 19672, 17189, 14277, 11307, 13325, 11559, 9150, 6611, 5503, 6503, 7349, 6585, 6032, 1076, 3455, 0, 2602, 0, 3834, 3858, 2407, 4142, 7955, 7797, 8500, 9439, 14566, 10808, 12047, 18727, 17387, 17609, 21721, 23801, 22301, 24437, 23021, 25098, 29603, 28928, 29948, 32947, 31839, 31930, 34233, 31877, 37396, 34590, 40535, 39711, 37856, 42735, 41052, 43079, 42465, 43324, 49967, 50297, 49657, 48894, 51717, 53150, 56662, 57664, 56369, 58714, 59005, 62372, 61681, 64307, 65535, 65535, 65318, 62538, 65447, 64040, 57533, 56187, 60313, 54285, 57956, 52728, 56083, 50220, 53164, 48160, 47709, 45295, 48371, 46204, 44723, 45168, 38984, 37481, 39559, 34805, 35598, 38170, 31521, 36280, 30732, 30799, 31028, 30234, 29930, 27945, 24826, 21996, 24243, 18572, 22095, 17820, 19864, 16318, 13777, 14463, 15048, 10069, 11482, 11807, 9531, 8466, 8846, 8232, 2739, 616, 0, 0, 0, 4267, 1697, 5767, 7935, 5872, 7067, 10494, 6777, 14268, 10705, 16328, 14532, 18682, 19080, 21000, 19704, 19066, 24439, 23341, 26032, 26484, 25454, 30492, 27489, 29855, 34308, 29054, 32128, 34934, 35731, 34936, 34819, 40501, 43356, 42083, 45604, 40986, 43350, 45529, 47541, 50863, 52873, 53220, 54079, 54113, 56420, 52582, 54828, 57192, 61820, 57195, 61848, 60801, 63937, 61825, 65260, 62191, 62481, 62163, 62761, 56765, 57924, 59567, 58719, 54874, 52944, 52131, 49916, 51200, 48590, 50575, 45253, 48049, 42764, 41900, 39366, 41149, 41367, 40194, 36804, 33251, 36448, 33778, 29366, 31303, 29622, 30826, 29095, 26315, 27478, 21456, 22056, 23340, 17478, 16962, 16170, 14881, 12919, 17137, 15765, 9163, 14404, 9534, 10974, 9117, 6074, 4290, 3731, 1946, 2013, 3667, 1411, 1139, 1869, 4969, 5106, 8140, 6860, 6055, 10043, 7704, 9293, 16167, 13769, 15775, 16804, 16785, 17388, 17762, 20793, 22370, 22257, 23214, 27309, 30454, 25193, 30065, 30289, 30217, 36257, 34842, 35988, 38508, 39547, 35954, 38765, 39008, 43382, 42197, 41921, 47413, 44831, 50312, 49359, 50471, 51651, 51374, 54401, 53566, 57113, 59258, 59137, 62147, 58621, 62516, 62542, 65535, 64527, 61095, 59746, 64951, 57310, 56905, 60211, 57939, 55530, 53537, 56337, 55112, 48809, 49670, 47000, 50068, 48545, 42157, 41382, 40993, 40439, 38537, 38022, 37487, 35378, 37673, 36225, 31998, 32315, 33437, 32264, 25877, 26940, 27162, 28133, 26904, 22435, 20234, 19233, 16566, 17085, 19111, 13586, 12418, 12651, 9571, 9953, 8882, 6341, 9246, 4237, 5000, 4299, 6472, 4002, 4216, 0, 0, 750, 4939, 7240, 5769, 8675, 7702, 8479, 11486, 8953, 15463, 11469, 12534, 15575, 20601, 19120, 21141, 17976, 19897, 20954, 22571, 27156, 25667, 29306, 28013, 28387, 33419, 34431, 32563, 37749, 39197, 37957, 38118, 41300, 40582, 44119, 43790, 41766, 43138, 49461, 47685, 49125, 47173, 51206, 51533, 55132, 54223, 58723, 54473, 60132, 59309, 60093, 62812, 63546, 65535, 64800, 65535, 63588, 61051, 61945, 56607, 61138, 56047, 54518, 52952, 56741, 55301, 49346, 50874, 47419, 44959, 49767, 45170, 46927, 43719, 40052, 40625, 39211, 35588, 39572, 36874, 37519, 31404, 33095, 31928, 29392, 28035, 28636, 24153, 24483, 22042, 24783, 22455, 21291, 18704, 18983, 18631, 13764, 16704, 12276, 11638, 14332, 11098, 9559, 7856, 9487, 4933, 7619, 4175, 2503, 0, 2775, 2579, 973, 2912, 7389, 3174, 6971, 5358, 11353, 12789, 12486, 9574, 14759, 14222, 18109, 19669, 16858, 16739, 20334, 21026, 24173, 23103, 23010, 26792, 29635, 28991, 30499, 33212, 31402, 34607, 32335, 35021, 35851, 39014, 38061, 41114, 42926, 41849, 43154, 46340, 43687, 49633, 51090, 49172, 49817, 53136, 55312, 55620, 53508, 59411, 60592, 57609, 61934, 64793, 62278, 61963, 65535, 61669, 62813, 63695, 58773, 59087, 59564, 60611, 57083, 56660, 52997, 50432, 52774, 47476, 46493, 49723, 45868, 47715, 46206, 44479, 40325, 39782, 39532, 38289, 35649, 37075, 35979, 32236, 30256, 34171, 28882, 26744, 27788, 25896, 23588, 24571, 20671, 19486, 18625, 23187, 19055, 20713, 13947, 15256, 11541, 13612, 12525, 11645, 6818, 9279, 6396, 6033, 5331, 3197, 3904, 866, 812, 2997, 4362, 3586, 5436, 4789, 7653, 7618, 7090, 8928, 11745, 14447, 11299, 12978, 13127, 14545, 18211, 20319, 22623, 22976, 21790, 22407, 24332, 26113, 27049, 29661, 29219, 31508, 30569, 34244, 37377, 35864, 34490, 39041, 38973, 37713, 44656, 44379, 40807, 48353, 44107, 50014, 47063, 49804, 52426, 53842, 55970, 56759, 52725, 56186, 60631, 57819, 57914, 62354, 63911, 61082, 62509, 64362, 63373, 63104, 62540, 57591, 57282, 55914, 55402, 52679, 51069, 56303, 48755, 51342, 47654, 47943, 46391, 47229, 43760, 42805, 43745, 38595, 39013, 37852, 35864, 37107, 34226, 36403, 36440, 35340, 27880, 26918, 29672, 26059, 27724, 28401, 23490, 24986, 23004, 22617, 19890, 21156, 15740, 16354, 12750, 12814, 14099, 9353, 11334, 8088, 8239, 9433, 3057, 4830, 4106, 642, 1046, 0, 4141, 1058, 5130, 6533, 8147, 8948, 8390, 11132, 12298, 10214, 11611, 17731, 16026, 13907, 18602, 18162, 18573, 22074, 21255, 24857, 22273, 28578, 29425, 26914, 30681, 33292, 33613, 31538, 33530, 32864, 34366, 35511, 40715, 38851, 39595, 42209, 46397, 46873, 46253, 48285, 51169, 52308, 50721, 51878, 53570, 54072, 55236, 54345, 59441, 58165, 62499, 61563, 60938, 61784, 61867, 65535, 62647, 63702, 64537, 59166, 57491, 57404, 53685, 55113, 55096, 55372, 52871, 54028, 51416, 51419, 44355, 47406, 42237, 44308, 43366, 40916, 39072, 41054, 37506, 39970, 36473, 36621, 32161, 30370, 28524, 27839, 29808, 28799, 23545, 27044, 25037, 25850, 18966, 19163, 22799, 16824, 14186, 16526, 14072, 10598, 11513, 11778, 10205, 8065, 7730, 9142, 3834, 2408, 6174, 190, 1259, 1978, 2360, 3982, 1572, 2848, 6960, 9773, 11235, 8527, 7597, 10499, 10013, 15266, 13064, 15950, 20712, 21918, 21663, 21290, 20361, 26761, 27651, 29080, 26209, 28605, 30285, 28561, 29275, 35655, 37325, 38228, 38412, 37405, 37667, 42911, 41193, 44405, 45026, 42343, 45384, 44925, 49678, 46504, 50300, 54499, 51025, 56327, 56595, 59540, 55874, 57112, 57898, 63531, 62744, 62730, 65535, 65535, 64729, 64828, 63058, 58238, 59616, 61261, 56060, 56132, 55884, 53977, 53477, 50035, 52844, 52147, 50538, 49767, 43490, 42532, 43045, 41041, 43679, 37988, 36113, 36378, 37053, 36335, 31377, 34972, 31314, 29511, 28128, 25055, 29114, 23617, 25504, 25519, 22105, 19476, 22318, 16222, 16322, 15438, 12459, 12363, 12098, 9421, 12797, 8107, 6881, 8661, 4891, 2404, 4802, 3476, 0, 0, 3853, 0, 2219, 6222, 5007, 5739, 5703, 8663, 8109, 11009, 14552, 13397, 16898, 16415, 17748, 21772, 22086, 19141, 22287, 23345, 24419, 25349, 28214, 29793, 29408, 28688, 34082, 34511, 34412, 32814, 35139, 36891, 41164, 40281, 38461, 44708, 45947, 41553, 48841, 48678, 45803, 47561, 51429, 49424, 49370, 53793, 53773, 55744, 59141, 60789, 61841, 59715, 59555, 61456, 63007, 63269, 64375, 62556, 63448, 59081, 61149, 59232, 55279, 53091, 51938, 55170, 55764, 50622, 50649, 50890, 48200, 44893, 43080, 42495, 43554, 44691, 38149, 36870, 41512, 39718, 37424, 36118, 31902, 32219, 28619, 31779, 28981, 26266, 28810, 27821, 26000, 23271, 23578, 23337, 19569, 20503, 18379, 18273, 12541, 11741, 11005, 14936, 7580, 11983, 7785, 6239, 5642, 2554, 3429, 2874, 501, 3082, 1917, 1635, 909, 5982, 5063, 8206, 6790, 6189, 8455, 9232, 13731, 12646, 17666, 18837, 17334, 21707, 19413, 17579, 20506, 22624, 26261, 25928, 25347, 29702, 28662, 27713, 32804, 30576, 34851, 31735, 37468, 35345, 39261, 38636, 43134, 44068, 43075, 44022, 45129, 47291, 44812, 48742, 46815, 53766, 54375, 51999, 55934, 54427, 54263, 55951, 57058, 61620, 63045, 60873, 62517, 65535, 62159, 62650, 59811, 60505, 62129, 58056, 58486, 57911, 57916, 50933, 53610, 53695, 50355, 46978, 45067, 45266, 43637, 46528, 45726, 44389, 40986, 38573, 39008, 40398, 33987, 34409, 34258, 30547, 31843, 31415, 26420, 27769, 28551, 28851, 24280, 23082, 20982, 18970, 17334, 20419, 20839, 19251, 14606, 12217, 10245, 15325, 11840, 7936, 5677, 4943, 7980, 2106, 6875, 0, 4409, 1896, 1740, 1528, 3911, 5375, 7359, 3342, 10605, 9007, 12785, 14245, 13779, 12813, 16096, 12702, 14509, 15896, 16654, 19640, 19011, 22768, 27136, 28376, 23905, 27611, 29206, 27180, 33539, 30744, 32420, 37194, 33162, 39535, 36381, 37519, 39473, 42912, 45993, 46531, 47846, 46117, 50285, 49749, 51978, 49658, 49277, 55208, 55148, 54479, 57143, 61113, 61996, 59786, 60615, 61822, 61836, 62267, 62253, 65535, 65050, 64184, 57919, 59224, 54893, 58562, 57623, 52677, 53495, 52937, 50926, 49233, 45378, 48557, 43027, 48033, 42661, 45167, 39836, 37849, 40520, 36817, 35467, 33509, 32588, 31106, 33156, 32847, 26972, 27304, 24625, 23165, 23933, 21336, 21320, 20556, 22858, 22363, 15230, 16777, 16041, 11909, 11849, 11858, 13472, 6806, 8964, 9173, 6552, 3303, 1633, 4791, 2999, 0, 30, 3057, 4142, 6519, 6882, 5352, 10411, 10673, 7030, 10449, 10073, 12770, 16638, 15684, 13600, 18485, 17216, 19361, 20025, 23526, 20563, 25220, 23465, 29731, 31651, 30017, 27628, 34834, 32299, 32961, 37289, 38662, 36407, 42060, 38552, 44158, 43605, 42005, 47611, 44992, 44235, 51421, 48910, 50142, 51142, 50993, 51575, 58337, 59775, 59429, 61455, 61007, 63531, 64512, 61706, 61792, 64363, 62610, 62762, 60284, 60432, 59894, 60691, 55517, 52862, 52008, 55637, 50052, 49122, 52153, 48526, 49833, 48353, 46462, 46811, 41888, 39289, 43230, 40721, 36295, 39592, 35849, 36424, 34102, 29811, 31907, 33283, 29909, 27365, 23869, 25098, 22145, 20438, 23619, 20424, 17224, 21415, 16002, 19424, 14223, 14872, 9813, 12767, 7100, 10469, 6153, 9382, 3220, 2006, 3662, 3999, 0, 0, 0, 981, 3772, 3616, 7609, 10377, 8896, 8031, 12421, 8702, 11078, 13287, 12985, 16960, 19648, 19441, 17225, 19946, 20741, 25690, 24482, 22686, 29014, 30566, 31051, 32327, 34287, 30338, 33849, 35921, 34750, 34500, 38704, 42201, 40789, 40978, 43191, 46761, 48407, 48363, 50556, 48186, 51155, 54690, 53924, 57016, 54342, 55125, 55107, 61734, 56688, 63326, 65285, 63859, 62464, 65535, 61214, 65389, 64345, 57639, 60610, 57445, 55577, 59244, 56857, 51096, 55782, 53899, 50776, 51220, 48019, 45267, 44422, 43616, 42611, 43571, 41205, 38675, 36612, 37338, 35217, 37051, 35438, 32264, 34592, 31785, 31617, 26824, 28685, 24923, 25752, 22319, 19910, 18552, 22558, 17117, 19753, 19534, 16233, 17260, 11895, 13867, 13135, 12072, 9833, 7531, 6171, 2736, 6414, 1001, 2733, 0, 0, 2023, 1613, 1644, 6091, 4000, 6078, 10482, 10341, 13878, 12544, 16005, 12189, 15113, 20450, 16905, 22616, 21558, 20208, 22495, 21828, 28606, 27730, 26876, 29093, 29503, 32557, 29689, 33951, 34626, 35910, 38696, 37888, 37434, 41036, 45038, 41716, 47017, 43095, 46410, 48626, 49435, 51442, 54512, 55113, 56822, 52803, 54540, 59527, 58723, 60124, 61446, 60014, 63863, 64362, 65535, 65535, 60167, 60395, 62705, 60668, 59293, 60753, 55196, 56372, 55979, 54007, 49779, 50782, 46423, 50652, 47546, 44672, 43509, 41273, 41842, 42983, 42335, 37622, 37181, 36073, 33999, 32323, 35878, 33779, 28713, 30564, 28072, 25805, 23170, 24870, 22740, 20018, 19531, 20588, 15862, 20263, 13936, 12807, 15495, 11504, 14434, 9288, 9685, 11490, 5603, 3416, 3480, 3227, 0, 527, 0, 1442, 1493, 2693, 6623, 6650, 9117, 4831, 9105, 12604, 13459, 10842, 14451, 14936, 13574, 14755, 21508, 19462, 19179, 23536, 21094, 24461, 26117, 23811, 29797, 26997, 28092, 32953, 32653, 35294, 34601, 34232, 38323, 35166, 37711, 42901, 41546, 42272, 45832, 46463, 43354, 49922, 47774, 48112, 51636, 54510, 53134, 54660, 52813, 53914, 61211, 58511, 62855, 58639, 62977, 62056, 62704, 65535, 63373, 59608, 60281, 61961, 56799, 56594, 58422, 53547, 52532, 51954, 51533, 53682, 47557, 51644, 47560, 45316, 48184, 41674, 43228, 43401, 41398, 40545, 40188, 39728, 34689, 36915, 31243, 31922, 33548, 28269, 31180, 26254, 26129, 24725, 24205, 22495, 23324, 20370, 16639, 20622, 15660, 17821, 12569, 13037, 11971, 10384, 8855, 6723, 5370, 4038, 5418, 2846, 3046, 511, 737, 882, 0, 124, 4357, 8411, 7489, 6557, 8503, 11559, 13896, 12850, 11230, 13723, 18371, 15061, 20044, 21640, 21819, 18421, 24590, 26027, 26014, 25457, 29850, 30849, 27341, 29691, 31256, 30633, 36635, 34284, 33849, 37038, 37025, 41328, 44224, 42347, 45571, 47285, 43266, 47942, 46501, 47151, 49772, 48952, 51569, 55368, 57454, 56386, 58021, 58489, 61582, 63246, 63927, 62410, 64654, 63594, 60775, 64294, 63399, 61832, 61885, 55943, 55652, 53717, 53475, 55092, 49180, 51348, 48220, 45994, 49132, 43599, 43183, 43237, 42336, 40692, 40061, 38752, 38731, 37439, 38826, 35867, 32779, 29916, 32011, 28677, 25799, 24847, 24479, 27873, 26111, 23514, 20987, 21755, 21880, 20715, 15627, 18890, 12220, 13695, 11917, 8430, 9893, 11822, 10880, 7562, 7170, 5332, 330, 1192, 0, 2198, 3069, 1284, 5987, 4052, 4902, 6270, 6880, 8326, 9137, 10403, 16412, 14627, 13911, 16900, 16753, 20914, 18238, 22629, 23166, 23585, 25828, 29045, 23941, 27443, 30761, 27731, 34733, 33348, 34985, 36914, 34180, 36270, 41356, 41900, 39527, 43725, 44479, 42114, 47291, 45588, 46184, 49676, 51206, 50104, 52136, 55641, 57046, 57205, 57881, 57381, 62368, 60947, 61920, 62285, 62528, 63654, 62232, 63937, 62247, 62854, 57650, 60233, 60096, 58092, 57371, 54384, 53546, 48870, 50901, 46015, 48105, 46560, 42479, 45006, 43553, 44656, 41145, 41497, 37323, 35519, 37069, 38150, 35425, 32980, 31697, 30952, 25906, 24701, 24835, 27104, 24092, 21105, 19175, 18068, 16579, 18709, 15212, 14872, 12391, 12971, 9715, 12346, 11233, 10949, 9439, 9830, 5671, 6213, 3490, 2325, 429, 0, 0, 5597, 1730, 5454, 5214, 10306, 7660, 8457, 9177, 11685, 13632, 16694, 12290, 19697, 14610, 21211, 18454, 19963, 19497, 21071, 21775, 24986, 24318, 25838, 28606, 29489, 32250, 35944, 36879, 37360, 33704, 34801, 38908, 41711, 40236, 43546, 46131, 45016, 48626, 46106, 46025, 48451, 52515, 52372, 53229, 52978, 54251, 59347, 60401, 60531, 60878, 62540, 61912, 61749, 63860, 63262, 62386, 62927, 59928, 62545, 61319, 57390, 59256, 55416, 52998, 56923, 55875, 49628, 50559, 49773, 50887, 47945, 47372, 45531, 41851, 39644, 38262, 38417, 41448, 36654, 35265, 36858, 37013, 33903, 30689, 28032, 31938, 30722, 24915, 26922, 26404, 23751, 22844, 17923, 16913, 18872, 15873, 15606, 15129, 11146, 10691, 14815, 11316, 11970, 8008, 4835, 4037, 6201, 2899, 2453, 1436, 0, 3327, 1178, 4410, 6181, 3765, 4320, 5740, 11918, 10827, 12351, 13156, 16997, 17465, 18010, 15105, 16542, 20951, 21536, 19991, 21479, 26770, 27713, 26412, 30213, 28846, 28123, 32192, 34101, 32633, 35901, 37369, 35594, 40707, 37887, 40214, 44484, 44490, 43874, 45504, 45112, 47077, 46629, 52828, 53726, 50329, 52627, 55334, 57868, 54675, 55761, 60565, 61586, 58689, 63459, 62034, 65535, 65535, 65535, 63967, 64152, 60538, 61340, 58469, 53902, 58192, 50944, 53473, 53554, 49935, 46594, 51110, 48070, 46032, 47353, 44641, 40455, 43972, 39726, 39266, 40039, 34181, 35197, 33304, 31644, 32263, 31606, 28550, 27105, 27436, 28397, 22617, 25874, 21334, 20796, 21468, 16810, 17418, 14966, 15753, 14782, 10240, 12352, 11224, 10281, 11388, 5029, 6556, 6347, 6993, 5369, 792, 1064, 356, 0, 276, 4965, 7510, 4783, 9732, 7552, 12042, 10888, 10237, 12374, 13067, 14285, 20116, 19249, 20782, 20925, 23152, 25410, 21912, 27018, 25959, 24790, 27807, 30707, 32740, 31081, 34506, 33491, 38166, 34003, 34916, 36282, 43726, 42756, 42971, 46495, 43863, 49472, 45765, 49062, 51521, 50076, 55336, 52747, 55311, 55620, 57614, 59635, 57394, 59839, 59231, 63530, 62851, 65535, 63902, 63980, 60383, 62047, 61516, 58474, 55474, 54867, 54532, 55304, 52650, 53848, 48092, 47634, 51539, 50410, 49359, 45187, 42701, 45626, 41037, 42356, 38898, 38877, 39066, 32719, 33183, 31391, 33821, 33992, 28382, 27959, 24707, 23143, 24178, 21607, 19850, 23574, 18403, 18163, 16529, 19127, 13958, 14520, 10482, 11629, 13145, 8329, 8682, 5737, 6012, 7067, 2660, 5221, 2471, 3010, 0, 1495, 381, 4964, 4252, 4836, 4883, 7167, 8424, 8081, 14460, 11883, 17400, 17902, 17316, 16769, 18659, 21223, 20371, 22437, 26384, 26409, 29069, 30393, 30464, 30871, 33411, 31579, 32998, 37159, 37602, 37189, 34631, 36586, 41075, 42271, 43551, 45403, 47337, 46228, 47174, 46069, 46452, 48926, 52162, 49818, 56190, 52578, 59505, 57242, 58721, 58050, 60706, 65535, 65535, 65426, 64573, 65535, 59896, 62436, 60591, 58448, 55701, 54657, 56328, 54240, 51450, 51211, 49448, 49012, 50461, 48005, 47790, 46731, 42098, 43267, 41427, 40310, 36418, 36848, 37432, 33212, 35884, 36493, 29566, 33557, 30672, 32039, 27199, 26203, 28367, 25849, 25857, 22333, 17802, 21872, 19796, 17968, 17613, 14980, 14299, 10729, 9945, 7520, 7699, 9444, 9234, 4060, 1347, 163, 2901, 1315, 0, 0, 2205, 2156, 6550, 5991, 8635, 10572, 6579, 10759, 11640, 12007, 16299, 12820, 18780, 18229, 17209, 17758, 23971, 22031, 24857, 27845, 24143, 24421, 29482, 31034, 33011, 31370, 35148, 34475, 33807, 37318, 40469, 37904, 39031, 37855, 41142, 45513, 45338, 47257, 49067, 50381, 48788, 53654, 48409, 50172, 56965, 57407, 57531, 56446, 61676, 57565, 58950, 64755, 62473, 62607, 65535, 65285, 64957, 61532, 57639, 57081, 61165, 54263, 55559, 54609, 50958, 53747, 53466, 49839, 50586, 49045, 44900, 46562, 42050, 40885, 41746, 37886, 40198, 41395, 37017, 38022, 36877, 31858, 32185, 31281, 27196, 26509, 24926, 28896, 22791, 22914, 25424, 24799, 21530, 22475, 20132, 15101, 13458, 12749, 12902, 13612, 10566, 8060, 7964, 10834, 7239, 5056, 3836, 5869, 4459, 860, 3200, 2065, 5100, 3480, 5926, 4398, 7489, 5908, 9452, 8658, 11030, 10397, 13096, 17900, 14652, 17500, 21034, 19837, 24228, 19127, 22641, 24394, 24931, 25466, 25301, 29987, 31419, 30399, 33809, 33996, 36906, 35305, 40361, 35270, 38561, 38808, 44364, 42518, 42440, 47028, 44946, 49219, 48190, 50229, 53034, 55481, 55889, 57585, 58745, 54979, 59947, 58462, 63783, 59492, 65535, 61541, 64707, 62555, 65535, 64667, 59759, 58804, 58905, 59959, 56449, 55821, 52053, 52350, 49919, 51125, 52439, 48928, 46487, 45984, 43553, 42022, 40397, 43264, 40344, 39007, 39098, 35605, 36001, 31353, 35636, 34896, 30055, 28425, 31227, 24461, 23476, 27937, 26306, 20266, 20657, 20281, 18576, 17341, 13621, 17977, 13498, 13082, 9761, 8806, 11002, 9411, 9962, 4550, 2023, 1421, 2223, 4239, 0, 0, 3641, 1645, 4098, 4004, 7798, 10658, 7376, 8351, 13769, 13659, 16795, 15488, 17326, 20259, 18373, 20987, 19964, 23493, 25915, 23052, 27652, 27542, 24775, 30229, 30423, 34208, 35062, 33454, 32734, 33297, 37223, 40238, 41953, 38526, 40352, 43716, 43357, 43310, 45007, 46239, 50655, 47886, 49638, 49453, 54506, 54235, 57443, 53783, 60786, 58900, 62995, 60930, 63128, 62914, 62206, 65535, 64507, 64823, 62828, 57206, 59205, 57466, 55529, 55488, 51756, 52831, 54805, 47997, 51632, 50563, 45546, 45919, 43613, 46189, 44688, 43795, 42078, 40176, 40641, 34718, 33323, 31820, 34357, 30246, 33447, 28830, 26078, 27881, 26241, 24092, 23559, 23198, 24161, 22501, 16808, 18862, 14181, 14113, 12271, 12369, 14694, 9571, 10598, 11970, 10579, 7686, 7638, 6146, 3040, 1893, 1433, 0, 0, 3914, 2813, 2944, 9469, 4776, 6123, 6988, 14154, 9655, 13000, 15603, 17424, 14320, 19461, 19203, 20032, 20381, 24132, 27086, 26531, 24745, 28470, 28808, 27861, 31873, 32927, 35848, 34338, 36835, 39273, 40079, 37187, 40112, 44763, 43392, 46160, 47646, 45209, 49914, 48020, 51056, 48622, 51571, 53277, 52846, 55051, 55291, 56089, 56497, 60376, 64004, 61278, 60537, 65535, 62297, 62993, 62623, 60782, 58514, 61861, 55077, 54513, 57010, 51786, 53944, 53432, 48044, 52510, 48926, 46062, 44035, 48001, 46456, 41927, 43483, 42190, 42018, 39716, 38268, 36615, 32931, 36246, 31574, 31046, 27185, 31127, 27661, 25092, 28343, 25629, 21304, 19637, 21577, 22214, 15591, 19275, 13433, 12355, 11929, 13489, 12352, 12815, 7841, 7239, 6731, 2234, 2154, 4338, 588, 0, 0, 4003, 2894, 5815, 2825, 4144, 6904, 6937, 11984, 12077, 14742, 16159, 16431, 15142, 15560, 21141, 21761, 18225, 20501, 24376, 24966, 25125, 23185, 29069, 25444, 29567, 33720, 31311, 36099, 33803, 35725, 36357, 35544, 39993, 42772, 39423, 42011, 40565, 45482, 45091, 46421, 50739, 47095, 52365, 51882, 50726, 51942, 57434, 58601, 55516, 59518, 60037, 63639, 64993, 60187, 65535, 65535, 65535, 60333, 62998, 61020, 57666, 60350, 59126, 57759, 51957, 54571, 49435, 48820, 50754, 50578, 47166, 49576, 43685, 43952, 40954, 43284, 41282, 38040, 40469, 38712, 36762, 37450, 34268, 29494, 31017, 29395, 28517, 27349, 25607, 27961, 24309, 23159, 22785, 20039, 19319, 17420, 14478, 16387, 12633, 15244, 10621, 14670, 13359, 7798, 6061, 6825, 2692, 5386, 3636, 2151, 0, 2954, 1249, 2916, 5094, 6158, 8005, 8982, 7639, 11555, 9252, 12982, 13650, 11899, 14536, 15986, 19319, 17888, 18654, 19411, 21068, 21984, 25375, 24532, 29702, 31328, 31396, 33495, 32125, 31692, 33714, 38182, 36854, 35878, 39726, 40189, 39205, 42626, 43660, 42769, 47648, 44822, 46977, 46099, 52482, 48600, 49787, 51972, 57822, 58872, 57177, 61557, 61462, 58902, 60597, 60073, 61961, 65535, 64825, 62513, 59398, 58746, 59963, 61047, 54743, 53092, 54037, 53687, 55942, 54652, 50368, 48104, 50995, 47413, 46771, 43671, 45277, 39239, 39883, 39672, 35432, 35111, 34945, 37294, 36281, 35098, 30198, 28221, 26633, 26808, 28014, 28148, 22141, 26691, 23470, 19162, 20774, 18558, 19866, 19411, 14991, 14743, 12356, 10592, 10401, 10060, 10242, 8635, 4561, 3975, 1584, 0, 4480, 1954, 1671, 4917, 6314, 4003, 8486, 4186, 5923, 7597, 12158, 14356, 12699, 16355, 14801, 15605, 16776, 15326, 17836, 18168, 20886, 19957, 22653, 27576, 27132, 27179, 27548, 30841, 33199, 30920, 36867, 37813, 36957, 34135, 38945, 41642, 37865, 42842, 40798, 45478, 45135, 48675, 46600, 46020, 47609, 48534, 55183, 52635, 55959, 56340, 57656, 59071, 56299, 60408, 62149, 62545, 65535, 64509, 65535, 61776, 60977, 62716, 62524, 57448, 59258, 56076, 53334, 55145, 50757, 53858, 48960, 48377, 47731, 49362, 47206, 43194, 41548, 43701, 40146, 38883, 37625, 36476, 37287, 37943, 32486, 35319, 34391, 32456, 26604, 29467, 29681, 25923, 26160, 26056, 21909, 23826, 22612, 20017, 17453, 13853, 17661, 12790, 15344, 9666, 8464, 11592, 7307, 7807, 6260, 7079, 1274, 324, 2199, 0, 0, 3086, 4332, 3559, 4807, 3719, 9253, 9082, 13376, 9267, 13915, 16741, 17498, 14646, 15352, 20530, 17338, 18285, 22213, 20643, 23032, 25230, 27957, 25384, 31725, 31137, 32519, 34694, 32524, 35482, 34126, 40219, 40427, 38131, 39702, 42498, 42767, 41622, 45890, 47773, 48337, 49159, 52588, 53555, 52823, 54555, 55299, 56668, 55460, 57710, 61967, 60683, 62492, 59975, 65535, 65535, 64630, 62980, 63859, 60519, 57701, 61995, 58165, 56798, 55751, 54738, 50361, 51992, 51331, 52654, 51411, 46599, 49048, 44980, 43294, 41007, 41811, 41703, 37111, 39283, 38766, 34470, 33153, 35674, 32875, 32521, 27047, 25829, 27223, 23081, 25587, 24981, 25115, 18635, 17963, 17100, 18775, 15362, 14947, 14202, 12102, 14893, 13448, 10883, 11969, 5790, 4759, 5023, 1542, 1132, 4302, 793, 2853, 4178, 248, 5758, 7506, 6066, 10529, 10867, 8210, 11408, 13186, 13153, 17518, 14223, 18331, 15898, 21370, 22371, 21126, 24732, 27053, 25880, 24688, 25941, 30730, 29697, 29922, 29685, 35369, 37639, 33012, 35837, 38531, 38084, 42122, 39840, 40174, 44078, 45866, 45773, 48844, 49438, 52522, 52889, 53387, 50383, 51797, 58568, 56558, 56181, 56178, 59686, 60667, 64450, 60386, 64692, 65535, 63264, 64605, 61979, 57395, 59411, 56092, 55414, 53111, 54127, 54312, 49539, 49124, 50030, 46426, 50346, 48895, 43440, 42638, 45505, 40745, 39598, 41695, 35722, 39615, 37464, 35157, 32122, 31972, 32851, 31847, 28635, 25384, 29127, 27890, 26504, 24615, 25188, 17517, 21896, 19035, 15290, 12836, 15350, 15171, 15264, 11387, 11675, 10585, 10319, 7912, 2917, 1900, 2776, 0, 491, 0, 0, 2, 5677, 4503, 8075, 4644, 8632, 12555, 11196, 10216, 16257, 13021, 15871, 15607, 18290, 20928, 21342, 23966, 19727, 22154, 24268, 28491, 23961, 28882, 31833, 30818, 31691, 36098, 34874, 38254, 38727, 37586, 35641, 40673, 38505, 44418, 43460, 47406, 44848, 44774, 45772, 49778, 50827, 52305, 53575, 55003, 56899, 59490, 55161, 59795, 58749, 63323, 64394, 63727, 65535, 64186, 61406, 63352, 64555, 59857, 59829, 60738, 59305, 58576, 52013, 56494, 54183, 49942, 53324, 47432, 46275, 47954, 43793, 46527, 45876, 39303, 38892, 40050, 40614, 35168, 38499, 36255, 34199, 34501, 29508, 30825, 31524, 24865, 24483, 28338, 27129, 20419, 20826, 20916, 20218, 18354, 16768, 15677, 17873, 14136, 12895, 10866, 8451, 9206, 11174, 6007, 8439, 5397, 6642, 3615, 1864, 513, 0, 1100, 5660, 6247, 3485, 5901, 5805, 11900, 8342, 14604, 14874, 12229, 13129, 16940, 19710, 19514, 18343, 23693, 20276, 20771, 24026, 24646, 26406, 28565, 27709, 27914, 33202, 31609, 33529, 32912, 35742, 38775, 39383, 41418, 38844, 38910, 42661, 44319, 42760, 45857, 50190, 46286, 53344, 49933, 51097, 53361, 56752, 59017, 54125, 61047, 59786, 63377, 60661, 64791, 61776, 65293, 64355, 62118, 61775, 59326, 62928, 61384, 54844, 53257, 52124, 55686, 54644, 48659, 52689, 51089, 49171, 50121, 46622, 44360, 43874, 40815, 42016, 40937, 36931, 35863, 33515, 32840, 34007, 35559, 29924, 31208, 32572, 28985, 25613, 27230, 27072, 21154, 24778, 21359, 18467, 18053, 15899, 19320, 16530, 12022, 13895, 13720, 7954, 8091, 10196, 7234, 4024, 5492, 6952, 163, 161, 0, 3195, 3802, 4186, 1265, 4562, 3568, 5848, 6196, 10817, 12373, 9622, 16873, 12678, 14935, 19468, 20952, 21510, 20755, 18824, 24467, 27200, 23714, 26932, 26742, 32039, 29017, 31677, 29684, 35108, 37868, 38449, 38083, 37364, 38064, 39709, 39144, 39799, 42958, 45853, 46348, 46926, 46605, 47217, 49031, 54327, 54357, 55388, 57790, 53719, 59174, 62455, 61719, 62890, 62859, 62169, 65535, 62043, 63416, 64889, 61871, 59928, 60786, 57361, 54153, 53294, 54049, 55777, 51219, 50518, 50153, 45404, 48463, 49078, 44052, 44454, 39844, 38140, 43172, 40476, 38768, 37437, 32812, 31753, 30326, 30658, 34110, 26649, 26633, 27253, 29320, 25751, 24372, 22939, 19020, 20159, 17909, 14882, 15257, 15876, 13768, 10447, 10423, 14284, 12304, 9160, 8562, 4327, 6007, 6977, 2829, 4111, 1445, 496, 0, 4376, 3765, 2372, 5295, 8028, 6952, 11812, 10740, 9346, 16518, 13786, 14934, 18828, 17474, 18865, 21923, 21029, 26005, 21986, 22307, 26386, 25590, 28807, 29735, 34139, 32974, 33854, 34522, 33349, 33612, 41144, 37218, 38444, 40202, 44674, 46748, 46806, 45039, 48466, 51152, 50907, 52750, 50804, 50708, 56928, 55112, 56389, 56330, 58003, 61229, 58848, 62530, 65535, 62146, 62777, 62230, 59850, 58899, 60866, 56281, 55335, 57547, 53013, 55685, 51697, 54793, 50931, 52299, 51366, 44373, 46567, 43938, 43212, 45081, 42199, 40109, 39718, 36838, 34709, 38944, 36767, 34811, 35031, 31860, 26859, 28981, 26235, 29491, 24486, 25102, 20408, 23290, 18103, 19500, 16871, 17199, 13430, 15634, 14186, 12441, 10057, 12606, 8372, 5746, 8213, 8387, 5958, 4448, 1977, 0, 1588, 0, 2948, 1559, 5493, 6153, 8290, 7362, 9008, 13028, 10953, 10331, 11341, 17255, 15748, 20942, 17739, 20773, 22649, 24352, 22369, 26921, 23292, 25739, 26200, 30856, 28557, 29843, 32153, 32063, 33570, 38481, 39992, 38788, 42166, 38553, 40972, 41735, 45422, 48329, 48025, 50166, 48447, 49515, 49962, 51435, 53159, 53364, 56289, 60032, 56049, 60144, 64033, 64436, 62875, 64986, 65535, 64909, 65535, 62769, 63776, 61882
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4a06      	ldr	r2, [pc, #24]	; (8008de0 <_Z16get_feature_datajjPf+0x2c>)
 8008dc6:	1899      	adds	r1, r3, r2
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f015 fdd9 	bl	801e986 <memcpy>
    return 0;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000180 	.word	0x20000180

08008de4 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b0b4      	sub	sp, #208	; 0xd0
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f015 fcc0 	bl	801e77c <vsiprintf>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfcc      	ite	gt
 8008e02:	2301      	movgt	r3, #1
 8008e04:	2300      	movle	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00c      	beq.n	8008e26 <_Z6vprintPKcSt9__va_list+0x42>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 180); // send message via UART
 8008e0c:	f107 0308 	add.w	r3, r7, #8
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f7 fa5d 	bl	80002d0 <strlen>
 8008e16:	4603      	mov	r3, r0
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f107 0108 	add.w	r1, r7, #8
 8008e1e:	23b4      	movs	r3, #180	; 0xb4
 8008e20:	4803      	ldr	r0, [pc, #12]	; (8008e30 <_Z6vprintPKcSt9__va_list+0x4c>)
 8008e22:	f009 f8d7 	bl	8011fd4 <HAL_UART_Transmit>
    }
}
 8008e26:	bf00      	nop
 8008e28:	37d0      	adds	r7, #208	; 0xd0
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200053c4 	.word	0x200053c4

08008e34 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8008e34:	b40f      	push	{r0, r1, r2, r3}
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8008e3c:	f107 0314 	add.w	r3, r7, #20
 8008e40:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	6938      	ldr	r0, [r7, #16]
 8008e46:	f7ff ffcd 	bl	8008de4 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e54:	b004      	add	sp, #16
 8008e56:	4770      	bx	lr

08008e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b0ca      	sub	sp, #296	; 0x128
 8008e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e5e:	f007 fc06 	bl	801066e <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8008e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fa53 	bl	8007312 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8008e6c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  signal.get_data = &get_feature_data;
 8008e74:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <main+0xac>)
 8008e76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008e7a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8008e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 f8ad 	bl	800afe4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e8a:	f000 f83f 	bl	8008f0c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e8e:	f000 f8e3 	bl	8009058 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8008e92:	f000 f8ad 	bl	8008ff0 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  float t = 0.0;
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ei_impulse_result_t result = { 0 };
 8008ea4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ea8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008eac:	4618      	mov	r0, r3
 8008eae:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f015 fc85 	bl	801e7c4 <memset>
	  run_classifier(&signal, &result, false);
 8008eba:	4639      	mov	r1, r7
 8008ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ff62 	bl	8008d8c <run_classifier>

	  if (result.classification[0].value < result.classification[1].value) {
 8008ec8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ecc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ed0:	ed93 7a03 	vldr	s14, [r3, #12]
 8008ed4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ed8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008edc:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	d505      	bpl.n	8008ef6 <main+0x9e>
		 //ei_printf("triangulo\r\n");
		 func(false,100);
 8008eea:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8008f08 <main+0xb0>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	f000 fd2a 	bl	8009948 <_Z4funcbf>
 8008ef4:	e7d6      	b.n	8008ea4 <main+0x4c>
	  }else{
		//ei_printf("seno\r\n");
		func(true,100);
 8008ef6:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8008f08 <main+0xb0>
 8008efa:	2001      	movs	r0, #1
 8008efc:	f000 fd24 	bl	8009948 <_Z4funcbf>
	if(i>=999){ //se setea a 0
		t = 0.0;
		i = 0;
	}
	*/
  }
 8008f00:	e7d0      	b.n	8008ea4 <main+0x4c>
 8008f02:	bf00      	nop
 8008f04:	08008db5 	.word	0x08008db5
 8008f08:	42c80000 	.word	0x42c80000

08008f0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b094      	sub	sp, #80	; 0x50
 8008f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f12:	f107 0320 	add.w	r3, r7, #32
 8008f16:	2230      	movs	r2, #48	; 0x30
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f015 fc52 	bl	801e7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	609a      	str	r2, [r3, #8]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f30:	4b2d      	ldr	r3, [pc, #180]	; (8008fe8 <_Z18SystemClock_Configv+0xdc>)
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	4a2c      	ldr	r2, [pc, #176]	; (8008fe8 <_Z18SystemClock_Configv+0xdc>)
 8008f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8008f3c:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <_Z18SystemClock_Configv+0xdc>)
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f44:	60bb      	str	r3, [r7, #8]
 8008f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f48:	4b28      	ldr	r3, [pc, #160]	; (8008fec <_Z18SystemClock_Configv+0xe0>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008f50:	4a26      	ldr	r2, [pc, #152]	; (8008fec <_Z18SystemClock_Configv+0xe0>)
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	4b24      	ldr	r3, [pc, #144]	; (8008fec <_Z18SystemClock_Configv+0xe0>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008f60:	607b      	str	r3, [r7, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008f64:	2302      	movs	r3, #2
 8008f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008f70:	2302      	movs	r3, #2
 8008f72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8008f78:	230a      	movs	r3, #10
 8008f7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8008f7c:	23d2      	movs	r3, #210	; 0xd2
 8008f7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008f80:	2302      	movs	r3, #2
 8008f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008f84:	2302      	movs	r3, #2
 8008f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008f88:	f107 0320 	add.w	r3, r7, #32
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f007 ff59 	bl	8010e44 <HAL_RCC_OscConfig>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 8008fa2:	f000 fdf7 	bl	8009b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008fa6:	230f      	movs	r3, #15
 8008fa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008faa:	2302      	movs	r3, #2
 8008fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008fb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008fb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008fbe:	f107 030c 	add.w	r3, r7, #12
 8008fc2:	2105      	movs	r1, #5
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f008 f9e1 	bl	801138c <HAL_RCC_ClockConfig>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8008fda:	f000 fddb 	bl	8009b94 <Error_Handler>
  }
}
 8008fde:	bf00      	nop
 8008fe0:	3750      	adds	r7, #80	; 0x50
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	40023800 	.word	0x40023800
 8008fec:	40007000 	.word	0x40007000

08008ff0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ff6:	4a17      	ldr	r2, [pc, #92]	; (8009054 <_ZL19MX_USART1_UART_Initv+0x64>)
 8008ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008ffa:	4b15      	ldr	r3, [pc, #84]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8008ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009002:	4b13      	ldr	r3, [pc, #76]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009004:	2200      	movs	r2, #0
 8009006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009008:	4b11      	ldr	r3, [pc, #68]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 800900a:	2200      	movs	r2, #0
 800900c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800900e:	4b10      	ldr	r3, [pc, #64]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009010:	2200      	movs	r2, #0
 8009012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009014:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009016:	220c      	movs	r2, #12
 8009018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 800901c:	2200      	movs	r2, #0
 800901e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009022:	2200      	movs	r2, #0
 8009024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009028:	2200      	movs	r2, #0
 800902a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800902c:	4b08      	ldr	r3, [pc, #32]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 800902e:	2200      	movs	r2, #0
 8009030:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009032:	4807      	ldr	r0, [pc, #28]	; (8009050 <_ZL19MX_USART1_UART_Initv+0x60>)
 8009034:	f008 ff80 	bl	8011f38 <HAL_UART_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	bf14      	ite	ne
 800903e:	2301      	movne	r3, #1
 8009040:	2300      	moveq	r3, #0
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8009048:	f000 fda4 	bl	8009b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800904c:	bf00      	nop
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200053c4 	.word	0x200053c4
 8009054:	40011000 	.word	0x40011000

08009058 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b090      	sub	sp, #64	; 0x40
 800905c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800905e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	609a      	str	r2, [r3, #8]
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800906e:	4bad      	ldr	r3, [pc, #692]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	4aac      	ldr	r2, [pc, #688]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009074:	f043 0310 	orr.w	r3, r3, #16
 8009078:	6313      	str	r3, [r2, #48]	; 0x30
 800907a:	4baa      	ldr	r3, [pc, #680]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009086:	4ba7      	ldr	r3, [pc, #668]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	4aa6      	ldr	r2, [pc, #664]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800908c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009090:	6313      	str	r3, [r2, #48]	; 0x30
 8009092:	4ba4      	ldr	r3, [pc, #656]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800909e:	4ba1      	ldr	r3, [pc, #644]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a2:	4aa0      	ldr	r2, [pc, #640]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090a4:	f043 0302 	orr.w	r3, r3, #2
 80090a8:	6313      	str	r3, [r2, #48]	; 0x30
 80090aa:	4b9e      	ldr	r3, [pc, #632]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	623b      	str	r3, [r7, #32]
 80090b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80090b6:	4b9b      	ldr	r3, [pc, #620]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ba:	4a9a      	ldr	r2, [pc, #616]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090bc:	f043 0308 	orr.w	r3, r3, #8
 80090c0:	6313      	str	r3, [r2, #48]	; 0x30
 80090c2:	4b98      	ldr	r3, [pc, #608]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c6:	f003 0308 	and.w	r3, r3, #8
 80090ca:	61fb      	str	r3, [r7, #28]
 80090cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80090ce:	4b95      	ldr	r3, [pc, #596]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	4a94      	ldr	r2, [pc, #592]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090d4:	f043 0304 	orr.w	r3, r3, #4
 80090d8:	6313      	str	r3, [r2, #48]	; 0x30
 80090da:	4b92      	ldr	r3, [pc, #584]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80090e6:	4b8f      	ldr	r3, [pc, #572]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ea:	4a8e      	ldr	r2, [pc, #568]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6313      	str	r3, [r2, #48]	; 0x30
 80090f2:	4b8c      	ldr	r3, [pc, #560]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80090fe:	4b89      	ldr	r3, [pc, #548]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	4a88      	ldr	r2, [pc, #544]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009104:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009108:	6313      	str	r3, [r2, #48]	; 0x30
 800910a:	4b86      	ldr	r3, [pc, #536]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800910c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009116:	4b83      	ldr	r3, [pc, #524]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	4a82      	ldr	r2, [pc, #520]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800911c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009120:	6313      	str	r3, [r2, #48]	; 0x30
 8009122:	4b80      	ldr	r3, [pc, #512]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800912e:	4b7d      	ldr	r3, [pc, #500]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009132:	4a7c      	ldr	r2, [pc, #496]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009138:	6313      	str	r3, [r2, #48]	; 0x30
 800913a:	4b7a      	ldr	r3, [pc, #488]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009142:	60bb      	str	r3, [r7, #8]
 8009144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009146:	4b77      	ldr	r3, [pc, #476]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	4a76      	ldr	r2, [pc, #472]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800914c:	f043 0320 	orr.w	r3, r3, #32
 8009150:	6313      	str	r3, [r2, #48]	; 0x30
 8009152:	4b74      	ldr	r3, [pc, #464]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f003 0320 	and.w	r3, r3, #32
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800915e:	4b71      	ldr	r3, [pc, #452]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	4a70      	ldr	r2, [pc, #448]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 8009164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009168:	6313      	str	r3, [r2, #48]	; 0x30
 800916a:	4b6e      	ldr	r3, [pc, #440]	; (8009324 <_ZL12MX_GPIO_Initv+0x2cc>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8009176:	2201      	movs	r2, #1
 8009178:	2120      	movs	r1, #32
 800917a:	486b      	ldr	r0, [pc, #428]	; (8009328 <_ZL12MX_GPIO_Initv+0x2d0>)
 800917c:	f007 fe48 	bl	8010e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8009180:	2200      	movs	r2, #0
 8009182:	f241 010c 	movw	r1, #4108	; 0x100c
 8009186:	4869      	ldr	r0, [pc, #420]	; (800932c <_ZL12MX_GPIO_Initv+0x2d4>)
 8009188:	f007 fe42 	bl	8010e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800918c:	2200      	movs	r2, #0
 800918e:	2108      	movs	r1, #8
 8009190:	4867      	ldr	r0, [pc, #412]	; (8009330 <_ZL12MX_GPIO_Initv+0x2d8>)
 8009192:	f007 fe3d 	bl	8010e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8009196:	2200      	movs	r2, #0
 8009198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800919c:	4865      	ldr	r0, [pc, #404]	; (8009334 <_ZL12MX_GPIO_Initv+0x2dc>)
 800919e:	f007 fe37 	bl	8010e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80091a2:	2200      	movs	r2, #0
 80091a4:	21c8      	movs	r1, #200	; 0xc8
 80091a6:	4864      	ldr	r0, [pc, #400]	; (8009338 <_ZL12MX_GPIO_Initv+0x2e0>)
 80091a8:	f007 fe32 	bl	8010e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80091ac:	2310      	movs	r3, #16
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091b0:	2302      	movs	r3, #2
 80091b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091b8:	2300      	movs	r3, #0
 80091ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80091bc:	230e      	movs	r3, #14
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80091c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091c4:	4619      	mov	r1, r3
 80091c6:	485d      	ldr	r0, [pc, #372]	; (800933c <_ZL12MX_GPIO_Initv+0x2e4>)
 80091c8:	f007 fc76 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80091cc:	2308      	movs	r3, #8
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d0:	2300      	movs	r3, #0
 80091d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80091d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091dc:	4619      	mov	r1, r3
 80091de:	4857      	ldr	r0, [pc, #348]	; (800933c <_ZL12MX_GPIO_Initv+0x2e4>)
 80091e0:	f007 fc6a 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80091e4:	2304      	movs	r3, #4
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091e8:	2302      	movs	r3, #2
 80091ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f0:	2303      	movs	r3, #3
 80091f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80091f4:	2309      	movs	r3, #9
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80091f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091fc:	4619      	mov	r1, r3
 80091fe:	484f      	ldr	r0, [pc, #316]	; (800933c <_ZL12MX_GPIO_Initv+0x2e4>)
 8009200:	f007 fc5a 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009204:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800920a:	2302      	movs	r3, #2
 800920c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800920e:	2300      	movs	r3, #0
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009212:	2303      	movs	r3, #3
 8009214:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009216:	230b      	movs	r3, #11
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800921a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800921e:	4619      	mov	r1, r3
 8009220:	4845      	ldr	r0, [pc, #276]	; (8009338 <_ZL12MX_GPIO_Initv+0x2e0>)
 8009222:	f007 fc49 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8009226:	f64f 7383 	movw	r3, #65411	; 0xff83
 800922a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800922c:	2302      	movs	r3, #2
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009234:	2303      	movs	r3, #3
 8009236:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009238:	230c      	movs	r3, #12
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800923c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009240:	4619      	mov	r1, r3
 8009242:	483e      	ldr	r0, [pc, #248]	; (800933c <_ZL12MX_GPIO_Initv+0x2e4>)
 8009244:	f007 fc38 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009248:	f44f 7340 	mov.w	r3, #768	; 0x300
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800924e:	2312      	movs	r3, #18
 8009250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009252:	2300      	movs	r3, #0
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009256:	2300      	movs	r3, #0
 8009258:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800925a:	2304      	movs	r3, #4
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800925e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009262:	4619      	mov	r1, r3
 8009264:	4836      	ldr	r0, [pc, #216]	; (8009340 <_ZL12MX_GPIO_Initv+0x2e8>)
 8009266:	f007 fc27 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800926a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800926e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009270:	2302      	movs	r3, #2
 8009272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009274:	2300      	movs	r3, #0
 8009276:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009278:	2303      	movs	r3, #3
 800927a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800927c:	230a      	movs	r3, #10
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009284:	4619      	mov	r1, r3
 8009286:	482e      	ldr	r0, [pc, #184]	; (8009340 <_ZL12MX_GPIO_Initv+0x2e8>)
 8009288:	f007 fc16 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800928c:	2310      	movs	r3, #16
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009290:	2302      	movs	r3, #2
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009294:	2300      	movs	r3, #0
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009298:	2300      	movs	r3, #0
 800929a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800929c:	2302      	movs	r3, #2
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80092a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092a4:	4619      	mov	r1, r3
 80092a6:	4826      	ldr	r0, [pc, #152]	; (8009340 <_ZL12MX_GPIO_Initv+0x2e8>)
 80092a8:	f007 fc06 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80092ac:	2380      	movs	r3, #128	; 0x80
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b0:	2302      	movs	r3, #2
 80092b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092b8:	2300      	movs	r3, #0
 80092ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80092bc:	2308      	movs	r3, #8
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80092c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092c4:	4619      	mov	r1, r3
 80092c6:	4818      	ldr	r0, [pc, #96]	; (8009328 <_ZL12MX_GPIO_Initv+0x2d0>)
 80092c8:	f007 fbf6 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80092cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80092d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d2:	2302      	movs	r3, #2
 80092d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092da:	2303      	movs	r3, #3
 80092dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80092de:	230c      	movs	r3, #12
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092e6:	4619      	mov	r1, r3
 80092e8:	4816      	ldr	r0, [pc, #88]	; (8009344 <_ZL12MX_GPIO_Initv+0x2ec>)
 80092ea:	f007 fbe5 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80092ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f4:	2302      	movs	r3, #2
 80092f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092f8:	2300      	movs	r3, #0
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092fc:	2300      	movs	r3, #0
 80092fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009300:	2301      	movs	r3, #1
 8009302:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8009304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009308:	4619      	mov	r1, r3
 800930a:	480f      	ldr	r0, [pc, #60]	; (8009348 <_ZL12MX_GPIO_Initv+0x2f0>)
 800930c:	f007 fbd4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8009310:	2360      	movs	r3, #96	; 0x60
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009314:	2302      	movs	r3, #2
 8009316:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009318:	2300      	movs	r3, #0
 800931a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800931c:	2300      	movs	r3, #0
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009320:	230d      	movs	r3, #13
 8009322:	e013      	b.n	800934c <_ZL12MX_GPIO_Initv+0x2f4>
 8009324:	40023800 	.word	0x40023800
 8009328:	40020c00 	.word	0x40020c00
 800932c:	40022000 	.word	0x40022000
 8009330:	40022800 	.word	0x40022800
 8009334:	40021c00 	.word	0x40021c00
 8009338:	40021800 	.word	0x40021800
 800933c:	40021000 	.word	0x40021000
 8009340:	40020400 	.word	0x40020400
 8009344:	40020800 	.word	0x40020800
 8009348:	40020000 	.word	0x40020000
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800934e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009352:	4619      	mov	r1, r3
 8009354:	48bc      	ldr	r0, [pc, #752]	; (8009648 <_ZL12MX_GPIO_Initv+0x5f0>)
 8009356:	f007 fbaf 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800935e:	2302      	movs	r3, #2
 8009360:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	2300      	movs	r3, #0
 8009364:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009366:	2303      	movs	r3, #3
 8009368:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800936a:	230a      	movs	r3, #10
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800936e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009372:	4619      	mov	r1, r3
 8009374:	48b5      	ldr	r0, [pc, #724]	; (800964c <_ZL12MX_GPIO_Initv+0x5f4>)
 8009376:	f007 fb9f 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800937a:	f248 1333 	movw	r3, #33075	; 0x8133
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009380:	2302      	movs	r3, #2
 8009382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009384:	2300      	movs	r3, #0
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009388:	2303      	movs	r3, #3
 800938a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800938c:	230c      	movs	r3, #12
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009394:	4619      	mov	r1, r3
 8009396:	48ae      	ldr	r0, [pc, #696]	; (8009650 <_ZL12MX_GPIO_Initv+0x5f8>)
 8009398:	f007 fb8e 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800939c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a2:	2302      	movs	r3, #2
 80093a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093aa:	2300      	movs	r3, #0
 80093ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80093ae:	230e      	movs	r3, #14
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80093b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093b6:	4619      	mov	r1, r3
 80093b8:	48a6      	ldr	r0, [pc, #664]	; (8009654 <_ZL12MX_GPIO_Initv+0x5fc>)
 80093ba:	f007 fb7d 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80093be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093c4:	2300      	movs	r3, #0
 80093c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c8:	2300      	movs	r3, #0
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80093cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093d0:	4619      	mov	r1, r3
 80093d2:	48a0      	ldr	r0, [pc, #640]	; (8009654 <_ZL12MX_GPIO_Initv+0x5fc>)
 80093d4:	f007 fb70 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80093dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80093e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80093e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093ea:	4619      	mov	r1, r3
 80093ec:	489a      	ldr	r0, [pc, #616]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 80093ee:	f007 fb63 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80093f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80093f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f8:	2302      	movs	r3, #2
 80093fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fc:	2300      	movs	r3, #0
 80093fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009400:	2303      	movs	r3, #3
 8009402:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009404:	230c      	movs	r3, #12
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800940c:	4619      	mov	r1, r3
 800940e:	4892      	ldr	r0, [pc, #584]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 8009410:	f007 fb52 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8009414:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941a:	2302      	movs	r3, #2
 800941c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941e:	2300      	movs	r3, #0
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009422:	2303      	movs	r3, #3
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009426:	230a      	movs	r3, #10
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800942a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800942e:	4619      	mov	r1, r3
 8009430:	488a      	ldr	r0, [pc, #552]	; (800965c <_ZL12MX_GPIO_Initv+0x604>)
 8009432:	f007 fb41 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8009436:	23f0      	movs	r3, #240	; 0xf0
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800943a:	2302      	movs	r3, #2
 800943c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943e:	2300      	movs	r3, #0
 8009440:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009442:	2300      	movs	r3, #0
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009446:	230a      	movs	r3, #10
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800944a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800944e:	4619      	mov	r1, r3
 8009450:	4883      	ldr	r0, [pc, #524]	; (8009660 <_ZL12MX_GPIO_Initv+0x608>)
 8009452:	f007 fb31 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8009456:	23f7      	movs	r3, #247	; 0xf7
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800945a:	2302      	movs	r3, #2
 800945c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800945e:	2300      	movs	r3, #0
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009462:	2300      	movs	r3, #0
 8009464:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009466:	230e      	movs	r3, #14
 8009468:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800946a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800946e:	4619      	mov	r1, r3
 8009470:	487c      	ldr	r0, [pc, #496]	; (8009664 <_ZL12MX_GPIO_Initv+0x60c>)
 8009472:	f007 fb21 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8009476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800947c:	2302      	movs	r3, #2
 800947e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009480:	2300      	movs	r3, #0
 8009482:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009484:	2300      	movs	r3, #0
 8009486:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009488:	2309      	movs	r3, #9
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800948c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009490:	4619      	mov	r1, r3
 8009492:	486f      	ldr	r0, [pc, #444]	; (8009650 <_ZL12MX_GPIO_Initv+0x5f8>)
 8009494:	f007 fb10 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8009498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800949e:	2302      	movs	r3, #2
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80094aa:	230a      	movs	r3, #10
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80094ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094b2:	4619      	mov	r1, r3
 80094b4:	4866      	ldr	r0, [pc, #408]	; (8009650 <_ZL12MX_GPIO_Initv+0x5f8>)
 80094b6:	f007 faff 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80094ba:	2320      	movs	r3, #32
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094be:	2301      	movs	r3, #1
 80094c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c6:	2300      	movs	r3, #0
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80094ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ce:	4619      	mov	r1, r3
 80094d0:	4861      	ldr	r0, [pc, #388]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 80094d2:	f007 faf1 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80094d6:	2308      	movs	r3, #8
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094da:	2302      	movs	r3, #2
 80094dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094e2:	2300      	movs	r3, #0
 80094e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80094e6:	230d      	movs	r3, #13
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80094ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ee:	4619      	mov	r1, r3
 80094f0:	4859      	ldr	r0, [pc, #356]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 80094f2:	f007 fae1 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80094f6:	f241 030c 	movw	r3, #4108	; 0x100c
 80094fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094fc:	2301      	movs	r3, #1
 80094fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009500:	2300      	movs	r3, #0
 8009502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009504:	2300      	movs	r3, #0
 8009506:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800950c:	4619      	mov	r1, r3
 800950e:	4854      	ldr	r0, [pc, #336]	; (8009660 <_ZL12MX_GPIO_Initv+0x608>)
 8009510:	f007 fad2 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8009514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800951a:	2300      	movs	r3, #0
 800951c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8009522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009526:	4619      	mov	r1, r3
 8009528:	484f      	ldr	r0, [pc, #316]	; (8009668 <_ZL12MX_GPIO_Initv+0x610>)
 800952a:	f007 fac5 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800952e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009532:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009534:	2302      	movs	r3, #2
 8009536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009538:	2300      	movs	r3, #0
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800953c:	2303      	movs	r3, #3
 800953e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009540:	230c      	movs	r3, #12
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009548:	4619      	mov	r1, r3
 800954a:	4848      	ldr	r0, [pc, #288]	; (800966c <_ZL12MX_GPIO_Initv+0x614>)
 800954c:	f007 fab4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009550:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8009554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009556:	2302      	movs	r3, #2
 8009558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955a:	2300      	movs	r3, #0
 800955c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955e:	2300      	movs	r3, #0
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009562:	230e      	movs	r3, #14
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800956a:	4619      	mov	r1, r3
 800956c:	483c      	ldr	r0, [pc, #240]	; (8009660 <_ZL12MX_GPIO_Initv+0x608>)
 800956e:	f007 faa3 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8009572:	2308      	movs	r3, #8
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009576:	2301      	movs	r3, #1
 8009578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957a:	2300      	movs	r3, #0
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800957e:	2300      	movs	r3, #0
 8009580:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8009582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009586:	4619      	mov	r1, r3
 8009588:	4836      	ldr	r0, [pc, #216]	; (8009664 <_ZL12MX_GPIO_Initv+0x60c>)
 800958a:	f007 fa95 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800958e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009594:	2302      	movs	r3, #2
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009598:	2300      	movs	r3, #0
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800959c:	2300      	movs	r3, #0
 800959e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80095a0:	230d      	movs	r3, #13
 80095a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80095a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095a8:	4619      	mov	r1, r3
 80095aa:	4829      	ldr	r0, [pc, #164]	; (8009650 <_ZL12MX_GPIO_Initv+0x5f8>)
 80095ac:	f007 fa84 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80095b0:	2310      	movs	r3, #16
 80095b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095b4:	2300      	movs	r3, #0
 80095b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80095bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095c0:	4619      	mov	r1, r3
 80095c2:	4825      	ldr	r0, [pc, #148]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 80095c4:	f007 fa78 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80095c8:	2304      	movs	r3, #4
 80095ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095cc:	2302      	movs	r3, #2
 80095ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095d4:	2303      	movs	r3, #3
 80095d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80095d8:	230c      	movs	r3, #12
 80095da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80095dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095e0:	4619      	mov	r1, r3
 80095e2:	481d      	ldr	r0, [pc, #116]	; (8009658 <_ZL12MX_GPIO_Initv+0x600>)
 80095e4:	f007 fa68 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80095e8:	f248 0304 	movw	r3, #32772	; 0x8004
 80095ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095ee:	2300      	movs	r3, #0
 80095f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80095f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fa:	4619      	mov	r1, r3
 80095fc:	481c      	ldr	r0, [pc, #112]	; (8009670 <_ZL12MX_GPIO_Initv+0x618>)
 80095fe:	f007 fa5b 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8009602:	2302      	movs	r3, #2
 8009604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009606:	2302      	movs	r3, #2
 8009608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800960a:	2300      	movs	r3, #0
 800960c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800960e:	2300      	movs	r3, #0
 8009610:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009612:	2305      	movs	r3, #5
 8009614:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8009616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800961a:	4619      	mov	r1, r3
 800961c:	4810      	ldr	r0, [pc, #64]	; (8009660 <_ZL12MX_GPIO_Initv+0x608>)
 800961e:	f007 fa4b 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8009622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009628:	2301      	movs	r3, #1
 800962a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962c:	2300      	movs	r3, #0
 800962e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009630:	2300      	movs	r3, #0
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009638:	4619      	mov	r1, r3
 800963a:	480d      	ldr	r0, [pc, #52]	; (8009670 <_ZL12MX_GPIO_Initv+0x618>)
 800963c:	f007 fa3c 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8009640:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8009644:	e016      	b.n	8009674 <_ZL12MX_GPIO_Initv+0x61c>
 8009646:	bf00      	nop
 8009648:	40021000 	.word	0x40021000
 800964c:	40020400 	.word	0x40020400
 8009650:	40021800 	.word	0x40021800
 8009654:	40022400 	.word	0x40022400
 8009658:	40020c00 	.word	0x40020c00
 800965c:	40020000 	.word	0x40020000
 8009660:	40022000 	.word	0x40022000
 8009664:	40022800 	.word	0x40022800
 8009668:	40020800 	.word	0x40020800
 800966c:	40021400 	.word	0x40021400
 8009670:	40021c00 	.word	0x40021c00
 8009674:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009676:	2302      	movs	r3, #2
 8009678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800967e:	2300      	movs	r3, #0
 8009680:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009682:	230d      	movs	r3, #13
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800968a:	4619      	mov	r1, r3
 800968c:	48a5      	ldr	r0, [pc, #660]	; (8009924 <_ZL12MX_GPIO_Initv+0x8cc>)
 800968e:	f007 fa13 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8009692:	2301      	movs	r3, #1
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009696:	2302      	movs	r3, #2
 8009698:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800969a:	2300      	movs	r3, #0
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800969e:	2300      	movs	r3, #0
 80096a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80096a2:	2302      	movs	r3, #2
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80096a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096aa:	4619      	mov	r1, r3
 80096ac:	489e      	ldr	r0, [pc, #632]	; (8009928 <_ZL12MX_GPIO_Initv+0x8d0>)
 80096ae:	f007 fa03 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80096b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b8:	2302      	movs	r3, #2
 80096ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c0:	2300      	movs	r3, #0
 80096c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80096c4:	2301      	movs	r3, #1
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80096c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096cc:	4619      	mov	r1, r3
 80096ce:	4897      	ldr	r0, [pc, #604]	; (800992c <_ZL12MX_GPIO_Initv+0x8d4>)
 80096d0:	f007 f9f2 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80096d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80096da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80096de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80096e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096e8:	4619      	mov	r1, r3
 80096ea:	488f      	ldr	r0, [pc, #572]	; (8009928 <_ZL12MX_GPIO_Initv+0x8d0>)
 80096ec:	f007 f9e4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80096f0:	23c0      	movs	r3, #192	; 0xc0
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f4:	2302      	movs	r3, #2
 80096f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096f8:	2300      	movs	r3, #0
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096fc:	2303      	movs	r3, #3
 80096fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009700:	2308      	movs	r3, #8
 8009702:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009708:	4619      	mov	r1, r3
 800970a:	4889      	ldr	r0, [pc, #548]	; (8009930 <_ZL12MX_GPIO_Initv+0x8d8>)
 800970c:	f007 f9d4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009710:	2310      	movs	r3, #16
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009714:	2302      	movs	r3, #2
 8009716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	2300      	movs	r3, #0
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800971c:	2303      	movs	r3, #3
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009720:	230a      	movs	r3, #10
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009728:	4619      	mov	r1, r3
 800972a:	487e      	ldr	r0, [pc, #504]	; (8009924 <_ZL12MX_GPIO_Initv+0x8cc>)
 800972c:	f007 f9c4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8009730:	2328      	movs	r3, #40	; 0x28
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009734:	2302      	movs	r3, #2
 8009736:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009738:	2300      	movs	r3, #0
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800973c:	2303      	movs	r3, #3
 800973e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009740:	230c      	movs	r3, #12
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009748:	4619      	mov	r1, r3
 800974a:	4876      	ldr	r0, [pc, #472]	; (8009924 <_ZL12MX_GPIO_Initv+0x8cc>)
 800974c:	f007 f9b4 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009750:	23c8      	movs	r3, #200	; 0xc8
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009754:	2301      	movs	r3, #1
 8009756:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009758:	2300      	movs	r3, #0
 800975a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800975c:	2300      	movs	r3, #0
 800975e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009764:	4619      	mov	r1, r3
 8009766:	4873      	ldr	r0, [pc, #460]	; (8009934 <_ZL12MX_GPIO_Initv+0x8dc>)
 8009768:	f007 f9a6 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800976c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009772:	2303      	movs	r3, #3
 8009774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009776:	2300      	movs	r3, #0
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800977a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800977e:	4619      	mov	r1, r3
 8009780:	486d      	ldr	r0, [pc, #436]	; (8009938 <_ZL12MX_GPIO_Initv+0x8e0>)
 8009782:	f007 f999 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8009786:	2308      	movs	r3, #8
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978a:	2302      	movs	r3, #2
 800978c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978e:	2300      	movs	r3, #0
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009792:	2303      	movs	r3, #3
 8009794:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009796:	230c      	movs	r3, #12
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800979a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800979e:	4619      	mov	r1, r3
 80097a0:	4863      	ldr	r0, [pc, #396]	; (8009930 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097a2:	f007 f989 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80097a6:	2305      	movs	r3, #5
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097aa:	2302      	movs	r3, #2
 80097ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b2:	2303      	movs	r3, #3
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80097b6:	230a      	movs	r3, #10
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097be:	4619      	mov	r1, r3
 80097c0:	485b      	ldr	r0, [pc, #364]	; (8009930 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097c2:	f007 f979 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80097c6:	2332      	movs	r3, #50	; 0x32
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ca:	2302      	movs	r3, #2
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d2:	2303      	movs	r3, #3
 80097d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097d6:	230b      	movs	r3, #11
 80097d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097de:	4619      	mov	r1, r3
 80097e0:	4853      	ldr	r0, [pc, #332]	; (8009930 <_ZL12MX_GPIO_Initv+0x8d8>)
 80097e2:	f007 f969 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80097e6:	2304      	movs	r3, #4
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ea:	2302      	movs	r3, #2
 80097ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097f2:	2303      	movs	r3, #3
 80097f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80097f6:	2309      	movs	r3, #9
 80097f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097fe:	4619      	mov	r1, r3
 8009800:	484e      	ldr	r0, [pc, #312]	; (800993c <_ZL12MX_GPIO_Initv+0x8e4>)
 8009802:	f007 f959 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8009806:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800980c:	2302      	movs	r3, #2
 800980e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009810:	2300      	movs	r3, #0
 8009812:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009814:	2303      	movs	r3, #3
 8009816:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009818:	2309      	movs	r3, #9
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800981c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009820:	4619      	mov	r1, r3
 8009822:	4847      	ldr	r0, [pc, #284]	; (8009940 <_ZL12MX_GPIO_Initv+0x8e8>)
 8009824:	f007 f948 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8009828:	2304      	movs	r3, #4
 800982a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800982c:	2300      	movs	r3, #0
 800982e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009830:	2300      	movs	r3, #0
 8009832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8009834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009838:	4619      	mov	r1, r3
 800983a:	483e      	ldr	r0, [pc, #248]	; (8009934 <_ZL12MX_GPIO_Initv+0x8dc>)
 800983c:	f007 f93c 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009840:	2386      	movs	r3, #134	; 0x86
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009844:	2302      	movs	r3, #2
 8009846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009848:	2300      	movs	r3, #0
 800984a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009850:	230b      	movs	r3, #11
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009858:	4619      	mov	r1, r3
 800985a:	4834      	ldr	r0, [pc, #208]	; (800992c <_ZL12MX_GPIO_Initv+0x8d4>)
 800985c:	f007 f92c 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8009860:	2301      	movs	r3, #1
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009864:	2303      	movs	r3, #3
 8009866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009868:	2300      	movs	r3, #0
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800986c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009870:	4619      	mov	r1, r3
 8009872:	482e      	ldr	r0, [pc, #184]	; (800992c <_ZL12MX_GPIO_Initv+0x8d4>)
 8009874:	f007 f920 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8009878:	2350      	movs	r3, #80	; 0x50
 800987a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987c:	2302      	movs	r3, #2
 800987e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009880:	2300      	movs	r3, #0
 8009882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009884:	2300      	movs	r3, #0
 8009886:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009888:	230d      	movs	r3, #13
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800988c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009890:	4619      	mov	r1, r3
 8009892:	4826      	ldr	r0, [pc, #152]	; (800992c <_ZL12MX_GPIO_Initv+0x8d4>)
 8009894:	f007 f910 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8009898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800989c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800989e:	2312      	movs	r3, #18
 80098a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098a6:	2303      	movs	r3, #3
 80098a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80098aa:	2304      	movs	r3, #4
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80098ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098b2:	4619      	mov	r1, r3
 80098b4:	481b      	ldr	r0, [pc, #108]	; (8009924 <_ZL12MX_GPIO_Initv+0x8cc>)
 80098b6:	f007 f8ff 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80098ba:	2328      	movs	r3, #40	; 0x28
 80098bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098be:	2302      	movs	r3, #2
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098c6:	2303      	movs	r3, #3
 80098c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80098ca:	230a      	movs	r3, #10
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098d2:	4619      	mov	r1, r3
 80098d4:	4815      	ldr	r0, [pc, #84]	; (800992c <_ZL12MX_GPIO_Initv+0x8d4>)
 80098d6:	f007 f8ef 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098de:	2302      	movs	r3, #2
 80098e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098e6:	2300      	movs	r3, #0
 80098e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80098ea:	2309      	movs	r3, #9
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80098ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098f2:	4619      	mov	r1, r3
 80098f4:	480b      	ldr	r0, [pc, #44]	; (8009924 <_ZL12MX_GPIO_Initv+0x8cc>)
 80098f6:	f007 f8df 	bl	8010ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80098fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009900:	2302      	movs	r3, #2
 8009902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009904:	2300      	movs	r3, #0
 8009906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009908:	2300      	movs	r3, #0
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800990c:	2305      	movs	r3, #5
 800990e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009914:	4619      	mov	r1, r3
 8009916:	4809      	ldr	r0, [pc, #36]	; (800993c <_ZL12MX_GPIO_Initv+0x8e4>)
 8009918:	f007 f8ce 	bl	8010ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800991c:	bf00      	nop
 800991e:	3740      	adds	r7, #64	; 0x40
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40021c00 	.word	0x40021c00
 8009928:	40022000 	.word	0x40022000
 800992c:	40020000 	.word	0x40020000
 8009930:	40020800 	.word	0x40020800
 8009934:	40021800 	.word	0x40021800
 8009938:	40021400 	.word	0x40021400
 800993c:	40020400 	.word	0x40020400
 8009940:	40020c00 	.word	0x40020c00
 8009944:	00000000 	.word	0x00000000

08009948 <_Z4funcbf>:

/* USER CODE BEGIN 4 */
void func(bool s,float f){
 8009948:	b580      	push	{r7, lr}
 800994a:	b08c      	sub	sp, #48	; 0x30
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	ed87 0a00 	vstr	s0, [r7]
 8009954:	71fb      	strb	r3, [r7, #7]

	char msg[5];//buffer de salida

	//Señal triangular
	if (s == false) {
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f040 809b 	bne.w	8009a94 <_Z4funcbf+0x14c>

		int sample;
		float t = 0;
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
		float y; // resultado

		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 8009964:	2300      	movs	r3, #0
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009968:	e038      	b.n	80099dc <_Z4funcbf+0x94>

			y = 255.0*t;
 800996a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800996e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009b80 <_Z4funcbf+0x238>
 8009972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009976:	edc7 7a07 	vstr	s15, [r7, #28]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 800997a:	edd7 7a07 	vldr	s15, [r7, #28]
 800997e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009982:	ee17 3a90 	vmov	r3, s15
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	497d      	ldr	r1, [pc, #500]	; (8009b84 <_Z4funcbf+0x23c>)
 8009990:	4618      	mov	r0, r3
 8009992:	f014 fe79 	bl	801e688 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	4618      	mov	r0, r3
 800999c:	f7f6 fc98 	bl	80002d0 <strlen>
 80099a0:	4603      	mov	r3, r0
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f107 0108 	add.w	r1, r7, #8
 80099a8:	2364      	movs	r3, #100	; 0x64
 80099aa:	4877      	ldr	r0, [pc, #476]	; (8009b88 <_Z4funcbf+0x240>)
 80099ac:	f008 fb12 	bl	8011fd4 <HAL_UART_Transmit>
			HAL_Delay(5);
 80099b0:	2005      	movs	r0, #5
 80099b2:	f006 feb9 	bl	8010728 <HAL_Delay>

			t += 0.001;//avanzamos en el tiempo
 80099b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b8:	f7f6 fdf6 	bl	80005a8 <__aeabi_f2d>
 80099bc:	a36c      	add	r3, pc, #432	; (adr r3, 8009b70 <_Z4funcbf+0x228>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fc93 	bl	80002ec <__adddf3>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	f7f7 f93b 	bl	8000c48 <__aeabi_d2f>
 80099d2:	4603      	mov	r3, r0
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	3301      	adds	r3, #1
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099e6:	edd7 6a00 	vldr	s13, [r7]
 80099ea:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80099ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80099f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	d4b6      	bmi.n	800996a <_Z4funcbf+0x22>
		}

		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 80099fc:	2300      	movs	r3, #0
 80099fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a00:	e038      	b.n	8009a74 <_Z4funcbf+0x12c>
			y = 255.0*t;
 8009a02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a06:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8009b80 <_Z4funcbf+0x238>
 8009a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a0e:	edc7 7a07 	vstr	s15, [r7, #28]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009a12:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1a:	ee17 3a90 	vmov	r3, s15
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	461a      	mov	r2, r3
 8009a22:	f107 0308 	add.w	r3, r7, #8
 8009a26:	4957      	ldr	r1, [pc, #348]	; (8009b84 <_Z4funcbf+0x23c>)
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f014 fe2d 	bl	801e688 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f6 fc4c 	bl	80002d0 <strlen>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f107 0108 	add.w	r1, r7, #8
 8009a40:	2364      	movs	r3, #100	; 0x64
 8009a42:	4851      	ldr	r0, [pc, #324]	; (8009b88 <_Z4funcbf+0x240>)
 8009a44:	f008 fac6 	bl	8011fd4 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009a48:	2005      	movs	r0, #5
 8009a4a:	f006 fe6d 	bl	8010728 <HAL_Delay>

			t -= 0.001;//avanzamos en el tiempo
 8009a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a50:	f7f6 fdaa 	bl	80005a8 <__aeabi_f2d>
 8009a54:	a346      	add	r3, pc, #280	; (adr r3, 8009b70 <_Z4funcbf+0x228>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fc45 	bl	80002e8 <__aeabi_dsub>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4610      	mov	r0, r2
 8009a64:	4619      	mov	r1, r3
 8009a66:	f7f7 f8ef 	bl	8000c48 <__aeabi_d2f>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (sample = 0; sample < f/2; ++sample){ //f/2 muestras
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	3301      	adds	r3, #1
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a7e:	edd7 6a00 	vldr	s13, [r7]
 8009a82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009a86:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a92:	d4b6      	bmi.n	8009a02 <_Z4funcbf+0xba>
		}

	}

	if (s == true){
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d163      	bne.n	8009b62 <_Z4funcbf+0x21a>
		//senoidal
		float w = 2*3.1416; //velocidad angular
 8009a9a:	4b3c      	ldr	r3, [pc, #240]	; (8009b8c <_Z4funcbf+0x244>)
 8009a9c:	61bb      	str	r3, [r7, #24]
		float y; // resultado
		float a = 127.5; //amplitud
 8009a9e:	4b3c      	ldr	r3, [pc, #240]	; (8009b90 <_Z4funcbf+0x248>)
 8009aa0:	617b      	str	r3, [r7, #20]

		int sample;
		float t = 0;
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	623b      	str	r3, [r7, #32]
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8009aac:	e055      	b.n	8009b5a <_Z4funcbf+0x212>

			y = a*sin(w*t*f) + 127.5;
 8009aae:	ed97 7a06 	vldr	s14, [r7, #24]
 8009ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8009ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009aba:	edd7 7a00 	vldr	s15, [r7]
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac6:	f7f7 fb53 	bl	8001170 <_ZSt3sinf>
 8009aca:	eeb0 7a40 	vmov.f32	s14, s0
 8009ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	ee17 0a90 	vmov	r0, s15
 8009ada:	f7f6 fd65 	bl	80005a8 <__aeabi_f2d>
 8009ade:	a326      	add	r3, pc, #152	; (adr r3, 8009b78 <_Z4funcbf+0x230>)
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fc02 	bl	80002ec <__adddf3>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4610      	mov	r0, r2
 8009aee:	4619      	mov	r1, r3
 8009af0:	f7f7 f8aa 	bl	8000c48 <__aeabi_d2f>
 8009af4:	4603      	mov	r3, r0
 8009af6:	613b      	str	r3, [r7, #16]

			sprintf(msg,"%d\n\r",(uint16_t)y);
 8009af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8009afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b00:	ee17 3a90 	vmov	r3, s15
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	491d      	ldr	r1, [pc, #116]	; (8009b84 <_Z4funcbf+0x23c>)
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f014 fdba 	bl	801e688 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100);
 8009b14:	f107 0308 	add.w	r3, r7, #8
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7f6 fbd9 	bl	80002d0 <strlen>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	f107 0108 	add.w	r1, r7, #8
 8009b26:	2364      	movs	r3, #100	; 0x64
 8009b28:	4817      	ldr	r0, [pc, #92]	; (8009b88 <_Z4funcbf+0x240>)
 8009b2a:	f008 fa53 	bl	8011fd4 <HAL_UART_Transmit>
			HAL_Delay(5);
 8009b2e:	2005      	movs	r0, #5
 8009b30:	f006 fdfa 	bl	8010728 <HAL_Delay>

			t += 0.001;//avanzamos en el tiempo
 8009b34:	6a38      	ldr	r0, [r7, #32]
 8009b36:	f7f6 fd37 	bl	80005a8 <__aeabi_f2d>
 8009b3a:	a30d      	add	r3, pc, #52	; (adr r3, 8009b70 <_Z4funcbf+0x228>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fbd4 	bl	80002ec <__adddf3>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f7f7 f87c 	bl	8000c48 <__aeabi_d2f>
 8009b50:	4603      	mov	r3, r0
 8009b52:	623b      	str	r3, [r7, #32]
		for (sample = 0; sample < 1000; ++sample){ //1000 muestras
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	3301      	adds	r3, #1
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b60:	dba5      	blt.n	8009aae <_Z4funcbf+0x166>
		}
	}

}
 8009b62:	bf00      	nop
 8009b64:	3730      	adds	r7, #48	; 0x30
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w
 8009b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b74:	3f50624d 	.word	0x3f50624d
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	405fe000 	.word	0x405fe000
 8009b80:	437f0000 	.word	0x437f0000
 8009b84:	08021960 	.word	0x08021960
 8009b88:	200053c4 	.word	0x200053c4
 8009b8c:	40c90ff9 	.word	0x40c90ff9
 8009b90:	42ff0000 	.word	0x42ff0000

08009b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b98:	b672      	cpsid	i
}
 8009b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b9c:	e7fe      	b.n	8009b9c <Error_Handler+0x8>

08009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	109b      	asrs	r3, r3, #2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <_ZNSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f001 fc1f 	bl	800b410 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <_ZNSt6vectorIbN2ei7EiAllocIbEEEC1EjRKbRKS2_>:
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
#else
      explicit
      vector(size_type __n, const bool& __value = bool(),
	     const allocator_type& __a = allocator_type())
#endif
      : _Base(__a)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 fc1a 	bl	800b428 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>
      {
	_M_initialize(__n);
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f001 fc39 	bl	800b46e <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>
	_M_initialize_value(__value);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	4619      	mov	r1, r3
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 fc6f 	bl	800b4e6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>
      }
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <_ZNSt6vectorIbN2ei7EiAllocIbEEED1Ev>:
	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
	  _M_initialize_dispatch(__first, __last, _Integral());
	}
#endif

      ~vector() _GLIBCXX_NOEXCEPT { }
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f001 fc1a 	bl	800b456 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZNSt6vectorIbN2ei7EiAllocIbEEEixEj>:
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return begin() == end(); }

      reference
      operator[](size_type __n)
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
      { return begin()[__n]; }
 8009c38:	f107 0310 	add.w	r3, r7, #16
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 fc74 	bl	800b52c <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f107 0110 	add.w	r1, r7, #16
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7f7 fc6d 	bl	800152c <_ZNKSt13_Bit_iteratorixEi>
 8009c52:	bf00      	nop
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4618      	mov	r0, r3
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <_ZSt4swapImENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ffed 	bl	8009c5c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c82:	4603      	mov	r3, r0
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009c88:	6838      	ldr	r0, [r7, #0]
 8009c8a:	f7ff ffe7 	bl	8009c5c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff ffde 	bl	8009c5c <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	601a      	str	r2, [r3, #0]
    }
 8009ca8:	bf00      	nop
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8009cba:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7f6 fc73 	bl	80005a8 <__aeabi_f2d>
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	6838      	ldr	r0, [r7, #0]
 8009cc8:	f7f6 fc5c 	bl	8000584 <__aeabi_i2d>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	ec43 2b11 	vmov	d1, r2, r3
 8009cd4:	ec45 4b10 	vmov	d0, r4, r5
 8009cd8:	f010 fa18 	bl	801a10c <pow>
 8009cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8009ce0:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8009ce8:	eef0 0a67 	vmov.f32	s1, s15
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bdb0      	pop	{r4, r5, r7, pc}

08009cf2 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 fc4d 	bl	800b5a4 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_ZNSt10unique_ptrIvPFvPvEEC1IS2_vEES0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOS7_E4typeE>:
	unique_ptr(pointer __p,
 8009d14:	b590      	push	{r4, r7, lr}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8009d20:	68fc      	ldr	r4, [r7, #12]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 fc33 	bl	800b58e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f7ff ffdf 	bl	8009cf2 <_ZNSt15__uniq_ptr_dataIvPFvPvELb1ELb1EECI1St15__uniq_ptr_implIvS2_EIS2_EES0_OT_>
	{ }
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	4618      	mov	r0, r3
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd90      	pop	{r4, r7, pc}

08009d3e <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
      ~unique_ptr() noexcept
 8009d3e:	b590      	push	{r4, r7, lr}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 fc41 	bl	800b5d0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 8009d4e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0x32>
	  get_deleter()(std::move(__ptr));
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 fc46 	bl	800b5ea <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	681c      	ldr	r4, [r3, #0]
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f001 fa51 	bl	800b20a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	47a0      	blx	r4
	__ptr = pointer();
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
      }
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd90      	pop	{r4, r7, pc}

08009d80 <_ZNSt10unique_ptrIvPFvPvEE5resetES0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	_M_t.reset(std::move(__p));
 8009d8a:	687c      	ldr	r4, [r7, #4]
 8009d8c:	463b      	mov	r3, r7
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 fa3b 	bl	800b20a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8009d94:	4603      	mov	r3, r0
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f001 fc32 	bl	800b604 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>
      }
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd90      	pop	{r4, r7, pc}

08009da8 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	ed93 7a00 	vldr	s14, [r3]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	edd3 7a00 	vldr	s15, [r3]
 8009dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc6:	d501      	bpl.n	8009dcc <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	e000      	b.n	8009dce <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8009dcc:	687b      	ldr	r3, [r7, #4]
    }
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	f107 030c 	add.w	r3, r7, #12
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fc29 	bl	800b642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	1d1a      	adds	r2, r3, #4
 8009e06:	f107 030c 	add.w	r3, r7, #12
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 fc18 	bl	800b642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 fc1b 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	681c      	ldr	r4, [r3, #0]
 8009e30:	6838      	ldr	r0, [r7, #0]
 8009e32:	f001 fc16 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009e36:	4603      	mov	r3, r0
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	bf14      	ite	ne
 8009e3e:	2301      	movne	r3, #1
 8009e40:	2300      	moveq	r3, #0
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd90      	pop	{r4, r7, pc}

08009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	1d1a      	adds	r2, r3, #4
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
	return *this;
 8009e5e:	687b      	ldr	r3, [r7, #4]
      }
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
 8009e84:	b590      	push	{r4, r7, lr}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
      : _Base(_S_check_init_len(__n, __a), __a)
 8009e90:	68fc      	ldr	r4, [r7, #12]
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	68b8      	ldr	r0, [r7, #8]
 8009e96:	f001 fbef 	bl	800b678 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f001 fc07 	bl	800b6b4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
      { _M_default_initialize(__n); }
 8009ea6:	68b9      	ldr	r1, [r7, #8]
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f001 fc17 	bl	800b6dc <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}

08009eb8 <_ZNSt6vectorIfN2ei7EiAllocIfEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009eb8:	b5b0      	push	{r4, r5, r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681c      	ldr	r4, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f001 fc1e 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 8009ed0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f001 fc23 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      }
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f000 f815 	bl	8009f0e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bdb0      	pop	{r4, r5, r7, pc}

08009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
      }
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b082      	sub	sp, #8
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009f26:	461a      	mov	r2, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fc15 	bl	800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      }
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fc18 	bl	800b77e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 fc07 	bl	800b77e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009f7a:	b590      	push	{r4, r7, lr}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 fc0a 	bl	800b79e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	681c      	ldr	r4, [r3, #0]
 8009f8e:	6838      	ldr	r0, [r7, #0]
 8009f90:	f001 fc05 	bl	800b79e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 8009f94:	4603      	mov	r3, r0
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	bf14      	ite	ne
 8009f9c:	2301      	movne	r3, #1
 8009f9e:	2300      	moveq	r3, #0
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd90      	pop	{r4, r7, pc}

08009faa <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009faa:	b480      	push	{r7}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	601a      	str	r2, [r3, #0]
	return *this;
 8009fbc:	687b      	ldr	r3, [r7, #4]
      }
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEvT_S9_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8009fe2:	b590      	push	{r4, r7, lr}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8009fec:	f7f7 f8fc 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fbdd 	bl	800b7b4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd90      	pop	{r4, r7, pc}

0800a002 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 f9fd 	bl	800b410 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>
 800a016:	4603      	mov	r3, r0
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <_ZSt11max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
   *  @return  Iterator referencing the first instance of the largest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__max_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800a02a:	f7f7 f8dd 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__max_element(__first, __last,
 800a02e:	4622      	mov	r2, r4
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fc10 	bl	800b858 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a038:	4603      	mov	r3, r0
    }
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd90      	pop	{r4, r7, pc}

0800a042 <_ZNSt6vectorIiN2ei7EiAllocIiEEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a042:	b5b0      	push	{r4, r5, r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681c      	ldr	r4, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fc53 	bl	800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800a05a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a05c:	461a      	mov	r2, r3
 800a05e:	4629      	mov	r1, r5
 800a060:	4620      	mov	r0, r4
 800a062:	f001 fc58 	bl	800b916 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>
      }
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 f805 	bl	800a078 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bdb0      	pop	{r4, r5, r7, pc}

0800a078 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800a090:	461a      	mov	r2, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fc5a 	bl	800b94c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>
      }
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <_ZNKSt6vectorIfN2ei7EiAllocIfEEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
      }
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1ERKS3_>:
      vector(const vector& __x)
 800a0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800a0cc:	687c      	ldr	r4, [r7, #4]
 800a0ce:	6838      	ldr	r0, [r7, #0]
 800a0d0:	f7ff fd65 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 fc56 	bl	800b98a <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 fc46 	bl	800b972 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>
 800a0e6:	f107 030c 	add.w	r3, r7, #12
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f001 fae0 	bl	800b6b4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a0f4:	6838      	ldr	r0, [r7, #0]
 800a0f6:	f7ff ff1f 	bl	8009f38 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	6838      	ldr	r0, [r7, #0]
 800a0fe:	f7ff ff2b 	bl	8009f58 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800a102:	4606      	mov	r6, r0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fafe 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800a110:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a112:	4622      	mov	r2, r4
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	f001 fc42 	bl	800b9a0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>
 800a11c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	605a      	str	r2, [r3, #4]
      }
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a12c <_ZNKSt8functionIFijjPfEEclEjjS0_>:
       *
       *  The function call operator invokes the target function object
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
      {
	if (_M_empty())
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f7 f8a9 	bl	8001296 <_ZNKSt14_Function_base8_M_emptyEv>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	  __throw_bad_function_call();
 800a14a:	f00f ffd1 	bl	801a0f0 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	68dc      	ldr	r4, [r3, #12]
 800a152:	68fd      	ldr	r5, [r7, #12]
 800a154:	f107 0308 	add.w	r3, r7, #8
 800a158:	4618      	mov	r0, r3
 800a15a:	f001 fc52 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a15e:	4606      	mov	r6, r0
 800a160:	1d3b      	adds	r3, r7, #4
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fc4d 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800a168:	4680      	mov	r8, r0
 800a16a:	463b      	mov	r3, r7
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 fc53 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800a172:	4603      	mov	r3, r0
 800a174:	4642      	mov	r2, r8
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47a0      	blx	r4
 800a17c:	4603      	mov	r3, r0
      }
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a188 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7f6 f9f7 	bl	8000584 <__aeabi_i2d>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	ec43 2b17 	vmov	d7, r2, r3
 800a19e:	eeb0 0a47 	vmov.f32	s0, s14
 800a1a2:	eef0 0a67 	vmov.f32	s1, s15
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fc39 	bl	800ba2e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>
	{ }
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800a1de:	461a      	mov	r2, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 fc38 	bl	800ba56 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      }
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a1f0:	b5b0      	push	{r4, r5, r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681c      	ldr	r4, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fc3a 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800a208:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a20a:	461a      	mov	r2, r3
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f001 fc3f 	bl	800ba92 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      }
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff ffd5 	bl	800a1c6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEED1Ev>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bdb0      	pop	{r4, r5, r7, pc}

0800a226 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d00d      	beq.n	800a258 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4619      	mov	r1, r3
 800a246:	f001 fc3f 	bl	800bac8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
				     __x);
	    ++this->_M_impl._M_finish;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f103 0208 	add.w	r2, r3, #8
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 800a256:	e008      	b.n	800a26a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f81a 	bl	800a292 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>
 800a25e:	4603      	mov	r3, r0
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 fc59 	bl	800bb1c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	f107 030c 	add.w	r3, r7, #12
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fd06 	bl	800bc94 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	1d1a      	adds	r2, r3, #4
 800a29e:	f107 030c 	add.w	r3, r7, #12
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fcf5 	bl	800bc94 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESD_fftEUlRKS5_SF_E_EvT_SH_T0_>:
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	713a      	strb	r2, [r7, #4]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 fcf7 	bl	800bcb4 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	68b9      	ldr	r1, [r7, #8]
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f001 fd05 	bl	800bcda <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd90      	pop	{r4, r7, pc}

0800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	10db      	asrs	r3, r3, #3
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	4413      	add	r3, r2
      }
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <_ZSt11min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEET_SA_SA_>:
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800a318:	b590      	push	{r4, r7, lr}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
				__gnu_cxx::__ops::__iter_less_iter());
 800a322:	f7f6 ff61 	bl	80011e8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800a326:	4622      	mov	r2, r4
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f001 fd02 	bl	800bd34 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>
 800a330:	4603      	mov	r3, r0
    }
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}

0800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fc2a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a34a:	4602      	mov	r2, r0
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	4293      	cmp	r3, r2
 800a350:	bf8c      	ite	hi
 800a352:	2301      	movhi	r3, #1
 800a354:	2300      	movls	r3, #0
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00a      	beq.n	800a372 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fc1e 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a362:	4602      	mov	r2, r0
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	1a9b      	subs	r3, r3, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 fd18 	bl	800bda0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 800a370:	e014      	b.n	800a39c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	else if (__new_size < size())
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff fc13 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800a378:	4602      	mov	r2, r0
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	bf34      	ite	cc
 800a380:	2301      	movcc	r3, #1
 800a382:	2300      	movcs	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x62>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 fdc0 	bl	800bf1c <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
      }
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>:
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      operator[](size_type __n) const noexcept
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
      {
#if __cplusplus >= 201402L
	__glibcxx_requires_subscript(__n);
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 f805 	bl	800a3c2 <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>
 800a3b8:	4603      	mov	r3, r0
      }
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <_ZNSt14__array_traitsISt5arrayIfLj6EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	4413      	add	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	f107 0418 	add.w	r4, r7, #24
 800a3f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a3f6:	2306      	movs	r3, #6
 800a3f8:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a3fe:	f7ff ff9c 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a406:	f7ff ff98 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a40a:	2300      	movs	r3, #0
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	e02a      	b.n	800a466 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a410:	2100      	movs	r1, #0
 800a412:	f107 0018 	add.w	r0, r7, #24
 800a416:	f7ff ffc5 	bl	800a3a4 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	3b01      	subs	r3, #1
 800a422:	4619      	mov	r1, r3
 800a424:	f001 fd9b 	bl	800bf5e <_ZNKSt5arrayIfLj6EEixEj>
 800a428:	4604      	mov	r4, r0
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a42e:	f7ff fd5e 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a432:	4602      	mov	r2, r0
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a438:	2101      	movs	r1, #1
 800a43a:	f107 0018 	add.w	r0, r7, #24
 800a43e:	f7ff ffb1 	bl	800a3a4 <_ZNKSt5arrayIS_IfLj6EELj2EEixEj>
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	4619      	mov	r1, r3
 800a44c:	f001 fd87 	bl	800bf5e <_ZNKSt5arrayIfLj6EEixEj>
 800a450:	4604      	mov	r4, r0
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a456:	f7ff fd4a 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a45a:	4602      	mov	r2, r0
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3301      	adds	r3, #1
 800a464:	607b      	str	r3, [r7, #4]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3d0      	bcc.n	800a410 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a47a:	b004      	add	sp, #16
 800a47c:	4770      	bx	lr

0800a47e <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 f805 	bl	800a49c <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>
 800a492:	4603      	mov	r3, r0
      }
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <_ZNSt14__array_traitsISt5arrayIfLj10EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	00db      	lsls	r3, r3, #3
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	b590      	push	{r4, r7, lr}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	f107 0418 	add.w	r4, r7, #24
 800a4cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a4d0:	230a      	movs	r3, #10
 800a4d2:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a4d8:	f7ff ff2f 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4e0:	f7ff ff2b 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	607b      	str	r3, [r7, #4]
 800a4e8:	e02a      	b.n	800a540 <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	f107 0018 	add.w	r0, r7, #24
 800a4f0:	f7ff ffc5 	bl	800a47e <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f001 fd3d 	bl	800bf7c <_ZNKSt5arrayIfLj10EEixEj>
 800a502:	4604      	mov	r4, r0
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800a508:	f7ff fcf1 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a512:	2101      	movs	r1, #1
 800a514:	f107 0018 	add.w	r0, r7, #24
 800a518:	f7ff ffb1 	bl	800a47e <_ZNKSt5arrayIS_IfLj10EELj2EEixEj>
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	3b01      	subs	r3, #1
 800a524:	4619      	mov	r1, r3
 800a526:	f001 fd29 	bl	800bf7c <_ZNKSt5arrayIfLj10EEixEj>
 800a52a:	4604      	mov	r4, r0
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a530:	f7ff fcdd 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a534:	4602      	mov	r2, r0
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	3301      	adds	r3, #1
 800a53e:	607b      	str	r3, [r7, #4]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d3d0      	bcc.n	800a4ea <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a554:	b004      	add	sp, #16
 800a556:	4770      	bx	lr

0800a558 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 f805 	bl	800a576 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>
 800a56c:	4603      	mov	r3, r0
      }
 800a56e:	4618      	mov	r0, r3
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <_ZNSt14__array_traitsISt5arrayIfLj14EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a576:	b480      	push	{r7}
 800a578:	b083      	sub	sp, #12
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	4613      	mov	r3, r2
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	1a9b      	subs	r3, r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	4413      	add	r3, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a59a:	b084      	sub	sp, #16
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	f107 0418 	add.w	r4, r7, #24
 800a5a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a5aa:	230e      	movs	r3, #14
 800a5ac:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a5b4:	f7ff fec1 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a5b8:	6839      	ldr	r1, [r7, #0]
 800a5ba:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a5be:	f7ff febc 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	607b      	str	r3, [r7, #4]
 800a5c6:	e02c      	b.n	800a622 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	f107 0018 	add.w	r0, r7, #24
 800a5ce:	f7ff ffc3 	bl	800a558 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f001 fcdd 	bl	800bf9a <_ZNKSt5arrayIfLj14EEixEj>
 800a5e0:	4604      	mov	r4, r0
 800a5e2:	6879      	ldr	r1, [r7, #4]
 800a5e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800a5e8:	f7ff fc81 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	f107 0018 	add.w	r0, r7, #24
 800a5f8:	f7ff ffae 	bl	800a558 <_ZNKSt5arrayIS_IfLj14EELj2EEixEj>
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	3b01      	subs	r3, #1
 800a604:	4619      	mov	r1, r3
 800a606:	f001 fcc8 	bl	800bf9a <_ZNKSt5arrayIfLj14EEixEj>
 800a60a:	4604      	mov	r4, r0
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a612:	f7ff fc6c 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a616:	4602      	mov	r2, r0
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3301      	adds	r3, #1
 800a620:	607b      	str	r3, [r7, #4]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	429a      	cmp	r2, r3
 800a628:	d3ce      	bcc.n	800a5c8 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a636:	b004      	add	sp, #16
 800a638:	4770      	bx	lr

0800a63a <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f805 	bl	800a658 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>
 800a64e:	4603      	mov	r3, r0
      }
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <_ZNSt14__array_traitsISt5arrayIfLj18EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4413      	add	r3, r2
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	4413      	add	r3, r2
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a67c:	b084      	sub	sp, #16
 800a67e:	b590      	push	{r4, r7, lr}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	f107 0418 	add.w	r4, r7, #24
 800a688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a68c:	2312      	movs	r3, #18
 800a68e:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a696:	f7ff fe50 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a6a0:	f7ff fe4b 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	e02c      	b.n	800a704 <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800a6aa:	2100      	movs	r1, #0
 800a6ac:	f107 0018 	add.w	r0, r7, #24
 800a6b0:	f7ff ffc3 	bl	800a63a <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f001 fc7b 	bl	800bfb8 <_ZNKSt5arrayIfLj18EEixEj>
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800a6ca:	f7ff fc10 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	f107 0018 	add.w	r0, r7, #24
 800a6da:	f7ff ffae 	bl	800a63a <_ZNKSt5arrayIS_IfLj18EELj2EEixEj>
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	f001 fc66 	bl	800bfb8 <_ZNKSt5arrayIfLj18EEixEj>
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a6f4:	f7ff fbfb 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3301      	adds	r3, #1
 800a702:	607b      	str	r3, [r7, #4]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d3ce      	bcc.n	800a6aa <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a718:	b004      	add	sp, #16
 800a71a:	4770      	bx	lr

0800a71c <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f805 	bl	800a73a <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>
 800a730:	4603      	mov	r3, r0
      }
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <_ZNSt14__array_traitsISt5arrayIfLj4EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	011b      	lsls	r3, r3, #4
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	4413      	add	r3, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a758:	b084      	sub	sp, #16
 800a75a:	b590      	push	{r4, r7, lr}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	f107 0418 	add.w	r4, r7, #24
 800a764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a768:	2304      	movs	r3, #4
 800a76a:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a770:	f7ff fde3 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a778:	f7ff fddf 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a77c:	2300      	movs	r3, #0
 800a77e:	607b      	str	r3, [r7, #4]
 800a780:	e02a      	b.n	800a7d8 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a782:	2100      	movs	r1, #0
 800a784:	f107 0018 	add.w	r0, r7, #24
 800a788:	f7ff ffc8 	bl	800a71c <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	3b01      	subs	r3, #1
 800a794:	4619      	mov	r1, r3
 800a796:	f001 fc1e 	bl	800bfd6 <_ZNKSt5arrayIfLj4EEixEj>
 800a79a:	4604      	mov	r4, r0
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7a0:	f7ff fba5 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	f107 0018 	add.w	r0, r7, #24
 800a7b0:	f7ff ffb4 	bl	800a71c <_ZNKSt5arrayIS_IfLj4EELj2EEixEj>
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f001 fc0a 	bl	800bfd6 <_ZNKSt5arrayIfLj4EEixEj>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7c8:	f7ff fb91 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	607b      	str	r3, [r7, #4]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d3d0      	bcc.n	800a782 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a7ec:	b004      	add	sp, #16
 800a7ee:	4770      	bx	lr

0800a7f0 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f805 	bl	800a80e <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>
 800a804:	4603      	mov	r3, r0
      }
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <_ZNSt14__array_traitsISt5arrayIfLj8EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	015b      	lsls	r3, r3, #5
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	4413      	add	r3, r2
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a82c:	b084      	sub	sp, #16
 800a82e:	b590      	push	{r4, r7, lr}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	f107 0418 	add.w	r4, r7, #24
 800a838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a83c:	2308      	movs	r3, #8
 800a83e:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a844:	f7ff fd79 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a84c:	f7ff fd75 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a850:	2300      	movs	r3, #0
 800a852:	607b      	str	r3, [r7, #4]
 800a854:	e02a      	b.n	800a8ac <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a856:	2100      	movs	r1, #0
 800a858:	f107 0018 	add.w	r0, r7, #24
 800a85c:	f7ff ffc8 	bl	800a7f0 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	3b01      	subs	r3, #1
 800a868:	4619      	mov	r1, r3
 800a86a:	f001 fbc3 	bl	800bff4 <_ZNKSt5arrayIfLj8EEixEj>
 800a86e:	4604      	mov	r4, r0
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a874:	f7ff fb3b 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a878:	4602      	mov	r2, r0
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a87e:	2101      	movs	r1, #1
 800a880:	f107 0018 	add.w	r0, r7, #24
 800a884:	f7ff ffb4 	bl	800a7f0 <_ZNKSt5arrayIS_IfLj8EELj2EEixEj>
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	3b01      	subs	r3, #1
 800a890:	4619      	mov	r1, r3
 800a892:	f001 fbaf 	bl	800bff4 <_ZNKSt5arrayIfLj8EEixEj>
 800a896:	4604      	mov	r4, r0
 800a898:	6879      	ldr	r1, [r7, #4]
 800a89a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a89c:	f7ff fb27 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6823      	ldr	r3, [r4, #0]
 800a8a4:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	607b      	str	r3, [r7, #4]
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d3d0      	bcc.n	800a856 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a8c0:	b004      	add	sp, #16
 800a8c2:	4770      	bx	lr

0800a8c4 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f805 	bl	800a8e2 <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>
 800a8d8:	4603      	mov	r3, r0
      }
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <_ZNSt14__array_traitsISt5arrayIfLj12EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	4413      	add	r3, r2
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a906:	b084      	sub	sp, #16
 800a908:	b590      	push	{r4, r7, lr}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	f107 0418 	add.w	r4, r7, #24
 800a912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a916:	230c      	movs	r3, #12
 800a918:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a91e:	f7ff fd0c 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a926:	f7ff fd08 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	e02a      	b.n	800a986 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x80>
            h[i] = wav[0][n - i - 1];
 800a930:	2100      	movs	r1, #0
 800a932:	f107 0018 	add.w	r0, r7, #24
 800a936:	f7ff ffc5 	bl	800a8c4 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	4619      	mov	r1, r3
 800a944:	f001 fb65 	bl	800c012 <_ZNKSt5arrayIfLj12EEixEj>
 800a948:	4604      	mov	r4, r0
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a94e:	f7ff face 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a952:	4602      	mov	r2, r0
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800a958:	2101      	movs	r1, #1
 800a95a:	f107 0018 	add.w	r0, r7, #24
 800a95e:	f7ff ffb1 	bl	800a8c4 <_ZNKSt5arrayIS_IfLj12EELj2EEixEj>
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	3b01      	subs	r3, #1
 800a96a:	4619      	mov	r1, r3
 800a96c:	f001 fb51 	bl	800c012 <_ZNKSt5arrayIfLj12EEixEj>
 800a970:	4604      	mov	r4, r0
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a976:	f7ff faba 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800a97a:	4602      	mov	r2, r0
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3301      	adds	r3, #1
 800a984:	607b      	str	r3, [r7, #4]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d3d0      	bcc.n	800a930 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2a>
    }
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a99a:	b004      	add	sp, #16
 800a99c:	4770      	bx	lr

0800a99e <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f805 	bl	800a9bc <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>
 800a9b2:	4603      	mov	r3, r0
      }
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <_ZNSt14__array_traitsISt5arrayIfLj16EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	019b      	lsls	r3, r3, #6
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800a9da:	b084      	sub	sp, #16
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	f107 0418 	add.w	r4, r7, #24
 800a9e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800a9f4:	f7ff fca1 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a9fe:	f7ff fc9c 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
 800aa06:	e02c      	b.n	800aa62 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800aa08:	2100      	movs	r1, #0
 800aa0a:	f107 0018 	add.w	r0, r7, #24
 800aa0e:	f7ff ffc6 	bl	800a99e <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f001 fb08 	bl	800c030 <_ZNKSt5arrayIfLj16EEixEj>
 800aa20:	4604      	mov	r4, r0
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800aa28:	f7ff fa61 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800aa32:	2101      	movs	r1, #1
 800aa34:	f107 0018 	add.w	r0, r7, #24
 800aa38:	f7ff ffb1 	bl	800a99e <_ZNKSt5arrayIS_IfLj16EELj2EEixEj>
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	3b01      	subs	r3, #1
 800aa44:	4619      	mov	r1, r3
 800aa46:	f001 faf3 	bl	800c030 <_ZNKSt5arrayIfLj16EEixEj>
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800aa52:	f7ff fa4c 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800aa56:	4602      	mov	r2, r0
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	607b      	str	r3, [r7, #4]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d3ce      	bcc.n	800aa08 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800aa6a:	bf00      	nop
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aa76:	b004      	add	sp, #16
 800aa78:	4770      	bx	lr

0800aa7a <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 f805 	bl	800aa98 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>
 800aa8e:	4603      	mov	r3, r0
      }
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <_ZNSt14__array_traitsISt5arrayIfLj20EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	4413      	add	r3, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800aabc:	b084      	sub	sp, #16
 800aabe:	b590      	push	{r4, r7, lr}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	f107 0418 	add.w	r4, r7, #24
 800aac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        size_t n = wav[0].size();
 800aacc:	2314      	movs	r3, #20
 800aace:	603b      	str	r3, [r7, #0]
        h.resize(n);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800aad6:	f7ff fc30 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800aae0:	f7ff fc2b 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800aae4:	2300      	movs	r3, #0
 800aae6:	607b      	str	r3, [r7, #4]
 800aae8:	e02c      	b.n	800ab44 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x88>
            h[i] = wav[0][n - i - 1];
 800aaea:	2100      	movs	r1, #0
 800aaec:	f107 0018 	add.w	r0, r7, #24
 800aaf0:	f7ff ffc3 	bl	800aa7a <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	3b01      	subs	r3, #1
 800aafc:	4619      	mov	r1, r3
 800aafe:	f001 faa6 	bl	800c04e <_ZNKSt5arrayIfLj20EEixEj>
 800ab02:	4604      	mov	r4, r0
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800ab0a:	f7ff f9f0 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800ab14:	2101      	movs	r1, #1
 800ab16:	f107 0018 	add.w	r0, r7, #24
 800ab1a:	f7ff ffae 	bl	800aa7a <_ZNKSt5arrayIS_IfLj20EELj2EEixEj>
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	4619      	mov	r1, r3
 800ab28:	f001 fa91 	bl	800c04e <_ZNKSt5arrayIfLj20EEixEj>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ab34:	f7ff f9db 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3301      	adds	r3, #1
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d3ce      	bcc.n	800aaea <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x2e>
    }
 800ab4c:	bf00      	nop
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ab58:	b004      	add	sp, #16
 800ab5a:	4770      	bx	lr

0800ab5c <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>:
      operator[](size_type __n) const noexcept
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f805 	bl	800ab7a <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>
 800ab70:	4603      	mov	r3, r0
      }
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <_ZNSt14__array_traitsISt5arrayIfLj2EELj2EE6_S_refERA2_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 800ab98:	b590      	push	{r4, r7, lr}
 800ab9a:	b089      	sub	sp, #36	; 0x24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	eeb0 6a40 	vmov.f32	s12, s0
 800aba2:	eef0 6a60 	vmov.f32	s13, s1
 800aba6:	eeb0 7a41 	vmov.f32	s14, s2
 800abaa:	eef0 7a61 	vmov.f32	s15, s3
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
 800abb2:	ed87 6a02 	vstr	s12, [r7, #8]
 800abb6:	edc7 6a03 	vstr	s13, [r7, #12]
 800abba:	ed87 7a04 	vstr	s14, [r7, #16]
 800abbe:	edc7 7a05 	vstr	s15, [r7, #20]
        size_t n = wav[0].size();
 800abc2:	2302      	movs	r3, #2
 800abc4:	61bb      	str	r3, [r7, #24]
        h.resize(n);
 800abc6:	69b9      	ldr	r1, [r7, #24]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff fbb6 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 800abce:	69b9      	ldr	r1, [r7, #24]
 800abd0:	6838      	ldr	r0, [r7, #0]
 800abd2:	f7ff fbb2 	bl	800a33a <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        for (size_t i = 0; i < n; i++) {
 800abd6:	2300      	movs	r3, #0
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	e02c      	b.n	800ac36 <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x9e>
            h[i] = wav[0][n - i - 1];
 800abdc:	f107 0308 	add.w	r3, r7, #8
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff ffba 	bl	800ab5c <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	3b01      	subs	r3, #1
 800abf0:	4619      	mov	r1, r3
 800abf2:	f001 fa3b 	bl	800c06c <_ZNKSt5arrayIfLj2EEixEj>
 800abf6:	4604      	mov	r4, r0
 800abf8:	69f9      	ldr	r1, [r7, #28]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff f977 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	6013      	str	r3, [r2, #0]
            g[i] = wav[1][n - i - 1];
 800ac06:	f107 0308 	add.w	r3, r7, #8
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7ff ffa5 	bl	800ab5c <_ZNKSt5arrayIS_IfLj2EELj2EEixEj>
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f001 fa26 	bl	800c06c <_ZNKSt5arrayIfLj2EEixEj>
 800ac20:	4604      	mov	r4, r0
 800ac22:	69f9      	ldr	r1, [r7, #28]
 800ac24:	6838      	ldr	r0, [r7, #0]
 800ac26:	f7ff f962 	bl	8009eee <_ZNSt6vectorIfN2ei7EiAllocIfEEEixEj>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	6013      	str	r3, [r2, #0]
        for (size_t i = 0; i < n; i++) {
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	3301      	adds	r3, #1
 800ac34:	61fb      	str	r3, [r7, #28]
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d3ce      	bcc.n	800abdc <_ZN2ei8spectral7wavelet10get_filterILj2EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x44>
    }
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	3724      	adds	r7, #36	; 0x24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd90      	pop	{r4, r7, pc}

0800ac48 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 fa19 	bl	800c08a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d00c      	beq.n	800ac92 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f001 fa16 	bl	800c0b2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	    ++this->_M_impl._M_finish;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	1d1a      	adds	r2, r3, #4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	605a      	str	r2, [r3, #4]
      }
 800ac90:	e008      	b.n	800aca4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff f8b1 	bl	8009dfa <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fa1a 	bl	800c0d8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800aca4:	bf00      	nop
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backEOf>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800acb6:	6838      	ldr	r0, [r7, #0]
 800acb8:	f000 f817 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800acbc:	4603      	mov	r3, r0
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 fac5 	bl	800c250 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <_ZNSt6vectorIfN2ei7EiAllocIfEEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800acce:	b580      	push	{r7, lr}
 800acd0:	b082      	sub	sp, #8
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 f91d 	bl	800bf1c <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff ffed 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad10:	4603      	mov	r3, r0
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ad16:	6838      	ldr	r0, [r7, #0]
 800ad18:	f7ff ffe7 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff ffde 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	601a      	str	r2, [r3, #0]
    }
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>:
      _S_use_relocate()
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 f805 	bl	800ad54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800ad4a:	4603      	mov	r3, r0
      }
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800ad5c:	2301      	movs	r3, #1
      }
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
	...

0800ad6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800ad6c:	b5b0      	push	{r4, r5, r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 fa98 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	4293      	cmp	r3, r2
 800ad82:	bf8c      	ite	hi
 800ad84:	2301      	movhi	r3, #1
 800ad86:	2300      	movls	r3, #0
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 800ad8e:	4836      	ldr	r0, [pc, #216]	; (800ae68 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xfc>)
 800ad90:	f00f f9ab 	bl	801a0ea <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 fa9a 	bl	800c2ce <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	bf8c      	ite	hi
 800ada2:	2301      	movhi	r3, #1
 800ada4:	2300      	movls	r3, #0
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d059      	beq.n	800ae60 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xf4>
	{
	  const size_type __old_size = size();
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7fe fef6 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800adb2:	60b8      	str	r0, [r7, #8]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800adb4:	f7ff ffc3 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d014      	beq.n	800ade8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0x7c>
	    {
	      __tmp = this->_M_allocate(__n);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 fa93 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800adc8:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681c      	ldr	r4, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fc99 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800adda:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4629      	mov	r1, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	f001 fa98 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800ade6:	e01f      	b.n	800ae28 <_ZNSt6vectorIfN2ei7EiAllocIfEEE7reserveEj+0xbc>
	    }
	  else
#endif
	    {
	      __tmp = _M_allocate_and_copy(__n,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f001 faa6 	bl	800c33e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800adf2:	4604      	mov	r4, r0
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f001 faa0 	bl	800c33e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800adfe:	4603      	mov	r3, r0
 800ae00:	4622      	mov	r2, r4
 800ae02:	6839      	ldr	r1, [r7, #0]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 faa9 	bl	800c35c <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>
 800ae0a:	60f8      	str	r0, [r7, #12]
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681c      	ldr	r4, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fc78 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800ae1c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ae1e:	461a      	mov	r2, r3
 800ae20:	4629      	mov	r1, r5
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fc7d 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f000 fc8c 	bl	800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	441a      	add	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	441a      	add	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	609a      	str	r2, [r3, #8]
	}
    }
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bdb0      	pop	{r4, r5, r7, pc}
 800ae68:	08021968 	.word	0x08021968

0800ae6c <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1IPKfvEET_S7_RKS2_>:
	vector(_InputIterator __first, _InputIterator __last,
 800ae6c:	b5b0      	push	{r4, r5, r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	: _Base(__a)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fa88 	bl	800c394 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>
	  _M_range_initialize(__first, __last,
 800ae84:	68bc      	ldr	r4, [r7, #8]
			      std::__iterator_category(__first));
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 fa91 	bl	800c3b2 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
	  _M_range_initialize(__first, __last,
 800ae90:	462b      	mov	r3, r5
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4621      	mov	r1, r4
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f001 fa96 	bl	800c3c8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>
	}
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bdb0      	pop	{r4, r5, r7, pc}

0800aea6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 800aea6:	b5b0      	push	{r4, r5, r7, lr}
 800aea8:	b086      	sub	sp, #24
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	1d38      	adds	r0, r7, #4
 800aeb0:	e880 0006 	stmia.w	r0, {r1, r2}
 800aeb4:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 fadb 	bl	800c476 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>
	_M_range_initialize(__l.begin(), __l.end(),
 800aec0:	1d3b      	adds	r3, r7, #4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 fab9 	bl	800c43a <_ZNKSt16initializer_listIiE5beginEv>
 800aec8:	4604      	mov	r4, r0
 800aeca:	1d3b      	adds	r3, r7, #4
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 fac0 	bl	800c452 <_ZNKSt16initializer_listIiE3endEv>
 800aed2:	4602      	mov	r2, r0
 800aed4:	462b      	mov	r3, r5
 800aed6:	4621      	mov	r1, r4
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f001 fadb 	bl	800c494 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>
      }
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bdb0      	pop	{r4, r5, r7, pc}

0800aee8 <_ZNSt6vectorIiN2ei7EiAllocIiEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	f107 030c 	add.w	r3, r7, #12
 800aef6:	4611      	mov	r1, r2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 fb04 	bl	800c506 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZNSt6vectorIiN2ei7EiAllocIiEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	1d1a      	adds	r2, r3, #4
 800af14:	f107 030c 	add.w	r3, r7, #12
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 faf3 	bl	800c506 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <_ZN9__gnu_cxxneIPiSt6vectorIiN2ei7EiAllocIiEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800af2a:	b590      	push	{r4, r7, lr}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 faf6 	bl	800c526 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800af3a:	4603      	mov	r3, r0
 800af3c:	681c      	ldr	r4, [r3, #0]
 800af3e:	6838      	ldr	r0, [r7, #0]
 800af40:	f001 faf1 	bl	800c526 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>
 800af44:	4603      	mov	r3, r0
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	429c      	cmp	r4, r3
 800af4a:	bf14      	ite	ne
 800af4c:	2301      	movne	r3, #1
 800af4e:	2300      	moveq	r3, #0
 800af50:	b2db      	uxtb	r3, r3
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}

0800af5a <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800af5a:	b480      	push	{r7}
 800af5c:	b083      	sub	sp, #12
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
	++_M_current;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	1d1a      	adds	r2, r3, #4
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	601a      	str	r2, [r3, #0]
	return *this;
 800af6c:	687b      	ldr	r3, [r7, #4]
      }
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 800af92:	b480      	push	{r7}
 800af94:	b083      	sub	sp, #12
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	461a      	mov	r2, r3
 800af9e:	2300      	movs	r3, #0
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	6053      	str	r3, [r2, #4]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	609a      	str	r2, [r3, #8]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	461a      	mov	r2, r3
 800afc4:	2300      	movs	r3, #0
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	6053      	str	r3, [r2, #4]
 800afca:	6093      	str	r3, [r2, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff ffdf 	bl	800af92 <_ZNSt14_Function_baseC1Ev>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	60da      	str	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableIT_NS5_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS7_E4typeEE4typeES2_E5valueESt5decayIS7_EE4type4typeESt15__invoke_resultIRSK_JjjS0_EEEE5valueERS2_E4typeEOS7_>:
	operator=(_Functor&& __f)
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800afee:	6838      	ldr	r0, [r7, #0]
 800aff0:	f001 faa4 	bl	800c53c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800aff4:	4602      	mov	r2, r0
 800aff6:	f107 0308 	add.w	r3, r7, #8
 800affa:	4611      	mov	r1, r2
 800affc:	4618      	mov	r0, r3
 800affe:	f001 faa9 	bl	800c554 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	6879      	ldr	r1, [r7, #4]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fa9f 	bl	800b54c <_ZNSt8functionIFijjPfEE4swapERS2_>
 800b00e:	f107 0308 	add.w	r3, r7, #8
 800b012:	4618      	mov	r0, r3
 800b014:	f7fc f970 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800b018:	687b      	ldr	r3, [r7, #4]
	}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableIT_NS6_IXntsrSt7is_sameINSt9remove_cvINSt16remove_referenceIS8_E4typeEE4typeES2_E5valueESt5decayIS8_EE4type4typeESt15__invoke_resultIRSL_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800b022:	b580      	push	{r7, lr}
 800b024:	b086      	sub	sp, #24
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800b02c:	6838      	ldr	r0, [r7, #0]
 800b02e:	f001 fac3 	bl	800c5b8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800b032:	4602      	mov	r2, r0
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4611      	mov	r1, r2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fac8 	bl	800c5d0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fa80 	bl	800b54c <_ZNSt8functionIFijjPfEE4swapERS2_>
 800b04c:	f107 0308 	add.w	r3, r7, #8
 800b050:	4618      	mov	r0, r3
 800b052:	f7fc f951 	bl	80072f8 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800b056:	687b      	ldr	r3, [r7, #4]
	}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f001 fadd 	bl	800c630 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EEC1IPS0_S3_vbEET_>:
	       typename _Vp = _Dp,
	       typename = _DeleterConstraint<_Vp>,
	       typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
	explicit
	unique_ptr(_Up __p) noexcept
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6839      	ldr	r1, [r7, #0]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff ffe6 	bl	800b060 <_ZNSt15__uniq_ptr_dataI12ei_feature_tSt14default_deleteIA_S0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S3_EEPS0_>
        { }
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b084      	sub	sp, #16
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f001 fad5 	bl	800c658 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b0ae:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d009      	beq.n	800b0cc <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0x2e>
	  get_deleter()(__ptr);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fada 	bl	800c672 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f001 fae0 	bl	800c68c <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>
	__ptr = pointer();
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
      }
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZNKSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE3getEv>:
	return get()[__i];
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f001 fadf 	bl	800c6aa <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fadd 	bl	800c6c6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4618      	mov	r0, r3
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEPS1_>:
	unique_ptr(pointer __p) noexcept
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	4618      	mov	r0, r3
 800b126:	f7ff ffe6 	bl	800b0f6 <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEPS1_>
        { }
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	3708      	adds	r7, #8
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 fad5 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b144:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00c      	beq.n	800b168 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 fada 	bl	800c708 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>
 800b154:	4604      	mov	r4, r0
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f001 fae3 	bl	800c722 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>
 800b15c:	4603      	mov	r3, r0
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4619      	mov	r1, r3
 800b162:	4620      	mov	r0, r4
 800b164:	f001 fae8 	bl	800c738 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
	__ptr = pointer();
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	601a      	str	r2, [r3, #0]
      }
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	bd90      	pop	{r4, r7, pc}

0800b178 <_ZNKSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE3getEv>:
      get() const noexcept
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	f001 faeb 	bl	800c75e <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800b188:	4603      	mov	r3, r0
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	da01      	bge.n	800b1ac <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	e000      	b.n	800b1ae <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800b1ac:	687b      	ldr	r3, [r7, #4]
    }
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	da01      	bge.n	800b1d4 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	e000      	b.n	800b1d6 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800b1d4:	687b      	ldr	r3, [r7, #4]
    }
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d201      	bcs.n	800b1fc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	e000      	b.n	800b1fe <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800b1fc:	687b      	ldr	r3, [r7, #4]
    }
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <_Z35fill_result_struct_quantized_yolov5IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6178      	str	r0, [r7, #20]
 800b228:	6139      	str	r1, [r7, #16]
 800b22a:	60fa      	str	r2, [r7, #12]
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	ed87 0a01 	vstr	s0, [r7, #4]
 800b232:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b236:	f06f 0314 	mvn.w	r3, #20
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	371c      	adds	r7, #28
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <_Z35fill_result_struct_quantized_yolov5IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tiPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_yolov5(const ei_impulse_t *impulse,
 800b246:	b480      	push	{r7}
 800b248:	b087      	sub	sp, #28
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6178      	str	r0, [r7, #20]
 800b24e:	6139      	str	r1, [r7, #16]
 800b250:	60fa      	str	r2, [r7, #12]
 800b252:	60bb      	str	r3, [r7, #8]
 800b254:	ed87 0a01 	vstr	s0, [r7, #4]
 800b258:	edc7 0a00 	vstr	s1, [r7]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b25c:	f06f 0314 	mvn.w	r3, #20
}
 800b260:	4618      	mov	r0, r3
 800b262:	371c      	adds	r7, #28
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <_Z50fill_result_struct_quantized_tao_decode_detectionsIaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	6178      	str	r0, [r7, #20]
 800b274:	6139      	str	r1, [r7, #16]
 800b276:	60fa      	str	r2, [r7, #12]
 800b278:	ed87 0a02 	vstr	s0, [r7, #8]
 800b27c:	edc7 0a01 	vstr	s1, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b282:	f06f 0314 	mvn.w	r3, #20
}
 800b286:	4618      	mov	r0, r3
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <_Z50fill_result_struct_quantized_tao_decode_detectionsIhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_decode_detections(const ei_impulse_t *impulse,
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	6178      	str	r0, [r7, #20]
 800b29a:	6139      	str	r1, [r7, #16]
 800b29c:	60fa      	str	r2, [r7, #12]
 800b29e:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2a2:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2a6:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2a8:	f06f 0314 	mvn.w	r3, #20
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	371c      	adds	r7, #28
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_Z39fill_result_struct_quantized_tao_yolov3IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6178      	str	r0, [r7, #20]
 800b2c0:	6139      	str	r1, [r7, #16]
 800b2c2:	60fa      	str	r2, [r7, #12]
 800b2c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2c8:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2ce:	f06f 0314 	mvn.w	r3, #20
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <_Z39fill_result_struct_quantized_tao_yolov3IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov3(const ei_impulse_t *impulse,
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6178      	str	r0, [r7, #20]
 800b2e6:	6139      	str	r1, [r7, #16]
 800b2e8:	60fa      	str	r2, [r7, #12]
 800b2ea:	ed87 0a02 	vstr	s0, [r7, #8]
 800b2ee:	edc7 0a01 	vstr	s1, [r7, #4]
 800b2f2:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b2f4:	f06f 0314 	mvn.w	r3, #20
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <_Z39fill_result_struct_quantized_tao_yolov4IaE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:

/**
 * Fill the result structure from a quantized output tensor
*/
template<typename T>
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b304:	b480      	push	{r7}
 800b306:	b087      	sub	sp, #28
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6178      	str	r0, [r7, #20]
 800b30c:	6139      	str	r1, [r7, #16]
 800b30e:	60fa      	str	r2, [r7, #12]
 800b310:	ed87 0a02 	vstr	s0, [r7, #8]
 800b314:	edc7 0a01 	vstr	s1, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
                                                                                      size_t output_features_count,
                                                                                      bool debug = false) {
#ifdef EI_HAS_TAO_YOLOV4
    return fill_result_struct_tao_yolov4_common(impulse, result, data, zero_point, scale, output_features_count, debug);
#else
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b31a:	f06f 0314 	mvn.w	r3, #20
#endif // #ifdef EI_HAS_TAO_YOLOV4
}
 800b31e:	4618      	mov	r0, r3
 800b320:	371c      	adds	r7, #28
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <_Z39fill_result_struct_quantized_tao_yolov4IhE16EI_IMPULSE_ERRORPK10ei_impulseP19ei_impulse_result_tPT_ffjb>:
__attribute__((unused)) static EI_IMPULSE_ERROR fill_result_struct_quantized_tao_yolov4(const ei_impulse_t *impulse,
 800b32a:	b480      	push	{r7}
 800b32c:	b087      	sub	sp, #28
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6178      	str	r0, [r7, #20]
 800b332:	6139      	str	r1, [r7, #16]
 800b334:	60fa      	str	r2, [r7, #12]
 800b336:	ed87 0a02 	vstr	s0, [r7, #8]
 800b33a:	edc7 0a01 	vstr	s1, [r7, #4]
 800b33e:	603b      	str	r3, [r7, #0]
    return EI_IMPULSE_LAST_LAYER_NOT_AVAILABLE;
 800b340:	f06f 0314 	mvn.w	r3, #20
}
 800b344:	4618      	mov	r0, r3
 800b346:	371c      	adds	r7, #28
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZNKSt10unique_ptrIvPFvPvEE3getEv>:
      get() const noexcept
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4618      	mov	r0, r3
 800b35c:	f001 fa0d 	bl	800c77a <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b360:	4603      	mov	r3, r0
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4618      	mov	r0, r3
 800b376:	f001 fa0e 	bl	800c796 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff ffeb 	bl	800b36a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff ffeb 	bl	800b384 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1Ev>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EEC1IS3_vEEv>:
	constexpr unique_ptr() noexcept
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	: _M_t()
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff ffe8 	bl	800b39e <_ZNSt15__uniq_ptr_dataIN2ei9ei_matrixESt14default_deleteIS1_ELb1ELb1EECI1St15__uniq_ptr_implIS1_S3_EEv>
	{ }
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEaSEOS4_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800b3e2:	6838      	ldr	r0, [r7, #0]
 800b3e4:	f001 fa07 	bl	800c7f6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f001 f9e2 	bl	800c7b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800b3f2:	6838      	ldr	r0, [r7, #0]
 800b3f4:	f001 fa14 	bl	800c820 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 fa1d 	bl	800c83a <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 fa0d 	bl	800c820 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
	return *this;
 800b406:	687b      	ldr	r3, [r7, #4]
      }
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE11_M_data_ptrIfEEPT_S6_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEEC1ERKS2_>:
      _Bvector_base(const allocator_type& __a)
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800b432:	687c      	ldr	r4, [r7, #4]
 800b434:	f107 030c 	add.w	r3, r7, #12
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 fa08 	bl	800c850 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>
 800b440:	f107 030c 	add.w	r3, r7, #12
 800b444:	4619      	mov	r1, r3
 800b446:	4620      	mov	r0, r4
 800b448:	f001 fa0e 	bl	800c868 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	bd90      	pop	{r4, r7, pc}

0800b456 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEED1Ev>:
      ~_Bvector_base()
 800b456:	b580      	push	{r7, lr}
 800b458:	b082      	sub	sp, #8
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
      { this->_M_deallocate(); }
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fa10 	bl	800c884 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj>:
	return std::copy(const_iterator(__last._M_p, 0), __last,
			 iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
 800b46e:	b590      	push	{r4, r7, lr}
 800b470:	b089      	sub	sp, #36	; 0x24
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
      {
	if (__n)
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d02f      	beq.n	800b4de <_ZNSt6vectorIbN2ei7EiAllocIbEEE13_M_initializeEj+0x70>
	  {
	    _Bit_pointer __q = this->_M_allocate(__n);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	68b9      	ldr	r1, [r7, #8]
 800b482:	4618      	mov	r0, r3
 800b484:	f001 fa23 	bl	800c8ce <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>
 800b488:	61f8      	str	r0, [r7, #28]
	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
 800b48a:	68b8      	ldr	r0, [r7, #8]
 800b48c:	f001 fa32 	bl	800c8f4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800b490:	4603      	mov	r3, r0
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	441a      	add	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	611a      	str	r2, [r3, #16]
	    iterator __start = iterator(std::__addressof(*__q), 0);
 800b49c:	69f8      	ldr	r0, [r7, #28]
 800b49e:	f001 fa36 	bl	800c90e <_ZSt11__addressofImEPT_RS0_>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7f6 f80a 	bl	80014c4 <_ZNSt13_Bit_iteratorC1EPmj>
	    this->_M_impl._M_start = __start;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f107 0314 	add.w	r3, r7, #20
 800b4b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4bc:	e882 0003 	stmia.w	r2, {r0, r1}
	    this->_M_impl._M_finish = __start + difference_type(__n);
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	68fc      	ldr	r4, [r7, #12]
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	f107 0114 	add.w	r1, r7, #20
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f6 f846 	bl	800155c <_ZStplRKSt13_Bit_iteratori>
 800b4d0:	f104 0308 	add.w	r3, r4, #8
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4da:	e883 0003 	stmia.w	r3, {r0, r1}
	  }
      }
 800b4de:	bf00      	nop
 800b4e0:	3724      	adds	r7, #36	; 0x24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd90      	pop	{r4, r7, pc}

0800b4e6 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb>:

      void
      _M_initialize_value(bool __x)
 800b4e6:	b590      	push	{r4, r7, lr}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d012      	beq.n	800b524 <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x3e>
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b4fe:	78fb      	ldrb	r3, [r7, #3]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x24>
 800b504:	f04f 34ff 	mov.w	r4, #4294967295
 800b508:	e000      	b.n	800b50c <_ZNSt6vectorIbN2ei7EiAllocIbEEE19_M_initialize_valueEb+0x26>
 800b50a:	2400      	movs	r4, #0
			   (this->_M_impl._M_end_addr() - __p)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fa08 	bl	800c924 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800b514:	4602      	mov	r2, r0
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	1ad3      	subs	r3, r2, r3
	  __builtin_memset(__p, __x ? ~0 : 0,
 800b51a:	461a      	mov	r2, r3
 800b51c:	4621      	mov	r1, r4
 800b51e:	68f8      	ldr	r0, [r7, #12]
 800b520:	f013 f950 	bl	801e7c4 <memset>
			   * sizeof(_Bit_type));
      }
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd90      	pop	{r4, r7, pc}

0800b52c <_ZNSt6vectorIbN2ei7EiAllocIbEEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
      { return iterator(this->_M_impl._M_start._M_p, 0); }
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2200      	movs	r2, #0
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7f5 ffc0 	bl	80014c4 <_ZNSt13_Bit_iteratorC1EPmj>
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	4611      	mov	r1, r2
 800b55c:	4618      	mov	r0, r3
 800b55e:	f001 fa02 	bl	800c966 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f103 0208 	add.w	r2, r3, #8
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	3308      	adds	r3, #8
 800b56c:	4619      	mov	r1, r3
 800b56e:	4610      	mov	r0, r2
 800b570:	f001 fa2b 	bl	800c9ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f103 020c 	add.w	r2, r3, #12
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f001 fa4c 	bl	800ca1e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_ZSt4moveIRPFvPvEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <_ZNSt15__uniq_ptr_implIvPFvPvEEC1IS2_EES0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800b5a4:	b590      	push	{r4, r7, lr}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800b5b0:	68fc      	ldr	r4, [r7, #12]
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fa52 	bl	800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	f107 0308 	add.w	r3, r7, #8
 800b5be:	4619      	mov	r1, r3
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f001 fa56 	bl	800ca72 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}

0800b5d0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 fa62 	bl	800caa4 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZNSt10unique_ptrIvPFvPvEE11get_deleterEv>:
      get_deleter() noexcept
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 fa62 	bl	800cabe <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_>:
      void reset(pointer __p) noexcept
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ffde 	bl	800b5d0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b614:	4603      	mov	r3, r0
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7ff ffd8 	bl	800b5d0 <_ZNSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>
 800b620:	4602      	mov	r2, r0
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <_ZNSt15__uniq_ptr_implIvPFvPvEE5resetES0_+0x36>
	  _M_deleter()(__old_p);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f001 fa46 	bl	800cabe <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>
 800b632:	4603      	mov	r3, r0
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	4798      	blx	r3
      }
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b642:	b480      	push	{r7}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b682:	f107 030c 	add.w	r3, r7, #12
 800b686:	4618      	mov	r0, r3
 800b688:	f001 fa26 	bl	800cad8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800b68c:	4602      	mov	r2, r0
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4293      	cmp	r3, r2
 800b692:	bf8c      	ite	hi
 800b694:	2301      	movhi	r3, #1
 800b696:	2300      	movls	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d002      	beq.n	800b6a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b69e:	4804      	ldr	r0, [pc, #16]	; (800b6b0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b6a0:	f00e fd23 	bl	801a0ea <_ZSt20__throw_length_errorPKc>
	return __n;
 800b6a4:	687b      	ldr	r3, [r7, #4]
      }
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	08021978 	.word	0x08021978

0800b6b4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fa21 	bl	800cb0c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f001 fa2b 	bl	800cb28 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3710      	adds	r7, #16
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZNSt6vectorIfN2ei7EiAllocIfEEE21_M_default_initializeEj>:
      _M_default_initialize(size_type __n)
 800b6dc:	b590      	push	{r4, r7, lr}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681c      	ldr	r4, [r3, #0]
					   _M_get_Tp_allocator());
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f80d 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800b6f2:	4603      	mov	r3, r0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f001 fa30 	bl	800cb5e <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800b6fe:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	605a      	str	r2, [r3, #4]
      }
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd90      	pop	{r4, r7, pc}

0800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>:
   * destroy() even if _Tp has a trivial destructor.
   */

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]
	     _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 800b72e:	e00a      	b.n	800b746 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0x24>
#if __cplusplus < 201103L
	__alloc.destroy(std::__addressof(*__first));
#else
	allocator_traits<_Allocator>::destroy(__alloc,
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f001 fa33 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800b736:	4603      	mov	r3, r0
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fa39 	bl	800cbb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3304      	adds	r3, #4
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d1f0      	bne.n	800b730 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_+0xe>
					      std::__addressof(*__first));
#endif
    }
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	if (__p)
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d005      	beq.n	800b776 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f001 fa2c 	bl	800cbce <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>
      }
 800b776:	bf00      	nop
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b77e:	b480      	push	{r7}
 800b780:	b083      	sub	sp, #12
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b7b4:	b5b0      	push	{r4, r5, r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b7c0:	f107 0208 	add.w	r2, r7, #8
 800b7c4:	f107 030c 	add.w	r3, r7, #12
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fb26 	bl	8009e1c <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d017      	beq.n	800b806 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800b7d6:	f107 020c 	add.w	r2, r7, #12
 800b7da:	f107 0308 	add.w	r3, r7, #8
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f001 fa28 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f5 fd1c 	bl	8001226 <_ZSt4__lgi>
 800b7ee:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b7f0:	005a      	lsls	r2, r3, #1
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	68b9      	ldr	r1, [r7, #8]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f001 fa32 	bl	800cc60 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f001 fa64 	bl	800ccce <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800b806:	bf00      	nop
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bdb0      	pop	{r4, r5, r7, pc}

0800b80e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800b80e:	b580      	push	{r7, lr}
 800b810:	ed2d 8b02 	vpush	{d8}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	60f8      	str	r0, [r7, #12]
 800b81a:	60b9      	str	r1, [r7, #8]
 800b81c:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800b81e:	f107 0308 	add.w	r3, r7, #8
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fbd1 	bl	8009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b828:	4603      	mov	r3, r0
 800b82a:	ed93 8a00 	vldr	s16, [r3]
 800b82e:	1d3b      	adds	r3, r7, #4
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe fbca 	bl	8009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b836:	4603      	mov	r3, r0
 800b838:	edd3 7a00 	vldr	s15, [r3]
 800b83c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b844:	bf4c      	ite	mi
 800b846:	2301      	movmi	r3, #1
 800b848:	2300      	movpl	r3, #0
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	4618      	mov	r0, r3
 800b84e:	3710      	adds	r7, #16
 800b850:	46bd      	mov	sp, r7
 800b852:	ecbd 8b02 	vpop	{d8}
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return __first;
 800b864:	f107 0208 	add.w	r2, r7, #8
 800b868:	f107 030c 	add.w	r3, r7, #12
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fa65 	bl	800cd3e <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	e01d      	b.n	800b8ba <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b882:	e00a      	b.n	800b89a <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__result, __first))
 800b884:	1d3b      	adds	r3, r7, #4
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	6979      	ldr	r1, [r7, #20]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff ffbf 	bl	800b80e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800b89a:	f107 030c 	add.w	r3, r7, #12
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fe fb83 	bl	8009faa <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7fe fb64 	bl	8009f7a <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e5      	bne.n	800b884 <_ZSt13__max_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800b8b8:	697b      	ldr	r3, [r7, #20]
    }
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
	...

0800b8c4 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800b8ce:	f107 030c 	add.w	r3, r7, #12
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f001 fa4b 	bl	800cd6e <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bf8c      	ite	hi
 800b8e0:	2301      	movhi	r3, #1
 800b8e2:	2300      	movls	r3, #0
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x2c>
	  __throw_length_error(
 800b8ea:	4804      	ldr	r0, [pc, #16]	; (800b8fc <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_+0x38>)
 800b8ec:	f00e fbfd 	bl	801a0ea <_ZSt20__throw_length_errorPKc>
	return __n;
 800b8f0:	687b      	ldr	r3, [r7, #4]
      }
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	08021978 	.word	0x08021978

0800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	60b9      	str	r1, [r7, #8]
 800b920:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800b922:	e00a      	b.n	800b93a <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f001 fa4a 	bl	800cdbe <_ZSt11__addressofIiEPT_RS0_>
 800b92a:	4603      	mov	r3, r0
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f001 fa50 	bl	800cdd4 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>
      for (; __first != __last; ++__first)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3304      	adds	r3, #4
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d1f0      	bne.n	800b924 <_ZSt8_DestroyIPiN2ei7EiAllocIiEEEvT_S4_RT0_+0xe>
    }
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij>:
      _M_deallocate(pointer __p, size_t __n)
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
	if (__p)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d005      	beq.n	800b96a <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE13_M_deallocateEPij+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	4618      	mov	r0, r3
 800b966:	f001 fa43 	bl	800cdf0 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>
      }
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <_ZN9__gnu_cxx14__alloc_traitsIN2ei7EiAllocIfEEfE17_S_select_on_copyERKS3_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b972:	b590      	push	{r4, r7, lr}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f001 fa47 	bl	800ce0e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>
 800b980:	bf00      	nop
 800b982:	4620      	mov	r0, r4
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	bd90      	pop	{r4, r7, pc}

0800b98a <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_>:
  //  any of the POD optimizations.

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b9a0:	b590      	push	{r4, r7, lr}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __first != __last; ++__first, (void)++__cur)
 800b9b2:	e016      	b.n	800b9e2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800b9b4:	6978      	ldr	r0, [r7, #20]
 800b9b6:	f001 f8f1 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	f107 030c 	add.w	r3, r7, #12
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fb02 	bl	8009fca <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	6838      	ldr	r0, [r7, #0]
 800b9ce:	f000 fb70 	bl	800c0b2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800b9d2:	f107 030c 	add.w	r3, r7, #12
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fae7 	bl	8009faa <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	f107 0208 	add.w	r2, r7, #8
 800b9e6:	f107 030c 	add.w	r3, r7, #12
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fac4 	bl	8009f7a <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1dd      	bne.n	800b9b4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEEPfS7_ET0_T_SC_SB_RT1_+0x14>
	  return __cur;
 800b9f8:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__result, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	371c      	adds	r7, #28
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd90      	pop	{r4, r7, pc}

0800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba02:	b480      	push	{r7}
 800ba04:	b083      	sub	sp, #12
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800ba2e:	b480      	push	{r7}
 800ba30:	b083      	sub	sp, #12
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	605a      	str	r2, [r3, #4]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	609a      	str	r2, [r3, #8]
	{ }
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	607a      	str	r2, [r7, #4]
	if (__p)
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d005      	beq.n	800ba74 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 f9da 	bl	800ce28 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>
      }
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800ba9e:	e00a      	b.n	800bab6 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0x24>
	allocator_traits<_Allocator>::destroy(__alloc,
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f001 f9d0 	bl	800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800baa6:	4603      	mov	r3, r0
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 f9d6 	bl	800ce5c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
      for (; __first != __last; ++__first)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3308      	adds	r3, #8
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	d1f0      	bne.n	800baa0 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_+0xe>
    }
 800babe:	bf00      	nop
 800bac0:	bf00      	nop
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f001 f9cf 	bl	800ce78 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bada:	4603      	mov	r3, r0
 800badc:	461a      	mov	r2, r3
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f001 f9d4 	bl	800ce8e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>:
      _S_use_relocate()
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f805 	bl	800bb04 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800bafa:	4603      	mov	r3, r0
      }
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800bb0c:	2301      	movs	r3, #1
      }
 800bb0e:	4618      	mov	r0, r3
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800bb1c:	b5b0      	push	{r4, r5, r7, lr}
 800bb1e:	b08c      	sub	sp, #48	; 0x30
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800bb28:	4a59      	ldr	r2, [pc, #356]	; (800bc90 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x174>)
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	f001 f9c7 	bl	800cec0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>
 800bb32:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7fe fb96 	bl	800a272 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE5beginEv>
 800bb46:	4603      	mov	r3, r0
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	f107 0214 	add.w	r2, r7, #20
 800bb4e:	f107 0308 	add.w	r3, r7, #8
 800bb52:	4611      	mov	r1, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 f9fa 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 fa08 	bl	800cf78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>
 800bb68:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800bb6e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800bb74:	69ba      	ldr	r2, [r7, #24]
 800bb76:	18d5      	adds	r5, r2, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f001 f97d 	bl	800ce78 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	4629      	mov	r1, r5
 800bb84:	4620      	mov	r0, r4
 800bb86:	f7ff ff9f 	bl	800bac8 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JRKS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOSA_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800bb8e:	f7ff ffae 	bl	800baee <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d027      	beq.n	800bbe8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bb98:	f107 0308 	add.w	r3, r7, #8
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f001 fa13 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bba2:	4603      	mov	r3, r0
 800bba4:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7ff ff67 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbae:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb6:	f001 f9f3 	bl	800cfa0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bbba:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	3308      	adds	r3, #8
 800bbc0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 f9fe 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff ff52 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbd8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bbda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbdc:	6a39      	ldr	r1, [r7, #32]
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f001 f9de 	bl	800cfa0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>
 800bbe4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bbe6:	e026      	b.n	800bc36 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800bbe8:	f107 0308 	add.w	r3, r7, #8
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 f9eb 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7ff ff3f 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bbfe:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	4621      	mov	r1, r4
 800bc04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc06:	f001 f9ea 	bl	800cfde <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bc0a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	3308      	adds	r3, #8
 800bc10:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 f9d6 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff ff2a 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bc28:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800bc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc2c:	6a39      	ldr	r1, [r7, #32]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f001 f9d5 	bl	800cfde <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800bc34:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800bc36:	f7ff ff5a 	bl	800baee <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE15_S_use_relocateEv>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f083 0301 	eor.w	r3, r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff ff17 	bl	800ba7c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	461a      	mov	r2, r3
 800bc52:	6a39      	ldr	r1, [r7, #32]
 800bc54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc56:	f7ff ff1c 	bl	800ba92 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEEvT_S7_RT0_>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800bc5a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689a      	ldr	r2, [r3, #8]
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800bc66:	461a      	mov	r2, r3
 800bc68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc6a:	f7ff fef4 	bl	800ba56 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc78:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	00db      	lsls	r3, r3, #3
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	609a      	str	r2, [r3, #8]
    }
 800bc86:	bf00      	nop
 800bc88:	3730      	adds	r7, #48	; 0x30
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	080219ac 	.word	0x080219ac

0800bc94 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 800bcb4:	b5b0      	push	{r4, r5, r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800bcbc:	1d3b      	adds	r3, r7, #4
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f001 f9a6 	bl	800d010 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 800bcc4:	f107 030c 	add.w	r3, r7, #12
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f9ab 	bl	800d026 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 800bcd0:	bf00      	nop
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bdb0      	pop	{r4, r5, r7, pc}

0800bcda <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800bce6:	f107 0208 	add.w	r2, r7, #8
 800bcea:	f107 030c 	add.w	r3, r7, #12
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 f9a6 	bl	800d042 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d017      	beq.n	800bd2c <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x52>
				std::__lg(__last - __first) * 2,
 800bcfc:	f107 020c 	add.w	r2, r7, #12
 800bd00:	f107 0308 	add.w	r3, r7, #8
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 f921 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7f5 fa89 	bl	8001226 <_ZSt4__lgi>
 800bd14:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800bd16:	005a      	lsls	r2, r3, #1
 800bd18:	793b      	ldrb	r3, [r7, #4]
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f001 f9a8 	bl	800d072 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800bd22:	793a      	ldrb	r2, [r7, #4]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f001 f9da 	bl	800d0e0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800bd40:	f107 0208 	add.w	r2, r7, #8
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fff7 	bl	800cd3e <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x26>
	return __first;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	e01d      	b.n	800bd96 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x62>
      _ForwardIterator __result = __first;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bd5e:	e00a      	b.n	800bd76 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	if (__comp(__first, __result))
 800bd60:	1d3b      	adds	r3, r7, #4
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff fd51 	bl	800b80e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEESB_EEbT_T0_>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x42>
	  __result = __first;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800bd76:	f107 030c 	add.w	r3, r7, #12
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe f915 	bl	8009faa <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800bd80:	4602      	mov	r2, r0
 800bd82:	f107 0308 	add.w	r3, r7, #8
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f7fe f8f6 	bl	8009f7a <_ZN9__gnu_cxxneIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e5      	bne.n	800bd60 <_ZSt13__min_elementIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SC_SC_T0_+0x2c>
      return __result;
 800bd94:	697b      	ldr	r3, [r7, #20]
    }
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800bda0:	b5b0      	push	{r4, r5, r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 80af 	beq.w	800bf10 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
	{
	  const size_type __size = size();
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7fd fef3 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800bdb8:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	109b      	asrs	r3, r3, #2
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800bdc6:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fa6f 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d808      	bhi.n	800bde8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa68 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800bddc:	4602      	mov	r2, r0
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	1ad3      	subs	r3, r2, r3
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d901      	bls.n	800bdec <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4c>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
 800bdec:	2300      	movs	r3, #0
 800bdee:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d30f      	bcc.n	800be18 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x78>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff fc84 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be04:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800be06:	461a      	mov	r2, r3
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 fea7 	bl	800cb5e <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
 800be10:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800be16:	e07b      	b.n	800bf10 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x170>
		_M_check_len(__n, "vector::_M_default_append");
 800be18:	4a3f      	ldr	r2, [pc, #252]	; (800bf18 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x178>)
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f997 	bl	800d150 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800be22:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6979      	ldr	r1, [r7, #20]
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 fa60 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800be2e:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800be30:	f7fe ff85 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d01c      	beq.n	800be74 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0xd4>
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff fc61 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be4a:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be4c:	461a      	mov	r2, r3
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	4620      	mov	r0, r4
 800be52:	f000 fe84 	bl	800cb5e <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681c      	ldr	r4, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fc53 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be66:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4629      	mov	r1, r5
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 fa52 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800be72:	e030      	b.n	800bed6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x136>
		  pointer __destroy_from = pointer();
 800be74:	2300      	movs	r3, #0
 800be76:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fc42 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800be88:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800be8a:	461a      	mov	r2, r3
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 fe65 	bl	800cb5e <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>
		      __destroy_from = __new_start + __size;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4413      	add	r3, r2
 800be9c:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681c      	ldr	r4, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fc2f 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800beae:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	4629      	mov	r1, r5
 800beb4:	4620      	mov	r0, r4
 800beb6:	f001 f992 	bl	800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681c      	ldr	r4, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fc21 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800beca:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800becc:	461a      	mov	r2, r3
 800bece:	4629      	mov	r1, r5
 800bed0:	4620      	mov	r0, r4
 800bed2:	f7ff fc26 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	      _M_deallocate(this->_M_impl._M_start,
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800bee8:	461a      	mov	r2, r3
 800beea:	f7ff fc35 	bl	800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __new_start;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	441a      	add	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	609a      	str	r2, [r3, #8]
    }
 800bf10:	bf00      	nop
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bdb0      	pop	{r4, r5, r7, pc}
 800bf18:	080219c8 	.word	0x080219c8

0800bf1c <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800bf1c:	b590      	push	{r4, r7, lr}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	109b      	asrs	r3, r3, #2
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00e      	beq.n	800bf56 <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fbe4 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800bf44:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800bf46:	461a      	mov	r2, r3
 800bf48:	4621      	mov	r1, r4
 800bf4a:	6838      	ldr	r0, [r7, #0]
 800bf4c:	f7ff fbe9 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
	    this->_M_impl._M_finish = __pos;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	605a      	str	r2, [r3, #4]
      }
 800bf56:	bf00      	nop
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd90      	pop	{r4, r7, pc}

0800bf5e <_ZNKSt5arrayIfLj6EEixEj>:
      operator[](size_type __n) const noexcept
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 f94f 	bl	800d210 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>
 800bf72:	4603      	mov	r3, r0
      }
 800bf74:	4618      	mov	r0, r3
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <_ZNKSt5arrayIfLj10EEixEj>:
      operator[](size_type __n) const noexcept
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 f94f 	bl	800d22e <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>
 800bf90:	4603      	mov	r3, r0
      }
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <_ZNKSt5arrayIfLj14EEixEj>:
      operator[](size_type __n) const noexcept
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f001 f94f 	bl	800d24c <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>
 800bfae:	4603      	mov	r3, r0
      }
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <_ZNKSt5arrayIfLj18EEixEj>:
      operator[](size_type __n) const noexcept
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 f94f 	bl	800d26a <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>
 800bfcc:	4603      	mov	r3, r0
      }
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <_ZNKSt5arrayIfLj4EEixEj>:
      operator[](size_type __n) const noexcept
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f001 f94f 	bl	800d288 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>
 800bfea:	4603      	mov	r3, r0
      }
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZNKSt5arrayIfLj8EEixEj>:
      operator[](size_type __n) const noexcept
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	4618      	mov	r0, r3
 800c004:	f001 f94f 	bl	800d2a6 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>
 800c008:	4603      	mov	r3, r0
      }
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <_ZNKSt5arrayIfLj12EEixEj>:
      operator[](size_type __n) const noexcept
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f001 f94f 	bl	800d2c4 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>
 800c026:	4603      	mov	r3, r0
      }
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZNKSt5arrayIfLj16EEixEj>:
      operator[](size_type __n) const noexcept
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 f94f 	bl	800d2e2 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>
 800c044:	4603      	mov	r3, r0
      }
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <_ZNKSt5arrayIfLj20EEixEj>:
      operator[](size_type __n) const noexcept
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 f94f 	bl	800d300 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>
 800c062:	4603      	mov	r3, r0
      }
 800c064:	4618      	mov	r0, r3
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <_ZNKSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) const noexcept
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 f94f 	bl	800d31e <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 800c080:	4603      	mov	r3, r0
      }
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	605a      	str	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	609a      	str	r2, [r3, #8]
	{ }
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr

0800c0b2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 f93c 	bl	800d33c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f001 f941 	bl	800d352 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c0d8:	b5b0      	push	{r4, r5, r7, lr}
 800c0da:	b08c      	sub	sp, #48	; 0x30
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c0e4:	4a59      	ldr	r2, [pc, #356]	; (800c24c <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f001 f831 	bl	800d150 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800c0ee:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7fd fe6c 	bl	8009dda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800c102:	4603      	mov	r3, r0
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	f107 0214 	add.w	r2, r7, #20
 800c10a:	f107 0308 	add.w	r3, r7, #8
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f000 fd90 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c116:	4603      	mov	r3, r0
 800c118:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 f8e5 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c124:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800c12a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	18d5      	adds	r5, r2, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 f901 	bl	800d33c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800c13a:	4603      	mov	r3, r0
 800c13c:	461a      	mov	r2, r3
 800c13e:	4629      	mov	r1, r5
 800c140:	4620      	mov	r0, r4
 800c142:	f7ff ffb6 	bl	800c0b2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  __new_finish = pointer();
 800c146:	2300      	movs	r3, #0
 800c148:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800c14a:	f7fe fdf8 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d027      	beq.n	800c1a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c154:	f107 0308 	add.w	r3, r7, #8
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fa82 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c15e:	4603      	mov	r3, r0
 800c160:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff fad1 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c16a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	4621      	mov	r1, r4
 800c170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c172:	f000 f8d0 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c176:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	3304      	adds	r3, #4
 800c17c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c17e:	f107 0308 	add.w	r3, r7, #8
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fa6d 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c188:	4603      	mov	r3, r0
 800c18a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	4618      	mov	r0, r3
 800c190:	f7ff fabc 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c194:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c198:	6a39      	ldr	r1, [r7, #32]
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 f8bb 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800c1a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c1a2:	e026      	b.n	800c1f2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800c1a4:	f107 0308 	add.w	r3, r7, #8
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7ff fa5a 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff faa9 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c1ba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4621      	mov	r1, r4
 800c1c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1c2:	f001 f80c 	bl	800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800c1ce:	f107 0308 	add.w	r3, r7, #8
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff fa45 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fa94 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c1e4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1e8:	6a39      	ldr	r1, [r7, #32]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fff7 	bl	800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800c1f0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800c1f2:	f7fe fda4 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f083 0301 	eor.w	r3, r3, #1
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4618      	mov	r0, r3
 800c206:	f7ff fa81 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	6a39      	ldr	r1, [r7, #32]
 800c210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c212:	f7ff fa86 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800c216:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800c222:	461a      	mov	r2, r3
 800c224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c226:	f7ff fa97 	bl	800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c234:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	441a      	add	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	609a      	str	r2, [r3, #8]
    }
 800c242:	bf00      	nop
 800c244:	3730      	adds	r7, #48	; 0x30
 800c246:	46bd      	mov	sp, r7
 800c248:	bdb0      	pop	{r4, r5, r7, pc}
 800c24a:	bf00      	nop
 800c24c:	080219ac 	.word	0x080219ac

0800c250 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 800c250:	b5b0      	push	{r4, r5, r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	429a      	cmp	r2, r3
 800c264:	d011      	beq.n	800c28a <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c266:	687c      	ldr	r4, [r7, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685d      	ldr	r5, [r3, #4]
 800c26c:	6838      	ldr	r0, [r7, #0]
 800c26e:	f001 f886 	bl	800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	4629      	mov	r1, r5
 800c278:	4620      	mov	r0, r4
 800c27a:	f001 f88b 	bl	800d394 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	    ++this->_M_impl._M_finish;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	605a      	str	r2, [r3, #4]
      }
 800c288:	e00c      	b.n	800c2a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7fd fdb5 	bl	8009dfa <_ZNSt6vectorIfN2ei7EiAllocIfEEE3endEv>
 800c290:	4604      	mov	r4, r0
 800c292:	6838      	ldr	r0, [r7, #0]
 800c294:	f001 f873 	bl	800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800c298:	4603      	mov	r3, r0
 800c29a:	461a      	mov	r2, r3
 800c29c:	4621      	mov	r1, r4
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 f88c 	bl	800d3bc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>
      }
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bdb0      	pop	{r4, r5, r7, pc}

0800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7ff fb67 	bl	800b98a <_ZNKSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 fc0a 	bl	800cad8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	109b      	asrs	r3, r3, #2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x1e>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f001 f916 	bl	800d534 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>
 800c308:	4603      	mov	r3, r0
 800c30a:	e000      	b.n	800c30e <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj+0x20>
 800c30c:	2300      	movs	r3, #0
      }
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c316:	b590      	push	{r4, r7, lr}
 800c318:	b087      	sub	sp, #28
 800c31a:	af02      	add	r7, sp, #8
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	60b9      	str	r1, [r7, #8]
 800c320:	607a      	str	r2, [r7, #4]
 800c322:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c324:	f88d 4000 	strb.w	r4, [sp]
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f001 f90e 	bl	800d550 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>
 800c334:	4603      	mov	r3, r0
      }
 800c336:	4618      	mov	r0, r3
 800c338:	3714      	adds	r7, #20
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd90      	pop	{r4, r7, pc}

0800c33e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800c346:	f107 030c 	add.w	r3, r7, #12
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f001 f911 	bl	800d574 <_ZNSt13move_iteratorIPfEC1ES0_>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_ZNSt6vectorIfN2ei7EiAllocIfEEE20_M_allocate_and_copyISt13move_iteratorIPfEEES6_jT_S8_>:
	_M_allocate_and_copy(size_type __n,
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	68b9      	ldr	r1, [r7, #8]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff ffbd 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c374:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff f9c7 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c37e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f001 f907 	bl	800d598 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
	      return __result;
 800c38a:	697b      	ldr	r3, [r7, #20]
	}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fbb2 	bl	800cb0c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c3b2:	b480      	push	{r7}
 800c3b4:	b083      	sub	sp, #12
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c3ba:	bf00      	nop
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE19_M_range_initializeIPKfEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	68b8      	ldr	r0, [r7, #8]
 800c3da:	f001 f90e 	bl	800d5fa <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c3e2:	68fc      	ldr	r4, [r7, #12]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff f990 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6978      	ldr	r0, [r7, #20]
 800c3f2:	f7ff f941 	bl	800b678 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_S_check_init_lenEjRKS2_>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f7ff ff77 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800c400:	4602      	mov	r2, r0
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	441a      	add	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff f976 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800c420:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c422:	4622      	mov	r2, r4
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	68b8      	ldr	r0, [r7, #8]
 800c428:	f001 f8fb 	bl	800d622 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800c42c:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	605a      	str	r2, [r3, #4]
	}
 800c432:	bf00      	nop
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	bd90      	pop	{r4, r7, pc}

0800c43a <_ZNKSt16initializer_listIiE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <_ZNKSt16initializer_listIiE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c452:	b590      	push	{r4, r7, lr}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ffed 	bl	800c43a <_ZNKSt16initializer_listIiE5beginEv>
 800c460:	4604      	mov	r4, r0
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 f8ff 	bl	800d666 <_ZNKSt16initializer_listIiE4sizeEv>
 800c468:	4603      	mov	r3, r0
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4423      	add	r3, r4
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	bd90      	pop	{r4, r7, pc}

0800c476 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEEC1ERKS2_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fc8c 	bl	800cda2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <_ZNSt6vectorIiN2ei7EiAllocIiEEE19_M_range_initializeIPKiEEvT_S7_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c494:	b590      	push	{r4, r7, lr}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c4a2:	6879      	ldr	r1, [r7, #4]
 800c4a4:	68b8      	ldr	r0, [r7, #8]
 800c4a6:	f001 f8ea 	bl	800d67e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c4ae:	68fc      	ldr	r4, [r7, #12]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fa24 	bl	800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6978      	ldr	r0, [r7, #20]
 800c4be:	f7ff fa01 	bl	800b8c4 <_ZNSt6vectorIiN2ei7EiAllocIiEEE17_S_check_init_lenEjRKS2_>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f001 f8ed 	bl	800d6a6 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	441a      	add	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff fa0a 	bl	800b900 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE19_M_get_Tp_allocatorEv>
 800c4ec:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	6879      	ldr	r1, [r7, #4]
 800c4f2:	68b8      	ldr	r0, [r7, #8]
 800c4f4:	f001 f8eb 	bl	800d6ce <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>
 800c4f8:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	605a      	str	r2, [r3, #4]
	}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	bd90      	pop	{r4, r7, pc}

0800c506 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiN2ei7EiAllocIiEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
	...

0800c554 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_>:
	function(_Functor&& __f)
 800c554:	b590      	push	{r4, r7, lr}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	461a      	mov	r2, r3
 800c562:	2300      	movs	r3, #0
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	6053      	str	r3, [r2, #4]
 800c568:	6093      	str	r3, [r2, #8]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fd10 	bl	800af92 <_ZNSt14_Function_baseC1Ev>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f001 f8d7 	bl	800d730 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00e      	beq.n	800c5a6 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x52>
	      _My_handler::_M_init_functor(_M_functor,
 800c588:	687c      	ldr	r4, [r7, #4]
 800c58a:	6838      	ldr	r0, [r7, #0]
 800c58c:	f7ff ffd6 	bl	800c53c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c590:	4603      	mov	r3, r0
 800c592:	4619      	mov	r1, r3
 800c594:	4620      	mov	r0, r4
 800c596:	f001 f8db 	bl	800d750 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a04      	ldr	r2, [pc, #16]	; (800c5b0 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x5c>)
 800c59e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a04      	ldr	r2, [pc, #16]	; (800c5b4 <_ZNSt8functionIFijjPfEEC1IPS1_vEEOT_+0x60>)
 800c5a4:	609a      	str	r2, [r3, #8]
	}
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd90      	pop	{r4, r7, pc}
 800c5b0:	0800d775 	.word	0x0800d775
 800c5b4:	0800d7b7 	.word	0x0800d7b7

0800c5b8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
	...

0800c5d0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_>:
	function(_Functor&& __f)
 800c5d0:	b590      	push	{r4, r7, lr}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	2300      	movs	r3, #0
 800c5e0:	6013      	str	r3, [r2, #0]
 800c5e2:	6053      	str	r3, [r2, #4]
 800c5e4:	6093      	str	r3, [r2, #8]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe fcd2 	bl	800af92 <_ZNSt14_Function_baseC1Ev>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800c5f4:	6838      	ldr	r0, [r7, #0]
 800c5f6:	f001 f8fd 	bl	800d7f4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00e      	beq.n	800c61e <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800c600:	687c      	ldr	r4, [r7, #4]
 800c602:	6838      	ldr	r0, [r7, #0]
 800c604:	f7ff ffd8 	bl	800c5b8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800c608:	4603      	mov	r3, r0
 800c60a:	4619      	mov	r1, r3
 800c60c:	4620      	mov	r0, r4
 800c60e:	f001 f8fc 	bl	800d80a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a04      	ldr	r2, [pc, #16]	; (800c628 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x58>)
 800c616:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a04      	ldr	r2, [pc, #16]	; (800c62c <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vEEOT_+0x5c>)
 800c61c:	609a      	str	r2, [r3, #8]
	}
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4618      	mov	r0, r3
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	bd90      	pop	{r4, r7, pc}
 800c628:	0800d82f 	.word	0x0800d82f
 800c62c:	0800d871 	.word	0x0800d871

0800c630 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4618      	mov	r0, r3
 800c63e:	f001 f936 	bl	800d8ae <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f808 	bl	800c658 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>
 800c648:	4602      	mov	r2, r0
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	6013      	str	r3, [r2, #0]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	f001 f930 	bl	800d8c8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c668:	4603      	mov	r3, r0
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EE11get_deleterEv>:

      /// Return a reference to the stored deleter.
      deleter_type&
      get_deleter() noexcept
 800c672:	b580      	push	{r7, lr}
 800c674:	b082      	sub	sp, #8
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	f001 f930 	bl	800d8e2 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>
 800c682:	4603      	mov	r3, r0
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_>:
	operator()(_Up* __ptr) const
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
	  delete [] __ptr;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <_ZNKSt14default_deleteIA_12ei_feature_tEclIS0_EENSt9enable_ifIXsrSt14is_convertibleIPA_T_PS1_E5valueEvE4typeEPS6_+0x16>
 800c69c:	6838      	ldr	r0, [r7, #0]
 800c69e:	f00d fd0d 	bl	801a0bc <_ZdaPv>
	}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <_ZNKSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f001 f921 	bl	800d8fc <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EEC1EPS1_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fe fe49 	bl	800b36a <_ZNSt5tupleIJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1ILb1ELb1EEEv>
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 f808 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 f90c 	bl	800d916 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EE11get_deleterEv>:
      get_deleter() noexcept
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 f884 	bl	800c820 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c718:	4603      	mov	r3, r0
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <_ZSt4moveIRPN2ei9ei_matrixEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c722:	b480      	push	{r7}
 800c724:	b083      	sub	sp, #12
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>:
      operator()(_Tp* __ptr) const
 800c738:	b590      	push	{r4, r7, lr}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c742:	683c      	ldr	r4, [r7, #0]
 800c744:	2c00      	cmp	r4, #0
 800c746:	d006      	beq.n	800c756 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_+0x1e>
 800c748:	4620      	mov	r0, r4
 800c74a:	f7f4 ff47 	bl	80015dc <_ZN2ei9ei_matrixD1Ev>
 800c74e:	2110      	movs	r1, #16
 800c750:	4620      	mov	r0, r4
 800c752:	f00d fcb1 	bl	801a0b8 <_ZdlPvj>
      }
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd90      	pop	{r4, r7, pc}

0800c75e <_ZNKSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4618      	mov	r0, r3
 800c76a:	f001 f8e1 	bl	800d930 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>
 800c76e:	4603      	mov	r3, r0
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <_ZNKSt15__uniq_ptr_implIvPFvPvEE6_M_ptrEv>:
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	f001 f8e0 	bl	800d94a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>
 800c78a:	4603      	mov	r3, r0
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEEC1Ev>:
      constexpr _Tuple_impl()
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 f8e0 	bl	800d964 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 f8e8 	bl	800d97c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff ff94 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff ff8e 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	6013      	str	r3, [r2, #0]
	if (__old_p)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d007      	beq.n	800c7ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x38>
	  _M_deleter()(__old_p);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f81e 	bl	800c820 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	68f9      	ldr	r1, [r7, #12]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7ff ffa5 	bl	800c738 <_ZNKSt14default_deleteIN2ei9ei_matrixEEclEPS1_>
      }
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE7releaseEv>:
      pointer release() noexcept
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff ff75 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c804:	4603      	mov	r3, r0
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff ff6f 	bl	800c6ee <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE6_M_ptrEv>
 800c810:	4603      	mov	r3, r0
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
	return __p;
 800c816:	68fb      	ldr	r3, [r7, #12]
      }
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 f8b4 	bl	800d998 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800c830:	4603      	mov	r3, r0
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <_ZSt7forwardISt14default_deleteIN2ei9ei_matrixEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <_ZN2ei7EiAllocImEC1IbEERKNS0_IT_EE>:
struct EiAlloc
{
    typedef T value_type;
    EiAlloc() = default;
    template <class U>
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	370c      	adds	r7, #12
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_implC1ERKNS1_ImEE>:
	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	: _Bit_alloc_type(__a)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	f001 f89b 	bl	800d9b0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
	{ }
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv>:
      _M_deallocate()
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
	if (_M_impl._M_start._M_p)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d018      	beq.n	800c8c6 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE13_M_deallocateEv+0x42>
	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f844 	bl	800c924 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>
 800c89c:	4602      	mov	r2, r0
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	109b      	asrs	r3, r3, #2
 800c8a6:	60fb      	str	r3, [r7, #12]
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c8a8:	6878      	ldr	r0, [r7, #4]
					  _M_impl._M_end_of_storage - __n,
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691a      	ldr	r2, [r3, #16]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	425b      	negs	r3, r3
	    _Bit_alloc_traits::deallocate(_M_impl,
 800c8b4:	4413      	add	r3, r2
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f000 ff2a 	bl	800d712 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>
	    _M_impl._M_reset();
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f001 f88a 	bl	800d9da <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>
      }
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c8ce:	b590      	push	{r4, r7, lr}
 800c8d0:	b083      	sub	sp, #12
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
 800c8d8:	687c      	ldr	r4, [r7, #4]
 800c8da:	6838      	ldr	r0, [r7, #0]
 800c8dc:	f000 f80a 	bl	800c8f4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f001 f88d 	bl	800da04 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd90      	pop	{r4, r7, pc}

0800c8f4 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE8_S_nwordEj>:
      _S_nword(size_t __n)
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	331f      	adds	r3, #31
 800c900:	095b      	lsrs	r3, r3, #5
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4618      	mov	r0, r3
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv>:
	_M_end_addr() const _GLIBCXX_NOEXCEPT
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
	  if (this->_M_end_of_storage)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d008      	beq.n	800c946 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x22>
	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	3b04      	subs	r3, #4
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff ffe7 	bl	800c90e <_ZSt11__addressofImEPT_RS0_>
 800c940:	4603      	mov	r3, r0
 800c942:	3304      	adds	r3, #4
 800c944:	e000      	b.n	800c948 <_ZNKSt13_Bvector_baseIN2ei7EiAllocIbEEE13_Bvector_impl11_M_end_addrEv+0x24>
	  return 0;
 800c946:	2300      	movs	r3, #0
	}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff ffed 	bl	800c950 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c976:	4602      	mov	r2, r0
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c980:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800c984:	6838      	ldr	r0, [r7, #0]
 800c986:	f7ff ffe3 	bl	800c950 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c98a:	4602      	mov	r2, r0
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c992:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800c996:	f107 0308 	add.w	r3, r7, #8
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff ffd8 	bl	800c950 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c9ac:	bf00      	nop
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ffed 	bl	800c9b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c9e0:	6838      	ldr	r0, [r7, #0]
 800c9e2:	f7ff ffe7 	bl	800c9b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c9ee:	f107 030c 	add.w	r3, r7, #12
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff ffde 	bl	800c9b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	601a      	str	r2, [r3, #0]
    }
 800ca00:	bf00      	nop
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f7ff ffed 	bl	800ca08 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ca34:	6838      	ldr	r0, [r7, #0]
 800ca36:	f7ff ffe7 	bl	800ca08 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ca42:	f107 030c 	add.w	r3, r7, #12
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff ffde 	bl	800ca08 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	601a      	str	r2, [r3, #0]
    }
 800ca54:	bf00      	nop
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <_ZNSt5tupleIJPvPFvS0_EEEC1IRS0_S2_Lb1EEEOT_OT0_>:
	: _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
	       _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
	constexpr
	tuple(_U1&& __a1, _U2&& __a2)
 800ca72:	b5b0      	push	{r4, r5, r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	607a      	str	r2, [r7, #4]
	noexcept(__nothrow_constructible<_U1, _U2>())
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800ca7e:	68fc      	ldr	r4, [r7, #12]
 800ca80:	68b8      	ldr	r0, [r7, #8]
 800ca82:	f000 ffcd 	bl	800da20 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca86:	4605      	mov	r5, r0
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff ffe7 	bl	800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	4629      	mov	r1, r5
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 ffce 	bl	800da36 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bdb0      	pop	{r4, r5, r7, pc}

0800caa4 <_ZSt3getILj0EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 ffdf 	bl	800da72 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800cab4:	4603      	mov	r3, r0
 800cab6:	4618      	mov	r0, r3
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <_ZNSt15__uniq_ptr_implIvPFvPvEE10_M_deleterEv>:
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b082      	sub	sp, #8
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 ffde 	bl	800da8a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 800cace:	4603      	mov	r3, r0
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cae0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cae4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 ffdc 	bl	800daa4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>
 800caec:	4603      	mov	r3, r0
 800caee:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800caf0:	f107 0208 	add.w	r2, r7, #8
 800caf4:	f107 030c 	add.w	r3, r7, #12
 800caf8:	4611      	mov	r1, r2
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fb f865 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800cb00:	4603      	mov	r3, r0
 800cb02:	681b      	ldr	r3, [r3, #0]
      }
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff fab6 	bl	800c08a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_Vector_impl_dataC1Ev>
	{ }
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	3708      	adds	r7, #8
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff fbda 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	441a      	add	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	609a      	str	r2, [r3, #8]
      }
 800cb56:	bf00      	nop
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_>:
  // __uninitialized_default_n_a
  // Fills [first, first + n) with value_types constructed by the allocator
  // alloc, with no arguments passed to the construct call.
  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
				_Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	617b      	str	r3, [r7, #20]
      __try
	{
	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
	  for (; __n > 0; --__n, (void) ++__cur)
 800cb6e:	e00d      	b.n	800cb8c <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x2e>
	    __traits::construct(__alloc, std::__addressof(*__cur));
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	f000 f813 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800cb76:	4603      	mov	r3, r0
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 ff9f 	bl	800dabe <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __n > 0; --__n, (void) ++__cur)
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	60bb      	str	r3, [r7, #8]
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	3304      	adds	r3, #4
 800cb8a:	617b      	str	r3, [r7, #20]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1ee      	bne.n	800cb70 <_ZSt27__uninitialized_default_n_aIPfjN2ei7EiAllocIfEEET_S4_T0_RT1_+0x12>
	  return __cur;
 800cb92:	697b      	ldr	r3, [r7, #20]
      __catch(...)
	{
	  std::_Destroy(__first, __cur, __alloc);
	  __throw_exception_again;
	}
    }
 800cb94:	4618      	mov	r0, r3
 800cb96:	3718      	adds	r7, #24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b082      	sub	sp, #8
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 ff89 	bl	800dad8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>
 800cbc6:	bf00      	nop
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10deallocateERS2_Pfj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 ff89 	bl	800daf6 <_ZN2ei7EiAllocIfE10deallocateEPfj>
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800cbf4:	1d3b      	adds	r3, r7, #4
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fd33 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>:
    __niter_wrap(_From __from, _To __res)
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff ffea 	bl	800cbec <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	109b      	asrs	r3, r3, #2
 800cc20:	461a      	mov	r2, r3
 800cc22:	1d3b      	adds	r3, r7, #4
 800cc24:	4611      	mov	r1, r2
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 ff72 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cc36:	b590      	push	{r4, r7, lr}
 800cc38:	b083      	sub	sp, #12
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
 800cc3e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7fe fd0e 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cc46:	4603      	mov	r3, r0
 800cc48:	681c      	ldr	r4, [r3, #0]
 800cc4a:	6838      	ldr	r0, [r7, #0]
 800cc4c:	f7fe fd09 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cc50:	4603      	mov	r3, r0
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	1ae3      	subs	r3, r4, r3
 800cc56:	109b      	asrs	r3, r3, #2
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd90      	pop	{r4, r7, pc}

0800cc60 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc62:	b087      	sub	sp, #28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
 800cc6c:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800cc6e:	e01b      	b.n	800cca8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800cc76:	4633      	mov	r3, r6
 800cc78:	68ba      	ldr	r2, [r7, #8]
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f000 ff5f 	bl	800db40 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
 800cc82:	e021      	b.n	800ccc8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x68>
	  --__depth_limit;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f000 ff6d 	bl	800db6e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>
 800cc94:	4603      	mov	r3, r0
 800cc96:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800cc98:	4623      	mov	r3, r4
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	68b9      	ldr	r1, [r7, #8]
 800cc9e:	6978      	ldr	r0, [r7, #20]
 800cca0:	f7ff ffde 	bl	800cc60 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_>
	  __last = __cut;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800cca8:	f107 020c 	add.w	r2, r7, #12
 800ccac:	f107 0308 	add.w	r3, r7, #8
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff ffbf 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b10      	cmp	r3, #16
 800ccbc:	bfcc      	ite	gt
 800ccbe:	2301      	movgt	r3, #1
 800ccc0:	2300      	movle	r3, #0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1d3      	bne.n	800cc70 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_+0x10>
    }
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccce <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800ccce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd0:	b085      	sub	sp, #20
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800ccda:	f107 020c 	add.w	r2, r7, #12
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	4611      	mov	r1, r2
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff ffa6 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b10      	cmp	r3, #16
 800ccee:	bfcc      	ite	gt
 800ccf0:	2301      	movgt	r3, #1
 800ccf2:	2300      	movle	r3, #0
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d018      	beq.n	800cd2c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800ccfa:	f107 030c 	add.w	r3, r7, #12
 800ccfe:	2110      	movs	r1, #16
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 ff05 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4632      	mov	r2, r6
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 ff6f 	bl	800dbf0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800cd12:	f107 030c 	add.w	r3, r7, #12
 800cd16:	2110      	movs	r1, #16
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 fef9 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	462a      	mov	r2, r5
 800cd22:	68b9      	ldr	r1, [r7, #8]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 ffc9 	bl	800dcbc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cd2a:	e004      	b.n	800cd36 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	68b9      	ldr	r1, [r7, #8]
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	f000 ff5d 	bl	800dbf0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>
    }
 800cd36:	bf00      	nop
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd3e <_ZN9__gnu_cxxeqIPKfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cd3e:	b590      	push	{r4, r7, lr}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7fe fd28 	bl	800b79e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	681c      	ldr	r4, [r3, #0]
 800cd52:	6838      	ldr	r0, [r7, #0]
 800cd54:	f7fe fd23 	bl	800b79e <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	429c      	cmp	r4, r3
 800cd5e:	bf0c      	ite	eq
 800cd60:	2301      	moveq	r3, #1
 800cd62:	2300      	movne	r3, #0
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd90      	pop	{r4, r7, pc}

0800cd6e <_ZNSt6vectorIiN2ei7EiAllocIiEEE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cd76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cd7a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 ffc2 	bl	800dd06 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>
 800cd82:	4603      	mov	r3, r0
 800cd84:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cd86:	f107 0208 	add.w	r2, r7, #8
 800cd8a:	f107 030c 	add.w	r3, r7, #12
 800cd8e:	4611      	mov	r1, r2
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fa ff1a 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800cd96:	4603      	mov	r3, r0
 800cd98:	681b      	ldr	r3, [r3, #0]
      }
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b082      	sub	sp, #8
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 ffb6 	bl	800dd20 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>
	{ }
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <_ZSt11__addressofIiEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE7destroyIiEEvRS2_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800cdde:	2200      	movs	r2, #0
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 ffc3 	bl	800dd6e <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10deallocateERS2_Pij>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f000 ffc3 	bl	800dd8c <_ZN2ei7EiAllocIiE10deallocateEPij>
 800ce06:	bf00      	nop
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const _Alloc& __rhs)
 800ce0e:	b590      	push	{r4, r7, lr}
 800ce10:	b083      	sub	sp, #12
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
      { return _S_select(__rhs, 0); }
 800ce16:	2100      	movs	r1, #0
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 ffc4 	bl	800dda6 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>
 800ce1e:	bf00      	nop
 800ce20:	4620      	mov	r0, r4
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd90      	pop	{r4, r7, pc}

0800ce28 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10deallocateERS5_PS4_j>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 ffbe 	bl	800ddba <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>
 800ce3e:	bf00      	nop
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>:
	destroy(_Alloc& __a, _Tp* __p)
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
	{ _S_destroy(__a, __p, 0); }
 800ce66:	2200      	movs	r2, #0
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 ffb2 	bl	800ddd4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4618      	mov	r0, r3
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JRKS4_EEENSt9enable_ifIXsrSt6__and_IJSB_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISE_JSG_EEEEEE5valueEvE4typeERS5_PSE_DpOSF_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ce8e:	b590      	push	{r4, r7, lr}
 800ce90:	b085      	sub	sp, #20
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	60f8      	str	r0, [r7, #12]
 800ce96:	60b9      	str	r1, [r7, #8]
 800ce98:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff ffec 	bl	800ce78 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 800cea0:	4604      	mov	r4, r0
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	4619      	mov	r1, r3
 800cea6:	2008      	movs	r0, #8
 800cea8:	f7f4 f992 	bl	80011d0 <_ZnwjPv>
 800ceac:	4603      	mov	r3, r0
 800ceae:	4622      	mov	r2, r4
 800ceb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ceb4:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800ceb8:	bf00      	nop
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd90      	pop	{r4, r7, pc}

0800cec0 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cec0:	b590      	push	{r4, r7, lr}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 ff90 	bl	800ddf2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800ced2:	4604      	mov	r4, r0
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7fd f9ff 	bl	800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800ceda:	4603      	mov	r3, r0
 800cedc:	1ae2      	subs	r2, r4, r3
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	bf34      	ite	cc
 800cee4:	2301      	movcc	r3, #1
 800cee6:	2300      	movcs	r3, #0
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f00d f8fb 	bl	801a0ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7fd f9ef 	bl	800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cefa:	4604      	mov	r4, r0
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f7fd f9eb 	bl	800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cf02:	4603      	mov	r3, r0
 800cf04:	613b      	str	r3, [r7, #16]
 800cf06:	f107 0208 	add.w	r2, r7, #8
 800cf0a:	f107 0310 	add.w	r3, r7, #16
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7fe f966 	bl	800b1e2 <_ZSt3maxIjERKT_S2_S2_>
 800cf16:	4603      	mov	r3, r0
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4423      	add	r3, r4
 800cf1c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7fd f9da 	bl	800a2d8 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE4sizeEv>
 800cf24:	4602      	mov	r2, r0
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d306      	bcc.n	800cf3a <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x7a>
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f000 ff60 	bl	800ddf2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cf32:	4602      	mov	r2, r0
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d904      	bls.n	800cf44 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x84>
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f000 ff59 	bl	800ddf2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>
 800cf40:	4603      	mov	r3, r0
 800cf42:	e000      	b.n	800cf46 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE12_M_check_lenEjPKc+0x86>
 800cf44:	697b      	ldr	r3, [r7, #20]
      }
 800cf46:	4618      	mov	r0, r3
 800cf48:	371c      	adds	r7, #28
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd90      	pop	{r4, r7, pc}

0800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cf4e:	b590      	push	{r4, r7, lr}
 800cf50:	b083      	sub	sp, #12
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f835 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	681c      	ldr	r4, [r3, #0]
 800cf62:	6838      	ldr	r0, [r7, #0]
 800cf64:	f000 f830 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	1ae3      	subs	r3, r4, r3
 800cf6e:	10db      	asrs	r3, r3, #3
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd90      	pop	{r4, r7, pc}

0800cf78 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d006      	beq.n	800cf96 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x1e>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 ff41 	bl	800de14 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>
 800cf92:	4603      	mov	r3, r0
 800cf94:	e000      	b.n	800cf98 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_M_allocateEj+0x20>
 800cf96:	2300      	movs	r3, #0
      }
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_relocateEPS3_S7_S7_RS5_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	af02      	add	r7, sp, #8
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cfae:	f88d 4000 	strb.w	r4, [sp]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	68b9      	ldr	r1, [r7, #8]
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 ff39 	bl	800de30 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>
 800cfbe:	4603      	mov	r3, r0
      }
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd90      	pop	{r4, r7, pc}

0800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800cfde:	b590      	push	{r4, r7, lr}
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
 800cfea:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 ff31 	bl	800de54 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cff2:	4604      	mov	r4, r0
 800cff4:	68b8      	ldr	r0, [r7, #8]
 800cff6:	f000 ff2d 	bl	800de54 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800cffa:	4601      	mov	r1, r0
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	4620      	mov	r0, r4
 800d002:	f000 ff36 	bl	800de72 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>
 800d006:	4603      	mov	r3, r0
    }
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}

0800d010 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
      _Iter_comp_iter(_Compare __comp)
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 800d030:	463b      	mov	r3, r7
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff ffec 	bl	800d010 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d042:	b590      	push	{r4, r7, lr}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff ffbb 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800d052:	4603      	mov	r3, r0
 800d054:	681c      	ldr	r4, [r3, #0]
 800d056:	6838      	ldr	r0, [r7, #0]
 800d058:	f7ff ffb6 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800d05c:	4603      	mov	r3, r0
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429c      	cmp	r4, r3
 800d062:	bf14      	ite	ne
 800d064:	2301      	movne	r3, #1
 800d066:	2300      	moveq	r3, #0
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	4618      	mov	r0, r3
 800d06c:	370c      	adds	r7, #12
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd90      	pop	{r4, r7, pc}

0800d072 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800d072:	b580      	push	{r7, lr}
 800d074:	b086      	sub	sp, #24
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800d080:	e01b      	b.n	800d0ba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d106      	bne.n	800d096 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800d088:	783b      	ldrb	r3, [r7, #0]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 ff20 	bl	800ded4 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
 800d094:	e021      	b.n	800d0da <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x68>
	  --__depth_limit;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	3b01      	subs	r3, #1
 800d09a:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800d09c:	783a      	ldrb	r2, [r7, #0]
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 ff2e 	bl	800df02 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800d0aa:	783b      	ldrb	r3, [r7, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	6978      	ldr	r0, [r7, #20]
 800d0b2:	f7ff ffde 	bl	800d072 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
	  __last = __cut;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800d0ba:	f107 020c 	add.w	r2, r7, #12
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff ff42 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b10      	cmp	r3, #16
 800d0ce:	bfcc      	ite	gt
 800d0d0:	2301      	movgt	r3, #1
 800d0d2:	2300      	movle	r3, #0
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1d3      	bne.n	800d082 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
    }
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800d0ec:	f107 020c 	add.w	r2, r7, #12
 800d0f0:	f107 0308 	add.w	r3, r7, #8
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff ff29 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b10      	cmp	r3, #16
 800d100:	bfcc      	ite	gt
 800d102:	2301      	movgt	r3, #1
 800d104:	2300      	movle	r3, #0
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d018      	beq.n	800d13e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800d10c:	f107 030c 	add.w	r3, r7, #12
 800d110:	2110      	movs	r1, #16
 800d112:	4618      	mov	r0, r3
 800d114:	f000 ff38 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d118:	4603      	mov	r3, r0
 800d11a:	793a      	ldrb	r2, [r7, #4]
 800d11c:	4619      	mov	r1, r3
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f000 ff4a 	bl	800dfb8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800d124:	f107 030c 	add.w	r3, r7, #12
 800d128:	2110      	movs	r1, #16
 800d12a:	4618      	mov	r0, r3
 800d12c:	f000 ff2c 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800d130:	4603      	mov	r3, r0
 800d132:	793a      	ldrb	r2, [r7, #4]
 800d134:	68b9      	ldr	r1, [r7, #8]
 800d136:	4618      	mov	r0, r3
 800d138:	f000 ffab 	bl	800e092 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d13c:	e004      	b.n	800d148 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800d13e:	793a      	ldrb	r2, [r7, #4]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 ff38 	bl	800dfb8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>
    }
 800d148:	bf00      	nop
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800d150:	b590      	push	{r4, r7, lr}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff f8a5 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d162:	4604      	mov	r4, r0
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f7fc fd1a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d16a:	4603      	mov	r3, r0
 800d16c:	1ae2      	subs	r2, r4, r3
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	429a      	cmp	r2, r3
 800d172:	bf34      	ite	cc
 800d174:	2301      	movcc	r3, #1
 800d176:	2300      	movcs	r3, #0
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d002      	beq.n	800d184 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f00c ffb3 	bl	801a0ea <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7fc fd0a 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d18a:	4604      	mov	r4, r0
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f7fc fd06 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d192:	4603      	mov	r3, r0
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	f107 0208 	add.w	r2, r7, #8
 800d19a:	f107 0310 	add.w	r3, r7, #16
 800d19e:	4611      	mov	r1, r2
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe f81e 	bl	800b1e2 <_ZSt3maxIjERKT_S2_S2_>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4423      	add	r3, r4
 800d1ac:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f7fc fcf5 	bl	8009b9e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE4sizeEv>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d306      	bcc.n	800d1ca <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x7a>
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff f875 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d904      	bls.n	800d1d4 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x84>
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff f86e 	bl	800c2ac <_ZNKSt6vectorIfN2ei7EiAllocIfEEE8max_sizeEv>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	e000      	b.n	800d1d6 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x86>
 800d1d4:	697b      	ldr	r3, [r7, #20]
      }
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	371c      	adds	r7, #28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}

0800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800d1de:	b590      	push	{r4, r7, lr}
 800d1e0:	b085      	sub	sp, #20
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	607a      	str	r2, [r7, #4]
 800d1ea:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff f8a6 	bl	800c33e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	68b8      	ldr	r0, [r7, #8]
 800d1f6:	f7ff f8a2 	bl	800c33e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	4620      	mov	r0, r4
 800d202:	f000 f9c9 	bl	800d598 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>
 800d206:	4603      	mov	r3, r0
    }
 800d208:	4618      	mov	r0, r3
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd90      	pop	{r4, r7, pc}

0800d210 <_ZNSt14__array_traitsIfLj6EE6_S_refERA6_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	4413      	add	r3, r2
 800d222:	4618      	mov	r0, r3
 800d224:	370c      	adds	r7, #12
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <_ZNSt14__array_traitsIfLj10EE6_S_refERA10_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	4413      	add	r3, r2
 800d240:	4618      	mov	r0, r3
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <_ZNSt14__array_traitsIfLj14EE6_S_refERA14_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	4413      	add	r3, r2
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <_ZNSt14__array_traitsIfLj18EE6_S_refERA18_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d26a:	b480      	push	{r7}
 800d26c:	b083      	sub	sp, #12
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	4413      	add	r3, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <_ZNSt14__array_traitsIfLj4EE6_S_refERA4_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4413      	add	r3, r2
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <_ZNSt14__array_traitsIfLj8EE6_S_refERA8_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2a6:	b480      	push	{r7}
 800d2a8:	b083      	sub	sp, #12
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <_ZNSt14__array_traitsIfLj12EE6_S_refERA12_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <_ZNSt14__array_traitsIfLj16EE6_S_refERA16_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d2e2:	b480      	push	{r7}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	4413      	add	r3, r2
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <_ZNSt14__array_traitsIfLj20EE6_S_refERA20_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4413      	add	r3, r2
 800d312:	4618      	mov	r0, r3
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800d31e:	b480      	push	{r7}
 800d320:	b083      	sub	sp, #12
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	4413      	add	r3, r2
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4618      	mov	r0, r3
 800d348:	370c      	adds	r7, #12
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJRKfEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800d352:	b590      	push	{r4, r7, lr}
 800d354:	b085      	sub	sp, #20
 800d356:	af00      	add	r7, sp, #0
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	60b9      	str	r1, [r7, #8]
 800d35c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7ff ffec 	bl	800d33c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d364:	4603      	mov	r3, r0
 800d366:	681c      	ldr	r4, [r3, #0]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	4619      	mov	r1, r3
 800d36c:	2004      	movs	r0, #4
 800d36e:	f7f3 ff2f 	bl	80011d0 <_ZnwjPv>
 800d372:	4603      	mov	r3, r0
 800d374:	601c      	str	r4, [r3, #0]
	}
 800d376:	bf00      	nop
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}

0800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d37e:	b480      	push	{r7}
 800d380:	b083      	sub	sp, #12
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff ffec 	bl	800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f000 fe95 	bl	800e0dc <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d3bc:	b5b0      	push	{r4, r5, r7, lr}
 800d3be:	b08c      	sub	sp, #48	; 0x30
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d3c8:	4a59      	ldr	r2, [pc, #356]	; (800d530 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x174>)
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff febf 	bl	800d150 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
 800d3d2:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7fc fcfa 	bl	8009dda <_ZNSt6vectorIfN2ei7EiAllocIfEEE5beginEv>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	f107 0214 	add.w	r2, r7, #20
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	4611      	mov	r1, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fc1e 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d402:	4618      	mov	r0, r3
 800d404:	f7fe ff73 	bl	800c2ee <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj>
 800d408:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800d40e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800d414:	69ba      	ldr	r2, [r7, #24]
 800d416:	18d5      	adds	r5, r2, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ffb0 	bl	800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800d41e:	4603      	mov	r3, r0
 800d420:	461a      	mov	r2, r3
 800d422:	4629      	mov	r1, r5
 800d424:	4620      	mov	r0, r4
 800d426:	f7ff ffb5 	bl	800d394 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  __new_finish = pointer();
 800d42a:	2300      	movs	r3, #0
 800d42c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800d42e:	f7fd fc86 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d027      	beq.n	800d488 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d438:	f107 0308 	add.w	r3, r7, #8
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe f910 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d442:	4603      	mov	r3, r0
 800d444:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe f95f 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d44e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	4621      	mov	r1, r4
 800d454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d456:	f7fe ff5e 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d45a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	3304      	adds	r3, #4
 800d460:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d462:	f107 0308 	add.w	r3, r7, #8
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe f8fb 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d46c:	4603      	mov	r3, r0
 800d46e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe f94a 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d478:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d47c:	6a39      	ldr	r1, [r7, #32]
 800d47e:	4620      	mov	r0, r4
 800d480:	f7fe ff49 	bl	800c316 <_ZNSt6vectorIfN2ei7EiAllocIfEEE11_S_relocateEPfS4_S4_RS2_>
 800d484:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d486:	e026      	b.n	800d4d6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800d488:	f107 0308 	add.w	r3, r7, #8
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe f8e8 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d492:	4603      	mov	r3, r0
 800d494:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe f937 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d49e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4a6:	f7ff fe9a 	bl	800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d4aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800d4b2:	f107 0308 	add.w	r3, r7, #8
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe f8d3 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe f922 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d4c8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4cc:	6a39      	ldr	r1, [r7, #32]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f7ff fe85 	bl	800d1de <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d4d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800d4d6:	f7fd fc32 	bl	800ad3e <_ZNSt6vectorIfN2ei7EiAllocIfEEE15_S_use_relocateEv>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f083 0301 	eor.w	r3, r3, #1
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d009      	beq.n	800d4fa <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fe f90f 	bl	800b70c <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE19_M_get_Tp_allocatorEv>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	6a39      	ldr	r1, [r7, #32]
 800d4f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4f6:	f7fe f914 	bl	800b722 <_ZSt8_DestroyIPfN2ei7EiAllocIfEEEvT_S4_RT0_>
      _M_deallocate(__old_start,
 800d4fa:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	689a      	ldr	r2, [r3, #8]
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800d506:	461a      	mov	r2, r3
 800d508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d50a:	f7fe f925 	bl	800b758 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	69ba      	ldr	r2, [r7, #24]
 800d512:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d518:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	441a      	add	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	609a      	str	r2, [r3, #8]
    }
 800d526:	bf00      	nop
 800d528:	3730      	adds	r7, #48	; 0x30
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}
 800d52e:	bf00      	nop
 800d530:	080219ac 	.word	0x080219ac

0800d534 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fde1 	bl	800e108 <_ZN2ei7EiAllocIfE8allocateEj>
 800d546:	4603      	mov	r3, r0
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_ZNSt6vectorIfN2ei7EiAllocIfEEE14_S_do_relocateEPfS4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	68b9      	ldr	r1, [r7, #8]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 fde0 	bl	800e12a <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800d56a:	4603      	mov	r3, r0
      }
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800d57e:	463b      	mov	r3, r7
 800d580:	4618      	mov	r0, r3
 800d582:	f000 fdef 	bl	800e164 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 800d586:	4603      	mov	r3, r0
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d598:	b590      	push	{r4, r7, lr}
 800d59a:	b087      	sub	sp, #28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5aa:	e016      	b.n	800d5da <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d5ac:	6978      	ldr	r0, [r7, #20]
 800d5ae:	f7ff faf5 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	f107 030c 	add.w	r3, r7, #12
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f000 fdff 	bl	800e1bc <_ZNKSt13move_iteratorIPfEdeEv>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	6838      	ldr	r0, [r7, #0]
 800d5c6:	f7ff fee5 	bl	800d394 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d5ca:	f107 030c 	add.w	r3, r7, #12
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f000 fde4 	bl	800e19c <_ZNSt13move_iteratorIPfEppEv>
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	617b      	str	r3, [r7, #20]
 800d5da:	f107 0208 	add.w	r2, r7, #8
 800d5de:	f107 030c 	add.w	r3, r7, #12
 800d5e2:	4611      	mov	r1, r2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 fdc8 	bl	800e17a <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1dd      	bne.n	800d5ac <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_N2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d5f0:	697b      	ldr	r3, [r7, #20]
    }
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd90      	pop	{r4, r7, pc}

0800d5fa <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d5fa:	b5b0      	push	{r4, r5, r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d604:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d606:	1d3b      	adds	r3, r7, #4
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fe fed2 	bl	800c3b2 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d60e:	462a      	mov	r2, r5
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	4620      	mov	r0, r4
 800d614:	f000 fdde 	bl	800e1d4 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d618:	4603      	mov	r3, r0
    }
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bdb0      	pop	{r4, r5, r7, pc}

0800d622 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d634:	e00e      	b.n	800d654 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d636:	6978      	ldr	r0, [r7, #20]
 800d638:	f7ff fab0 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800d63c:	4603      	mov	r3, r0
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	4619      	mov	r1, r3
 800d642:	6838      	ldr	r0, [r7, #0]
 800d644:	f7fe fd35 	bl	800c0b2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJRKfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	3304      	adds	r3, #4
 800d64c:	60fb      	str	r3, [r7, #12]
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	3304      	adds	r3, #4
 800d652:	617b      	str	r3, [r7, #20]
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d1ec      	bne.n	800d636 <_ZSt22__uninitialized_copy_aIPKfPfN2ei7EiAllocIfEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d65c:	697b      	ldr	r3, [r7, #20]
    }
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <_ZNKSt16initializer_listIiE4sizeEv>:
      size() const noexcept { return _M_len; }
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <_ZSt8distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
    distance(_InputIterator __first, _InputIterator __last)
 800d67e:	b5b0      	push	{r4, r5, r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800d688:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d68a:	1d3b      	adds	r3, r7, #4
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 fdb1 	bl	800e1f4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d692:	462a      	mov	r2, r5
 800d694:	6839      	ldr	r1, [r7, #0]
 800d696:	4620      	mov	r0, r4
 800d698:	f000 fdb7 	bl	800e20a <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d69c:	4603      	mov	r3, r0
    }
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bdb0      	pop	{r4, r5, r7, pc}

0800d6a6 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x1e>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6839      	ldr	r1, [r7, #0]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fdb5 	bl	800e22a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	e000      	b.n	800d6c6 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE11_M_allocateEj+0x20>
 800d6c4:	2300      	movs	r3, #0
      }
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b086      	sub	sp, #24
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800d6e0:	e00e      	b.n	800d700 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x32>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800d6e2:	6978      	ldr	r0, [r7, #20]
 800d6e4:	f7ff fb6b 	bl	800cdbe <_ZSt11__addressofIiEPT_RS0_>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6838      	ldr	r0, [r7, #0]
 800d6f0:	f000 fb2a 	bl	800dd48 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	429a      	cmp	r2, r3
 800d706:	d1ec      	bne.n	800d6e2 <_ZSt22__uninitialized_copy_aIPKiPiN2ei7EiAllocIiEEET0_T_S7_S6_RT1_+0x14>
	  return __cur;
 800d708:	697b      	ldr	r3, [r7, #20]
    }
 800d70a:	4618      	mov	r0, r3
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE10deallocateERS2_Pmj>:
      deallocate(_Alloc& __a, pointer __p, size_type __n)
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 fd8f 	bl	800e246 <_ZN2ei7EiAllocImE10deallocateEPmj>
 800d728:	bf00      	nop
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	bf14      	ite	ne
 800d73e:	2301      	movne	r3, #1
 800d740:	2300      	moveq	r3, #0
 800d742:	b2db      	uxtb	r3, r3
 800d744:	4618      	mov	r0, r3
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d750:	b590      	push	{r4, r7, lr}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d75a:	6838      	ldr	r0, [r7, #0]
 800d75c:	f7fe feee 	bl	800c53c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d760:	4603      	mov	r3, r0
 800d762:	4622      	mov	r2, r4
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 fd7a 	bl	800e260 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	bd90      	pop	{r4, r7, pc}

0800d774 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 fd85 	bl	800e292 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d788:	4604      	mov	r4, r0
 800d78a:	68b8      	ldr	r0, [r7, #8]
 800d78c:	f7fe f939 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d790:	4605      	mov	r5, r0
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7fe f935 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d798:	4606      	mov	r6, r0
 800d79a:	6838      	ldr	r0, [r7, #0]
 800d79c:	f7fe f93c 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f000 fd84 	bl	800e2b4 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d7ac:	4603      	mov	r3, r0
      }
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7b6 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d7b6:	b590      	push	{r4, r7, lr}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	60f8      	str	r0, [r7, #12]
 800d7be:	60b9      	str	r1, [r7, #8]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d109      	bne.n	800d7de <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f000 fd97 	bl	800e2fe <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	68b8      	ldr	r0, [r7, #8]
 800d7d4:	f000 fd5d 	bl	800e292 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	6023      	str	r3, [r4, #0]
	    break;
 800d7dc:	e005      	b.n	800d7ea <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	68b9      	ldr	r1, [r7, #8]
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 fd97 	bl	800e318 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d7ea:	2300      	movs	r3, #0
      }
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3714      	adds	r7, #20
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}

0800d7f4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	  { return true; }
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	4618      	mov	r0, r3
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800d80a:	b590      	push	{r4, r7, lr}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800d814:	6838      	ldr	r0, [r7, #0]
 800d816:	f7fe fecf 	bl	800c5b8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800d81a:	4603      	mov	r3, r0
 800d81c:	4622      	mov	r2, r4
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fdb3 	bl	800e38c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800d826:	bf00      	nop
 800d828:	370c      	adds	r7, #12
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd90      	pop	{r4, r7, pc}

0800d82e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d82e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d830:	b085      	sub	sp, #20
 800d832:	af00      	add	r7, sp, #0
 800d834:	60f8      	str	r0, [r7, #12]
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	607a      	str	r2, [r7, #4]
 800d83a:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 fdbe 	bl	800e3be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d842:	4604      	mov	r4, r0
 800d844:	68b8      	ldr	r0, [r7, #8]
 800d846:	f7fe f8dc 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d84a:	4605      	mov	r5, r0
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7fe f8d8 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800d852:	4606      	mov	r6, r0
 800d854:	6838      	ldr	r0, [r7, #0]
 800d856:	f7fe f8df 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800d85a:	4603      	mov	r3, r0
 800d85c:	4632      	mov	r2, r6
 800d85e:	4629      	mov	r1, r5
 800d860:	4620      	mov	r0, r4
 800d862:	f000 fdbd 	bl	800e3e0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>
 800d866:	4603      	mov	r3, r0
      }
 800d868:	4618      	mov	r0, r3
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d870 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d870:	b590      	push	{r4, r7, lr}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4613      	mov	r3, r2
 800d87c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d109      	bne.n	800d898 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 fdd0 	bl	800e42a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800d88a:	4604      	mov	r4, r0
 800d88c:	68b8      	ldr	r0, [r7, #8]
 800d88e:	f000 fd96 	bl	800e3be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800d892:	4603      	mov	r3, r0
 800d894:	6023      	str	r3, [r4, #0]
	    break;
 800d896:	e005      	b.n	800d8a4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d898:	79fb      	ldrb	r3, [r7, #7]
 800d89a:	461a      	mov	r2, r3
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f000 fdd0 	bl	800e444 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800d8a4:	2300      	movs	r3, #0
      }
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd90      	pop	{r4, r7, pc}

0800d8ae <_ZNSt5tupleIJP12ei_feature_tSt14default_deleteIA_S0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d8ae:	b580      	push	{r7, lr}
 800d8b0:	b082      	sub	sp, #8
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 fdfd 	bl	800e4b8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fe00 	bl	800e4d8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <_ZNSt15__uniq_ptr_implI12ei_feature_tSt14default_deleteIA_S0_EE10_M_deleterEv>:
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fdff 	bl	800e4f0 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <_ZSt3getILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fdfe 	bl	800e508 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d90c:	4603      	mov	r3, r0
 800d90e:	4618      	mov	r0, r3
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	f000 fdfd 	bl	800e520 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d926:	4603      	mov	r3, r0
 800d928:	4618      	mov	r0, r3
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <_ZSt3getILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fdfc 	bl	800e538 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>
 800d940:	4603      	mov	r3, r0
 800d942:	4618      	mov	r0, r3
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <_ZSt3getILj0EJPvPFvS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS7_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d94a:	b580      	push	{r7, lr}
 800d94c:	b082      	sub	sp, #8
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f000 fdfb 	bl	800e550 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEEC1Ev>:
      _Tuple_impl()
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fdfb 	bl	800e568 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EEC1Ev>:
      constexpr _Head_base()
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <_ZSt3getILj1EJPN2ei9ei_matrixESt14default_deleteIS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fdec 	bl	800e57e <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>:
	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f3 fd73 	bl	80014a6 <_ZNSt13_Bit_iteratorC1Ev>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f3 fd6e 	bl	80014a6 <_ZNSt13_Bit_iteratorC1Ev>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	611a      	str	r2, [r3, #16]
	{ }
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_data8_M_resetEv>:
	_M_reset() _GLIBCXX_NOEXCEPT
 800d9da:	b5b0      	push	{r4, r5, r7, lr}
 800d9dc:	b088      	sub	sp, #32
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
	{ *this = _Bvector_impl_data(); }
 800d9e2:	f107 030c 	add.w	r3, r7, #12
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff ffe2 	bl	800d9b0 <_ZNSt13_Bvector_baseIN2ei7EiAllocIbEEE18_Bvector_impl_dataC1Ev>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	f107 040c 	add.w	r4, r7, #12
 800d9f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	bf00      	nop
 800d9fe:	3720      	adds	r7, #32
 800da00:	46bd      	mov	sp, r7
 800da02:	bdb0      	pop	{r4, r5, r7, pc}

0800da04 <_ZNSt16allocator_traitsIN2ei7EiAllocImEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 fdc0 	bl	800e596 <_ZN2ei7EiAllocImE8allocateEj>
 800da16:	4603      	mov	r3, r0
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4618      	mov	r0, r3
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEEC1IRS0_JS2_EvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800da36:	b590      	push	{r4, r7, lr}
 800da38:	b085      	sub	sp, #20
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800da42:	68fc      	ldr	r4, [r7, #12]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff f809 	bl	800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800da4a:	4603      	mov	r3, r0
 800da4c:	4619      	mov	r1, r3
 800da4e:	4620      	mov	r0, r4
 800da50:	f000 fdbe 	bl	800e5d0 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	1d1c      	adds	r4, r3, #4
 800da58:	68b8      	ldr	r0, [r7, #8]
 800da5a:	f7ff ffe1 	bl	800da20 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800da5e:	4603      	mov	r3, r0
 800da60:	4619      	mov	r1, r3
 800da62:	4620      	mov	r0, r4
 800da64:	f000 fdc7 	bl	800e5f6 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>
	{ }
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	4618      	mov	r0, r3
 800da6c:	3714      	adds	r7, #20
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd90      	pop	{r4, r7, pc}

0800da72 <_ZSt12__get_helperILj0EPvJPFvS0_EEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800da72:	b580      	push	{r7, lr}
 800da74:	b082      	sub	sp, #8
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fdcc 	bl	800e618 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>
 800da80:	4603      	mov	r3, r0
 800da82:	4618      	mov	r0, r3
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <_ZSt3getILj1EJPvPFvS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4618      	mov	r0, r3
 800da96:	f000 fdcd 	bl	800e634 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800da9a:	4603      	mov	r3, r0
 800da9c:	4618      	mov	r0, r3
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800daac:	2100      	movs	r1, #0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fdcc 	bl	800e64c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>
 800dab4:	4603      	mov	r3, r0
 800dab6:	4618      	mov	r0, r3
 800dab8:	3708      	adds	r7, #8
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b082      	sub	sp, #8
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	6039      	str	r1, [r7, #0]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fdc9 	bl	800e662 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>
 800dad0:	bf00      	nop
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE10_S_destroyIS2_fEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dad8:	b40e      	push	{r1, r2, r3}
 800dada:	b580      	push	{r7, lr}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dae2:	6978      	ldr	r0, [r7, #20]
 800dae4:	f000 fdcf 	bl	800e686 <_ZSt8_DestroyIfEvPT_>
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daf2:	b003      	add	sp, #12
 800daf4:	4770      	bx	lr

0800daf6 <_ZN2ei7EiAllocIfE10deallocateEPfj>:
        get_allocs()[ptr] = bytes;
#endif
        return (T *)ptr;
    }

    void deallocate(T *p, size_t n) noexcept
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	60b9      	str	r1, [r7, #8]
 800db00:	607a      	str	r2, [r7, #4]
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 800db02:	68b8      	ldr	r0, [r7, #8]
 800db04:	f009 fc5a 	bl	80173bc <_Z7ei_freePv>
#endif
    }
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	f107 020c 	add.w	r2, r7, #12
 800db2a:	f107 0308 	add.w	r3, r7, #8
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd fd86 	bl	800b642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800db40:	b590      	push	{r4, r7, lr}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800db4e:	4623      	mov	r3, r4
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	68b9      	ldr	r1, [r7, #8]
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 fda0 	bl	800e69a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800db5a:	463b      	mov	r3, r7
 800db5c:	461a      	mov	r2, r3
 800db5e:	68b9      	ldr	r1, [r7, #8]
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 fdcd 	bl	800e700 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
    }
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd90      	pop	{r4, r7, pc}

0800db6e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800db6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db70:	b089      	sub	sp, #36	; 0x24
 800db72:	af02      	add	r7, sp, #8
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800db7a:	f107 020c 	add.w	r2, r7, #12
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	4611      	mov	r1, r2
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff f856 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	da00      	bge.n	800db92 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_T0_+0x24>
 800db90:	3301      	adds	r3, #1
 800db92:	105b      	asrs	r3, r3, #1
 800db94:	461a      	mov	r2, r3
 800db96:	f107 030c 	add.w	r3, r7, #12
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff ffb7 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dba2:	4603      	mov	r3, r0
 800dba4:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800dba6:	f107 030c 	add.w	r3, r7, #12
 800dbaa:	2101      	movs	r1, #1
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff ffaf 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	f107 0308 	add.w	r3, r7, #8
 800dbb8:	2101      	movs	r1, #1
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 fdc7 	bl	800e74e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f88d 5000 	strb.w	r5, [sp]
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	4621      	mov	r1, r4
 800dbca:	68f8      	ldr	r0, [r7, #12]
 800dbcc:	f000 fdfd 	bl	800e7ca <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800dbd0:	f107 030c 	add.w	r3, r7, #12
 800dbd4:	2101      	movs	r1, #1
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff ff9a 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dbdc:	4633      	mov	r3, r6
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	68b9      	ldr	r1, [r7, #8]
 800dbe2:	f000 fe47 	bl	800e874 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>
 800dbe6:	4603      	mov	r3, r0
    }
 800dbe8:	4618      	mov	r0, r3
 800dbea:	371c      	adds	r7, #28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbf0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800dbfc:	f107 0208 	add.w	r2, r7, #8
 800dc00:	f107 030c 	add.w	r3, r7, #12
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fe7c 	bl	800e904 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d150      	bne.n	800dcb4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dc12:	f107 030c 	add.w	r3, r7, #12
 800dc16:	2101      	movs	r1, #1
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff ff79 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	e03b      	b.n	800dc9c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xac>
	  if (__comp(__i, __first))
 800dc24:	1d3b      	adds	r3, r7, #4
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	6979      	ldr	r1, [r7, #20]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fda8 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d026      	beq.n	800dc84 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800dc36:	f107 0314 	add.w	r3, r7, #20
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fc f916 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dc40:	4603      	mov	r3, r0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7fd f851 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800dc4e:	f107 0314 	add.w	r3, r7, #20
 800dc52:	2101      	movs	r1, #1
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7ff ff5b 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	6979      	ldr	r1, [r7, #20]
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 fe67 	bl	800e934 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>
	      *__first = _GLIBCXX_MOVE(__val);
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fd f83d 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800dc70:	4604      	mov	r4, r0
 800dc72:	f107 030c 	add.w	r3, r7, #12
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fc f8f8 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	6013      	str	r3, [r2, #0]
 800dc82:	e006      	b.n	800dc92 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7f3 fac3 	bl	8001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	6978      	ldr	r0, [r7, #20]
 800dc8e:	f000 fe69 	bl	800e964 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dc92:	f107 0314 	add.w	r3, r7, #20
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fc f8d8 	bl	8009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dc9c:	f107 0208 	add.w	r2, r7, #8
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	4611      	mov	r1, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fc f8b8 	bl	8009e1c <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1b8      	bne.n	800dc24 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x34>
 800dcb2:	e000      	b.n	800dcb6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0xc6>
      if (__first == __last) return;
 800dcb4:	bf00      	nop
    }
 800dcb6:	371c      	adds	r7, #28
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcbc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800dcbc:	b5b0      	push	{r4, r5, r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	617b      	str	r3, [r7, #20]
 800dccc:	e00b      	b.n	800dce6 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7f3 fa9e 	bl	8001210 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	6978      	ldr	r0, [r7, #20]
 800dcd8:	f000 fe44 	bl	800e964 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800dcdc:	f107 0314 	add.w	r3, r7, #20
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fc f8b3 	bl	8009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800dce6:	f107 0208 	add.w	r2, r7, #8
 800dcea:	f107 0314 	add.w	r3, r7, #20
 800dcee:	4611      	mov	r1, r2
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fc f893 	bl	8009e1c <_ZN9__gnu_cxxneIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1e8      	bne.n	800dcce <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_+0x12>
    }
 800dcfc:	bf00      	nop
 800dcfe:	bf00      	nop
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bdb0      	pop	{r4, r5, r7, pc}

0800dd06 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8max_sizeERKS2_>:
      max_size(const _Alloc& __a) noexcept
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b082      	sub	sp, #8
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800dd0e:	2100      	movs	r1, #0
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 fe72 	bl	800e9fa <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>
 800dd16:	4603      	mov	r3, r0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <_ZNSt12_Vector_baseIiN2ei7EiAllocIiEEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	605a      	str	r2, [r3, #4]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	609a      	str	r2, [r3, #8]
	{ }
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE9constructIiJRKiEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS7_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fe5b 	bl	800ea10 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	68b9      	ldr	r1, [r7, #8]
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 fe60 	bl	800ea26 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>
 800dd66:	bf00      	nop
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE10_S_destroyIS2_iEEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800dd6e:	b40e      	push	{r1, r2, r3}
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800dd78:	6978      	ldr	r0, [r7, #20]
 800dd7a:	f000 fe6a 	bl	800ea52 <_ZSt8_DestroyIiEvPT_>
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd88:	b003      	add	sp, #12
 800dd8a:	4770      	bx	lr

0800dd8c <_ZN2ei7EiAllocIiE10deallocateEPij>:
    void deallocate(T *p, size_t n) noexcept
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800dd98:	68b8      	ldr	r0, [r7, #8]
 800dd9a:	f009 fb0f 	bl	80173bc <_Z7ei_freePv>
    }
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9_S_selectIKS2_EET_RS6_z>:
	_S_select(_Alloc2& __a, ...)
 800dda6:	b40f      	push	{r0, r1, r2, r3}
 800dda8:	b480      	push	{r7}
 800ddaa:	af00      	add	r7, sp, #0
	{ return __a; }
 800ddac:	bf00      	nop
 800ddae:	4618      	mov	r0, r3
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	b004      	add	sp, #16
 800ddb8:	4770      	bx	lr

0800ddba <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE10deallocateEPS3_j>:
    void deallocate(T *p, size_t n) noexcept
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800ddc6:	68b8      	ldr	r0, [r7, #8]
 800ddc8:	f009 faf8 	bl	80173bc <_Z7ei_freePv>
    }
 800ddcc:	bf00      	nop
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE10_S_destroyIS5_S4_EEvRT_PT0_z>:
	_S_destroy(_Alloc2&, _Tp* __p, ...)
 800ddd4:	b40e      	push	{r1, r2, r3}
 800ddd6:	b580      	push	{r7, lr}
 800ddd8:	b083      	sub	sp, #12
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
	{ std::_Destroy(__p); }
 800ddde:	6978      	ldr	r0, [r7, #20]
 800dde0:	f000 fe41 	bl	800ea66 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>
 800dde4:	bf00      	nop
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddee:	b003      	add	sp, #12
 800ddf0:	4770      	bx	lr

0800ddf2 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b082      	sub	sp, #8
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f000 fe56 	bl	800eaae <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>
 800de02:	4603      	mov	r3, r0
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fe38 	bl	800ea7a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>
 800de0a:	4603      	mov	r3, r0
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8allocateERS5_j>:
      allocate(_Alloc& __a, size_type __n)
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800de1e:	6839      	ldr	r1, [r7, #0]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fe4f 	bl	800eac4 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>
 800de26:	4603      	mov	r3, r0
 800de28:	4618      	mov	r0, r3
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE14_S_do_relocateEPS3_S7_S7_RS5_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
 800de3c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	68b9      	ldr	r1, [r7, #8]
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f000 fe4e 	bl	800eae6 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800de4a:	4603      	mov	r3, r0
      }
 800de4c:	4618      	mov	r0, r3
 800de4e:	3710      	adds	r7, #16
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800de5c:	f107 030c 	add.w	r3, r7, #12
 800de60:	6879      	ldr	r1, [r7, #4]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 fe5c 	bl	800eb20 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800de72:	b590      	push	{r4, r7, lr}
 800de74:	b087      	sub	sp, #28
 800de76:	af00      	add	r7, sp, #0
 800de78:	60f8      	str	r0, [r7, #12]
 800de7a:	60b9      	str	r1, [r7, #8]
 800de7c:	607a      	str	r2, [r7, #4]
 800de7e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 800de84:	e016      	b.n	800deb4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x42>
	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 800de86:	6978      	ldr	r0, [r7, #20]
 800de88:	f7fe ffdd 	bl	800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800de8c:	4604      	mov	r4, r0
 800de8e:	f107 030c 	add.w	r3, r7, #12
 800de92:	4618      	mov	r0, r3
 800de94:	f000 fe78 	bl	800eb88 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>
 800de98:	4603      	mov	r3, r0
 800de9a:	461a      	mov	r2, r3
 800de9c:	4621      	mov	r1, r4
 800de9e:	6838      	ldr	r0, [r7, #0]
 800dea0:	f000 fe7e 	bl	800eba0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
	  for (; __first != __last; ++__first, (void)++__cur)
 800dea4:	f107 030c 	add.w	r3, r7, #12
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 fe5c 	bl	800eb66 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	3308      	adds	r3, #8
 800deb2:	617b      	str	r3, [r7, #20]
 800deb4:	f107 0208 	add.w	r2, r7, #8
 800deb8:	f107 030c 	add.w	r3, r7, #12
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 fe40 	bl	800eb44 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1dd      	bne.n	800de86 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_NS1_7EiAllocIS4_EEET0_T_SA_S9_RT1_+0x14>
	  return __cur;
 800deca:	697b      	ldr	r3, [r7, #20]
    }
 800decc:	4618      	mov	r0, r3
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd90      	pop	{r4, r7, pc}

0800ded4 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800dee2:	783b      	ldrb	r3, [r7, #0]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	68b9      	ldr	r1, [r7, #8]
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f000 fe6c 	bl	800ebc6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800deee:	463b      	mov	r3, r7
 800def0:	461a      	mov	r2, r3
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 fe99 	bl	800ec2c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
    }
 800defa:	bf00      	nop
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800df02:	b590      	push	{r4, r7, lr}
 800df04:	b089      	sub	sp, #36	; 0x24
 800df06:	af02      	add	r7, sp, #8
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800df0e:	f107 020c 	add.w	r2, r7, #12
 800df12:	f107 0308 	add.w	r3, r7, #8
 800df16:	4611      	mov	r1, r2
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff f818 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	da00      	bge.n	800df26 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_T0_+0x24>
 800df24:	3301      	adds	r3, #1
 800df26:	105b      	asrs	r3, r3, #1
 800df28:	461a      	mov	r2, r3
 800df2a:	f107 030c 	add.w	r3, r7, #12
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f000 f829 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df36:	4603      	mov	r3, r0
 800df38:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800df3a:	f107 030c 	add.w	r3, r7, #12
 800df3e:	2101      	movs	r1, #1
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f821 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df46:	4604      	mov	r4, r0
 800df48:	f107 0308 	add.w	r3, r7, #8
 800df4c:	2101      	movs	r1, #1
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 fe93 	bl	800ec7a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>
 800df54:	4602      	mov	r2, r0
 800df56:	793b      	ldrb	r3, [r7, #4]
 800df58:	f88d 3000 	strb.w	r3, [sp]
 800df5c:	4613      	mov	r3, r2
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	4621      	mov	r1, r4
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 febe 	bl	800ece4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800df68:	f107 030c 	add.w	r3, r7, #12
 800df6c:	2101      	movs	r1, #1
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 f80a 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800df74:	793b      	ldrb	r3, [r7, #4]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	68b9      	ldr	r1, [r7, #8]
 800df7a:	f000 ff08 	bl	800ed8e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>
 800df7e:	4603      	mov	r3, r0
    }
 800df80:	4618      	mov	r0, r3
 800df82:	371c      	adds	r7, #28
 800df84:	46bd      	mov	sp, r7
 800df86:	bd90      	pop	{r4, r7, pc}

0800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	00db      	lsls	r3, r3, #3
 800df9a:	4413      	add	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	f107 020c 	add.w	r2, r7, #12
 800dfa2:	f107 0308 	add.w	r3, r7, #8
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fd fe73 	bl	800bc94 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800dfb8:	b5b0      	push	{r4, r5, r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800dfc4:	f107 0208 	add.w	r2, r7, #8
 800dfc8:	f107 030c 	add.w	r3, r7, #12
 800dfcc:	4611      	mov	r1, r2
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 ff25 	bl	800ee1e <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d157      	bne.n	800e08a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd2>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800dfda:	f107 030c 	add.w	r3, r7, #12
 800dfde:	2101      	movs	r1, #1
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7ff ffd1 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	61fb      	str	r3, [r7, #28]
 800dfea:	e042      	b.n	800e072 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xba>
	  if (__comp(__i, __first))
 800dfec:	1d3b      	adds	r3, r7, #4
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	69f9      	ldr	r1, [r7, #28]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 fe5a 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d02d      	beq.n	800e05a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xa2>
		__val = _GLIBCXX_MOVE(*__i);
 800dffe:	f107 031c 	add.w	r3, r7, #28
 800e002:	4618      	mov	r0, r3
 800e004:	f000 ff34 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e008:	4603      	mov	r3, r0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 ff3c 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800e010:	4602      	mov	r2, r0
 800e012:	f107 0314 	add.w	r3, r7, #20
 800e016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e01a:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800e01e:	f107 031c 	add.w	r3, r7, #28
 800e022:	2101      	movs	r1, #1
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff ffaf 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800e02a:	4603      	mov	r3, r0
 800e02c:	461a      	mov	r2, r3
 800e02e:	69f9      	ldr	r1, [r7, #28]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 ff34 	bl	800ee9e <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>
	      *__first = _GLIBCXX_MOVE(__val);
 800e036:	f107 0314 	add.w	r3, r7, #20
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 ff24 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800e040:	4604      	mov	r4, r0
 800e042:	f107 030c 	add.w	r3, r7, #12
 800e046:	4618      	mov	r0, r3
 800e048:	f000 ff12 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800e04c:	4603      	mov	r3, r0
 800e04e:	4622      	mov	r2, r4
 800e050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e054:	e883 0003 	stmia.w	r3, {r0, r1}
 800e058:	e006      	b.n	800e068 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xb0>
	    std::__unguarded_linear_insert(__i,
 800e05a:	7938      	ldrb	r0, [r7, #4]
 800e05c:	f000 ff37 	bl	800eece <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e060:	4629      	mov	r1, r5
 800e062:	69f8      	ldr	r0, [r7, #28]
 800e064:	f000 ff47 	bl	800eef6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e068:	f107 031c 	add.w	r3, r7, #28
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 feee 	bl	800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e072:	f107 0208 	add.w	r2, r7, #8
 800e076:	f107 031c 	add.w	r3, r7, #28
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe ffe0 	bl	800d042 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1b1      	bne.n	800dfec <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x34>
 800e088:	e000      	b.n	800e08c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0xd4>
      if (__first == __last) return;
 800e08a:	bf00      	nop
    }
 800e08c:	3720      	adds	r7, #32
 800e08e:	46bd      	mov	sp, r7
 800e090:	bdb0      	pop	{r4, r5, r7, pc}

0800e092 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800e092:	b590      	push	{r4, r7, lr}
 800e094:	b087      	sub	sp, #28
 800e096:	af00      	add	r7, sp, #0
 800e098:	60f8      	str	r0, [r7, #12]
 800e09a:	60b9      	str	r1, [r7, #8]
 800e09c:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e00b      	b.n	800e0bc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x2a>
	std::__unguarded_linear_insert(__i,
 800e0a4:	7938      	ldrb	r0, [r7, #4]
 800e0a6:	f000 ff12 	bl	800eece <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	6978      	ldr	r0, [r7, #20]
 800e0ae:	f000 ff22 	bl	800eef6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e0b2:	f107 0314 	add.w	r3, r7, #20
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fec9 	bl	800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800e0bc:	f107 0208 	add.w	r2, r7, #8
 800e0c0:	f107 0314 	add.w	r3, r7, #20
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe ffbb 	bl	800d042 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1e8      	bne.n	800e0a4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_+0x12>
    }
 800e0d2:	bf00      	nop
 800e0d4:	bf00      	nop
 800e0d6:	371c      	adds	r7, #28
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd90      	pop	{r4, r7, pc}

0800e0dc <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJfEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e0dc:	b590      	push	{r4, r7, lr}
 800e0de:	b085      	sub	sp, #20
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff f948 	bl	800d37e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	681c      	ldr	r4, [r3, #0]
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	2004      	movs	r0, #4
 800e0f8:	f7f3 f86a 	bl	80011d0 <_ZnwjPv>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	601c      	str	r4, [r3, #0]
	}
 800e100:	bf00      	nop
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	bd90      	pop	{r4, r7, pc}

0800e108 <_ZN2ei7EiAllocIfE8allocateEj>:
    T *allocate(size_t n)
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f009 f935 	bl	8017388 <_Z9ei_mallocj>
 800e11e:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e120:	68bb      	ldr	r3, [r7, #8]
    }
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <_ZSt12__relocate_aIPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e12a:	b5b0      	push	{r4, r5, r7, lr}
 800e12c:	b084      	sub	sp, #16
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	60b9      	str	r1, [r7, #8]
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f000 ff31 	bl	800efa0 <_ZSt12__niter_baseIPfET_S1_>
 800e13e:	4604      	mov	r4, r0
 800e140:	68b8      	ldr	r0, [r7, #8]
 800e142:	f000 ff2d 	bl	800efa0 <_ZSt12__niter_baseIPfET_S1_>
 800e146:	4605      	mov	r5, r0
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 ff29 	bl	800efa0 <_ZSt12__niter_baseIPfET_S1_>
 800e14e:	4602      	mov	r2, r0
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	4629      	mov	r1, r5
 800e154:	4620      	mov	r0, r4
 800e156:	f000 ff2e 	bl	800efb6 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>
 800e15a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bdb0      	pop	{r4, r5, r7, pc}

0800e164 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4618      	mov	r0, r3
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <_ZStneIPfEbRKSt13move_iteratorIT_ES5_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
 800e182:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 ff3b 	bl	800f002 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>
 800e18c:	4603      	mov	r3, r0
 800e18e:	f083 0301 	eor.w	r3, r3, #1
 800e192:	b2db      	uxtb	r3, r3
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <_ZNSt13move_iteratorIPfEppEv>:
      operator++()
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	1d1a      	adds	r2, r3, #4
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
	return *this;
 800e1ae:	687b      	ldr	r3, [r7, #4]
      }
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <_ZNKSt13move_iteratorIPfEdeEv>:
      operator*() const
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	109b      	asrs	r3, r3, #2
    }
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr

0800e1f4 <_ZSt19__iterator_categoryIPKiENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e1fc:	bf00      	nop
 800e1fe:	4618      	mov	r0, r3
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <_ZSt10__distanceIPKiENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e20a:	b480      	push	{r7}
 800e20c:	b085      	sub	sp, #20
 800e20e:	af00      	add	r7, sp, #0
 800e210:	60f8      	str	r0, [r7, #12]
 800e212:	60b9      	str	r1, [r7, #8]
 800e214:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	109b      	asrs	r3, r3, #2
    }
 800e21e:	4618      	mov	r0, r3
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr

0800e22a <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE8allocateERS2_j>:
      allocate(_Alloc& __a, size_type __n)
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fef9 	bl	800f02e <_ZN2ei7EiAllocIiE8allocateEj>
 800e23c:	4603      	mov	r3, r0
 800e23e:	4618      	mov	r0, r3
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <_ZN2ei7EiAllocImE10deallocateEPmj>:
    void deallocate(T *p, size_t n) noexcept
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	60b9      	str	r1, [r7, #8]
 800e250:	607a      	str	r2, [r7, #4]
        ei_dsp_free(p,0);
 800e252:	68b8      	ldr	r0, [r7, #8]
 800e254:	f009 f8b2 	bl	80173bc <_Z7ei_freePv>
    }
 800e258:	bf00      	nop
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e260:	b590      	push	{r4, r7, lr}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e26c:	68b8      	ldr	r0, [r7, #8]
 800e26e:	f7fe f965 	bl	800c53c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e272:	4603      	mov	r3, r0
 800e274:	681c      	ldr	r4, [r3, #0]
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7f2 ffe4 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e27c:	4603      	mov	r3, r0
 800e27e:	4619      	mov	r1, r3
 800e280:	2004      	movs	r0, #4
 800e282:	f7f2 ffa5 	bl	80011d0 <_ZnwjPv>
 800e286:	4603      	mov	r3, r0
 800e288:	601c      	str	r4, [r3, #0]
	  }
 800e28a:	bf00      	nop
 800e28c:	3714      	adds	r7, #20
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd90      	pop	{r4, r7, pc}

0800e292 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fed8 	bl	800f050 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 800e2a0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f000 fee0 	bl	800f068 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	bf00      	nop
	}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <_ZSt10__invoke_rIiRPFijjPfEJjjS0_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b8:	b086      	sub	sp, #24
 800e2ba:	af02      	add	r7, sp, #8
 800e2bc:	60f8      	str	r0, [r7, #12]
 800e2be:	60b9      	str	r1, [r7, #8]
 800e2c0:	607a      	str	r2, [r7, #4]
 800e2c2:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f000 feda 	bl	800f07e <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	68b8      	ldr	r0, [r7, #8]
 800e2ce:	f7fd fb98 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7fd fb94 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e2da:	4606      	mov	r6, r0
 800e2dc:	6838      	ldr	r0, [r7, #0]
 800e2de:	f7fd fb9b 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	4633      	mov	r3, r6
 800e2e8:	462a      	mov	r2, r5
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	f000 fed1 	bl	800f094 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>
 800e2f2:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2fe <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7f2 ff9c 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e30c:	4603      	mov	r3, r0
 800e30e:	4618      	mov	r0, r3
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	4613      	mov	r3, r2
 800e324:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d82a      	bhi.n	800e382 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e32c:	a201      	add	r2, pc, #4	; (adr r2, 800e334 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e332:	bf00      	nop
 800e334:	0800e345 	.word	0x0800e345
 800e338:	0800e353 	.word	0x0800e353
 800e33c:	0800e367 	.word	0x0800e367
 800e340:	0800e379 	.word	0x0800e379
	      __dest._M_access<const type_info*>() = nullptr;
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f000 f937 	bl	800e5b8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]
	      break;
 800e350:	e017      	b.n	800e382 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e352:	68f8      	ldr	r0, [r7, #12]
 800e354:	f7ff ffd3 	bl	800e2fe <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 800e358:	4604      	mov	r4, r0
 800e35a:	68b8      	ldr	r0, [r7, #8]
 800e35c:	f7ff ff99 	bl	800e292 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e360:	4603      	mov	r3, r0
 800e362:	6023      	str	r3, [r4, #0]
	      break;
 800e364:	e00d      	b.n	800e382 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e366:	68b8      	ldr	r0, [r7, #8]
 800e368:	f7ff ff93 	bl	800e292 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 800e36c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e36e:	4619      	mov	r1, r3
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 feb3 	bl	800f0dc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e376:	e004      	b.n	800e382 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e378:	4621      	mov	r1, r4
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f000 fec0 	bl	800f100 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e380:	bf00      	nop
	  return false;
 800e382:	2300      	movs	r3, #0
	}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd90      	pop	{r4, r7, pc}

0800e38c <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800e398:	68b8      	ldr	r0, [r7, #8]
 800e39a:	f7fe f90d 	bl	800c5b8 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800e39e:	4604      	mov	r4, r0
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f7f2 ff4f 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	2004      	movs	r0, #4
 800e3ac:	f7f2 ff10 	bl	80011d0 <_ZnwjPv>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	6013      	str	r3, [r2, #0]
	  }
 800e3b6:	bf00      	nop
 800e3b8:	3714      	adds	r7, #20
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd90      	pop	{r4, r7, pc}

0800e3be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 fea6 	bl	800f118 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 800e3cc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f000 feae 	bl	800f130 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	bf00      	nop
	}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <_ZSt10__invoke_rIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeES8_EEE5valueES8_E4typeEOSD_DpOSE_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e4:	b086      	sub	sp, #24
 800e3e6:	af02      	add	r7, sp, #8
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	603b      	str	r3, [r7, #0]
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f000 fea8 	bl	800f146 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	68b8      	ldr	r0, [r7, #8]
 800e3fa:	f7fd fb02 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e3fe:	4605      	mov	r5, r0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7fd fafe 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800e406:	4606      	mov	r6, r0
 800e408:	6838      	ldr	r0, [r7, #0]
 800e40a:	f7fd fb05 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800e40e:	4603      	mov	r3, r0
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	4633      	mov	r3, r6
 800e414:	462a      	mov	r2, r5
 800e416:	4621      	mov	r1, r4
 800e418:	4640      	mov	r0, r8
 800e41a:	f000 fe9f 	bl	800f15c <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>
 800e41e:	4603      	mov	r3, r0
    }
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e42a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b082      	sub	sp, #8
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7f2 ff06 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e438:	4603      	mov	r3, r0
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
	...

0800e444 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e444:	b590      	push	{r4, r7, lr}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	4613      	mov	r3, r2
 800e450:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e452:	79fb      	ldrb	r3, [r7, #7]
 800e454:	2b03      	cmp	r3, #3
 800e456:	d82a      	bhi.n	800e4ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
 800e458:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x1c>)
 800e45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45e:	bf00      	nop
 800e460:	0800e471 	.word	0x0800e471
 800e464:	0800e47f 	.word	0x0800e47f
 800e468:	0800e493 	.word	0x0800e493
 800e46c:	0800e4a5 	.word	0x0800e4a5
	      __dest._M_access<const type_info*>() = nullptr;
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f000 f8a1 	bl	800e5b8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800e476:	4603      	mov	r3, r0
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]
	      break;
 800e47c:	e017      	b.n	800e4ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7ff ffd3 	bl	800e42a <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 800e484:	4604      	mov	r4, r0
 800e486:	68b8      	ldr	r0, [r7, #8]
 800e488:	f7ff ff99 	bl	800e3be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e48c:	4603      	mov	r3, r0
 800e48e:	6023      	str	r3, [r4, #0]
	      break;
 800e490:	e00d      	b.n	800e4ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800e492:	68b8      	ldr	r0, [r7, #8]
 800e494:	f7ff ff93 	bl	800e3be <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 800e498:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800e49a:	4619      	mov	r1, r3
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f000 fe81 	bl	800f1a4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>
	      break;
 800e4a2:	e004      	b.n	800e4ae <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800e4a4:	4621      	mov	r1, r4
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 fe8e 	bl	800f1c8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e4ac:	bf00      	nop
	  return false;
 800e4ae:	2300      	movs	r3, #0
	}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd90      	pop	{r4, r7, pc}

0800e4b8 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fe8d 	bl	800f1e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 fe95 	bl	800f1f8 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 fe97 	bl	800f214 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZSt3getILj1EJP12ei_feature_tSt14default_deleteIA_S0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fe98 	bl	800f22e <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e4fe:	4603      	mov	r3, r0
 800e500:	4618      	mov	r0, r3
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZSt12__get_helperILj0EP12ei_feature_tJSt14default_deleteIA_S0_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fe98 	bl	800f246 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>
 800e516:	4603      	mov	r3, r0
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fe99 	bl	800f260 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>
 800e52e:	4603      	mov	r3, r0
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <_ZSt12__get_helperILj0EPN2ei9ei_matrixEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fe9a 	bl	800f27a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>
 800e546:	4603      	mov	r3, r0
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZSt12__get_helperILj0EPvJPFvS0_EEERKT0_RKSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fe9b 	bl	800f294 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>
 800e55e:	4603      	mov	r3, r0
 800e560:	4618      	mov	r0, r3
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EEC1Ev>:
      constexpr _Head_base()
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <_ZSt12__get_helperILj1ESt14default_deleteIN2ei9ei_matrixEEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 fe92 	bl	800f2b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>
 800e58c:	4603      	mov	r3, r0
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <_ZN2ei7EiAllocImE8allocateEj>:
    T *allocate(size_t n)
 800e596:	b580      	push	{r7, lr}
 800e598:	b084      	sub	sp, #16
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f008 feee 	bl	8017388 <_Z9ei_mallocj>
 800e5ac:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
    }
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7f2 fe3f 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZNSt11_Tuple_implILj1EJPFvPvEEEC1IS2_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800e5da:	687c      	ldr	r4, [r7, #4]
 800e5dc:	6838      	ldr	r0, [r7, #0]
 800e5de:	f7fe fa3d 	bl	800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	f000 fe6e 	bl	800f2c8 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>
	{ }
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd90      	pop	{r4, r7, pc}

0800e5f6 <_ZNSt10_Head_baseILj0EPvLb0EEC1IRS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b082      	sub	sp, #8
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e600:	6838      	ldr	r0, [r7, #0]
 800e602:	f7ff fa0d 	bl	800da20 <_ZSt7forwardIRPvEOT_RNSt16remove_referenceIS2_E4typeE>
 800e606:	4603      	mov	r3, r0
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3304      	adds	r3, #4
 800e624:	4618      	mov	r0, r3
 800e626:	f000 fe60 	bl	800f2ea <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>
 800e62a:	4603      	mov	r3, r0
 800e62c:	4618      	mov	r0, r3
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <_ZSt12__get_helperILj1EPFvPvEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fe5f 	bl	800f300 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>
 800e642:	4603      	mov	r3, r0
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e64c:	b40f      	push	{r0, r1, r2, r3}
 800e64e:	b480      	push	{r7}
 800e650:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800e652:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800e656:	4618      	mov	r0, r3
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	b004      	add	sp, #16
 800e660:	4770      	bx	lr

0800e662 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE12_S_constructIfJEEENSt9enable_ifIXsrSt6__and_IJS6_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleIS9_JSB_EEEEEE5valueEvE4typeERS2_PS9_DpOSA_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	6039      	str	r1, [r7, #0]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	4619      	mov	r1, r3
 800e670:	2004      	movs	r0, #4
 800e672:	f7f2 fdad 	bl	80011d0 <_ZnwjPv>
 800e676:	4603      	mov	r3, r0
 800e678:	f04f 0200 	mov.w	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
	}
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <_ZSt8_DestroyIfEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR inline void
    _Destroy(_Tp* __pointer)
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
#endif
    }
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b086      	sub	sp, #24
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	60b9      	str	r1, [r7, #8]
 800e6a4:	607a      	str	r2, [r7, #4]
 800e6a6:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e6a8:	463b      	mov	r3, r7
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	68b9      	ldr	r1, [r7, #8]
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 fe33 	bl	800f31a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	617b      	str	r3, [r7, #20]
 800e6b8:	e013      	b.n	800e6e2 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x48>
	if (__comp(__i, __first))
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	6979      	ldr	r1, [r7, #20]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 f85d 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	697a      	ldr	r2, [r7, #20]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 fe90 	bl	800f3f8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e6d8:	f107 0314 	add.w	r3, r7, #20
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fb fbb5 	bl	8009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
 800e6e2:	1d3a      	adds	r2, r7, #4
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 fe6c 	bl	800f3c8 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1e1      	bne.n	800e6ba <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_T0_+0x20>
    }
 800e6f6:	bf00      	nop
 800e6f8:	bf00      	nop
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e70c:	e00a      	b.n	800e724 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x24>
	{
	  --__last;
 800e70e:	f107 0308 	add.w	r3, r7, #8
 800e712:	4618      	mov	r0, r3
 800e714:	f000 feb0 	bl	800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f000 fe6a 	bl	800f3f8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>
      while (__last - __first > 1)
 800e724:	f107 020c 	add.w	r2, r7, #12
 800e728:	f107 0308 	add.w	r3, r7, #8
 800e72c:	4611      	mov	r1, r2
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe fa81 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e734:	4603      	mov	r3, r0
 800e736:	2b01      	cmp	r3, #1
 800e738:	bfcc      	ite	gt
 800e73a:	2301      	movgt	r3, #1
 800e73c:	2300      	movle	r3, #0
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1e4      	bne.n	800e70e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xe>
	}
    }
 800e744:	bf00      	nop
 800e746:	bf00      	nop
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	425b      	negs	r3, r3
 800e762:	4413      	add	r3, r2
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	f107 020c 	add.w	r2, r7, #12
 800e76a:	f107 0308 	add.w	r3, r7, #8
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7fc ff66 	bl	800b642 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEC1ERKS1_>
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e780:	b580      	push	{r7, lr}
 800e782:	ed2d 8b02 	vpush	{d8}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e790:	f107 0308 	add.w	r3, r7, #8
 800e794:	4618      	mov	r0, r3
 800e796:	f7fb fb69 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e79a:	4603      	mov	r3, r0
 800e79c:	ed93 8a00 	vldr	s16, [r3]
 800e7a0:	1d3b      	adds	r3, r7, #4
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fb fb62 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	edd3 7a00 	vldr	s15, [r3]
 800e7ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b6:	bf4c      	ite	mi
 800e7b8:	2301      	movmi	r3, #1
 800e7ba:	2300      	movpl	r3, #0
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	ecbd 8b02 	vpop	{d8}
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
 800e7d6:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	68b9      	ldr	r1, [r7, #8]
 800e7dc:	f107 0018 	add.w	r0, r7, #24
 800e7e0:	f7ff ffce 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d020      	beq.n	800e82c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x62>
	  if (__comp(__b, __c))
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	f107 0018 	add.w	r0, r7, #24
 800e7f2:	f7ff ffc5 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d004      	beq.n	800e806 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e7fc:	6879      	ldr	r1, [r7, #4]
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f000 fe4a 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e804:	e032      	b.n	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e806:	683a      	ldr	r2, [r7, #0]
 800e808:	68b9      	ldr	r1, [r7, #8]
 800e80a:	f107 0018 	add.w	r0, r7, #24
 800e80e:	f7ff ffb7 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f000 fe3c 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e820:	e024      	b.n	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e822:	68b9      	ldr	r1, [r7, #8]
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	f000 fe37 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e82a:	e01f      	b.n	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__a, __c))
 800e82c:	683a      	ldr	r2, [r7, #0]
 800e82e:	68b9      	ldr	r1, [r7, #8]
 800e830:	f107 0018 	add.w	r0, r7, #24
 800e834:	f7ff ffa4 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d004      	beq.n	800e848 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 fe29 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e846:	e011      	b.n	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
      else if (__comp(__b, __c))
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	f107 0018 	add.w	r0, r7, #24
 800e850:	f7ff ff96 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d004      	beq.n	800e864 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f000 fe1b 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e862:	e003      	b.n	800e86c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_SB_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f000 fe16 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
    }
 800e86c:	bf00      	nop
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
 800e880:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e882:	e004      	b.n	800e88e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
	    ++__first;
 800e884:	f107 030c 	add.w	r3, r7, #12
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fb fadf 	bl	8009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e88e:	463b      	mov	r3, r7
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	68f9      	ldr	r1, [r7, #12]
 800e894:	4618      	mov	r0, r3
 800e896:	f7ff ff73 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1f1      	bne.n	800e884 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x10>
	  --__last;
 800e8a0:	f107 0308 	add.w	r3, r7, #8
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 fde7 	bl	800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e8aa:	e004      	b.n	800e8b6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x42>
	    --__last;
 800e8ac:	f107 0308 	add.w	r3, r7, #8
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 fde1 	bl	800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
	  while (__comp(__pivot, __last))
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	6879      	ldr	r1, [r7, #4]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff ff5f 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1f1      	bne.n	800e8ac <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x38>
	  if (!(__first < __last))
 800e8c8:	f107 0208 	add.w	r2, r7, #8
 800e8cc:	f107 030c 	add.w	r3, r7, #12
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fd78 	bl	800f3c8 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	f083 0301 	eor.w	r3, r3, #1
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d001      	beq.n	800e8e8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x74>
	    return __first;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	e009      	b.n	800e8fc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x88>
	  std::iter_swap(__first, __last);
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f000 fdd4 	bl	800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>
	  ++__first;
 800e8f0:	f107 030c 	add.w	r3, r7, #12
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fb faa9 	bl	8009e4c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEppEv>
	  while (__comp(__first, __pivot))
 800e8fa:	e7c8      	b.n	800e88e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEET_SB_SB_SB_T0_+0x1a>
    }
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <_ZN9__gnu_cxxeqIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e904:	b590      	push	{r4, r7, lr}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f7fc fea7 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e914:	4603      	mov	r3, r0
 800e916:	681c      	ldr	r4, [r3, #0]
 800e918:	6838      	ldr	r0, [r7, #0]
 800e91a:	f7fc fea2 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800e91e:	4603      	mov	r3, r0
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	429c      	cmp	r4, r3
 800e924:	bf0c      	ite	eq
 800e926:	2301      	moveq	r3, #1
 800e928:	2300      	movne	r3, #0
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	bd90      	pop	{r4, r7, pc}

0800e934 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET0_T_SA_S9_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e934:	b590      	push	{r4, r7, lr}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e940:	68f8      	ldr	r0, [r7, #12]
 800e942:	f000 fdc0 	bl	800f4c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e946:	4604      	mov	r4, r0
 800e948:	68b8      	ldr	r0, [r7, #8]
 800e94a:	f000 fdbc 	bl	800f4c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>
 800e94e:	4603      	mov	r3, r0
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	4619      	mov	r1, r3
 800e954:	4620      	mov	r0, r4
 800e956:	f000 fdc1 	bl	800f4dc <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>
 800e95a:	4603      	mov	r3, r0
    }
 800e95c:	4618      	mov	r0, r3
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	bd90      	pop	{r4, r7, pc}

0800e964 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e964:	b590      	push	{r4, r7, lr}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e96e:	1d3b      	adds	r3, r7, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f7fb fa7b 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e976:	4603      	mov	r3, r0
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fc f9b6 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e97e:	4603      	mov	r3, r0
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	60bb      	str	r3, [r7, #8]
      --__next;
 800e988:	f107 0308 	add.w	r3, r7, #8
 800e98c:	4618      	mov	r0, r3
 800e98e:	f000 fd73 	bl	800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e992:	e017      	b.n	800e9c4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e994:	f107 0308 	add.w	r3, r7, #8
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fb fa67 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fc f9a2 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	1d3b      	adds	r3, r7, #4
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fb fa5e 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	6013      	str	r3, [r2, #0]
	  __last = __next;
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	607b      	str	r3, [r7, #4]
	  --__next;
 800e9ba:	f107 0308 	add.w	r3, r7, #8
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 fd5a 	bl	800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>
      while (__comp(__val, __next))
 800e9c4:	f107 010c 	add.w	r1, r7, #12
 800e9c8:	463b      	mov	r3, r7
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 fda6 	bl	800f51e <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1dd      	bne.n	800e994 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e9d8:	f107 030c 	add.w	r3, r7, #12
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fc f984 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	1d3b      	adds	r3, r7, #4
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fb fa40 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	6013      	str	r3, [r2, #0]
    }
 800e9f2:	bf00      	nop
 800e9f4:	3714      	adds	r7, #20
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd90      	pop	{r4, r7, pc}

0800e9fa <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE11_S_max_sizeIKS2_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800e9fa:	b40f      	push	{r0, r1, r2, r3}
 800e9fc:	b480      	push	{r7}
 800e9fe:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800ea00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
	}
 800ea04:	4618      	mov	r0, r3
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	b004      	add	sp, #16
 800ea0e:	4770      	bx	lr

0800ea10 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <_ZNSt16allocator_traitsIN2ei7EiAllocIiEEE12_S_constructIiJRKiEEENSt9enable_ifIXsrSt6__and_IJS8_IJSt6__not_INS3_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISB_JSD_EEEEEE5valueEvE4typeERS2_PSB_DpOSC_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800ea26:	b590      	push	{r4, r7, lr}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	60f8      	str	r0, [r7, #12]
 800ea2e:	60b9      	str	r1, [r7, #8]
 800ea30:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff ffec 	bl	800ea10 <_ZSt7forwardIRKiEOT_RNSt16remove_referenceIS2_E4typeE>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	681c      	ldr	r4, [r3, #0]
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	4619      	mov	r1, r3
 800ea40:	2004      	movs	r0, #4
 800ea42:	f7f2 fbc5 	bl	80011d0 <_ZnwjPv>
 800ea46:	4603      	mov	r3, r0
 800ea48:	601c      	str	r4, [r3, #0]
	}
 800ea4a:	bf00      	nop
 800ea4c:	3714      	adds	r7, #20
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd90      	pop	{r4, r7, pc}

0800ea52 <_ZSt8_DestroyIiEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
    }
 800ea5a:	bf00      	nop
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <_ZSt8_DestroyIN2ei8spectral10processing11freq_peak_tEEvPT_>:
    _Destroy(_Tp* __pointer)
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
    }
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr

0800ea7a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE11_S_max_sizeERKS5_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b084      	sub	sp, #16
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ea82:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ea86:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fd68 	bl	800f55e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ea92:	f107 0208 	add.w	r2, r7, #8
 800ea96:	f107 030c 	add.w	r3, r7, #12
 800ea9a:	4611      	mov	r1, r2
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7f9 f894 	bl	8007bca <_ZSt3minIjERKT_S2_S2_>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	681b      	ldr	r3, [r3, #0]
      }
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800eaae:	b480      	push	{r7}
 800eab0:	b083      	sub	sp, #12
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <_ZN2ei7EiAllocINS_8spectral10processing11freq_peak_tEE8allocateEj>:
    T *allocate(size_t n)
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f008 fc57 	bl	8017388 <_Z9ei_mallocj>
 800eada:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800eadc:	68bb      	ldr	r3, [r7, #8]
    }
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <_ZSt12__relocate_aIPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800eae6:	b5b0      	push	{r4, r5, r7, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	60f8      	str	r0, [r7, #12]
 800eaee:	60b9      	str	r1, [r7, #8]
 800eaf0:	607a      	str	r2, [r7, #4]
 800eaf2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800eaf4:	68f8      	ldr	r0, [r7, #12]
 800eaf6:	f000 fd3f 	bl	800f578 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eafa:	4604      	mov	r4, r0
 800eafc:	68b8      	ldr	r0, [r7, #8]
 800eafe:	f000 fd3b 	bl	800f578 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eb02:	4605      	mov	r5, r0
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fd37 	bl	800f578 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	4629      	mov	r1, r5
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fd3c 	bl	800f58e <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>
 800eb16:	4603      	mov	r3, r0
    }
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bdb0      	pop	{r4, r5, r7, pc}

0800eb20 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800eb2a:	463b      	mov	r3, r7
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f000 fd54 	bl	800f5da <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>
 800eb32:	4603      	mov	r3, r0
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <_ZStneIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 fd4d 	bl	800f5f0 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f083 0301 	eor.w	r3, r3, #1
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEppEv>:
      operator++()
 800eb66:	b480      	push	{r7}
 800eb68:	b083      	sub	sp, #12
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f103 0208 	add.w	r2, r3, #8
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	601a      	str	r2, [r3, #0]
	return *this;
 800eb7a:	687b      	ldr	r3, [r7, #4]
      }
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEdeEv>:
      operator*() const
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4618      	mov	r0, r3
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>:
	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 fd35 	bl	800f61c <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	68b9      	ldr	r1, [r7, #8]
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f000 fd3a 	bl	800f632 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>
 800ebbe:	bf00      	nop
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b086      	sub	sp, #24
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	60f8      	str	r0, [r7, #12]
 800ebce:	60b9      	str	r1, [r7, #8]
 800ebd0:	607a      	str	r2, [r7, #4]
 800ebd2:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800ebd4:	463b      	mov	r3, r7
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	68b9      	ldr	r1, [r7, #8]
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 fd42 	bl	800f664 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	617b      	str	r3, [r7, #20]
 800ebe4:	e013      	b.n	800ec0e <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x48>
	if (__comp(__i, __first))
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	6979      	ldr	r1, [r7, #20]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f000 f85d 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d005      	beq.n	800ec04 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800ebf8:	463b      	mov	r3, r7
 800ebfa:	697a      	ldr	r2, [r7, #20]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 fda8 	bl	800f754 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800ec04:	f107 0314 	add.w	r3, r7, #20
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f000 f920 	bl	800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
 800ec0e:	1d3a      	adds	r2, r7, #4
 800ec10:	f107 0314 	add.w	r3, r7, #20
 800ec14:	4611      	mov	r1, r2
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 fd84 	bl	800f724 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e1      	bne.n	800ebe6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_T0_+0x20>
    }
 800ec22:	bf00      	nop
 800ec24:	bf00      	nop
 800ec26:	3718      	adds	r7, #24
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
      while (__last - __first > 1)
 800ec38:	e00a      	b.n	800ec50 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x24>
	  --__last;
 800ec3a:	f107 0308 	add.w	r3, r7, #8
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 fdd4 	bl	800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 fd82 	bl	800f754 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 800ec50:	f107 020c 	add.w	r2, r7, #12
 800ec54:	f107 0308 	add.w	r3, r7, #8
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fe f977 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	bfcc      	ite	gt
 800ec66:	2301      	movgt	r3, #1
 800ec68:	2300      	movle	r3, #0
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1e4      	bne.n	800ec3a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xe>
    }
 800ec70:	bf00      	nop
 800ec72:	bf00      	nop
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b084      	sub	sp, #16
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	425b      	negs	r3, r3
 800ec8e:	4413      	add	r3, r2
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	f107 020c 	add.w	r2, r7, #12
 800ec96:	f107 0308 	add.w	r3, r7, #8
 800ec9a:	4611      	mov	r1, r2
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fc fff9 	bl	800bc94 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEC1ERKS5_>
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800ecac:	b5b0      	push	{r4, r5, r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 800ecb8:	68fc      	ldr	r4, [r7, #12]
 800ecba:	f107 0308 	add.w	r3, r7, #8
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 f8d6 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	1d3b      	adds	r3, r7, #4
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 f8d1 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f7f4 fea1 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bdb0      	pop	{r4, r5, r7, pc}

0800ece4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	68b9      	ldr	r1, [r7, #8]
 800ecf6:	f107 0018 	add.w	r0, r7, #24
 800ecfa:	f7ff ffd7 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d020      	beq.n	800ed46 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x62>
	  if (__comp(__b, __c))
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	f107 0018 	add.w	r0, r7, #24
 800ed0c:	f7ff ffce 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d004      	beq.n	800ed20 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f000 fd78 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed1e:	e032      	b.n	800ed86 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	  else if (__comp(__a, __c))
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	68b9      	ldr	r1, [r7, #8]
 800ed24:	f107 0018 	add.w	r0, r7, #24
 800ed28:	f7ff ffc0 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d004      	beq.n	800ed3c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x58>
	    std::iter_swap(__result, __c);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f000 fd6a 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed3a:	e024      	b.n	800ed86 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 fd65 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed44:	e01f      	b.n	800ed86 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__a, __c))
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	f107 0018 	add.w	r0, r7, #24
 800ed4e:	f7ff ffad 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x7e>
	std::iter_swap(__result, __a);
 800ed58:	68b9      	ldr	r1, [r7, #8]
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f000 fd57 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed60:	e011      	b.n	800ed86 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
      else if (__comp(__b, __c))
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	6879      	ldr	r1, [r7, #4]
 800ed66:	f107 0018 	add.w	r0, r7, #24
 800ed6a:	f7ff ff9f 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d004      	beq.n	800ed7e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0x9a>
	std::iter_swap(__result, __c);
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f000 fd49 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed7c:	e003      	b.n	800ed86 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_SK_T0_+0xa2>
	std::iter_swap(__result, __b);
 800ed7e:	6879      	ldr	r1, [r7, #4]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f000 fd44 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
    }
 800ed86:	bf00      	nop
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b084      	sub	sp, #16
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	60f8      	str	r0, [r7, #12]
 800ed96:	60b9      	str	r1, [r7, #8]
 800ed98:	607a      	str	r2, [r7, #4]
 800ed9a:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800ed9c:	e004      	b.n	800eda8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
	    ++__first;
 800ed9e:	f107 030c 	add.w	r3, r7, #12
 800eda2:	4618      	mov	r0, r3
 800eda4:	f000 f853 	bl	800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800eda8:	463b      	mov	r3, r7
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	68f9      	ldr	r1, [r7, #12]
 800edae:	4618      	mov	r0, r3
 800edb0:	f7ff ff7c 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800edb4:	4603      	mov	r3, r0
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1f1      	bne.n	800ed9e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x10>
	  --__last;
 800edba:	f107 0308 	add.w	r3, r7, #8
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 fd14 	bl	800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800edc4:	e004      	b.n	800edd0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x42>
	    --__last;
 800edc6:	f107 0308 	add.w	r3, r7, #8
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 fd0e 	bl	800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
	  while (__comp(__pivot, __last))
 800edd0:	463b      	mov	r3, r7
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	6879      	ldr	r1, [r7, #4]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7ff ff68 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1f1      	bne.n	800edc6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x38>
	  if (!(__first < __last))
 800ede2:	f107 0208 	add.w	r2, r7, #8
 800ede6:	f107 030c 	add.w	r3, r7, #12
 800edea:	4611      	mov	r1, r2
 800edec:	4618      	mov	r0, r3
 800edee:	f000 fc99 	bl	800f724 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>
 800edf2:	4603      	mov	r3, r0
 800edf4:	f083 0301 	eor.w	r3, r3, #1
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x74>
	    return __first;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	e009      	b.n	800ee16 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x88>
	  std::iter_swap(__first, __last);
 800ee02:	68b9      	ldr	r1, [r7, #8]
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f000 fd02 	bl	800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>
	  ++__first;
 800ee0a:	f107 030c 	add.w	r3, r7, #12
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 f81d 	bl	800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>
	  while (__comp(__first, __pivot))
 800ee14:	e7c8      	b.n	800eda8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEET_SK_SK_SK_T0_+0x1a>
    }
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ee1e:	b590      	push	{r4, r7, lr}
 800ee20:	b083      	sub	sp, #12
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7fe f8cd 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	681c      	ldr	r4, [r3, #0]
 800ee32:	6838      	ldr	r0, [r7, #0]
 800ee34:	f7fe f8c8 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	429c      	cmp	r4, r3
 800ee3e:	bf0c      	ite	eq
 800ee40:	2301      	moveq	r3, #1
 800ee42:	2300      	movne	r3, #0
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	4618      	mov	r0, r3
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd90      	pop	{r4, r7, pc}

0800ee4e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ee4e:	b480      	push	{r7}
 800ee50:	b083      	sub	sp, #12
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f103 0208 	add.w	r2, r3, #8
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
	return *this;
 800ee62:	687b      	ldr	r3, [r7, #4]
      }
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4618      	mov	r0, r3
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET0_T_SD_SC_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ee9e:	b590      	push	{r4, r7, lr}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	60b9      	str	r1, [r7, #8]
 800eea8:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f000 fcc6 	bl	800f83c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	68b8      	ldr	r0, [r7, #8]
 800eeb4:	f000 fcc2 	bl	800f83c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	4619      	mov	r1, r3
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 fcc7 	bl	800f852 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>
 800eec4:	4603      	mov	r3, r0
    }
 800eec6:	4618      	mov	r0, r3
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd90      	pop	{r4, r7, pc}

0800eece <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800eece:	b590      	push	{r4, r7, lr}
 800eed0:	b085      	sub	sp, #20
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 800eed6:	1d3b      	adds	r3, r7, #4
 800eed8:	4618      	mov	r0, r3
 800eeda:	f000 fcdb 	bl	800f894 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800eede:	4602      	mov	r2, r0
 800eee0:	f107 030c 	add.w	r3, r7, #12
 800eee4:	4611      	mov	r1, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 fcdf 	bl	800f8aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 800eeec:	bf00      	nop
 800eeee:	4620      	mov	r0, r4
 800eef0:	3714      	adds	r7, #20
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd90      	pop	{r4, r7, pc}

0800eef6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800eef6:	b590      	push	{r4, r7, lr}
 800eef8:	b087      	sub	sp, #28
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
 800eefe:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800ef00:	1d3b      	adds	r3, r7, #4
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff ffb4 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7ff ffbc 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef10:	4602      	mov	r2, r0
 800ef12:	f107 0310 	add.w	r3, r7, #16
 800ef16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef1a:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60fb      	str	r3, [r7, #12]
      --__next;
 800ef22:	f107 030c 	add.w	r3, r7, #12
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 fc60 	bl	800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ef2c:	e01a      	b.n	800ef64 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x6e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800ef2e:	f107 030c 	add.w	r3, r7, #12
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff ff9c 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff ffa4 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef40:	4604      	mov	r4, r0
 800ef42:	1d3b      	adds	r3, r7, #4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff ff93 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef52:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	607b      	str	r3, [r7, #4]
	  --__next;
 800ef5a:	f107 030c 	add.w	r3, r7, #12
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 fc44 	bl	800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>
      while (__comp(__val, __next))
 800ef64:	f107 0110 	add.w	r1, r7, #16
 800ef68:	463b      	mov	r3, r7
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f000 fcaa 	bl	800f8c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1da      	bne.n	800ef2e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800ef78:	f107 0310 	add.w	r3, r7, #16
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7ff ff83 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800ef82:	4604      	mov	r4, r0
 800ef84:	1d3b      	adds	r3, r7, #4
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7ff ff72 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4622      	mov	r2, r4
 800ef90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef94:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ef98:	bf00      	nop
 800ef9a:	371c      	adds	r7, #28
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd90      	pop	{r4, r7, pc}

0800efa0 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4618      	mov	r0, r3
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800efb6:	b590      	push	{r4, r7, lr}
 800efb8:	b087      	sub	sp, #28
 800efba:	af00      	add	r7, sp, #0
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800efc8:	e012      	b.n	800eff0 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800efca:	6978      	ldr	r0, [r7, #20]
 800efcc:	f7fd fde6 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800efd0:	4604      	mov	r4, r0
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f7fd fde2 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800efd8:	4603      	mov	r3, r0
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4619      	mov	r1, r3
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 fc87 	bl	800f8f2 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3304      	adds	r3, #4
 800efe8:	60fb      	str	r3, [r7, #12]
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	3304      	adds	r3, #4
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d1e8      	bne.n	800efca <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800eff8:	697b      	ldr	r3, [r7, #20]
    }
 800effa:	4618      	mov	r0, r3
 800effc:	371c      	adds	r7, #28
 800effe:	46bd      	mov	sp, r7
 800f000:	bd90      	pop	{r4, r7, pc}

0800f002 <_ZSteqIPfEbRKSt13move_iteratorIT_ES5_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f002:	b590      	push	{r4, r7, lr}
 800f004:	b083      	sub	sp, #12
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fc8b 	bl	800f928 <_ZNKSt13move_iteratorIPfE4baseEv>
 800f012:	4604      	mov	r4, r0
 800f014:	6838      	ldr	r0, [r7, #0]
 800f016:	f000 fc87 	bl	800f928 <_ZNKSt13move_iteratorIPfE4baseEv>
 800f01a:	4603      	mov	r3, r0
 800f01c:	429c      	cmp	r4, r3
 800f01e:	bf0c      	ite	eq
 800f020:	2301      	moveq	r3, #1
 800f022:	2300      	movne	r3, #0
 800f024:	b2db      	uxtb	r3, r3
 800f026:	4618      	mov	r0, r3
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd90      	pop	{r4, r7, pc}

0800f02e <_ZN2ei7EiAllocIiE8allocateEj>:
    T *allocate(size_t n)
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	6039      	str	r1, [r7, #0]
        auto bytes = n * sizeof(T);
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	60fb      	str	r3, [r7, #12]
        auto ptr = ei_dsp_malloc(bytes);
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f008 f9a2 	bl	8017388 <_Z9ei_mallocj>
 800f044:	60b8      	str	r0, [r7, #8]
        return (T *)ptr;
 800f046:	68bb      	ldr	r3, [r7, #8]
    }
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7f2 f8fe 	bl	800125a <_ZNKSt9_Any_data9_M_accessEv>
 800f05e:	4603      	mov	r3, r0
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f07e:	b480      	push	{r7}
 800f080:	b083      	sub	sp, #12
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <_ZSt13__invoke_implIiRPFijjPfEJjjS0_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	7338      	strb	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
 800f0a0:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f0a2:	68b8      	ldr	r0, [r7, #8]
 800f0a4:	f7ff ffeb 	bl	800f07e <_ZSt7forwardIRPFijjPfEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	681c      	ldr	r4, [r3, #0]
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fc fca8 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	681d      	ldr	r5, [r3, #0]
 800f0b6:	6838      	ldr	r0, [r7, #0]
 800f0b8:	f7fc fca3 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	681e      	ldr	r6, [r3, #0]
 800f0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0c2:	f7fc fca9 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4631      	mov	r1, r6
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	47a0      	blx	r4
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0dc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f0dc:	b590      	push	{r4, r7, lr}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f0e6:	6838      	ldr	r0, [r7, #0]
 800f0e8:	f000 fc2a 	bl	800f940 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	4622      	mov	r2, r4
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 fc2f 	bl	800f956 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd90      	pop	{r4, r7, pc}

0800f100 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fc3c 	bl	800f988 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7f2 f89a 	bl	800125a <_ZNKSt9_Any_data9_M_accessEv>
 800f126:	4603      	mov	r3, r0
 800f128:	4618      	mov	r0, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	4618      	mov	r0, r3
 800f13c:	370c      	adds	r7, #12
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f146:	b480      	push	{r7}
 800f148:	b083      	sub	sp, #12
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <_ZSt13__invoke_implIiRZN14SignalWithAxes10get_signalEvEUljjPfE_JjjS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
 800f162:	7338      	strb	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	607a      	str	r2, [r7, #4]
 800f168:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800f16a:	68b8      	ldr	r0, [r7, #8]
 800f16c:	f7ff ffeb 	bl	800f146 <_ZSt7forwardIRZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800f170:	4606      	mov	r6, r0
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7fc fc45 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f178:	4603      	mov	r3, r0
 800f17a:	681c      	ldr	r4, [r3, #0]
 800f17c:	6838      	ldr	r0, [r7, #0]
 800f17e:	f7fc fc40 	bl	800ba02 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800f182:	4603      	mov	r3, r0
 800f184:	681d      	ldr	r5, [r3, #0]
 800f186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f188:	f7fc fc46 	bl	800ba18 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 800f18c:	4603      	mov	r3, r0
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	462a      	mov	r2, r5
 800f192:	4621      	mov	r1, r4
 800f194:	4630      	mov	r0, r6
 800f196:	f7f8 f95c 	bl	8007452 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 800f19a:	4603      	mov	r3, r0
 800f19c:	4618      	mov	r0, r3
 800f19e:	3714      	adds	r7, #20
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1a4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorIRKS3_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800f1ae:	6838      	ldr	r0, [r7, #0]
 800f1b0:	f000 fbf6 	bl	800f9a0 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	4622      	mov	r2, r4
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fbfb 	bl	800f9b6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800f1c0:	bf00      	nop
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd90      	pop	{r4, r7, pc}

0800f1c8 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fc08 	bl	800f9e8 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEEC1Ev>:
      _Tuple_impl()
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fc09 	bl	800fa00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EEC1Ev>:
      constexpr _Head_base()
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	4618      	mov	r0, r3
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fbf9 	bl	800fa16 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>
 800f224:	4603      	mov	r3, r0
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <_ZSt12__get_helperILj1ESt14default_deleteIA_12ei_feature_tEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800f22e:	b580      	push	{r7, lr}
 800f230:	b082      	sub	sp, #8
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 fbf8 	bl	800fa2c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>
 800f23c:	4603      	mov	r3, r0
 800f23e:	4618      	mov	r0, r3
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <_ZNSt11_Tuple_implILj0EJP12ei_feature_tSt14default_deleteIA_S0_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f246:	b580      	push	{r7, lr}
 800f248:	b082      	sub	sp, #8
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	f000 fbf7 	bl	800fa44 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>
 800f256:	4603      	mov	r3, r0
 800f258:	4618      	mov	r0, r3
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 fbf5 	bl	800fa5a <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>
 800f270:	4603      	mov	r3, r0
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <_ZNSt11_Tuple_implILj0EJPN2ei9ei_matrixESt14default_deleteIS1_EEE7_M_headERKS5_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b082      	sub	sp, #8
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fbf3 	bl	800fa70 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>
 800f28a:	4603      	mov	r3, r0
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <_ZNSt11_Tuple_implILj0EJPvPFvS0_EEE7_M_headERKS3_>:
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 fbf0 	bl	800fa86 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIN2ei9ei_matrixEEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fbef 	bl	800fa9c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZNSt10_Head_baseILj1EPFvPvELb0EEC1IS2_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800f2d2:	6838      	ldr	r0, [r7, #0]
 800f2d4:	f7fd fbc2 	bl	800ca5c <_ZSt7forwardIPFvPvEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	601a      	str	r2, [r3, #0]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800f2ea:	b480      	push	{r7}
 800f2ec:	b083      	sub	sp, #12
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <_ZNSt11_Tuple_implILj1EJPFvPvEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fbd1 	bl	800fab2 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>
 800f310:	4603      	mov	r3, r0
 800f312:	4618      	mov	r0, r3
 800f314:	3708      	adds	r7, #8
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}

0800f31a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f31a:	b590      	push	{r4, r7, lr}
 800f31c:	b089      	sub	sp, #36	; 0x24
 800f31e:	af00      	add	r7, sp, #0
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f326:	f107 020c 	add.w	r2, r7, #12
 800f32a:	f107 0308 	add.w	r3, r7, #8
 800f32e:	4611      	mov	r1, r2
 800f330:	4618      	mov	r0, r3
 800f332:	f7fd fc80 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f336:	4603      	mov	r3, r0
 800f338:	2b01      	cmp	r3, #1
 800f33a:	bfd4      	ite	le
 800f33c:	2301      	movle	r3, #1
 800f33e:	2300      	movgt	r3, #0
 800f340:	b2db      	uxtb	r3, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d13a      	bne.n	800f3bc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa2>
      const _DistanceType __len = __last - __first;
 800f346:	f107 020c 	add.w	r2, r7, #12
 800f34a:	f107 0308 	add.w	r3, r7, #8
 800f34e:	4611      	mov	r1, r2
 800f350:	4618      	mov	r0, r3
 800f352:	f7fd fc70 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f356:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	3b02      	subs	r3, #2
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	da00      	bge.n	800f362 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x48>
 800f360:	3301      	adds	r3, #1
 800f362:	105b      	asrs	r3, r3, #1
 800f364:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f366:	f107 030c 	add.w	r3, r7, #12
 800f36a:	69f9      	ldr	r1, [r7, #28]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe fbcf 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800f372:	4603      	mov	r3, r0
 800f374:	617b      	str	r3, [r7, #20]
 800f376:	f107 0314 	add.w	r3, r7, #20
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fa fd76 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f380:	4603      	mov	r3, r0
 800f382:	4618      	mov	r0, r3
 800f384:	f7fb fcb1 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f388:	4603      	mov	r3, r0
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f38e:	f107 0310 	add.w	r3, r7, #16
 800f392:	4618      	mov	r0, r3
 800f394:	f7fb fca9 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f398:	4603      	mov	r3, r0
 800f39a:	edd3 7a00 	vldr	s15, [r3]
 800f39e:	4623      	mov	r3, r4
 800f3a0:	eeb0 0a67 	vmov.f32	s0, s15
 800f3a4:	69ba      	ldr	r2, [r7, #24]
 800f3a6:	69f9      	ldr	r1, [r7, #28]
 800f3a8:	68f8      	ldr	r0, [r7, #12]
 800f3aa:	f000 fb8d 	bl	800fac8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
	  if (__parent == 0)
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa6>
	  __parent--;
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	61fb      	str	r3, [r7, #28]
      while (true)
 800f3ba:	e7d4      	b.n	800f366 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0x4c>
	return;
 800f3bc:	bf00      	nop
 800f3be:	e000      	b.n	800f3c2 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_RT0_+0xa8>
	    return;
 800f3c0:	bf00      	nop
    }
 800f3c2:	3724      	adds	r7, #36	; 0x24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd90      	pop	{r4, r7, pc}

0800f3c8 <_ZN9__gnu_cxxltIPfSt6vectorIfN2ei7EiAllocIfEEEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f3c8:	b590      	push	{r4, r7, lr}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7fc f945 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	681c      	ldr	r4, [r3, #0]
 800f3dc:	6838      	ldr	r0, [r7, #0]
 800f3de:	f7fc f940 	bl	800b662 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEE4baseEv>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	429c      	cmp	r4, r3
 800f3e8:	bf34      	ite	cc
 800f3ea:	2301      	movcc	r3, #1
 800f3ec:	2300      	movcs	r3, #0
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd90      	pop	{r4, r7, pc}

0800f3f8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_SB_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f3f8:	b5b0      	push	{r4, r5, r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f406:	1d3b      	adds	r3, r7, #4
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fa fd2f 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f40e:	4603      	mov	r3, r0
 800f410:	4618      	mov	r0, r3
 800f412:	f7fb fc6a 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f416:	4603      	mov	r3, r0
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800f41c:	f107 030c 	add.w	r3, r7, #12
 800f420:	4618      	mov	r0, r3
 800f422:	f7fa fd23 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f426:	4603      	mov	r3, r0
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fb fc5e 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f42e:	4604      	mov	r4, r0
 800f430:	1d3b      	adds	r3, r7, #4
 800f432:	4618      	mov	r0, r3
 800f434:	f7fa fd1a 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f438:	4602      	mov	r2, r0
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 800f43e:	f107 020c 	add.w	r2, r7, #12
 800f442:	f107 0308 	add.w	r3, r7, #8
 800f446:	4611      	mov	r1, r2
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fd fbf4 	bl	800cc36 <_ZN9__gnu_cxxmiIPfSt6vectorIfN2ei7EiAllocIfEEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800f44e:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f450:	f107 0314 	add.w	r3, r7, #20
 800f454:	4618      	mov	r0, r3
 800f456:	f7fb fc48 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f45a:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f45c:	edd3 7a00 	vldr	s15, [r3]
 800f460:	462b      	mov	r3, r5
 800f462:	eeb0 0a67 	vmov.f32	s0, s15
 800f466:	4622      	mov	r2, r4
 800f468:	2100      	movs	r1, #0
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f000 fb2c 	bl	800fac8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>
    }
 800f470:	bf00      	nop
 800f472:	3718      	adds	r7, #24
 800f474:	46bd      	mov	sp, r7
 800f476:	bdb0      	pop	{r4, r5, r7, pc}

0800f478 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	1f1a      	subs	r2, r3, #4
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	601a      	str	r2, [r3, #0]
	return *this;
 800f48a:	687b      	ldr	r3, [r7, #4]
      }
 800f48c:	4618      	mov	r0, r3
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f4a2:	1d3b      	adds	r3, r7, #4
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fa fce1 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	463b      	mov	r3, r7
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fa fcdc 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f7fb fc21 	bl	800ad00 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f4be:	bf00      	nop
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd90      	pop	{r4, r7, pc}

0800f4c6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEET_S9_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES8_ET1_T0_SA_S9_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f4dc:	b5b0      	push	{r4, r5, r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f7fd fb7f 	bl	800cbec <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	68b8      	ldr	r0, [r7, #8]
 800f4f2:	f7fd fb7b 	bl	800cbec <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7fd fb77 	bl	800cbec <_ZSt12__niter_baseIPfSt6vectorIfN2ei7EiAllocIfEEEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE>
 800f4fe:	4603      	mov	r3, r0
 800f500:	461a      	mov	r2, r3
 800f502:	4629      	mov	r1, r5
 800f504:	4620      	mov	r0, r4
 800f506:	f000 fb93 	bl	800fc30 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f50a:	4603      	mov	r3, r0
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7fd fb7a 	bl	800cc08 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEES2_ET_S9_T0_>
 800f514:	4603      	mov	r3, r0
    }
 800f516:	4618      	mov	r0, r3
 800f518:	3710      	adds	r7, #16
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bdb0      	pop	{r4, r5, r7, pc}

0800f51e <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f51e:	b580      	push	{r7, lr}
 800f520:	ed2d 8b02 	vpush	{d8}
 800f524:	b084      	sub	sp, #16
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	ed93 8a00 	vldr	s16, [r3]
 800f534:	1d3b      	adds	r3, r7, #4
 800f536:	4618      	mov	r0, r3
 800f538:	f7fa fc98 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800f53c:	4603      	mov	r3, r0
 800f53e:	edd3 7a00 	vldr	s15, [r3]
 800f542:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54a:	bf4c      	ite	mi
 800f54c:	2301      	movmi	r3, #1
 800f54e:	2300      	movpl	r3, #0
 800f550:	b2db      	uxtb	r3, r3
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	ecbd 8b02 	vpop	{d8}
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE8max_sizeERKS5_>:
      max_size(const _Alloc& __a) noexcept
 800f55e:	b580      	push	{r7, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
      { return _S_max_size(__a, 0); }
 800f566:	2100      	movs	r1, #0
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 fb71 	bl	800fc50 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>
 800f56e:	4603      	mov	r3, r0
 800f570:	4618      	mov	r0, r3
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4618      	mov	r0, r3
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f58e:	b590      	push	{r4, r7, lr}
 800f590:	b087      	sub	sp, #28
 800f592:	af00      	add	r7, sp, #0
 800f594:	60f8      	str	r0, [r7, #12]
 800f596:	60b9      	str	r1, [r7, #8]
 800f598:	607a      	str	r2, [r7, #4]
 800f59a:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f5a0:	e012      	b.n	800f5c8 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f5a2:	6978      	ldr	r0, [r7, #20]
 800f5a4:	f7fd fc4f 	bl	800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7fd fc4b 	bl	800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f000 fb55 	bl	800fc66 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	3308      	adds	r3, #8
 800f5c0:	60fb      	str	r3, [r7, #12]
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	3308      	adds	r3, #8
 800f5c6:	617b      	str	r3, [r7, #20]
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d1e8      	bne.n	800f5a2 <_ZSt14__relocate_a_1IPN2ei8spectral10processing11freq_peak_tES4_NS0_7EiAllocIS3_EEET0_T_S8_S7_RT1_+0x14>
      return __cur;
 800f5d0:	697b      	ldr	r3, [r7, #20]
    }
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	371c      	adds	r7, #28
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd90      	pop	{r4, r7, pc}

0800f5da <_ZSt4moveIRPN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f5da:	b480      	push	{r7}
 800f5dc:	b083      	sub	sp, #12
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	370c      	adds	r7, #12
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <_ZSteqIPN2ei8spectral10processing11freq_peak_tEEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 800f5f0:	b590      	push	{r4, r7, lr}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 fb4e 	bl	800fc9c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f600:	4604      	mov	r4, r0
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f000 fb4a 	bl	800fc9c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 800f608:	4603      	mov	r3, r0
 800f60a:	429c      	cmp	r4, r3
 800f60c:	bf0c      	ite	eq
 800f60e:	2301      	moveq	r3, #1
 800f610:	2300      	movne	r3, #0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	4618      	mov	r0, r3
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd90      	pop	{r4, r7, pc}

0800f61c <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4618      	mov	r0, r3
 800f628:	370c      	adds	r7, #12
 800f62a:	46bd      	mov	sp, r7
 800f62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f630:	4770      	bx	lr

0800f632 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE12_S_constructIS4_JS4_EEENSt9enable_ifIXsrSt6__and_IJS9_IJSt6__not_INS6_18__construct_helperIT_JDpT0_EE4typeEESt16is_constructibleISC_JSE_EEEEEE5valueEvE4typeERS5_PSC_DpOSD_>:
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 800f632:	b590      	push	{r4, r7, lr}
 800f634:	b085      	sub	sp, #20
 800f636:	af00      	add	r7, sp, #0
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
 800f63c:	607a      	str	r2, [r7, #4]
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ffec 	bl	800f61c <_ZSt7forwardIN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 800f644:	4604      	mov	r4, r0
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	4619      	mov	r1, r3
 800f64a:	2008      	movs	r0, #8
 800f64c:	f7f1 fdc0 	bl	80011d0 <_ZnwjPv>
 800f650:	4603      	mov	r3, r0
 800f652:	4622      	mov	r2, r4
 800f654:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f658:	e883 0003 	stmia.w	r3, {r0, r1}
	}
 800f65c:	bf00      	nop
 800f65e:	3714      	adds	r7, #20
 800f660:	46bd      	mov	sp, r7
 800f662:	bd90      	pop	{r4, r7, pc}

0800f664 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f664:	b580      	push	{r7, lr}
 800f666:	b08a      	sub	sp, #40	; 0x28
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f670:	f107 020c 	add.w	r2, r7, #12
 800f674:	f107 0308 	add.w	r3, r7, #8
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fd fc67 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f680:	4603      	mov	r3, r0
 800f682:	2b01      	cmp	r3, #1
 800f684:	bfd4      	ite	le
 800f686:	2301      	movle	r3, #1
 800f688:	2300      	movgt	r3, #0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d143      	bne.n	800f718 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb4>
      const _DistanceType __len = __last - __first;
 800f690:	f107 020c 	add.w	r2, r7, #12
 800f694:	f107 0308 	add.w	r3, r7, #8
 800f698:	4611      	mov	r1, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fd fc57 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f6a0:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 800f6a2:	6a3b      	ldr	r3, [r7, #32]
 800f6a4:	3b02      	subs	r3, #2
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	da00      	bge.n	800f6ac <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x48>
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	105b      	asrs	r3, r3, #1
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f6b0:	f107 030c 	add.w	r3, r7, #12
 800f6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe fc66 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	61fb      	str	r3, [r7, #28]
 800f6c0:	f107 031c 	add.w	r3, r7, #28
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff fbd3 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7ff fbdb 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	f107 0314 	add.w	r3, r7, #20
 800f6d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6dc:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f6e0:	f107 0314 	add.w	r3, r7, #20
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fbcf 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	ed93 7a00 	vldr	s14, [r3]
 800f6f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6f6:	7813      	ldrb	r3, [r2, #0]
 800f6f8:	eeb0 0a47 	vmov.f32	s0, s14
 800f6fc:	eef0 0a67 	vmov.f32	s1, s15
 800f700:	6a3a      	ldr	r2, [r7, #32]
 800f702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 fad5 	bl	800fcb4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
	  if (__parent == 0)
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d005      	beq.n	800f71c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xb8>
	  __parent--;
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	3b01      	subs	r3, #1
 800f714:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 800f716:	e7cb      	b.n	800f6b0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0x4c>
	return;
 800f718:	bf00      	nop
 800f71a:	e000      	b.n	800f71e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_RT0_+0xba>
	    return;
 800f71c:	bf00      	nop
    }
 800f71e:	3728      	adds	r7, #40	; 0x28
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEEbRKNS_17__normal_iteratorIT_T0_EESF_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f724:	b590      	push	{r4, r7, lr}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7fd fc4a 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f734:	4603      	mov	r3, r0
 800f736:	681c      	ldr	r4, [r3, #0]
 800f738:	6838      	ldr	r0, [r7, #0]
 800f73a:	f7fd fc45 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800f73e:	4603      	mov	r3, r0
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	429c      	cmp	r4, r3
 800f744:	bf34      	ite	cc
 800f746:	2301      	movcc	r3, #1
 800f748:	2300      	movcs	r3, #0
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	4618      	mov	r0, r3
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	bd90      	pop	{r4, r7, pc}

0800f754 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b087      	sub	sp, #28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f762:	1d3b      	adds	r3, r7, #4
 800f764:	4618      	mov	r0, r3
 800f766:	f7ff fb83 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f76a:	4603      	mov	r3, r0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff fb8b 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f772:	4602      	mov	r2, r0
 800f774:	f107 0310 	add.w	r3, r7, #16
 800f778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f77c:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800f780:	f107 030c 	add.w	r3, r7, #12
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fb73 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f78a:	4603      	mov	r3, r0
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff fb7b 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f792:	4604      	mov	r4, r0
 800f794:	1d3b      	adds	r3, r7, #4
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff fb6a 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f79c:	4603      	mov	r3, r0
 800f79e:	4622      	mov	r2, r4
 800f7a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7a4:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 800f7a8:	f107 020c 	add.w	r2, r7, #12
 800f7ac:	f107 0308 	add.w	r3, r7, #8
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fd fbcb 	bl	800cf4e <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSD_SG_>
 800f7b8:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f7ba:	f107 0310 	add.w	r3, r7, #16
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7ff fb62 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800f7c4:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	ed93 7a00 	vldr	s14, [r3]
 800f7cc:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7d0:	7813      	ldrb	r3, [r2, #0]
 800f7d2:	eeb0 0a47 	vmov.f32	s0, s14
 800f7d6:	eef0 0a67 	vmov.f32	s1, s15
 800f7da:	4622      	mov	r2, r4
 800f7dc:	2100      	movs	r1, #0
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 fa68 	bl	800fcb4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>
    }
 800f7e4:	bf00      	nop
 800f7e6:	371c      	adds	r7, #28
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd90      	pop	{r4, r7, pc}

0800f7ec <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f1a3 0208 	sub.w	r2, r3, #8
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	601a      	str	r2, [r3, #0]
	return *this;
 800f800:	687b      	ldr	r3, [r7, #4]
      }
 800f802:	4618      	mov	r0, r3
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f80e:	b590      	push	{r4, r7, lr}
 800f810:	b083      	sub	sp, #12
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f818:	1d3b      	adds	r3, r7, #4
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7ff fb28 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f820:	4604      	mov	r4, r0
 800f822:	463b      	mov	r3, r7
 800f824:	4618      	mov	r0, r3
 800f826:	f7ff fb23 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f82a:	4603      	mov	r3, r0
 800f82c:	4619      	mov	r1, r3
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 fb05 	bl	800fe3e <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd90      	pop	{r4, r7, pc}

0800f83c <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEET_SC_>:
    __miter_base(_Iterator __it)
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEESB_ET1_T0_SD_SC_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f852:	b5b0      	push	{r4, r5, r7, lr}
 800f854:	b084      	sub	sp, #16
 800f856:	af00      	add	r7, sp, #0
 800f858:	60f8      	str	r0, [r7, #12]
 800f85a:	60b9      	str	r1, [r7, #8]
 800f85c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f000 fb14 	bl	800fe8c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f864:	4604      	mov	r4, r0
 800f866:	68b8      	ldr	r0, [r7, #8]
 800f868:	f000 fb10 	bl	800fe8c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f86c:	4605      	mov	r5, r0
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 fb0c 	bl	800fe8c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800f874:	4603      	mov	r3, r0
 800f876:	461a      	mov	r2, r3
 800f878:	4629      	mov	r1, r5
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 fb14 	bl	800fea8 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800f880:	4603      	mov	r3, r0
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fb1f 	bl	800fec8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>
 800f88a:	4603      	mov	r3, r0
    }
 800f88c:	4618      	mov	r0, r3
 800f88e:	3710      	adds	r7, #16
 800f890:	46bd      	mov	sp, r7
 800f892:	bdb0      	pop	{r4, r5, r7, pc}

0800f894 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4618      	mov	r0, r3
 800f8a0:	370c      	adds	r7, #12
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr

0800f8aa <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fd fbaa 	bl	800d010 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 800f8c6:	b590      	push	{r4, r7, lr}
 800f8c8:	b085      	sub	sp, #20
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	60f8      	str	r0, [r7, #12]
 800f8ce:	60b9      	str	r1, [r7, #8]
 800f8d0:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 800f8d2:	68fc      	ldr	r4, [r7, #12]
 800f8d4:	1d3b      	adds	r3, r7, #4
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff faca 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	461a      	mov	r2, r3
 800f8e0:	68b9      	ldr	r1, [r7, #8]
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f7f4 f89a 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd90      	pop	{r4, r7, pc}

0800f8f2 <_ZSt19__relocate_object_aIffN2ei7EiAllocIfEEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	60f8      	str	r0, [r7, #12]
 800f8fa:	60b9      	str	r1, [r7, #8]
 800f8fc:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800f8fe:	68b8      	ldr	r0, [r7, #8]
 800f900:	f7fb f9f3 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f904:	4603      	mov	r3, r0
 800f906:	461a      	mov	r2, r3
 800f908:	68f9      	ldr	r1, [r7, #12]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7fd fd42 	bl	800d394 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE9constructIfJfEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS2_PT_DpOS5_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800f910:	68b8      	ldr	r0, [r7, #8]
 800f912:	f7fd f943 	bl	800cb9c <_ZSt11__addressofIfEPT_RS0_>
 800f916:	4603      	mov	r3, r0
 800f918:	4619      	mov	r1, r3
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7fd f949 	bl	800cbb2 <_ZNSt16allocator_traitsIN2ei7EiAllocIfEEE7destroyIfEEvRS2_PT_>
    }
 800f920:	bf00      	nop
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	4618      	mov	r0, r3
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4618      	mov	r0, r3
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f956:	b590      	push	{r4, r7, lr}
 800f958:	b085      	sub	sp, #20
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	60f8      	str	r0, [r7, #12]
 800f95e:	60b9      	str	r1, [r7, #8]
 800f960:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f962:	68b8      	ldr	r0, [r7, #8]
 800f964:	f7ff ffec 	bl	800f940 <_ZSt7forwardIRKPFijjPfEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f968:	4603      	mov	r3, r0
 800f96a:	681c      	ldr	r4, [r3, #0]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7f1 fc69 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f972:	4603      	mov	r3, r0
 800f974:	4619      	mov	r1, r3
 800f976:	2004      	movs	r0, #4
 800f978:	f7f1 fc2a 	bl	80011d0 <_ZnwjPv>
 800f97c:	4603      	mov	r3, r0
 800f97e:	601c      	str	r4, [r3, #0]
	  }
 800f980:	bf00      	nop
 800f982:	3714      	adds	r7, #20
 800f984:	46bd      	mov	sp, r7
 800f986:	bd90      	pop	{r4, r7, pc}

0800f988 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7f1 fc57 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f996:	4603      	mov	r3, r0
 800f998:	4618      	mov	r0, r3
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	370c      	adds	r7, #12
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr

0800f9b6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E9_M_createIRKS3_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800f9b6:	b590      	push	{r4, r7, lr}
 800f9b8:	b085      	sub	sp, #20
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	60f8      	str	r0, [r7, #12]
 800f9be:	60b9      	str	r1, [r7, #8]
 800f9c0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f7ff ffec 	bl	800f9a0 <_ZSt7forwardIRKZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	f7f1 fc3a 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	2004      	movs	r0, #4
 800f9d6:	f7f1 fbfb 	bl	80011d0 <_ZnwjPv>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	6013      	str	r3, [r2, #0]
	  }
 800f9e0:	bf00      	nop
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd90      	pop	{r4, r7, pc}

0800f9e8 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7f1 fc27 	bl	8001244 <_ZNSt9_Any_data9_M_accessEv>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EEC1Ev>:
      constexpr _Head_base()
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa16:	b480      	push	{r7}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr

0800fa2c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_12ei_feature_tEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 fa5e 	bl	800fef6 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <_ZNSt10_Head_baseILj0EP12ei_feature_tLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	370c      	adds	r7, #12
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa5a:	b480      	push	{r7}
 800fa5c:	b083      	sub	sp, #12
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <_ZNSt10_Head_baseILj0EPN2ei9ei_matrixELb0EE7_M_headERKS3_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr

0800fa86 <_ZNSt10_Head_baseILj0EPvLb0EE7_M_headERKS1_>:
 800fa86:	b480      	push	{r7}
 800fa88:	b083      	sub	sp, #12
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4618      	mov	r0, r3
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <_ZNSt10_Head_baseILj1ESt14default_deleteIN2ei9ei_matrixEELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <_ZNSt10_Head_baseILj1EPFvPvELb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fab2:	b480      	push	{r7}
 800fab4:	b083      	sub	sp, #12
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fac8:	b5b0      	push	{r4, r5, r7, lr}
 800faca:	b08e      	sub	sp, #56	; 0x38
 800facc:	af00      	add	r7, sp, #0
 800face:	6178      	str	r0, [r7, #20]
 800fad0:	6139      	str	r1, [r7, #16]
 800fad2:	60fa      	str	r2, [r7, #12]
 800fad4:	ed87 0a02 	vstr	s0, [r7, #8]
 800fad8:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800fae2:	e042      	b.n	800fb6a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	3301      	adds	r3, #1
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800faec:	f107 0314 	add.w	r3, r7, #20
 800faf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fe f80c 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800faf8:	4604      	mov	r4, r0
 800fafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fafc:	1e5a      	subs	r2, r3, #1
 800fafe:	f107 0314 	add.w	r3, r7, #20
 800fb02:	4611      	mov	r1, r2
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7fe f803 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	1d3b      	adds	r3, r7, #4
 800fb0e:	4621      	mov	r1, r4
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fe fe35 	bl	800e780 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEESA_EEbT_T0_>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x5a>
	    __secondChild--;
 800fb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fb22:	f107 0314 	add.w	r3, r7, #20
 800fb26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fd fff1 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	623b      	str	r3, [r7, #32]
 800fb32:	f107 0320 	add.w	r3, r7, #32
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fa f998 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fb f8d3 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fb44:	4604      	mov	r4, r0
 800fb46:	f107 0314 	add.w	r3, r7, #20
 800fb4a:	6939      	ldr	r1, [r7, #16]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fd ffdf 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fb52:	4603      	mov	r3, r0
 800fb54:	627b      	str	r3, [r7, #36]	; 0x24
 800fb56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fa f986 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fb60:	4602      	mov	r2, r0
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 800fb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb68:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	da00      	bge.n	800fb74 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xac>
 800fb72:	3301      	adds	r3, #1
 800fb74:	105b      	asrs	r3, r3, #1
 800fb76:	461a      	mov	r2, r3
 800fb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	dbb2      	blt.n	800fae4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d134      	bne.n	800fbf2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	3b02      	subs	r3, #2
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	da00      	bge.n	800fb92 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0xca>
 800fb90:	3301      	adds	r3, #1
 800fb92:	105b      	asrs	r3, r3, #1
 800fb94:	461a      	mov	r2, r3
 800fb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d12a      	bne.n	800fbf2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_+0x12a>
	  __secondChild = 2 * (__secondChild + 1);
 800fb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb9e:	3301      	adds	r3, #1
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba6:	1e5a      	subs	r2, r3, #1
 800fba8:	f107 0314 	add.w	r3, r7, #20
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd ffae 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7fa f955 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fb f890 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	f107 0314 	add.w	r3, r7, #20
 800fbd0:	6939      	ldr	r1, [r7, #16]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fd ff9c 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7fa f943 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 800fbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fbf2:	1d3b      	adds	r3, r7, #4
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f000 f989 	bl	800ff0c <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 800fbfa:	f107 031c 	add.w	r3, r7, #28
 800fbfe:	4629      	mov	r1, r5
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f1 faf9 	bl	80011f8 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fc06:	f107 0308 	add.w	r3, r7, #8
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fb f86d 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fc10:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fc12:	edd3 7a00 	vldr	s15, [r3]
 800fc16:	f107 031c 	add.w	r3, r7, #28
 800fc1a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc20:	6939      	ldr	r1, [r7, #16]
 800fc22:	6978      	ldr	r0, [r7, #20]
 800fc24:	f000 f97d 	bl	800ff22 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>
    }
 800fc28:	bf00      	nop
 800fc2a:	3738      	adds	r7, #56	; 0x38
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bdb0      	pop	{r4, r5, r7, pc}

0800fc30 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b084      	sub	sp, #16
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	60b9      	str	r1, [r7, #8]
 800fc3a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	68b9      	ldr	r1, [r7, #8]
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f000 f9dd 	bl	8010000 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800fc46:	4603      	mov	r3, r0
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE11_S_max_sizeIKS5_EEjRT_z>:
	_S_max_size(_Alloc2&, ...)
 800fc50:	b40f      	push	{r0, r1, r2, r3}
 800fc52:	b480      	push	{r7}
 800fc54:	af00      	add	r7, sp, #0
	    / sizeof(value_type);
 800fc56:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
	}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	b004      	add	sp, #16
 800fc64:	4770      	bx	lr

0800fc66 <_ZSt19__relocate_object_aIN2ei8spectral10processing11freq_peak_tES3_NS0_7EiAllocIS3_EEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	60f8      	str	r0, [r7, #12]
 800fc6e:	60b9      	str	r1, [r7, #8]
 800fc70:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fc72:	68b8      	ldr	r0, [r7, #8]
 800fc74:	f7ff f908 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	68f9      	ldr	r1, [r7, #12]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7fe ff8e 	bl	800eba0 <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE9constructIS4_JS4_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS5_PT_DpOS8_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fc84:	68b8      	ldr	r0, [r7, #8]
 800fc86:	f7fd f8de 	bl	800ce46 <_ZSt11__addressofIN2ei8spectral10processing11freq_peak_tEEPT_RS4_>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fd f8e4 	bl	800ce5c <_ZNSt16allocator_traitsIN2ei7EiAllocINS0_8spectral10processing11freq_peak_tEEEE7destroyIS4_EEvRS5_PT_>
    }
 800fc94:	bf00      	nop
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	370c      	adds	r7, #12
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b08f      	sub	sp, #60	; 0x3c
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6178      	str	r0, [r7, #20]
 800fcbc:	6139      	str	r1, [r7, #16]
 800fcbe:	60fa      	str	r2, [r7, #12]
 800fcc0:	eeb0 7a40 	vmov.f32	s14, s0
 800fcc4:	eef0 7a60 	vmov.f32	s15, s1
 800fcc8:	703b      	strb	r3, [r7, #0]
 800fcca:	ed87 7a01 	vstr	s14, [r7, #4]
 800fcce:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800fcda:	e045      	b.n	800fd68 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xb4>
	  __secondChild = 2 * (__secondChild + 1);
 800fcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcde:	3301      	adds	r3, #1
 800fce0:	005b      	lsls	r3, r3, #1
 800fce2:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800fce4:	f107 0314 	add.w	r3, r7, #20
 800fce8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fe f94c 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf4:	1e5a      	subs	r2, r3, #1
 800fcf6:	f107 0314 	add.w	r3, r7, #20
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe f943 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd02:	4602      	mov	r2, r0
 800fd04:	463b      	mov	r3, r7
 800fd06:	4621      	mov	r1, r4
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fe ffcf 	bl	800ecac <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEESJ_EEbT_T0_>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d002      	beq.n	800fd1a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x66>
	    __secondChild--;
 800fd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd16:	3b01      	subs	r3, #1
 800fd18:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800fd1a:	f107 0314 	add.w	r3, r7, #20
 800fd1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe f931 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd26:	4603      	mov	r3, r0
 800fd28:	623b      	str	r3, [r7, #32]
 800fd2a:	f107 0320 	add.w	r3, r7, #32
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff f89e 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd34:	4603      	mov	r3, r0
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff f8a6 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fd3c:	4604      	mov	r4, r0
 800fd3e:	f107 0314 	add.w	r3, r7, #20
 800fd42:	6939      	ldr	r1, [r7, #16]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fe f91f 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
 800fd4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff f88c 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	4622      	mov	r2, r4
 800fd5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd60:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3b01      	subs	r3, #1
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	da00      	bge.n	800fd72 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xbe>
 800fd70:	3301      	adds	r3, #1
 800fd72:	105b      	asrs	r3, r3, #1
 800fd74:	461a      	mov	r2, r3
 800fd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	dbaf      	blt.n	800fcdc <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x28>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d137      	bne.n	800fdf6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	3b02      	subs	r3, #2
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	da00      	bge.n	800fd90 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0xdc>
 800fd8e:	3301      	adds	r3, #1
 800fd90:	105b      	asrs	r3, r3, #1
 800fd92:	461a      	mov	r2, r3
 800fd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d12d      	bne.n	800fdf6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_+0x142>
	  __secondChild = 2 * (__secondChild + 1);
 800fd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	005b      	lsls	r3, r3, #1
 800fda0:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800fda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda4:	1e5a      	subs	r2, r3, #1
 800fda6:	f107 0314 	add.w	r3, r7, #20
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fe f8eb 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7ff f858 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7ff f860 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fdc8:	4604      	mov	r4, r0
 800fdca:	f107 0314 	add.w	r3, r7, #20
 800fdce:	6939      	ldr	r1, [r7, #16]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe f8d9 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff f846 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 800fde4:	4603      	mov	r3, r0
 800fde6:	4622      	mov	r2, r4
 800fde8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdec:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 800fdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 800fdf6:	463b      	mov	r3, r7
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fd4b 	bl	800f894 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	f107 031c 	add.w	r3, r7, #28
 800fe04:	4611      	mov	r1, r2
 800fe06:	4618      	mov	r0, r3
 800fe08:	f000 f90a 	bl	8010020 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800fe0c:	1d3b      	adds	r3, r7, #4
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff f83a 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe14:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800fe16:	f107 021c 	add.w	r2, r7, #28
 800fe1a:	ed93 7a00 	vldr	s14, [r3]
 800fe1e:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe22:	4613      	mov	r3, r2
 800fe24:	eeb0 0a47 	vmov.f32	s0, s14
 800fe28:	eef0 0a67 	vmov.f32	s1, s15
 800fe2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe2e:	6939      	ldr	r1, [r7, #16]
 800fe30:	6978      	ldr	r0, [r7, #20]
 800fe32:	f000 f903 	bl	801003c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>
    }
 800fe36:	bf00      	nop
 800fe38:	373c      	adds	r7, #60	; 0x3c
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd90      	pop	{r4, r7, pc}

0800fe3e <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
 800fe46:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff f81d 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	f107 0308 	add.w	r3, r7, #8
 800fe54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe58:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800fe5c:	6838      	ldr	r0, [r7, #0]
 800fe5e:	f7ff f813 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe62:	4602      	mov	r2, r0
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe6a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800fe6e:	f107 0308 	add.w	r3, r7, #8
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff f808 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe80:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fe84:	bf00      	nop
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800fe94:	1d3b      	adds	r3, r7, #4
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fd f896 	bl	800cfc8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEE4baseEv>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4618      	mov	r0, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <_ZSt23__copy_move_backward_a1ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800feb4:	687a      	ldr	r2, [r7, #4]
 800feb6:	68b9      	ldr	r1, [r7, #8]
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f000 f938 	bl	801012e <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800febe:	4603      	mov	r3, r0
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEES6_ET_SC_T0_>:
    __niter_wrap(_From __from, _To __res)
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7ff ffda 	bl	800fe8c <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_NS0_7EiAllocIS3_EEEET_N9__gnu_cxx17__normal_iteratorIS9_T0_EE>
 800fed8:	4602      	mov	r2, r0
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	1a9b      	subs	r3, r3, r2
 800fede:	10db      	asrs	r3, r3, #3
 800fee0:	461a      	mov	r2, r3
 800fee2:	1d3b      	adds	r3, r7, #4
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fe f84e 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 800feec:	4603      	mov	r3, r0
 800feee:	4618      	mov	r0, r3
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_12ei_feature_tELb1EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800fef6:	b480      	push	{r7}
 800fef8:	b083      	sub	sp, #12
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4618      	mov	r0, r3
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800ff22:	b590      	push	{r4, r7, lr}
 800ff24:	b08b      	sub	sp, #44	; 0x2c
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6178      	str	r0, [r7, #20]
 800ff2a:	6139      	str	r1, [r7, #16]
 800ff2c:	60fa      	str	r2, [r7, #12]
 800ff2e:	ed87 0a02 	vstr	s0, [r7, #8]
 800ff32:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	3b01      	subs	r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	da00      	bge.n	800ff3e <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x1c>
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	105b      	asrs	r3, r3, #1
 800ff40:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800ff42:	e02a      	b.n	800ff9a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x78>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800ff44:	f107 0314 	add.w	r3, r7, #20
 800ff48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fd fde0 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff50:	4603      	mov	r3, r0
 800ff52:	61bb      	str	r3, [r7, #24]
 800ff54:	f107 0318 	add.w	r3, r7, #24
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7f9 ff87 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fa fec2 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ff66:	4604      	mov	r4, r0
 800ff68:	f107 0314 	add.w	r3, r7, #20
 800ff6c:	6939      	ldr	r1, [r7, #16]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fd fdce 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ff74:	4603      	mov	r3, r0
 800ff76:	61fb      	str	r3, [r7, #28]
 800ff78:	f107 031c 	add.w	r3, r7, #28
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7f9 ff75 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800ff82:	4602      	mov	r2, r0
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 800ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8a:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	da00      	bge.n	800ff96 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x74>
 800ff94:	3301      	adds	r3, #1
 800ff96:	105b      	asrs	r3, r3, #1
 800ff98:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	dd11      	ble.n	800ffc6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ffa2:	f107 0314 	add.w	r3, r7, #20
 800ffa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fd fdb1 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ffae:	4601      	mov	r1, r0
 800ffb0:	f107 0308 	add.w	r3, r7, #8
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f8c9 	bl	801014e <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa4>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e000      	b.n	800ffc8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0xa6>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1bb      	bne.n	800ff44 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SC_T1_RT2_+0x22>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fa fe8a 	bl	800acea <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	f107 0314 	add.w	r3, r7, #20
 800ffdc:	6939      	ldr	r1, [r7, #16]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fd fd96 	bl	800db10 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEplEi>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	623b      	str	r3, [r7, #32]
 800ffe8:	f107 0320 	add.w	r3, r7, #32
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f9 ff3d 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 800fff2:	4602      	mov	r2, r0
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	6013      	str	r3, [r2, #0]
    }
 800fff8:	bf00      	nop
 800fffa:	372c      	adds	r7, #44	; 0x2c
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd90      	pop	{r4, r7, pc}

08010000 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	68b9      	ldr	r1, [r7, #8]
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	f000 f8b9 	bl	8010188 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8010016:	4603      	mov	r3, r0
    }
 8010018:	4618      	mov	r0, r3
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	4618      	mov	r0, r3
 801002e:	f7fc ffef 	bl	800d010 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4618      	mov	r0, r3
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 801003c:	b590      	push	{r4, r7, lr}
 801003e:	b08b      	sub	sp, #44	; 0x2c
 8010040:	af00      	add	r7, sp, #0
 8010042:	6178      	str	r0, [r7, #20]
 8010044:	6139      	str	r1, [r7, #16]
 8010046:	60fa      	str	r2, [r7, #12]
 8010048:	eeb0 7a40 	vmov.f32	s14, s0
 801004c:	eef0 7a60 	vmov.f32	s15, s1
 8010050:	603b      	str	r3, [r7, #0]
 8010052:	ed87 7a01 	vstr	s14, [r7, #4]
 8010056:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	3b01      	subs	r3, #1
 801005e:	2b00      	cmp	r3, #0
 8010060:	da00      	bge.n	8010064 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x28>
 8010062:	3301      	adds	r3, #1
 8010064:	105b      	asrs	r3, r3, #1
 8010066:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8010068:	e02d      	b.n	80100c6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x8a>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 801006a:	f107 0314 	add.w	r3, r7, #20
 801006e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd ff89 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 8010076:	4603      	mov	r3, r0
 8010078:	61bb      	str	r3, [r7, #24]
 801007a:	f107 0318 	add.w	r3, r7, #24
 801007e:	4618      	mov	r0, r3
 8010080:	f7fe fef6 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 8010084:	4603      	mov	r3, r0
 8010086:	4618      	mov	r0, r3
 8010088:	f7fe fefe 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 801008c:	4604      	mov	r4, r0
 801008e:	f107 0314 	add.w	r3, r7, #20
 8010092:	6939      	ldr	r1, [r7, #16]
 8010094:	4618      	mov	r0, r3
 8010096:	f7fd ff77 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801009a:	4603      	mov	r3, r0
 801009c:	61fb      	str	r3, [r7, #28]
 801009e:	f107 031c 	add.w	r3, r7, #28
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fe fee4 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80100a8:	4603      	mov	r3, r0
 80100aa:	4622      	mov	r2, r4
 80100ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100b0:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	3b01      	subs	r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	da00      	bge.n	80100c2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x86>
 80100c0:	3301      	adds	r3, #1
 80100c2:	105b      	asrs	r3, r3, #1
 80100c4:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80100c6:	693a      	ldr	r2, [r7, #16]
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	dd10      	ble.n	80100f0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 80100ce:	f107 0314 	add.w	r3, r7, #20
 80100d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fd ff57 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 80100da:	4601      	mov	r1, r0
 80100dc:	1d3b      	adds	r3, r7, #4
 80100de:	461a      	mov	r2, r3
 80100e0:	6838      	ldr	r0, [r7, #0]
 80100e2:	f000 f873 	bl	80101cc <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb4>
 80100ec:	2301      	movs	r3, #1
 80100ee:	e000      	b.n	80100f2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0xb6>
 80100f0:	2300      	movs	r3, #0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d1b9      	bne.n	801006a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_RT2_+0x2e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80100f6:	1d3b      	adds	r3, r7, #4
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fe fec5 	bl	800ee88 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80100fe:	4604      	mov	r4, r0
 8010100:	f107 0314 	add.w	r3, r7, #20
 8010104:	6939      	ldr	r1, [r7, #16]
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd ff3e 	bl	800df88 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEplEi>
 801010c:	4603      	mov	r3, r0
 801010e:	623b      	str	r3, [r7, #32]
 8010110:	f107 0320 	add.w	r3, r7, #32
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe feab 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 801011a:	4603      	mov	r3, r0
 801011c:	4622      	mov	r2, r4
 801011e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010122:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010126:	bf00      	nop
 8010128:	372c      	adds	r7, #44	; 0x2c
 801012a:	46bd      	mov	sp, r7
 801012c:	bd90      	pop	{r4, r7, pc}

0801012e <_ZSt23__copy_move_backward_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801012e:	b580      	push	{r7, lr}
 8010130:	b084      	sub	sp, #16
 8010132:	af00      	add	r7, sp, #0
 8010134:	60f8      	str	r0, [r7, #12]
 8010136:	60b9      	str	r1, [r7, #8]
 8010138:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	68b9      	ldr	r1, [r7, #8]
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f000 f85b 	bl	80101fa <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8010144:	4603      	mov	r3, r0
    }
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 801014e:	b580      	push	{r7, lr}
 8010150:	b084      	sub	sp, #16
 8010152:	af00      	add	r7, sp, #0
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4618      	mov	r0, r3
 8010160:	f7f9 fe84 	bl	8009e6c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEdeEv>
 8010164:	4603      	mov	r3, r0
 8010166:	ed93 7a00 	vldr	s14, [r3]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	edd3 7a00 	vldr	s15, [r3]
 8010170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010178:	bf4c      	ite	mi
 801017a:	2301      	movmi	r3, #1
 801017c:	2300      	movpl	r3, #0
 801017e:	b2db      	uxtb	r3, r3
 8010180:	4618      	mov	r0, r3
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	109b      	asrs	r3, r3, #2
 801019c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00a      	beq.n	80101ba <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	425b      	negs	r3, r3
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	18d0      	adds	r0, r2, r3
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	461a      	mov	r2, r3
 80101b4:	68f9      	ldr	r1, [r7, #12]
 80101b6:	f00e faeb 	bl	801e790 <memmove>
	  return __result - _Num;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	425b      	negs	r3, r3
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	4413      	add	r3, r2
	}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_NS2_7EiAllocIS7_EEEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80101cc:	b590      	push	{r4, r7, lr}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 80101d8:	68fc      	ldr	r4, [r7, #12]
 80101da:	f107 0308 	add.w	r3, r7, #8
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fe fe46 	bl	800ee70 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_NS1_7EiAllocIS4_EEEEdeEv>
 80101e4:	4603      	mov	r3, r0
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4619      	mov	r1, r3
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7f3 fc16 	bl	8003a1c <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80101f0:	4603      	mov	r3, r0
 80101f2:	4618      	mov	r0, r3
 80101f4:	3714      	adds	r7, #20
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd90      	pop	{r4, r7, pc}

080101fa <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b086      	sub	sp, #24
 80101fe:	af00      	add	r7, sp, #0
 8010200:	60f8      	str	r0, [r7, #12]
 8010202:	60b9      	str	r1, [r7, #8]
 8010204:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010206:	68ba      	ldr	r2, [r7, #8]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	10db      	asrs	r3, r3, #3
 801020e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010216:	697b      	ldr	r3, [r7, #20]
 8010218:	00db      	lsls	r3, r3, #3
 801021a:	425b      	negs	r3, r3
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	18d0      	adds	r0, r2, r3
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	00db      	lsls	r3, r3, #3
 8010224:	461a      	mov	r2, r3
 8010226:	68f9      	ldr	r1, [r7, #12]
 8010228:	f00e fab2 	bl	801e790 <memmove>
	  return __result - _Num;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	00db      	lsls	r3, r3, #3
 8010230:	425b      	negs	r3, r3
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	4413      	add	r3, r2
	}
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
	...

08010240 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d108      	bne.n	8010262 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010256:	4293      	cmp	r3, r2
 8010258:	d103      	bne.n	8010262 <_Z41__static_initialization_and_destruction_0ii+0x22>
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories,
    .object_detection_nms = ei_object_detection_nms
};

ei_impulse_handle_t impulse_handle_365511_0 = ei_impulse_handle_t( &impulse_365511_0 );
 801025a:	4909      	ldr	r1, [pc, #36]	; (8010280 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801025c:	4809      	ldr	r0, [pc, #36]	; (8010284 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 801025e:	f7f2 fe2f 	bl	8002ec0 <_ZN19ei_impulse_handle_tC1EPK10ei_impulse>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d107      	bne.n	8010278 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801026e:	4293      	cmp	r3, r2
 8010270:	d102      	bne.n	8010278 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8010272:	4804      	ldr	r0, [pc, #16]	; (8010284 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8010274:	f7f7 f985 	bl	8007582 <_ZN19ei_impulse_handle_tD1Ev>
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	08024470 	.word	0x08024470
 8010284:	200053b0 	.word	0x200053b0

08010288 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
 801028c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010290:	2001      	movs	r0, #1
 8010292:	f7ff ffd5 	bl	8010240 <_Z41__static_initialization_and_destruction_0ii>
 8010296:	bd80      	pop	{r7, pc}

08010298 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
 8010298:	b580      	push	{r7, lr}
 801029a:	af00      	add	r7, sp, #0
 801029c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80102a0:	2000      	movs	r0, #0
 80102a2:	f7ff ffcd 	bl	8010240 <_Z41__static_initialization_and_destruction_0ii>
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80102ae:	4b0f      	ldr	r3, [pc, #60]	; (80102ec <HAL_MspInit+0x44>)
 80102b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102b2:	4a0e      	ldr	r2, [pc, #56]	; (80102ec <HAL_MspInit+0x44>)
 80102b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102b8:	6413      	str	r3, [r2, #64]	; 0x40
 80102ba:	4b0c      	ldr	r3, [pc, #48]	; (80102ec <HAL_MspInit+0x44>)
 80102bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102c2:	607b      	str	r3, [r7, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80102c6:	4b09      	ldr	r3, [pc, #36]	; (80102ec <HAL_MspInit+0x44>)
 80102c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102ca:	4a08      	ldr	r2, [pc, #32]	; (80102ec <HAL_MspInit+0x44>)
 80102cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80102d0:	6453      	str	r3, [r2, #68]	; 0x44
 80102d2:	4b06      	ldr	r3, [pc, #24]	; (80102ec <HAL_MspInit+0x44>)
 80102d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80102da:	603b      	str	r3, [r7, #0]
 80102dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80102de:	bf00      	nop
 80102e0:	370c      	adds	r7, #12
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr
 80102ea:	bf00      	nop
 80102ec:	40023800 	.word	0x40023800

080102f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b0ac      	sub	sp, #176	; 0xb0
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80102fc:	2200      	movs	r2, #0
 80102fe:	601a      	str	r2, [r3, #0]
 8010300:	605a      	str	r2, [r3, #4]
 8010302:	609a      	str	r2, [r3, #8]
 8010304:	60da      	str	r2, [r3, #12]
 8010306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010308:	f107 0318 	add.w	r3, r7, #24
 801030c:	2284      	movs	r2, #132	; 0x84
 801030e:	2100      	movs	r1, #0
 8010310:	4618      	mov	r0, r3
 8010312:	f00e fa57 	bl	801e7c4 <memset>
  if(huart->Instance==USART1)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a36      	ldr	r2, [pc, #216]	; (80103f4 <HAL_UART_MspInit+0x104>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d164      	bne.n	80103ea <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8010320:	2340      	movs	r3, #64	; 0x40
 8010322:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8010324:	2300      	movs	r3, #0
 8010326:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010328:	f107 0318 	add.w	r3, r7, #24
 801032c:	4618      	mov	r0, r3
 801032e:	f001 fa13 	bl	8011758 <HAL_RCCEx_PeriphCLKConfig>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8010338:	f7f9 fc2c 	bl	8009b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801033c:	4b2e      	ldr	r3, [pc, #184]	; (80103f8 <HAL_UART_MspInit+0x108>)
 801033e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010340:	4a2d      	ldr	r2, [pc, #180]	; (80103f8 <HAL_UART_MspInit+0x108>)
 8010342:	f043 0310 	orr.w	r3, r3, #16
 8010346:	6453      	str	r3, [r2, #68]	; 0x44
 8010348:	4b2b      	ldr	r3, [pc, #172]	; (80103f8 <HAL_UART_MspInit+0x108>)
 801034a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801034c:	f003 0310 	and.w	r3, r3, #16
 8010350:	617b      	str	r3, [r7, #20]
 8010352:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010354:	4b28      	ldr	r3, [pc, #160]	; (80103f8 <HAL_UART_MspInit+0x108>)
 8010356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010358:	4a27      	ldr	r2, [pc, #156]	; (80103f8 <HAL_UART_MspInit+0x108>)
 801035a:	f043 0302 	orr.w	r3, r3, #2
 801035e:	6313      	str	r3, [r2, #48]	; 0x30
 8010360:	4b25      	ldr	r3, [pc, #148]	; (80103f8 <HAL_UART_MspInit+0x108>)
 8010362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010364:	f003 0302 	and.w	r3, r3, #2
 8010368:	613b      	str	r3, [r7, #16]
 801036a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801036c:	4b22      	ldr	r3, [pc, #136]	; (80103f8 <HAL_UART_MspInit+0x108>)
 801036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010370:	4a21      	ldr	r2, [pc, #132]	; (80103f8 <HAL_UART_MspInit+0x108>)
 8010372:	f043 0301 	orr.w	r3, r3, #1
 8010376:	6313      	str	r3, [r2, #48]	; 0x30
 8010378:	4b1f      	ldr	r3, [pc, #124]	; (80103f8 <HAL_UART_MspInit+0x108>)
 801037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	60fb      	str	r3, [r7, #12]
 8010382:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8010384:	2380      	movs	r3, #128	; 0x80
 8010386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801038a:	2302      	movs	r3, #2
 801038c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010390:	2300      	movs	r3, #0
 8010392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010396:	2300      	movs	r3, #0
 8010398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801039c:	2307      	movs	r3, #7
 801039e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80103a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80103a6:	4619      	mov	r1, r3
 80103a8:	4814      	ldr	r0, [pc, #80]	; (80103fc <HAL_UART_MspInit+0x10c>)
 80103aa:	f000 fb85 	bl	8010ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80103ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103b6:	2302      	movs	r3, #2
 80103b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103bc:	2300      	movs	r3, #0
 80103be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103c2:	2300      	movs	r3, #0
 80103c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80103c8:	2307      	movs	r3, #7
 80103ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80103ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80103d2:	4619      	mov	r1, r3
 80103d4:	480a      	ldr	r0, [pc, #40]	; (8010400 <HAL_UART_MspInit+0x110>)
 80103d6:	f000 fb6f 	bl	8010ab8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80103da:	2200      	movs	r2, #0
 80103dc:	2100      	movs	r1, #0
 80103de:	2025      	movs	r0, #37	; 0x25
 80103e0:	f000 faa1 	bl	8010926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80103e4:	2025      	movs	r0, #37	; 0x25
 80103e6:	f000 faba 	bl	801095e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80103ea:	bf00      	nop
 80103ec:	37b0      	adds	r7, #176	; 0xb0
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	40011000 	.word	0x40011000
 80103f8:	40023800 	.word	0x40023800
 80103fc:	40020400 	.word	0x40020400
 8010400:	40020000 	.word	0x40020000

08010404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010408:	e7fe      	b.n	8010408 <NMI_Handler+0x4>

0801040a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801040a:	b480      	push	{r7}
 801040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801040e:	e7fe      	b.n	801040e <HardFault_Handler+0x4>

08010410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010410:	b480      	push	{r7}
 8010412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010414:	e7fe      	b.n	8010414 <MemManage_Handler+0x4>

08010416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010416:	b480      	push	{r7}
 8010418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801041a:	e7fe      	b.n	801041a <BusFault_Handler+0x4>

0801041c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801041c:	b480      	push	{r7}
 801041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010420:	e7fe      	b.n	8010420 <UsageFault_Handler+0x4>

08010422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010422:	b480      	push	{r7}
 8010424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010426:	bf00      	nop
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010434:	bf00      	nop
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801043e:	b480      	push	{r7}
 8010440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010442:	bf00      	nop
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010450:	f000 f94a 	bl	80106e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010454:	bf00      	nop
 8010456:	bd80      	pop	{r7, pc}

08010458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801045c:	4802      	ldr	r0, [pc, #8]	; (8010468 <USART1_IRQHandler+0x10>)
 801045e:	f001 fe3d 	bl	80120dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010462:	bf00      	nop
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	200053c4 	.word	0x200053c4

0801046c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  return 1;
 8010470:	2301      	movs	r3, #1
}
 8010472:	4618      	mov	r0, r3
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <_kill>:

int _kill(int pid, int sig)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010486:	f00e fa51 	bl	801e92c <__errno>
 801048a:	4603      	mov	r3, r0
 801048c:	2216      	movs	r2, #22
 801048e:	601a      	str	r2, [r3, #0]
  return -1;
 8010490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010494:	4618      	mov	r0, r3
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}

0801049c <_exit>:

void _exit (int status)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80104a4:	f04f 31ff 	mov.w	r1, #4294967295
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff ffe7 	bl	801047c <_kill>
  while (1) {}    /* Make sure we hang here */
 80104ae:	e7fe      	b.n	80104ae <_exit+0x12>

080104b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104bc:	2300      	movs	r3, #0
 80104be:	617b      	str	r3, [r7, #20]
 80104c0:	e00a      	b.n	80104d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80104c2:	f3af 8000 	nop.w
 80104c6:	4601      	mov	r1, r0
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	1c5a      	adds	r2, r3, #1
 80104cc:	60ba      	str	r2, [r7, #8]
 80104ce:	b2ca      	uxtb	r2, r1
 80104d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	3301      	adds	r3, #1
 80104d6:	617b      	str	r3, [r7, #20]
 80104d8:	697a      	ldr	r2, [r7, #20]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	429a      	cmp	r2, r3
 80104de:	dbf0      	blt.n	80104c2 <_read+0x12>
  }

  return len;
 80104e0:	687b      	ldr	r3, [r7, #4]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3718      	adds	r7, #24
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b086      	sub	sp, #24
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	60f8      	str	r0, [r7, #12]
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80104f6:	2300      	movs	r3, #0
 80104f8:	617b      	str	r3, [r7, #20]
 80104fa:	e009      	b.n	8010510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	60ba      	str	r2, [r7, #8]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	4618      	mov	r0, r3
 8010506:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	3301      	adds	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	dbf1      	blt.n	80104fc <_write+0x12>
  }
  return len;
 8010518:	687b      	ldr	r3, [r7, #4]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3718      	adds	r7, #24
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <_close>:

int _close(int file)
{
 8010522:	b480      	push	{r7}
 8010524:	b083      	sub	sp, #12
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801053a:	b480      	push	{r7}
 801053c:	b083      	sub	sp, #12
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801054a:	605a      	str	r2, [r3, #4]
  return 0;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <_isatty>:

int _isatty(int file)
{
 801055a:	b480      	push	{r7}
 801055c:	b083      	sub	sp, #12
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010562:	2301      	movs	r3, #1
}
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3714      	adds	r7, #20
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
	...

0801058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010594:	4a14      	ldr	r2, [pc, #80]	; (80105e8 <_sbrk+0x5c>)
 8010596:	4b15      	ldr	r3, [pc, #84]	; (80105ec <_sbrk+0x60>)
 8010598:	1ad3      	subs	r3, r2, r3
 801059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80105a0:	4b13      	ldr	r3, [pc, #76]	; (80105f0 <_sbrk+0x64>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80105a8:	4b11      	ldr	r3, [pc, #68]	; (80105f0 <_sbrk+0x64>)
 80105aa:	4a12      	ldr	r2, [pc, #72]	; (80105f4 <_sbrk+0x68>)
 80105ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80105ae:	4b10      	ldr	r3, [pc, #64]	; (80105f0 <_sbrk+0x64>)
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	4413      	add	r3, r2
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d207      	bcs.n	80105cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80105bc:	f00e f9b6 	bl	801e92c <__errno>
 80105c0:	4603      	mov	r3, r0
 80105c2:	220c      	movs	r2, #12
 80105c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80105c6:	f04f 33ff 	mov.w	r3, #4294967295
 80105ca:	e009      	b.n	80105e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80105cc:	4b08      	ldr	r3, [pc, #32]	; (80105f0 <_sbrk+0x64>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80105d2:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <_sbrk+0x64>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4413      	add	r3, r2
 80105da:	4a05      	ldr	r2, [pc, #20]	; (80105f0 <_sbrk+0x64>)
 80105dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80105de:	68fb      	ldr	r3, [r7, #12]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3718      	adds	r7, #24
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	20050000 	.word	0x20050000
 80105ec:	00000400 	.word	0x00000400
 80105f0:	2000544c 	.word	0x2000544c
 80105f4:	200057f8 	.word	0x200057f8

080105f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80105f8:	b480      	push	{r7}
 80105fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80105fc:	4b06      	ldr	r3, [pc, #24]	; (8010618 <SystemInit+0x20>)
 80105fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010602:	4a05      	ldr	r2, [pc, #20]	; (8010618 <SystemInit+0x20>)
 8010604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801060c:	bf00      	nop
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	e000ed00 	.word	0xe000ed00

0801061c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801061c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010620:	480d      	ldr	r0, [pc, #52]	; (8010658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010622:	490e      	ldr	r1, [pc, #56]	; (801065c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010624:	4a0e      	ldr	r2, [pc, #56]	; (8010660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010628:	e002      	b.n	8010630 <LoopCopyDataInit>

0801062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801062e:	3304      	adds	r3, #4

08010630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010634:	d3f9      	bcc.n	801062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010636:	4a0b      	ldr	r2, [pc, #44]	; (8010664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010638:	4c0b      	ldr	r4, [pc, #44]	; (8010668 <LoopFillZerobss+0x26>)
  movs r3, #0
 801063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801063c:	e001      	b.n	8010642 <LoopFillZerobss>

0801063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010640:	3204      	adds	r2, #4

08010642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010644:	d3fb      	bcc.n	801063e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010646:	f7ff ffd7 	bl	80105f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801064a:	f00e f975 	bl	801e938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801064e:	f7f8 fc03 	bl	8008e58 <main>
  bx  lr    
 8010652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010654:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8010658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801065c:	20005390 	.word	0x20005390
  ldr r2, =_sidata
 8010660:	08029acc 	.word	0x08029acc
  ldr r2, =_sbss
 8010664:	20005390 	.word	0x20005390
  ldr r4, =_ebss
 8010668:	200057f4 	.word	0x200057f4

0801066c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801066c:	e7fe      	b.n	801066c <ADC_IRQHandler>

0801066e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010672:	2003      	movs	r0, #3
 8010674:	f000 f94c 	bl	8010910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010678:	2000      	movs	r0, #0
 801067a:	f000 f805 	bl	8010688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801067e:	f7ff fe13 	bl	80102a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010682:	2300      	movs	r3, #0
}
 8010684:	4618      	mov	r0, r3
 8010686:	bd80      	pop	{r7, pc}

08010688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010690:	4b12      	ldr	r3, [pc, #72]	; (80106dc <HAL_InitTick+0x54>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	4b12      	ldr	r3, [pc, #72]	; (80106e0 <HAL_InitTick+0x58>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	4619      	mov	r1, r3
 801069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80106a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a6:	4618      	mov	r0, r3
 80106a8:	f000 f967 	bl	801097a <HAL_SYSTICK_Config>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d001      	beq.n	80106b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e00e      	b.n	80106d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b0f      	cmp	r3, #15
 80106ba:	d80a      	bhi.n	80106d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80106bc:	2200      	movs	r2, #0
 80106be:	6879      	ldr	r1, [r7, #4]
 80106c0:	f04f 30ff 	mov.w	r0, #4294967295
 80106c4:	f000 f92f 	bl	8010926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80106c8:	4a06      	ldr	r2, [pc, #24]	; (80106e4 <HAL_InitTick+0x5c>)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	e000      	b.n	80106d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80106d2:	2301      	movs	r3, #1
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	200050a0 	.word	0x200050a0
 80106e0:	200050a8 	.word	0x200050a8
 80106e4:	200050a4 	.word	0x200050a4

080106e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80106e8:	b480      	push	{r7}
 80106ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80106ec:	4b06      	ldr	r3, [pc, #24]	; (8010708 <HAL_IncTick+0x20>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	4b06      	ldr	r3, [pc, #24]	; (801070c <HAL_IncTick+0x24>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4413      	add	r3, r2
 80106f8:	4a04      	ldr	r2, [pc, #16]	; (801070c <HAL_IncTick+0x24>)
 80106fa:	6013      	str	r3, [r2, #0]
}
 80106fc:	bf00      	nop
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop
 8010708:	200050a8 	.word	0x200050a8
 801070c:	20005450 	.word	0x20005450

08010710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010710:	b480      	push	{r7}
 8010712:	af00      	add	r7, sp, #0
  return uwTick;
 8010714:	4b03      	ldr	r3, [pc, #12]	; (8010724 <HAL_GetTick+0x14>)
 8010716:	681b      	ldr	r3, [r3, #0]
}
 8010718:	4618      	mov	r0, r3
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop
 8010724:	20005450 	.word	0x20005450

08010728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010730:	f7ff ffee 	bl	8010710 <HAL_GetTick>
 8010734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010740:	d005      	beq.n	801074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010742:	4b0a      	ldr	r3, [pc, #40]	; (801076c <HAL_Delay+0x44>)
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	461a      	mov	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	4413      	add	r3, r2
 801074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801074e:	bf00      	nop
 8010750:	f7ff ffde 	bl	8010710 <HAL_GetTick>
 8010754:	4602      	mov	r2, r0
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	429a      	cmp	r2, r3
 801075e:	d8f7      	bhi.n	8010750 <HAL_Delay+0x28>
  {
  }
}
 8010760:	bf00      	nop
 8010762:	bf00      	nop
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	200050a8 	.word	0x200050a8

08010770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010770:	b480      	push	{r7}
 8010772:	b085      	sub	sp, #20
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f003 0307 	and.w	r3, r3, #7
 801077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010780:	4b0b      	ldr	r3, [pc, #44]	; (80107b0 <__NVIC_SetPriorityGrouping+0x40>)
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801078c:	4013      	ands	r3, r2
 801078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010798:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <__NVIC_SetPriorityGrouping+0x44>)
 801079a:	4313      	orrs	r3, r2
 801079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801079e:	4a04      	ldr	r2, [pc, #16]	; (80107b0 <__NVIC_SetPriorityGrouping+0x40>)
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	60d3      	str	r3, [r2, #12]
}
 80107a4:	bf00      	nop
 80107a6:	3714      	adds	r7, #20
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr
 80107b0:	e000ed00 	.word	0xe000ed00
 80107b4:	05fa0000 	.word	0x05fa0000

080107b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80107b8:	b480      	push	{r7}
 80107ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80107bc:	4b04      	ldr	r3, [pc, #16]	; (80107d0 <__NVIC_GetPriorityGrouping+0x18>)
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	0a1b      	lsrs	r3, r3, #8
 80107c2:	f003 0307 	and.w	r3, r3, #7
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	e000ed00 	.word	0xe000ed00

080107d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	4603      	mov	r3, r0
 80107dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80107de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	db0b      	blt.n	80107fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	f003 021f 	and.w	r2, r3, #31
 80107ec:	4907      	ldr	r1, [pc, #28]	; (801080c <__NVIC_EnableIRQ+0x38>)
 80107ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107f2:	095b      	lsrs	r3, r3, #5
 80107f4:	2001      	movs	r0, #1
 80107f6:	fa00 f202 	lsl.w	r2, r0, r2
 80107fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80107fe:	bf00      	nop
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	e000e100 	.word	0xe000e100

08010810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010810:	b480      	push	{r7}
 8010812:	b083      	sub	sp, #12
 8010814:	af00      	add	r7, sp, #0
 8010816:	4603      	mov	r3, r0
 8010818:	6039      	str	r1, [r7, #0]
 801081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010820:	2b00      	cmp	r3, #0
 8010822:	db0a      	blt.n	801083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	b2da      	uxtb	r2, r3
 8010828:	490c      	ldr	r1, [pc, #48]	; (801085c <__NVIC_SetPriority+0x4c>)
 801082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801082e:	0112      	lsls	r2, r2, #4
 8010830:	b2d2      	uxtb	r2, r2
 8010832:	440b      	add	r3, r1
 8010834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010838:	e00a      	b.n	8010850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	b2da      	uxtb	r2, r3
 801083e:	4908      	ldr	r1, [pc, #32]	; (8010860 <__NVIC_SetPriority+0x50>)
 8010840:	79fb      	ldrb	r3, [r7, #7]
 8010842:	f003 030f 	and.w	r3, r3, #15
 8010846:	3b04      	subs	r3, #4
 8010848:	0112      	lsls	r2, r2, #4
 801084a:	b2d2      	uxtb	r2, r2
 801084c:	440b      	add	r3, r1
 801084e:	761a      	strb	r2, [r3, #24]
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	e000e100 	.word	0xe000e100
 8010860:	e000ed00 	.word	0xe000ed00

08010864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010864:	b480      	push	{r7}
 8010866:	b089      	sub	sp, #36	; 0x24
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f003 0307 	and.w	r3, r3, #7
 8010876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	f1c3 0307 	rsb	r3, r3, #7
 801087e:	2b04      	cmp	r3, #4
 8010880:	bf28      	it	cs
 8010882:	2304      	movcs	r3, #4
 8010884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	3304      	adds	r3, #4
 801088a:	2b06      	cmp	r3, #6
 801088c:	d902      	bls.n	8010894 <NVIC_EncodePriority+0x30>
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	3b03      	subs	r3, #3
 8010892:	e000      	b.n	8010896 <NVIC_EncodePriority+0x32>
 8010894:	2300      	movs	r3, #0
 8010896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010898:	f04f 32ff 	mov.w	r2, #4294967295
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	fa02 f303 	lsl.w	r3, r2, r3
 80108a2:	43da      	mvns	r2, r3
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	401a      	ands	r2, r3
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80108ac:	f04f 31ff 	mov.w	r1, #4294967295
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	fa01 f303 	lsl.w	r3, r1, r3
 80108b6:	43d9      	mvns	r1, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80108bc:	4313      	orrs	r3, r2
         );
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3724      	adds	r7, #36	; 0x24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
	...

080108cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	3b01      	subs	r3, #1
 80108d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80108dc:	d301      	bcc.n	80108e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80108de:	2301      	movs	r3, #1
 80108e0:	e00f      	b.n	8010902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80108e2:	4a0a      	ldr	r2, [pc, #40]	; (801090c <SysTick_Config+0x40>)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80108ea:	210f      	movs	r1, #15
 80108ec:	f04f 30ff 	mov.w	r0, #4294967295
 80108f0:	f7ff ff8e 	bl	8010810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80108f4:	4b05      	ldr	r3, [pc, #20]	; (801090c <SysTick_Config+0x40>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80108fa:	4b04      	ldr	r3, [pc, #16]	; (801090c <SysTick_Config+0x40>)
 80108fc:	2207      	movs	r2, #7
 80108fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	e000e010 	.word	0xe000e010

08010910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7ff ff29 	bl	8010770 <__NVIC_SetPriorityGrouping>
}
 801091e:	bf00      	nop
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010926:	b580      	push	{r7, lr}
 8010928:	b086      	sub	sp, #24
 801092a:	af00      	add	r7, sp, #0
 801092c:	4603      	mov	r3, r0
 801092e:	60b9      	str	r1, [r7, #8]
 8010930:	607a      	str	r2, [r7, #4]
 8010932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8010934:	2300      	movs	r3, #0
 8010936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010938:	f7ff ff3e 	bl	80107b8 <__NVIC_GetPriorityGrouping>
 801093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	68b9      	ldr	r1, [r7, #8]
 8010942:	6978      	ldr	r0, [r7, #20]
 8010944:	f7ff ff8e 	bl	8010864 <NVIC_EncodePriority>
 8010948:	4602      	mov	r2, r0
 801094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7ff ff5d 	bl	8010810 <__NVIC_SetPriority>
}
 8010956:	bf00      	nop
 8010958:	3718      	adds	r7, #24
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}

0801095e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801095e:	b580      	push	{r7, lr}
 8010960:	b082      	sub	sp, #8
 8010962:	af00      	add	r7, sp, #0
 8010964:	4603      	mov	r3, r0
 8010966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801096c:	4618      	mov	r0, r3
 801096e:	f7ff ff31 	bl	80107d4 <__NVIC_EnableIRQ>
}
 8010972:	bf00      	nop
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}

0801097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801097a:	b580      	push	{r7, lr}
 801097c:	b082      	sub	sp, #8
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ff ffa2 	bl	80108cc <SysTick_Config>
 8010988:	4603      	mov	r3, r0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3708      	adds	r7, #8
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010992:	b580      	push	{r7, lr}
 8010994:	b084      	sub	sp, #16
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801099e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80109a0:	f7ff feb6 	bl	8010710 <HAL_GetTick>
 80109a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80109ac:	b2db      	uxtb	r3, r3
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d008      	beq.n	80109c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2280      	movs	r2, #128	; 0x80
 80109b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e052      	b.n	8010a6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f022 0216 	bic.w	r2, r2, #22
 80109d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	695a      	ldr	r2, [r3, #20]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80109e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d103      	bne.n	80109f4 <HAL_DMA_Abort+0x62>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d007      	beq.n	8010a04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f022 0208 	bic.w	r2, r2, #8
 8010a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f022 0201 	bic.w	r2, r2, #1
 8010a12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010a14:	e013      	b.n	8010a3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010a16:	f7ff fe7b 	bl	8010710 <HAL_GetTick>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	2b05      	cmp	r3, #5
 8010a22:	d90c      	bls.n	8010a3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2220      	movs	r2, #32
 8010a28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2203      	movs	r2, #3
 8010a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	e015      	b.n	8010a6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f003 0301 	and.w	r3, r3, #1
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e4      	bne.n	8010a16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a50:	223f      	movs	r2, #63	; 0x3f
 8010a52:	409a      	lsls	r2, r3
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010a72:	b480      	push	{r7}
 8010a74:	b083      	sub	sp, #12
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	2b02      	cmp	r3, #2
 8010a84:	d004      	beq.n	8010a90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2280      	movs	r2, #128	; 0x80
 8010a8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e00c      	b.n	8010aaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2205      	movs	r2, #5
 8010a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f022 0201 	bic.w	r2, r2, #1
 8010aa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	370c      	adds	r7, #12
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
	...

08010ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b089      	sub	sp, #36	; 0x24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010aca:	2300      	movs	r3, #0
 8010acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	61fb      	str	r3, [r7, #28]
 8010ad6:	e175      	b.n	8010dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8010ad8:	2201      	movs	r2, #1
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	4013      	ands	r3, r2
 8010aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010aec:	693a      	ldr	r2, [r7, #16]
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	f040 8164 	bne.w	8010dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	f003 0303 	and.w	r3, r3, #3
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d005      	beq.n	8010b0e <HAL_GPIO_Init+0x56>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	f003 0303 	and.w	r3, r3, #3
 8010b0a:	2b02      	cmp	r3, #2
 8010b0c:	d130      	bne.n	8010b70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	005b      	lsls	r3, r3, #1
 8010b18:	2203      	movs	r2, #3
 8010b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010b1e:	43db      	mvns	r3, r3
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	4013      	ands	r3, r2
 8010b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b32:	69ba      	ldr	r2, [r7, #24]
 8010b34:	4313      	orrs	r3, r2
 8010b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	69ba      	ldr	r2, [r7, #24]
 8010b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010b44:	2201      	movs	r2, #1
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	fa02 f303 	lsl.w	r3, r2, r3
 8010b4c:	43db      	mvns	r3, r3
 8010b4e:	69ba      	ldr	r2, [r7, #24]
 8010b50:	4013      	ands	r3, r2
 8010b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	685b      	ldr	r3, [r3, #4]
 8010b58:	091b      	lsrs	r3, r3, #4
 8010b5a:	f003 0201 	and.w	r2, r3, #1
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	fa02 f303 	lsl.w	r3, r2, r3
 8010b64:	69ba      	ldr	r2, [r7, #24]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	69ba      	ldr	r2, [r7, #24]
 8010b6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	f003 0303 	and.w	r3, r3, #3
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	d017      	beq.n	8010bac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8010b82:	69fb      	ldr	r3, [r7, #28]
 8010b84:	005b      	lsls	r3, r3, #1
 8010b86:	2203      	movs	r2, #3
 8010b88:	fa02 f303 	lsl.w	r3, r2, r3
 8010b8c:	43db      	mvns	r3, r3
 8010b8e:	69ba      	ldr	r2, [r7, #24]
 8010b90:	4013      	ands	r3, r2
 8010b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	689a      	ldr	r2, [r3, #8]
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010ba0:	69ba      	ldr	r2, [r7, #24]
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	69ba      	ldr	r2, [r7, #24]
 8010baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	f003 0303 	and.w	r3, r3, #3
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	d123      	bne.n	8010c00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	08da      	lsrs	r2, r3, #3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	3208      	adds	r2, #8
 8010bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	f003 0307 	and.w	r3, r3, #7
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	220f      	movs	r2, #15
 8010bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd4:	43db      	mvns	r3, r3
 8010bd6:	69ba      	ldr	r2, [r7, #24]
 8010bd8:	4013      	ands	r3, r2
 8010bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	691a      	ldr	r2, [r3, #16]
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	08da      	lsrs	r2, r3, #3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	3208      	adds	r2, #8
 8010bfa:	69b9      	ldr	r1, [r7, #24]
 8010bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	2203      	movs	r2, #3
 8010c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c10:	43db      	mvns	r3, r3
 8010c12:	69ba      	ldr	r2, [r7, #24]
 8010c14:	4013      	ands	r3, r2
 8010c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	f003 0203 	and.w	r2, r3, #3
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	fa02 f303 	lsl.w	r3, r2, r3
 8010c28:	69ba      	ldr	r2, [r7, #24]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	69ba      	ldr	r2, [r7, #24]
 8010c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f000 80be 	beq.w	8010dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c42:	4b66      	ldr	r3, [pc, #408]	; (8010ddc <HAL_GPIO_Init+0x324>)
 8010c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c46:	4a65      	ldr	r2, [pc, #404]	; (8010ddc <HAL_GPIO_Init+0x324>)
 8010c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8010c4e:	4b63      	ldr	r3, [pc, #396]	; (8010ddc <HAL_GPIO_Init+0x324>)
 8010c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8010c5a:	4a61      	ldr	r2, [pc, #388]	; (8010de0 <HAL_GPIO_Init+0x328>)
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	089b      	lsrs	r3, r3, #2
 8010c60:	3302      	adds	r3, #2
 8010c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	f003 0303 	and.w	r3, r3, #3
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	220f      	movs	r2, #15
 8010c72:	fa02 f303 	lsl.w	r3, r2, r3
 8010c76:	43db      	mvns	r3, r3
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	4013      	ands	r3, r2
 8010c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4a58      	ldr	r2, [pc, #352]	; (8010de4 <HAL_GPIO_Init+0x32c>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d037      	beq.n	8010cf6 <HAL_GPIO_Init+0x23e>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4a57      	ldr	r2, [pc, #348]	; (8010de8 <HAL_GPIO_Init+0x330>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d031      	beq.n	8010cf2 <HAL_GPIO_Init+0x23a>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4a56      	ldr	r2, [pc, #344]	; (8010dec <HAL_GPIO_Init+0x334>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d02b      	beq.n	8010cee <HAL_GPIO_Init+0x236>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	4a55      	ldr	r2, [pc, #340]	; (8010df0 <HAL_GPIO_Init+0x338>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	d025      	beq.n	8010cea <HAL_GPIO_Init+0x232>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a54      	ldr	r2, [pc, #336]	; (8010df4 <HAL_GPIO_Init+0x33c>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d01f      	beq.n	8010ce6 <HAL_GPIO_Init+0x22e>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a53      	ldr	r2, [pc, #332]	; (8010df8 <HAL_GPIO_Init+0x340>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d019      	beq.n	8010ce2 <HAL_GPIO_Init+0x22a>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a52      	ldr	r2, [pc, #328]	; (8010dfc <HAL_GPIO_Init+0x344>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d013      	beq.n	8010cde <HAL_GPIO_Init+0x226>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4a51      	ldr	r2, [pc, #324]	; (8010e00 <HAL_GPIO_Init+0x348>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d00d      	beq.n	8010cda <HAL_GPIO_Init+0x222>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a50      	ldr	r2, [pc, #320]	; (8010e04 <HAL_GPIO_Init+0x34c>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d007      	beq.n	8010cd6 <HAL_GPIO_Init+0x21e>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a4f      	ldr	r2, [pc, #316]	; (8010e08 <HAL_GPIO_Init+0x350>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d101      	bne.n	8010cd2 <HAL_GPIO_Init+0x21a>
 8010cce:	2309      	movs	r3, #9
 8010cd0:	e012      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cd2:	230a      	movs	r3, #10
 8010cd4:	e010      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cd6:	2308      	movs	r3, #8
 8010cd8:	e00e      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cda:	2307      	movs	r3, #7
 8010cdc:	e00c      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cde:	2306      	movs	r3, #6
 8010ce0:	e00a      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010ce2:	2305      	movs	r3, #5
 8010ce4:	e008      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010ce6:	2304      	movs	r3, #4
 8010ce8:	e006      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cea:	2303      	movs	r3, #3
 8010cec:	e004      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cee:	2302      	movs	r3, #2
 8010cf0:	e002      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e000      	b.n	8010cf8 <HAL_GPIO_Init+0x240>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	69fa      	ldr	r2, [r7, #28]
 8010cfa:	f002 0203 	and.w	r2, r2, #3
 8010cfe:	0092      	lsls	r2, r2, #2
 8010d00:	4093      	lsls	r3, r2
 8010d02:	69ba      	ldr	r2, [r7, #24]
 8010d04:	4313      	orrs	r3, r2
 8010d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010d08:	4935      	ldr	r1, [pc, #212]	; (8010de0 <HAL_GPIO_Init+0x328>)
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	089b      	lsrs	r3, r3, #2
 8010d0e:	3302      	adds	r3, #2
 8010d10:	69ba      	ldr	r2, [r7, #24]
 8010d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010d16:	4b3d      	ldr	r3, [pc, #244]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d18:	689b      	ldr	r3, [r3, #8]
 8010d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	43db      	mvns	r3, r3
 8010d20:	69ba      	ldr	r2, [r7, #24]
 8010d22:	4013      	ands	r3, r2
 8010d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010d32:	69ba      	ldr	r2, [r7, #24]
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	4313      	orrs	r3, r2
 8010d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010d3a:	4a34      	ldr	r2, [pc, #208]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010d40:	4b32      	ldr	r3, [pc, #200]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	43db      	mvns	r3, r3
 8010d4a:	69ba      	ldr	r2, [r7, #24]
 8010d4c:	4013      	ands	r3, r2
 8010d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d003      	beq.n	8010d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8010d5c:	69ba      	ldr	r2, [r7, #24]
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010d64:	4a29      	ldr	r2, [pc, #164]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010d6a:	4b28      	ldr	r3, [pc, #160]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	43db      	mvns	r3, r3
 8010d74:	69ba      	ldr	r2, [r7, #24]
 8010d76:	4013      	ands	r3, r2
 8010d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d003      	beq.n	8010d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8010d86:	69ba      	ldr	r2, [r7, #24]
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010d8e:	4a1f      	ldr	r2, [pc, #124]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010d94:	4b1d      	ldr	r3, [pc, #116]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	43db      	mvns	r3, r3
 8010d9e:	69ba      	ldr	r2, [r7, #24]
 8010da0:	4013      	ands	r3, r2
 8010da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d003      	beq.n	8010db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010db0:	69ba      	ldr	r2, [r7, #24]
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	4313      	orrs	r3, r2
 8010db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010db8:	4a14      	ldr	r2, [pc, #80]	; (8010e0c <HAL_GPIO_Init+0x354>)
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	61fb      	str	r3, [r7, #28]
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	2b0f      	cmp	r3, #15
 8010dc8:	f67f ae86 	bls.w	8010ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010dcc:	bf00      	nop
 8010dce:	bf00      	nop
 8010dd0:	3724      	adds	r7, #36	; 0x24
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	40023800 	.word	0x40023800
 8010de0:	40013800 	.word	0x40013800
 8010de4:	40020000 	.word	0x40020000
 8010de8:	40020400 	.word	0x40020400
 8010dec:	40020800 	.word	0x40020800
 8010df0:	40020c00 	.word	0x40020c00
 8010df4:	40021000 	.word	0x40021000
 8010df8:	40021400 	.word	0x40021400
 8010dfc:	40021800 	.word	0x40021800
 8010e00:	40021c00 	.word	0x40021c00
 8010e04:	40022000 	.word	0x40022000
 8010e08:	40022400 	.word	0x40022400
 8010e0c:	40013c00 	.word	0x40013c00

08010e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010e10:	b480      	push	{r7}
 8010e12:	b083      	sub	sp, #12
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	460b      	mov	r3, r1
 8010e1a:	807b      	strh	r3, [r7, #2]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010e20:	787b      	ldrb	r3, [r7, #1]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d003      	beq.n	8010e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010e26:	887a      	ldrh	r2, [r7, #2]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010e2c:	e003      	b.n	8010e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010e2e:	887b      	ldrh	r3, [r7, #2]
 8010e30:	041a      	lsls	r2, r3, #16
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	619a      	str	r2, [r3, #24]
}
 8010e36:	bf00      	nop
 8010e38:	370c      	adds	r7, #12
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
	...

08010e44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8010e56:	2301      	movs	r3, #1
 8010e58:	e291      	b.n	801137e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f003 0301 	and.w	r3, r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 8087 	beq.w	8010f76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010e68:	4b96      	ldr	r3, [pc, #600]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	f003 030c 	and.w	r3, r3, #12
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d00c      	beq.n	8010e8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010e74:	4b93      	ldr	r3, [pc, #588]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010e76:	689b      	ldr	r3, [r3, #8]
 8010e78:	f003 030c 	and.w	r3, r3, #12
 8010e7c:	2b08      	cmp	r3, #8
 8010e7e:	d112      	bne.n	8010ea6 <HAL_RCC_OscConfig+0x62>
 8010e80:	4b90      	ldr	r3, [pc, #576]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e8c:	d10b      	bne.n	8010ea6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010e8e:	4b8d      	ldr	r3, [pc, #564]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d06c      	beq.n	8010f74 <HAL_RCC_OscConfig+0x130>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d168      	bne.n	8010f74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	e26b      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010eae:	d106      	bne.n	8010ebe <HAL_RCC_OscConfig+0x7a>
 8010eb0:	4b84      	ldr	r3, [pc, #528]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a83      	ldr	r2, [pc, #524]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010eba:	6013      	str	r3, [r2, #0]
 8010ebc:	e02e      	b.n	8010f1c <HAL_RCC_OscConfig+0xd8>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10c      	bne.n	8010ee0 <HAL_RCC_OscConfig+0x9c>
 8010ec6:	4b7f      	ldr	r3, [pc, #508]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a7e      	ldr	r2, [pc, #504]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ed0:	6013      	str	r3, [r2, #0]
 8010ed2:	4b7c      	ldr	r3, [pc, #496]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a7b      	ldr	r2, [pc, #492]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010edc:	6013      	str	r3, [r2, #0]
 8010ede:	e01d      	b.n	8010f1c <HAL_RCC_OscConfig+0xd8>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010ee8:	d10c      	bne.n	8010f04 <HAL_RCC_OscConfig+0xc0>
 8010eea:	4b76      	ldr	r3, [pc, #472]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a75      	ldr	r2, [pc, #468]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010ef4:	6013      	str	r3, [r2, #0]
 8010ef6:	4b73      	ldr	r3, [pc, #460]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a72      	ldr	r2, [pc, #456]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f00:	6013      	str	r3, [r2, #0]
 8010f02:	e00b      	b.n	8010f1c <HAL_RCC_OscConfig+0xd8>
 8010f04:	4b6f      	ldr	r3, [pc, #444]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4a6e      	ldr	r2, [pc, #440]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f0e:	6013      	str	r3, [r2, #0]
 8010f10:	4b6c      	ldr	r3, [pc, #432]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4a6b      	ldr	r2, [pc, #428]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d013      	beq.n	8010f4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f24:	f7ff fbf4 	bl	8010710 <HAL_GetTick>
 8010f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f2a:	e008      	b.n	8010f3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f2c:	f7ff fbf0 	bl	8010710 <HAL_GetTick>
 8010f30:	4602      	mov	r2, r0
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	2b64      	cmp	r3, #100	; 0x64
 8010f38:	d901      	bls.n	8010f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010f3a:	2303      	movs	r3, #3
 8010f3c:	e21f      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010f3e:	4b61      	ldr	r3, [pc, #388]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0f0      	beq.n	8010f2c <HAL_RCC_OscConfig+0xe8>
 8010f4a:	e014      	b.n	8010f76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f4c:	f7ff fbe0 	bl	8010710 <HAL_GetTick>
 8010f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f52:	e008      	b.n	8010f66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010f54:	f7ff fbdc 	bl	8010710 <HAL_GetTick>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	2b64      	cmp	r3, #100	; 0x64
 8010f60:	d901      	bls.n	8010f66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010f62:	2303      	movs	r3, #3
 8010f64:	e20b      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010f66:	4b57      	ldr	r3, [pc, #348]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1f0      	bne.n	8010f54 <HAL_RCC_OscConfig+0x110>
 8010f72:	e000      	b.n	8010f76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f003 0302 	and.w	r3, r3, #2
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d069      	beq.n	8011056 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010f82:	4b50      	ldr	r3, [pc, #320]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	f003 030c 	and.w	r3, r3, #12
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00b      	beq.n	8010fa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010f8e:	4b4d      	ldr	r3, [pc, #308]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	f003 030c 	and.w	r3, r3, #12
 8010f96:	2b08      	cmp	r3, #8
 8010f98:	d11c      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x190>
 8010f9a:	4b4a      	ldr	r3, [pc, #296]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d116      	bne.n	8010fd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fa6:	4b47      	ldr	r3, [pc, #284]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f003 0302 	and.w	r3, r3, #2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d005      	beq.n	8010fbe <HAL_RCC_OscConfig+0x17a>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d001      	beq.n	8010fbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e1df      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010fbe:	4b41      	ldr	r3, [pc, #260]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	00db      	lsls	r3, r3, #3
 8010fcc:	493d      	ldr	r1, [pc, #244]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010fd2:	e040      	b.n	8011056 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d023      	beq.n	8011024 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010fdc:	4b39      	ldr	r3, [pc, #228]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4a38      	ldr	r2, [pc, #224]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8010fe2:	f043 0301 	orr.w	r3, r3, #1
 8010fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fe8:	f7ff fb92 	bl	8010710 <HAL_GetTick>
 8010fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010fee:	e008      	b.n	8011002 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010ff0:	f7ff fb8e 	bl	8010710 <HAL_GetTick>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	2b02      	cmp	r3, #2
 8010ffc:	d901      	bls.n	8011002 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010ffe:	2303      	movs	r3, #3
 8011000:	e1bd      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011002:	4b30      	ldr	r3, [pc, #192]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f003 0302 	and.w	r3, r3, #2
 801100a:	2b00      	cmp	r3, #0
 801100c:	d0f0      	beq.n	8010ff0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801100e:	4b2d      	ldr	r3, [pc, #180]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	691b      	ldr	r3, [r3, #16]
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	4929      	ldr	r1, [pc, #164]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 801101e:	4313      	orrs	r3, r2
 8011020:	600b      	str	r3, [r1, #0]
 8011022:	e018      	b.n	8011056 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011024:	4b27      	ldr	r3, [pc, #156]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4a26      	ldr	r2, [pc, #152]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 801102a:	f023 0301 	bic.w	r3, r3, #1
 801102e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011030:	f7ff fb6e 	bl	8010710 <HAL_GetTick>
 8011034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011036:	e008      	b.n	801104a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011038:	f7ff fb6a 	bl	8010710 <HAL_GetTick>
 801103c:	4602      	mov	r2, r0
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	2b02      	cmp	r3, #2
 8011044:	d901      	bls.n	801104a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011046:	2303      	movs	r3, #3
 8011048:	e199      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801104a:	4b1e      	ldr	r3, [pc, #120]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f003 0302 	and.w	r3, r3, #2
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1f0      	bne.n	8011038 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	f003 0308 	and.w	r3, r3, #8
 801105e:	2b00      	cmp	r3, #0
 8011060:	d038      	beq.n	80110d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d019      	beq.n	801109e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801106a:	4b16      	ldr	r3, [pc, #88]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 801106c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801106e:	4a15      	ldr	r2, [pc, #84]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8011070:	f043 0301 	orr.w	r3, r3, #1
 8011074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011076:	f7ff fb4b 	bl	8010710 <HAL_GetTick>
 801107a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801107c:	e008      	b.n	8011090 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801107e:	f7ff fb47 	bl	8010710 <HAL_GetTick>
 8011082:	4602      	mov	r2, r0
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	2b02      	cmp	r3, #2
 801108a:	d901      	bls.n	8011090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801108c:	2303      	movs	r3, #3
 801108e:	e176      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011090:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 8011092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0f0      	beq.n	801107e <HAL_RCC_OscConfig+0x23a>
 801109c:	e01a      	b.n	80110d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801109e:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 80110a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110a2:	4a08      	ldr	r2, [pc, #32]	; (80110c4 <HAL_RCC_OscConfig+0x280>)
 80110a4:	f023 0301 	bic.w	r3, r3, #1
 80110a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110aa:	f7ff fb31 	bl	8010710 <HAL_GetTick>
 80110ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110b0:	e00a      	b.n	80110c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80110b2:	f7ff fb2d 	bl	8010710 <HAL_GetTick>
 80110b6:	4602      	mov	r2, r0
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	1ad3      	subs	r3, r2, r3
 80110bc:	2b02      	cmp	r3, #2
 80110be:	d903      	bls.n	80110c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80110c0:	2303      	movs	r3, #3
 80110c2:	e15c      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
 80110c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80110c8:	4b91      	ldr	r3, [pc, #580]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80110ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110cc:	f003 0302 	and.w	r3, r3, #2
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d1ee      	bne.n	80110b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f003 0304 	and.w	r3, r3, #4
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f000 80a4 	beq.w	801122a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80110e2:	4b8b      	ldr	r3, [pc, #556]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80110e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10d      	bne.n	801110a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80110ee:	4b88      	ldr	r3, [pc, #544]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	4a87      	ldr	r2, [pc, #540]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80110f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80110f8:	6413      	str	r3, [r2, #64]	; 0x40
 80110fa:	4b85      	ldr	r3, [pc, #532]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80110fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011102:	60bb      	str	r3, [r7, #8]
 8011104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011106:	2301      	movs	r3, #1
 8011108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801110a:	4b82      	ldr	r3, [pc, #520]	; (8011314 <HAL_RCC_OscConfig+0x4d0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011112:	2b00      	cmp	r3, #0
 8011114:	d118      	bne.n	8011148 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8011116:	4b7f      	ldr	r3, [pc, #508]	; (8011314 <HAL_RCC_OscConfig+0x4d0>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a7e      	ldr	r2, [pc, #504]	; (8011314 <HAL_RCC_OscConfig+0x4d0>)
 801111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011122:	f7ff faf5 	bl	8010710 <HAL_GetTick>
 8011126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011128:	e008      	b.n	801113c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801112a:	f7ff faf1 	bl	8010710 <HAL_GetTick>
 801112e:	4602      	mov	r2, r0
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	2b64      	cmp	r3, #100	; 0x64
 8011136:	d901      	bls.n	801113c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8011138:	2303      	movs	r3, #3
 801113a:	e120      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801113c:	4b75      	ldr	r3, [pc, #468]	; (8011314 <HAL_RCC_OscConfig+0x4d0>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011144:	2b00      	cmp	r3, #0
 8011146:	d0f0      	beq.n	801112a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	689b      	ldr	r3, [r3, #8]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d106      	bne.n	801115e <HAL_RCC_OscConfig+0x31a>
 8011150:	4b6f      	ldr	r3, [pc, #444]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011154:	4a6e      	ldr	r2, [pc, #440]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011156:	f043 0301 	orr.w	r3, r3, #1
 801115a:	6713      	str	r3, [r2, #112]	; 0x70
 801115c:	e02d      	b.n	80111ba <HAL_RCC_OscConfig+0x376>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	689b      	ldr	r3, [r3, #8]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10c      	bne.n	8011180 <HAL_RCC_OscConfig+0x33c>
 8011166:	4b6a      	ldr	r3, [pc, #424]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116a:	4a69      	ldr	r2, [pc, #420]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801116c:	f023 0301 	bic.w	r3, r3, #1
 8011170:	6713      	str	r3, [r2, #112]	; 0x70
 8011172:	4b67      	ldr	r3, [pc, #412]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011176:	4a66      	ldr	r2, [pc, #408]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011178:	f023 0304 	bic.w	r3, r3, #4
 801117c:	6713      	str	r3, [r2, #112]	; 0x70
 801117e:	e01c      	b.n	80111ba <HAL_RCC_OscConfig+0x376>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	2b05      	cmp	r3, #5
 8011186:	d10c      	bne.n	80111a2 <HAL_RCC_OscConfig+0x35e>
 8011188:	4b61      	ldr	r3, [pc, #388]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801118a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801118c:	4a60      	ldr	r2, [pc, #384]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801118e:	f043 0304 	orr.w	r3, r3, #4
 8011192:	6713      	str	r3, [r2, #112]	; 0x70
 8011194:	4b5e      	ldr	r3, [pc, #376]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011198:	4a5d      	ldr	r2, [pc, #372]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801119a:	f043 0301 	orr.w	r3, r3, #1
 801119e:	6713      	str	r3, [r2, #112]	; 0x70
 80111a0:	e00b      	b.n	80111ba <HAL_RCC_OscConfig+0x376>
 80111a2:	4b5b      	ldr	r3, [pc, #364]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80111a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a6:	4a5a      	ldr	r2, [pc, #360]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80111a8:	f023 0301 	bic.w	r3, r3, #1
 80111ac:	6713      	str	r3, [r2, #112]	; 0x70
 80111ae:	4b58      	ldr	r3, [pc, #352]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80111b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b2:	4a57      	ldr	r2, [pc, #348]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80111b4:	f023 0304 	bic.w	r3, r3, #4
 80111b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d015      	beq.n	80111ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111c2:	f7ff faa5 	bl	8010710 <HAL_GetTick>
 80111c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111c8:	e00a      	b.n	80111e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80111ca:	f7ff faa1 	bl	8010710 <HAL_GetTick>
 80111ce:	4602      	mov	r2, r0
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80111d8:	4293      	cmp	r3, r2
 80111da:	d901      	bls.n	80111e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80111dc:	2303      	movs	r3, #3
 80111de:	e0ce      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80111e0:	4b4b      	ldr	r3, [pc, #300]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80111e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e4:	f003 0302 	and.w	r3, r3, #2
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d0ee      	beq.n	80111ca <HAL_RCC_OscConfig+0x386>
 80111ec:	e014      	b.n	8011218 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111ee:	f7ff fa8f 	bl	8010710 <HAL_GetTick>
 80111f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80111f4:	e00a      	b.n	801120c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80111f6:	f7ff fa8b 	bl	8010710 <HAL_GetTick>
 80111fa:	4602      	mov	r2, r0
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	f241 3288 	movw	r2, #5000	; 0x1388
 8011204:	4293      	cmp	r3, r2
 8011206:	d901      	bls.n	801120c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8011208:	2303      	movs	r3, #3
 801120a:	e0b8      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801120c:	4b40      	ldr	r3, [pc, #256]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011210:	f003 0302 	and.w	r3, r3, #2
 8011214:	2b00      	cmp	r3, #0
 8011216:	d1ee      	bne.n	80111f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011218:	7dfb      	ldrb	r3, [r7, #23]
 801121a:	2b01      	cmp	r3, #1
 801121c:	d105      	bne.n	801122a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801121e:	4b3c      	ldr	r3, [pc, #240]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011222:	4a3b      	ldr	r2, [pc, #236]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011228:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	699b      	ldr	r3, [r3, #24]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f000 80a4 	beq.w	801137c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011234:	4b36      	ldr	r3, [pc, #216]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	f003 030c 	and.w	r3, r3, #12
 801123c:	2b08      	cmp	r3, #8
 801123e:	d06b      	beq.n	8011318 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	699b      	ldr	r3, [r3, #24]
 8011244:	2b02      	cmp	r3, #2
 8011246:	d149      	bne.n	80112dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011248:	4b31      	ldr	r3, [pc, #196]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a30      	ldr	r2, [pc, #192]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 801124e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011254:	f7ff fa5c 	bl	8010710 <HAL_GetTick>
 8011258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801125a:	e008      	b.n	801126e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801125c:	f7ff fa58 	bl	8010710 <HAL_GetTick>
 8011260:	4602      	mov	r2, r0
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	2b02      	cmp	r3, #2
 8011268:	d901      	bls.n	801126e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801126a:	2303      	movs	r3, #3
 801126c:	e087      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801126e:	4b28      	ldr	r3, [pc, #160]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1f0      	bne.n	801125c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	69da      	ldr	r2, [r3, #28]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a1b      	ldr	r3, [r3, #32]
 8011282:	431a      	orrs	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011288:	019b      	lsls	r3, r3, #6
 801128a:	431a      	orrs	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011290:	085b      	lsrs	r3, r3, #1
 8011292:	3b01      	subs	r3, #1
 8011294:	041b      	lsls	r3, r3, #16
 8011296:	431a      	orrs	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801129c:	061b      	lsls	r3, r3, #24
 801129e:	4313      	orrs	r3, r2
 80112a0:	4a1b      	ldr	r2, [pc, #108]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80112a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80112a8:	4b19      	ldr	r3, [pc, #100]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a18      	ldr	r2, [pc, #96]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112b4:	f7ff fa2c 	bl	8010710 <HAL_GetTick>
 80112b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112ba:	e008      	b.n	80112ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112bc:	f7ff fa28 	bl	8010710 <HAL_GetTick>
 80112c0:	4602      	mov	r2, r0
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	2b02      	cmp	r3, #2
 80112c8:	d901      	bls.n	80112ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80112ca:	2303      	movs	r3, #3
 80112cc:	e057      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80112ce:	4b10      	ldr	r3, [pc, #64]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0f0      	beq.n	80112bc <HAL_RCC_OscConfig+0x478>
 80112da:	e04f      	b.n	801137c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112dc:	4b0c      	ldr	r3, [pc, #48]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a0b      	ldr	r2, [pc, #44]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 80112e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80112e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112e8:	f7ff fa12 	bl	8010710 <HAL_GetTick>
 80112ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80112ee:	e008      	b.n	8011302 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112f0:	f7ff fa0e 	bl	8010710 <HAL_GetTick>
 80112f4:	4602      	mov	r2, r0
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d901      	bls.n	8011302 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80112fe:	2303      	movs	r3, #3
 8011300:	e03d      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011302:	4b03      	ldr	r3, [pc, #12]	; (8011310 <HAL_RCC_OscConfig+0x4cc>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f0      	bne.n	80112f0 <HAL_RCC_OscConfig+0x4ac>
 801130e:	e035      	b.n	801137c <HAL_RCC_OscConfig+0x538>
 8011310:	40023800 	.word	0x40023800
 8011314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8011318:	4b1b      	ldr	r3, [pc, #108]	; (8011388 <HAL_RCC_OscConfig+0x544>)
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d028      	beq.n	8011378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011330:	429a      	cmp	r2, r3
 8011332:	d121      	bne.n	8011378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801133e:	429a      	cmp	r2, r3
 8011340:	d11a      	bne.n	8011378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011348:	4013      	ands	r3, r2
 801134a:	687a      	ldr	r2, [r7, #4]
 801134c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801134e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011350:	4293      	cmp	r3, r2
 8011352:	d111      	bne.n	8011378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801135e:	085b      	lsrs	r3, r3, #1
 8011360:	3b01      	subs	r3, #1
 8011362:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011364:	429a      	cmp	r2, r3
 8011366:	d107      	bne.n	8011378 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011374:	429a      	cmp	r2, r3
 8011376:	d001      	beq.n	801137c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8011378:	2301      	movs	r3, #1
 801137a:	e000      	b.n	801137e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3718      	adds	r7, #24
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	40023800 	.word	0x40023800

0801138c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8011396:	2300      	movs	r3, #0
 8011398:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d101      	bne.n	80113a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80113a0:	2301      	movs	r3, #1
 80113a2:	e0d0      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80113a4:	4b6a      	ldr	r3, [pc, #424]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f003 030f 	and.w	r3, r3, #15
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d910      	bls.n	80113d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113b2:	4b67      	ldr	r3, [pc, #412]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f023 020f 	bic.w	r2, r3, #15
 80113ba:	4965      	ldr	r1, [pc, #404]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	4313      	orrs	r3, r2
 80113c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80113c2:	4b63      	ldr	r3, [pc, #396]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f003 030f 	and.w	r3, r3, #15
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d001      	beq.n	80113d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	e0b8      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f003 0302 	and.w	r3, r3, #2
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d020      	beq.n	8011422 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f003 0304 	and.w	r3, r3, #4
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d005      	beq.n	80113f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80113ec:	4b59      	ldr	r3, [pc, #356]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	4a58      	ldr	r2, [pc, #352]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 80113f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80113f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f003 0308 	and.w	r3, r3, #8
 8011400:	2b00      	cmp	r3, #0
 8011402:	d005      	beq.n	8011410 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011404:	4b53      	ldr	r3, [pc, #332]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	4a52      	ldr	r2, [pc, #328]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 801140a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801140e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011410:	4b50      	ldr	r3, [pc, #320]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	494d      	ldr	r1, [pc, #308]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 801141e:	4313      	orrs	r3, r2
 8011420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	2b00      	cmp	r3, #0
 801142c:	d040      	beq.n	80114b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	2b01      	cmp	r3, #1
 8011434:	d107      	bne.n	8011446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011436:	4b47      	ldr	r3, [pc, #284]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801143e:	2b00      	cmp	r3, #0
 8011440:	d115      	bne.n	801146e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	e07f      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	2b02      	cmp	r3, #2
 801144c:	d107      	bne.n	801145e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801144e:	4b41      	ldr	r3, [pc, #260]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011456:	2b00      	cmp	r3, #0
 8011458:	d109      	bne.n	801146e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	e073      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801145e:	4b3d      	ldr	r3, [pc, #244]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f003 0302 	and.w	r3, r3, #2
 8011466:	2b00      	cmp	r3, #0
 8011468:	d101      	bne.n	801146e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801146a:	2301      	movs	r3, #1
 801146c:	e06b      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801146e:	4b39      	ldr	r3, [pc, #228]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011470:	689b      	ldr	r3, [r3, #8]
 8011472:	f023 0203 	bic.w	r2, r3, #3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	4936      	ldr	r1, [pc, #216]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 801147c:	4313      	orrs	r3, r2
 801147e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011480:	f7ff f946 	bl	8010710 <HAL_GetTick>
 8011484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011486:	e00a      	b.n	801149e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011488:	f7ff f942 	bl	8010710 <HAL_GetTick>
 801148c:	4602      	mov	r2, r0
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	1ad3      	subs	r3, r2, r3
 8011492:	f241 3288 	movw	r2, #5000	; 0x1388
 8011496:	4293      	cmp	r3, r2
 8011498:	d901      	bls.n	801149e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801149a:	2303      	movs	r3, #3
 801149c:	e053      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801149e:	4b2d      	ldr	r3, [pc, #180]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	f003 020c 	and.w	r2, r3, #12
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d1eb      	bne.n	8011488 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80114b0:	4b27      	ldr	r3, [pc, #156]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f003 030f 	and.w	r3, r3, #15
 80114b8:	683a      	ldr	r2, [r7, #0]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d210      	bcs.n	80114e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80114be:	4b24      	ldr	r3, [pc, #144]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f023 020f 	bic.w	r2, r3, #15
 80114c6:	4922      	ldr	r1, [pc, #136]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80114ce:	4b20      	ldr	r3, [pc, #128]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f003 030f 	and.w	r3, r3, #15
 80114d6:	683a      	ldr	r2, [r7, #0]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d001      	beq.n	80114e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80114dc:	2301      	movs	r3, #1
 80114de:	e032      	b.n	8011546 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f003 0304 	and.w	r3, r3, #4
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d008      	beq.n	80114fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80114ec:	4b19      	ldr	r3, [pc, #100]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	4916      	ldr	r1, [pc, #88]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 80114fa:	4313      	orrs	r3, r2
 80114fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f003 0308 	and.w	r3, r3, #8
 8011506:	2b00      	cmp	r3, #0
 8011508:	d009      	beq.n	801151e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801150a:	4b12      	ldr	r3, [pc, #72]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	490e      	ldr	r1, [pc, #56]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 801151a:	4313      	orrs	r3, r2
 801151c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801151e:	f000 f821 	bl	8011564 <HAL_RCC_GetSysClockFreq>
 8011522:	4602      	mov	r2, r0
 8011524:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011526:	689b      	ldr	r3, [r3, #8]
 8011528:	091b      	lsrs	r3, r3, #4
 801152a:	f003 030f 	and.w	r3, r3, #15
 801152e:	490a      	ldr	r1, [pc, #40]	; (8011558 <HAL_RCC_ClockConfig+0x1cc>)
 8011530:	5ccb      	ldrb	r3, [r1, r3]
 8011532:	fa22 f303 	lsr.w	r3, r2, r3
 8011536:	4a09      	ldr	r2, [pc, #36]	; (801155c <HAL_RCC_ClockConfig+0x1d0>)
 8011538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801153a:	4b09      	ldr	r3, [pc, #36]	; (8011560 <HAL_RCC_ClockConfig+0x1d4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff f8a2 	bl	8010688 <HAL_InitTick>

  return HAL_OK;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	40023c00 	.word	0x40023c00
 8011554:	40023800 	.word	0x40023800
 8011558:	08024500 	.word	0x08024500
 801155c:	200050a0 	.word	0x200050a0
 8011560:	200050a4 	.word	0x200050a4

08011564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011568:	b090      	sub	sp, #64	; 0x40
 801156a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	637b      	str	r3, [r7, #52]	; 0x34
 8011570:	2300      	movs	r3, #0
 8011572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011574:	2300      	movs	r3, #0
 8011576:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8011578:	2300      	movs	r3, #0
 801157a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801157c:	4b59      	ldr	r3, [pc, #356]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801157e:	689b      	ldr	r3, [r3, #8]
 8011580:	f003 030c 	and.w	r3, r3, #12
 8011584:	2b08      	cmp	r3, #8
 8011586:	d00d      	beq.n	80115a4 <HAL_RCC_GetSysClockFreq+0x40>
 8011588:	2b08      	cmp	r3, #8
 801158a:	f200 80a1 	bhi.w	80116d0 <HAL_RCC_GetSysClockFreq+0x16c>
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <HAL_RCC_GetSysClockFreq+0x34>
 8011592:	2b04      	cmp	r3, #4
 8011594:	d003      	beq.n	801159e <HAL_RCC_GetSysClockFreq+0x3a>
 8011596:	e09b      	b.n	80116d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011598:	4b53      	ldr	r3, [pc, #332]	; (80116e8 <HAL_RCC_GetSysClockFreq+0x184>)
 801159a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801159c:	e09b      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801159e:	4b53      	ldr	r3, [pc, #332]	; (80116ec <HAL_RCC_GetSysClockFreq+0x188>)
 80115a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80115a2:	e098      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80115a4:	4b4f      	ldr	r3, [pc, #316]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80115ae:	4b4d      	ldr	r3, [pc, #308]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d028      	beq.n	801160c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115ba:	4b4a      	ldr	r3, [pc, #296]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	099b      	lsrs	r3, r3, #6
 80115c0:	2200      	movs	r2, #0
 80115c2:	623b      	str	r3, [r7, #32]
 80115c4:	627a      	str	r2, [r7, #36]	; 0x24
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80115cc:	2100      	movs	r1, #0
 80115ce:	4b47      	ldr	r3, [pc, #284]	; (80116ec <HAL_RCC_GetSysClockFreq+0x188>)
 80115d0:	fb03 f201 	mul.w	r2, r3, r1
 80115d4:	2300      	movs	r3, #0
 80115d6:	fb00 f303 	mul.w	r3, r0, r3
 80115da:	4413      	add	r3, r2
 80115dc:	4a43      	ldr	r2, [pc, #268]	; (80116ec <HAL_RCC_GetSysClockFreq+0x188>)
 80115de:	fba0 1202 	umull	r1, r2, r0, r2
 80115e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80115e4:	460a      	mov	r2, r1
 80115e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80115e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115ea:	4413      	add	r3, r2
 80115ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f0:	2200      	movs	r2, #0
 80115f2:	61bb      	str	r3, [r7, #24]
 80115f4:	61fa      	str	r2, [r7, #28]
 80115f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80115fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80115fe:	f7ef fbc3 	bl	8000d88 <__aeabi_uldivmod>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	4613      	mov	r3, r2
 8011608:	63fb      	str	r3, [r7, #60]	; 0x3c
 801160a:	e053      	b.n	80116b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801160c:	4b35      	ldr	r3, [pc, #212]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	099b      	lsrs	r3, r3, #6
 8011612:	2200      	movs	r2, #0
 8011614:	613b      	str	r3, [r7, #16]
 8011616:	617a      	str	r2, [r7, #20]
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801161e:	f04f 0b00 	mov.w	fp, #0
 8011622:	4652      	mov	r2, sl
 8011624:	465b      	mov	r3, fp
 8011626:	f04f 0000 	mov.w	r0, #0
 801162a:	f04f 0100 	mov.w	r1, #0
 801162e:	0159      	lsls	r1, r3, #5
 8011630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011634:	0150      	lsls	r0, r2, #5
 8011636:	4602      	mov	r2, r0
 8011638:	460b      	mov	r3, r1
 801163a:	ebb2 080a 	subs.w	r8, r2, sl
 801163e:	eb63 090b 	sbc.w	r9, r3, fp
 8011642:	f04f 0200 	mov.w	r2, #0
 8011646:	f04f 0300 	mov.w	r3, #0
 801164a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801164e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8011652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8011656:	ebb2 0408 	subs.w	r4, r2, r8
 801165a:	eb63 0509 	sbc.w	r5, r3, r9
 801165e:	f04f 0200 	mov.w	r2, #0
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	00eb      	lsls	r3, r5, #3
 8011668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801166c:	00e2      	lsls	r2, r4, #3
 801166e:	4614      	mov	r4, r2
 8011670:	461d      	mov	r5, r3
 8011672:	eb14 030a 	adds.w	r3, r4, sl
 8011676:	603b      	str	r3, [r7, #0]
 8011678:	eb45 030b 	adc.w	r3, r5, fp
 801167c:	607b      	str	r3, [r7, #4]
 801167e:	f04f 0200 	mov.w	r2, #0
 8011682:	f04f 0300 	mov.w	r3, #0
 8011686:	e9d7 4500 	ldrd	r4, r5, [r7]
 801168a:	4629      	mov	r1, r5
 801168c:	028b      	lsls	r3, r1, #10
 801168e:	4621      	mov	r1, r4
 8011690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011694:	4621      	mov	r1, r4
 8011696:	028a      	lsls	r2, r1, #10
 8011698:	4610      	mov	r0, r2
 801169a:	4619      	mov	r1, r3
 801169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169e:	2200      	movs	r2, #0
 80116a0:	60bb      	str	r3, [r7, #8]
 80116a2:	60fa      	str	r2, [r7, #12]
 80116a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80116a8:	f7ef fb6e 	bl	8000d88 <__aeabi_uldivmod>
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	4613      	mov	r3, r2
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80116b4:	4b0b      	ldr	r3, [pc, #44]	; (80116e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	0c1b      	lsrs	r3, r3, #16
 80116ba:	f003 0303 	and.w	r3, r3, #3
 80116be:	3301      	adds	r3, #1
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80116c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80116ce:	e002      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80116d0:	4b05      	ldr	r3, [pc, #20]	; (80116e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80116d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80116d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3740      	adds	r7, #64	; 0x40
 80116dc:	46bd      	mov	sp, r7
 80116de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116e2:	bf00      	nop
 80116e4:	40023800 	.word	0x40023800
 80116e8:	00f42400 	.word	0x00f42400
 80116ec:	017d7840 	.word	0x017d7840

080116f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80116f0:	b480      	push	{r7}
 80116f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80116f4:	4b03      	ldr	r3, [pc, #12]	; (8011704 <HAL_RCC_GetHCLKFreq+0x14>)
 80116f6:	681b      	ldr	r3, [r3, #0]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	200050a0 	.word	0x200050a0

08011708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801170c:	f7ff fff0 	bl	80116f0 <HAL_RCC_GetHCLKFreq>
 8011710:	4602      	mov	r2, r0
 8011712:	4b05      	ldr	r3, [pc, #20]	; (8011728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011714:	689b      	ldr	r3, [r3, #8]
 8011716:	0a9b      	lsrs	r3, r3, #10
 8011718:	f003 0307 	and.w	r3, r3, #7
 801171c:	4903      	ldr	r1, [pc, #12]	; (801172c <HAL_RCC_GetPCLK1Freq+0x24>)
 801171e:	5ccb      	ldrb	r3, [r1, r3]
 8011720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011724:	4618      	mov	r0, r3
 8011726:	bd80      	pop	{r7, pc}
 8011728:	40023800 	.word	0x40023800
 801172c:	08024510 	.word	0x08024510

08011730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011734:	f7ff ffdc 	bl	80116f0 <HAL_RCC_GetHCLKFreq>
 8011738:	4602      	mov	r2, r0
 801173a:	4b05      	ldr	r3, [pc, #20]	; (8011750 <HAL_RCC_GetPCLK2Freq+0x20>)
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	0b5b      	lsrs	r3, r3, #13
 8011740:	f003 0307 	and.w	r3, r3, #7
 8011744:	4903      	ldr	r1, [pc, #12]	; (8011754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011746:	5ccb      	ldrb	r3, [r1, r3]
 8011748:	fa22 f303 	lsr.w	r3, r2, r3
}
 801174c:	4618      	mov	r0, r3
 801174e:	bd80      	pop	{r7, pc}
 8011750:	40023800 	.word	0x40023800
 8011754:	08024510 	.word	0x08024510

08011758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8011768:	2300      	movs	r3, #0
 801176a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801176c:	2300      	movs	r3, #0
 801176e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8011770:	2300      	movs	r3, #0
 8011772:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	f003 0301 	and.w	r3, r3, #1
 801177c:	2b00      	cmp	r3, #0
 801177e:	d012      	beq.n	80117a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011780:	4b69      	ldr	r3, [pc, #420]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	4a68      	ldr	r2, [pc, #416]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011786:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801178a:	6093      	str	r3, [r2, #8]
 801178c:	4b66      	ldr	r3, [pc, #408]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801178e:	689a      	ldr	r2, [r3, #8]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011794:	4964      	ldr	r1, [pc, #400]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011796:	4313      	orrs	r3, r2
 8011798:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80117a2:	2301      	movs	r3, #1
 80117a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80117b2:	4b5d      	ldr	r3, [pc, #372]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117c0:	4959      	ldr	r1, [pc, #356]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117c2:	4313      	orrs	r3, r2
 80117c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80117d0:	d101      	bne.n	80117d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80117d2:	2301      	movs	r3, #1
 80117d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d101      	bne.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80117de:	2301      	movs	r3, #1
 80117e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d017      	beq.n	801181e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80117ee:	4b4e      	ldr	r3, [pc, #312]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117fc:	494a      	ldr	r1, [pc, #296]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117fe:	4313      	orrs	r3, r2
 8011800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801180c:	d101      	bne.n	8011812 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801180e:	2301      	movs	r3, #1
 8011810:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011816:	2b00      	cmp	r3, #0
 8011818:	d101      	bne.n	801181e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801181a:	2301      	movs	r3, #1
 801181c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801182a:	2301      	movs	r3, #1
 801182c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f003 0320 	and.w	r3, r3, #32
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 808b 	beq.w	8011952 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801183c:	4b3a      	ldr	r3, [pc, #232]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011840:	4a39      	ldr	r2, [pc, #228]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011846:	6413      	str	r3, [r2, #64]	; 0x40
 8011848:	4b37      	ldr	r3, [pc, #220]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011850:	60bb      	str	r3, [r7, #8]
 8011852:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011854:	4b35      	ldr	r3, [pc, #212]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4a34      	ldr	r2, [pc, #208]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801185e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011860:	f7fe ff56 	bl	8010710 <HAL_GetTick>
 8011864:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011866:	e008      	b.n	801187a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011868:	f7fe ff52 	bl	8010710 <HAL_GetTick>
 801186c:	4602      	mov	r2, r0
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	2b64      	cmp	r3, #100	; 0x64
 8011874:	d901      	bls.n	801187a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8011876:	2303      	movs	r3, #3
 8011878:	e357      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801187a:	4b2c      	ldr	r3, [pc, #176]	; (801192c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011882:	2b00      	cmp	r3, #0
 8011884:	d0f0      	beq.n	8011868 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011886:	4b28      	ldr	r3, [pc, #160]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801188e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d035      	beq.n	8011902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801189a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801189e:	693a      	ldr	r2, [r7, #16]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d02e      	beq.n	8011902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80118a4:	4b20      	ldr	r3, [pc, #128]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80118ae:	4b1e      	ldr	r3, [pc, #120]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118b2:	4a1d      	ldr	r2, [pc, #116]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80118b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80118ba:	4b1b      	ldr	r3, [pc, #108]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118be:	4a1a      	ldr	r2, [pc, #104]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80118c6:	4a18      	ldr	r2, [pc, #96]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80118cc:	4b16      	ldr	r3, [pc, #88]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118d0:	f003 0301 	and.w	r3, r3, #1
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d114      	bne.n	8011902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118d8:	f7fe ff1a 	bl	8010710 <HAL_GetTick>
 80118dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118de:	e00a      	b.n	80118f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80118e0:	f7fe ff16 	bl	8010710 <HAL_GetTick>
 80118e4:	4602      	mov	r2, r0
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	1ad3      	subs	r3, r2, r3
 80118ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d901      	bls.n	80118f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80118f2:	2303      	movs	r3, #3
 80118f4:	e319      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118f6:	4b0c      	ldr	r3, [pc, #48]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fa:	f003 0302 	and.w	r3, r3, #2
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0ee      	beq.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801190a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801190e:	d111      	bne.n	8011934 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8011910:	4b05      	ldr	r3, [pc, #20]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011912:	689b      	ldr	r3, [r3, #8]
 8011914:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801191c:	4b04      	ldr	r3, [pc, #16]	; (8011930 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801191e:	400b      	ands	r3, r1
 8011920:	4901      	ldr	r1, [pc, #4]	; (8011928 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011922:	4313      	orrs	r3, r2
 8011924:	608b      	str	r3, [r1, #8]
 8011926:	e00b      	b.n	8011940 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8011928:	40023800 	.word	0x40023800
 801192c:	40007000 	.word	0x40007000
 8011930:	0ffffcff 	.word	0x0ffffcff
 8011934:	4baa      	ldr	r3, [pc, #680]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011936:	689b      	ldr	r3, [r3, #8]
 8011938:	4aa9      	ldr	r2, [pc, #676]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801193a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801193e:	6093      	str	r3, [r2, #8]
 8011940:	4ba7      	ldr	r3, [pc, #668]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801194c:	49a4      	ldr	r1, [pc, #656]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801194e:	4313      	orrs	r3, r2
 8011950:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 0310 	and.w	r3, r3, #16
 801195a:	2b00      	cmp	r3, #0
 801195c:	d010      	beq.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801195e:	4ba0      	ldr	r3, [pc, #640]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011964:	4a9e      	ldr	r2, [pc, #632]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801196a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801196e:	4b9c      	ldr	r3, [pc, #624]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011970:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011978:	4999      	ldr	r1, [pc, #612]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801197a:	4313      	orrs	r3, r2
 801197c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00a      	beq.n	80119a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801198c:	4b94      	ldr	r3, [pc, #592]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801198e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801199a:	4991      	ldr	r1, [pc, #580]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801199c:	4313      	orrs	r3, r2
 801199e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00a      	beq.n	80119c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80119ae:	4b8c      	ldr	r3, [pc, #560]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119bc:	4988      	ldr	r1, [pc, #544]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119be:	4313      	orrs	r3, r2
 80119c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00a      	beq.n	80119e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80119d0:	4b83      	ldr	r3, [pc, #524]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119de:	4980      	ldr	r1, [pc, #512]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119e0:	4313      	orrs	r3, r2
 80119e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80119f2:	4b7b      	ldr	r3, [pc, #492]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80119f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a00:	4977      	ldr	r1, [pc, #476]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a02:	4313      	orrs	r3, r2
 8011a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00a      	beq.n	8011a2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011a14:	4b72      	ldr	r3, [pc, #456]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a1a:	f023 0203 	bic.w	r2, r3, #3
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a22:	496f      	ldr	r1, [pc, #444]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a24:	4313      	orrs	r3, r2
 8011a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00a      	beq.n	8011a4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011a36:	4b6a      	ldr	r3, [pc, #424]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a3c:	f023 020c 	bic.w	r2, r3, #12
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a44:	4966      	ldr	r1, [pc, #408]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a46:	4313      	orrs	r3, r2
 8011a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00a      	beq.n	8011a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011a58:	4b61      	ldr	r3, [pc, #388]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a66:	495e      	ldr	r1, [pc, #376]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011a7a:	4b59      	ldr	r3, [pc, #356]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a80:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a88:	4955      	ldr	r1, [pc, #340]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00a      	beq.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011a9c:	4b50      	ldr	r3, [pc, #320]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011aaa:	494d      	ldr	r1, [pc, #308]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011aac:	4313      	orrs	r3, r2
 8011aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d00a      	beq.n	8011ad4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8011abe:	4b48      	ldr	r3, [pc, #288]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ac4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011acc:	4944      	ldr	r1, [pc, #272]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00a      	beq.n	8011af6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8011ae0:	4b3f      	ldr	r3, [pc, #252]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ae6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aee:	493c      	ldr	r1, [pc, #240]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011af0:	4313      	orrs	r3, r2
 8011af2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d00a      	beq.n	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8011b02:	4b37      	ldr	r3, [pc, #220]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b10:	4933      	ldr	r1, [pc, #204]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b12:	4313      	orrs	r3, r2
 8011b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00a      	beq.n	8011b3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011b24:	4b2e      	ldr	r3, [pc, #184]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b32:	492b      	ldr	r1, [pc, #172]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b34:	4313      	orrs	r3, r2
 8011b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d011      	beq.n	8011b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8011b46:	4b26      	ldr	r3, [pc, #152]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b54:	4922      	ldr	r1, [pc, #136]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b56:	4313      	orrs	r3, r2
 8011b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b64:	d101      	bne.n	8011b6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8011b66:	2301      	movs	r3, #1
 8011b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f003 0308 	and.w	r3, r3, #8
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8011b76:	2301      	movs	r3, #1
 8011b78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00a      	beq.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b86:	4b16      	ldr	r3, [pc, #88]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b94:	4912      	ldr	r1, [pc, #72]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011b96:	4313      	orrs	r3, r2
 8011b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00b      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011ba8:	4b0d      	ldr	r3, [pc, #52]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bb8:	4909      	ldr	r1, [pc, #36]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8011bc0:	69fb      	ldr	r3, [r7, #28]
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	d006      	beq.n	8011bd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f000 80d9 	beq.w	8011d86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011bd4:	4b02      	ldr	r3, [pc, #8]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4a01      	ldr	r2, [pc, #4]	; (8011be0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8011bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011bde:	e001      	b.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8011be0:	40023800 	.word	0x40023800
 8011be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011be6:	f7fe fd93 	bl	8010710 <HAL_GetTick>
 8011bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011bec:	e008      	b.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011bee:	f7fe fd8f 	bl	8010710 <HAL_GetTick>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	2b64      	cmp	r3, #100	; 0x64
 8011bfa:	d901      	bls.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	e194      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011c00:	4b6c      	ldr	r3, [pc, #432]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1f0      	bne.n	8011bee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f003 0301 	and.w	r3, r3, #1
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d021      	beq.n	8011c5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d11d      	bne.n	8011c5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011c20:	4b64      	ldr	r3, [pc, #400]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c26:	0c1b      	lsrs	r3, r3, #16
 8011c28:	f003 0303 	and.w	r3, r3, #3
 8011c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011c2e:	4b61      	ldr	r3, [pc, #388]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c34:	0e1b      	lsrs	r3, r3, #24
 8011c36:	f003 030f 	and.w	r3, r3, #15
 8011c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	019a      	lsls	r2, r3, #6
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	041b      	lsls	r3, r3, #16
 8011c46:	431a      	orrs	r2, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	061b      	lsls	r3, r3, #24
 8011c4c:	431a      	orrs	r2, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	071b      	lsls	r3, r3, #28
 8011c54:	4957      	ldr	r1, [pc, #348]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c56:	4313      	orrs	r3, r2
 8011c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d004      	beq.n	8011c72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c70:	d00a      	beq.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d02e      	beq.n	8011cdc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c86:	d129      	bne.n	8011cdc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011c88:	4b4a      	ldr	r3, [pc, #296]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c8e:	0c1b      	lsrs	r3, r3, #16
 8011c90:	f003 0303 	and.w	r3, r3, #3
 8011c94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011c96:	4b47      	ldr	r3, [pc, #284]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c9c:	0f1b      	lsrs	r3, r3, #28
 8011c9e:	f003 0307 	and.w	r3, r3, #7
 8011ca2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	019a      	lsls	r2, r3, #6
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	041b      	lsls	r3, r3, #16
 8011cae:	431a      	orrs	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	061b      	lsls	r3, r3, #24
 8011cb6:	431a      	orrs	r2, r3
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	071b      	lsls	r3, r3, #28
 8011cbc:	493d      	ldr	r1, [pc, #244]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011cc4:	4b3b      	ldr	r3, [pc, #236]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cca:	f023 021f 	bic.w	r2, r3, #31
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	4937      	ldr	r1, [pc, #220]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d01d      	beq.n	8011d24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011ce8:	4b32      	ldr	r3, [pc, #200]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cee:	0e1b      	lsrs	r3, r3, #24
 8011cf0:	f003 030f 	and.w	r3, r3, #15
 8011cf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011cf6:	4b2f      	ldr	r3, [pc, #188]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cfc:	0f1b      	lsrs	r3, r3, #28
 8011cfe:	f003 0307 	and.w	r3, r3, #7
 8011d02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	019a      	lsls	r2, r3, #6
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	691b      	ldr	r3, [r3, #16]
 8011d0e:	041b      	lsls	r3, r3, #16
 8011d10:	431a      	orrs	r2, r3
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	061b      	lsls	r3, r3, #24
 8011d16:	431a      	orrs	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	071b      	lsls	r3, r3, #28
 8011d1c:	4925      	ldr	r1, [pc, #148]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d011      	beq.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	019a      	lsls	r2, r3, #6
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	041b      	lsls	r3, r3, #16
 8011d3c:	431a      	orrs	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	061b      	lsls	r3, r3, #24
 8011d44:	431a      	orrs	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	689b      	ldr	r3, [r3, #8]
 8011d4a:	071b      	lsls	r3, r3, #28
 8011d4c:	4919      	ldr	r1, [pc, #100]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011d54:	4b17      	ldr	r3, [pc, #92]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4a16      	ldr	r2, [pc, #88]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d60:	f7fe fcd6 	bl	8010710 <HAL_GetTick>
 8011d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d66:	e008      	b.n	8011d7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011d68:	f7fe fcd2 	bl	8010710 <HAL_GetTick>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	2b64      	cmp	r3, #100	; 0x64
 8011d74:	d901      	bls.n	8011d7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011d76:	2303      	movs	r3, #3
 8011d78:	e0d7      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d7a:	4b0e      	ldr	r3, [pc, #56]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d0f0      	beq.n	8011d68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	f040 80cd 	bne.w	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011d8e:	4b09      	ldr	r3, [pc, #36]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	4a08      	ldr	r2, [pc, #32]	; (8011db4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8011d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d9a:	f7fe fcb9 	bl	8010710 <HAL_GetTick>
 8011d9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011da0:	e00a      	b.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011da2:	f7fe fcb5 	bl	8010710 <HAL_GetTick>
 8011da6:	4602      	mov	r2, r0
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	2b64      	cmp	r3, #100	; 0x64
 8011dae:	d903      	bls.n	8011db8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011db0:	2303      	movs	r3, #3
 8011db2:	e0ba      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8011db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011db8:	4b5e      	ldr	r3, [pc, #376]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dc4:	d0ed      	beq.n	8011da2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d003      	beq.n	8011dda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d009      	beq.n	8011dee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d02e      	beq.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d12a      	bne.n	8011e44 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011dee:	4b51      	ldr	r3, [pc, #324]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011df4:	0c1b      	lsrs	r3, r3, #16
 8011df6:	f003 0303 	and.w	r3, r3, #3
 8011dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011dfc:	4b4d      	ldr	r3, [pc, #308]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e02:	0f1b      	lsrs	r3, r3, #28
 8011e04:	f003 0307 	and.w	r3, r3, #7
 8011e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	695b      	ldr	r3, [r3, #20]
 8011e0e:	019a      	lsls	r2, r3, #6
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	041b      	lsls	r3, r3, #16
 8011e14:	431a      	orrs	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	699b      	ldr	r3, [r3, #24]
 8011e1a:	061b      	lsls	r3, r3, #24
 8011e1c:	431a      	orrs	r2, r3
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	071b      	lsls	r3, r3, #28
 8011e22:	4944      	ldr	r1, [pc, #272]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e24:	4313      	orrs	r3, r2
 8011e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011e2a:	4b42      	ldr	r3, [pc, #264]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	021b      	lsls	r3, r3, #8
 8011e3c:	493d      	ldr	r1, [pc, #244]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d022      	beq.n	8011e96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e58:	d11d      	bne.n	8011e96 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011e5a:	4b36      	ldr	r3, [pc, #216]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e60:	0e1b      	lsrs	r3, r3, #24
 8011e62:	f003 030f 	and.w	r3, r3, #15
 8011e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011e68:	4b32      	ldr	r3, [pc, #200]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e6e:	0f1b      	lsrs	r3, r3, #28
 8011e70:	f003 0307 	and.w	r3, r3, #7
 8011e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	695b      	ldr	r3, [r3, #20]
 8011e7a:	019a      	lsls	r2, r3, #6
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6a1b      	ldr	r3, [r3, #32]
 8011e80:	041b      	lsls	r3, r3, #16
 8011e82:	431a      	orrs	r2, r3
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	061b      	lsls	r3, r3, #24
 8011e88:	431a      	orrs	r2, r3
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	071b      	lsls	r3, r3, #28
 8011e8e:	4929      	ldr	r1, [pc, #164]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011e90:	4313      	orrs	r3, r2
 8011e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 0308 	and.w	r3, r3, #8
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d028      	beq.n	8011ef4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011ea2:	4b24      	ldr	r3, [pc, #144]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ea8:	0e1b      	lsrs	r3, r3, #24
 8011eaa:	f003 030f 	and.w	r3, r3, #15
 8011eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011eb0:	4b20      	ldr	r3, [pc, #128]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011eb6:	0c1b      	lsrs	r3, r3, #16
 8011eb8:	f003 0303 	and.w	r3, r3, #3
 8011ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	695b      	ldr	r3, [r3, #20]
 8011ec2:	019a      	lsls	r2, r3, #6
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	041b      	lsls	r3, r3, #16
 8011ec8:	431a      	orrs	r2, r3
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	061b      	lsls	r3, r3, #24
 8011ece:	431a      	orrs	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	69db      	ldr	r3, [r3, #28]
 8011ed4:	071b      	lsls	r3, r3, #28
 8011ed6:	4917      	ldr	r1, [pc, #92]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011ede:	4b15      	ldr	r3, [pc, #84]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eec:	4911      	ldr	r1, [pc, #68]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011ef4:	4b0f      	ldr	r3, [pc, #60]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4a0e      	ldr	r2, [pc, #56]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f00:	f7fe fc06 	bl	8010710 <HAL_GetTick>
 8011f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f06:	e008      	b.n	8011f1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011f08:	f7fe fc02 	bl	8010710 <HAL_GetTick>
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	2b64      	cmp	r3, #100	; 0x64
 8011f14:	d901      	bls.n	8011f1a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011f16:	2303      	movs	r3, #3
 8011f18:	e007      	b.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f1a:	4b06      	ldr	r3, [pc, #24]	; (8011f34 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f26:	d1ef      	bne.n	8011f08 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8011f28:	2300      	movs	r3, #0
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3720      	adds	r7, #32
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	40023800 	.word	0x40023800

08011f38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d101      	bne.n	8011f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e040      	b.n	8011fcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f7fe f9c8 	bl	80102f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2224      	movs	r2, #36	; 0x24
 8011f64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f022 0201 	bic.w	r2, r2, #1
 8011f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f000 fba2 	bl	80126c0 <UART_SetConfig>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d101      	bne.n	8011f86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011f82:	2301      	movs	r3, #1
 8011f84:	e022      	b.n	8011fcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d002      	beq.n	8011f94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f000 fdfa 	bl	8012b88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	685a      	ldr	r2, [r3, #4]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	689a      	ldr	r2, [r3, #8]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f042 0201 	orr.w	r2, r2, #1
 8011fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fe81 	bl	8012ccc <UART_CheckIdleState>
 8011fca:	4603      	mov	r3, r0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b08a      	sub	sp, #40	; 0x28
 8011fd8:	af02      	add	r7, sp, #8
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	603b      	str	r3, [r7, #0]
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fe8:	2b20      	cmp	r3, #32
 8011fea:	d171      	bne.n	80120d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d002      	beq.n	8011ff8 <HAL_UART_Transmit+0x24>
 8011ff2:	88fb      	ldrh	r3, [r7, #6]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e06a      	b.n	80120d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2221      	movs	r2, #33	; 0x21
 8012008:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801200a:	f7fe fb81 	bl	8010710 <HAL_GetTick>
 801200e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	88fa      	ldrh	r2, [r7, #6]
 8012014:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	88fa      	ldrh	r2, [r7, #6]
 801201c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012028:	d108      	bne.n	801203c <HAL_UART_Transmit+0x68>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	691b      	ldr	r3, [r3, #16]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d104      	bne.n	801203c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8012032:	2300      	movs	r3, #0
 8012034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	61bb      	str	r3, [r7, #24]
 801203a:	e003      	b.n	8012044 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012040:	2300      	movs	r3, #0
 8012042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012044:	e02c      	b.n	80120a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	2200      	movs	r2, #0
 801204e:	2180      	movs	r1, #128	; 0x80
 8012050:	68f8      	ldr	r0, [r7, #12]
 8012052:	f000 fe72 	bl	8012d3a <UART_WaitOnFlagUntilTimeout>
 8012056:	4603      	mov	r3, r0
 8012058:	2b00      	cmp	r3, #0
 801205a:	d001      	beq.n	8012060 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801205c:	2303      	movs	r3, #3
 801205e:	e038      	b.n	80120d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d10b      	bne.n	801207e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	461a      	mov	r2, r3
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	3302      	adds	r3, #2
 801207a:	61bb      	str	r3, [r7, #24]
 801207c:	e007      	b.n	801208e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	781a      	ldrb	r2, [r3, #0]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012088:	69fb      	ldr	r3, [r7, #28]
 801208a:	3301      	adds	r3, #1
 801208c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012094:	b29b      	uxth	r3, r3
 8012096:	3b01      	subs	r3, #1
 8012098:	b29a      	uxth	r2, r3
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d1cc      	bne.n	8012046 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	9300      	str	r3, [sp, #0]
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	2200      	movs	r2, #0
 80120b4:	2140      	movs	r1, #64	; 0x40
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f000 fe3f 	bl	8012d3a <UART_WaitOnFlagUntilTimeout>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d001      	beq.n	80120c6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80120c2:	2303      	movs	r3, #3
 80120c4:	e005      	b.n	80120d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2220      	movs	r2, #32
 80120ca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80120cc:	2300      	movs	r3, #0
 80120ce:	e000      	b.n	80120d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80120d0:	2302      	movs	r3, #2
  }
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3720      	adds	r7, #32
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
	...

080120dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b0ba      	sub	sp, #232	; 0xe8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	69db      	ldr	r3, [r3, #28]
 80120ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012106:	f640 030f 	movw	r3, #2063	; 0x80f
 801210a:	4013      	ands	r3, r2
 801210c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012114:	2b00      	cmp	r3, #0
 8012116:	d115      	bne.n	8012144 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801211c:	f003 0320 	and.w	r3, r3, #32
 8012120:	2b00      	cmp	r3, #0
 8012122:	d00f      	beq.n	8012144 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012128:	f003 0320 	and.w	r3, r3, #32
 801212c:	2b00      	cmp	r3, #0
 801212e:	d009      	beq.n	8012144 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 8297 	beq.w	8012668 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	4798      	blx	r3
      }
      return;
 8012142:	e291      	b.n	8012668 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012148:	2b00      	cmp	r3, #0
 801214a:	f000 8117 	beq.w	801237c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801214e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012152:	f003 0301 	and.w	r3, r3, #1
 8012156:	2b00      	cmp	r3, #0
 8012158:	d106      	bne.n	8012168 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801215a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801215e:	4b85      	ldr	r3, [pc, #532]	; (8012374 <HAL_UART_IRQHandler+0x298>)
 8012160:	4013      	ands	r3, r2
 8012162:	2b00      	cmp	r3, #0
 8012164:	f000 810a 	beq.w	801237c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801216c:	f003 0301 	and.w	r3, r3, #1
 8012170:	2b00      	cmp	r3, #0
 8012172:	d011      	beq.n	8012198 <HAL_UART_IRQHandler+0xbc>
 8012174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00b      	beq.n	8012198 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2201      	movs	r2, #1
 8012186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801218e:	f043 0201 	orr.w	r2, r3, #1
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801219c:	f003 0302 	and.w	r3, r3, #2
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d011      	beq.n	80121c8 <HAL_UART_IRQHandler+0xec>
 80121a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80121a8:	f003 0301 	and.w	r3, r3, #1
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00b      	beq.n	80121c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2202      	movs	r2, #2
 80121b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121be:	f043 0204 	orr.w	r2, r3, #4
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80121c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121cc:	f003 0304 	and.w	r3, r3, #4
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d011      	beq.n	80121f8 <HAL_UART_IRQHandler+0x11c>
 80121d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80121d8:	f003 0301 	and.w	r3, r3, #1
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00b      	beq.n	80121f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2204      	movs	r2, #4
 80121e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121ee:	f043 0202 	orr.w	r2, r3, #2
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80121f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121fc:	f003 0308 	and.w	r3, r3, #8
 8012200:	2b00      	cmp	r3, #0
 8012202:	d017      	beq.n	8012234 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012208:	f003 0320 	and.w	r3, r3, #32
 801220c:	2b00      	cmp	r3, #0
 801220e:	d105      	bne.n	801221c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012214:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00b      	beq.n	8012234 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2208      	movs	r2, #8
 8012222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801222a:	f043 0208 	orr.w	r2, r3, #8
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801223c:	2b00      	cmp	r3, #0
 801223e:	d012      	beq.n	8012266 <HAL_UART_IRQHandler+0x18a>
 8012240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012248:	2b00      	cmp	r3, #0
 801224a:	d00c      	beq.n	8012266 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801225c:	f043 0220 	orr.w	r2, r3, #32
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801226c:	2b00      	cmp	r3, #0
 801226e:	f000 81fd 	beq.w	801266c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012276:	f003 0320 	and.w	r3, r3, #32
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00d      	beq.n	801229a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801227e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012282:	f003 0320 	and.w	r3, r3, #32
 8012286:	2b00      	cmp	r3, #0
 8012288:	d007      	beq.n	801229a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801228e:	2b00      	cmp	r3, #0
 8012290:	d003      	beq.n	801229a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	689b      	ldr	r3, [r3, #8]
 80122aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ae:	2b40      	cmp	r3, #64	; 0x40
 80122b0:	d005      	beq.n	80122be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80122b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d04f      	beq.n	801235e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 fe01 	bl	8012ec6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ce:	2b40      	cmp	r3, #64	; 0x40
 80122d0:	d141      	bne.n	8012356 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	3308      	adds	r3, #8
 80122d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80122e0:	e853 3f00 	ldrex	r3, [r3]
 80122e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80122e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80122ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	3308      	adds	r3, #8
 80122fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80122fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012306:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801230a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801230e:	e841 2300 	strex	r3, r2, [r1]
 8012312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1d9      	bne.n	80122d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012322:	2b00      	cmp	r3, #0
 8012324:	d013      	beq.n	801234e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801232a:	4a13      	ldr	r2, [pc, #76]	; (8012378 <HAL_UART_IRQHandler+0x29c>)
 801232c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012332:	4618      	mov	r0, r3
 8012334:	f7fe fb9d 	bl	8010a72 <HAL_DMA_Abort_IT>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d017      	beq.n	801236e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8012348:	4610      	mov	r0, r2
 801234a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801234c:	e00f      	b.n	801236e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 f9a0 	bl	8012694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012354:	e00b      	b.n	801236e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 f99c 	bl	8012694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801235c:	e007      	b.n	801236e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f998 	bl	8012694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2200      	movs	r2, #0
 8012368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801236c:	e17e      	b.n	801266c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801236e:	bf00      	nop
    return;
 8012370:	e17c      	b.n	801266c <HAL_UART_IRQHandler+0x590>
 8012372:	bf00      	nop
 8012374:	04000120 	.word	0x04000120
 8012378:	08012f8f 	.word	0x08012f8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012380:	2b01      	cmp	r3, #1
 8012382:	f040 814c 	bne.w	801261e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801238a:	f003 0310 	and.w	r3, r3, #16
 801238e:	2b00      	cmp	r3, #0
 8012390:	f000 8145 	beq.w	801261e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012398:	f003 0310 	and.w	r3, r3, #16
 801239c:	2b00      	cmp	r3, #0
 801239e:	f000 813e 	beq.w	801261e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2210      	movs	r2, #16
 80123a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	689b      	ldr	r3, [r3, #8]
 80123b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123b4:	2b40      	cmp	r3, #64	; 0x40
 80123b6:	f040 80b6 	bne.w	8012526 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80123c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f000 8150 	beq.w	8012670 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80123d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80123da:	429a      	cmp	r2, r3
 80123dc:	f080 8148 	bcs.w	8012670 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80123e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ee:	69db      	ldr	r3, [r3, #28]
 80123f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123f4:	f000 8086 	beq.w	8012504 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012404:	e853 3f00 	ldrex	r3, [r3]
 8012408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801240c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	461a      	mov	r2, r3
 801241e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012426:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801242a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801242e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012432:	e841 2300 	strex	r3, r2, [r1]
 8012436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801243a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1da      	bne.n	80123f8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	3308      	adds	r3, #8
 8012448:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801244c:	e853 3f00 	ldrex	r3, [r3]
 8012450:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012454:	f023 0301 	bic.w	r3, r3, #1
 8012458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	3308      	adds	r3, #8
 8012462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012466:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801246a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801246e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012472:	e841 2300 	strex	r3, r2, [r1]
 8012476:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1e1      	bne.n	8012442 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3308      	adds	r3, #8
 8012484:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012488:	e853 3f00 	ldrex	r3, [r3]
 801248c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	3308      	adds	r3, #8
 801249e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80124a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80124a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80124a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80124aa:	e841 2300 	strex	r3, r2, [r1]
 80124ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80124b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d1e3      	bne.n	801247e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2220      	movs	r2, #32
 80124ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124cc:	e853 3f00 	ldrex	r3, [r3]
 80124d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80124d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124d4:	f023 0310 	bic.w	r3, r3, #16
 80124d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	461a      	mov	r2, r3
 80124e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80124e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80124e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80124ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124ee:	e841 2300 	strex	r3, r2, [r1]
 80124f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80124f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1e4      	bne.n	80124c4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124fe:	4618      	mov	r0, r3
 8012500:	f7fe fa47 	bl	8010992 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2202      	movs	r2, #2
 8012508:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012516:	b29b      	uxth	r3, r3
 8012518:	1ad3      	subs	r3, r2, r3
 801251a:	b29b      	uxth	r3, r3
 801251c:	4619      	mov	r1, r3
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f8c2 	bl	80126a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012524:	e0a4      	b.n	8012670 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012532:	b29b      	uxth	r3, r3
 8012534:	1ad3      	subs	r3, r2, r3
 8012536:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012540:	b29b      	uxth	r3, r3
 8012542:	2b00      	cmp	r3, #0
 8012544:	f000 8096 	beq.w	8012674 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8012548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 8091 	beq.w	8012674 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255a:	e853 3f00 	ldrex	r3, [r3]
 801255e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	461a      	mov	r2, r3
 8012570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012574:	647b      	str	r3, [r7, #68]	; 0x44
 8012576:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801257a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801257c:	e841 2300 	strex	r3, r2, [r1]
 8012580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1e4      	bne.n	8012552 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3308      	adds	r3, #8
 801258e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	e853 3f00 	ldrex	r3, [r3]
 8012596:	623b      	str	r3, [r7, #32]
   return(result);
 8012598:	6a3b      	ldr	r3, [r7, #32]
 801259a:	f023 0301 	bic.w	r3, r3, #1
 801259e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	3308      	adds	r3, #8
 80125a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80125ac:	633a      	str	r2, [r7, #48]	; 0x30
 80125ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125b4:	e841 2300 	strex	r3, r2, [r1]
 80125b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d1e3      	bne.n	8012588 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2220      	movs	r2, #32
 80125c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2200      	movs	r2, #0
 80125d2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	e853 3f00 	ldrex	r3, [r3]
 80125e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	f023 0310 	bic.w	r3, r3, #16
 80125e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	461a      	mov	r2, r3
 80125f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80125f6:	61fb      	str	r3, [r7, #28]
 80125f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fa:	69b9      	ldr	r1, [r7, #24]
 80125fc:	69fa      	ldr	r2, [r7, #28]
 80125fe:	e841 2300 	strex	r3, r2, [r1]
 8012602:	617b      	str	r3, [r7, #20]
   return(result);
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1e4      	bne.n	80125d4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2202      	movs	r2, #2
 801260e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012614:	4619      	mov	r1, r3
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f846 	bl	80126a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801261c:	e02a      	b.n	8012674 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801261e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00e      	beq.n	8012648 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801262a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012632:	2b00      	cmp	r3, #0
 8012634:	d008      	beq.n	8012648 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801263a:	2b00      	cmp	r3, #0
 801263c:	d01c      	beq.n	8012678 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	4798      	blx	r3
    }
    return;
 8012646:	e017      	b.n	8012678 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012650:	2b00      	cmp	r3, #0
 8012652:	d012      	beq.n	801267a <HAL_UART_IRQHandler+0x59e>
 8012654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00c      	beq.n	801267a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fcaa 	bl	8012fba <UART_EndTransmit_IT>
    return;
 8012666:	e008      	b.n	801267a <HAL_UART_IRQHandler+0x59e>
      return;
 8012668:	bf00      	nop
 801266a:	e006      	b.n	801267a <HAL_UART_IRQHandler+0x59e>
    return;
 801266c:	bf00      	nop
 801266e:	e004      	b.n	801267a <HAL_UART_IRQHandler+0x59e>
      return;
 8012670:	bf00      	nop
 8012672:	e002      	b.n	801267a <HAL_UART_IRQHandler+0x59e>
      return;
 8012674:	bf00      	nop
 8012676:	e000      	b.n	801267a <HAL_UART_IRQHandler+0x59e>
    return;
 8012678:	bf00      	nop
  }

}
 801267a:	37e8      	adds	r7, #232	; 0xe8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	460b      	mov	r3, r1
 80126b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80126b4:	bf00      	nop
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b088      	sub	sp, #32
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80126c8:	2300      	movs	r3, #0
 80126ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	689a      	ldr	r2, [r3, #8]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	431a      	orrs	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	695b      	ldr	r3, [r3, #20]
 80126da:	431a      	orrs	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	69db      	ldr	r3, [r3, #28]
 80126e0:	4313      	orrs	r3, r2
 80126e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	4ba6      	ldr	r3, [pc, #664]	; (8012984 <UART_SetConfig+0x2c4>)
 80126ec:	4013      	ands	r3, r2
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	6812      	ldr	r2, [r2, #0]
 80126f2:	6979      	ldr	r1, [r7, #20]
 80126f4:	430b      	orrs	r3, r1
 80126f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	430a      	orrs	r2, r1
 801270c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	699b      	ldr	r3, [r3, #24]
 8012712:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a1b      	ldr	r3, [r3, #32]
 8012718:	697a      	ldr	r2, [r7, #20]
 801271a:	4313      	orrs	r3, r2
 801271c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	689b      	ldr	r3, [r3, #8]
 8012724:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	697a      	ldr	r2, [r7, #20]
 801272e:	430a      	orrs	r2, r1
 8012730:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a94      	ldr	r2, [pc, #592]	; (8012988 <UART_SetConfig+0x2c8>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d120      	bne.n	801277e <UART_SetConfig+0xbe>
 801273c:	4b93      	ldr	r3, [pc, #588]	; (801298c <UART_SetConfig+0x2cc>)
 801273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012742:	f003 0303 	and.w	r3, r3, #3
 8012746:	2b03      	cmp	r3, #3
 8012748:	d816      	bhi.n	8012778 <UART_SetConfig+0xb8>
 801274a:	a201      	add	r2, pc, #4	; (adr r2, 8012750 <UART_SetConfig+0x90>)
 801274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012750:	08012761 	.word	0x08012761
 8012754:	0801276d 	.word	0x0801276d
 8012758:	08012767 	.word	0x08012767
 801275c:	08012773 	.word	0x08012773
 8012760:	2301      	movs	r3, #1
 8012762:	77fb      	strb	r3, [r7, #31]
 8012764:	e150      	b.n	8012a08 <UART_SetConfig+0x348>
 8012766:	2302      	movs	r3, #2
 8012768:	77fb      	strb	r3, [r7, #31]
 801276a:	e14d      	b.n	8012a08 <UART_SetConfig+0x348>
 801276c:	2304      	movs	r3, #4
 801276e:	77fb      	strb	r3, [r7, #31]
 8012770:	e14a      	b.n	8012a08 <UART_SetConfig+0x348>
 8012772:	2308      	movs	r3, #8
 8012774:	77fb      	strb	r3, [r7, #31]
 8012776:	e147      	b.n	8012a08 <UART_SetConfig+0x348>
 8012778:	2310      	movs	r3, #16
 801277a:	77fb      	strb	r3, [r7, #31]
 801277c:	e144      	b.n	8012a08 <UART_SetConfig+0x348>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4a83      	ldr	r2, [pc, #524]	; (8012990 <UART_SetConfig+0x2d0>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d132      	bne.n	80127ee <UART_SetConfig+0x12e>
 8012788:	4b80      	ldr	r3, [pc, #512]	; (801298c <UART_SetConfig+0x2cc>)
 801278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801278e:	f003 030c 	and.w	r3, r3, #12
 8012792:	2b0c      	cmp	r3, #12
 8012794:	d828      	bhi.n	80127e8 <UART_SetConfig+0x128>
 8012796:	a201      	add	r2, pc, #4	; (adr r2, 801279c <UART_SetConfig+0xdc>)
 8012798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801279c:	080127d1 	.word	0x080127d1
 80127a0:	080127e9 	.word	0x080127e9
 80127a4:	080127e9 	.word	0x080127e9
 80127a8:	080127e9 	.word	0x080127e9
 80127ac:	080127dd 	.word	0x080127dd
 80127b0:	080127e9 	.word	0x080127e9
 80127b4:	080127e9 	.word	0x080127e9
 80127b8:	080127e9 	.word	0x080127e9
 80127bc:	080127d7 	.word	0x080127d7
 80127c0:	080127e9 	.word	0x080127e9
 80127c4:	080127e9 	.word	0x080127e9
 80127c8:	080127e9 	.word	0x080127e9
 80127cc:	080127e3 	.word	0x080127e3
 80127d0:	2300      	movs	r3, #0
 80127d2:	77fb      	strb	r3, [r7, #31]
 80127d4:	e118      	b.n	8012a08 <UART_SetConfig+0x348>
 80127d6:	2302      	movs	r3, #2
 80127d8:	77fb      	strb	r3, [r7, #31]
 80127da:	e115      	b.n	8012a08 <UART_SetConfig+0x348>
 80127dc:	2304      	movs	r3, #4
 80127de:	77fb      	strb	r3, [r7, #31]
 80127e0:	e112      	b.n	8012a08 <UART_SetConfig+0x348>
 80127e2:	2308      	movs	r3, #8
 80127e4:	77fb      	strb	r3, [r7, #31]
 80127e6:	e10f      	b.n	8012a08 <UART_SetConfig+0x348>
 80127e8:	2310      	movs	r3, #16
 80127ea:	77fb      	strb	r3, [r7, #31]
 80127ec:	e10c      	b.n	8012a08 <UART_SetConfig+0x348>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a68      	ldr	r2, [pc, #416]	; (8012994 <UART_SetConfig+0x2d4>)
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d120      	bne.n	801283a <UART_SetConfig+0x17a>
 80127f8:	4b64      	ldr	r3, [pc, #400]	; (801298c <UART_SetConfig+0x2cc>)
 80127fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012802:	2b30      	cmp	r3, #48	; 0x30
 8012804:	d013      	beq.n	801282e <UART_SetConfig+0x16e>
 8012806:	2b30      	cmp	r3, #48	; 0x30
 8012808:	d814      	bhi.n	8012834 <UART_SetConfig+0x174>
 801280a:	2b20      	cmp	r3, #32
 801280c:	d009      	beq.n	8012822 <UART_SetConfig+0x162>
 801280e:	2b20      	cmp	r3, #32
 8012810:	d810      	bhi.n	8012834 <UART_SetConfig+0x174>
 8012812:	2b00      	cmp	r3, #0
 8012814:	d002      	beq.n	801281c <UART_SetConfig+0x15c>
 8012816:	2b10      	cmp	r3, #16
 8012818:	d006      	beq.n	8012828 <UART_SetConfig+0x168>
 801281a:	e00b      	b.n	8012834 <UART_SetConfig+0x174>
 801281c:	2300      	movs	r3, #0
 801281e:	77fb      	strb	r3, [r7, #31]
 8012820:	e0f2      	b.n	8012a08 <UART_SetConfig+0x348>
 8012822:	2302      	movs	r3, #2
 8012824:	77fb      	strb	r3, [r7, #31]
 8012826:	e0ef      	b.n	8012a08 <UART_SetConfig+0x348>
 8012828:	2304      	movs	r3, #4
 801282a:	77fb      	strb	r3, [r7, #31]
 801282c:	e0ec      	b.n	8012a08 <UART_SetConfig+0x348>
 801282e:	2308      	movs	r3, #8
 8012830:	77fb      	strb	r3, [r7, #31]
 8012832:	e0e9      	b.n	8012a08 <UART_SetConfig+0x348>
 8012834:	2310      	movs	r3, #16
 8012836:	77fb      	strb	r3, [r7, #31]
 8012838:	e0e6      	b.n	8012a08 <UART_SetConfig+0x348>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a56      	ldr	r2, [pc, #344]	; (8012998 <UART_SetConfig+0x2d8>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d120      	bne.n	8012886 <UART_SetConfig+0x1c6>
 8012844:	4b51      	ldr	r3, [pc, #324]	; (801298c <UART_SetConfig+0x2cc>)
 8012846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801284a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801284e:	2bc0      	cmp	r3, #192	; 0xc0
 8012850:	d013      	beq.n	801287a <UART_SetConfig+0x1ba>
 8012852:	2bc0      	cmp	r3, #192	; 0xc0
 8012854:	d814      	bhi.n	8012880 <UART_SetConfig+0x1c0>
 8012856:	2b80      	cmp	r3, #128	; 0x80
 8012858:	d009      	beq.n	801286e <UART_SetConfig+0x1ae>
 801285a:	2b80      	cmp	r3, #128	; 0x80
 801285c:	d810      	bhi.n	8012880 <UART_SetConfig+0x1c0>
 801285e:	2b00      	cmp	r3, #0
 8012860:	d002      	beq.n	8012868 <UART_SetConfig+0x1a8>
 8012862:	2b40      	cmp	r3, #64	; 0x40
 8012864:	d006      	beq.n	8012874 <UART_SetConfig+0x1b4>
 8012866:	e00b      	b.n	8012880 <UART_SetConfig+0x1c0>
 8012868:	2300      	movs	r3, #0
 801286a:	77fb      	strb	r3, [r7, #31]
 801286c:	e0cc      	b.n	8012a08 <UART_SetConfig+0x348>
 801286e:	2302      	movs	r3, #2
 8012870:	77fb      	strb	r3, [r7, #31]
 8012872:	e0c9      	b.n	8012a08 <UART_SetConfig+0x348>
 8012874:	2304      	movs	r3, #4
 8012876:	77fb      	strb	r3, [r7, #31]
 8012878:	e0c6      	b.n	8012a08 <UART_SetConfig+0x348>
 801287a:	2308      	movs	r3, #8
 801287c:	77fb      	strb	r3, [r7, #31]
 801287e:	e0c3      	b.n	8012a08 <UART_SetConfig+0x348>
 8012880:	2310      	movs	r3, #16
 8012882:	77fb      	strb	r3, [r7, #31]
 8012884:	e0c0      	b.n	8012a08 <UART_SetConfig+0x348>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a44      	ldr	r2, [pc, #272]	; (801299c <UART_SetConfig+0x2dc>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d125      	bne.n	80128dc <UART_SetConfig+0x21c>
 8012890:	4b3e      	ldr	r3, [pc, #248]	; (801298c <UART_SetConfig+0x2cc>)
 8012892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801289a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801289e:	d017      	beq.n	80128d0 <UART_SetConfig+0x210>
 80128a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128a4:	d817      	bhi.n	80128d6 <UART_SetConfig+0x216>
 80128a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128aa:	d00b      	beq.n	80128c4 <UART_SetConfig+0x204>
 80128ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128b0:	d811      	bhi.n	80128d6 <UART_SetConfig+0x216>
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d003      	beq.n	80128be <UART_SetConfig+0x1fe>
 80128b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128ba:	d006      	beq.n	80128ca <UART_SetConfig+0x20a>
 80128bc:	e00b      	b.n	80128d6 <UART_SetConfig+0x216>
 80128be:	2300      	movs	r3, #0
 80128c0:	77fb      	strb	r3, [r7, #31]
 80128c2:	e0a1      	b.n	8012a08 <UART_SetConfig+0x348>
 80128c4:	2302      	movs	r3, #2
 80128c6:	77fb      	strb	r3, [r7, #31]
 80128c8:	e09e      	b.n	8012a08 <UART_SetConfig+0x348>
 80128ca:	2304      	movs	r3, #4
 80128cc:	77fb      	strb	r3, [r7, #31]
 80128ce:	e09b      	b.n	8012a08 <UART_SetConfig+0x348>
 80128d0:	2308      	movs	r3, #8
 80128d2:	77fb      	strb	r3, [r7, #31]
 80128d4:	e098      	b.n	8012a08 <UART_SetConfig+0x348>
 80128d6:	2310      	movs	r3, #16
 80128d8:	77fb      	strb	r3, [r7, #31]
 80128da:	e095      	b.n	8012a08 <UART_SetConfig+0x348>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	4a2f      	ldr	r2, [pc, #188]	; (80129a0 <UART_SetConfig+0x2e0>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d125      	bne.n	8012932 <UART_SetConfig+0x272>
 80128e6:	4b29      	ldr	r3, [pc, #164]	; (801298c <UART_SetConfig+0x2cc>)
 80128e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80128f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80128f4:	d017      	beq.n	8012926 <UART_SetConfig+0x266>
 80128f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80128fa:	d817      	bhi.n	801292c <UART_SetConfig+0x26c>
 80128fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012900:	d00b      	beq.n	801291a <UART_SetConfig+0x25a>
 8012902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012906:	d811      	bhi.n	801292c <UART_SetConfig+0x26c>
 8012908:	2b00      	cmp	r3, #0
 801290a:	d003      	beq.n	8012914 <UART_SetConfig+0x254>
 801290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012910:	d006      	beq.n	8012920 <UART_SetConfig+0x260>
 8012912:	e00b      	b.n	801292c <UART_SetConfig+0x26c>
 8012914:	2301      	movs	r3, #1
 8012916:	77fb      	strb	r3, [r7, #31]
 8012918:	e076      	b.n	8012a08 <UART_SetConfig+0x348>
 801291a:	2302      	movs	r3, #2
 801291c:	77fb      	strb	r3, [r7, #31]
 801291e:	e073      	b.n	8012a08 <UART_SetConfig+0x348>
 8012920:	2304      	movs	r3, #4
 8012922:	77fb      	strb	r3, [r7, #31]
 8012924:	e070      	b.n	8012a08 <UART_SetConfig+0x348>
 8012926:	2308      	movs	r3, #8
 8012928:	77fb      	strb	r3, [r7, #31]
 801292a:	e06d      	b.n	8012a08 <UART_SetConfig+0x348>
 801292c:	2310      	movs	r3, #16
 801292e:	77fb      	strb	r3, [r7, #31]
 8012930:	e06a      	b.n	8012a08 <UART_SetConfig+0x348>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	4a1b      	ldr	r2, [pc, #108]	; (80129a4 <UART_SetConfig+0x2e4>)
 8012938:	4293      	cmp	r3, r2
 801293a:	d138      	bne.n	80129ae <UART_SetConfig+0x2ee>
 801293c:	4b13      	ldr	r3, [pc, #76]	; (801298c <UART_SetConfig+0x2cc>)
 801293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012942:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012946:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801294a:	d017      	beq.n	801297c <UART_SetConfig+0x2bc>
 801294c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012950:	d82a      	bhi.n	80129a8 <UART_SetConfig+0x2e8>
 8012952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012956:	d00b      	beq.n	8012970 <UART_SetConfig+0x2b0>
 8012958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801295c:	d824      	bhi.n	80129a8 <UART_SetConfig+0x2e8>
 801295e:	2b00      	cmp	r3, #0
 8012960:	d003      	beq.n	801296a <UART_SetConfig+0x2aa>
 8012962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012966:	d006      	beq.n	8012976 <UART_SetConfig+0x2b6>
 8012968:	e01e      	b.n	80129a8 <UART_SetConfig+0x2e8>
 801296a:	2300      	movs	r3, #0
 801296c:	77fb      	strb	r3, [r7, #31]
 801296e:	e04b      	b.n	8012a08 <UART_SetConfig+0x348>
 8012970:	2302      	movs	r3, #2
 8012972:	77fb      	strb	r3, [r7, #31]
 8012974:	e048      	b.n	8012a08 <UART_SetConfig+0x348>
 8012976:	2304      	movs	r3, #4
 8012978:	77fb      	strb	r3, [r7, #31]
 801297a:	e045      	b.n	8012a08 <UART_SetConfig+0x348>
 801297c:	2308      	movs	r3, #8
 801297e:	77fb      	strb	r3, [r7, #31]
 8012980:	e042      	b.n	8012a08 <UART_SetConfig+0x348>
 8012982:	bf00      	nop
 8012984:	efff69f3 	.word	0xefff69f3
 8012988:	40011000 	.word	0x40011000
 801298c:	40023800 	.word	0x40023800
 8012990:	40004400 	.word	0x40004400
 8012994:	40004800 	.word	0x40004800
 8012998:	40004c00 	.word	0x40004c00
 801299c:	40005000 	.word	0x40005000
 80129a0:	40011400 	.word	0x40011400
 80129a4:	40007800 	.word	0x40007800
 80129a8:	2310      	movs	r3, #16
 80129aa:	77fb      	strb	r3, [r7, #31]
 80129ac:	e02c      	b.n	8012a08 <UART_SetConfig+0x348>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a72      	ldr	r2, [pc, #456]	; (8012b7c <UART_SetConfig+0x4bc>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d125      	bne.n	8012a04 <UART_SetConfig+0x344>
 80129b8:	4b71      	ldr	r3, [pc, #452]	; (8012b80 <UART_SetConfig+0x4c0>)
 80129ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80129c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80129c6:	d017      	beq.n	80129f8 <UART_SetConfig+0x338>
 80129c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80129cc:	d817      	bhi.n	80129fe <UART_SetConfig+0x33e>
 80129ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129d2:	d00b      	beq.n	80129ec <UART_SetConfig+0x32c>
 80129d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129d8:	d811      	bhi.n	80129fe <UART_SetConfig+0x33e>
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d003      	beq.n	80129e6 <UART_SetConfig+0x326>
 80129de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80129e2:	d006      	beq.n	80129f2 <UART_SetConfig+0x332>
 80129e4:	e00b      	b.n	80129fe <UART_SetConfig+0x33e>
 80129e6:	2300      	movs	r3, #0
 80129e8:	77fb      	strb	r3, [r7, #31]
 80129ea:	e00d      	b.n	8012a08 <UART_SetConfig+0x348>
 80129ec:	2302      	movs	r3, #2
 80129ee:	77fb      	strb	r3, [r7, #31]
 80129f0:	e00a      	b.n	8012a08 <UART_SetConfig+0x348>
 80129f2:	2304      	movs	r3, #4
 80129f4:	77fb      	strb	r3, [r7, #31]
 80129f6:	e007      	b.n	8012a08 <UART_SetConfig+0x348>
 80129f8:	2308      	movs	r3, #8
 80129fa:	77fb      	strb	r3, [r7, #31]
 80129fc:	e004      	b.n	8012a08 <UART_SetConfig+0x348>
 80129fe:	2310      	movs	r3, #16
 8012a00:	77fb      	strb	r3, [r7, #31]
 8012a02:	e001      	b.n	8012a08 <UART_SetConfig+0x348>
 8012a04:	2310      	movs	r3, #16
 8012a06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	69db      	ldr	r3, [r3, #28]
 8012a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a10:	d15b      	bne.n	8012aca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8012a12:	7ffb      	ldrb	r3, [r7, #31]
 8012a14:	2b08      	cmp	r3, #8
 8012a16:	d828      	bhi.n	8012a6a <UART_SetConfig+0x3aa>
 8012a18:	a201      	add	r2, pc, #4	; (adr r2, 8012a20 <UART_SetConfig+0x360>)
 8012a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a1e:	bf00      	nop
 8012a20:	08012a45 	.word	0x08012a45
 8012a24:	08012a4d 	.word	0x08012a4d
 8012a28:	08012a55 	.word	0x08012a55
 8012a2c:	08012a6b 	.word	0x08012a6b
 8012a30:	08012a5b 	.word	0x08012a5b
 8012a34:	08012a6b 	.word	0x08012a6b
 8012a38:	08012a6b 	.word	0x08012a6b
 8012a3c:	08012a6b 	.word	0x08012a6b
 8012a40:	08012a63 	.word	0x08012a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012a44:	f7fe fe60 	bl	8011708 <HAL_RCC_GetPCLK1Freq>
 8012a48:	61b8      	str	r0, [r7, #24]
        break;
 8012a4a:	e013      	b.n	8012a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a4c:	f7fe fe70 	bl	8011730 <HAL_RCC_GetPCLK2Freq>
 8012a50:	61b8      	str	r0, [r7, #24]
        break;
 8012a52:	e00f      	b.n	8012a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012a54:	4b4b      	ldr	r3, [pc, #300]	; (8012b84 <UART_SetConfig+0x4c4>)
 8012a56:	61bb      	str	r3, [r7, #24]
        break;
 8012a58:	e00c      	b.n	8012a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012a5a:	f7fe fd83 	bl	8011564 <HAL_RCC_GetSysClockFreq>
 8012a5e:	61b8      	str	r0, [r7, #24]
        break;
 8012a60:	e008      	b.n	8012a74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a66:	61bb      	str	r3, [r7, #24]
        break;
 8012a68:	e004      	b.n	8012a74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	77bb      	strb	r3, [r7, #30]
        break;
 8012a72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d074      	beq.n	8012b64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	005a      	lsls	r2, r3, #1
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	085b      	lsrs	r3, r3, #1
 8012a84:	441a      	add	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	2b0f      	cmp	r3, #15
 8012a94:	d916      	bls.n	8012ac4 <UART_SetConfig+0x404>
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a9c:	d212      	bcs.n	8012ac4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	f023 030f 	bic.w	r3, r3, #15
 8012aa6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	085b      	lsrs	r3, r3, #1
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	f003 0307 	and.w	r3, r3, #7
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	89fb      	ldrh	r3, [r7, #14]
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	89fa      	ldrh	r2, [r7, #14]
 8012ac0:	60da      	str	r2, [r3, #12]
 8012ac2:	e04f      	b.n	8012b64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	77bb      	strb	r3, [r7, #30]
 8012ac8:	e04c      	b.n	8012b64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012aca:	7ffb      	ldrb	r3, [r7, #31]
 8012acc:	2b08      	cmp	r3, #8
 8012ace:	d828      	bhi.n	8012b22 <UART_SetConfig+0x462>
 8012ad0:	a201      	add	r2, pc, #4	; (adr r2, 8012ad8 <UART_SetConfig+0x418>)
 8012ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad6:	bf00      	nop
 8012ad8:	08012afd 	.word	0x08012afd
 8012adc:	08012b05 	.word	0x08012b05
 8012ae0:	08012b0d 	.word	0x08012b0d
 8012ae4:	08012b23 	.word	0x08012b23
 8012ae8:	08012b13 	.word	0x08012b13
 8012aec:	08012b23 	.word	0x08012b23
 8012af0:	08012b23 	.word	0x08012b23
 8012af4:	08012b23 	.word	0x08012b23
 8012af8:	08012b1b 	.word	0x08012b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012afc:	f7fe fe04 	bl	8011708 <HAL_RCC_GetPCLK1Freq>
 8012b00:	61b8      	str	r0, [r7, #24]
        break;
 8012b02:	e013      	b.n	8012b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b04:	f7fe fe14 	bl	8011730 <HAL_RCC_GetPCLK2Freq>
 8012b08:	61b8      	str	r0, [r7, #24]
        break;
 8012b0a:	e00f      	b.n	8012b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012b0c:	4b1d      	ldr	r3, [pc, #116]	; (8012b84 <UART_SetConfig+0x4c4>)
 8012b0e:	61bb      	str	r3, [r7, #24]
        break;
 8012b10:	e00c      	b.n	8012b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012b12:	f7fe fd27 	bl	8011564 <HAL_RCC_GetSysClockFreq>
 8012b16:	61b8      	str	r0, [r7, #24]
        break;
 8012b18:	e008      	b.n	8012b2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b1e:	61bb      	str	r3, [r7, #24]
        break;
 8012b20:	e004      	b.n	8012b2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8012b22:	2300      	movs	r3, #0
 8012b24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012b26:	2301      	movs	r3, #1
 8012b28:	77bb      	strb	r3, [r7, #30]
        break;
 8012b2a:	bf00      	nop
    }

    if (pclk != 0U)
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d018      	beq.n	8012b64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	085a      	lsrs	r2, r3, #1
 8012b38:	69bb      	ldr	r3, [r7, #24]
 8012b3a:	441a      	add	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	2b0f      	cmp	r3, #15
 8012b4a:	d909      	bls.n	8012b60 <UART_SetConfig+0x4a0>
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b52:	d205      	bcs.n	8012b60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	b29a      	uxth	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	60da      	str	r2, [r3, #12]
 8012b5e:	e001      	b.n	8012b64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8012b60:	2301      	movs	r3, #1
 8012b62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8012b70:	7fbb      	ldrb	r3, [r7, #30]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3720      	adds	r7, #32
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	40007c00 	.word	0x40007c00
 8012b80:	40023800 	.word	0x40023800
 8012b84:	00f42400 	.word	0x00f42400

08012b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b94:	f003 0301 	and.w	r3, r3, #1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00a      	beq.n	8012bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	430a      	orrs	r2, r1
 8012bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d00a      	beq.n	8012bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	430a      	orrs	r2, r1
 8012bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd8:	f003 0304 	and.w	r3, r3, #4
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00a      	beq.n	8012bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	430a      	orrs	r2, r1
 8012bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bfa:	f003 0308 	and.w	r3, r3, #8
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d00a      	beq.n	8012c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	430a      	orrs	r2, r1
 8012c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c1c:	f003 0310 	and.w	r3, r3, #16
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00a      	beq.n	8012c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	689b      	ldr	r3, [r3, #8]
 8012c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	430a      	orrs	r2, r1
 8012c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3e:	f003 0320 	and.w	r3, r3, #32
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00a      	beq.n	8012c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	689b      	ldr	r3, [r3, #8]
 8012c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	430a      	orrs	r2, r1
 8012c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d01a      	beq.n	8012c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	430a      	orrs	r2, r1
 8012c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012c86:	d10a      	bne.n	8012c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	430a      	orrs	r2, r1
 8012c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00a      	beq.n	8012cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	430a      	orrs	r2, r1
 8012cbe:	605a      	str	r2, [r3, #4]
  }
}
 8012cc0:	bf00      	nop
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af02      	add	r7, sp, #8
 8012cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012cdc:	f7fd fd18 	bl	8010710 <HAL_GetTick>
 8012ce0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f003 0308 	and.w	r3, r3, #8
 8012cec:	2b08      	cmp	r3, #8
 8012cee:	d10e      	bne.n	8012d0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f81b 	bl	8012d3a <UART_WaitOnFlagUntilTimeout>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d001      	beq.n	8012d0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	e011      	b.n	8012d32 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2220      	movs	r2, #32
 8012d12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2220      	movs	r2, #32
 8012d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8012d30:	2300      	movs	r3, #0
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b09c      	sub	sp, #112	; 0x70
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	60f8      	str	r0, [r7, #12]
 8012d42:	60b9      	str	r1, [r7, #8]
 8012d44:	603b      	str	r3, [r7, #0]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012d4a:	e0a7      	b.n	8012e9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d52:	f000 80a3 	beq.w	8012e9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012d56:	f7fd fcdb 	bl	8010710 <HAL_GetTick>
 8012d5a:	4602      	mov	r2, r0
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d302      	bcc.n	8012d6c <UART_WaitOnFlagUntilTimeout+0x32>
 8012d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d13f      	bne.n	8012dec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d74:	e853 3f00 	ldrex	r3, [r3]
 8012d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012d80:	667b      	str	r3, [r7, #100]	; 0x64
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	461a      	mov	r2, r3
 8012d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012d8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012d92:	e841 2300 	strex	r3, r2, [r1]
 8012d96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d1e6      	bne.n	8012d6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	3308      	adds	r3, #8
 8012da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012da8:	e853 3f00 	ldrex	r3, [r3]
 8012dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	f023 0301 	bic.w	r3, r3, #1
 8012db4:	663b      	str	r3, [r7, #96]	; 0x60
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	3308      	adds	r3, #8
 8012dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012dbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8012dc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012dc6:	e841 2300 	strex	r3, r2, [r1]
 8012dca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d1e5      	bne.n	8012d9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2220      	movs	r2, #32
 8012dd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2220      	movs	r2, #32
 8012ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2200      	movs	r2, #0
 8012de4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8012de8:	2303      	movs	r3, #3
 8012dea:	e068      	b.n	8012ebe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	f003 0304 	and.w	r3, r3, #4
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d050      	beq.n	8012e9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	69db      	ldr	r3, [r3, #28]
 8012e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e08:	d148      	bne.n	8012e9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012e12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	e853 3f00 	ldrex	r3, [r3]
 8012e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	461a      	mov	r2, r3
 8012e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e32:	637b      	str	r3, [r7, #52]	; 0x34
 8012e34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e3a:	e841 2300 	strex	r3, r2, [r1]
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1e6      	bne.n	8012e14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	3308      	adds	r3, #8
 8012e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	e853 3f00 	ldrex	r3, [r3]
 8012e54:	613b      	str	r3, [r7, #16]
   return(result);
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	f023 0301 	bic.w	r3, r3, #1
 8012e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	3308      	adds	r3, #8
 8012e64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e66:	623a      	str	r2, [r7, #32]
 8012e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e6a:	69f9      	ldr	r1, [r7, #28]
 8012e6c:	6a3a      	ldr	r2, [r7, #32]
 8012e6e:	e841 2300 	strex	r3, r2, [r1]
 8012e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1e5      	bne.n	8012e46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2220      	movs	r2, #32
 8012e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2220      	movs	r2, #32
 8012e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2220      	movs	r2, #32
 8012e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2200      	movs	r2, #0
 8012e94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8012e98:	2303      	movs	r3, #3
 8012e9a:	e010      	b.n	8012ebe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	69da      	ldr	r2, [r3, #28]
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	4013      	ands	r3, r2
 8012ea6:	68ba      	ldr	r2, [r7, #8]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	bf0c      	ite	eq
 8012eac:	2301      	moveq	r3, #1
 8012eae:	2300      	movne	r3, #0
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	79fb      	ldrb	r3, [r7, #7]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	f43f af48 	beq.w	8012d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3770      	adds	r7, #112	; 0x70
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012ec6:	b480      	push	{r7}
 8012ec8:	b095      	sub	sp, #84	; 0x54
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ed6:	e853 3f00 	ldrex	r3, [r3]
 8012eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	461a      	mov	r2, r3
 8012eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eec:	643b      	str	r3, [r7, #64]	; 0x40
 8012eee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ef4:	e841 2300 	strex	r3, r2, [r1]
 8012ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d1e6      	bne.n	8012ece <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3308      	adds	r3, #8
 8012f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	e853 3f00 	ldrex	r3, [r3]
 8012f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	f023 0301 	bic.w	r3, r3, #1
 8012f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	3308      	adds	r3, #8
 8012f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f28:	e841 2300 	strex	r3, r2, [r1]
 8012f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d1e5      	bne.n	8012f00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d118      	bne.n	8012f6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	e853 3f00 	ldrex	r3, [r3]
 8012f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	f023 0310 	bic.w	r3, r3, #16
 8012f50:	647b      	str	r3, [r7, #68]	; 0x44
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f5a:	61bb      	str	r3, [r7, #24]
 8012f5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5e:	6979      	ldr	r1, [r7, #20]
 8012f60:	69ba      	ldr	r2, [r7, #24]
 8012f62:	e841 2300 	strex	r3, r2, [r1]
 8012f66:	613b      	str	r3, [r7, #16]
   return(result);
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d1e6      	bne.n	8012f3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2220      	movs	r2, #32
 8012f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8012f82:	bf00      	nop
 8012f84:	3754      	adds	r7, #84	; 0x54
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012f8e:	b580      	push	{r7, lr}
 8012f90:	b084      	sub	sp, #16
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f7ff fb71 	bl	8012694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012fb2:	bf00      	nop
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b088      	sub	sp, #32
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	e853 3f00 	ldrex	r3, [r3]
 8012fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012fd6:	61fb      	str	r3, [r7, #28]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	461a      	mov	r2, r3
 8012fde:	69fb      	ldr	r3, [r7, #28]
 8012fe0:	61bb      	str	r3, [r7, #24]
 8012fe2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fe4:	6979      	ldr	r1, [r7, #20]
 8012fe6:	69ba      	ldr	r2, [r7, #24]
 8012fe8:	e841 2300 	strex	r3, r2, [r1]
 8012fec:	613b      	str	r3, [r7, #16]
   return(result);
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1e6      	bne.n	8012fc2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2220      	movs	r2, #32
 8012ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff fb3d 	bl	8012680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013006:	bf00      	nop
 8013008:	3720      	adds	r7, #32
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801300e:	b480      	push	{r7}
 8013010:	b08b      	sub	sp, #44	; 0x2c
 8013012:	af00      	add	r7, sp, #0
 8013014:	60f8      	str	r0, [r7, #12]
 8013016:	ed87 0a02 	vstr	s0, [r7, #8]
 801301a:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	881b      	ldrh	r3, [r3, #0]
 801302c:	461a      	mov	r2, r3
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	885b      	ldrh	r3, [r3, #2]
 8013032:	fb02 f303 	mul.w	r3, r2, r3
 8013036:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801303c:	e010      	b.n	8013060 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 801303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013040:	1d1a      	adds	r2, r3, #4
 8013042:	627a      	str	r2, [r7, #36]	; 0x24
 8013044:	ed93 7a00 	vldr	s14, [r3]
 8013048:	6a3b      	ldr	r3, [r7, #32]
 801304a:	1d1a      	adds	r2, r3, #4
 801304c:	623a      	str	r2, [r7, #32]
 801304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8013052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013056:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	3b01      	subs	r3, #1
 801305e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1eb      	bne.n	801303e <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8013066:	2300      	movs	r3, #0
 8013068:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 801306a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801306e:	4618      	mov	r0, r3
 8013070:	372c      	adds	r7, #44	; 0x2c
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr

0801307a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801307a:	b480      	push	{r7}
 801307c:	b08b      	sub	sp, #44	; 0x2c
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
 8013082:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	885b      	ldrh	r3, [r3, #2]
 801309a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 801309c:	89fb      	ldrh	r3, [r7, #14]
 801309e:	61bb      	str	r3, [r7, #24]
 80130a0:	2300      	movs	r3, #0
 80130a2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	693a      	ldr	r2, [r7, #16]
 80130aa:	4413      	add	r3, r2
 80130ac:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80130ae:	89bb      	ldrh	r3, [r7, #12]
 80130b0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80130b2:	e00d      	b.n	80130d0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	1d1a      	adds	r2, r3, #4
 80130b8:	627a      	str	r2, [r7, #36]	; 0x24
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80130c0:	89fb      	ldrh	r3, [r7, #14]
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	6a3a      	ldr	r2, [r7, #32]
 80130c6:	4413      	add	r3, r2
 80130c8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	3b01      	subs	r3, #1
 80130ce:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d1ee      	bne.n	80130b4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	3301      	adds	r3, #1
 80130da:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	3b01      	subs	r3, #1
 80130e0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d1dd      	bne.n	80130a4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80130e8:	2300      	movs	r3, #0
 80130ea:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80130ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	372c      	adds	r7, #44	; 0x2c
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80130fc:	b480      	push	{r7}
 80130fe:	b087      	sub	sp, #28
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013108:	f04f 0300 	mov.w	r3, #0
 801310c:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013112:	e00d      	b.n	8013130 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	1d1a      	adds	r2, r3, #4
 8013118:	60fa      	str	r2, [r7, #12]
 801311a:	edd3 7a00 	vldr	s15, [r3]
 801311e:	ed97 7a04 	vldr	s14, [r7, #16]
 8013122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013126:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	3b01      	subs	r3, #1
 801312e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d1ee      	bne.n	8013114 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	ee07 3a90 	vmov	s15, r3
 801313c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013140:	edd7 6a04 	vldr	s13, [r7, #16]
 8013144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	edc3 7a00 	vstr	s15, [r3]
}
 801314e:	bf00      	nop
 8013150:	371c      	adds	r7, #28
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b08a      	sub	sp, #40	; 0x28
 801315e:	af00      	add	r7, sp, #0
 8013160:	60f8      	str	r0, [r7, #12]
 8013162:	60b9      	str	r1, [r7, #8]
 8013164:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8013166:	f04f 0300 	mov.w	r3, #0
 801316a:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8013170:	e011      	b.n	8013196 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	1d1a      	adds	r2, r3, #4
 8013176:	60fa      	str	r2, [r7, #12]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 801317c:	edd7 7a07 	vldr	s15, [r7, #28]
 8013180:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013184:	ed97 7a08 	vldr	s14, [r7, #32]
 8013188:	ee77 7a27 	vadd.f32	s15, s14, s15
 801318c:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	3b01      	subs	r3, #1
 8013194:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8013196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1ea      	bne.n	8013172 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	ee07 3a90 	vmov	s15, r3
 80131a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80131a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80131aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131ae:	edc7 7a06 	vstr	s15, [r7, #24]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 80131b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80131ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c2:	db09      	blt.n	80131d8 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 80131c4:	ed97 0a06 	vldr	s0, [r7, #24]
 80131c8:	f007 f9e8 	bl	801a59c <sqrtf>
 80131cc:	eef0 7a40 	vmov.f32	s15, s0
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80131d6:	e004      	b.n	80131e2 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	f04f 0200 	mov.w	r2, #0
 80131de:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80131e0:	bf00      	nop
}
 80131e2:	bf00      	nop
 80131e4:	3728      	adds	r7, #40	; 0x28
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <arm_var_f32>:
#else
void arm_var_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80131ea:	b480      	push	{r7}
 80131ec:	b08b      	sub	sp, #44	; 0x2c
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	60f8      	str	r0, [r7, #12]
 80131f2:	60b9      	str	r1, [r7, #8]
 80131f4:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80131f6:	f04f 0300 	mov.w	r3, #0
 80131fa:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80131fc:	f04f 0300 	mov.w	r3, #0
 8013200:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	61bb      	str	r3, [r7, #24]

  if (blockSize <= 1U)
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	2b01      	cmp	r3, #1
 801320a:	d804      	bhi.n	8013216 <arm_var_f32+0x2c>
  {
    *pResult = 0;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f04f 0200 	mov.w	r2, #0
 8013212:	601a      	str	r2, [r3, #0]
    return;
 8013214:	e04e      	b.n	80132b4 <arm_var_f32+0xca>
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801321a:	e00d      	b.n	8013238 <arm_var_f32+0x4e>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */

    sum += *pInput++;
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	1d1a      	adds	r2, r3, #4
 8013220:	61ba      	str	r2, [r7, #24]
 8013222:	edd3 7a00 	vldr	s15, [r3]
 8013226:	ed97 7a08 	vldr	s14, [r7, #32]
 801322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801322e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8013232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013234:	3b01      	subs	r3, #1
 8013236:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	2b00      	cmp	r3, #0
 801323c:	d1ee      	bne.n	801321c <arm_var_f32+0x32>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  fMean = sum / (float32_t) blockSize;
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	ee07 3a90 	vmov	s15, r3
 8013244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013248:	edd7 6a08 	vldr	s13, [r7, #32]
 801324c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013250:	edc7 7a05 	vstr	s15, [r7, #20]

  pInput = pSrc;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	61bb      	str	r3, [r7, #24]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801325c:	e017      	b.n	801328e <arm_var_f32+0xa4>
  {
    fValue = *pInput++ - fMean;
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	1d1a      	adds	r2, r3, #4
 8013262:	61ba      	str	r2, [r7, #24]
 8013264:	ed93 7a00 	vldr	s14, [r3]
 8013268:	edd7 7a05 	vldr	s15, [r7, #20]
 801326c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013270:	edc7 7a04 	vstr	s15, [r7, #16]
    fSum += fValue * fValue;
 8013274:	edd7 7a04 	vldr	s15, [r7, #16]
 8013278:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801327c:	ed97 7a07 	vldr	s14, [r7, #28]
 8013280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013284:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement loop counter */
    blkCnt--;
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	3b01      	subs	r3, #1
 801328c:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 801328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013290:	2b00      	cmp	r3, #0
 8013292:	d1e4      	bne.n	801325e <arm_var_f32+0x74>
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	ee07 3a90 	vmov	s15, r3
 801329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801329e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80132a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80132a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80132aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	edc3 7a00 	vstr	s15, [r3]
}
 80132b4:	372c      	adds	r7, #44	; 0x2c
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80132be:	b480      	push	{r7}
 80132c0:	b089      	sub	sp, #36	; 0x24
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	60f8      	str	r0, [r7, #12]
 80132c6:	460b      	mov	r3, r1
 80132c8:	607a      	str	r2, [r7, #4]
 80132ca:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80132cc:	2300      	movs	r3, #0
 80132ce:	61fb      	str	r3, [r7, #28]
 80132d0:	e043      	b.n	801335a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	005b      	lsls	r3, r3, #1
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	4413      	add	r3, r2
 80132da:	881b      	ldrh	r3, [r3, #0]
 80132dc:	089b      	lsrs	r3, r3, #2
 80132de:	b29b      	uxth	r3, r3
 80132e0:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	3301      	adds	r3, #1
 80132e6:	005b      	lsls	r3, r3, #1
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	4413      	add	r3, r2
 80132ec:	881b      	ldrh	r3, [r3, #0]
 80132ee:	089b      	lsrs	r3, r3, #2
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	4413      	add	r3, r2
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	441a      	add	r2, r3
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	68f9      	ldr	r1, [r7, #12]
 801330e:	440b      	add	r3, r1
 8013310:	6812      	ldr	r2, [r2, #0]
 8013312:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	4413      	add	r3, r2
 801331c:	693a      	ldr	r2, [r7, #16]
 801331e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	3301      	adds	r3, #1
 8013324:	009b      	lsls	r3, r3, #2
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	4413      	add	r3, r2
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	3301      	adds	r3, #1
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	68fa      	ldr	r2, [r7, #12]
 8013336:	441a      	add	r2, r3
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	3301      	adds	r3, #1
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	68f9      	ldr	r1, [r7, #12]
 8013340:	440b      	add	r3, r1
 8013342:	6812      	ldr	r2, [r2, #0]
 8013344:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	3301      	adds	r3, #1
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	4413      	add	r3, r2
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	601a      	str	r2, [r3, #0]

    i += 2;
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	3302      	adds	r3, #2
 8013358:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 801335a:	897b      	ldrh	r3, [r7, #10]
 801335c:	69fa      	ldr	r2, [r7, #28]
 801335e:	429a      	cmp	r2, r3
 8013360:	d3b7      	bcc.n	80132d2 <arm_bitreversal_32+0x14>
  }
}
 8013362:	bf00      	nop
 8013364:	bf00      	nop
 8013366:	3724      	adds	r7, #36	; 0x24
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b0a0      	sub	sp, #128	; 0x80
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8013380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013382:	009b      	lsls	r3, r3, #2
 8013384:	683a      	ldr	r2, [r7, #0]
 8013386:	4413      	add	r3, r2
 8013388:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8013394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013396:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8013398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801339a:	085b      	lsrs	r3, r3, #1
 801339c:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 801339e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	683a      	ldr	r2, [r7, #0]
 80133a4:	4413      	add	r3, r2
 80133a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80133a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80133ae:	4413      	add	r3, r2
 80133b0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80133b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133b4:	089b      	lsrs	r3, r3, #2
 80133b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80133b8:	e1b6      	b.n	8013728 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	689b      	ldr	r3, [r3, #8]
 80133ca:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80133d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80133d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 80133de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 80133e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 80133ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 80133f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80133f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80133fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8013402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8013408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 801340e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013410:	689b      	ldr	r3, [r3, #8]
 8013412:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8013414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 801341a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801341e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	1d1a      	adds	r2, r3, #4
 8013426:	603a      	str	r2, [r7, #0]
 8013428:	ee77 7a27 	vadd.f32	s15, s14, s15
 801342c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8013430:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013434:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	1d1a      	adds	r2, r3, #4
 801343c:	603a      	str	r2, [r7, #0]
 801343e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013442:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8013446:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801344a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	1d1a      	adds	r2, r3, #4
 8013452:	603a      	str	r2, [r7, #0]
 8013454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013458:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 801345c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8013460:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	1d1a      	adds	r2, r3, #4
 8013468:	603a      	str	r2, [r7, #0]
 801346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801346e:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8013472:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8013476:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801347e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8013482:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013486:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801348a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801348e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8013492:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013496:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801349e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80134a2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80134a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80134aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134ae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80134b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80134b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80134ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134bc:	1d1a      	adds	r2, r3, #4
 80134be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80134c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134c4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80134c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80134cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80134d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134d2:	1d1a      	adds	r2, r3, #4
 80134d4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80134d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134da:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80134de:	ed97 7a08 	vldr	s14, [r7, #32]
 80134e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80134e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134e8:	1d1a      	adds	r2, r3, #4
 80134ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80134ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134f0:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80134f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80134f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80134fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80134fe:	1d1a      	adds	r2, r3, #4
 8013500:	67fa      	str	r2, [r7, #124]	; 0x7c
 8013502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013506:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 801350a:	ed97 7a02 	vldr	s14, [r7, #8]
 801350e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013516:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 801351a:	ed97 7a03 	vldr	s14, [r7, #12]
 801351e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013526:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 801352a:	ed97 7a04 	vldr	s14, [r7, #16]
 801352e:	edd7 7a08 	vldr	s15, [r7, #32]
 8013532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013536:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 801353a:	ed97 7a05 	vldr	s14, [r7, #20]
 801353e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013546:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 801354a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801354c:	1d1a      	adds	r2, r3, #4
 801354e:	673a      	str	r2, [r7, #112]	; 0x70
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8013554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013556:	1d1a      	adds	r2, r3, #4
 8013558:	673a      	str	r2, [r7, #112]	; 0x70
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 801355e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013562:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013566:	ee67 7a27 	vmul.f32	s15, s14, s15
 801356a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 801356e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013572:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013576:	ee67 7a27 	vmul.f32	s15, s14, s15
 801357a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 801357e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013582:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013586:	ee67 7a27 	vmul.f32	s15, s14, s15
 801358a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 801358e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013592:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013596:	ee67 7a27 	vmul.f32	s15, s14, s15
 801359a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 801359e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135a0:	1d1a      	adds	r2, r3, #4
 80135a2:	677a      	str	r2, [r7, #116]	; 0x74
 80135a4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80135a8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80135ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135b0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80135b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80135b6:	1d1a      	adds	r2, r3, #4
 80135b8:	677a      	str	r2, [r7, #116]	; 0x74
 80135ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80135be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80135c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135c6:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80135ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80135ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80135d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135d6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80135da:	edd7 7a03 	vldr	s15, [r7, #12]
 80135de:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80135e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135e6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 80135ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80135ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80135f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 80135fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80135fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013606:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 801360a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801360c:	1d1a      	adds	r2, r3, #4
 801360e:	67ba      	str	r2, [r7, #120]	; 0x78
 8013610:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013614:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8013618:	ee77 7a67 	vsub.f32	s15, s14, s15
 801361c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8013620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013622:	1d1a      	adds	r2, r3, #4
 8013624:	67ba      	str	r2, [r7, #120]	; 0x78
 8013626:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801362a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801362e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013632:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8013636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013638:	1d1a      	adds	r2, r3, #4
 801363a:	673a      	str	r2, [r7, #112]	; 0x70
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8013640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013642:	1d1a      	adds	r2, r3, #4
 8013644:	673a      	str	r2, [r7, #112]	; 0x70
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 801364a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801364e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013656:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 801365a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801365e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013666:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 801366a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801366e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013676:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 801367a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801367e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013686:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 801368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801368c:	1d1a      	adds	r2, r3, #4
 801368e:	677a      	str	r2, [r7, #116]	; 0x74
 8013690:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013694:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8013698:	ee77 7a27 	vadd.f32	s15, s14, s15
 801369c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80136a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136a2:	1d1a      	adds	r2, r3, #4
 80136a4:	677a      	str	r2, [r7, #116]	; 0x74
 80136a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80136aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80136ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136b2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80136b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80136ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80136be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80136c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80136ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80136ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80136d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80136da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80136de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 80136e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80136ea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80136ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80136f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136f8:	1d1a      	adds	r2, r3, #4
 80136fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80136fc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013700:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8013704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013708:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 801370c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801370e:	1d1a      	adds	r2, r3, #4
 8013710:	67ba      	str	r2, [r7, #120]	; 0x78
 8013712:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013716:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801371e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8013722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013724:	3b01      	subs	r3, #1
 8013726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801372a:	2b00      	cmp	r3, #0
 801372c:	f47f ae45 	bne.w	80133ba <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8013730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013732:	b299      	uxth	r1, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	685a      	ldr	r2, [r3, #4]
 8013738:	2302      	movs	r3, #2
 801373a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801373c:	f000 fef6 	bl	801452c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8013740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013742:	b299      	uxth	r1, r3
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	685a      	ldr	r2, [r3, #4]
 8013748:	2302      	movs	r3, #2
 801374a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801374c:	f000 feee 	bl	801452c <arm_radix8_butterfly_f32>
}
 8013750:	bf00      	nop
 8013752:	3780      	adds	r7, #128	; 0x80
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b0ac      	sub	sp, #176	; 0xb0
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	881b      	ldrh	r3, [r3, #0]
 8013766:	085b      	lsrs	r3, r3, #1
 8013768:	b29b      	uxth	r3, r3
 801376a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 801376e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	4413      	add	r3, r2
 8013778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 801377c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8013786:	4413      	add	r3, r2
 8013788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 801378c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013796:	4413      	add	r3, r2
 8013798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80137a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137a4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80137a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80137aa:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80137ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137b0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80137b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80137b6:	3b04      	subs	r3, #4
 80137b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80137bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80137c0:	3b04      	subs	r3, #4
 80137c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80137c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80137ca:	3b04      	subs	r3, #4
 80137cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80137d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80137da:	4413      	add	r3, r2
 80137dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80137e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80137ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80137f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80137f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80137f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80137fc:	085b      	lsrs	r3, r3, #1
 80137fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8013802:	2302      	movs	r3, #2
 8013804:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8013806:	2304      	movs	r3, #4
 8013808:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 801380a:	2306      	movs	r3, #6
 801380c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	ed93 7a00 	vldr	s14, [r3]
 8013814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013818:	edd3 7a00 	vldr	s15, [r3]
 801381c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013820:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	ed93 7a00 	vldr	s14, [r3]
 801382a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801382e:	edd3 7a00 	vldr	s15, [r3]
 8013832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013836:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	3304      	adds	r3, #4
 801383e:	ed93 7a00 	vldr	s14, [r3]
 8013842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013846:	3304      	adds	r3, #4
 8013848:	edd3 7a00 	vldr	s15, [r3]
 801384c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013850:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	3304      	adds	r3, #4
 8013858:	ed93 7a00 	vldr	s14, [r3]
 801385c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013860:	3304      	adds	r3, #4
 8013862:	edd3 7a00 	vldr	s15, [r3]
 8013866:	ee77 7a67 	vsub.f32	s15, s14, s15
 801386a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 801386e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013872:	3304      	adds	r3, #4
 8013874:	ed93 7a00 	vldr	s14, [r3]
 8013878:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801387c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013884:	3304      	adds	r3, #4
 8013886:	edd3 7a00 	vldr	s15, [r3]
 801388a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801388e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8013892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013896:	edd3 7a00 	vldr	s15, [r3]
 801389a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801389e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138a6:	edd3 7a00 	vldr	s15, [r3]
 80138aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80138b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80138b6:	edd3 7a00 	vldr	s15, [r3]
 80138ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80138be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138c6:	edd3 7a00 	vldr	s15, [r3]
 80138ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138ce:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80138d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80138d6:	3304      	adds	r3, #4
 80138d8:	edd3 7a00 	vldr	s15, [r3]
 80138dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80138e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80138e8:	3304      	adds	r3, #4
 80138ea:	edd3 7a00 	vldr	s15, [r3]
 80138ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138f2:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80138f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80138fa:	3304      	adds	r3, #4
 80138fc:	edd3 7a00 	vldr	s15, [r3]
 8013900:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801390c:	3304      	adds	r3, #4
 801390e:	edd3 7a00 	vldr	s15, [r3]
 8013912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013916:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 801391a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801391e:	ed93 7a00 	vldr	s14, [r3]
 8013922:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013926:	ee37 7a27 	vadd.f32	s14, s14, s15
 801392a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801392e:	edd3 7a00 	vldr	s15, [r3]
 8013932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013936:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 801393a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801393e:	ed93 7a00 	vldr	s14, [r3]
 8013942:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013946:	ee37 7a27 	vadd.f32	s14, s14, s15
 801394a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801394e:	edd3 7a00 	vldr	s15, [r3]
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	1d1a      	adds	r2, r3, #4
 8013956:	603a      	str	r2, [r7, #0]
 8013958:	ee77 7a27 	vadd.f32	s15, s14, s15
 801395c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013964:	3304      	adds	r3, #4
 8013966:	ed93 7a00 	vldr	s14, [r3]
 801396a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801396e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013976:	3304      	adds	r3, #4
 8013978:	edd3 7a00 	vldr	s15, [r3]
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	1d1a      	adds	r2, r3, #4
 8013980:	603a      	str	r2, [r7, #0]
 8013982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013986:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 801398a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801398e:	1d1a      	adds	r2, r3, #4
 8013990:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013996:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8013998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801399c:	1d1a      	adds	r2, r3, #4
 801399e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80139a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139a4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80139a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139aa:	1d1a      	adds	r2, r3, #4
 80139ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139b0:	69fa      	ldr	r2, [r7, #28]
 80139b2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80139b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139b8:	1d1a      	adds	r2, r3, #4
 80139ba:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139be:	6a3a      	ldr	r2, [r7, #32]
 80139c0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80139c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80139c6:	1d1a      	adds	r2, r3, #4
 80139c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80139cc:	68fa      	ldr	r2, [r7, #12]
 80139ce:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80139d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80139d4:	1d1a      	adds	r2, r3, #4
 80139d6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80139da:	693a      	ldr	r2, [r7, #16]
 80139dc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80139de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80139e6:	4413      	add	r3, r2
 80139e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80139ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80139f4:	4413      	add	r3, r2
 80139f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80139fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013a02:	4413      	add	r3, r2
 8013a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8013a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013a0c:	3b02      	subs	r3, #2
 8013a0e:	085b      	lsrs	r3, r3, #1
 8013a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013a14:	e31c      	b.n	8014050 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	ed93 7a00 	vldr	s14, [r3]
 8013a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a20:	edd3 7a00 	vldr	s15, [r3]
 8013a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a28:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	ed93 7a00 	vldr	s14, [r3]
 8013a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a36:	edd3 7a00 	vldr	s15, [r3]
 8013a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a3e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	3304      	adds	r3, #4
 8013a46:	ed93 7a00 	vldr	s14, [r3]
 8013a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a4e:	3304      	adds	r3, #4
 8013a50:	edd3 7a00 	vldr	s15, [r3]
 8013a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a58:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	3304      	adds	r3, #4
 8013a60:	ed93 7a00 	vldr	s14, [r3]
 8013a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a68:	3304      	adds	r3, #4
 8013a6a:	edd3 7a00 	vldr	s15, [r3]
 8013a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a72:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8013a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	ed93 7a00 	vldr	s14, [r3]
 8013a80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8013a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a8c:	3304      	adds	r3, #4
 8013a8e:	edd3 7a00 	vldr	s15, [r3]
 8013a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a96:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8013a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013a9e:	edd3 7a00 	vldr	s15, [r3]
 8013aa2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8013aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013aae:	edd3 7a00 	vldr	s15, [r3]
 8013ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ab6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8013aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013abe:	edd3 7a00 	vldr	s15, [r3]
 8013ac2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013ace:	edd3 7a00 	vldr	s15, [r3]
 8013ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8013ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ade:	3304      	adds	r3, #4
 8013ae0:	edd3 7a00 	vldr	s15, [r3]
 8013ae4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013ae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013af0:	3304      	adds	r3, #4
 8013af2:	edd3 7a00 	vldr	s15, [r3]
 8013af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013afa:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8013afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b02:	3304      	adds	r3, #4
 8013b04:	edd3 7a00 	vldr	s15, [r3]
 8013b08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8013b0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b14:	3304      	adds	r3, #4
 8013b16:	edd3 7a00 	vldr	s15, [r3]
 8013b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b1e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8013b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b26:	ed93 7a00 	vldr	s14, [r3]
 8013b2a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b36:	edd3 7a00 	vldr	s15, [r3]
 8013b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b3e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8013b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b46:	ed93 7a00 	vldr	s14, [r3]
 8013b4a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b56:	edd3 7a00 	vldr	s15, [r3]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	1d1a      	adds	r2, r3, #4
 8013b5e:	603a      	str	r2, [r7, #0]
 8013b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b64:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8013b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b6c:	3304      	adds	r3, #4
 8013b6e:	ed93 7a00 	vldr	s14, [r3]
 8013b72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013b7e:	3304      	adds	r3, #4
 8013b80:	edd3 7a00 	vldr	s15, [r3]
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	1d1a      	adds	r2, r3, #4
 8013b88:	603a      	str	r2, [r7, #0]
 8013b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b8e:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8013b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013b96:	3b04      	subs	r3, #4
 8013b98:	ed93 7a00 	vldr	s14, [r3]
 8013b9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013ba0:	3b04      	subs	r3, #4
 8013ba2:	edd3 7a00 	vldr	s15, [r3]
 8013ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013baa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8013bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013bb2:	3b04      	subs	r3, #4
 8013bb4:	ed93 7a00 	vldr	s14, [r3]
 8013bb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bbc:	3b04      	subs	r3, #4
 8013bbe:	edd3 7a00 	vldr	s15, [r3]
 8013bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bc6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8013bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013bce:	ed93 7a00 	vldr	s14, [r3]
 8013bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bd6:	edd3 7a00 	vldr	s15, [r3]
 8013bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8013be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013be6:	ed93 7a00 	vldr	s14, [r3]
 8013bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013bee:	edd3 7a00 	vldr	s15, [r3]
 8013bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bf6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8013bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013bfe:	ed93 7a00 	vldr	s14, [r3]
 8013c02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c06:	edd3 7a00 	vldr	s15, [r3]
 8013c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c16:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8013c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c1e:	ed93 7a00 	vldr	s14, [r3]
 8013c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013c26:	edd3 7a00 	vldr	s15, [r3]
 8013c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013c32:	3b04      	subs	r3, #4
 8013c34:	edd3 7a00 	vldr	s15, [r3]
 8013c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c40:	3b04      	subs	r3, #4
 8013c42:	edd3 7a00 	vldr	s15, [r3]
 8013c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013c4a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8013c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013c52:	3b04      	subs	r3, #4
 8013c54:	edd3 7a00 	vldr	s15, [r3]
 8013c58:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8013c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c64:	3b04      	subs	r3, #4
 8013c66:	edd3 7a00 	vldr	s15, [r3]
 8013c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c6e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8013c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013c76:	edd3 7a00 	vldr	s15, [r3]
 8013c7a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8013c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c86:	edd3 7a00 	vldr	s15, [r3]
 8013c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013c8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8013c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013c96:	ed93 7a00 	vldr	s14, [r3]
 8013c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013c9e:	edd3 7a00 	vldr	s15, [r3]
 8013ca2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ca6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8013caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cae:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8013cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013cb6:	3b04      	subs	r3, #4
 8013cb8:	ed93 7a00 	vldr	s14, [r3]
 8013cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cc0:	3b04      	subs	r3, #4
 8013cc2:	edd3 7a00 	vldr	s15, [r3]
 8013cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013cca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8013cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cd2:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8013cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cda:	ed93 7a00 	vldr	s14, [r3]
 8013cde:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8013ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013cea:	edd3 7a00 	vldr	s15, [r3]
 8013cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013cf2:	1f1a      	subs	r2, r3, #4
 8013cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013cfc:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8013d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d04:	3b04      	subs	r3, #4
 8013d06:	ed93 7a00 	vldr	s14, [r3]
 8013d0a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8013d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d16:	3b04      	subs	r3, #4
 8013d18:	edd3 7a00 	vldr	s15, [r3]
 8013d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d20:	1f1a      	subs	r2, r3, #4
 8013d22:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d2a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8013d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d32:	1d1a      	adds	r2, r3, #4
 8013d34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8013d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d40:	1d1a      	adds	r2, r3, #4
 8013d42:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8013d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013d4e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8013d5a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013d5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8013d6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013d6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d76:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8013d7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013d7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8013d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013d8e:	1d1a      	adds	r2, r3, #4
 8013d90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013d94:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013d98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013da0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8013da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013da8:	1d1a      	adds	r2, r3, #4
 8013daa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8013dae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dba:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8013dbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013dc2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8013dce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013dd2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dda:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8013dde:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8013de2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8013dee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8013df2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dfa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8013dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013e02:	1f1a      	subs	r2, r3, #4
 8013e04:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013e08:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013e0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e14:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8013e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013e1c:	1f1a      	subs	r2, r3, #4
 8013e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013e22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013e26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e2e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8013e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8013e3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e3e:	3304      	adds	r3, #4
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8013e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013e4c:	4413      	add	r3, r2
 8013e4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8013e52:	edd7 7a07 	vldr	s15, [r7, #28]
 8013e56:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e5e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8013e62:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e6e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8013e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e76:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e7e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8013e82:	edd7 7a07 	vldr	s15, [r7, #28]
 8013e86:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e8e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8013e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e96:	1d1a      	adds	r2, r3, #4
 8013e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013e9c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013ea0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ea8:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8013eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eb0:	1d1a      	adds	r2, r3, #4
 8013eb2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013eb6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013eba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ec2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8013ec6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013eca:	eef1 7a67 	vneg.f32	s15, s15
 8013ece:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ed6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8013eda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013ede:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ee6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8013eea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013eee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8013efa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013efe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8013f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f0e:	1f1a      	subs	r2, r3, #4
 8013f10:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013f14:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013f18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f20:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8013f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f28:	1f1a      	subs	r2, r3, #4
 8013f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013f2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8013f32:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8013f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f3a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8013f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8013f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f4a:	3304      	adds	r3, #4
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8013f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013f58:	4413      	add	r3, r2
 8013f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8013f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013f62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f6a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8013f6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013f72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8013f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013f82:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8013f8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8013f92:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f9a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8013f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013fa2:	1d1a      	adds	r2, r3, #4
 8013fa4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013fa8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013fac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8013fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013fb4:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8013fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013fbc:	1d1a      	adds	r2, r3, #4
 8013fbe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8013fc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8013fc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8013fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fce:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8013fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8013fd6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fde:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8013fe2:	edd7 7a05 	vldr	s15, [r7, #20]
 8013fe6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8013fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8013ff2:	edd7 7a05 	vldr	s15, [r7, #20]
 8013ff6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8013ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ffe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8014002:	edd7 7a06 	vldr	s15, [r7, #24]
 8014006:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801400e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8014012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014016:	1f1a      	subs	r2, r3, #4
 8014018:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801401c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014020:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014028:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 801402c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014030:	1f1a      	subs	r2, r3, #4
 8014032:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8014036:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801403a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801403e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014042:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8014046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801404a:	3b01      	subs	r3, #1
 801404c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014054:	2b00      	cmp	r3, #0
 8014056:	f47f acde 	bne.w	8013a16 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	ed93 7a00 	vldr	s14, [r3]
 8014060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014064:	edd3 7a00 	vldr	s15, [r3]
 8014068:	ee77 7a27 	vadd.f32	s15, s14, s15
 801406c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	ed93 7a00 	vldr	s14, [r3]
 8014076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801407a:	edd3 7a00 	vldr	s15, [r3]
 801407e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014082:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	3304      	adds	r3, #4
 801408a:	ed93 7a00 	vldr	s14, [r3]
 801408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014092:	3304      	adds	r3, #4
 8014094:	edd3 7a00 	vldr	s15, [r3]
 8014098:	ee77 7a27 	vadd.f32	s15, s14, s15
 801409c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	3304      	adds	r3, #4
 80140a4:	ed93 7a00 	vldr	s14, [r3]
 80140a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80140ac:	3304      	adds	r3, #4
 80140ae:	edd3 7a00 	vldr	s15, [r3]
 80140b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80140ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140be:	3304      	adds	r3, #4
 80140c0:	ed93 7a00 	vldr	s14, [r3]
 80140c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80140c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80140cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80140d0:	3304      	adds	r3, #4
 80140d2:	edd3 7a00 	vldr	s15, [r3]
 80140d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80140de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140e2:	edd3 7a00 	vldr	s15, [r3]
 80140e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80140ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80140ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80140f2:	edd3 7a00 	vldr	s15, [r3]
 80140f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80140fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014102:	edd3 7a00 	vldr	s15, [r3]
 8014106:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801410a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801410e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014112:	edd3 7a00 	vldr	s15, [r3]
 8014116:	ee77 7a67 	vsub.f32	s15, s14, s15
 801411a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 801411e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014122:	3304      	adds	r3, #4
 8014124:	edd3 7a00 	vldr	s15, [r3]
 8014128:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 801412c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014134:	3304      	adds	r3, #4
 8014136:	edd3 7a00 	vldr	s15, [r3]
 801413a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801413e:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8014142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014146:	3304      	adds	r3, #4
 8014148:	edd3 7a00 	vldr	s15, [r3]
 801414c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8014150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014158:	3304      	adds	r3, #4
 801415a:	edd3 7a00 	vldr	s15, [r3]
 801415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014162:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8014166:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801416a:	ed93 7a00 	vldr	s14, [r3]
 801416e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8014172:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801417a:	edd3 7a00 	vldr	s15, [r3]
 801417e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014182:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8014186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801418a:	ed93 7a00 	vldr	s14, [r3]
 801418e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8014192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801419a:	edd3 7a00 	vldr	s15, [r3]
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	1d1a      	adds	r2, r3, #4
 80141a2:	603a      	str	r2, [r7, #0]
 80141a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141a8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80141ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80141b0:	3304      	adds	r3, #4
 80141b2:	ed93 7a00 	vldr	s14, [r3]
 80141b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80141ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80141c2:	3304      	adds	r3, #4
 80141c4:	edd3 7a00 	vldr	s15, [r3]
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	1d1a      	adds	r2, r3, #4
 80141cc:	603a      	str	r2, [r7, #0]
 80141ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141d2:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80141d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80141de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80141e2:	3304      	adds	r3, #4
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 80141e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80141ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80141f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 80141f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80141fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014204:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8014208:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801420c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014214:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8014218:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801421c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014224:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8014228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801422c:	1d1a      	adds	r2, r3, #4
 801422e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8014232:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014236:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801423a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801423e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8014242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014246:	1d1a      	adds	r2, r3, #4
 8014248:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801424c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8014250:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014258:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 801425c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8014264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014268:	3304      	adds	r3, #4
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 801426e:	edd7 7a07 	vldr	s15, [r7, #28]
 8014272:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014276:	ee67 7a27 	vmul.f32	s15, s14, s15
 801427a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 801427e:	edd7 7a08 	vldr	s15, [r7, #32]
 8014282:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8014286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801428a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 801428e:	edd7 7a08 	vldr	s15, [r7, #32]
 8014292:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8014296:	ee67 7a27 	vmul.f32	s15, s14, s15
 801429a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 801429e:	edd7 7a07 	vldr	s15, [r7, #28]
 80142a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80142a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80142aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80142ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80142b2:	1d1a      	adds	r2, r3, #4
 80142b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80142b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80142bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80142c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80142c4:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80142c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80142cc:	1d1a      	adds	r2, r3, #4
 80142ce:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80142d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80142d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80142da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142de:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80142e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80142ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80142ee:	3304      	adds	r3, #4
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80142f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80142f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80142fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014300:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8014304:	edd7 7a04 	vldr	s15, [r7, #16]
 8014308:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801430c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014310:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8014314:	edd7 7a04 	vldr	s15, [r7, #16]
 8014318:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801431c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014320:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8014324:	edd7 7a03 	vldr	s15, [r7, #12]
 8014328:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014330:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8014334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014338:	1d1a      	adds	r2, r3, #4
 801433a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801433e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8014342:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8014346:	ee77 7a27 	vadd.f32	s15, s14, s15
 801434a:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 801434e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014352:	1d1a      	adds	r2, r3, #4
 8014354:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8014358:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801435c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8014360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014364:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8014368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801436c:	b299      	uxth	r1, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685a      	ldr	r2, [r3, #4]
 8014372:	2304      	movs	r3, #4
 8014374:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8014376:	f000 f8d9 	bl	801452c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 801437a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801437e:	b299      	uxth	r1, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	685a      	ldr	r2, [r3, #4]
 8014384:	2304      	movs	r3, #4
 8014386:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8014388:	f000 f8d0 	bl	801452c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 801438c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014390:	b299      	uxth	r1, r3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685a      	ldr	r2, [r3, #4]
 8014396:	2304      	movs	r3, #4
 8014398:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801439a:	f000 f8c7 	bl	801452c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 801439e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80143a2:	b299      	uxth	r1, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	685a      	ldr	r2, [r3, #4]
 80143a8:	2304      	movs	r3, #4
 80143aa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80143ac:	f000 f8be 	bl	801452c <arm_radix8_butterfly_f32>
}
 80143b0:	bf00      	nop
 80143b2:	37b0      	adds	r7, #176	; 0xb0
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b088      	sub	sp, #32
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	4611      	mov	r1, r2
 80143c4:	461a      	mov	r2, r3
 80143c6:	460b      	mov	r3, r1
 80143c8:	71fb      	strb	r3, [r7, #7]
 80143ca:	4613      	mov	r3, r2
 80143cc:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	881b      	ldrh	r3, [r3, #0]
 80143d2:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80143d4:	79fb      	ldrb	r3, [r7, #7]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d117      	bne.n	801440a <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	3304      	adds	r3, #4
 80143de:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80143e0:	2300      	movs	r3, #0
 80143e2:	61fb      	str	r3, [r7, #28]
 80143e4:	e00d      	b.n	8014402 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	edd3 7a00 	vldr	s15, [r3]
 80143ec:	eef1 7a67 	vneg.f32	s15, s15
 80143f0:	69bb      	ldr	r3, [r7, #24]
 80143f2:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	3308      	adds	r3, #8
 80143fa:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	3301      	adds	r3, #1
 8014400:	61fb      	str	r3, [r7, #28]
 8014402:	69fa      	ldr	r2, [r7, #28]
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	429a      	cmp	r2, r3
 8014408:	d3ed      	bcc.n	80143e6 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014410:	d040      	beq.n	8014494 <arm_cfft_f32+0xdc>
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014418:	d845      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014420:	d033      	beq.n	801448a <arm_cfft_f32+0xd2>
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014428:	d83d      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 801442a:	697b      	ldr	r3, [r7, #20]
 801442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014430:	d026      	beq.n	8014480 <arm_cfft_f32+0xc8>
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014438:	d835      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014440:	d028      	beq.n	8014494 <arm_cfft_f32+0xdc>
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014448:	d82d      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014450:	d01b      	beq.n	801448a <arm_cfft_f32+0xd2>
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014458:	d825      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	2b80      	cmp	r3, #128	; 0x80
 801445e:	d00f      	beq.n	8014480 <arm_cfft_f32+0xc8>
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	2b80      	cmp	r3, #128	; 0x80
 8014464:	d81f      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	2b40      	cmp	r3, #64	; 0x40
 801446a:	d013      	beq.n	8014494 <arm_cfft_f32+0xdc>
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	2b40      	cmp	r3, #64	; 0x40
 8014470:	d819      	bhi.n	80144a6 <arm_cfft_f32+0xee>
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	2b10      	cmp	r3, #16
 8014476:	d003      	beq.n	8014480 <arm_cfft_f32+0xc8>
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	2b20      	cmp	r3, #32
 801447c:	d005      	beq.n	801448a <arm_cfft_f32+0xd2>
 801447e:	e012      	b.n	80144a6 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8014480:	68b9      	ldr	r1, [r7, #8]
 8014482:	68f8      	ldr	r0, [r7, #12]
 8014484:	f7fe ff74 	bl	8013370 <arm_cfft_radix8by2_f32>
    break;
 8014488:	e00d      	b.n	80144a6 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 801448a:	68b9      	ldr	r1, [r7, #8]
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f7ff f963 	bl	8013758 <arm_cfft_radix8by4_f32>
    break;
 8014492:	e008      	b.n	80144a6 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	b299      	uxth	r1, r3
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	685a      	ldr	r2, [r3, #4]
 801449c:	2301      	movs	r3, #1
 801449e:	68b8      	ldr	r0, [r7, #8]
 80144a0:	f000 f844 	bl	801452c <arm_radix8_butterfly_f32>
    break;
 80144a4:	bf00      	nop
  }

  if ( bitReverseFlag )
 80144a6:	79bb      	ldrb	r3, [r7, #6]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d007      	beq.n	80144bc <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	8999      	ldrh	r1, [r3, #12]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	689b      	ldr	r3, [r3, #8]
 80144b4:	461a      	mov	r2, r3
 80144b6:	68b8      	ldr	r0, [r7, #8]
 80144b8:	f7fe ff01 	bl	80132be <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80144bc:	79fb      	ldrb	r3, [r7, #7]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d130      	bne.n	8014524 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	ee07 3a90 	vmov	s15, r3
 80144c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80144cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80144d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144d4:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80144dc:	2300      	movs	r3, #0
 80144de:	61fb      	str	r3, [r7, #28]
 80144e0:	e01c      	b.n	801451c <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	1d1a      	adds	r2, r3, #4
 80144e6:	61ba      	str	r2, [r7, #24]
 80144e8:	ed93 7a00 	vldr	s14, [r3]
 80144ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80144f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144f4:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	edd3 7a00 	vldr	s15, [r3]
 80144fe:	eeb1 7a67 	vneg.f32	s14, s15
 8014502:	edd7 7a04 	vldr	s15, [r7, #16]
 8014506:	ee67 7a27 	vmul.f32	s15, s14, s15
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8014510:	69bb      	ldr	r3, [r7, #24]
 8014512:	3304      	adds	r3, #4
 8014514:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	3301      	adds	r3, #1
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	69fa      	ldr	r2, [r7, #28]
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	429a      	cmp	r2, r3
 8014522:	d3de      	bcc.n	80144e2 <arm_cfft_f32+0x12a>
    }
  }
}
 8014524:	bf00      	nop
 8014526:	3720      	adds	r7, #32
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 801452c:	b480      	push	{r7}
 801452e:	b0bd      	sub	sp, #244	; 0xf4
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	607a      	str	r2, [r7, #4]
 8014536:	461a      	mov	r2, r3
 8014538:	460b      	mov	r3, r1
 801453a:	817b      	strh	r3, [r7, #10]
 801453c:	4613      	mov	r3, r2
 801453e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8014540:	4b09      	ldr	r3, [pc, #36]	; (8014568 <arm_radix8_butterfly_f32+0x3c>)
 8014542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8014546:	897b      	ldrh	r3, [r7, #10]
 8014548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 801454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8014554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014558:	08db      	lsrs	r3, r3, #3
 801455a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 801455e:	2300      	movs	r3, #0
 8014560:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014564:	e002      	b.n	801456c <arm_radix8_butterfly_f32+0x40>
 8014566:	bf00      	nop
 8014568:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 801456c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014574:	4413      	add	r3, r2
 8014576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 801457a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014582:	4413      	add	r3, r2
 8014584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8014588:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801458c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014590:	4413      	add	r3, r2
 8014592:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8014596:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801459e:	4413      	add	r3, r2
 80145a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80145a4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80145a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145ac:	4413      	add	r3, r2
 80145ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80145b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80145b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145ba:	4413      	add	r3, r2
 80145bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80145c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80145c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145c8:	4413      	add	r3, r2
 80145ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80145ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	4413      	add	r3, r2
 80145d8:	ed93 7a00 	vldr	s14, [r3]
 80145dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	4413      	add	r3, r2
 80145e6:	edd3 7a00 	vldr	s15, [r3]
 80145ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80145f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	68fa      	ldr	r2, [r7, #12]
 80145fa:	4413      	add	r3, r2
 80145fc:	ed93 7a00 	vldr	s14, [r3]
 8014600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014604:	00db      	lsls	r3, r3, #3
 8014606:	68fa      	ldr	r2, [r7, #12]
 8014608:	4413      	add	r3, r2
 801460a:	edd3 7a00 	vldr	s15, [r3]
 801460e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014612:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8014616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	68fa      	ldr	r2, [r7, #12]
 801461e:	4413      	add	r3, r2
 8014620:	ed93 7a00 	vldr	s14, [r3]
 8014624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014628:	00db      	lsls	r3, r3, #3
 801462a:	68fa      	ldr	r2, [r7, #12]
 801462c:	4413      	add	r3, r2
 801462e:	edd3 7a00 	vldr	s15, [r3]
 8014632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014636:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 801463a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801463e:	00db      	lsls	r3, r3, #3
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	4413      	add	r3, r2
 8014644:	ed93 7a00 	vldr	s14, [r3]
 8014648:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801464c:	00db      	lsls	r3, r3, #3
 801464e:	68fa      	ldr	r2, [r7, #12]
 8014650:	4413      	add	r3, r2
 8014652:	edd3 7a00 	vldr	s15, [r3]
 8014656:	ee77 7a67 	vsub.f32	s15, s14, s15
 801465a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 801465e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014662:	00db      	lsls	r3, r3, #3
 8014664:	68fa      	ldr	r2, [r7, #12]
 8014666:	4413      	add	r3, r2
 8014668:	ed93 7a00 	vldr	s14, [r3]
 801466c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	68fa      	ldr	r2, [r7, #12]
 8014674:	4413      	add	r3, r2
 8014676:	edd3 7a00 	vldr	s15, [r3]
 801467a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801467e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8014682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014686:	00db      	lsls	r3, r3, #3
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	4413      	add	r3, r2
 801468c:	ed93 7a00 	vldr	s14, [r3]
 8014690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014694:	00db      	lsls	r3, r3, #3
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	4413      	add	r3, r2
 801469a:	edd3 7a00 	vldr	s15, [r3]
 801469e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146a2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80146a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80146aa:	00db      	lsls	r3, r3, #3
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	4413      	add	r3, r2
 80146b0:	ed93 7a00 	vldr	s14, [r3]
 80146b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80146b8:	00db      	lsls	r3, r3, #3
 80146ba:	68fa      	ldr	r2, [r7, #12]
 80146bc:	4413      	add	r3, r2
 80146be:	edd3 7a00 	vldr	s15, [r3]
 80146c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80146ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80146ce:	00db      	lsls	r3, r3, #3
 80146d0:	68fa      	ldr	r2, [r7, #12]
 80146d2:	4413      	add	r3, r2
 80146d4:	ed93 7a00 	vldr	s14, [r3]
 80146d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80146dc:	00db      	lsls	r3, r3, #3
 80146de:	68fa      	ldr	r2, [r7, #12]
 80146e0:	4413      	add	r3, r2
 80146e2:	edd3 7a00 	vldr	s15, [r3]
 80146e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80146ee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80146f2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80146f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146fa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80146fe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014702:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801470a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 801470e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014712:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014716:	ee77 7a67 	vsub.f32	s15, s14, s15
 801471a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 801471e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014722:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014726:	ee77 7a27 	vadd.f32	s15, s14, s15
 801472a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 801472e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	68fa      	ldr	r2, [r7, #12]
 8014736:	4413      	add	r3, r2
 8014738:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801473c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014744:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8014748:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801474c:	00db      	lsls	r3, r3, #3
 801474e:	68fa      	ldr	r2, [r7, #12]
 8014750:	4413      	add	r3, r2
 8014752:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014756:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 801475a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801475e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8014762:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014766:	00db      	lsls	r3, r3, #3
 8014768:	3304      	adds	r3, #4
 801476a:	68fa      	ldr	r2, [r7, #12]
 801476c:	4413      	add	r3, r2
 801476e:	ed93 7a00 	vldr	s14, [r3]
 8014772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	3304      	adds	r3, #4
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	4413      	add	r3, r2
 801477e:	edd3 7a00 	vldr	s15, [r3]
 8014782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014786:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 801478a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801478e:	00db      	lsls	r3, r3, #3
 8014790:	3304      	adds	r3, #4
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	4413      	add	r3, r2
 8014796:	ed93 7a00 	vldr	s14, [r3]
 801479a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801479e:	00db      	lsls	r3, r3, #3
 80147a0:	3304      	adds	r3, #4
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	4413      	add	r3, r2
 80147a6:	edd3 7a00 	vldr	s15, [r3]
 80147aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147ae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80147b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	3304      	adds	r3, #4
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	4413      	add	r3, r2
 80147be:	ed93 7a00 	vldr	s14, [r3]
 80147c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80147c6:	00db      	lsls	r3, r3, #3
 80147c8:	3304      	adds	r3, #4
 80147ca:	68fa      	ldr	r2, [r7, #12]
 80147cc:	4413      	add	r3, r2
 80147ce:	edd3 7a00 	vldr	s15, [r3]
 80147d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80147da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80147de:	00db      	lsls	r3, r3, #3
 80147e0:	3304      	adds	r3, #4
 80147e2:	68fa      	ldr	r2, [r7, #12]
 80147e4:	4413      	add	r3, r2
 80147e6:	ed93 7a00 	vldr	s14, [r3]
 80147ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80147ee:	00db      	lsls	r3, r3, #3
 80147f0:	3304      	adds	r3, #4
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	4413      	add	r3, r2
 80147f6:	edd3 7a00 	vldr	s15, [r3]
 80147fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147fe:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8014802:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014806:	00db      	lsls	r3, r3, #3
 8014808:	3304      	adds	r3, #4
 801480a:	68fa      	ldr	r2, [r7, #12]
 801480c:	4413      	add	r3, r2
 801480e:	ed93 7a00 	vldr	s14, [r3]
 8014812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014816:	00db      	lsls	r3, r3, #3
 8014818:	3304      	adds	r3, #4
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	4413      	add	r3, r2
 801481e:	edd3 7a00 	vldr	s15, [r3]
 8014822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014826:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 801482a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801482e:	00db      	lsls	r3, r3, #3
 8014830:	3304      	adds	r3, #4
 8014832:	68fa      	ldr	r2, [r7, #12]
 8014834:	4413      	add	r3, r2
 8014836:	ed93 7a00 	vldr	s14, [r3]
 801483a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801483e:	00db      	lsls	r3, r3, #3
 8014840:	3304      	adds	r3, #4
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	4413      	add	r3, r2
 8014846:	edd3 7a00 	vldr	s15, [r3]
 801484a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801484e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8014852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014856:	00db      	lsls	r3, r3, #3
 8014858:	3304      	adds	r3, #4
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	4413      	add	r3, r2
 801485e:	ed93 7a00 	vldr	s14, [r3]
 8014862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	3304      	adds	r3, #4
 801486a:	68fa      	ldr	r2, [r7, #12]
 801486c:	4413      	add	r3, r2
 801486e:	edd3 7a00 	vldr	s15, [r3]
 8014872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014876:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 801487a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	3304      	adds	r3, #4
 8014882:	68fa      	ldr	r2, [r7, #12]
 8014884:	4413      	add	r3, r2
 8014886:	ed93 7a00 	vldr	s14, [r3]
 801488a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	3304      	adds	r3, #4
 8014892:	68fa      	ldr	r2, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	edd3 7a00 	vldr	s15, [r3]
 801489a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801489e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80148a2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80148a6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80148aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148ae:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80148b2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80148b6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80148ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148be:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80148c2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80148c6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80148ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148ce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80148d2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80148d6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80148da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148de:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80148e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80148e6:	00db      	lsls	r3, r3, #3
 80148e8:	3304      	adds	r3, #4
 80148ea:	68fa      	ldr	r2, [r7, #12]
 80148ec:	4413      	add	r3, r2
 80148ee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80148f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80148f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80148fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014902:	00db      	lsls	r3, r3, #3
 8014904:	3304      	adds	r3, #4
 8014906:	68fa      	ldr	r2, [r7, #12]
 8014908:	4413      	add	r3, r2
 801490a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 801490e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014916:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 801491a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	4413      	add	r3, r2
 8014924:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014928:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 801492c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014930:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8014934:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	68fa      	ldr	r2, [r7, #12]
 801493c:	4413      	add	r3, r2
 801493e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014942:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014946:	ee77 7a67 	vsub.f32	s15, s14, s15
 801494a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 801494e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014952:	00db      	lsls	r3, r3, #3
 8014954:	3304      	adds	r3, #4
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	4413      	add	r3, r2
 801495a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801495e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014966:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 801496a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801496e:	00db      	lsls	r3, r3, #3
 8014970:	3304      	adds	r3, #4
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	4413      	add	r3, r2
 8014976:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801497a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 801497e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014982:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8014986:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 801498a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 801498e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014992:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8014996:	ee67 7a27 	vmul.f32	s15, s14, s15
 801499a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 801499e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80149a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80149a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80149ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149b2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80149b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80149ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80149be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80149c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149ca:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80149ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80149d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80149d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80149de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80149e6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80149ea:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80149ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149f2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80149f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80149fa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80149fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a02:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8014a06:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014a0a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a12:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8014a16:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8014a1a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8014a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a22:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8014a26:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014a2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a32:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8014a36:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014a3a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a42:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8014a46:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014a4a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a52:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8014a56:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8014a5a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8014a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8014a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014a6a:	00db      	lsls	r3, r3, #3
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	4413      	add	r3, r2
 8014a70:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014a74:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014a7c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8014a80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014a84:	00db      	lsls	r3, r3, #3
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	4413      	add	r3, r2
 8014a8a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8014a8e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8014a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a96:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8014a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	4413      	add	r3, r2
 8014aa4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014aa8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ab0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8014ab4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014ab8:	00db      	lsls	r3, r3, #3
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	4413      	add	r3, r2
 8014abe:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014ac2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8014ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014aca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8014ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	3304      	adds	r3, #4
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	4413      	add	r3, r2
 8014ada:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014ade:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8014ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ae6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8014aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	3304      	adds	r3, #4
 8014af2:	68fa      	ldr	r2, [r7, #12]
 8014af4:	4413      	add	r3, r2
 8014af6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8014afa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8014afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b02:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8014b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	3304      	adds	r3, #4
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	4413      	add	r3, r2
 8014b12:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014b16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b1e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8014b22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b26:	00db      	lsls	r3, r3, #3
 8014b28:	3304      	adds	r3, #4
 8014b2a:	68fa      	ldr	r2, [r7, #12]
 8014b2c:	4413      	add	r3, r2
 8014b2e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8014b32:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8014b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b3a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8014b3e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014b46:	4413      	add	r3, r2
 8014b48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8014b4c:	897b      	ldrh	r3, [r7, #10]
 8014b4e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014b52:	429a      	cmp	r2, r3
 8014b54:	f4ff ad0a 	bcc.w	801456c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8014b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b5c:	2b07      	cmp	r3, #7
 8014b5e:	f240 84e3 	bls.w	8015528 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8014b62:	2300      	movs	r3, #0
 8014b64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8014b68:	2301      	movs	r3, #1
 8014b6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8014b6e:	893b      	ldrh	r3, [r7, #8]
 8014b70:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014b74:	4413      	add	r3, r2
 8014b76:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8014b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8014b7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8014b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b84:	4413      	add	r3, r2
 8014b86:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8014b88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b8c:	4413      	add	r3, r2
 8014b8e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8014b90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b94:	4413      	add	r3, r2
 8014b96:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8014b98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b9c:	4413      	add	r3, r2
 8014b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8014ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014ba4:	4413      	add	r3, r2
 8014ba6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8014ba8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014baa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014bac:	4413      	add	r3, r2
 8014bae:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8014bb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	4413      	add	r3, r2
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8014bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014bc0:	00db      	lsls	r3, r3, #3
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	4413      	add	r3, r2
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8014bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	687a      	ldr	r2, [r7, #4]
 8014bd0:	4413      	add	r3, r2
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8014bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	687a      	ldr	r2, [r7, #4]
 8014bdc:	4413      	add	r3, r2
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8014be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014be4:	00db      	lsls	r3, r3, #3
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	4413      	add	r3, r2
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8014bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8014bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014bfc:	00db      	lsls	r3, r3, #3
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	4413      	add	r3, r2
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8014c06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014c0a:	00db      	lsls	r3, r3, #3
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	4413      	add	r3, r2
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8014c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	3304      	adds	r3, #4
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	4413      	add	r3, r2
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8014c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c26:	00db      	lsls	r3, r3, #3
 8014c28:	3304      	adds	r3, #4
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8014c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c34:	00db      	lsls	r3, r3, #3
 8014c36:	3304      	adds	r3, #4
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8014c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c42:	00db      	lsls	r3, r3, #3
 8014c44:	3304      	adds	r3, #4
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	4413      	add	r3, r2
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8014c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014c50:	00db      	lsls	r3, r3, #3
 8014c52:	3304      	adds	r3, #4
 8014c54:	687a      	ldr	r2, [r7, #4]
 8014c56:	4413      	add	r3, r2
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8014c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c5e:	00db      	lsls	r3, r3, #3
 8014c60:	3304      	adds	r3, #4
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	4413      	add	r3, r2
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8014c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8014c72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8014c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8014c80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c88:	4413      	add	r3, r2
 8014c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8014c8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c96:	4413      	add	r3, r2
 8014c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8014c9c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8014ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ca4:	4413      	add	r3, r2
 8014ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8014caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cb2:	4413      	add	r3, r2
 8014cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8014cb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cc0:	4413      	add	r3, r2
 8014cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8014cc6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8014cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014cce:	4413      	add	r3, r2
 8014cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8014cd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014cd8:	00db      	lsls	r3, r3, #3
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	4413      	add	r3, r2
 8014cde:	ed93 7a00 	vldr	s14, [r3]
 8014ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ce6:	00db      	lsls	r3, r3, #3
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	4413      	add	r3, r2
 8014cec:	edd3 7a00 	vldr	s15, [r3]
 8014cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cf4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8014cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014cfc:	00db      	lsls	r3, r3, #3
 8014cfe:	68fa      	ldr	r2, [r7, #12]
 8014d00:	4413      	add	r3, r2
 8014d02:	ed93 7a00 	vldr	s14, [r3]
 8014d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014d0a:	00db      	lsls	r3, r3, #3
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	4413      	add	r3, r2
 8014d10:	edd3 7a00 	vldr	s15, [r3]
 8014d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d18:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8014d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014d20:	00db      	lsls	r3, r3, #3
 8014d22:	68fa      	ldr	r2, [r7, #12]
 8014d24:	4413      	add	r3, r2
 8014d26:	ed93 7a00 	vldr	s14, [r3]
 8014d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014d2e:	00db      	lsls	r3, r3, #3
 8014d30:	68fa      	ldr	r2, [r7, #12]
 8014d32:	4413      	add	r3, r2
 8014d34:	edd3 7a00 	vldr	s15, [r3]
 8014d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d3c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8014d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014d44:	00db      	lsls	r3, r3, #3
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	4413      	add	r3, r2
 8014d4a:	ed93 7a00 	vldr	s14, [r3]
 8014d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014d52:	00db      	lsls	r3, r3, #3
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	4413      	add	r3, r2
 8014d58:	edd3 7a00 	vldr	s15, [r3]
 8014d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d60:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8014d64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014d68:	00db      	lsls	r3, r3, #3
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	ed93 7a00 	vldr	s14, [r3]
 8014d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	4413      	add	r3, r2
 8014d7c:	edd3 7a00 	vldr	s15, [r3]
 8014d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d84:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8014d88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	4413      	add	r3, r2
 8014d92:	ed93 7a00 	vldr	s14, [r3]
 8014d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	68fa      	ldr	r2, [r7, #12]
 8014d9e:	4413      	add	r3, r2
 8014da0:	edd3 7a00 	vldr	s15, [r3]
 8014da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014da8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8014dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014db0:	00db      	lsls	r3, r3, #3
 8014db2:	68fa      	ldr	r2, [r7, #12]
 8014db4:	4413      	add	r3, r2
 8014db6:	ed93 7a00 	vldr	s14, [r3]
 8014dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014dbe:	00db      	lsls	r3, r3, #3
 8014dc0:	68fa      	ldr	r2, [r7, #12]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	edd3 7a00 	vldr	s15, [r3]
 8014dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dcc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8014dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014dd4:	00db      	lsls	r3, r3, #3
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	4413      	add	r3, r2
 8014dda:	ed93 7a00 	vldr	s14, [r3]
 8014dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014de2:	00db      	lsls	r3, r3, #3
 8014de4:	68fa      	ldr	r2, [r7, #12]
 8014de6:	4413      	add	r3, r2
 8014de8:	edd3 7a00 	vldr	s15, [r3]
 8014dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014df0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8014df4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014df8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e00:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8014e04:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014e08:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8014e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e10:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8014e14:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014e18:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e20:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8014e24:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8014e28:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8014e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e30:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8014e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	68fa      	ldr	r2, [r7, #12]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014e42:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e4a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8014e4e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8014e52:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8014e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e5a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8014e5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e62:	00db      	lsls	r3, r3, #3
 8014e64:	3304      	adds	r3, #4
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	4413      	add	r3, r2
 8014e6a:	ed93 7a00 	vldr	s14, [r3]
 8014e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	3304      	adds	r3, #4
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	4413      	add	r3, r2
 8014e7a:	edd3 7a00 	vldr	s15, [r3]
 8014e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8014e86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	3304      	adds	r3, #4
 8014e8e:	68fa      	ldr	r2, [r7, #12]
 8014e90:	4413      	add	r3, r2
 8014e92:	ed93 7a00 	vldr	s14, [r3]
 8014e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014e9a:	00db      	lsls	r3, r3, #3
 8014e9c:	3304      	adds	r3, #4
 8014e9e:	68fa      	ldr	r2, [r7, #12]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	edd3 7a00 	vldr	s15, [r3]
 8014ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014eaa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8014eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014eb2:	00db      	lsls	r3, r3, #3
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	4413      	add	r3, r2
 8014eba:	ed93 7a00 	vldr	s14, [r3]
 8014ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	3304      	adds	r3, #4
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	4413      	add	r3, r2
 8014eca:	edd3 7a00 	vldr	s15, [r3]
 8014ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8014ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	3304      	adds	r3, #4
 8014ede:	68fa      	ldr	r2, [r7, #12]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	ed93 7a00 	vldr	s14, [r3]
 8014ee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014eea:	00db      	lsls	r3, r3, #3
 8014eec:	3304      	adds	r3, #4
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	edd3 7a00 	vldr	s15, [r3]
 8014ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014efa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8014efe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014f02:	00db      	lsls	r3, r3, #3
 8014f04:	3304      	adds	r3, #4
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	4413      	add	r3, r2
 8014f0a:	ed93 7a00 	vldr	s14, [r3]
 8014f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	3304      	adds	r3, #4
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	4413      	add	r3, r2
 8014f1a:	edd3 7a00 	vldr	s15, [r3]
 8014f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f22:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8014f26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014f2a:	00db      	lsls	r3, r3, #3
 8014f2c:	3304      	adds	r3, #4
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	4413      	add	r3, r2
 8014f32:	ed93 7a00 	vldr	s14, [r3]
 8014f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f3a:	00db      	lsls	r3, r3, #3
 8014f3c:	3304      	adds	r3, #4
 8014f3e:	68fa      	ldr	r2, [r7, #12]
 8014f40:	4413      	add	r3, r2
 8014f42:	edd3 7a00 	vldr	s15, [r3]
 8014f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f4a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8014f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014f52:	00db      	lsls	r3, r3, #3
 8014f54:	3304      	adds	r3, #4
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	4413      	add	r3, r2
 8014f5a:	ed93 7a00 	vldr	s14, [r3]
 8014f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014f62:	00db      	lsls	r3, r3, #3
 8014f64:	3304      	adds	r3, #4
 8014f66:	68fa      	ldr	r2, [r7, #12]
 8014f68:	4413      	add	r3, r2
 8014f6a:	edd3 7a00 	vldr	s15, [r3]
 8014f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f72:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8014f76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014f7a:	00db      	lsls	r3, r3, #3
 8014f7c:	3304      	adds	r3, #4
 8014f7e:	68fa      	ldr	r2, [r7, #12]
 8014f80:	4413      	add	r3, r2
 8014f82:	ed93 7a00 	vldr	s14, [r3]
 8014f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014f8a:	00db      	lsls	r3, r3, #3
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	4413      	add	r3, r2
 8014f92:	edd3 7a00 	vldr	s15, [r3]
 8014f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f9a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8014f9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014fa2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014faa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8014fae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8014fb2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8014fbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014fc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8014fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fca:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8014fce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8014fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8014fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fda:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8014fde:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014fe2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8014fee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8014ff2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8014ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ffa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8014ffe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015002:	00db      	lsls	r3, r3, #3
 8015004:	3304      	adds	r3, #4
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	4413      	add	r3, r2
 801500a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801500e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015016:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 801501a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801501e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015026:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 801502a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801502e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015036:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 801503a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 801503e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8015042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015046:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 801504a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801504e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015056:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 801505a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801505e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015066:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 801506a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 801506e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015076:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 801507a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801507e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8015082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015086:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 801508a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801508e:	00db      	lsls	r3, r3, #3
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	4413      	add	r3, r2
 8015094:	ed97 7a07 	vldr	s14, [r7, #28]
 8015098:	edd7 7a06 	vldr	s15, [r7, #24]
 801509c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150a0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80150a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80150a8:	00db      	lsls	r3, r3, #3
 80150aa:	3304      	adds	r3, #4
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	4413      	add	r3, r2
 80150b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80150b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80150b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150bc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80150c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80150c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80150c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150cc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80150d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80150d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80150d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150dc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80150e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80150e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80150e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ec:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80150f0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80150f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80150f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150fc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8015100:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8015104:	00db      	lsls	r3, r3, #3
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	4413      	add	r3, r2
 801510a:	ed97 7a07 	vldr	s14, [r7, #28]
 801510e:	edd7 7a06 	vldr	s15, [r7, #24]
 8015112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015116:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 801511a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	3304      	adds	r3, #4
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	4413      	add	r3, r2
 8015126:	ed97 7a05 	vldr	s14, [r7, #20]
 801512a:	edd7 7a04 	vldr	s15, [r7, #16]
 801512e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015132:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8015136:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801513a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015142:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8015146:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801514a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015152:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8015156:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801515a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 801515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015162:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8015166:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801516a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015172:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8015176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	68fa      	ldr	r2, [r7, #12]
 801517e:	4413      	add	r3, r2
 8015180:	ed97 7a07 	vldr	s14, [r7, #28]
 8015184:	edd7 7a06 	vldr	s15, [r7, #24]
 8015188:	ee77 7a27 	vadd.f32	s15, s14, s15
 801518c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8015190:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015194:	00db      	lsls	r3, r3, #3
 8015196:	3304      	adds	r3, #4
 8015198:	68fa      	ldr	r2, [r7, #12]
 801519a:	4413      	add	r3, r2
 801519c:	ed97 7a05 	vldr	s14, [r7, #20]
 80151a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80151a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151a8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80151ac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80151b0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80151b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151b8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80151bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151c0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80151c4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80151c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80151cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151d0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80151d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151d8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80151dc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80151e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80151e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80151e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80151ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80151f4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80151f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80151fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015200:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8015204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015208:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 801520c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015210:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015218:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 801521c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015220:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015228:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 801522c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8015230:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8015234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015238:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 801523c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8015240:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8015244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015248:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 801524c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8015250:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015258:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 801525c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8015260:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015268:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 801526c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8015270:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8015274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015278:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 801527c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8015280:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8015284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015288:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 801528c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8015290:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8015294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015298:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 801529c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80152a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80152a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152a8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80152ac:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80152b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80152b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152b8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80152bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80152c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80152c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152c8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80152cc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80152d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80152d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80152dc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80152e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80152e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152e8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80152ec:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80152f0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80152f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152f8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80152fc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8015300:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8015304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015308:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 801530c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015310:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015318:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 801531c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8015320:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015328:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 801532c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8015330:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015338:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 801533c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8015340:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8015344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015348:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 801534c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015350:	00db      	lsls	r3, r3, #3
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	4413      	add	r3, r2
 8015356:	ed97 7a07 	vldr	s14, [r7, #28]
 801535a:	edd7 7a06 	vldr	s15, [r7, #24]
 801535e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015362:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8015366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801536a:	00db      	lsls	r3, r3, #3
 801536c:	3304      	adds	r3, #4
 801536e:	68fa      	ldr	r2, [r7, #12]
 8015370:	4413      	add	r3, r2
 8015372:	ed97 7a05 	vldr	s14, [r7, #20]
 8015376:	edd7 7a04 	vldr	s15, [r7, #16]
 801537a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801537e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8015382:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8015386:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 801538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801538e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8015392:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015396:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 801539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801539e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80153a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80153a6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80153aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153ae:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80153b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80153b6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80153ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153be:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80153c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	68fa      	ldr	r2, [r7, #12]
 80153ca:	4413      	add	r3, r2
 80153cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80153d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80153d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153d8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80153dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	3304      	adds	r3, #4
 80153e4:	68fa      	ldr	r2, [r7, #12]
 80153e6:	4413      	add	r3, r2
 80153e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80153ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80153f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80153f4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80153f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80153fc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8015400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015404:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8015408:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801540c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8015410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015414:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8015418:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801541c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8015420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015424:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8015428:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801542c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8015430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015434:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8015438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801543c:	00db      	lsls	r3, r3, #3
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	4413      	add	r3, r2
 8015442:	ed97 7a07 	vldr	s14, [r7, #28]
 8015446:	edd7 7a06 	vldr	s15, [r7, #24]
 801544a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801544e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8015452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015456:	00db      	lsls	r3, r3, #3
 8015458:	3304      	adds	r3, #4
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	4413      	add	r3, r2
 801545e:	ed97 7a05 	vldr	s14, [r7, #20]
 8015462:	edd7 7a04 	vldr	s15, [r7, #16]
 8015466:	ee77 7a67 	vsub.f32	s15, s14, s15
 801546a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 801546e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015472:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8015476:	ee67 7a27 	vmul.f32	s15, s14, s15
 801547a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 801547e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015482:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015486:	ee67 7a27 	vmul.f32	s15, s14, s15
 801548a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 801548e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8015492:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8015496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801549a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 801549e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80154a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80154a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154aa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80154ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80154b2:	00db      	lsls	r3, r3, #3
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	4413      	add	r3, r2
 80154b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80154bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80154c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80154c4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80154c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80154cc:	00db      	lsls	r3, r3, #3
 80154ce:	3304      	adds	r3, #4
 80154d0:	68fa      	ldr	r2, [r7, #12]
 80154d2:	4413      	add	r3, r2
 80154d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80154d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80154dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80154e0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80154e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80154e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80154ec:	4413      	add	r3, r2
 80154ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80154f2:	897b      	ldrh	r3, [r7, #10]
 80154f4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80154f8:	429a      	cmp	r2, r3
 80154fa:	f4ff abba 	bcc.w	8014c72 <arm_radix8_butterfly_f32+0x746>

         j++;
 80154fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015502:	3301      	adds	r3, #1
 8015504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8015508:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015510:	429a      	cmp	r2, r3
 8015512:	f4ff ab2c 	bcc.w	8014b6e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8015516:	893b      	ldrh	r3, [r7, #8]
 8015518:	00db      	lsls	r3, r3, #3
 801551a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 801551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015520:	2b07      	cmp	r3, #7
 8015522:	f63f a813 	bhi.w	801454c <arm_radix8_butterfly_f32+0x20>
}
 8015526:	e000      	b.n	801552a <arm_radix8_butterfly_f32+0xffe>
         break;
 8015528:	bf00      	nop
}
 801552a:	bf00      	nop
 801552c:	37f4      	adds	r7, #244	; 0xf4
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop

08015538 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8015538:	b480      	push	{r7}
 801553a:	b095      	sub	sp, #84	; 0x54
 801553c:	af00      	add	r7, sp, #0
 801553e:	60f8      	str	r0, [r7, #12]
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	695b      	ldr	r3, [r3, #20]
 8015548:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	881b      	ldrh	r3, [r3, #0]
 8015556:	3b01      	subs	r3, #1
 8015558:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 801555a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8015560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015562:	685b      	ldr	r3, [r3, #4]
 8015564:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8015566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 801556c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8015572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015574:	1d1a      	adds	r2, r3, #4
 8015576:	64ba      	str	r2, [r7, #72]	; 0x48
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 801557c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801557e:	1d1a      	adds	r2, r3, #4
 8015580:	64ba      	str	r2, [r7, #72]	; 0x48
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8015586:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801558a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801558e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015592:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8015596:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 801559a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801559e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155a2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80155a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80155aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80155ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	1d1a      	adds	r2, r3, #4
 80155b6:	607a      	str	r2, [r7, #4]
 80155b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80155bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155c0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80155c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80155c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80155cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	1d1a      	adds	r2, r3, #4
 80155d4:	607a      	str	r2, [r7, #4]
 80155d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80155da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155de:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80155e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155e4:	00db      	lsls	r3, r3, #3
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	4413      	add	r3, r2
 80155ea:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80155ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155ee:	3308      	adds	r3, #8
 80155f0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80155f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80155f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80155fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8015604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 801560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801560c:	1d1a      	adds	r2, r3, #4
 801560e:	64ba      	str	r2, [r7, #72]	; 0x48
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8015614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015616:	1d1a      	adds	r2, r3, #4
 8015618:	64ba      	str	r2, [r7, #72]	; 0x48
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 801561e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015622:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015626:	ee77 7a67 	vsub.f32	s15, s14, s15
 801562a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 801562e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015632:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015636:	ee77 7a27 	vadd.f32	s15, s14, s15
 801563a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 801563e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015642:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015646:	ee67 7a27 	vmul.f32	s15, s14, s15
 801564a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 801564e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015652:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801565a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 801565e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015662:	edd7 7a08 	vldr	s15, [r7, #32]
 8015666:	ee67 7a27 	vmul.f32	s15, s14, s15
 801566a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 801566e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8015672:	edd7 7a08 	vldr	s15, [r7, #32]
 8015676:	ee67 7a27 	vmul.f32	s15, s14, s15
 801567a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 801567e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8015682:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8015686:	ee37 7a27 	vadd.f32	s14, s14, s15
 801568a:	edd7 7a07 	vldr	s15, [r7, #28]
 801568e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015692:	edd7 7a04 	vldr	s15, [r7, #16]
 8015696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	1d1a      	adds	r2, r3, #4
 801569e:	607a      	str	r2, [r7, #4]
 80156a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156a8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80156ac:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80156b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80156b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80156b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80156bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80156c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80156c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	1d1a      	adds	r2, r3, #4
 80156cc:	607a      	str	r2, [r7, #4]
 80156ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80156d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156d6:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80156da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156dc:	3308      	adds	r3, #8
 80156de:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80156e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156e2:	3b08      	subs	r3, #8
 80156e4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80156e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156e8:	3b01      	subs	r3, #1
 80156ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 80156ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	f73f af7f 	bgt.w	80155f2 <stage_rfft_f32+0xba>
}
 80156f4:	bf00      	nop
 80156f6:	bf00      	nop
 80156f8:	3754      	adds	r7, #84	; 0x54
 80156fa:	46bd      	mov	sp, r7
 80156fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015700:	4770      	bx	lr

08015702 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8015702:	b480      	push	{r7}
 8015704:	b095      	sub	sp, #84	; 0x54
 8015706:	af00      	add	r7, sp, #0
 8015708:	60f8      	str	r0, [r7, #12]
 801570a:	60b9      	str	r1, [r7, #8]
 801570c:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	695b      	ldr	r3, [r3, #20]
 8015712:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	881b      	ldrh	r3, [r3, #0]
 8015720:	3b01      	subs	r3, #1
 8015722:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8015724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 801572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8015730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015732:	3308      	adds	r3, #8
 8015734:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8015736:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 801573a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801573e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	1d1a      	adds	r2, r3, #4
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801574c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015750:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8015754:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015758:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801575c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	1d1a      	adds	r2, r3, #4
 8015764:	607a      	str	r2, [r7, #4]
 8015766:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801576a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801576e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8015772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	68ba      	ldr	r2, [r7, #8]
 8015778:	4413      	add	r3, r2
 801577a:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 801577c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801577e:	3308      	adds	r3, #8
 8015780:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8015782:	e07c      	b.n	801587e <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8015784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 801578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8015790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8015796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 801579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801579e:	1d1a      	adds	r2, r3, #4
 80157a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80157a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157a8:	1d1a      	adds	r2, r3, #4
 80157aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80157b0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80157b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80157b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80157bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80157c0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80157c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80157c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157cc:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80157d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80157d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80157d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157dc:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80157e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80157e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80157e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157ec:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80157f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80157f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80157f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157fc:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8015800:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015804:	edd7 7a08 	vldr	s15, [r7, #32]
 8015808:	ee67 7a27 	vmul.f32	s15, s14, s15
 801580c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8015810:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015814:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015818:	ee37 7a27 	vadd.f32	s14, s14, s15
 801581c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015824:	edd7 7a06 	vldr	s15, [r7, #24]
 8015828:	ee77 7a67 	vsub.f32	s15, s14, s15
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	1d1a      	adds	r2, r3, #4
 8015830:	607a      	str	r2, [r7, #4]
 8015832:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015836:	ee67 7a87 	vmul.f32	s15, s15, s14
 801583a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 801583e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015842:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015846:	ee37 7a67 	vsub.f32	s14, s14, s15
 801584a:	edd7 7a05 	vldr	s15, [r7, #20]
 801584e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015852:	edd7 7a04 	vldr	s15, [r7, #16]
 8015856:	ee77 7a67 	vsub.f32	s15, s14, s15
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	1d1a      	adds	r2, r3, #4
 801585e:	607a      	str	r2, [r7, #4]
 8015860:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015868:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 801586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801586e:	3308      	adds	r3, #8
 8015870:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8015872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015874:	3b08      	subs	r3, #8
 8015876:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8015878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801587a:	3b01      	subs	r3, #1
 801587c:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 801587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015880:	2b00      	cmp	r3, #0
 8015882:	f73f af7f 	bgt.w	8015784 <merge_rfft_f32+0x82>
   }

}
 8015886:	bf00      	nop
 8015888:	bf00      	nop
 801588a:	3754      	adds	r7, #84	; 0x54
 801588c:	46bd      	mov	sp, r7
 801588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015892:	4770      	bx	lr

08015894 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b086      	sub	sp, #24
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	607a      	str	r2, [r7, #4]
 80158a0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80158a6:	78fb      	ldrb	r3, [r7, #3]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00b      	beq.n	80158c4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	68b9      	ldr	r1, [r7, #8]
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f7ff ff26 	bl	8015702 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80158b6:	78fa      	ldrb	r2, [r7, #3]
 80158b8:	2301      	movs	r3, #1
 80158ba:	6879      	ldr	r1, [r7, #4]
 80158bc:	6978      	ldr	r0, [r7, #20]
 80158be:	f7fe fd7b 	bl	80143b8 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80158c2:	e00a      	b.n	80158da <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80158c4:	78fa      	ldrb	r2, [r7, #3]
 80158c6:	2301      	movs	r3, #1
 80158c8:	68b9      	ldr	r1, [r7, #8]
 80158ca:	6978      	ldr	r0, [r7, #20]
 80158cc:	f7fe fd74 	bl	80143b8 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	68b9      	ldr	r1, [r7, #8]
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f7ff fe2f 	bl	8015538 <stage_rfft_f32>
}
 80158da:	bf00      	nop
 80158dc:	3718      	adds	r7, #24
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 80158e2:	b480      	push	{r7}
 80158e4:	b089      	sub	sp, #36	; 0x24
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	607a      	str	r2, [r7, #4]
 80158ee:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80158f6:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	00db      	lsls	r3, r3, #3
 80158fc:	68fa      	ldr	r2, [r7, #12]
 80158fe:	4413      	add	r3, r2
 8015900:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	ed93 7a00 	vldr	s14, [r3]
 8015908:	69bb      	ldr	r3, [r7, #24]
 801590a:	edd3 7a00 	vldr	s15, [r3]
 801590e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	edd3 6a01 	vldr	s13, [r3, #4]
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	edd3 7a01 	vldr	s15, [r3, #4]
 801591e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015926:	edc7 7a04 	vstr	s15, [r7, #16]
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	ed93 7a00 	vldr	s14, [r3]
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	edd3 7a01 	vldr	s15, [r3, #4]
 8015936:	ee27 7a27 	vmul.f32	s14, s14, s15
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	edd3 7a00 	vldr	s15, [r3]
 8015946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801594a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801594e:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	69ba      	ldr	r2, [r7, #24]
 8015958:	4413      	add	r3, r2
 801595a:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	ed93 7a00 	vldr	s14, [r3]
 8015962:	edd7 7a04 	vldr	s15, [r7, #16]
 8015966:	ee77 7a67 	vsub.f32	s15, s14, s15
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	edc3 7a00 	vstr	s15, [r3]
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	ed93 7a01 	vldr	s14, [r3, #4]
 8015976:	edd7 7a05 	vldr	s15, [r7, #20]
 801597a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	ed93 7a00 	vldr	s14, [r3]
 801598a:	edd7 7a04 	vldr	s15, [r7, #16]
 801598e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	edc3 7a00 	vstr	s15, [r3]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	ed93 7a01 	vldr	s14, [r3, #4]
 801599e:	edd7 7a05 	vldr	s15, [r7, #20]
 80159a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	3308      	adds	r3, #8
 80159b0:	61fb      	str	r3, [r7, #28]
        ++Fout;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	3308      	adds	r3, #8
 80159b6:	60fb      	str	r3, [r7, #12]
    }while (--m);
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	3b01      	subs	r3, #1
 80159bc:	603b      	str	r3, [r7, #0]
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	bf14      	ite	ne
 80159c4:	2301      	movne	r3, #1
 80159c6:	2300      	moveq	r3, #0
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d199      	bne.n	8015902 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 80159ce:	bf00      	nop
 80159d0:	bf00      	nop
 80159d2:	3724      	adds	r7, #36	; 0x24
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr

080159dc <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 80159dc:	b480      	push	{r7}
 80159de:	b097      	sub	sp, #92	; 0x5c
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 80159f4:	683a      	ldr	r2, [r7, #0]
 80159f6:	4613      	mov	r3, r2
 80159f8:	005b      	lsls	r3, r3, #1
 80159fa:	4413      	add	r3, r2
 80159fc:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015a04:	657b      	str	r3, [r7, #84]	; 0x54
 8015a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a08:	653b      	str	r3, [r7, #80]	; 0x50
 8015a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a0c:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	00db      	lsls	r3, r3, #3
 8015a12:	68fa      	ldr	r2, [r7, #12]
 8015a14:	4413      	add	r3, r2
 8015a16:	ed93 7a00 	vldr	s14, [r3]
 8015a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a1c:	edd3 7a00 	vldr	s15, [r3]
 8015a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	68fa      	ldr	r2, [r7, #12]
 8015a2a:	4413      	add	r3, r2
 8015a2c:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a3e:	edc7 7a04 	vstr	s15, [r7, #16]
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	00db      	lsls	r3, r3, #3
 8015a46:	68fa      	ldr	r2, [r7, #12]
 8015a48:	4413      	add	r3, r2
 8015a4a:	ed93 7a00 	vldr	s14, [r3]
 8015a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	00db      	lsls	r3, r3, #3
 8015a5c:	68fa      	ldr	r2, [r7, #12]
 8015a5e:	4413      	add	r3, r2
 8015a60:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a66:	edd3 7a00 	vldr	s15, [r3]
 8015a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a72:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 8015a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a78:	00db      	lsls	r3, r3, #3
 8015a7a:	68fa      	ldr	r2, [r7, #12]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	ed93 7a00 	vldr	s14, [r3]
 8015a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a84:	edd3 7a00 	vldr	s15, [r3]
 8015a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	68fa      	ldr	r2, [r7, #12]
 8015a92:	4413      	add	r3, r2
 8015a94:	edd3 6a01 	vldr	s13, [r3, #4]
 8015a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8015a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015aa6:	edc7 7a06 	vstr	s15, [r7, #24]
 8015aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015aac:	00db      	lsls	r3, r3, #3
 8015aae:	68fa      	ldr	r2, [r7, #12]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	ed93 7a00 	vldr	s14, [r3]
 8015ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ab8:	edd3 7a01 	vldr	s15, [r3, #4]
 8015abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	68fa      	ldr	r2, [r7, #12]
 8015ac6:	4413      	add	r3, r2
 8015ac8:	edd3 6a01 	vldr	s13, [r3, #4]
 8015acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ace:	edd3 7a00 	vldr	s15, [r3]
 8015ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ada:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 8015ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ae0:	00db      	lsls	r3, r3, #3
 8015ae2:	68fa      	ldr	r2, [r7, #12]
 8015ae4:	4413      	add	r3, r2
 8015ae6:	ed93 7a00 	vldr	s14, [r3]
 8015aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015aec:	edd3 7a00 	vldr	s15, [r3]
 8015af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015af6:	00db      	lsls	r3, r3, #3
 8015af8:	68fa      	ldr	r2, [r7, #12]
 8015afa:	4413      	add	r3, r2
 8015afc:	edd3 6a01 	vldr	s13, [r3, #4]
 8015b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b02:	edd3 7a01 	vldr	s15, [r3, #4]
 8015b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b0e:	edc7 7a08 	vstr	s15, [r7, #32]
 8015b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b14:	00db      	lsls	r3, r3, #3
 8015b16:	68fa      	ldr	r2, [r7, #12]
 8015b18:	4413      	add	r3, r2
 8015b1a:	ed93 7a00 	vldr	s14, [r3]
 8015b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b20:	edd3 7a01 	vldr	s15, [r3, #4]
 8015b24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b2a:	00db      	lsls	r3, r3, #3
 8015b2c:	68fa      	ldr	r2, [r7, #12]
 8015b2e:	4413      	add	r3, r2
 8015b30:	edd3 6a01 	vldr	s13, [r3, #4]
 8015b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b36:	edd3 7a00 	vldr	s15, [r3]
 8015b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b42:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	ed93 7a00 	vldr	s14, [r3]
 8015b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b54:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015b66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	ed93 7a00 	vldr	s14, [r3]
 8015b70:	edd7 7a06 	vldr	s15, [r7, #24]
 8015b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	edc3 7a00 	vstr	s15, [r3]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	ed93 7a01 	vldr	s14, [r3, #4]
 8015b84:	edd7 7a07 	vldr	s15, [r7, #28]
 8015b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 8015b92:	ed97 7a04 	vldr	s14, [r7, #16]
 8015b96:	edd7 7a08 	vldr	s15, [r7, #32]
 8015b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015ba2:	ed97 7a05 	vldr	s14, [r7, #20]
 8015ba6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 8015bb2:	ed97 7a04 	vldr	s14, [r7, #16]
 8015bb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8015bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8015bc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8015bc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8015bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015bce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	ed93 7a00 	vldr	s14, [r3]
 8015bd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bde:	00db      	lsls	r3, r3, #3
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	4413      	add	r3, r2
 8015be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015be8:	edc3 7a00 	vstr	s15, [r3]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	ed93 7a01 	vldr	s14, [r3, #4]
 8015bf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	68fa      	ldr	r2, [r7, #12]
 8015bfc:	4413      	add	r3, r2
 8015bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c02:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	00db      	lsls	r3, r3, #3
 8015c0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c0c:	4413      	add	r3, r2
 8015c0e:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	011b      	lsls	r3, r3, #4
 8015c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c16:	4413      	add	r3, r2
 8015c18:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	4413      	add	r3, r2
 8015c22:	00db      	lsls	r3, r3, #3
 8015c24:	461a      	mov	r2, r3
 8015c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c28:	4413      	add	r3, r2
 8015c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	ed93 7a00 	vldr	s14, [r3]
 8015c32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	edc3 7a00 	vstr	s15, [r3]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8015c46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d030      	beq.n	8015cbe <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 8015c5c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015c60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	00db      	lsls	r3, r3, #3
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	4413      	add	r3, r2
 8015c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c70:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 8015c74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015c78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	00db      	lsls	r3, r3, #3
 8015c80:	68fa      	ldr	r2, [r7, #12]
 8015c82:	4413      	add	r3, r2
 8015c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c88:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 8015c8c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015c90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	68fa      	ldr	r2, [r7, #12]
 8015c9a:	4413      	add	r3, r2
 8015c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ca0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 8015ca4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015ca8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	68fa      	ldr	r2, [r7, #12]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cb8:	edc3 7a01 	vstr	s15, [r3, #4]
 8015cbc:	e02f      	b.n	8015d1e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 8015cbe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015cc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	00db      	lsls	r3, r3, #3
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	4413      	add	r3, r2
 8015cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cd2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 8015cd6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015cda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	00db      	lsls	r3, r3, #3
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cea:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 8015cee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8015cf2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	68fa      	ldr	r2, [r7, #12]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d02:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 8015d06:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8015d0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d10:	00db      	lsls	r3, r3, #3
 8015d12:	68fa      	ldr	r2, [r7, #12]
 8015d14:	4413      	add	r3, r2
 8015d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d1a:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	3308      	adds	r3, #8
 8015d22:	60fb      	str	r3, [r7, #12]
    }while(--k);
 8015d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d26:	3b01      	subs	r3, #1
 8015d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	bf14      	ite	ne
 8015d30:	2301      	movne	r3, #1
 8015d32:	2300      	moveq	r3, #0
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	f47f ae69 	bne.w	8015a0e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 8015d3c:	bf00      	nop
 8015d3e:	bf00      	nop
 8015d40:	375c      	adds	r7, #92	; 0x5c
 8015d42:	46bd      	mov	sp, r7
 8015d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d48:	4770      	bx	lr
	...

08015d4c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 8015d4c:	b5b0      	push	{r4, r5, r7, lr}
 8015d4e:	b094      	sub	sp, #80	; 0x50
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	60f8      	str	r0, [r7, #12]
 8015d54:	60b9      	str	r1, [r7, #8]
 8015d56:	607a      	str	r2, [r7, #4]
 8015d58:	603b      	str	r3, [r7, #0]
     size_t k=m;
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	005b      	lsls	r3, r3, #1
 8015d62:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	683a      	ldr	r2, [r7, #0]
 8015d68:	fb02 f303 	mul.w	r3, r2, r3
 8015d6c:	6879      	ldr	r1, [r7, #4]
 8015d6e:	3321      	adds	r3, #33	; 0x21
 8015d70:	f107 0210 	add.w	r2, r7, #16
 8015d74:	00db      	lsls	r3, r3, #3
 8015d76:	440b      	add	r3, r1
 8015d78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d7c:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015d86:	647b      	str	r3, [r7, #68]	; 0x44
 8015d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d8a:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	00db      	lsls	r3, r3, #3
 8015d90:	68fa      	ldr	r2, [r7, #12]
 8015d92:	4413      	add	r3, r2
 8015d94:	ed93 7a00 	vldr	s14, [r3]
 8015d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d9a:	edd3 7a00 	vldr	s15, [r3]
 8015d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	00db      	lsls	r3, r3, #3
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	4413      	add	r3, r2
 8015daa:	edd3 6a01 	vldr	s13, [r3, #4]
 8015dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8015db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015dbc:	edc7 7a08 	vstr	s15, [r7, #32]
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	00db      	lsls	r3, r3, #3
 8015dc4:	68fa      	ldr	r2, [r7, #12]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	ed93 7a00 	vldr	s14, [r3]
 8015dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dce:	edd3 7a01 	vldr	s15, [r3, #4]
 8015dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	00db      	lsls	r3, r3, #3
 8015dda:	68fa      	ldr	r2, [r7, #12]
 8015ddc:	4413      	add	r3, r2
 8015dde:	edd3 6a01 	vldr	s13, [r3, #4]
 8015de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015de4:	edd3 7a00 	vldr	s15, [r3]
 8015de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015df0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 8015df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	4413      	add	r3, r2
 8015dfc:	ed93 7a00 	vldr	s14, [r3]
 8015e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e02:	edd3 7a00 	vldr	s15, [r3]
 8015e06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e0c:	00db      	lsls	r3, r3, #3
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	4413      	add	r3, r2
 8015e12:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e18:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8015e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	68fa      	ldr	r2, [r7, #12]
 8015e2e:	4413      	add	r3, r2
 8015e30:	ed93 7a00 	vldr	s14, [r3]
 8015e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e36:	edd3 7a01 	vldr	s15, [r3, #4]
 8015e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e40:	00db      	lsls	r3, r3, #3
 8015e42:	68fa      	ldr	r2, [r7, #12]
 8015e44:	4413      	add	r3, r2
 8015e46:	edd3 6a01 	vldr	s13, [r3, #4]
 8015e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e4c:	edd3 7a00 	vldr	s15, [r3]
 8015e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 8015e5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015e60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8015e6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e70:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 8015e7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8015e80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e88:	edc7 7a06 	vstr	s15, [r7, #24]
 8015e8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015e90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015e98:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ea2:	4413      	add	r3, r2
 8015ea4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	011b      	lsls	r3, r3, #4
 8015eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015eac:	4413      	add	r3, r2
 8015eae:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7ea fb77 	bl	80005a8 <__aeabi_f2d>
 8015eba:	4604      	mov	r4, r0
 8015ebc:	460d      	mov	r5, r1
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f7ea fb71 	bl	80005a8 <__aeabi_f2d>
 8015ec6:	f04f 0200 	mov.w	r2, #0
 8015eca:	4b57      	ldr	r3, [pc, #348]	; (8016028 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8015ecc:	f7ea fbc4 	bl	8000658 <__aeabi_dmul>
 8015ed0:	4602      	mov	r2, r0
 8015ed2:	460b      	mov	r3, r1
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	4629      	mov	r1, r5
 8015ed8:	f7ea fa06 	bl	80002e8 <__aeabi_dsub>
 8015edc:	4602      	mov	r2, r0
 8015ede:	460b      	mov	r3, r1
 8015ee0:	4610      	mov	r0, r2
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	00db      	lsls	r3, r3, #3
 8015ee8:	68fa      	ldr	r2, [r7, #12]
 8015eea:	18d4      	adds	r4, r2, r3
 8015eec:	f7ea feac 	bl	8000c48 <__aeabi_d2f>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7ea fb55 	bl	80005a8 <__aeabi_f2d>
 8015efe:	4604      	mov	r4, r0
 8015f00:	460d      	mov	r5, r1
 8015f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ea fb4f 	bl	80005a8 <__aeabi_f2d>
 8015f0a:	f04f 0200 	mov.w	r2, #0
 8015f0e:	4b46      	ldr	r3, [pc, #280]	; (8016028 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 8015f10:	f7ea fba2 	bl	8000658 <__aeabi_dmul>
 8015f14:	4602      	mov	r2, r0
 8015f16:	460b      	mov	r3, r1
 8015f18:	4620      	mov	r0, r4
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	f7ea f9e4 	bl	80002e8 <__aeabi_dsub>
 8015f20:	4602      	mov	r2, r0
 8015f22:	460b      	mov	r3, r1
 8015f24:	4610      	mov	r0, r2
 8015f26:	4619      	mov	r1, r3
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	00db      	lsls	r3, r3, #3
 8015f2c:	68fa      	ldr	r2, [r7, #12]
 8015f2e:	18d4      	adds	r4, r2, r3
 8015f30:	f7ea fe8a 	bl	8000c48 <__aeabi_d2f>
 8015f34:	4603      	mov	r3, r0
 8015f36:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 8015f38:	ed97 7a06 	vldr	s14, [r7, #24]
 8015f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f44:	edc7 7a06 	vstr	s15, [r7, #24]
 8015f48:	ed97 7a07 	vldr	s14, [r7, #28]
 8015f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8015f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f54:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	ed93 7a00 	vldr	s14, [r3]
 8015f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8015f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	edc3 7a00 	vstr	s15, [r3]
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8015f72:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8015f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	00db      	lsls	r3, r3, #3
 8015f84:	68fa      	ldr	r2, [r7, #12]
 8015f86:	4413      	add	r3, r2
 8015f88:	ed93 7a00 	vldr	s14, [r3]
 8015f8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8015f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f92:	00db      	lsls	r3, r3, #3
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	4413      	add	r3, r2
 8015f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f9c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	00db      	lsls	r3, r3, #3
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	4413      	add	r3, r2
 8015fa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8015fac:	edd7 7a06 	vldr	s15, [r7, #24]
 8015fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	4413      	add	r3, r2
 8015fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fbc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	00db      	lsls	r3, r3, #3
 8015fc4:	68fa      	ldr	r2, [r7, #12]
 8015fc6:	4413      	add	r3, r2
 8015fc8:	ed93 7a00 	vldr	s14, [r3]
 8015fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	68fa      	ldr	r2, [r7, #12]
 8015fd6:	4413      	add	r3, r2
 8015fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015fdc:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	ed93 7a01 	vldr	s14, [r3, #4]
 8015fec:	edd7 7a06 	vldr	s15, [r7, #24]
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	00db      	lsls	r3, r3, #3
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015ffc:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	3308      	adds	r3, #8
 8016004:	60fb      	str	r3, [r7, #12]
     }while(--k);
 8016006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016008:	3b01      	subs	r3, #1
 801600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801600c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801600e:	2b00      	cmp	r3, #0
 8016010:	bf14      	ite	ne
 8016012:	2301      	movne	r3, #1
 8016014:	2300      	moveq	r3, #0
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2b00      	cmp	r3, #0
 801601a:	f47f aeb7 	bne.w	8015d8c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 801601e:	bf00      	nop
 8016020:	bf00      	nop
 8016022:	3750      	adds	r7, #80	; 0x50
 8016024:	46bd      	mov	sp, r7
 8016026:	bdb0      	pop	{r4, r5, r7, pc}
 8016028:	3fe00000 	.word	0x3fe00000

0801602c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 801602c:	b480      	push	{r7}
 801602e:	b0ab      	sub	sp, #172	; 0xac
 8016030:	af00      	add	r7, sp, #0
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	68ba      	ldr	r2, [r7, #8]
 8016048:	fb02 f303 	mul.w	r3, r2, r3
 801604c:	00db      	lsls	r3, r3, #3
 801604e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016052:	441a      	add	r2, r3
 8016054:	f107 0318 	add.w	r3, r7, #24
 8016058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801605c:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	68ba      	ldr	r2, [r7, #8]
 8016064:	fb02 f303 	mul.w	r3, r2, r3
 8016068:	011b      	lsls	r3, r3, #4
 801606a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801606e:	441a      	add	r2, r3
 8016070:	f107 0310 	add.w	r3, r7, #16
 8016074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016078:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	00db      	lsls	r3, r3, #3
 8016086:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801608a:	4413      	add	r3, r2
 801608c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	011b      	lsls	r3, r3, #4
 8016094:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016098:	4413      	add	r3, r2
 801609a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 801609e:	683a      	ldr	r2, [r7, #0]
 80160a0:	4613      	mov	r3, r2
 80160a2:	005b      	lsls	r3, r3, #1
 80160a4:	4413      	add	r3, r2
 80160a6:	00db      	lsls	r3, r3, #3
 80160a8:	461a      	mov	r2, r3
 80160aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80160ae:	4413      	add	r3, r2
 80160b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 80160b4:	683b      	ldr	r3, [r7, #0]
 80160b6:	015b      	lsls	r3, r3, #5
 80160b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80160bc:	4413      	add	r3, r2
 80160be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80160c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 80160cc:	2300      	movs	r3, #0
 80160ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80160d2:	e2a7      	b.n	8016624 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x5f8>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 80160d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80160d8:	f107 0320 	add.w	r3, r7, #32
 80160dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160e0:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 80160e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80160e8:	ed93 7a00 	vldr	s14, [r3]
 80160ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	fb02 f303 	mul.w	r3, r2, r3
 80160f6:	00db      	lsls	r3, r3, #3
 80160f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80160fc:	4413      	add	r3, r2
 80160fe:	edd3 7a00 	vldr	s15, [r3]
 8016102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801610a:	edd3 6a01 	vldr	s13, [r3, #4]
 801610e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	fb02 f303 	mul.w	r3, r2, r3
 8016118:	00db      	lsls	r3, r3, #3
 801611a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801611e:	4413      	add	r3, r2
 8016120:	edd3 7a01 	vldr	s15, [r3, #4]
 8016124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016128:	ee77 7a67 	vsub.f32	s15, s14, s15
 801612c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016130:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016134:	ed93 7a00 	vldr	s14, [r3]
 8016138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801613c:	68ba      	ldr	r2, [r7, #8]
 801613e:	fb02 f303 	mul.w	r3, r2, r3
 8016142:	00db      	lsls	r3, r3, #3
 8016144:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016148:	4413      	add	r3, r2
 801614a:	edd3 7a01 	vldr	s15, [r3, #4]
 801614e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016156:	edd3 6a01 	vldr	s13, [r3, #4]
 801615a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801615e:	68ba      	ldr	r2, [r7, #8]
 8016160:	fb02 f303 	mul.w	r3, r2, r3
 8016164:	00db      	lsls	r3, r3, #3
 8016166:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801616a:	4413      	add	r3, r2
 801616c:	edd3 7a00 	vldr	s15, [r3]
 8016170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016178:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 801617c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016180:	ed93 7a00 	vldr	s14, [r3]
 8016184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016188:	68ba      	ldr	r2, [r7, #8]
 801618a:	fb02 f303 	mul.w	r3, r2, r3
 801618e:	011b      	lsls	r3, r3, #4
 8016190:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016194:	4413      	add	r3, r2
 8016196:	edd3 7a00 	vldr	s15, [r3]
 801619a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801619e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80161a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80161aa:	68ba      	ldr	r2, [r7, #8]
 80161ac:	fb02 f303 	mul.w	r3, r2, r3
 80161b0:	011b      	lsls	r3, r3, #4
 80161b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80161b6:	4413      	add	r3, r2
 80161b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80161bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80161c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80161c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161cc:	ed93 7a00 	vldr	s14, [r3]
 80161d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80161d4:	68ba      	ldr	r2, [r7, #8]
 80161d6:	fb02 f303 	mul.w	r3, r2, r3
 80161da:	011b      	lsls	r3, r3, #4
 80161dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80161e0:	4413      	add	r3, r2
 80161e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80161e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80161ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80161f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80161f6:	68ba      	ldr	r2, [r7, #8]
 80161f8:	fb02 f303 	mul.w	r3, r2, r3
 80161fc:	011b      	lsls	r3, r3, #4
 80161fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016202:	4413      	add	r3, r2
 8016204:	edd3 7a00 	vldr	s15, [r3]
 8016208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801620c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016210:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 8016214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016218:	ed93 7a00 	vldr	s14, [r3]
 801621c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016220:	68ba      	ldr	r2, [r7, #8]
 8016222:	fb03 f202 	mul.w	r2, r3, r2
 8016226:	4613      	mov	r3, r2
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	4413      	add	r3, r2
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	461a      	mov	r2, r3
 8016230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016234:	4413      	add	r3, r2
 8016236:	edd3 7a00 	vldr	s15, [r3]
 801623a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801623e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016242:	edd3 6a01 	vldr	s13, [r3, #4]
 8016246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	fb03 f202 	mul.w	r2, r3, r2
 8016250:	4613      	mov	r3, r2
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	4413      	add	r3, r2
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	461a      	mov	r2, r3
 801625a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801625e:	4413      	add	r3, r2
 8016260:	edd3 7a01 	vldr	s15, [r3, #4]
 8016264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016268:	ee77 7a67 	vsub.f32	s15, s14, s15
 801626c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8016270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016274:	ed93 7a00 	vldr	s14, [r3]
 8016278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801627c:	68ba      	ldr	r2, [r7, #8]
 801627e:	fb03 f202 	mul.w	r2, r3, r2
 8016282:	4613      	mov	r3, r2
 8016284:	005b      	lsls	r3, r3, #1
 8016286:	4413      	add	r3, r2
 8016288:	00db      	lsls	r3, r3, #3
 801628a:	461a      	mov	r2, r3
 801628c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016290:	4413      	add	r3, r2
 8016292:	edd3 7a01 	vldr	s15, [r3, #4]
 8016296:	ee27 7a27 	vmul.f32	s14, s14, s15
 801629a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801629e:	edd3 6a01 	vldr	s13, [r3, #4]
 80162a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162a6:	68ba      	ldr	r2, [r7, #8]
 80162a8:	fb03 f202 	mul.w	r2, r3, r2
 80162ac:	4613      	mov	r3, r2
 80162ae:	005b      	lsls	r3, r3, #1
 80162b0:	4413      	add	r3, r2
 80162b2:	00db      	lsls	r3, r3, #3
 80162b4:	461a      	mov	r2, r3
 80162b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80162ba:	4413      	add	r3, r2
 80162bc:	edd3 7a00 	vldr	s15, [r3]
 80162c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80162c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80162c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 80162cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80162d0:	ed93 7a00 	vldr	s14, [r3]
 80162d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162d8:	68ba      	ldr	r2, [r7, #8]
 80162da:	fb02 f303 	mul.w	r3, r2, r3
 80162de:	015b      	lsls	r3, r3, #5
 80162e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80162e4:	4413      	add	r3, r2
 80162e6:	edd3 7a00 	vldr	s15, [r3]
 80162ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80162f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80162f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80162fa:	68ba      	ldr	r2, [r7, #8]
 80162fc:	fb02 f303 	mul.w	r3, r2, r3
 8016300:	015b      	lsls	r3, r3, #5
 8016302:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016306:	4413      	add	r3, r2
 8016308:	edd3 7a01 	vldr	s15, [r3, #4]
 801630c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016314:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8016318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801631c:	ed93 7a00 	vldr	s14, [r3]
 8016320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016324:	68ba      	ldr	r2, [r7, #8]
 8016326:	fb02 f303 	mul.w	r3, r2, r3
 801632a:	015b      	lsls	r3, r3, #5
 801632c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016330:	4413      	add	r3, r2
 8016332:	edd3 7a01 	vldr	s15, [r3, #4]
 8016336:	ee27 7a27 	vmul.f32	s14, s14, s15
 801633a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801633e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	fb02 f303 	mul.w	r3, r2, r3
 801634c:	015b      	lsls	r3, r3, #5
 801634e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016352:	4413      	add	r3, r2
 8016354:	edd3 7a00 	vldr	s15, [r3]
 8016358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801635c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016360:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 8016364:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016368:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801636c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016370:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8016374:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016378:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801637c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016380:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 8016384:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8016388:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801638c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016390:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 8016394:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8016398:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801639c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163a0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 80163a4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80163a8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80163ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 80163b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80163b8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80163bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163c0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 80163c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80163c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80163cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163d0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 80163d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80163d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80163dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80163e0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 80163e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80163e8:	ed93 7a00 	vldr	s14, [r3]
 80163ec:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80163f0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80163f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80163f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80163fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016400:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 8016404:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016408:	ed93 7a01 	vldr	s14, [r3, #4]
 801640c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8016410:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8016414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016418:	ee77 7a27 	vadd.f32	s15, s14, s15
 801641c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016420:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 8016424:	ed97 7a08 	vldr	s14, [r7, #32]
 8016428:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801642c:	edd7 7a06 	vldr	s15, [r7, #24]
 8016430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016438:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801643c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016448:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 801644c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016450:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8016454:	edd7 7a06 	vldr	s15, [r7, #24]
 8016458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801645c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016460:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8016464:	edd7 7a04 	vldr	s15, [r7, #16]
 8016468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801646c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016470:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 8016474:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8016478:	edd7 7a07 	vldr	s15, [r7, #28]
 801647c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016480:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8016484:	edd7 7a05 	vldr	s15, [r7, #20]
 8016488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801648c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016490:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 8016494:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8016498:	edd7 7a07 	vldr	s15, [r7, #28]
 801649c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164a0:	eeb1 7a67 	vneg.f32	s14, s15
 80164a4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80164a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80164ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80164b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 80164b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80164bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80164c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80164c8:	edc3 7a00 	vstr	s15, [r3]
 80164cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80164d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80164d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80164d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80164dc:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 80164e0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80164e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80164e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80164ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80164f0:	edc3 7a00 	vstr	s15, [r3]
 80164f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80164f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80164fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016500:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016504:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 8016508:	ed97 7a08 	vldr	s14, [r7, #32]
 801650c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8016510:	edd7 7a04 	vldr	s15, [r7, #16]
 8016514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016518:	ee37 7a27 	vadd.f32	s14, s14, s15
 801651c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8016520:	edd7 7a06 	vldr	s15, [r7, #24]
 8016524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801652c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 8016530:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8016534:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8016538:	edd7 7a04 	vldr	s15, [r7, #16]
 801653c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016544:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8016548:	edd7 7a06 	vldr	s15, [r7, #24]
 801654c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016554:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 8016558:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801655c:	edd7 7a07 	vldr	s15, [r7, #28]
 8016560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016564:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8016568:	edd7 7a05 	vldr	s15, [r7, #20]
 801656c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016574:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 8016578:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801657c:	edd7 7a05 	vldr	s15, [r7, #20]
 8016580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016584:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8016588:	edd7 7a07 	vldr	s15, [r7, #28]
 801658c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016594:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 8016598:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 801659c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80165a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80165a8:	edc3 7a00 	vstr	s15, [r3]
 80165ac:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80165b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80165b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80165bc:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 80165c0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80165c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80165c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80165d0:	edc3 7a00 	vstr	s15, [r3]
 80165d4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80165d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80165dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80165e4:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 80165e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80165ec:	3308      	adds	r3, #8
 80165ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80165f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80165f6:	3308      	adds	r3, #8
 80165f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80165fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016600:	3308      	adds	r3, #8
 8016602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016606:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801660a:	3308      	adds	r3, #8
 801660c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016610:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016614:	3308      	adds	r3, #8
 8016616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 801661a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801661e:	3301      	adds	r3, #1
 8016620:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016624:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	429a      	cmp	r2, r3
 801662c:	f6ff ad52 	blt.w	80160d4 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa8>
    }
}
 8016630:	bf00      	nop
 8016632:	bf00      	nop
 8016634:	37ac      	adds	r7, #172	; 0xac
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b08e      	sub	sp, #56	; 0x38
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	607a      	str	r2, [r7, #4]
 801664a:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016652:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 801665a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801665c:	00db      	lsls	r3, r3, #3
 801665e:	4618      	mov	r0, r3
 8016660:	f000 fe92 	bl	8017388 <_Z9ei_mallocj>
 8016664:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 8016666:	2300      	movs	r3, #0
 8016668:	637b      	str	r3, [r7, #52]	; 0x34
 801666a:	e0b4      	b.n	80167d6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x198>
        k=u;
 801666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801666e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8016670:	2300      	movs	r3, #0
 8016672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016674:	e013      	b.n	801669e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x60>
            scratch[q1] = Fout[ k  ];
 8016676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	68fa      	ldr	r2, [r7, #12]
 801667c:	18d1      	adds	r1, r2, r3
 801667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016680:	00db      	lsls	r3, r3, #3
 8016682:	69ba      	ldr	r2, [r7, #24]
 8016684:	4413      	add	r3, r2
 8016686:	460a      	mov	r2, r1
 8016688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801668c:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 8016690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	4413      	add	r3, r2
 8016696:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 8016698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669a:	3301      	adds	r3, #1
 801669c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166a2:	429a      	cmp	r2, r3
 80166a4:	dbe7      	blt.n	8016676 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x38>
        }

        k=u;
 80166a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166a8:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80166aa:	2300      	movs	r3, #0
 80166ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166ae:	e08a      	b.n	80167c6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x188>
            int twidx=0;
 80166b0:	2300      	movs	r3, #0
 80166b2:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 80166b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b6:	00db      	lsls	r3, r3, #3
 80166b8:	68fa      	ldr	r2, [r7, #12]
 80166ba:	4413      	add	r3, r2
 80166bc:	69ba      	ldr	r2, [r7, #24]
 80166be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166c2:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 80166c6:	2301      	movs	r3, #1
 80166c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80166ca:	e071      	b.n	80167b0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x172>
                twidx += fstride * k;
 80166cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ce:	68ba      	ldr	r2, [r7, #8]
 80166d0:	fb03 f202 	mul.w	r2, r3, r2
 80166d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d6:	4413      	add	r3, r2
 80166d8:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 80166da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	429a      	cmp	r2, r3
 80166e0:	db03      	blt.n	80166ea <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xac>
 80166e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166e4:	69fb      	ldr	r3, [r7, #28]
 80166e6:	1ad3      	subs	r3, r2, r3
 80166e8:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 80166ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ec:	00db      	lsls	r3, r3, #3
 80166ee:	69ba      	ldr	r2, [r7, #24]
 80166f0:	4413      	add	r3, r2
 80166f2:	ed93 7a00 	vldr	s14, [r3]
 80166f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f8:	00db      	lsls	r3, r3, #3
 80166fa:	6a3a      	ldr	r2, [r7, #32]
 80166fc:	4413      	add	r3, r2
 80166fe:	edd3 7a00 	vldr	s15, [r3]
 8016702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016708:	00db      	lsls	r3, r3, #3
 801670a:	69ba      	ldr	r2, [r7, #24]
 801670c:	4413      	add	r3, r2
 801670e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	00db      	lsls	r3, r3, #3
 8016716:	6a3a      	ldr	r2, [r7, #32]
 8016718:	4413      	add	r3, r2
 801671a:	edd3 7a01 	vldr	s15, [r3, #4]
 801671e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016726:	edc7 7a04 	vstr	s15, [r7, #16]
 801672a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	69ba      	ldr	r2, [r7, #24]
 8016730:	4413      	add	r3, r2
 8016732:	ed93 7a00 	vldr	s14, [r3]
 8016736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016738:	00db      	lsls	r3, r3, #3
 801673a:	6a3a      	ldr	r2, [r7, #32]
 801673c:	4413      	add	r3, r2
 801673e:	edd3 7a01 	vldr	s15, [r3, #4]
 8016742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016748:	00db      	lsls	r3, r3, #3
 801674a:	69ba      	ldr	r2, [r7, #24]
 801674c:	4413      	add	r3, r2
 801674e:	edd3 6a01 	vldr	s13, [r3, #4]
 8016752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016754:	00db      	lsls	r3, r3, #3
 8016756:	6a3a      	ldr	r2, [r7, #32]
 8016758:	4413      	add	r3, r2
 801675a:	edd3 7a00 	vldr	s15, [r3]
 801675e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016766:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 801676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676c:	00db      	lsls	r3, r3, #3
 801676e:	68fa      	ldr	r2, [r7, #12]
 8016770:	4413      	add	r3, r2
 8016772:	ed93 7a00 	vldr	s14, [r3]
 8016776:	edd7 7a04 	vldr	s15, [r7, #16]
 801677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	4413      	add	r3, r2
 8016782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016786:	edc3 7a00 	vstr	s15, [r3]
 801678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	68fa      	ldr	r2, [r7, #12]
 8016790:	4413      	add	r3, r2
 8016792:	ed93 7a01 	vldr	s14, [r3, #4]
 8016796:	edd7 7a05 	vldr	s15, [r7, #20]
 801679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801679c:	00db      	lsls	r3, r3, #3
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	4413      	add	r3, r2
 80167a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80167a6:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 80167aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ac:	3301      	adds	r3, #1
 80167ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80167b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167b4:	429a      	cmp	r2, r3
 80167b6:	db89      	blt.n	80166cc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x8e>
            }
            k += m;
 80167b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	4413      	add	r3, r2
 80167be:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 80167c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c2:	3301      	adds	r3, #1
 80167c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80167c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167ca:	429a      	cmp	r2, r3
 80167cc:	f6ff af70 	blt.w	80166b0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
    for ( u=0; u<m; ++u ) {
 80167d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167d2:	3301      	adds	r3, #1
 80167d4:	637b      	str	r3, [r7, #52]	; 0x34
 80167d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	429a      	cmp	r2, r3
 80167dc:	f6ff af46 	blt.w	801666c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 80167e0:	69b8      	ldr	r0, [r7, #24]
 80167e2:	f000 fdeb 	bl	80173bc <_Z7ei_freePv>
}
 80167e6:	bf00      	nop
 80167e8:	3738      	adds	r7, #56	; 0x38
 80167ea:	46bd      	mov	sp, r7
 80167ec:	bd80      	pop	{r7, pc}
	...

080167f0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b08a      	sub	sp, #40	; 0x28
 80167f4:	af02      	add	r7, sp, #8
 80167f6:	60f8      	str	r0, [r7, #12]
 80167f8:	60b9      	str	r1, [r7, #8]
 80167fa:	607a      	str	r2, [r7, #4]
 80167fc:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 8016802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016804:	1d1a      	adds	r2, r3, #4
 8016806:	62ba      	str	r2, [r7, #40]	; 0x28
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 801680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801680e:	1d1a      	adds	r2, r3, #4
 8016810:	62ba      	str	r2, [r7, #40]	; 0x28
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 8016816:	69bb      	ldr	r3, [r7, #24]
 8016818:	697a      	ldr	r2, [r7, #20]
 801681a:	fb02 f303 	mul.w	r3, r2, r3
 801681e:	00db      	lsls	r3, r3, #3
 8016820:	68fa      	ldr	r2, [r7, #12]
 8016822:	4413      	add	r3, r2
 8016824:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	2b01      	cmp	r3, #1
 801682a:	d11a      	bne.n	8016862 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	68ba      	ldr	r2, [r7, #8]
 8016830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016834:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	fb02 f303 	mul.w	r3, r2, r3
 8016840:	00db      	lsls	r3, r3, #3
 8016842:	68ba      	ldr	r2, [r7, #8]
 8016844:	4413      	add	r3, r2
 8016846:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	3308      	adds	r3, #8
 801684c:	60fb      	str	r3, [r7, #12]
 801684e:	68fa      	ldr	r2, [r7, #12]
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	429a      	cmp	r2, r3
 8016854:	bf14      	ite	ne
 8016856:	2301      	movne	r3, #1
 8016858:	2300      	moveq	r3, #0
 801685a:	b2db      	uxtb	r3, r3
 801685c:	2b00      	cmp	r3, #0
 801685e:	d1e5      	bne.n	801682c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
 8016860:	e022      	b.n	80168a8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xb8>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 8016862:	69bb      	ldr	r3, [r7, #24]
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	fb03 f202 	mul.w	r2, r3, r2
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	9301      	str	r3, [sp, #4]
 801686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016870:	9300      	str	r3, [sp, #0]
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	68b9      	ldr	r1, [r7, #8]
 8016876:	68f8      	ldr	r0, [r7, #12]
 8016878:	f7ff ffba 	bl	80167f0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	fb02 f303 	mul.w	r3, r2, r3
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	68ba      	ldr	r2, [r7, #8]
 8016888:	4413      	add	r3, r2
 801688a:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	00db      	lsls	r3, r3, #3
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	4413      	add	r3, r2
 8016894:	60fb      	str	r3, [r7, #12]
 8016896:	68fa      	ldr	r2, [r7, #12]
 8016898:	693b      	ldr	r3, [r7, #16]
 801689a:	429a      	cmp	r2, r3
 801689c:	bf14      	ite	ne
 801689e:	2301      	movne	r3, #1
 80168a0:	2300      	moveq	r3, #0
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d1dc      	bne.n	8016862 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 80168ac:	69bb      	ldr	r3, [r7, #24]
 80168ae:	3b02      	subs	r3, #2
 80168b0:	2b03      	cmp	r3, #3
 80168b2:	d827      	bhi.n	8016904 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 80168b4:	a201      	add	r2, pc, #4	; (adr r2, 80168bc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 80168b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ba:	bf00      	nop
 80168bc:	080168cd 	.word	0x080168cd
 80168c0:	080168db 	.word	0x080168db
 80168c4:	080168e9 	.word	0x080168e9
 80168c8:	080168f7 	.word	0x080168f7
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168d0:	6879      	ldr	r1, [r7, #4]
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	f7ff f805 	bl	80158e2 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 80168d8:	e01d      	b.n	8016916 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168de:	6879      	ldr	r1, [r7, #4]
 80168e0:	68f8      	ldr	r0, [r7, #12]
 80168e2:	f7ff fa33 	bl	8015d4c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 80168e6:	e016      	b.n	8016916 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	68f8      	ldr	r0, [r7, #12]
 80168f0:	f7ff f874 	bl	80159dc <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 80168f4:	e00f      	b.n	8016916 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80168fa:	6879      	ldr	r1, [r7, #4]
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f7ff fb95 	bl	801602c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 8016902:	e008      	b.n	8016916 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	9300      	str	r3, [sp, #0]
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801690c:	6879      	ldr	r1, [r7, #4]
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	f7ff fe95 	bl	801663e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 8016914:	bf00      	nop
    }
}
 8016916:	bf00      	nop
 8016918:	3720      	adds	r7, #32
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop

08016920 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
    int p=4;
 801692a:	2304      	movs	r3, #4
 801692c:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7e9 fe28 	bl	8000584 <__aeabi_i2d>
 8016934:	4602      	mov	r2, r0
 8016936:	460b      	mov	r3, r1
 8016938:	ec43 2b10 	vmov	d0, r2, r3
 801693c:	f003 fc56 	bl	801a1ec <sqrt>
 8016940:	eeb0 7a40 	vmov.f32	s14, s0
 8016944:	eef0 7a60 	vmov.f32	s15, s1
 8016948:	eeb0 0a47 	vmov.f32	s0, s14
 801694c:	eef0 0a67 	vmov.f32	s1, s15
 8016950:	f003 ffd6 	bl	801a900 <floor>
 8016954:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 8016958:	e01e      	b.n	8016998 <_ZL9kf_factoriPi+0x78>
            switch (p) {
 801695a:	697b      	ldr	r3, [r7, #20]
 801695c:	2b02      	cmp	r3, #2
 801695e:	d005      	beq.n	801696c <_ZL9kf_factoriPi+0x4c>
 8016960:	697b      	ldr	r3, [r7, #20]
 8016962:	2b04      	cmp	r3, #4
 8016964:	d105      	bne.n	8016972 <_ZL9kf_factoriPi+0x52>
                case 4: p = 2; break;
 8016966:	2302      	movs	r3, #2
 8016968:	617b      	str	r3, [r7, #20]
 801696a:	e006      	b.n	801697a <_ZL9kf_factoriPi+0x5a>
                case 2: p = 3; break;
 801696c:	2303      	movs	r3, #3
 801696e:	617b      	str	r3, [r7, #20]
 8016970:	e003      	b.n	801697a <_ZL9kf_factoriPi+0x5a>
                default: p += 2; break;
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	3302      	adds	r3, #2
 8016976:	617b      	str	r3, [r7, #20]
 8016978:	bf00      	nop
            }
            if (p > floor_sqrt)
 801697a:	6978      	ldr	r0, [r7, #20]
 801697c:	f7e9 fe02 	bl	8000584 <__aeabi_i2d>
 8016980:	4602      	mov	r2, r0
 8016982:	460b      	mov	r3, r1
 8016984:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016988:	f7ea f8d8 	bl	8000b3c <__aeabi_dcmplt>
 801698c:	4603      	mov	r3, r0
 801698e:	2b00      	cmp	r3, #0
 8016990:	d100      	bne.n	8016994 <_ZL9kf_factoriPi+0x74>
 8016992:	e001      	b.n	8016998 <_ZL9kf_factoriPi+0x78>
                p = n;          /* no more factors, skip to end */
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	617b      	str	r3, [r7, #20]
        while (n % p) {
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	697a      	ldr	r2, [r7, #20]
 801699c:	fb93 f2f2 	sdiv	r2, r3, r2
 80169a0:	6979      	ldr	r1, [r7, #20]
 80169a2:	fb01 f202 	mul.w	r2, r1, r2
 80169a6:	1a9b      	subs	r3, r3, r2
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d1d6      	bne.n	801695a <_ZL9kf_factoriPi+0x3a>
        }
        n /= p;
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80169b4:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	1d1a      	adds	r2, r3, #4
 80169ba:	603a      	str	r2, [r7, #0]
 80169bc:	697a      	ldr	r2, [r7, #20]
 80169be:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	1d1a      	adds	r2, r3, #4
 80169c4:	603a      	str	r2, [r7, #0]
 80169c6:	687a      	ldr	r2, [r7, #4]
 80169c8:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	dce3      	bgt.n	8016998 <_ZL9kf_factoriPi+0x78>
}
 80169d0:	bf00      	nop
 80169d2:	bf00      	nop
 80169d4:	3718      	adds	r7, #24
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	0000      	movs	r0, r0
 80169dc:	0000      	movs	r0, r0
	...

080169e0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 80169e0:	b5b0      	push	{r4, r5, r7, lr}
 80169e2:	b090      	sub	sp, #64	; 0x40
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	60f8      	str	r0, [r7, #12]
 80169e8:	60b9      	str	r1, [r7, #8]
 80169ea:	607a      	str	r2, [r7, #4]
 80169ec:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 80169ee:	2300      	movs	r3, #0
 80169f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 80169f6:	00db      	lsls	r3, r3, #3
 80169f8:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 80169fa:	683b      	ldr	r3, [r7, #0]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d104      	bne.n	8016a0a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 8016a00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a02:	f000 fcc1 	bl	8017388 <_Z9ei_mallocj>
 8016a06:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016a08:	e00c      	b.n	8016a24 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d006      	beq.n	8016a1e <kiss_fft_alloc+0x3e>
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d801      	bhi.n	8016a1e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a22:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 8016a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	f000 80a0 	beq.w	8016b6c <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 8016a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a2e:	68fa      	ldr	r2, [r7, #12]
 8016a30:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 8016a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a34:	68ba      	ldr	r2, [r7, #8]
 8016a36:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d048      	beq.n	8016ad0 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 8016a3e:	2300      	movs	r3, #0
 8016a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8016a42:	e040      	b.n	8016ac6 <kiss_fft_alloc+0xe6>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8016a44:	a350      	add	r3, pc, #320	; (adr r3, 8016b88 <kiss_fft_alloc+0x1a8>)
 8016a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
                double phase = 2*pi*i / nfft;
 8016a4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016a50:	f7e9 fd98 	bl	8000584 <__aeabi_i2d>
 8016a54:	a34e      	add	r3, pc, #312	; (adr r3, 8016b90 <kiss_fft_alloc+0x1b0>)
 8016a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5a:	f7e9 fdfd 	bl	8000658 <__aeabi_dmul>
 8016a5e:	4602      	mov	r2, r0
 8016a60:	460b      	mov	r3, r1
 8016a62:	4614      	mov	r4, r2
 8016a64:	461d      	mov	r5, r3
 8016a66:	68f8      	ldr	r0, [r7, #12]
 8016a68:	f7e9 fd8c 	bl	8000584 <__aeabi_i2d>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	460b      	mov	r3, r1
 8016a70:	4620      	mov	r0, r4
 8016a72:	4629      	mov	r1, r5
 8016a74:	f7e9 ff1a 	bl	80008ac <__aeabi_ddiv>
 8016a78:	4602      	mov	r2, r0
 8016a7a:	460b      	mov	r3, r1
 8016a7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 8016a80:	ed97 0b04 	vldr	d0, [r7, #16]
 8016a84:	f003 fbe0 	bl	801a248 <cos>
 8016a88:	ec51 0b10 	vmov	r0, r1, d0
 8016a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a8e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a94:	00db      	lsls	r3, r3, #3
 8016a96:	18d4      	adds	r4, r2, r3
 8016a98:	f7ea f8d6 	bl	8000c48 <__aeabi_d2f>
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	6023      	str	r3, [r4, #0]
 8016aa0:	ed97 0b04 	vldr	d0, [r7, #16]
 8016aa4:	f003 fc5c 	bl	801a360 <sin>
 8016aa8:	ec51 0b10 	vmov	r0, r1, d0
 8016aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aae:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ab4:	00db      	lsls	r3, r3, #3
 8016ab6:	18d4      	adds	r4, r2, r3
 8016ab8:	f7ea f8c6 	bl	8000c48 <__aeabi_d2f>
 8016abc:	4603      	mov	r3, r0
 8016abe:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8016ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac2:	3301      	adds	r3, #1
 8016ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	dbba      	blt.n	8016a44 <kiss_fft_alloc+0x64>
 8016ace:	e047      	b.n	8016b60 <kiss_fft_alloc+0x180>
            }
        } else {
            for (i=0;i<nfft;++i) {
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ad4:	e040      	b.n	8016b58 <kiss_fft_alloc+0x178>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 8016ad6:	a32c      	add	r3, pc, #176	; (adr r3, 8016b88 <kiss_fft_alloc+0x1a8>)
 8016ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016adc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 8016ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ae2:	f7e9 fd4f 	bl	8000584 <__aeabi_i2d>
 8016ae6:	a32c      	add	r3, pc, #176	; (adr r3, 8016b98 <kiss_fft_alloc+0x1b8>)
 8016ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aec:	f7e9 fdb4 	bl	8000658 <__aeabi_dmul>
 8016af0:	4602      	mov	r2, r0
 8016af2:	460b      	mov	r3, r1
 8016af4:	4614      	mov	r4, r2
 8016af6:	461d      	mov	r5, r3
 8016af8:	68f8      	ldr	r0, [r7, #12]
 8016afa:	f7e9 fd43 	bl	8000584 <__aeabi_i2d>
 8016afe:	4602      	mov	r2, r0
 8016b00:	460b      	mov	r3, r1
 8016b02:	4620      	mov	r0, r4
 8016b04:	4629      	mov	r1, r5
 8016b06:	f7e9 fed1 	bl	80008ac <__aeabi_ddiv>
 8016b0a:	4602      	mov	r2, r0
 8016b0c:	460b      	mov	r3, r1
 8016b0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 8016b12:	ed97 0b08 	vldr	d0, [r7, #32]
 8016b16:	f003 fb97 	bl	801a248 <cos>
 8016b1a:	ec51 0b10 	vmov	r0, r1, d0
 8016b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b20:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	18d4      	adds	r4, r2, r3
 8016b2a:	f7ea f88d 	bl	8000c48 <__aeabi_d2f>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	6023      	str	r3, [r4, #0]
 8016b32:	ed97 0b08 	vldr	d0, [r7, #32]
 8016b36:	f003 fc13 	bl	801a360 <sin>
 8016b3a:	ec51 0b10 	vmov	r0, r1, d0
 8016b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b40:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8016b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	18d4      	adds	r4, r2, r3
 8016b4a:	f7ea f87d 	bl	8000c48 <__aeabi_d2f>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 8016b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b54:	3301      	adds	r3, #1
 8016b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8016b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	dbba      	blt.n	8016ad6 <kiss_fft_alloc+0xf6>
            }
        }

        kf_factor(nfft,st->factors);
 8016b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b62:	3308      	adds	r3, #8
 8016b64:	4619      	mov	r1, r3
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	f7ff feda 	bl	8016920 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 8016b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d002      	beq.n	8016b78 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 8016b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b76:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3740      	adds	r7, #64	; 0x40
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bdb0      	pop	{r4, r5, r7, pc}
 8016b82:	bf00      	nop
 8016b84:	f3af 8000 	nop.w
 8016b88:	54442d18 	.word	0x54442d18
 8016b8c:	400921fb 	.word	0x400921fb
 8016b90:	54442d18 	.word	0x54442d18
 8016b94:	401921fb 	.word	0x401921fb
 8016b98:	54442d18 	.word	0x54442d18
 8016b9c:	c01921fb 	.word	0xc01921fb

08016ba0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b088      	sub	sp, #32
 8016ba4:	af02      	add	r7, sp, #8
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 8016bae:	68ba      	ldr	r2, [r7, #8]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	d11d      	bne.n	8016bf2 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	00db      	lsls	r3, r3, #3
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f000 fbe3 	bl	8017388 <_Z9ei_mallocj>
 8016bc2:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	3308      	adds	r3, #8
 8016bc8:	68fa      	ldr	r2, [r7, #12]
 8016bca:	9201      	str	r2, [sp, #4]
 8016bcc:	9300      	str	r3, [sp, #0]
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	68b9      	ldr	r1, [r7, #8]
 8016bd4:	6978      	ldr	r0, [r7, #20]
 8016bd6:	f7ff fe0b 	bl	80167f0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	00db      	lsls	r3, r3, #3
 8016be0:	461a      	mov	r2, r3
 8016be2:	6979      	ldr	r1, [r7, #20]
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f007 fece 	bl	801e986 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 8016bea:	6978      	ldr	r0, [r7, #20]
 8016bec:	f000 fbe6 	bl	80173bc <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 8016bf0:	e00a      	b.n	8016c08 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	3308      	adds	r3, #8
 8016bf6:	68fa      	ldr	r2, [r7, #12]
 8016bf8:	9201      	str	r2, [sp, #4]
 8016bfa:	9300      	str	r3, [sp, #0]
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	2201      	movs	r2, #1
 8016c00:	68b9      	ldr	r1, [r7, #8]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7ff fdf4 	bl	80167f0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 8016c08:	bf00      	nop
 8016c0a:	3718      	adds	r7, #24
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	60f8      	str	r0, [r7, #12]
 8016c18:	60b9      	str	r1, [r7, #8]
 8016c1a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	687a      	ldr	r2, [r7, #4]
 8016c20:	68b9      	ldr	r1, [r7, #8]
 8016c22:	68f8      	ldr	r0, [r7, #12]
 8016c24:	f7ff ffbc 	bl	8016ba0 <kiss_fft_stride>
}
 8016c28:	bf00      	nop
 8016c2a:	3710      	adds	r7, #16
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}

08016c30 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 8016c30:	b5b0      	push	{r4, r5, r7, lr}
 8016c32:	b090      	sub	sp, #64	; 0x40
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 8016c42:	2300      	movs	r3, #0
 8016c44:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	f003 0301 	and.w	r3, r3, #1
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d004      	beq.n	8016c5a <kiss_fftr_alloc+0x2a>
        ei_printf("FFT length must be even\n");
 8016c50:	4887      	ldr	r0, [pc, #540]	; (8016e70 <kiss_fftr_alloc+0x240>)
 8016c52:	f7f2 f8ef 	bl	8008e34 <_Z9ei_printfPKcz>
        return NULL;
 8016c56:	2300      	movs	r3, #0
 8016c58:	e0fc      	b.n	8016e54 <kiss_fftr_alloc+0x224>
    }
    nfft >>= 1;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	105b      	asrs	r3, r3, #1
 8016c5e:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 8016c60:	f107 0314 	add.w	r3, r7, #20
 8016c64:	2200      	movs	r2, #0
 8016c66:	9200      	str	r2, [sp, #0]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	68b9      	ldr	r1, [r7, #8]
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	f7ff feb7 	bl	80169e0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 8016c72:	68fa      	ldr	r2, [r7, #12]
 8016c74:	4613      	mov	r3, r2
 8016c76:	005b      	lsls	r3, r3, #1
 8016c78:	4413      	add	r3, r2
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	da00      	bge.n	8016c80 <kiss_fftr_alloc+0x50>
 8016c7e:	3301      	adds	r3, #1
 8016c80:	105b      	asrs	r3, r3, #1
 8016c82:	00da      	lsls	r2, r3, #3
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	4413      	add	r3, r2
 8016c88:	330c      	adds	r3, #12
 8016c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d104      	bne.n	8016c9c <kiss_fftr_alloc+0x6c>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 8016c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c94:	f000 fb78 	bl	8017388 <_Z9ei_mallocj>
 8016c98:	6338      	str	r0, [r7, #48]	; 0x30
 8016c9a:	e009      	b.n	8016cb0 <kiss_fftr_alloc+0x80>
    } else {
        if (*lenmem >= memneeded)
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ca2:	429a      	cmp	r2, r3
 8016ca4:	d801      	bhi.n	8016caa <kiss_fftr_alloc+0x7a>
            st = (kiss_fftr_cfg) mem;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cae:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 8016cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d101      	bne.n	8016cba <kiss_fftr_alloc+0x8a>
        return NULL;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	e0cc      	b.n	8016e54 <kiss_fftr_alloc+0x224>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 8016cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cbc:	f103 020c 	add.w	r2, r3, #12
 8016cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc2:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 8016cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	441a      	add	r2, r3
 8016ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cce:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 8016cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd2:	685a      	ldr	r2, [r3, #4]
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	441a      	add	r2, r3
 8016cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cdc:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 8016cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	f107 0314 	add.w	r3, r7, #20
 8016ce6:	2100      	movs	r1, #0
 8016ce8:	9100      	str	r1, [sp, #0]
 8016cea:	68b9      	ldr	r1, [r7, #8]
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f7ff fe77 	bl	80169e0 <kiss_fft_alloc>

    if (inverse_fft) {
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d053      	beq.n	8016da0 <kiss_fftr_alloc+0x170>
        for (i = 0; i < nfft/2; ++i) {
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8016cfc:	e046      	b.n	8016d8c <kiss_fftr_alloc+0x15c>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8016cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d00:	3301      	adds	r3, #1
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7e9 fc3e 	bl	8000584 <__aeabi_i2d>
 8016d08:	4604      	mov	r4, r0
 8016d0a:	460d      	mov	r5, r1
 8016d0c:	68f8      	ldr	r0, [r7, #12]
 8016d0e:	f7e9 fc39 	bl	8000584 <__aeabi_i2d>
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	4620      	mov	r0, r4
 8016d18:	4629      	mov	r1, r5
 8016d1a:	f7e9 fdc7 	bl	80008ac <__aeabi_ddiv>
 8016d1e:	4602      	mov	r2, r0
 8016d20:	460b      	mov	r3, r1
 8016d22:	4610      	mov	r0, r2
 8016d24:	4619      	mov	r1, r3
 8016d26:	f04f 0200 	mov.w	r2, #0
 8016d2a:	4b52      	ldr	r3, [pc, #328]	; (8016e74 <kiss_fftr_alloc+0x244>)
 8016d2c:	f7e9 fade 	bl	80002ec <__adddf3>
 8016d30:	4602      	mov	r2, r0
 8016d32:	460b      	mov	r3, r1
 8016d34:	4610      	mov	r0, r2
 8016d36:	4619      	mov	r1, r3
            double phase =
 8016d38:	a349      	add	r3, pc, #292	; (adr r3, 8016e60 <kiss_fftr_alloc+0x230>)
 8016d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3e:	f7e9 fc8b 	bl	8000658 <__aeabi_dmul>
 8016d42:	4602      	mov	r2, r0
 8016d44:	460b      	mov	r3, r1
 8016d46:	e9c7 2306 	strd	r2, r3, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 8016d4a:	ed97 0b06 	vldr	d0, [r7, #24]
 8016d4e:	f003 fa7b 	bl	801a248 <cos>
 8016d52:	ec51 0b10 	vmov	r0, r1, d0
 8016d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d58:	689a      	ldr	r2, [r3, #8]
 8016d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d5c:	00db      	lsls	r3, r3, #3
 8016d5e:	18d4      	adds	r4, r2, r3
 8016d60:	f7e9 ff72 	bl	8000c48 <__aeabi_d2f>
 8016d64:	4603      	mov	r3, r0
 8016d66:	6023      	str	r3, [r4, #0]
 8016d68:	ed97 0b06 	vldr	d0, [r7, #24]
 8016d6c:	f003 faf8 	bl	801a360 <sin>
 8016d70:	ec51 0b10 	vmov	r0, r1, d0
 8016d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d76:	689a      	ldr	r2, [r3, #8]
 8016d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d7a:	00db      	lsls	r3, r3, #3
 8016d7c:	18d4      	adds	r4, r2, r3
 8016d7e:	f7e9 ff63 	bl	8000c48 <__aeabi_d2f>
 8016d82:	4603      	mov	r3, r0
 8016d84:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8016d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d88:	3301      	adds	r3, #1
 8016d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	da00      	bge.n	8016d94 <kiss_fftr_alloc+0x164>
 8016d92:	3301      	adds	r3, #1
 8016d94:	105b      	asrs	r3, r3, #1
 8016d96:	461a      	mov	r2, r3
 8016d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d9a:	4293      	cmp	r3, r2
 8016d9c:	dbaf      	blt.n	8016cfe <kiss_fftr_alloc+0xce>
 8016d9e:	e052      	b.n	8016e46 <kiss_fftr_alloc+0x216>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 8016da0:	2300      	movs	r3, #0
 8016da2:	637b      	str	r3, [r7, #52]	; 0x34
 8016da4:	e046      	b.n	8016e34 <kiss_fftr_alloc+0x204>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 8016da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016da8:	3301      	adds	r3, #1
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7e9 fbea 	bl	8000584 <__aeabi_i2d>
 8016db0:	4604      	mov	r4, r0
 8016db2:	460d      	mov	r5, r1
 8016db4:	68f8      	ldr	r0, [r7, #12]
 8016db6:	f7e9 fbe5 	bl	8000584 <__aeabi_i2d>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	4629      	mov	r1, r5
 8016dc2:	f7e9 fd73 	bl	80008ac <__aeabi_ddiv>
 8016dc6:	4602      	mov	r2, r0
 8016dc8:	460b      	mov	r3, r1
 8016dca:	4610      	mov	r0, r2
 8016dcc:	4619      	mov	r1, r3
 8016dce:	f04f 0200 	mov.w	r2, #0
 8016dd2:	4b28      	ldr	r3, [pc, #160]	; (8016e74 <kiss_fftr_alloc+0x244>)
 8016dd4:	f7e9 fa8a 	bl	80002ec <__adddf3>
 8016dd8:	4602      	mov	r2, r0
 8016dda:	460b      	mov	r3, r1
 8016ddc:	4610      	mov	r0, r2
 8016dde:	4619      	mov	r1, r3
            double phase =
 8016de0:	a321      	add	r3, pc, #132	; (adr r3, 8016e68 <kiss_fftr_alloc+0x238>)
 8016de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de6:	f7e9 fc37 	bl	8000658 <__aeabi_dmul>
 8016dea:	4602      	mov	r2, r0
 8016dec:	460b      	mov	r3, r1
 8016dee:	e9c7 2308 	strd	r2, r3, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 8016df2:	ed97 0b08 	vldr	d0, [r7, #32]
 8016df6:	f003 fa27 	bl	801a248 <cos>
 8016dfa:	ec51 0b10 	vmov	r0, r1, d0
 8016dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e00:	689a      	ldr	r2, [r3, #8]
 8016e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e04:	00db      	lsls	r3, r3, #3
 8016e06:	18d4      	adds	r4, r2, r3
 8016e08:	f7e9 ff1e 	bl	8000c48 <__aeabi_d2f>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	6023      	str	r3, [r4, #0]
 8016e10:	ed97 0b08 	vldr	d0, [r7, #32]
 8016e14:	f003 faa4 	bl	801a360 <sin>
 8016e18:	ec51 0b10 	vmov	r0, r1, d0
 8016e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e1e:	689a      	ldr	r2, [r3, #8]
 8016e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	18d4      	adds	r4, r2, r3
 8016e26:	f7e9 ff0f 	bl	8000c48 <__aeabi_d2f>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 8016e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e30:	3301      	adds	r3, #1
 8016e32:	637b      	str	r3, [r7, #52]	; 0x34
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	da00      	bge.n	8016e3c <kiss_fftr_alloc+0x20c>
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	105b      	asrs	r3, r3, #1
 8016e3e:	461a      	mov	r2, r3
 8016e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e42:	4293      	cmp	r3, r2
 8016e44:	dbaf      	blt.n	8016da6 <kiss_fftr_alloc+0x176>
        }
    }

    if (memallocated != NULL) {
 8016e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d002      	beq.n	8016e52 <kiss_fftr_alloc+0x222>
        *memallocated = memneeded;
 8016e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e50:	601a      	str	r2, [r3, #0]
    }

    return st;
 8016e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	3738      	adds	r7, #56	; 0x38
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8016e5c:	f3af 8000 	nop.w
 8016e60:	54442d18 	.word	0x54442d18
 8016e64:	400921fb 	.word	0x400921fb
 8016e68:	54442d18 	.word	0x54442d18
 8016e6c:	c00921fb 	.word	0xc00921fb
 8016e70:	08021a30 	.word	0x08021a30
 8016e74:	3fe00000 	.word	0x3fe00000

08016e78 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b092      	sub	sp, #72	; 0x48
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	60f8      	str	r0, [r7, #12]
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d002      	beq.n	8016e94 <kiss_fftr+0x1c>
        ei_printf("kiss fft usage error: improper alloc\n");
 8016e8e:	4888      	ldr	r0, [pc, #544]	; (80170b0 <kiss_fftr+0x238>)
 8016e90:	f7f1 ffd0 	bl	8008e34 <_Z9ei_printfPKcz>
    }

    ncfft = st->substate->nfft;
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	6818      	ldr	r0, [r3, #0]
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	685b      	ldr	r3, [r3, #4]
 8016ea4:	461a      	mov	r2, r3
 8016ea6:	68b9      	ldr	r1, [r7, #8]
 8016ea8:	f7ff feb2 	bl	8016c10 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 8016ebc:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ec0:	edd7 7a05 	vldr	s15, [r7, #20]
 8016ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 8016ece:	ed97 7a04 	vldr	s14, [r7, #16]
 8016ed2:	edd7 7a05 	vldr	s15, [r7, #20]
 8016ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ed8:	00db      	lsls	r3, r3, #3
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	4413      	add	r3, r2
 8016ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016ee2:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	f04f 0200 	mov.w	r2, #0
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ef0:	00db      	lsls	r3, r3, #3
 8016ef2:	687a      	ldr	r2, [r7, #4]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	6852      	ldr	r2, [r2, #4]
 8016efa:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 8016efc:	2301      	movs	r3, #1
 8016efe:	647b      	str	r3, [r7, #68]	; 0x44
 8016f00:	e0c7      	b.n	8017092 <kiss_fftr+0x21a>
        fpk    = st->tmpbuf[k];
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	685a      	ldr	r2, [r3, #4]
 8016f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f08:	00db      	lsls	r3, r3, #3
 8016f0a:	441a      	add	r2, r3
 8016f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f14:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	685a      	ldr	r2, [r3, #4]
 8016f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f20:	1acb      	subs	r3, r1, r3
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	4413      	add	r3, r2
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	685a      	ldr	r2, [r3, #4]
 8016f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f32:	1acb      	subs	r3, r1, r3
 8016f34:	00db      	lsls	r3, r3, #3
 8016f36:	4413      	add	r3, r2
 8016f38:	edd3 7a01 	vldr	s15, [r3, #4]
 8016f3c:	eef1 7a67 	vneg.f32	s15, s15
 8016f40:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 8016f44:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016f48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8016f54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016f58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 8016f64:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8016f68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8016f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f70:	edc7 7a08 	vstr	s15, [r7, #32]
 8016f74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8016f78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8016f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 8016f84:	ed97 7a08 	vldr	s14, [r7, #32]
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	689a      	ldr	r2, [r3, #8]
 8016f8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f8e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016f92:	440b      	add	r3, r1
 8016f94:	00db      	lsls	r3, r3, #3
 8016f96:	4413      	add	r3, r2
 8016f98:	edd3 7a00 	vldr	s15, [r3]
 8016f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fa0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	689a      	ldr	r2, [r3, #8]
 8016fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016faa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016fae:	440b      	add	r3, r1
 8016fb0:	00db      	lsls	r3, r3, #3
 8016fb2:	4413      	add	r3, r2
 8016fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fc0:	edc7 7a06 	vstr	s15, [r7, #24]
 8016fc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	689a      	ldr	r2, [r3, #8]
 8016fcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016fce:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016fd2:	440b      	add	r3, r1
 8016fd4:	00db      	lsls	r3, r3, #3
 8016fd6:	4413      	add	r3, r2
 8016fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8016fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016fe0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	689a      	ldr	r2, [r3, #8]
 8016fe8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016fea:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8016fee:	440b      	add	r3, r1
 8016ff0:	00db      	lsls	r3, r3, #3
 8016ff2:	4413      	add	r3, r2
 8016ff4:	edd3 7a00 	vldr	s15, [r3]
 8016ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017000:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 8017004:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017008:	edd7 7a06 	vldr	s15, [r7, #24]
 801700c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017012:	00db      	lsls	r3, r3, #3
 8017014:	687a      	ldr	r2, [r7, #4]
 8017016:	4413      	add	r3, r2
 8017018:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801701c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017020:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 8017024:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8017028:	edd7 7a07 	vldr	s15, [r7, #28]
 801702c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017032:	00db      	lsls	r3, r3, #3
 8017034:	687a      	ldr	r2, [r7, #4]
 8017036:	4413      	add	r3, r2
 8017038:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801703c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017040:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 8017044:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8017048:	edd7 7a06 	vldr	s15, [r7, #24]
 801704c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017054:	1ad3      	subs	r3, r2, r3
 8017056:	00db      	lsls	r3, r3, #3
 8017058:	687a      	ldr	r2, [r7, #4]
 801705a:	4413      	add	r3, r2
 801705c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017064:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 8017068:	ed97 7a07 	vldr	s14, [r7, #28]
 801706c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017078:	1ad3      	subs	r3, r2, r3
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	4413      	add	r3, r2
 8017080:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017088:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 801708c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801708e:	3301      	adds	r3, #1
 8017090:	647b      	str	r3, [r7, #68]	; 0x44
 8017092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017094:	2b00      	cmp	r3, #0
 8017096:	da00      	bge.n	801709a <kiss_fftr+0x222>
 8017098:	3301      	adds	r3, #1
 801709a:	105b      	asrs	r3, r3, #1
 801709c:	461a      	mov	r2, r3
 801709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170a0:	4293      	cmp	r3, r2
 80170a2:	f77f af2e 	ble.w	8016f02 <kiss_fftr+0x8a>
    }
}
 80170a6:	bf00      	nop
 80170a8:	bf00      	nop
 80170aa:	3748      	adds	r7, #72	; 0x48
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bd80      	pop	{r7, pc}
 80170b0:	08021a4c 	.word	0x08021a4c

080170b4 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80170be:	ed97 0a01 	vldr	s0, [r7, #4]
 80170c2:	f003 fa3d 	bl	801a540 <log10f>
 80170c6:	eef0 7a40 	vmov.f32	s15, s0
 80170ca:	eeb0 0a67 	vmov.f32	s0, s15
 80170ce:	3708      	adds	r7, #8
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}

080170d4 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 80170d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170d6:	b083      	sub	sp, #12
 80170d8:	af00      	add	r7, sp, #0
 80170da:	ed87 0b00 	vstr	d0, [r7]
 80170de:	683c      	ldr	r4, [r7, #0]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80170e6:	2301      	movs	r3, #1
 80170e8:	461e      	mov	r6, r3
 80170ea:	f04f 32ff 	mov.w	r2, #4294967295
 80170ee:	4b10      	ldr	r3, [pc, #64]	; (8017130 <_ZSt5isinfd+0x5c>)
 80170f0:	4620      	mov	r0, r4
 80170f2:	4629      	mov	r1, r5
 80170f4:	f7e9 fd4a 	bl	8000b8c <__aeabi_dcmpun>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d10b      	bne.n	8017116 <_ZSt5isinfd+0x42>
 80170fe:	f04f 32ff 	mov.w	r2, #4294967295
 8017102:	4b0b      	ldr	r3, [pc, #44]	; (8017130 <_ZSt5isinfd+0x5c>)
 8017104:	4620      	mov	r0, r4
 8017106:	4629      	mov	r1, r5
 8017108:	f7e9 fd22 	bl	8000b50 <__aeabi_dcmple>
 801710c:	4603      	mov	r3, r0
 801710e:	2b00      	cmp	r3, #0
 8017110:	d101      	bne.n	8017116 <_ZSt5isinfd+0x42>
 8017112:	2300      	movs	r3, #0
 8017114:	461e      	mov	r6, r3
 8017116:	b2f3      	uxtb	r3, r6
 8017118:	f083 0301 	eor.w	r3, r3, #1
 801711c:	b2db      	uxtb	r3, r3
 801711e:	2b00      	cmp	r3, #0
 8017120:	bf14      	ite	ne
 8017122:	2301      	movne	r3, #1
 8017124:	2300      	moveq	r3, #0
 8017126:	b2db      	uxtb	r3, r3
 8017128:	4618      	mov	r0, r3
 801712a:	370c      	adds	r7, #12
 801712c:	46bd      	mov	sp, r7
 801712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017130:	7fefffff 	.word	0x7fefffff

08017134 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 8017134:	b480      	push	{r7}
 8017136:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	46bd      	mov	sp, r7
 801713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017142:	4770      	bx	lr

08017144 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 8017144:	b5b0      	push	{r4, r5, r7, lr}
 8017146:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8017148:	f7f9 fae2 	bl	8010710 <HAL_GetTick>
 801714c:	4603      	mov	r3, r0
 801714e:	2200      	movs	r2, #0
 8017150:	461c      	mov	r4, r3
 8017152:	4615      	mov	r5, r2
 8017154:	4622      	mov	r2, r4
 8017156:	462b      	mov	r3, r5
}
 8017158:	4610      	mov	r0, r2
 801715a:	4619      	mov	r1, r3
 801715c:	bdb0      	pop	{r4, r5, r7, pc}

0801715e <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_us() {
 801715e:	b5b0      	push	{r4, r5, r7, lr}
 8017160:	af00      	add	r7, sp, #0
    return HAL_GetTick() * 1000;
 8017162:	f7f9 fad5 	bl	8010710 <HAL_GetTick>
 8017166:	4603      	mov	r3, r0
 8017168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801716c:	fb02 f303 	mul.w	r3, r2, r3
 8017170:	2200      	movs	r2, #0
 8017172:	461c      	mov	r4, r3
 8017174:	4615      	mov	r5, r2
 8017176:	4622      	mov	r2, r4
 8017178:	462b      	mov	r3, r5
}
 801717a:	4610      	mov	r0, r2
 801717c:	4619      	mov	r1, r3
 801717e:	bdb0      	pop	{r4, r5, r7, pc}

08017180 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 8017180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017184:	b08c      	sub	sp, #48	; 0x30
 8017186:	af00      	add	r7, sp, #0
 8017188:	ed87 0a01 	vstr	s0, [r7, #4]
        *(c) = '\0';
    }


    ei_printf("%s", s);
}
 801718c:	466b      	mov	r3, sp
 801718e:	4698      	mov	r8, r3
    float n = f;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	62fb      	str	r3, [r7, #44]	; 0x2c
    char s[MAX_NUMBER_STRING_SIZE];
 8017194:	4b78      	ldr	r3, [pc, #480]	; (8017378 <_Z15ei_printf_floatf+0x1f8>)
 8017196:	681e      	ldr	r6, [r3, #0]
 8017198:	1e73      	subs	r3, r6, #1
 801719a:	623b      	str	r3, [r7, #32]
 801719c:	4632      	mov	r2, r6
 801719e:	2300      	movs	r3, #0
 80171a0:	4614      	mov	r4, r2
 80171a2:	461d      	mov	r5, r3
 80171a4:	f04f 0200 	mov.w	r2, #0
 80171a8:	f04f 0300 	mov.w	r3, #0
 80171ac:	00eb      	lsls	r3, r5, #3
 80171ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80171b2:	00e2      	lsls	r2, r4, #3
 80171b4:	4632      	mov	r2, r6
 80171b6:	2300      	movs	r3, #0
 80171b8:	4610      	mov	r0, r2
 80171ba:	4619      	mov	r1, r3
 80171bc:	f04f 0200 	mov.w	r2, #0
 80171c0:	f04f 0300 	mov.w	r3, #0
 80171c4:	00cb      	lsls	r3, r1, #3
 80171c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80171ca:	00c2      	lsls	r2, r0, #3
 80171cc:	4633      	mov	r3, r6
 80171ce:	3307      	adds	r3, #7
 80171d0:	08db      	lsrs	r3, r3, #3
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	ebad 0d03 	sub.w	sp, sp, r3
 80171d8:	466b      	mov	r3, sp
 80171da:	3300      	adds	r3, #0
 80171dc:	61fb      	str	r3, [r7, #28]
    if (n == 0.0) {
 80171de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80171e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80171e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ea:	d106      	bne.n	80171fa <_Z15ei_printf_floatf+0x7a>
        strcpy(s, "0");
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	4963      	ldr	r1, [pc, #396]	; (801737c <_Z15ei_printf_floatf+0x1fc>)
 80171f0:	461a      	mov	r2, r3
 80171f2:	460b      	mov	r3, r1
 80171f4:	881b      	ldrh	r3, [r3, #0]
 80171f6:	8013      	strh	r3, [r2, #0]
 80171f8:	e0ad      	b.n	8017356 <_Z15ei_printf_floatf+0x1d6>
        char *c = s;
 80171fa:	69fb      	ldr	r3, [r7, #28]
 80171fc:	627b      	str	r3, [r7, #36]	; 0x24
        int neg = (n < 0);
 80171fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8017202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720a:	bf4c      	ite	mi
 801720c:	2301      	movmi	r3, #1
 801720e:	2300      	movpl	r3, #0
 8017210:	b2db      	uxtb	r3, r3
 8017212:	61bb      	str	r3, [r7, #24]
        if (neg) {
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d005      	beq.n	8017226 <_Z15ei_printf_floatf+0xa6>
            n = -n;
 801721a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801721e:	eef1 7a67 	vneg.f32	s15, s15
 8017222:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        m = log10(n);
 8017226:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 801722a:	f7ff ff43 	bl	80170b4 <_ZSt5log10f>
 801722e:	eef0 7a40 	vmov.f32	s15, s0
 8017232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017236:	ee17 3a90 	vmov	r3, s15
 801723a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (neg) {
 801723c:	69bb      	ldr	r3, [r7, #24]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d004      	beq.n	801724c <_Z15ei_printf_floatf+0xcc>
            *(c++) = '-';
 8017242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017244:	1c5a      	adds	r2, r3, #1
 8017246:	627a      	str	r2, [r7, #36]	; 0x24
 8017248:	222d      	movs	r2, #45	; 0x2d
 801724a:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 801724c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801724e:	2b00      	cmp	r3, #0
 8017250:	dc70      	bgt.n	8017334 <_Z15ei_printf_floatf+0x1b4>
            m = 0;
 8017252:	2300      	movs	r3, #0
 8017254:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8017256:	e06d      	b.n	8017334 <_Z15ei_printf_floatf+0x1b4>
            double weight = pow(10.0, m);
 8017258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801725a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8017370 <_Z15ei_printf_floatf+0x1f0>
 801725e:	f000 f8b8 	bl	80173d2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8017262:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 8017266:	f04f 0200 	mov.w	r2, #0
 801726a:	f04f 0300 	mov.w	r3, #0
 801726e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017272:	f7e9 fc81 	bl	8000b78 <__aeabi_dcmpgt>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d00b      	beq.n	8017294 <_Z15ei_printf_floatf+0x114>
 801727c:	ed97 0b04 	vldr	d0, [r7, #16]
 8017280:	f7ff ff28 	bl	80170d4 <_ZSt5isinfd>
 8017284:	4603      	mov	r3, r0
 8017286:	f083 0301 	eor.w	r3, r3, #1
 801728a:	b2db      	uxtb	r3, r3
 801728c:	2b00      	cmp	r3, #0
 801728e:	d001      	beq.n	8017294 <_Z15ei_printf_floatf+0x114>
 8017290:	2301      	movs	r3, #1
 8017292:	e000      	b.n	8017296 <_Z15ei_printf_floatf+0x116>
 8017294:	2300      	movs	r3, #0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d03a      	beq.n	8017310 <_Z15ei_printf_floatf+0x190>
                digit = floor(n / weight);
 801729a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801729c:	f7e9 f984 	bl	80005a8 <__aeabi_f2d>
 80172a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80172a4:	f7e9 fb02 	bl	80008ac <__aeabi_ddiv>
 80172a8:	4602      	mov	r2, r0
 80172aa:	460b      	mov	r3, r1
 80172ac:	ec43 2b17 	vmov	d7, r2, r3
 80172b0:	eeb0 0a47 	vmov.f32	s0, s14
 80172b4:	eef0 0a67 	vmov.f32	s1, s15
 80172b8:	f003 fb22 	bl	801a900 <floor>
 80172bc:	ec53 2b10 	vmov	r2, r3, d0
 80172c0:	4610      	mov	r0, r2
 80172c2:	4619      	mov	r1, r3
 80172c4:	f7e9 fc78 	bl	8000bb8 <__aeabi_d2iz>
 80172c8:	4603      	mov	r3, r0
 80172ca:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 80172cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80172ce:	f7e9 f96b 	bl	80005a8 <__aeabi_f2d>
 80172d2:	4604      	mov	r4, r0
 80172d4:	460d      	mov	r5, r1
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f7e9 f954 	bl	8000584 <__aeabi_i2d>
 80172dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80172e0:	f7e9 f9ba 	bl	8000658 <__aeabi_dmul>
 80172e4:	4602      	mov	r2, r0
 80172e6:	460b      	mov	r3, r1
 80172e8:	4620      	mov	r0, r4
 80172ea:	4629      	mov	r1, r5
 80172ec:	f7e8 fffc 	bl	80002e8 <__aeabi_dsub>
 80172f0:	4602      	mov	r2, r0
 80172f2:	460b      	mov	r3, r1
 80172f4:	4610      	mov	r0, r2
 80172f6:	4619      	mov	r1, r3
 80172f8:	f7e9 fca6 	bl	8000c48 <__aeabi_d2f>
 80172fc:	4603      	mov	r3, r0
 80172fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                *(c++) = '0' + digit;
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	b2da      	uxtb	r2, r3
 8017304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017306:	1c59      	adds	r1, r3, #1
 8017308:	6279      	str	r1, [r7, #36]	; 0x24
 801730a:	3230      	adds	r2, #48	; 0x30
 801730c:	b2d2      	uxtb	r2, r2
 801730e:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 8017310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017312:	2b00      	cmp	r3, #0
 8017314:	d10b      	bne.n	801732e <_Z15ei_printf_floatf+0x1ae>
 8017316:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801731a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017322:	dd04      	ble.n	801732e <_Z15ei_printf_floatf+0x1ae>
                *(c++) = '.';
 8017324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017326:	1c5a      	adds	r2, r3, #1
 8017328:	627a      	str	r2, [r7, #36]	; 0x24
 801732a:	222e      	movs	r2, #46	; 0x2e
 801732c:	701a      	strb	r2, [r3, #0]
            m--;
 801732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017330:	3b01      	subs	r3, #1
 8017332:	62bb      	str	r3, [r7, #40]	; 0x28
        while (n > PRECISION || m >= 0) {
 8017334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017336:	f7e9 f937 	bl	80005a8 <__aeabi_f2d>
 801733a:	4b11      	ldr	r3, [pc, #68]	; (8017380 <_Z15ei_printf_floatf+0x200>)
 801733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017340:	f7e9 fc1a 	bl	8000b78 <__aeabi_dcmpgt>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d186      	bne.n	8017258 <_Z15ei_printf_floatf+0xd8>
 801734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734c:	2b00      	cmp	r3, #0
 801734e:	da83      	bge.n	8017258 <_Z15ei_printf_floatf+0xd8>
        *(c) = '\0';
 8017350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017352:	2200      	movs	r2, #0
 8017354:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 8017356:	69f9      	ldr	r1, [r7, #28]
 8017358:	480a      	ldr	r0, [pc, #40]	; (8017384 <_Z15ei_printf_floatf+0x204>)
 801735a:	f7f1 fd6b 	bl	8008e34 <_Z9ei_printfPKcz>
 801735e:	46c5      	mov	sp, r8
}
 8017360:	bf00      	nop
 8017362:	3730      	adds	r7, #48	; 0x30
 8017364:	46bd      	mov	sp, r7
 8017366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801736a:	bf00      	nop
 801736c:	f3af 8000 	nop.w
 8017370:	00000000 	.word	0x00000000
 8017374:	40240000 	.word	0x40240000
 8017378:	200050b8 	.word	0x200050b8
 801737c:	08021a74 	.word	0x08021a74
 8017380:	200050b0 	.word	0x200050b0
 8017384:	08021a78 	.word	0x08021a78

08017388 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
    return malloc(size);
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f006 f99f 	bl	801d6d4 <malloc>
 8017396:	4603      	mov	r3, r0
}
 8017398:	4618      	mov	r0, r3
 801739a:	3708      	adds	r7, #8
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}

080173a0 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b082      	sub	sp, #8
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 80173aa:	6839      	ldr	r1, [r7, #0]
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f006 f973 	bl	801d698 <calloc>
 80173b2:	4603      	mov	r3, r0
}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
    free(ptr);
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f006 f98d 	bl	801d6e4 <free>
}
 80173ca:	bf00      	nop
 80173cc:	3708      	adds	r7, #8
 80173ce:	46bd      	mov	sp, r7
 80173d0:	bd80      	pop	{r7, pc}

080173d2 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80173d2:	b580      	push	{r7, lr}
 80173d4:	b084      	sub	sp, #16
 80173d6:	af00      	add	r7, sp, #0
 80173d8:	ed87 0b02 	vstr	d0, [r7, #8]
 80173dc:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f7e9 f8d0 	bl	8000584 <__aeabi_i2d>
 80173e4:	4602      	mov	r2, r0
 80173e6:	460b      	mov	r3, r1
 80173e8:	ec43 2b11 	vmov	d1, r2, r3
 80173ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80173f0:	f002 fe8c 	bl	801a10c <pow>
 80173f4:	eeb0 7a40 	vmov.f32	s14, s0
 80173f8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80173fc:	eeb0 0a47 	vmov.f32	s0, s14
 8017400:	eef0 0a67 	vmov.f32	s1, s15
 8017404:	3710      	adds	r7, #16
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
	...

0801740c <TfLiteTypeGetName>:
TfLiteStatus TfLiteTensorRealloc(size_t num_bytes, TfLiteTensor* tensor) {
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
 8017412:	4603      	mov	r3, r0
 8017414:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8017416:	79fb      	ldrb	r3, [r7, #7]
 8017418:	2b12      	cmp	r3, #18
 801741a:	d84f      	bhi.n	80174bc <TfLiteTypeGetName+0xb0>
 801741c:	a201      	add	r2, pc, #4	; (adr r2, 8017424 <TfLiteTypeGetName+0x18>)
 801741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017422:	bf00      	nop
 8017424:	08017471 	.word	0x08017471
 8017428:	08017475 	.word	0x08017475
 801742c:	08017481 	.word	0x08017481
 8017430:	08017489 	.word	0x08017489
 8017434:	08017491 	.word	0x08017491
 8017438:	080174a5 	.word	0x080174a5
 801743c:	08017499 	.word	0x08017499
 8017440:	0801747d 	.word	0x0801747d
 8017444:	0801749d 	.word	0x0801749d
 8017448:	0801748d 	.word	0x0801748d
 801744c:	080174a9 	.word	0x080174a9
 8017450:	080174ad 	.word	0x080174ad
 8017454:	080174a1 	.word	0x080174a1
 8017458:	08017495 	.word	0x08017495
 801745c:	080174b1 	.word	0x080174b1
 8017460:	080174b5 	.word	0x080174b5
 8017464:	08017485 	.word	0x08017485
 8017468:	08017479 	.word	0x08017479
 801746c:	080174b9 	.word	0x080174b9
    case kTfLiteNoType:
      return "NOTYPE";
 8017470:	4b16      	ldr	r3, [pc, #88]	; (80174cc <TfLiteTypeGetName+0xc0>)
 8017472:	e024      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat32:
      return "FLOAT32";
 8017474:	4b16      	ldr	r3, [pc, #88]	; (80174d0 <TfLiteTypeGetName+0xc4>)
 8017476:	e022      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt16:
      return "UINT16";
 8017478:	4b16      	ldr	r3, [pc, #88]	; (80174d4 <TfLiteTypeGetName+0xc8>)
 801747a:	e020      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteInt16:
      return "INT16";
 801747c:	4b16      	ldr	r3, [pc, #88]	; (80174d8 <TfLiteTypeGetName+0xcc>)
 801747e:	e01e      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteInt32:
      return "INT32";
 8017480:	4b16      	ldr	r3, [pc, #88]	; (80174dc <TfLiteTypeGetName+0xd0>)
 8017482:	e01c      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt32:
      return "UINT32";
 8017484:	4b16      	ldr	r3, [pc, #88]	; (80174e0 <TfLiteTypeGetName+0xd4>)
 8017486:	e01a      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt8:
      return "UINT8";
 8017488:	4b16      	ldr	r3, [pc, #88]	; (80174e4 <TfLiteTypeGetName+0xd8>)
 801748a:	e018      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteInt8:
      return "INT8";
 801748c:	4b16      	ldr	r3, [pc, #88]	; (80174e8 <TfLiteTypeGetName+0xdc>)
 801748e:	e016      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteInt64:
      return "INT64";
 8017490:	4b16      	ldr	r3, [pc, #88]	; (80174ec <TfLiteTypeGetName+0xe0>)
 8017492:	e014      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteUInt64:
      return "UINT64";
 8017494:	4b16      	ldr	r3, [pc, #88]	; (80174f0 <TfLiteTypeGetName+0xe4>)
 8017496:	e012      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteBool:
      return "BOOL";
 8017498:	4b16      	ldr	r3, [pc, #88]	; (80174f4 <TfLiteTypeGetName+0xe8>)
 801749a:	e010      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 801749c:	4b16      	ldr	r3, [pc, #88]	; (80174f8 <TfLiteTypeGetName+0xec>)
 801749e:	e00e      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80174a0:	4b16      	ldr	r3, [pc, #88]	; (80174fc <TfLiteTypeGetName+0xf0>)
 80174a2:	e00c      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteString:
      return "STRING";
 80174a4:	4b16      	ldr	r3, [pc, #88]	; (8017500 <TfLiteTypeGetName+0xf4>)
 80174a6:	e00a      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80174a8:	4b16      	ldr	r3, [pc, #88]	; (8017504 <TfLiteTypeGetName+0xf8>)
 80174aa:	e008      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80174ac:	4b16      	ldr	r3, [pc, #88]	; (8017508 <TfLiteTypeGetName+0xfc>)
 80174ae:	e006      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteResource:
      return "RESOURCE";
 80174b0:	4b16      	ldr	r3, [pc, #88]	; (801750c <TfLiteTypeGetName+0x100>)
 80174b2:	e004      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteVariant:
      return "VARIANT";
 80174b4:	4b16      	ldr	r3, [pc, #88]	; (8017510 <TfLiteTypeGetName+0x104>)
 80174b6:	e002      	b.n	80174be <TfLiteTypeGetName+0xb2>
    case kTfLiteInt4:
      return "INT4";
 80174b8:	4b16      	ldr	r3, [pc, #88]	; (8017514 <TfLiteTypeGetName+0x108>)
 80174ba:	e000      	b.n	80174be <TfLiteTypeGetName+0xb2>
  }
  return "Unknown type";
 80174bc:	4b16      	ldr	r3, [pc, #88]	; (8017518 <TfLiteTypeGetName+0x10c>)
}
 80174be:	4618      	mov	r0, r3
 80174c0:	370c      	adds	r7, #12
 80174c2:	46bd      	mov	sp, r7
 80174c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c8:	4770      	bx	lr
 80174ca:	bf00      	nop
 80174cc:	08021a7c 	.word	0x08021a7c
 80174d0:	08021a84 	.word	0x08021a84
 80174d4:	08021a8c 	.word	0x08021a8c
 80174d8:	08021a94 	.word	0x08021a94
 80174dc:	08021a9c 	.word	0x08021a9c
 80174e0:	08021aa4 	.word	0x08021aa4
 80174e4:	08021aac 	.word	0x08021aac
 80174e8:	08021ab4 	.word	0x08021ab4
 80174ec:	08021abc 	.word	0x08021abc
 80174f0:	08021ac4 	.word	0x08021ac4
 80174f4:	08021acc 	.word	0x08021acc
 80174f8:	08021ad4 	.word	0x08021ad4
 80174fc:	08021ae0 	.word	0x08021ae0
 8017500:	08021aec 	.word	0x08021aec
 8017504:	08021af4 	.word	0x08021af4
 8017508:	08021afc 	.word	0x08021afc
 801750c:	08021b04 	.word	0x08021b04
 8017510:	08021b10 	.word	0x08021b10
 8017514:	08021b18 	.word	0x08021b18
 8017518:	08021b20 	.word	0x08021b20

0801751c <_ZN6tflite12RuntimeShapeC1Ev>:
  // RuntimeShape in TFLM supports up to 5 dimensions.
  // The name kMaxSmallSize comes from the same file of the upstream
  // tensorflow lite repo and need to be kept the same for max reuse.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape() : size_(0) {}
 801751c:	b480      	push	{r7}
 801751e:	b083      	sub	sp, #12
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2200      	movs	r2, #0
 8017528:	601a      	str	r2, [r3, #0]
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	4618      	mov	r0, r3
 801752e:	370c      	adds	r7, #12
 8017530:	46bd      	mov	sp, r7
 8017532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017536:	4770      	bx	lr

08017538 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data)
 8017538:	b580      	push	{r7, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
      : size_(dimensions_count) {
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	68ba      	ldr	r2, [r7, #8]
 8017548:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	68b9      	ldr	r1, [r7, #8]
 801754e:	68f8      	ldr	r0, [r7, #12]
 8017550:	f000 f828 	bl	80175a4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	4618      	mov	r0, r3
 8017558:	3710      	adds	r7, #16
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}

0801755e <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {}
 801755e:	b480      	push	{r7}
 8017560:	b083      	sub	sp, #12
 8017562:	af00      	add	r7, sp, #0
 8017564:	6078      	str	r0, [r7, #4]
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	4618      	mov	r0, r3
 801756a:	370c      	adds	r7, #12
 801756c:	46bd      	mov	sp, r7
 801756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017572:	4770      	bx	lr

08017574 <_ZN6tflite12RuntimeShape8DimsDataEv>:

  static RuntimeShape ExtendedShape(int new_shape_size,
                                    const RuntimeShape& shape) {
    return RuntimeShape(new_shape_size, shape, 1);
  }
  int32_t* DimsData() { return dims_; }
 8017574:	b480      	push	{r7}
 8017576:	b083      	sub	sp, #12
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	3304      	adds	r3, #4
 8017580:	4618      	mov	r0, r3
 8017582:	370c      	adds	r7, #12
 8017584:	46bd      	mov	sp, r7
 8017586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758a:	4770      	bx	lr

0801758c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  const int32_t* DimsData() const { return dims_; }
 801758c:	b480      	push	{r7}
 801758e:	b083      	sub	sp, #12
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	3304      	adds	r3, #4
 8017598:	4618      	mov	r0, r3
 801759a:	370c      	adds	r7, #12
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr

080175a4 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b086      	sub	sp, #24
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	607a      	str	r2, [r7, #4]
    size_ = dimensions_count;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	68ba      	ldr	r2, [r7, #8]
 80175b4:	601a      	str	r2, [r3, #0]
    int32_t* dst_dims = DimsData();
 80175b6:	68f8      	ldr	r0, [r7, #12]
 80175b8:	f7ff ffdc 	bl	8017574 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80175bc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	461a      	mov	r2, r3
 80175c4:	6879      	ldr	r1, [r7, #4]
 80175c6:	6978      	ldr	r0, [r7, #20]
 80175c8:	f007 f9dd 	bl	801e986 <memcpy>
  }
 80175cc:	bf00      	nop
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 80175dc:	2301      	movs	r3, #1
 80175de:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f7ff ffd3 	bl	801758c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80175e6:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 80175e8:	2300      	movs	r3, #0
 80175ea:	613b      	str	r3, [r7, #16]
 80175ec:	e00b      	b.n	8017606 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x32>
      buffer_size *= dims_data[i];
 80175ee:	693b      	ldr	r3, [r7, #16]
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	68fa      	ldr	r2, [r7, #12]
 80175f4:	4413      	add	r3, r2
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	697b      	ldr	r3, [r7, #20]
 80175fa:	fb02 f303 	mul.w	r3, r2, r3
 80175fe:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8017600:	693b      	ldr	r3, [r7, #16]
 8017602:	3301      	adds	r3, #1
 8017604:	613b      	str	r3, [r7, #16]
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	693a      	ldr	r2, [r7, #16]
 801760c:	429a      	cmp	r2, r3
 801760e:	dbee      	blt.n	80175ee <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1a>
    }
    return buffer_size;
 8017610:	697b      	ldr	r3, [r7, #20]
  }
 8017612:	4618      	mov	r0, r3
 8017614:	3718      	adds	r7, #24
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}

0801761a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 801761a:	b580      	push	{r7, lr}
 801761c:	b086      	sub	sp, #24
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
 8017622:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d103      	bne.n	8017632 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 801762a:	6878      	ldr	r0, [r7, #4]
 801762c:	f7ff ff76 	bl	801751c <_ZN6tflite12RuntimeShapeC1Ev>
 8017630:	e00d      	b.n	801764e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	689b      	ldr	r3, [r3, #8]
 8017636:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	3304      	adds	r3, #4
 8017642:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8017644:	68fa      	ldr	r2, [r7, #12]
 8017646:	6939      	ldr	r1, [r7, #16]
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f7ff ff75 	bl	8017538 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	3718      	adds	r7, #24
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}

08017656 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8017656:	b480      	push	{r7}
 8017658:	b083      	sub	sp, #12
 801765a:	af00      	add	r7, sp, #0
 801765c:	6078      	str	r0, [r7, #4]
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	689b      	ldr	r3, [r3, #8]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	4618      	mov	r0, r3
 8017666:	370c      	adds	r7, #12
 8017668:	46bd      	mov	sp, r7
 801766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766e:	4770      	bx	lr

08017670 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumDimensions(const TfLiteEvalTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteEvalTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) {
 8017670:	b480      	push	{r7}
 8017672:	b083      	sub	sp, #12
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
  return node->inputs == nullptr ? 0 : node->inputs->size;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d003      	beq.n	8017688 <_ZN6tflite9NumInputsEPK10TfLiteNode+0x18>
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	e000      	b.n	801768a <_ZN6tflite9NumInputsEPK10TfLiteNode+0x1a>
 8017688:	2300      	movs	r3, #0
}
 801768a:	4618      	mov	r0, r3
 801768c:	370c      	adds	r7, #12
 801768e:	46bd      	mov	sp, r7
 8017690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017694:	4770      	bx	lr

08017696 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) {
 8017696:	b480      	push	{r7}
 8017698:	b083      	sub	sp, #12
 801769a:	af00      	add	r7, sp, #0
 801769c:	6078      	str	r0, [r7, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d003      	beq.n	80176ae <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x18>
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	e000      	b.n	80176b0 <_ZN6tflite10NumOutputsEPK10TfLiteNode+0x1a>
 80176ae:	2300      	movs	r3, #0
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	370c      	adds	r7, #12
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
    result[v] = std::signbit(vector[v]);
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
 80176bc:	b480      	push	{r7}
 80176be:	b087      	sub	sp, #28
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	60f8      	str	r0, [r7, #12]
 80176c4:	60b9      	str	r1, [r7, #8]
 80176c6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < num_elements; i += 2) {
 80176c8:	2300      	movs	r3, #0
 80176ca:	617b      	str	r3, [r7, #20]
 80176cc:	e02a      	b.n	8017724 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x68>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 80176ce:	697b      	ldr	r3, [r7, #20]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	da00      	bge.n	80176d6 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
 80176d4:	3301      	adds	r3, #1
 80176d6:	105b      	asrs	r3, r3, #1
 80176d8:	461a      	mov	r2, r3
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	4413      	add	r3, r2
 80176de:	f993 3000 	ldrsb.w	r3, [r3]
 80176e2:	011b      	lsls	r3, r3, #4
 80176e4:	b25a      	sxtb	r2, r3
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	6879      	ldr	r1, [r7, #4]
 80176ea:	440b      	add	r3, r1
 80176ec:	1112      	asrs	r2, r2, #4
 80176ee:	b252      	sxtb	r2, r2
 80176f0:	701a      	strb	r2, [r3, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
 80176f2:	697b      	ldr	r3, [r7, #20]
 80176f4:	3301      	adds	r3, #1
 80176f6:	68ba      	ldr	r2, [r7, #8]
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d018      	beq.n	801772e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x72>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	da00      	bge.n	8017704 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x48>
 8017702:	3301      	adds	r3, #1
 8017704:	105b      	asrs	r3, r3, #1
 8017706:	461a      	mov	r2, r3
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	4413      	add	r3, r2
 801770c:	f993 2000 	ldrsb.w	r2, [r3]
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	3301      	adds	r3, #1
 8017714:	6879      	ldr	r1, [r7, #4]
 8017716:	440b      	add	r3, r1
 8017718:	1112      	asrs	r2, r2, #4
 801771a:	b252      	sxtb	r2, r2
 801771c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_elements; i += 2) {
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	3302      	adds	r3, #2
 8017722:	617b      	str	r3, [r7, #20]
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	429a      	cmp	r2, r3
 801772a:	dbd0      	blt.n	80176ce <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x12>
  }
}
 801772c:	e000      	b.n	8017730 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x74>
    if (i + 1 == num_elements) break;
 801772e:	bf00      	nop
}
 8017730:	bf00      	nop
 8017732:	371c      	adds	r7, #28
 8017734:	46bd      	mov	sp, r7
 8017736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773a:	4770      	bx	lr

0801773c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 801773c:	b480      	push	{r7}
 801773e:	b083      	sub	sp, #12
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	ed93 7a00 	vldr	s14, [r3]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	edd3 7a00 	vldr	s15, [r3]
 8017752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801775a:	d501      	bpl.n	8017760 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	e000      	b.n	8017762 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8017760:	687b      	ldr	r3, [r7, #4]
    }
 8017762:	4618      	mov	r0, r3
 8017764:	370c      	adds	r7, #12
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr

0801776e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 801776e:	b480      	push	{r7}
 8017770:	af00      	add	r7, sp, #0
 8017772:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017776:	4618      	mov	r0, r3
 8017778:	46bd      	mov	sp, r7
 801777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777e:	4770      	bx	lr

08017780 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8017780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017784:	b088      	sub	sp, #32
 8017786:	af00      	add	r7, sp, #0
 8017788:	ed87 0b02 	vstr	d0, [r7, #8]
 801778c:	6078      	str	r0, [r7, #4]
 801778e:	6039      	str	r1, [r7, #0]
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 8017790:	f04f 0200 	mov.w	r2, #0
 8017794:	f04f 0300 	mov.w	r3, #0
 8017798:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801779c:	f7e9 f9c4 	bl	8000b28 <__aeabi_dcmpeq>
 80177a0:	4603      	mov	r3, r0
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d006      	beq.n	80177b4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2200      	movs	r2, #0
 80177aa:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	2200      	movs	r2, #0
 80177b0:	601a      	str	r2, [r3, #0]
    return;
 80177b2:	e068      	b.n	8017886 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x106>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80177b4:	6838      	ldr	r0, [r7, #0]
 80177b6:	ed97 0b02 	vldr	d0, [r7, #8]
 80177ba:	f002 fd99 	bl	801a2f0 <frexp>
 80177be:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 80177c2:	f04f 0200 	mov.w	r2, #0
 80177c6:	4b32      	ldr	r3, [pc, #200]	; (8017890 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 80177c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80177cc:	f7e8 ff44 	bl	8000658 <__aeabi_dmul>
 80177d0:	4602      	mov	r2, r0
 80177d2:	460b      	mov	r3, r1
 80177d4:	ec43 2b17 	vmov	d7, r2, r3
 80177d8:	eeb0 0a47 	vmov.f32	s0, s14
 80177dc:	eef0 0a67 	vmov.f32	s1, s15
 80177e0:	f000 f85a 	bl	8017898 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 80177e4:	ec53 2b10 	vmov	r2, r3, d0
 80177e8:	4610      	mov	r0, r2
 80177ea:	4619      	mov	r1, r3
 80177ec:	f7e9 fae4 	bl	8000db8 <__aeabi_d2lz>
 80177f0:	4602      	mov	r2, r0
 80177f2:	460b      	mov	r3, r1
 80177f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 80177f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80177fc:	4925      	ldr	r1, [pc, #148]	; (8017894 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 80177fe:	428a      	cmp	r2, r1
 8017800:	f173 0300 	sbcs.w	r3, r3, #0
 8017804:	db01      	blt.n	801780a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8a>
 8017806:	f005 ff1d 	bl	801d644 <abort>
  if (q_fixed == (1LL << 31)) {
 801780a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801780e:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 8017812:	430b      	orrs	r3, r1
 8017814:	d118      	bne.n	8017848 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 8017816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801781a:	2b00      	cmp	r3, #0
 801781c:	da05      	bge.n	801782a <_ZN6tflite18QuantizeMultiplierEdPlPi+0xaa>
 801781e:	f112 0801 	adds.w	r8, r2, #1
 8017822:	f143 0900 	adc.w	r9, r3, #0
 8017826:	4642      	mov	r2, r8
 8017828:	464b      	mov	r3, r9
 801782a:	f04f 0000 	mov.w	r0, #0
 801782e:	f04f 0100 	mov.w	r1, #0
 8017832:	0850      	lsrs	r0, r2, #1
 8017834:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8017838:	1059      	asrs	r1, r3, #1
 801783a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    ++*shift;
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	1c5a      	adds	r2, r3, #1
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8017848:	f7ff ff91 	bl	801776e <_ZNSt14numeric_limitsIlE3maxEv>
 801784c:	4603      	mov	r3, r0
 801784e:	17da      	asrs	r2, r3, #31
 8017850:	461c      	mov	r4, r3
 8017852:	4615      	mov	r5, r2
 8017854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017858:	4294      	cmp	r4, r2
 801785a:	eb75 0303 	sbcs.w	r3, r5, r3
 801785e:	da01      	bge.n	8017864 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8017860:	f005 fef0 	bl	801d644 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	f113 0f1f 	cmn.w	r3, #31
 801786c:	da08      	bge.n	8017880 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	2200      	movs	r2, #0
 8017872:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8017874:	f04f 0200 	mov.w	r2, #0
 8017878:	f04f 0300 	mov.w	r3, #0
 801787c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8017880:	69ba      	ldr	r2, [r7, #24]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	601a      	str	r2, [r3, #0]
}
 8017886:	3720      	adds	r7, #32
 8017888:	46bd      	mov	sp, r7
 801788a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801788e:	bf00      	nop
 8017890:	41e00000 	.word	0x41e00000
 8017894:	80000001 	.word	0x80000001

08017898 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8017898:	b580      	push	{r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	ed87 0b00 	vstr	d0, [r7]
 80178a2:	ed97 0b00 	vldr	d0, [r7]
 80178a6:	f003 f8ab 	bl	801aa00 <round>
 80178aa:	eeb0 7a40 	vmov.f32	s14, s0
 80178ae:	eef0 7a60 	vmov.f32	s15, s1
 80178b2:	eeb0 0a47 	vmov.f32	s0, s14
 80178b6:	eef0 0a67 	vmov.f32	s1, s15
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80178ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80178ce:	f7e9 fc6f 	bl	80011b0 <_ZSt5roundf>
 80178d2:	eef0 7a40 	vmov.f32	s15, s0
 80178d6:	eeb0 0a67 	vmov.f32	s0, s15
 80178da:	3708      	adds	r7, #8
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}

080178e0 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80178e0:	b480      	push	{r7}
 80178e2:	b083      	sub	sp, #12
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	ed87 0b00 	vstr	d0, [r7]
 80178ea:	683a      	ldr	r2, [r7, #0]
 80178ec:	6879      	ldr	r1, [r7, #4]
 80178ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80178f2:	ec43 2b17 	vmov	d7, r2, r3
 80178f6:	eeb0 0a47 	vmov.f32	s0, s14
 80178fa:	eef0 0a67 	vmov.f32	s1, s15
 80178fe:	370c      	adds	r7, #12
 8017900:	46bd      	mov	sp, r7
 8017902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017906:	4770      	bx	lr

08017908 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8017908:	b480      	push	{r7}
 801790a:	af00      	add	r7, sp, #0
 801790c:	4b02      	ldr	r3, [pc, #8]	; (8017918 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 801790e:	4618      	mov	r0, r3
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr
 8017918:	ffff8000 	.word	0xffff8000

0801791c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 801791c:	b480      	push	{r7}
 801791e:	af00      	add	r7, sp, #0
 8017920:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017924:	4618      	mov	r0, r3
 8017926:	46bd      	mov	sp, r7
 8017928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792c:	4770      	bx	lr

0801792e <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 801792e:	b480      	push	{r7}
 8017930:	af00      	add	r7, sp, #0
 8017932:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017936:	4618      	mov	r0, r3
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr

08017940 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8017940:	b480      	push	{r7}
 8017942:	af00      	add	r7, sp, #0
 8017944:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8017948:	4618      	mov	r0, r3
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr

08017952 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8017952:	b480      	push	{r7}
 8017954:	af00      	add	r7, sp, #0
 8017956:	237f      	movs	r3, #127	; 0x7f
 8017958:	4618      	mov	r0, r3
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr

08017962 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8017962:	b480      	push	{r7}
 8017964:	af00      	add	r7, sp, #0
 8017966:	2300      	movs	r3, #0
 8017968:	4618      	mov	r0, r3
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr

08017972 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8017972:	b480      	push	{r7}
 8017974:	af00      	add	r7, sp, #0
 8017976:	23ff      	movs	r3, #255	; 0xff
 8017978:	4618      	mov	r0, r3
 801797a:	46bd      	mov	sp, r7
 801797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017980:	4770      	bx	lr
 8017982:	0000      	movs	r0, r0
 8017984:	0000      	movs	r0, r0
	...

08017988 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8017988:	b5b0      	push	{r4, r5, r7, lr}
 801798a:	b08e      	sub	sp, #56	; 0x38
 801798c:	af02      	add	r7, sp, #8
 801798e:	60f8      	str	r0, [r7, #12]
 8017990:	60b9      	str	r1, [r7, #8]
 8017992:	607a      	str	r2, [r7, #4]
 8017994:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	4618      	mov	r0, r3
 801799c:	f7e8 fe04 	bl	80005a8 <__aeabi_f2d>
 80179a0:	4604      	mov	r4, r0
 80179a2:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7e8 fdfd 	bl	80005a8 <__aeabi_f2d>
 80179ae:	4602      	mov	r2, r0
 80179b0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80179b2:	4620      	mov	r0, r4
 80179b4:	4629      	mov	r1, r5
 80179b6:	f7e8 fe4f 	bl	8000658 <__aeabi_dmul>
 80179ba:	4602      	mov	r2, r0
 80179bc:	460b      	mov	r3, r1
 80179be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d04b      	beq.n	8017a60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	68db      	ldr	r3, [r3, #12]
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7e8 fdeb 	bl	80005a8 <__aeabi_f2d>
 80179d2:	4602      	mov	r2, r0
 80179d4:	460b      	mov	r3, r1
 80179d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80179da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80179de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80179e2:	f7e8 fc81 	bl	80002e8 <__aeabi_dsub>
 80179e6:	4602      	mov	r2, r0
 80179e8:	460b      	mov	r3, r1
 80179ea:	ec43 2b17 	vmov	d7, r2, r3
 80179ee:	eeb0 0a47 	vmov.f32	s0, s14
 80179f2:	eef0 0a67 	vmov.f32	s1, s15
 80179f6:	f7ff ff73 	bl	80178e0 <_ZSt3absd>
 80179fa:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80179fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a00:	68db      	ldr	r3, [r3, #12]
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7e8 fdd0 	bl	80005a8 <__aeabi_f2d>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	460b      	mov	r3, r1
 8017a0c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8017a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017a14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a18:	f7e8 ff48 	bl	80008ac <__aeabi_ddiv>
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	460b      	mov	r3, r1
 8017a20:	4610      	mov	r0, r2
 8017a22:	4619      	mov	r1, r3
 8017a24:	2301      	movs	r3, #1
 8017a26:	461c      	mov	r4, r3
 8017a28:	a318      	add	r3, pc, #96	; (adr r3, 8017a8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 8017a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a2e:	f7e9 f88f 	bl	8000b50 <__aeabi_dcmple>
 8017a32:	4603      	mov	r3, r0
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d101      	bne.n	8017a3c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8017a38:	2300      	movs	r3, #0
 8017a3a:	461c      	mov	r4, r3
 8017a3c:	b2e3      	uxtb	r3, r4
 8017a3e:	f083 0301 	eor.w	r3, r3, #1
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d00b      	beq.n	8017a60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	691c      	ldr	r4, [r3, #16]
 8017a4c:	4b0c      	ldr	r3, [pc, #48]	; (8017a80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8017a54:	4a0b      	ldr	r2, [pc, #44]	; (8017a84 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8017a56:	490c      	ldr	r1, [pc, #48]	; (8017a88 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	47a0      	blx	r4
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	e009      	b.n	8017a74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8017a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a62:	9300      	str	r3, [sp, #0]
 8017a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	68b9      	ldr	r1, [r7, #8]
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f000 f812 	bl	8017a94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8017a70:	4603      	mov	r3, r0
                                          multiplier);
 8017a72:	bf00      	nop
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3730      	adds	r7, #48	; 0x30
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8017a7c:	f3af 8000 	nop.w
 8017a80:	08021dc8 	.word	0x08021dc8
 8017a84:	08021b90 	.word	0x08021b90
 8017a88:	08021c94 	.word	0x08021c94
 8017a8c:	47ae147b 	.word	0x47ae147b
 8017a90:	3f947ae1 	.word	0x3f947ae1

08017a94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8017a94:	b590      	push	{r4, r7, lr}
 8017a96:	b089      	sub	sp, #36	; 0x24
 8017a98:	af02      	add	r7, sp, #8
 8017a9a:	60f8      	str	r0, [r7, #12]
 8017a9c:	60b9      	str	r1, [r7, #8]
 8017a9e:	607a      	str	r2, [r7, #4]
 8017aa0:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8017aa2:	68bb      	ldr	r3, [r7, #8]
 8017aa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8017aae:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8017ab2:	ee17 0a90 	vmov	r0, s15
 8017ab6:	f7e8 fd77 	bl	80005a8 <__aeabi_f2d>
 8017aba:	4602      	mov	r2, r0
 8017abc:	460b      	mov	r3, r1
 8017abe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	461c      	mov	r4, r3
 8017ac6:	f04f 0200 	mov.w	r2, #0
 8017aca:	f04f 0300 	mov.w	r3, #0
 8017ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017ad2:	f7e9 f847 	bl	8000b64 <__aeabi_dcmpge>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d101      	bne.n	8017ae0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8017adc:	2300      	movs	r3, #0
 8017ade:	461c      	mov	r4, r3
 8017ae0:	b2e3      	uxtb	r3, r4
 8017ae2:	f083 0301 	eor.w	r3, r3, #1
 8017ae6:	b2db      	uxtb	r3, r3
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d00b      	beq.n	8017b04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	691c      	ldr	r4, [r3, #16]
 8017af0:	4b0f      	ldr	r3, [pc, #60]	; (8017b30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	f240 1349 	movw	r3, #329	; 0x149
 8017af8:	4a0e      	ldr	r2, [pc, #56]	; (8017b34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 8017afa:	490f      	ldr	r1, [pc, #60]	; (8017b38 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 8017afc:	68f8      	ldr	r0, [r7, #12]
 8017afe:	47a0      	blx	r4
 8017b00:	2301      	movs	r3, #1
 8017b02:	e010      	b.n	8017b26 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	68db      	ldr	r3, [r3, #12]
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f7e8 fd4d 	bl	80005a8 <__aeabi_f2d>
 8017b0e:	4602      	mov	r2, r0
 8017b10:	460b      	mov	r3, r1
 8017b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017b16:	f7e8 fec9 	bl	80008ac <__aeabi_ddiv>
 8017b1a:	4602      	mov	r2, r0
 8017b1c:	460b      	mov	r3, r1
 8017b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b20:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 8017b24:	2300      	movs	r3, #0
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	371c      	adds	r7, #28
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd90      	pop	{r4, r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	08021dec 	.word	0x08021dec
 8017b34:	08021b90 	.word	0x08021b90
 8017b38:	08021c94 	.word	0x08021c94

08017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
 8017b3c:	b590      	push	{r4, r7, lr}
 8017b3e:	b08b      	sub	sp, #44	; 0x2c
 8017b40:	af02      	add	r7, sp, #8
 8017b42:	6178      	str	r0, [r7, #20]
 8017b44:	ed87 0a04 	vstr	s0, [r7, #16]
 8017b48:	60f9      	str	r1, [r7, #12]
 8017b4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8017b4e:	607a      	str	r2, [r7, #4]
  const float tmp = TfLiteRound(f / scale);
 8017b50:	ed97 7a02 	vldr	s14, [r7, #8]
 8017b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8017b58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017b5c:	eeb0 0a66 	vmov.f32	s0, s13
 8017b60:	f7ff feae 	bl	80178c0 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8017b64:	ed87 0a07 	vstr	s0, [r7, #28]
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017b68:	f7ff fee1 	bl	801792e <_ZNSt14numeric_limitsIlE3minEv>
 8017b6c:	ee07 0a90 	vmov	s15, r0
 8017b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8017b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b80:	db0e      	blt.n	8017ba0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8017b82:	f7ff fdf4 	bl	801776e <_ZNSt14numeric_limitsIlE3maxEv>
 8017b86:	ee07 0a90 	vmov	s15, r0
 8017b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 8017b8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8017b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b9a:	d801      	bhi.n	8017ba0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x64>
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e000      	b.n	8017ba2 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x66>
 8017ba0:	2300      	movs	r3, #0
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
 8017ba2:	76fb      	strb	r3, [r7, #27]
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 8017ba4:	7efb      	ldrb	r3, [r7, #27]
 8017ba6:	f083 0301 	eor.w	r3, r3, #1
 8017baa:	b2db      	uxtb	r3, r3
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d00b      	beq.n	8017bc8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x8c>
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	691c      	ldr	r4, [r3, #16]
 8017bb4:	4b0c      	ldr	r3, [pc, #48]	; (8017be8 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xac>)
 8017bb6:	9300      	str	r3, [sp, #0]
 8017bb8:	f240 1357 	movw	r3, #343	; 0x157
 8017bbc:	4a0b      	ldr	r2, [pc, #44]	; (8017bec <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb0>)
 8017bbe:	490c      	ldr	r1, [pc, #48]	; (8017bf0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xb4>)
 8017bc0:	6978      	ldr	r0, [r7, #20]
 8017bc2:	47a0      	blx	r4
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	e00a      	b.n	8017bde <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0xa2>
  q = zero_point + static_cast<int32_t>(tmp);
 8017bc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8017bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017bd0:	ee17 2a90 	vmov	r2, s15
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	441a      	add	r2, r3
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8017bdc:	2300      	movs	r3, #0
}
 8017bde:	4618      	mov	r0, r3
 8017be0:	3724      	adds	r7, #36	; 0x24
 8017be2:	46bd      	mov	sp, r7
 8017be4:	bd90      	pop	{r4, r7, pc}
 8017be6:	bf00      	nop
 8017be8:	08021e08 	.word	0x08021e08
 8017bec:	08021b90 	.word	0x08021b90
 8017bf0:	08021c94 	.word	0x08021c94

08017bf4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>:

TfLiteStatus CalculateActivationRangeQuantizedImpl(
    TfLiteContext* context, TfLiteFusedActivation activation, int32_t qmin,
    int32_t qmax, TfLiteTensor* output, int32_t* act_min, int32_t* act_max) {
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b08a      	sub	sp, #40	; 0x28
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	607a      	str	r2, [r7, #4]
 8017bfe:	603b      	str	r3, [r7, #0]
 8017c00:	460b      	mov	r3, r1
 8017c02:	72fb      	strb	r3, [r7, #11]
  const auto scale = output->params.scale;
 8017c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c06:	68db      	ldr	r3, [r3, #12]
 8017c08:	627b      	str	r3, [r7, #36]	; 0x24
  const auto zero_point = output->params.zero_point;
 8017c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c0c:	691b      	ldr	r3, [r3, #16]
 8017c0e:	623b      	str	r3, [r7, #32]

  int32_t tmp_q;
  if (activation == kTfLiteActRelu) {
 8017c10:	7afb      	ldrb	r3, [r7, #11]
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d120      	bne.n	8017c58 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x64>
    TF_LITE_ENSURE_OK(context,
 8017c16:	f107 0314 	add.w	r3, r7, #20
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	eddf 0a52 	vldr	s1, [pc, #328]	; 8017d68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017c20:	6a39      	ldr	r1, [r7, #32]
 8017c22:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017c26:	68f8      	ldr	r0, [r7, #12]
 8017c28:	f7ff ff88 	bl	8017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	76fb      	strb	r3, [r7, #27]
 8017c30:	7efb      	ldrb	r3, [r7, #27]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d001      	beq.n	8017c3a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x46>
 8017c36:	7efb      	ldrb	r3, [r7, #27]
 8017c38:	e091      	b.n	8017d5e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017c3a:	f107 0214 	add.w	r2, r7, #20
 8017c3e:	1d3b      	adds	r3, r7, #4
 8017c40:	4611      	mov	r1, r2
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7f3 fab9 	bl	800b1ba <_ZSt3maxIlERKT_S2_S2_>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	681a      	ldr	r2, [r3, #0]
 8017c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c4e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017c50:	683a      	ldr	r2, [r7, #0]
 8017c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c54:	601a      	str	r2, [r3, #0]
 8017c56:	e081      	b.n	8017d5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActRelu6) {
 8017c58:	7afb      	ldrb	r3, [r7, #11]
 8017c5a:	2b03      	cmp	r3, #3
 8017c5c:	d13a      	bne.n	8017cd4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xe0>
    TF_LITE_ENSURE_OK(context,
 8017c5e:	f107 0314 	add.w	r3, r7, #20
 8017c62:	461a      	mov	r2, r3
 8017c64:	eddf 0a40 	vldr	s1, [pc, #256]	; 8017d68 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x174>
 8017c68:	6a39      	ldr	r1, [r7, #32]
 8017c6a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017c6e:	68f8      	ldr	r0, [r7, #12]
 8017c70:	f7ff ff64 	bl	8017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017c74:	4603      	mov	r3, r0
 8017c76:	777b      	strb	r3, [r7, #29]
 8017c78:	7f7b      	ldrb	r3, [r7, #29]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x8e>
 8017c7e:	7f7b      	ldrb	r3, [r7, #29]
 8017c80:	e06d      	b.n	8017d5e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 0.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017c82:	f107 0214 	add.w	r2, r7, #20
 8017c86:	1d3b      	adds	r3, r7, #4
 8017c88:	4611      	mov	r1, r2
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7f3 fa95 	bl	800b1ba <_ZSt3maxIlERKT_S2_S2_>
 8017c90:	4603      	mov	r3, r0
 8017c92:	681a      	ldr	r2, [r3, #0]
 8017c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c96:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017c98:	f107 0314 	add.w	r3, r7, #20
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8017ca2:	6a39      	ldr	r1, [r7, #32]
 8017ca4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017ca8:	68f8      	ldr	r0, [r7, #12]
 8017caa:	f7ff ff47 	bl	8017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	773b      	strb	r3, [r7, #28]
 8017cb2:	7f3b      	ldrb	r3, [r7, #28]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d001      	beq.n	8017cbc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0xc8>
 8017cb8:	7f3b      	ldrb	r3, [r7, #28]
 8017cba:	e050      	b.n	8017d5e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 6.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017cbc:	f107 0214 	add.w	r2, r7, #20
 8017cc0:	463b      	mov	r3, r7
 8017cc2:	4611      	mov	r1, r2
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7f3 fa64 	bl	800b192 <_ZSt3minIlERKT_S2_S2_>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	681a      	ldr	r2, [r3, #0]
 8017cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd0:	601a      	str	r2, [r3, #0]
 8017cd2:	e043      	b.n	8017d5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else if (activation == kTfLiteActReluN1To1) {
 8017cd4:	7afb      	ldrb	r3, [r7, #11]
 8017cd6:	2b02      	cmp	r3, #2
 8017cd8:	d13a      	bne.n	8017d50 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x15c>
    TF_LITE_ENSURE_OK(context,
 8017cda:	f107 0314 	add.w	r3, r7, #20
 8017cde:	461a      	mov	r2, r3
 8017ce0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8017ce4:	6a39      	ldr	r1, [r7, #32]
 8017ce6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017cea:	68f8      	ldr	r0, [r7, #12]
 8017cec:	f7ff ff26 	bl	8017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	77fb      	strb	r3, [r7, #31]
 8017cf4:	7ffb      	ldrb	r3, [r7, #31]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d001      	beq.n	8017cfe <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x10a>
 8017cfa:	7ffb      	ldrb	r3, [r7, #31]
 8017cfc:	e02f      	b.n	8017d5e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, -1.0, tmp_q));
    *act_min = std::max(qmin, tmp_q);
 8017cfe:	f107 0214 	add.w	r2, r7, #20
 8017d02:	1d3b      	adds	r3, r7, #4
 8017d04:	4611      	mov	r1, r2
 8017d06:	4618      	mov	r0, r3
 8017d08:	f7f3 fa57 	bl	800b1ba <_ZSt3maxIlERKT_S2_S2_>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d12:	601a      	str	r2, [r3, #0]
    TF_LITE_ENSURE_OK(context,
 8017d14:	f107 0314 	add.w	r3, r7, #20
 8017d18:	461a      	mov	r2, r3
 8017d1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8017d1e:	6a39      	ldr	r1, [r7, #32]
 8017d20:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017d24:	68f8      	ldr	r0, [r7, #12]
 8017d26:	f7ff ff09 	bl	8017b3c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	77bb      	strb	r3, [r7, #30]
 8017d2e:	7fbb      	ldrb	r3, [r7, #30]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d001      	beq.n	8017d38 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x144>
 8017d34:	7fbb      	ldrb	r3, [r7, #30]
 8017d36:	e012      	b.n	8017d5e <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x16a>
                      Quantize(context, scale, zero_point, 1.0, tmp_q));
    *act_max = std::min(qmax, tmp_q);
 8017d38:	f107 0214 	add.w	r2, r7, #20
 8017d3c:	463b      	mov	r3, r7
 8017d3e:	4611      	mov	r1, r2
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7f3 fa26 	bl	800b192 <_ZSt3minIlERKT_S2_S2_>
 8017d46:	4603      	mov	r3, r0
 8017d48:	681a      	ldr	r2, [r3, #0]
 8017d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d4c:	601a      	str	r2, [r3, #0]
 8017d4e:	e005      	b.n	8017d5c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_+0x168>
  } else {
    *act_min = qmin;
 8017d50:	687a      	ldr	r2, [r7, #4]
 8017d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d54:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8017d56:	683a      	ldr	r2, [r7, #0]
 8017d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5a:	601a      	str	r2, [r3, #0]
  }
  return kTfLiteOk;
 8017d5c:	2300      	movs	r3, #0
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3728      	adds	r7, #40	; 0x28
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bd80      	pop	{r7, pc}
 8017d66:	bf00      	nop
 8017d68:	00000000 	.word	0x00000000

08017d6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8017d6c:	b590      	push	{r4, r7, lr}
 8017d6e:	b08b      	sub	sp, #44	; 0x2c
 8017d70:	af04      	add	r7, sp, #16
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	607a      	str	r2, [r7, #4]
 8017d76:	603b      	str	r3, [r7, #0]
 8017d78:	460b      	mov	r3, r1
 8017d7a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8017d80:	2300      	movs	r3, #0
 8017d82:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	2b03      	cmp	r3, #3
 8017d8a:	d108      	bne.n	8017d9e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8017d8c:	f7ff fde9 	bl	8017962 <_ZNSt14numeric_limitsIhE3minEv>
 8017d90:	4603      	mov	r3, r0
 8017d92:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8017d94:	f7ff fded 	bl	8017972 <_ZNSt14numeric_limitsIhE3maxEv>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	613b      	str	r3, [r7, #16]
 8017d9c:	e025      	b.n	8017dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	2b09      	cmp	r3, #9
 8017da4:	d108      	bne.n	8017db8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8017da6:	f7ff fdcb 	bl	8017940 <_ZNSt14numeric_limitsIaE3minEv>
 8017daa:	4603      	mov	r3, r0
 8017dac:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 8017dae:	f7ff fdd0 	bl	8017952 <_ZNSt14numeric_limitsIaE3maxEv>
 8017db2:	4603      	mov	r3, r0
 8017db4:	613b      	str	r3, [r7, #16]
 8017db6:	e018      	b.n	8017dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	2b07      	cmp	r3, #7
 8017dbe:	d108      	bne.n	8017dd2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 8017dc0:	f7ff fda2 	bl	8017908 <_ZNSt14numeric_limitsIsE3minEv>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 8017dc8:	f7ff fda8 	bl	801791c <_ZNSt14numeric_limitsIsE3maxEv>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	613b      	str	r3, [r7, #16]
 8017dd0:	e00b      	b.n	8017dea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	691c      	ldr	r4, [r3, #16]
 8017dd6:	4b0e      	ldr	r3, [pc, #56]	; (8017e10 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 8017dd8:	9300      	str	r3, [sp, #0]
 8017dda:	f240 138f 	movw	r3, #399	; 0x18f
 8017dde:	4a0d      	ldr	r2, [pc, #52]	; (8017e14 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>)
 8017de0:	490d      	ldr	r1, [pc, #52]	; (8017e18 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xac>)
 8017de2:	68f8      	ldr	r0, [r7, #12]
 8017de4:	47a0      	blx	r4
 8017de6:	2301      	movs	r3, #1
 8017de8:	e00d      	b.n	8017e06 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9a>
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
 8017dea:	7af9      	ldrb	r1, [r7, #11]
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	9302      	str	r3, [sp, #8]
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	9301      	str	r3, [sp, #4]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	9300      	str	r3, [sp, #0]
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	697a      	ldr	r2, [r7, #20]
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	f7ff fef9 	bl	8017bf4 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplEP13TfLiteContext21TfLiteFusedActivationllP12TfLiteTensorPlS6_>
 8017e02:	4603      	mov	r3, r0
                                               output, act_min, act_max);
 8017e04:	bf00      	nop
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	371c      	adds	r7, #28
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd90      	pop	{r4, r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	08021e30 	.word	0x08021e30
 8017e14:	08021b90 	.word	0x08021b90
 8017e18:	08021c94 	.word	0x08021c94

08017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:
  int32_t DimensionsCount() const { return size_; }
 8017e1c:	b480      	push	{r7}
 8017e1e:	b083      	sub	sp, #12
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	4618      	mov	r0, r3
 8017e2a:	370c      	adds	r7, #12
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr

08017e34 <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/micro/flatbuffer_conversions_bridge.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8017e34:	b480      	push	{r7}
 8017e36:	b085      	sub	sp, #20
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8017e42:	683a      	ldr	r2, [r7, #0]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	4413      	add	r3, r2
 8017e48:	1e5a      	subs	r2, r3, #1
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e50:	683a      	ldr	r2, [r7, #0]
 8017e52:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8017e56:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8017e58:	68bb      	ldr	r3, [r7, #8]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3714      	adds	r7, #20
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr
	...

08017e68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b088      	sub	sp, #32
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	60b9      	str	r1, [r7, #8]
 8017e72:	607a      	str	r2, [r7, #4]
 8017e74:	603b      	str	r3, [r7, #0]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f000 f854 	bl	8017f24 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8017e7c:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8017e82:	2300      	movs	r3, #0
 8017e84:	61bb      	str	r3, [r7, #24]
 8017e86:	e011      	b.n	8017eac <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8017e88:	69ba      	ldr	r2, [r7, #24]
 8017e8a:	4613      	mov	r3, r2
 8017e8c:	005b      	lsls	r3, r3, #1
 8017e8e:	4413      	add	r3, r2
 8017e90:	009b      	lsls	r3, r3, #2
 8017e92:	461a      	mov	r2, r3
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	4413      	add	r3, r2
 8017e98:	685b      	ldr	r3, [r3, #4]
 8017e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e9e:	d102      	bne.n	8017ea6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3e>
      ++current_node_request_count;
 8017ea0:	69fb      	ldr	r3, [r7, #28]
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8017ea6:	69bb      	ldr	r3, [r7, #24]
 8017ea8:	3301      	adds	r3, #1
 8017eaa:	61bb      	str	r3, [r7, #24]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	699b      	ldr	r3, [r3, #24]
 8017eb0:	69ba      	ldr	r2, [r7, #24]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d3e8      	bcc.n	8017e88 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x20>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8017eb6:	69fb      	ldr	r3, [r7, #28]
 8017eb8:	2b0b      	cmp	r3, #11
 8017eba:	d905      	bls.n	8017ec8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x60>
    MicroPrintf("Scratch buffer request exeeds limit per operator (%d)",
 8017ebc:	4917      	ldr	r1, [pc, #92]	; (8017f1c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb4>)
 8017ebe:	4818      	ldr	r0, [pc, #96]	; (8017f20 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xb8>)
 8017ec0:	f000 f83f 	bl	8017f42 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>
                kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	e024      	b.n	8017f12 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xaa>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	699a      	ldr	r2, [r3, #24]
 8017ecc:	4613      	mov	r3, r2
 8017ece:	005b      	lsls	r3, r3, #1
 8017ed0:	4413      	add	r3, r2
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	461a      	mov	r2, r3
  internal::ScratchBufferRequest* current_request =
 8017ed6:	697b      	ldr	r3, [r7, #20]
 8017ed8:	4413      	add	r3, r2
 8017eda:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	461a      	mov	r2, r3
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	6013      	str	r3, [r2, #0]
 8017ee4:	6053      	str	r3, [r2, #4]
 8017ee6:	6093      	str	r3, [r2, #8]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8017ee8:	693b      	ldr	r3, [r7, #16]
 8017eea:	68ba      	ldr	r2, [r7, #8]
 8017eec:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ef4:	605a      	str	r2, [r3, #4]
  current_request->subgraph_idx = subgraph_idx;
 8017ef6:	693b      	ldr	r3, [r7, #16]
 8017ef8:	687a      	ldr	r2, [r7, #4]
 8017efa:	609a      	str	r2, [r3, #8]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	699b      	ldr	r3, [r3, #24]
 8017f00:	461a      	mov	r2, r3
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	699b      	ldr	r3, [r3, #24]
 8017f0a:	1c5a      	adds	r2, r3, #1
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	619a      	str	r2, [r3, #24]
  return kTfLiteOk;
 8017f10:	2300      	movs	r3, #0
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3720      	adds	r7, #32
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	08024788 	.word	0x08024788
 8017f20:	08022014 	.word	0x08022014

08017f24 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
  }

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	69db      	ldr	r3, [r3, #28]
 8017f30:	2104      	movs	r1, #4
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7ff ff7e 	bl	8017e34 <_ZN6tflite14AlignPointerUpEPhj>
 8017f38:	4603      	mov	r3, r0
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3708      	adds	r7, #8
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}

08017f42 <_ZN6tflite6UnusedIJRA54_KcRKjEEEvDpOT_>:
namespace tflite {

// From
// https://stackoverflow.com/questions/23235910/variadic-unused-function-macro
template <typename... Args>
void Unused(Args&&... args) {
 8017f42:	b480      	push	{r7}
 8017f44:	b083      	sub	sp, #12
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	6078      	str	r0, [r7, #4]
 8017f4a:	6039      	str	r1, [r7, #0]
  (void)(sizeof...(args));
}
 8017f4c:	bf00      	nop
 8017f4e:	370c      	adds	r7, #12
 8017f50:	46bd      	mov	sp, r7
 8017f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f56:	4770      	bx	lr

08017f58 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>:
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 8017f58:	b480      	push	{r7}
 8017f5a:	b083      	sub	sp, #12
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	4618      	mov	r0, r3
 8017f66:	370c      	adds	r7, #12
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f6e:	4770      	bx	lr

08017f70 <_ZN6tflite10MicroGraph14GetAllocationsEv>:
    current_subgraph_index_ = subgraph_idx;
  }

  // Gets the list of alloctions for each subgraph. This is the source of truth
  // for all per-subgraph allocation data.
  SubgraphAllocations* GetAllocations() { return subgraph_allocations_; }
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	691b      	ldr	r3, [r3, #16]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	370c      	adds	r7, #12
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr

08017f88 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
#include <cstdint>

#include "edge-impulse-sdk/tensorflow/lite/micro/micro_log.h"

namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 8017f88:	b480      	push	{r7}
 8017f8a:	b085      	sub	sp, #20
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
 8017f94:	603b      	str	r3, [r7, #0]
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 8017f96:	4a0c      	ldr	r2, [pc, #48]	; (8017fc8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x40>)
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	601a      	str	r2, [r3, #0]
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	605a      	str	r2, [r3, #4]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	683a      	ldr	r2, [r7, #0]
 8017fa6:	609a      	str	r2, [r3, #8]
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	687a      	ldr	r2, [r7, #4]
 8017fac:	60da      	str	r2, [r3, #12]
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	611a      	str	r2, [r3, #16]
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	615a      	str	r2, [r3, #20]
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3714      	adds	r7, #20
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc6:	4770      	bx	lr
 8017fc8:	08024794 	.word	0x08024794

08017fcc <_ZN6tflite12MicroContextD1Ev>:

MicroContext::~MicroContext() {}
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	4a04      	ldr	r2, [pc, #16]	; (8017fe8 <_ZN6tflite12MicroContextD1Ev+0x1c>)
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	601a      	str	r2, [r3, #0]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	4618      	mov	r0, r3
 8017fde:	370c      	adds	r7, #12
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe6:	4770      	bx	lr
 8017fe8:	08024794 	.word	0x08024794

08017fec <_ZN6tflite12MicroContextD0Ev>:
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b082      	sub	sp, #8
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
 8017ff4:	6878      	ldr	r0, [r7, #4]
 8017ff6:	f7ff ffe9 	bl	8017fcc <_ZN6tflite12MicroContextD1Ev>
 8017ffa:	2118      	movs	r1, #24
 8017ffc:	6878      	ldr	r0, [r7, #4]
 8017ffe:	f002 f85b 	bl	801a0b8 <_ZdlPvj>
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	4618      	mov	r0, r3
 8018006:	3708      	adds	r7, #8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
 801800c:	b580      	push	{r7, lr}
 801800e:	b082      	sub	sp, #8
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
 8018014:	6039      	str	r1, [r7, #0]
  return allocator_.AllocatePersistentBuffer(bytes);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	685a      	ldr	r2, [r3, #4]
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	3314      	adds	r3, #20
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	6839      	ldr	r1, [r7, #0]
 8018026:	4610      	mov	r0, r2
 8018028:	4798      	blx	r3
 801802a:	4603      	mov	r3, r0
}
 801802c:	4618      	mov	r0, r3
 801802e:	3708      	adds	r7, #8
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroContext::RequestScratchBufferInArena(size_t bytes,
                                                       int* buffer_idx) {
 8018034:	b590      	push	{r4, r7, lr}
 8018036:	b085      	sub	sp, #20
 8018038:	af00      	add	r7, sp, #0
 801803a:	60f8      	str	r0, [r7, #12]
 801803c:	60b9      	str	r1, [r7, #8]
 801803e:	607a      	str	r2, [r7, #4]
  return allocator_.RequestScratchBufferInArena(
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	685c      	ldr	r4, [r3, #4]
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	689b      	ldr	r3, [r3, #8]
  return allocator_.RequestScratchBufferInArena(
 8018048:	4618      	mov	r0, r3
 801804a:	f7ff ff85 	bl	8017f58 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 801804e:	4602      	mov	r2, r0
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	68b9      	ldr	r1, [r7, #8]
 8018054:	4620      	mov	r0, r4
 8018056:	f7ff ff07 	bl	8017e68 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
 801805a:	4603      	mov	r3, r0
}
 801805c:	4618      	mov	r0, r3
 801805e:	3714      	adds	r7, #20
 8018060:	46bd      	mov	sp, r7
 8018062:	bd90      	pop	{r4, r7, pc}

08018064 <_ZN6tflite12MicroContext16GetScratchBufferEi>:

void* MicroContext::GetScratchBuffer(int buffer_idx) {
 8018064:	b480      	push	{r7}
 8018066:	b085      	sub	sp, #20
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	691a      	ldr	r2, [r3, #16]
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	009b      	lsls	r3, r3, #2
 8018076:	4413      	add	r3, r2
 8018078:	60fb      	str	r3, [r7, #12]
  return handle->data;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	681b      	ldr	r3, [r3, #0]
}
 801807e:	4618      	mov	r0, r3
 8018080:	3714      	adds	r7, #20
 8018082:	46bd      	mov	sp, r7
 8018084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018088:	4770      	bx	lr

0801808a <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 801808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af02      	add	r7, sp, #8
 8018092:	6078      	str	r0, [r7, #4]
 8018094:	6039      	str	r1, [r7, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	685d      	ldr	r5, [r3, #4]
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	3304      	adds	r3, #4
 80180a2:	681c      	ldr	r4, [r3, #0]
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	68de      	ldr	r6, [r3, #12]
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	689b      	ldr	r3, [r3, #8]
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7ff ff5f 	bl	8017f70 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 80180b2:	4680      	mov	r8, r0
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	689b      	ldr	r3, [r3, #8]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7ff ff4d 	bl	8017f58 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 80180be:	4603      	mov	r3, r0
 80180c0:	9300      	str	r3, [sp, #0]
 80180c2:	683b      	ldr	r3, [r7, #0]
 80180c4:	4642      	mov	r2, r8
 80180c6:	4631      	mov	r1, r6
 80180c8:	4628      	mov	r0, r5
 80180ca:	47a0      	blx	r4
 80180cc:	4603      	mov	r3, r0
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3708      	adds	r7, #8
 80180d2:	46bd      	mov	sp, r7
 80180d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180d8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:

int MicroContext::GetTensorIndex(int index, int max_size,
                                 const int* tensor_indices) {
 80180d8:	b480      	push	{r7}
 80180da:	b087      	sub	sp, #28
 80180dc:	af00      	add	r7, sp, #0
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	60b9      	str	r1, [r7, #8]
 80180e2:	607a      	str	r2, [r7, #4]
 80180e4:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 80180e6:	68bb      	ldr	r3, [r7, #8]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	db0f      	blt.n	801810c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	da0b      	bge.n	801810c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 80180f4:	68bb      	ldr	r3, [r7, #8]
 80180f6:	009b      	lsls	r3, r3, #2
 80180f8:	683a      	ldr	r2, [r7, #0]
 80180fa:	4413      	add	r3, r2
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018106:	d001      	beq.n	801810c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x34>
      return tensor_index;
 8018108:	697b      	ldr	r3, [r7, #20]
 801810a:	e001      	b.n	8018110 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0x38>
    }
  }
  return -1;
 801810c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018110:	4618      	mov	r0, r3
 8018112:	371c      	adds	r7, #28
 8018114:	46bd      	mov	sp, r7
 8018116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811a:	4770      	bx	lr

0801811c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempInputTensor(const TfLiteNode* node,
                                                    int index) {
 801811c:	b580      	push	{r7, lr}
 801811e:	b086      	sub	sp, #24
 8018120:	af00      	add	r7, sp, #0
 8018122:	60f8      	str	r0, [r7, #12]
 8018124:	60b9      	str	r1, [r7, #8]
 8018126:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	681a      	ldr	r2, [r3, #0]
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	3304      	adds	r3, #4
 8018134:	6879      	ldr	r1, [r7, #4]
 8018136:	68f8      	ldr	r0, [r7, #12]
 8018138:	f7ff ffce 	bl	80180d8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 801813c:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 801813e:	697b      	ldr	r3, [r7, #20]
 8018140:	2b00      	cmp	r3, #0
 8018142:	da01      	bge.n	8018148 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 8018144:	2300      	movs	r3, #0
 8018146:	e008      	b.n	801815a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	3314      	adds	r3, #20
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	6979      	ldr	r1, [r7, #20]
 8018152:	68f8      	ldr	r0, [r7, #12]
 8018154:	4798      	blx	r3
 8018156:	4603      	mov	r3, r0
 8018158:	bf00      	nop
}
 801815a:	4618      	mov	r0, r3
 801815c:	3718      	adds	r7, #24
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}

08018162 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempOutputTensor(const TfLiteNode* node,
                                                     int index) {
 8018162:	b580      	push	{r7, lr}
 8018164:	b086      	sub	sp, #24
 8018166:	af00      	add	r7, sp, #0
 8018168:	60f8      	str	r0, [r7, #12]
 801816a:	60b9      	str	r1, [r7, #8]
 801816c:	607a      	str	r2, [r7, #4]
  const int tensor_index =
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	3304      	adds	r3, #4
 801817a:	6879      	ldr	r1, [r7, #4]
 801817c:	68f8      	ldr	r0, [r7, #12]
 801817e:	f7ff ffab 	bl	80180d8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 8018182:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	2b00      	cmp	r3, #0
 8018188:	da01      	bge.n	801818e <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 801818a:	2300      	movs	r3, #0
 801818c:	e008      	b.n	80181a0 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	3314      	adds	r3, #20
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	6979      	ldr	r1, [r7, #20]
 8018198:	68f8      	ldr	r0, [r7, #12]
 801819a:	4798      	blx	r3
 801819c:	4603      	mov	r3, r0
 801819e:	bf00      	nop
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3718      	adds	r7, #24
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}

080181a8 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:

TfLiteTensor* MicroContext::AllocateTempIntermediateTensor(
    const TfLiteNode* node, int index) {
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b086      	sub	sp, #24
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	60f8      	str	r0, [r7, #12]
 80181b0:	60b9      	str	r1, [r7, #8]
 80181b2:	607a      	str	r2, [r7, #4]
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80181b4:	68bb      	ldr	r3, [r7, #8]
 80181b6:	689b      	ldr	r3, [r3, #8]
 80181b8:	681a      	ldr	r2, [r3, #0]
                                          node->intermediates->data);
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	689b      	ldr	r3, [r3, #8]
 80181be:	3304      	adds	r3, #4
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 80181c0:	6879      	ldr	r1, [r7, #4]
 80181c2:	68f8      	ldr	r0, [r7, #12]
 80181c4:	f7ff ff88 	bl	80180d8 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
 80181c8:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	da01      	bge.n	80181d4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x2c>
    return nullptr;
 80181d0:	2300      	movs	r3, #0
 80181d2:	e008      	b.n	80181e6 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  }
  return AllocateTempTfLiteTensor(tensor_index);
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	3314      	adds	r3, #20
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	6979      	ldr	r1, [r7, #20]
 80181de:	68f8      	ldr	r0, [r7, #12]
 80181e0:	4798      	blx	r3
 80181e2:	4603      	mov	r3, r0
 80181e4:	bf00      	nop
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3718      	adds	r7, #24
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}

080181ee <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b082      	sub	sp, #8
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	6078      	str	r0, [r7, #4]
 80181f6:	6039      	str	r1, [r7, #0]
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	685a      	ldr	r2, [r3, #4]
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	685b      	ldr	r3, [r3, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	3308      	adds	r3, #8
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	6839      	ldr	r1, [r7, #0]
 8018208:	4610      	mov	r0, r2
 801820a:	4798      	blx	r3
 801820c:	bf00      	nop
}
 801820e:	3708      	adds	r7, #8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <_ZN6tflite12MicroContext13GetEvalTensorEi>:

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
 8018214:	b590      	push	{r4, r7, lr}
 8018216:	b083      	sub	sp, #12
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	689b      	ldr	r3, [r3, #8]
 8018222:	4618      	mov	r0, r3
 8018224:	f7ff fea4 	bl	8017f70 <_ZN6tflite10MicroGraph14GetAllocationsEv>
 8018228:	4604      	mov	r4, r0
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	689b      	ldr	r3, [r3, #8]
 801822e:	4618      	mov	r0, r3
 8018230:	f7ff fe92 	bl	8017f58 <_ZN6tflite10MicroGraph23GetCurrentSubgraphIndexEv>
 8018234:	4603      	mov	r3, r0
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	4423      	add	r3, r4
              .tensors[tensor_idx];
 801823a:	6859      	ldr	r1, [r3, #4]
 801823c:	683a      	ldr	r2, [r7, #0]
 801823e:	4613      	mov	r3, r2
 8018240:	005b      	lsls	r3, r3, #1
 8018242:	4413      	add	r3, r2
 8018244:	009b      	lsls	r3, r3, #2
 8018246:	440b      	add	r3, r1
}
 8018248:	4618      	mov	r0, r3
 801824a:	370c      	adds	r7, #12
 801824c:	46bd      	mov	sp, r7
 801824e:	bd90      	pop	{r4, r7, pc}

08018250 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 8018250:	b40e      	push	{r1, r2, r3}
 8018252:	b580      	push	{r7, lr}
 8018254:	b085      	sub	sp, #20
 8018256:	af00      	add	r7, sp, #0
 8018258:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 801825a:	f107 0320 	add.w	r3, r7, #32
 801825e:	60fb      	str	r3, [r7, #12]
  Log(format, args);
 8018260:	68f9      	ldr	r1, [r7, #12]
 8018262:	69f8      	ldr	r0, [r7, #28]
 8018264:	f000 f81e 	bl	80182a4 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 8018268:	bf00      	nop
 801826a:	3714      	adds	r7, #20
 801826c:	46bd      	mov	sp, r7
 801826e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018272:	b003      	add	sp, #12
 8018274:	4770      	bx	lr

08018276 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>:
  void* external_context_payload_ = nullptr;

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
 8018276:	b480      	push	{r7}
 8018278:	b083      	sub	sp, #12
 801827a:	af00      	add	r7, sp, #0
 801827c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<MicroContext*>(context->impl_);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	689b      	ldr	r3, [r3, #8]
}
 8018282:	4618      	mov	r0, r3
 8018284:	370c      	adds	r7, #12
 8018286:	46bd      	mov	sp, r7
 8018288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828c:	4770      	bx	lr

0801828e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>:
void Unused(Args&&... args) {
 801828e:	b480      	push	{r7}
 8018290:	b083      	sub	sp, #12
 8018292:	af00      	add	r7, sp, #0
 8018294:	6078      	str	r0, [r7, #4]
 8018296:	6039      	str	r1, [r7, #0]
}
 8018298:	bf00      	nop
 801829a:	370c      	adds	r7, #12
 801829c:	46bd      	mov	sp, r7
 801829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a2:	4770      	bx	lr

080182a4 <_Z3LogPKcSt9__va_list>:
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
#include "edge-impulse-sdk/tensorflow/lite/micro/debug_log.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

void Log(const char* format, va_list args) {
 80182a4:	b480      	push	{r7}
 80182a6:	b083      	sub	sp, #12
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	6039      	str	r1, [r7, #0]
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 80182ae:	bf00      	nop
 80182b0:	370c      	adds	r7, #12
 80182b2:	46bd      	mov	sp, r7
 80182b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b8:	4770      	bx	lr

080182ba <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80182ba:	b580      	push	{r7, lr}
 80182bc:	b082      	sub	sp, #8
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d101      	bne.n	80182cc <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 80182c8:	f005 f9bc 	bl	801d644 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
}
 80182d0:	4618      	mov	r0, r3
 80182d2:	3708      	adds	r7, #8
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 80182d8:	b580      	push	{r7, lr}
 80182da:	b082      	sub	sp, #8
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d101      	bne.n	80182ea <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x12>
 80182e6:	f005 f9ad 	bl	801d644 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3708      	adds	r7, #8
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}

080182f6 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 80182f6:	b580      	push	{r7, lr}
 80182f8:	b082      	sub	sp, #8
 80182fa:	af00      	add	r7, sp, #0
 80182fc:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d101      	bne.n	8018308 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 8018304:	f005 f99e 	bl	801d644 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
}
 801830c:	4618      	mov	r0, r3
 801830e:	3708      	adds	r7, #8
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d101      	bne.n	8018326 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x12>
 8018322:	f005 f98f 	bl	801d644 <abort>
  return reinterpret_cast<T*>(tensor->data.raw);
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	681b      	ldr	r3, [r3, #0]
}
 801832a:	4618      	mov	r0, r3
 801832c:	3708      	adds	r7, #8
 801832e:	46bd      	mov	sp, r7
 8018330:	bd80      	pop	{r7, pc}

08018332 <_ZNK6tflite12RuntimeShape4DimsEi>:
  int32_t Dims(int i) const {
 8018332:	b580      	push	{r7, lr}
 8018334:	b082      	sub	sp, #8
 8018336:	af00      	add	r7, sp, #0
 8018338:	6078      	str	r0, [r7, #4]
 801833a:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	2b00      	cmp	r3, #0
 8018340:	da01      	bge.n	8018346 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8018342:	f005 f97f 	bl	801d644 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	429a      	cmp	r2, r3
 801834e:	db01      	blt.n	8018354 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8018350:	f005 f978 	bl	801d644 <abort>
    return dims_[i];
 8018354:	687a      	ldr	r2, [r7, #4]
 8018356:	683b      	ldr	r3, [r7, #0]
 8018358:	009b      	lsls	r3, r3, #2
 801835a:	4413      	add	r3, r2
 801835c:	685b      	ldr	r3, [r3, #4]
  }
 801835e:	4618      	mov	r0, r3
 8018360:	3708      	adds	r7, #8
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
	...

08018368 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8018368:	b480      	push	{r7}
 801836a:	af00      	add	r7, sp, #0
 801836c:	4b04      	ldr	r3, [pc, #16]	; (8018380 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 801836e:	ee07 3a90 	vmov	s15, r3
 8018372:	eeb0 0a67 	vmov.f32	s0, s15
 8018376:	46bd      	mov	sp, r7
 8018378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837c:	4770      	bx	lr
 801837e:	bf00      	nop
 8018380:	7f7fffff 	.word	0x7f7fffff

08018384 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8018384:	b480      	push	{r7}
 8018386:	af00      	add	r7, sp, #0
 8018388:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 801838c:	ee07 3a90 	vmov	s15, r3
 8018390:	eeb0 0a67 	vmov.f32	s0, s15
 8018394:	46bd      	mov	sp, r7
 8018396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839a:	4770      	bx	lr

0801839c <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
      break;
  }
}

template <typename T>
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 801839c:	b580      	push	{r7, lr}
 801839e:	b084      	sub	sp, #16
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80183a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80183aa:	ed87 1a01 	vstr	s2, [r7, #4]
                                      T output_activation_max) {
  using std::max;
  using std::min;
  return min(max(x, output_activation_min), output_activation_max);
 80183ae:	f107 0208 	add.w	r2, r7, #8
 80183b2:	f107 030c 	add.w	r3, r7, #12
 80183b6:	4611      	mov	r1, r2
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7f1 fcf5 	bl	8009da8 <_ZSt3maxIfERKT_S2_S2_>
 80183be:	4602      	mov	r2, r0
 80183c0:	1d3b      	adds	r3, r7, #4
 80183c2:	4619      	mov	r1, r3
 80183c4:	4610      	mov	r0, r2
 80183c6:	f7ff f9b9 	bl	801773c <_ZSt3minIfERKT_S2_S2_>
 80183ca:	4603      	mov	r3, r0
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	ee07 3a90 	vmov	s15, r3
}
 80183d2:	eeb0 0a67 	vmov.f32	s0, s15
 80183d6:	3710      	adds	r7, #16
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd80      	pop	{r7, pc}

080183dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 80183dc:	b580      	push	{r7, lr}
 80183de:	b084      	sub	sp, #16
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	4603      	mov	r3, r0
 80183e4:	60b9      	str	r1, [r7, #8]
 80183e6:	607a      	str	r2, [r7, #4]
 80183e8:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 80183ea:	7bfb      	ldrb	r3, [r7, #15]
 80183ec:	2b01      	cmp	r3, #1
 80183ee:	d10b      	bne.n	8018408 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	f04f 0200 	mov.w	r2, #0
 80183f6:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 80183f8:	f7ff ffb6 	bl	8018368 <_ZNSt14numeric_limitsIfE3maxEv>
 80183fc:	eef0 7a40 	vmov.f32	s15, s0
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8018406:	e023      	b.n	8018450 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8018408:	7bfb      	ldrb	r3, [r7, #15]
 801840a:	2b03      	cmp	r3, #3
 801840c:	d107      	bne.n	801841e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	f04f 0200 	mov.w	r2, #0
 8018414:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	4a0f      	ldr	r2, [pc, #60]	; (8018458 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801841a:	601a      	str	r2, [r3, #0]
}
 801841c:	e018      	b.n	8018450 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801841e:	7bfb      	ldrb	r3, [r7, #15]
 8018420:	2b02      	cmp	r3, #2
 8018422:	d107      	bne.n	8018434 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8018424:	68bb      	ldr	r3, [r7, #8]
 8018426:	4a0d      	ldr	r2, [pc, #52]	; (801845c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8018428:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018430:	601a      	str	r2, [r3, #0]
}
 8018432:	e00d      	b.n	8018450 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8018434:	f7ff ffa6 	bl	8018384 <_ZNSt14numeric_limitsIfE6lowestEv>
 8018438:	eef0 7a40 	vmov.f32	s15, s0
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8018442:	f7ff ff91 	bl	8018368 <_ZNSt14numeric_limitsIfE3maxEv>
 8018446:	eef0 7a40 	vmov.f32	s15, s0
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	edc3 7a00 	vstr	s15, [r3]
}
 8018450:	bf00      	nop
 8018452:	3710      	adds	r7, #16
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	40c00000 	.word	0x40c00000
 801845c:	bf800000 	.word	0xbf800000

08018460 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8018460:	b480      	push	{r7}
 8018462:	b085      	sub	sp, #20
 8018464:	af00      	add	r7, sp, #0
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	60b9      	str	r1, [r7, #8]
 801846a:	607a      	str	r2, [r7, #4]
}
 801846c:	bf00      	nop
 801846e:	3714      	adds	r7, #20
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr

08018478 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8018478:	b590      	push	{r4, r7, lr}
 801847a:	b087      	sub	sp, #28
 801847c:	af00      	add	r7, sp, #0
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	60b9      	str	r1, [r7, #8]
 8018482:	607a      	str	r2, [r7, #4]
 8018484:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8018486:	68b9      	ldr	r1, [r7, #8]
 8018488:	68f8      	ldr	r0, [r7, #12]
 801848a:	f7ff ff52 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 801848e:	4604      	mov	r4, r0
 8018490:	6839      	ldr	r1, [r7, #0]
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f7ff ff4d 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018498:	4603      	mov	r3, r0
 801849a:	429c      	cmp	r4, r3
 801849c:	d001      	beq.n	80184a2 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 801849e:	f005 f8d1 	bl	801d644 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 80184a2:	68b9      	ldr	r1, [r7, #8]
 80184a4:	68f8      	ldr	r0, [r7, #12]
 80184a6:	f7ff ff44 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 80184aa:	4603      	mov	r3, r0
 80184ac:	613b      	str	r3, [r7, #16]
 80184ae:	6839      	ldr	r1, [r7, #0]
 80184b0:	6878      	ldr	r0, [r7, #4]
 80184b2:	f7ff ff3e 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 80184b6:	4603      	mov	r3, r0
 80184b8:	617b      	str	r3, [r7, #20]
 80184ba:	f107 0214 	add.w	r2, r7, #20
 80184be:	f107 0310 	add.w	r3, r7, #16
 80184c2:	4611      	mov	r1, r2
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f2 fe64 	bl	800b192 <_ZSt3minIlERKT_S2_S2_>
 80184ca:	4603      	mov	r3, r0
 80184cc:	681b      	ldr	r3, [r3, #0]
}
 80184ce:	4618      	mov	r0, r3
 80184d0:	371c      	adds	r7, #28
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd90      	pop	{r4, r7, pc}

080184d6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 80184d6:	b580      	push	{r7, lr}
 80184d8:	b086      	sub	sp, #24
 80184da:	af00      	add	r7, sp, #0
 80184dc:	6078      	str	r0, [r7, #4]
 80184de:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7ff fc9b 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80184e6:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	db03      	blt.n	80184f6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80184ee:	683a      	ldr	r2, [r7, #0]
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	429a      	cmp	r2, r3
 80184f4:	db01      	blt.n	80184fa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 80184f6:	f005 f8a5 	bl	801d644 <abort>
  const auto* dims_data = shape.DimsData();
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7ff f846 	bl	801758c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8018500:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8018502:	2301      	movs	r3, #1
 8018504:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8018506:	2300      	movs	r3, #0
 8018508:	613b      	str	r3, [r7, #16]
 801850a:	e011      	b.n	8018530 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x5a>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 801850c:	693a      	ldr	r2, [r7, #16]
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	429a      	cmp	r2, r3
 8018512:	d005      	beq.n	8018520 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4a>
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	009b      	lsls	r3, r3, #2
 8018518:	68ba      	ldr	r2, [r7, #8]
 801851a:	4413      	add	r3, r2
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	e000      	b.n	8018522 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x4c>
 8018520:	2301      	movs	r3, #1
 8018522:	697a      	ldr	r2, [r7, #20]
 8018524:	fb02 f303 	mul.w	r3, r2, r3
 8018528:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	3301      	adds	r3, #1
 801852e:	613b      	str	r3, [r7, #16]
 8018530:	693a      	ldr	r2, [r7, #16]
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	429a      	cmp	r2, r3
 8018536:	dbe9      	blt.n	801850c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x36>
  }
  return flat_size;
 8018538:	697b      	ldr	r3, [r7, #20]
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}

08018542 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8018542:	b590      	push	{r4, r7, lr}
 8018544:	b091      	sub	sp, #68	; 0x44
 8018546:	af00      	add	r7, sp, #0
 8018548:	60f8      	str	r0, [r7, #12]
 801854a:	60b9      	str	r1, [r7, #8]
 801854c:	607a      	str	r2, [r7, #4]
 801854e:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	69db      	ldr	r3, [r3, #28]
 8018554:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	6a1b      	ldr	r3, [r3, #32]
 801855a:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 801855c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801855e:	f7ff fc5d 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018562:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8018564:	6838      	ldr	r0, [r7, #0]
 8018566:	f7ff fc59 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801856a:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 801856c:	6a3b      	ldr	r3, [r7, #32]
 801856e:	3b01      	subs	r3, #1
 8018570:	4619      	mov	r1, r3
 8018572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8018574:	f7ff ffaf 	bl	80184d6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8018578:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 801857a:	69fb      	ldr	r3, [r7, #28]
 801857c:	1e99      	subs	r1, r3, #2
 801857e:	6a3b      	ldr	r3, [r7, #32]
 8018580:	3b01      	subs	r3, #1
 8018582:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018584:	6838      	ldr	r0, [r7, #0]
 8018586:	f7ff ff77 	bl	8018478 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801858a:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801858c:	69fb      	ldr	r3, [r7, #28]
 801858e:	3b01      	subs	r3, #1
 8018590:	4619      	mov	r1, r3
 8018592:	6838      	ldr	r0, [r7, #0]
 8018594:	f7ff fecd 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018598:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 801859a:	2300      	movs	r3, #0
 801859c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801859e:	e05e      	b.n	801865e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80185a0:	2300      	movs	r3, #0
 80185a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80185a4:	e054      	b.n	8018650 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x10e>
      float total = 0.f;
 80185a6:	f04f 0300 	mov.w	r3, #0
 80185aa:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80185ac:	2300      	movs	r3, #0
 80185ae:	633b      	str	r3, [r7, #48]	; 0x30
 80185b0:	e020      	b.n	80185f4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xb2>
        total += input_data[b * accum_depth + d] *
 80185b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185b4:	693a      	ldr	r2, [r7, #16]
 80185b6:	fb03 f202 	mul.w	r2, r3, r2
 80185ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185bc:	4413      	add	r3, r2
 80185be:	009b      	lsls	r3, r3, #2
 80185c0:	687a      	ldr	r2, [r7, #4]
 80185c2:	4413      	add	r3, r2
 80185c4:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 80185c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ca:	693a      	ldr	r2, [r7, #16]
 80185cc:	fb03 f202 	mul.w	r2, r3, r2
 80185d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d2:	4413      	add	r3, r2
 80185d4:	009b      	lsls	r3, r3, #2
 80185d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185d8:	4413      	add	r3, r2
 80185da:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 80185de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80185e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80185e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80185ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80185ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f0:	3301      	adds	r3, #1
 80185f2:	633b      	str	r3, [r7, #48]	; 0x30
 80185f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185f6:	693b      	ldr	r3, [r7, #16]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	dbda      	blt.n	80185b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x70>
      }
      float bias_value = 0.0f;
 80185fc:	f04f 0300 	mov.w	r3, #0
 8018600:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 8018602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018604:	2b00      	cmp	r3, #0
 8018606:	d005      	beq.n	8018614 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xd2>
        bias_value = bias_data[out_c];
 8018608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860a:	009b      	lsls	r3, r3, #2
 801860c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801860e:	4413      	add	r3, r2
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8018614:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8018618:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801861c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018624:	fb03 f202 	mul.w	r2, r3, r2
 8018628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862a:	4413      	add	r3, r2
 801862c:	009b      	lsls	r3, r3, #2
 801862e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018630:	18d4      	adds	r4, r2, r3
 8018632:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8018636:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 801863a:	eeb0 0a67 	vmov.f32	s0, s15
 801863e:	f7ff fead 	bl	801839c <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8018642:	eef0 7a40 	vmov.f32	s15, s0
 8018646:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801864c:	3301      	adds	r3, #1
 801864e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	429a      	cmp	r2, r3
 8018656:	dba6      	blt.n	80185a6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x64>
  for (int b = 0; b < batches; ++b) {
 8018658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801865a:	3301      	adds	r3, #1
 801865c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801865e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018660:	69bb      	ldr	r3, [r7, #24]
 8018662:	429a      	cmp	r2, r3
 8018664:	db9c      	blt.n	80185a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5e>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8018666:	bf00      	nop
 8018668:	bf00      	nop
 801866a:	3744      	adds	r7, #68	; 0x44
 801866c:	46bd      	mov	sp, r7
 801866e:	bd90      	pop	{r4, r7, pc}

08018670 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	60f8      	str	r0, [r7, #12]
 8018678:	60b9      	str	r1, [r7, #8]
 801867a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018680:	2b00      	cmp	r3, #0
 8018682:	d101      	bne.n	8018688 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8018684:	f004 ffde 	bl	801d644 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801868c:	213c      	movs	r1, #60	; 0x3c
 801868e:	68f8      	ldr	r0, [r7, #12]
 8018690:	4798      	blx	r3
 8018692:	4603      	mov	r3, r0
}
 8018694:	4618      	mov	r0, r3
 8018696:	3710      	adds	r7, #16
 8018698:	46bd      	mov	sp, r7
 801869a:	bd80      	pop	{r7, pc}

0801869c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801869c:	b5b0      	push	{r4, r5, r7, lr}
 801869e:	b0b2      	sub	sp, #200	; 0xc8
 80186a0:	af04      	add	r7, sp, #16
 80186a2:	6078      	str	r0, [r7, #4]
 80186a4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 80186a6:	683b      	ldr	r3, [r7, #0]
 80186a8:	691b      	ldr	r3, [r3, #16]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d101      	bne.n	80186b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 80186ae:	f004 ffc9 	bl	801d644 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	695b      	ldr	r3, [r3, #20]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d101      	bne.n	80186be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 80186ba:	f004 ffc3 	bl	801d644 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80186be:	683b      	ldr	r3, [r7, #0]
 80186c0:	691b      	ldr	r3, [r3, #16]
 80186c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto params =
 80186c6:	683b      	ldr	r3, [r7, #0]
 80186c8:	695b      	ldr	r3, [r3, #20]
 80186ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7ff fdd1 	bl	8018276 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 80186d4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 80186d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	3318      	adds	r3, #24
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	4ab7      	ldr	r2, [pc, #732]	; (80189c0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 80186e4:	6812      	ldr	r2, [r2, #0]
 80186e6:	6839      	ldr	r1, [r7, #0]
 80186e8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80186ec:	4798      	blx	r3
 80186ee:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 80186f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d10a      	bne.n	8018710 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x74>
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	691c      	ldr	r4, [r3, #16]
 80186fe:	4bb1      	ldr	r3, [pc, #708]	; (80189c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
 8018700:	9300      	str	r3, [sp, #0]
 8018702:	2347      	movs	r3, #71	; 0x47
 8018704:	4ab0      	ldr	r2, [pc, #704]	; (80189c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8018706:	49b1      	ldr	r1, [pc, #708]	; (80189cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8018708:	6878      	ldr	r0, [r7, #4]
 801870a:	47a0      	blx	r4
 801870c:	2401      	movs	r4, #1
 801870e:	e1a8      	b.n	8018a62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 8018710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	3318      	adds	r3, #24
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	4aad      	ldr	r2, [pc, #692]	; (80189d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
 801871c:	6812      	ldr	r2, [r2, #0]
 801871e:	6839      	ldr	r1, [r7, #0]
 8018720:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018724:	4798      	blx	r3
 8018726:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 801872a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801872e:	2b00      	cmp	r3, #0
 8018730:	d10a      	bne.n	8018748 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	691c      	ldr	r4, [r3, #16]
 8018736:	4ba7      	ldr	r3, [pc, #668]	; (80189d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
 8018738:	9300      	str	r3, [sp, #0]
 801873a:	234a      	movs	r3, #74	; 0x4a
 801873c:	4aa2      	ldr	r2, [pc, #648]	; (80189c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 801873e:	49a3      	ldr	r1, [pc, #652]	; (80189cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8018740:	6878      	ldr	r0, [r7, #4]
 8018742:	47a0      	blx	r4
 8018744:	2401      	movs	r4, #1
 8018746:	e18c      	b.n	8018a62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>
  TfLiteTensor* bias =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 8018748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	3318      	adds	r3, #24
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	4aa1      	ldr	r2, [pc, #644]	; (80189d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
 8018754:	6812      	ldr	r2, [r2, #0]
 8018756:	6839      	ldr	r1, [r7, #0]
 8018758:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801875c:	4798      	blx	r3
 801875e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 8018762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	331c      	adds	r3, #28
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	4a9b      	ldr	r2, [pc, #620]	; (80189dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
 801876e:	6812      	ldr	r2, [r2, #0]
 8018770:	6839      	ldr	r1, [r7, #0]
 8018772:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018776:	4798      	blx	r3
 8018778:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
      node, kFullyConnectedOutputTensor);
  TF_LITE_ENSURE(context, output != nullptr);
 801877c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018780:	2b00      	cmp	r3, #0
 8018782:	d10a      	bne.n	801879a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	691c      	ldr	r4, [r3, #16]
 8018788:	4b95      	ldr	r3, [pc, #596]	; (80189e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
 801878a:	9300      	str	r3, [sp, #0]
 801878c:	234f      	movs	r3, #79	; 0x4f
 801878e:	4a8e      	ldr	r2, [pc, #568]	; (80189c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 8018790:	498e      	ldr	r1, [pc, #568]	; (80189cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
 8018792:	6878      	ldr	r0, [r7, #4]
 8018794:	47a0      	blx	r4
 8018796:	2401      	movs	r4, #1
 8018798:	e163      	b.n	8018a62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 801879a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801879e:	781a      	ldrb	r2, [r3, #0]
 80187a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80187a4:	781b      	ldrb	r3, [r3, #0]
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d01c      	beq.n	80187e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	691c      	ldr	r4, [r3, #16]
 80187ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80187b2:	781b      	ldrb	r3, [r3, #0]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fe fe29 	bl	801740c <TfLiteTypeGetName>
 80187ba:	4605      	mov	r5, r0
 80187bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80187c0:	781b      	ldrb	r3, [r3, #0]
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7fe fe22 	bl	801740c <TfLiteTypeGetName>
 80187c8:	4603      	mov	r3, r0
 80187ca:	9303      	str	r3, [sp, #12]
 80187cc:	9502      	str	r5, [sp, #8]
 80187ce:	4b85      	ldr	r3, [pc, #532]	; (80189e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
 80187d0:	9301      	str	r3, [sp, #4]
 80187d2:	4b85      	ldr	r3, [pc, #532]	; (80189e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
 80187d4:	9300      	str	r3, [sp, #0]
 80187d6:	2351      	movs	r3, #81	; 0x51
 80187d8:	4a7b      	ldr	r2, [pc, #492]	; (80189c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
 80187da:	4984      	ldr	r1, [pc, #528]	; (80189ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	47a0      	blx	r4
 80187e0:	2401      	movs	r4, #1
 80187e2:	e13e      	b.n	8018a62 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c6>

  const RuntimeShape filter_shape = GetTensorShape(filter);
 80187e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80187e8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7fe ff14 	bl	801761a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 80187f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80187f6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7fe ff0d 	bl	801761a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8018800:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018804:	4618      	mov	r0, r3
 8018806:	f7ff fb09 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801880a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  const int output_dim_count = output_shape.DimensionsCount();
 801880e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018812:	4618      	mov	r0, r3
 8018814:	f7ff fb02 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8018818:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  cmsis_nn_dims filter_dims;
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 801881c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018820:	1e5a      	subs	r2, r3, #1
 8018822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018826:	4611      	mov	r1, r2
 8018828:	4618      	mov	r0, r3
 801882a:	f7ff fd82 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 801882e:	4603      	mov	r3, r0
 8018830:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.h = 1;
 8018832:	2301      	movs	r3, #1
 8018834:	62bb      	str	r3, [r7, #40]	; 0x28
  filter_dims.w = 1;
 8018836:	2301      	movs	r3, #1
 8018838:	62fb      	str	r3, [r7, #44]	; 0x2c
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 801883a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801883e:	1e5a      	subs	r2, r3, #1
 8018840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018844:	4611      	mov	r1, r2
 8018846:	4618      	mov	r0, r3
 8018848:	f7ff fd73 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 801884c:	4603      	mov	r3, r0
 801884e:	633b      	str	r3, [r7, #48]	; 0x30

  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8018850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018854:	1e5a      	subs	r2, r3, #1
 8018856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801885a:	4611      	mov	r1, r2
 801885c:	4618      	mov	r0, r3
 801885e:	f7ff fd68 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018862:	4602      	mov	r2, r0
 8018864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018868:	635a      	str	r2, [r3, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 801886a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801886e:	1e5a      	subs	r2, r3, #1
 8018870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018874:	4611      	mov	r1, r2
 8018876:	4618      	mov	r0, r3
 8018878:	f7ff fe2d 	bl	80184d6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801887c:	4602      	mov	r2, r0
 801887e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018882:	631a      	str	r2, [r3, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 8018884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018888:	1e5a      	subs	r2, r3, #1
 801888a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801888e:	4611      	mov	r1, r2
 8018890:	4618      	mov	r0, r3
 8018892:	f7ff fd4e 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 8018896:	4602      	mov	r2, r0
 8018898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801889c:	639a      	str	r2, [r3, #56]	; 0x38

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 801889e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188a2:	f04f 32ff 	mov.w	r2, #4294967295
 80188a6:	62da      	str	r2, [r3, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 80188a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80188ac:	7819      	ldrb	r1, [r3, #0]
 80188ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188b2:	781a      	ldrb	r2, [r3, #0]
 80188b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80188b8:	9303      	str	r3, [sp, #12]
 80188ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80188be:	9302      	str	r3, [sp, #8]
 80188c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80188ca:	9300      	str	r3, [sp, #0]
 80188cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f000 fa31 	bl	8018d38 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 80188d6:	4603      	mov	r3, r0
 80188d8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80188dc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d002      	beq.n	80188ea <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24e>
 80188e4:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 80188e8:	e0b1      	b.n	8018a4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      context, params->activation, input->type, input, filter, bias, output,
      &(data->reference_op_data)));

  int32_t buf_size = 0;
 80188ea:	2300      	movs	r3, #0
 80188ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  if (input->type == kTfLiteInt16) {
 80188f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188f4:	781b      	ldrb	r3, [r3, #0]
 80188f6:	2b07      	cmp	r3, #7
 80188f8:	d10f      	bne.n	801891a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27e>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I16
        MicroPrintf("Filter data type %s currently not supported.",
 80188fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	4618      	mov	r0, r3
 8018902:	f7fe fd83 	bl	801740c <TfLiteTypeGetName>
 8018906:	4603      	mov	r3, r0
 8018908:	667b      	str	r3, [r7, #100]	; 0x64
 801890a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801890e:	4619      	mov	r1, r3
 8018910:	4837      	ldr	r0, [pc, #220]	; (80189f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 8018912:	f7ff fcbc 	bl	801828e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8018916:	2401      	movs	r4, #1
 8018918:	e099      	b.n	8018a4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
#endif
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
  } else if (input->type == kTfLiteInt8) {
 801891a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801891e:	781b      	ldrb	r3, [r3, #0]
 8018920:	2b09      	cmp	r3, #9
 8018922:	d10f      	bne.n	8018944 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
 8018924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	4618      	mov	r0, r3
 801892c:	f7fe fd6e 	bl	801740c <TfLiteTypeGetName>
 8018930:	4603      	mov	r3, r0
 8018932:	66bb      	str	r3, [r7, #104]	; 0x68
 8018934:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018938:	4619      	mov	r1, r3
 801893a:	482d      	ldr	r0, [pc, #180]	; (80189f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
 801893c:	f7ff fca7 	bl	801828e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
                              TfLiteTypeGetName(input->type));
        return kTfLiteError;
 8018940:	2401      	movs	r4, #1
 8018942:	e084      	b.n	8018a4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
    }
#endif
  }

  if (filter->type == kTfLiteInt4) {
 8018944:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	2b12      	cmp	r3, #18
 801894c:	d121      	bne.n	8018992 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f6>
    int filter_size =
        RuntimeShape(filter->dims->size,
 801894e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018952:	689b      	ldr	r3, [r3, #8]
 8018954:	6819      	ldr	r1, [r3, #0]
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 8018956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801895a:	689b      	ldr	r3, [r3, #8]
 801895c:	1d1a      	adds	r2, r3, #4
        RuntimeShape(filter->dims->size,
 801895e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018962:	4618      	mov	r0, r3
 8018964:	f7fe fde8 	bl	8017538 <_ZN6tflite12RuntimeShapeC1EiPKl>
            .FlatSize();
 8018968:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801896c:	4618      	mov	r0, r3
 801896e:	f7fe fe31 	bl	80175d4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018972:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        RuntimeShape(filter->dims->size,
 8018976:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801897a:	4618      	mov	r0, r3
 801897c:	f7fe fdef 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
    context->RequestScratchBufferInArena(
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018984:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8018988:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801898c:	3220      	adds	r2, #32
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	4798      	blx	r3
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (buf_size > 0) {
 8018992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018996:	2b00      	cmp	r3, #0
 8018998:	dd2c      	ble.n	80189f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801899e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80189a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80189a6:	322c      	adds	r2, #44	; 0x2c
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	4798      	blx	r3
 80189ac:	4603      	mov	r3, r0
 80189ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80189b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d01c      	beq.n	80189f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x358>
 80189ba:	f897 4087 	ldrb.w	r4, [r7, #135]	; 0x87
 80189be:	e046      	b.n	8018a4e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b2>
 80189c0:	080247c0 	.word	0x080247c0
 80189c4:	08022790 	.word	0x08022790
 80189c8:	080226e0 	.word	0x080226e0
 80189cc:	08022778 	.word	0x08022778
 80189d0:	080247c4 	.word	0x080247c4
 80189d4:	080227a4 	.word	0x080227a4
 80189d8:	080247c8 	.word	0x080247c8
 80189dc:	080247cc 	.word	0x080247cc
 80189e0:	080227b8 	.word	0x080227b8
 80189e4:	080227e8 	.word	0x080227e8
 80189e8:	080227f8 	.word	0x080227f8
 80189ec:	080227cc 	.word	0x080227cc
 80189f0:	08022804 	.word	0x08022804
        context, buf_size, &data->buffer_idx));
  }

  micro_context->DeallocateTempTfLiteTensor(output);
 80189f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	3324      	adds	r3, #36	; 0x24
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8018a02:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018a06:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 8018a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	3324      	adds	r3, #36	; 0x24
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8018a16:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018a1a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 8018a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	3324      	adds	r3, #36	; 0x24
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8018a2a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018a2e:	4798      	blx	r3
  if (bias != nullptr) {
 8018a30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d009      	beq.n	8018a4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>
    micro_context->DeallocateTempTfLiteTensor(bias);
 8018a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	3324      	adds	r3, #36	; 0x24
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018a46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8018a4a:	4798      	blx	r3
  }

  return kTfLiteOk;
 8018a4c:	2400      	movs	r4, #0
}
 8018a4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7fe fd83 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
 8018a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f7fe fd7e 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
 8018a62:	4623      	mov	r3, r4
 8018a64:	4618      	mov	r0, r3
 8018a66:	37b8      	adds	r7, #184	; 0xb8
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	bdb0      	pop	{r4, r5, r7, pc}

08018a6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8018a6c:	b5b0      	push	{r4, r5, r7, lr}
 8018a6e:	b0b8      	sub	sp, #224	; 0xe0
 8018a70:	af06      	add	r7, sp, #24
 8018a72:	6078      	str	r0, [r7, #4]
 8018a74:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	695b      	ldr	r3, [r3, #20]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d101      	bne.n	8018a82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8018a7e:	f004 fde1 	bl	801d644 <abort>
  const auto* params =
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	695b      	ldr	r3, [r3, #20]
 8018a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 8018a8a:	4b7f      	ldr	r3, [pc, #508]	; (8018c88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21c>)
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	461a      	mov	r2, r3
 8018a90:	6839      	ldr	r1, [r7, #0]
 8018a92:	6878      	ldr	r0, [r7, #4]
 8018a94:	f000 fa21 	bl	8018eda <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018a98:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 8018a9c:	4b7b      	ldr	r3, [pc, #492]	; (8018c8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x220>)
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	6839      	ldr	r1, [r7, #0]
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f000 fa18 	bl	8018eda <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018aaa:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 8018aae:	4b78      	ldr	r3, [pc, #480]	; (8018c90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x224>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	461a      	mov	r2, r3
 8018ab4:	6839      	ldr	r1, [r7, #0]
 8018ab6:	6878      	ldr	r0, [r7, #4]
 8018ab8:	f000 fa0f 	bl	8018eda <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018abc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 8018ac0:	4b74      	ldr	r3, [pc, #464]	; (8018c94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x228>)
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	6839      	ldr	r1, [r7, #0]
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f000 fa16 	bl	8018efa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8018ace:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4

  TFLITE_DCHECK(node->user_data != nullptr);
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	691b      	ldr	r3, [r3, #16]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d101      	bne.n	8018ade <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8018ada:	f004 fdb3 	bl	801d644 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8018ade:	683b      	ldr	r3, [r7, #0]
 8018ae0:	691b      	ldr	r3, [r3, #16]
 8018ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 8018ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018aea:	6a1a      	ldr	r2, [r3, #32]
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
 8018aec:	f107 0008 	add.w	r0, r7, #8
 8018af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018af4:	6879      	ldr	r1, [r7, #4]
 8018af6:	f000 fa42 	bl	8018f7e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8018afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018afe:	7a1b      	ldrb	r3, [r3, #8]
 8018b00:	2b09      	cmp	r3, #9
 8018b02:	d06e      	beq.n	8018be2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 8018b04:	2b09      	cmp	r3, #9
 8018b06:	f300 80a6 	bgt.w	8018c56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
 8018b0a:	2b01      	cmp	r3, #1
 8018b0c:	d003      	beq.n	8018b16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 8018b0e:	2b07      	cmp	r3, #7
 8018b10:	f000 8090 	beq.w	8018c34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c8>
 8018b14:	e09f      	b.n	8018c56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ea>
      MicroPrintf("Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      const float* bias_data =
          tflite::micro::GetOptionalTensorData<float>(bias);
 8018b16:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8018b1a:	f000 f8db 	bl	8018cd4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b1e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
      tflite::reference_ops::FullyConnected(
          FullyConnectedParamsFloat(params->activation),
 8018b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018b26:	781a      	ldrb	r2, [r3, #0]
 8018b28:	f107 0314 	add.w	r3, r7, #20
 8018b2c:	4611      	mov	r1, r2
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f000 f8ed 	bl	8018d0e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 8018b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018b38:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f000 f9fc 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b42:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018b46:	f7ff fbb8 	bl	80182ba <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b4a:	4605      	mov	r5, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
 8018b4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018b50:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8018b54:	4618      	mov	r0, r3
 8018b56:	f000 f9f0 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b5a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8018b5e:	f7ff fbac 	bl	80182ba <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8018b62:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias), bias_data,
 8018b64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018b68:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f000 f9e4 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 8018b72:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018b76:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f000 f9dd 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::FullyConnected(
 8018b80:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8018b84:	f7ff fba8 	bl	80182d8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8018b88:	4603      	mov	r3, r0
 8018b8a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8018b8e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8018b92:	f107 0014 	add.w	r0, r7, #20
 8018b96:	9304      	str	r3, [sp, #16]
 8018b98:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018b9c:	9303      	str	r3, [sp, #12]
 8018b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ba2:	9302      	str	r3, [sp, #8]
 8018ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018ba8:	9301      	str	r3, [sp, #4]
 8018baa:	9400      	str	r4, [sp, #0]
 8018bac:	4613      	mov	r3, r2
 8018bae:	462a      	mov	r2, r5
 8018bb0:	f7ff fcc7 	bl	8018542 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
          tflite::micro::GetTensorShape(output),
 8018bb4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7fe fcd0 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias), bias_data,
 8018bbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7fe fccb 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
 8018bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7fe fcc6 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(input),
 8018bd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7fe fcc1 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      break;
 8018bdc:	bf00      	nop
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
 8018bde:	2300      	movs	r3, #0
 8018be0:	e04d      	b.n	8018c7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      switch (filter_int8.type) {
 8018be2:	7c3b      	ldrb	r3, [r7, #16]
 8018be4:	2b09      	cmp	r3, #9
 8018be6:	d110      	bne.n	8018c0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x19e>
        MicroPrintf("Filter data type %s currently not supported.",
 8018be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018bec:	7a1b      	ldrb	r3, [r3, #8]
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7fe fc0c 	bl	801740c <TfLiteTypeGetName>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018bfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8018bfe:	4619      	mov	r1, r3
 8018c00:	4825      	ldr	r0, [pc, #148]	; (8018c98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018c02:	f7ff fb44 	bl	801828e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018c06:	2301      	movs	r3, #1
 8018c08:	e039      	b.n	8018c7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
          MicroPrintf("Filter Type %s (%d) not supported.",
 8018c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c0e:	7a1b      	ldrb	r3, [r3, #8]
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7fe fbfb 	bl	801740c <TfLiteTypeGetName>
 8018c16:	4603      	mov	r3, r0
 8018c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c20:	f103 0208 	add.w	r2, r3, #8
 8018c24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018c28:	4619      	mov	r1, r3
 8018c2a:	481c      	ldr	r0, [pc, #112]	; (8018c9c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x230>)
 8018c2c:	f000 f863 	bl	8018cf6 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>
          return kTfLiteError;
 8018c30:	2301      	movs	r3, #1
 8018c32:	e024      	b.n	8018c7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
        MicroPrintf("Filter data type %s currently not supported.",
 8018c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c38:	7a1b      	ldrb	r3, [r3, #8]
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	f7fe fbe6 	bl	801740c <TfLiteTypeGetName>
 8018c40:	4603      	mov	r3, r0
 8018c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018c46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018c4a:	4619      	mov	r1, r3
 8018c4c:	4812      	ldr	r0, [pc, #72]	; (8018c98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>)
 8018c4e:	f7ff fb1e 	bl	801828e <_ZN6tflite6UnusedIJRA45_KcPS1_EEEvDpOT_>
        return kTfLiteError;
 8018c52:	2301      	movs	r3, #1
 8018c54:	e013      	b.n	8018c7e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x212>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8018c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018c5a:	7a1b      	ldrb	r3, [r3, #8]
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f7fe fbd5 	bl	801740c <TfLiteTypeGetName>
 8018c62:	4603      	mov	r3, r0
 8018c64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018c6c:	f103 0208 	add.w	r2, r3, #8
 8018c70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8018c74:	4619      	mov	r1, r3
 8018c76:	480a      	ldr	r0, [pc, #40]	; (8018ca0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x234>)
 8018c78:	f7ff fbf2 	bl	8018460 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
      return kTfLiteError;
 8018c7c:	2301      	movs	r3, #1
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	37c8      	adds	r7, #200	; 0xc8
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bdb0      	pop	{r4, r5, r7, pc}
 8018c86:	bf00      	nop
 8018c88:	080247c0 	.word	0x080247c0
 8018c8c:	080247c4 	.word	0x080247c4
 8018c90:	080247c8 	.word	0x080247c8
 8018c94:	080247cc 	.word	0x080247cc
 8018c98:	08022804 	.word	0x08022804
 8018c9c:	08022a74 	.word	0x08022a74
 8018ca0:	08022a98 	.word	0x08022a98

08018ca4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt16(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b084      	sub	sp, #16
 8018ca8:	af02      	add	r7, sp, #8
 8018caa:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	2300      	movs	r3, #0
 8018cb0:	9300      	str	r3, [sp, #0]
 8018cb2:	4b05      	ldr	r3, [pc, #20]	; (8018cc8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x24>)
 8018cb4:	4a05      	ldr	r2, [pc, #20]	; (8018ccc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 8018cb6:	4906      	ldr	r1, [pc, #24]	; (8018cd0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x2c>)
 8018cb8:	f000 f8b6 	bl	8018e28 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8018cbc:	bf00      	nop
}
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	3708      	adds	r7, #8
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	bd80      	pop	{r7, pc}
 8018cc6:	bf00      	nop
 8018cc8:	08018a6d 	.word	0x08018a6d
 8018ccc:	0801869d 	.word	0x0801869d
 8018cd0:	08018671 	.word	0x08018671

08018cd4 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor == nullptr ? nullptr : reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
 8018cd4:	b480      	push	{r7}
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	6078      	str	r0, [r7, #4]
  return tensor == nullptr ? nullptr
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d002      	beq.n	8018ce8 <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x14>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
                           : reinterpret_cast<const T*>(tensor->data.raw);
 8018ce6:	e000      	b.n	8018cea <_ZN6tflite5micro21GetOptionalTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x16>
  return tensor == nullptr ? nullptr
 8018ce8:	2300      	movs	r3, #0
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	370c      	adds	r7, #12
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr

08018cf6 <_ZN6tflite6UnusedIJRA35_KcPS1_RK10TfLiteTypeEEEvDpOT_>:
void Unused(Args&&... args) {
 8018cf6:	b480      	push	{r7}
 8018cf8:	b085      	sub	sp, #20
 8018cfa:	af00      	add	r7, sp, #0
 8018cfc:	60f8      	str	r0, [r7, #12]
 8018cfe:	60b9      	str	r1, [r7, #8]
 8018d00:	607a      	str	r2, [r7, #4]
}
 8018d02:	bf00      	nop
 8018d04:	3714      	adds	r7, #20
 8018d06:	46bd      	mov	sp, r7
 8018d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0c:	4770      	bx	lr

08018d0e <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
 8018d0e:	b580      	push	{r7, lr}
 8018d10:	b082      	sub	sp, #8
 8018d12:	af00      	add	r7, sp, #0
 8018d14:	6078      	str	r0, [r7, #4]
 8018d16:	460b      	mov	r3, r1
 8018d18:	70fb      	strb	r3, [r7, #3]
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f103 0220 	add.w	r2, r3, #32
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	f103 011c 	add.w	r1, r3, #28
 8018d26:	78fb      	ldrb	r3, [r7, #3]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f7ff fb57 	bl	80183dc <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  return op_params;
 8018d2e:	bf00      	nop
}
 8018d30:	6878      	ldr	r0, [r7, #4]
 8018d32:	3708      	adds	r7, #8
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}

08018d38 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b08a      	sub	sp, #40	; 0x28
 8018d3c:	af02      	add	r7, sp, #8
 8018d3e:	60f8      	str	r0, [r7, #12]
 8018d40:	607b      	str	r3, [r7, #4]
 8018d42:	460b      	mov	r3, r1
 8018d44:	72fb      	strb	r3, [r7, #11]
 8018d46:	4613      	mov	r3, r2
 8018d48:	72bb      	strb	r3, [r7, #10]
  if (data_type != kTfLiteFloat32) {
 8018d4a:	7abb      	ldrb	r3, [r7, #10]
 8018d4c:	2b01      	cmp	r3, #1
 8018d4e:	d044      	beq.n	8018dda <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa2>
    double real_multiplier = 0.0;
 8018d50:	f04f 0200 	mov.w	r2, #0
 8018d54:	f04f 0300 	mov.w	r3, #0
 8018d58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8018d5c:	f107 0310 	add.w	r3, r7, #16
 8018d60:	9301      	str	r3, [sp, #4]
 8018d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d64:	9300      	str	r3, [sp, #0]
 8018d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d6a:	6879      	ldr	r1, [r7, #4]
 8018d6c:	68f8      	ldr	r0, [r7, #12]
 8018d6e:	f7fe fe0b 	bl	8017988 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8018d72:	4603      	mov	r3, r0
 8018d74:	77fb      	strb	r3, [r7, #31]
 8018d76:	7ffb      	ldrb	r3, [r7, #31]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d001      	beq.n	8018d80 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x48>
 8018d7c:	7ffb      	ldrb	r3, [r7, #31]
 8018d7e:	e02d      	b.n	8018ddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 8018d80:	ed97 7b04 	vldr	d7, [r7, #16]
 8018d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d88:	3304      	adds	r3, #4
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	4610      	mov	r0, r2
 8018d8e:	eeb0 0a47 	vmov.f32	s0, s14
 8018d92:	eef0 0a67 	vmov.f32	s1, s15
 8018d96:	f7fe fcf3 	bl	8017780 <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	691a      	ldr	r2, [r3, #16]
 8018d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018da0:	615a      	str	r2, [r3, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 8018da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018da4:	691b      	ldr	r3, [r3, #16]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d001      	beq.n	8018dae <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x76>
 8018daa:	f004 fc4b 	bl	801d644 <abort>
    data->filter_zero_point = filter->params.zero_point;
 8018dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db0:	691a      	ldr	r2, [r3, #16]
 8018db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018db4:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 8018db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018db8:	691a      	ldr	r2, [r3, #16]
 8018dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dbc:	61da      	str	r2, [r3, #28]

    return CalculateActivationRangeQuantized(context, activation, output,
 8018dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dc0:	f103 0208 	add.w	r2, r3, #8
 8018dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dc6:	330c      	adds	r3, #12
 8018dc8:	7af9      	ldrb	r1, [r7, #11]
 8018dca:	9300      	str	r3, [sp, #0]
 8018dcc:	4613      	mov	r3, r2
 8018dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018dd0:	68f8      	ldr	r0, [r7, #12]
 8018dd2:	f7fe ffcb 	bl	8017d6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8018dd6:	4603      	mov	r3, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
 8018dd8:	e000      	b.n	8018ddc <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0xa4>
  }
  return kTfLiteOk;
 8018dda:	2300      	movs	r3, #0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3720      	adds	r7, #32
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
namespace micro {

namespace {

int ValidateTensorIndexing(const TfLiteContext* context, int index,
                           int max_size, const int* tensor_indices) {
 8018de4:	b480      	push	{r7}
 8018de6:	b087      	sub	sp, #28
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	60f8      	str	r0, [r7, #12]
 8018dec:	60b9      	str	r1, [r7, #8]
 8018dee:	607a      	str	r2, [r7, #4]
 8018df0:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8018df2:	68bb      	ldr	r3, [r7, #8]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	db0f      	blt.n	8018e18 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 8018df8:	68ba      	ldr	r2, [r7, #8]
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	429a      	cmp	r2, r3
 8018dfe:	da0b      	bge.n	8018e18 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8018e00:	68bb      	ldr	r3, [r7, #8]
 8018e02:	009b      	lsls	r3, r3, #2
 8018e04:	683a      	ldr	r2, [r7, #0]
 8018e06:	4413      	add	r3, r2
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e12:	d001      	beq.n	8018e18 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8018e14:	697b      	ldr	r3, [r7, #20]
 8018e16:	e001      	b.n	8018e1c <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 8018e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	371c      	adds	r7, #28
 8018e20:	46bd      	mov	sp, r7
 8018e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e26:	4770      	bx	lr

08018e28 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
 8018e28:	b480      	push	{r7}
 8018e2a:	b085      	sub	sp, #20
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	607a      	str	r2, [r7, #4]
 8018e34:	603b      	str	r3, [r7, #0]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	68ba      	ldr	r2, [r7, #8]
 8018e3a:	601a      	str	r2, [r3, #0]
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	69ba      	ldr	r2, [r7, #24]
 8018e40:	605a      	str	r2, [r3, #4]
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	687a      	ldr	r2, [r7, #4]
 8018e46:	609a      	str	r2, [r3, #8]
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	683a      	ldr	r2, [r7, #0]
 8018e4c:	60da      	str	r2, [r3, #12]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	2200      	movs	r2, #0
 8018e52:	611a      	str	r2, [r3, #16]
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	2200      	movs	r2, #0
 8018e58:	615a      	str	r2, [r3, #20]
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	619a      	str	r2, [r3, #24]
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2200      	movs	r2, #0
 8018e64:	61da      	str	r2, [r3, #28]
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	2200      	movs	r2, #0
 8018e6a:	621a      	str	r2, [r3, #32]
}
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	3714      	adds	r7, #20
 8018e70:	46bd      	mov	sp, r7
 8018e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e76:	4770      	bx	lr

08018e78 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b086      	sub	sp, #24
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d101      	bne.n	8018e8e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8018e8a:	f004 fbdb 	bl	801d644 <abort>
  TFLITE_DCHECK(node != nullptr);
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d101      	bne.n	8018e98 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8018e94:	f004 fbd6 	bl	801d644 <abort>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 8018e9c:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8018e9e:	68bb      	ldr	r3, [r7, #8]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8018ea4:	6879      	ldr	r1, [r7, #4]
 8018ea6:	68f8      	ldr	r0, [r7, #12]
 8018ea8:	f7ff ff9c 	bl	8018de4 <_ZN6tflite5micro12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8018eac:	6178      	str	r0, [r7, #20]

  if (tensor_index < 0) {
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	da01      	bge.n	8018eb8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x40>
    return nullptr;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	e00c      	b.n	8018ed2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5a>
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	6819      	ldr	r1, [r3, #0]
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	009b      	lsls	r3, r3, #2
 8018ec4:	440b      	add	r3, r1
 8018ec6:	685b      	ldr	r3, [r3, #4]
 8018ec8:	4619      	mov	r1, r3
 8018eca:	68f8      	ldr	r0, [r7, #12]
 8018ecc:	4790      	blx	r2
 8018ece:	4603      	mov	r3, r0
 8018ed0:	bf00      	nop
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3718      	adds	r7, #24
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}

08018eda <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 8018eda:	b580      	push	{r7, lr}
 8018edc:	b084      	sub	sp, #16
 8018ede:	af00      	add	r7, sp, #0
 8018ee0:	60f8      	str	r0, [r7, #12]
 8018ee2:	60b9      	str	r1, [r7, #8]
 8018ee4:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	68b9      	ldr	r1, [r7, #8]
 8018eea:	68f8      	ldr	r0, [r7, #12]
 8018eec:	f7ff ffc4 	bl	8018e78 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8018ef0:	4603      	mov	r3, r0
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3710      	adds	r7, #16
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}

08018efa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 8018efa:	b580      	push	{r7, lr}
 8018efc:	b084      	sub	sp, #16
 8018efe:	af00      	add	r7, sp, #0
 8018f00:	60f8      	str	r0, [r7, #12]
 8018f02:	60b9      	str	r1, [r7, #8]
 8018f04:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d101      	bne.n	8018f10 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8018f0c:	f004 fb9a 	bl	801d644 <abort>
  TFLITE_DCHECK(node != nullptr);
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d101      	bne.n	8018f1a <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8018f16:	f004 fb95 	bl	801d644 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018f1e:	68bb      	ldr	r3, [r7, #8]
 8018f20:	6859      	ldr	r1, [r3, #4]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	009b      	lsls	r3, r3, #2
 8018f26:	440b      	add	r3, r1
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	4619      	mov	r1, r3
 8018f2c:	68f8      	ldr	r0, [r7, #12]
 8018f2e:	4790      	blx	r2
 8018f30:	4603      	mov	r3, r0
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3710      	adds	r7, #16
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bd80      	pop	{r7, pc}

08018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8018f3a:	b580      	push	{r7, lr}
 8018f3c:	b086      	sub	sp, #24
 8018f3e:	af00      	add	r7, sp, #0
 8018f40:	6078      	str	r0, [r7, #4]
 8018f42:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d003      	beq.n	8018f52 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 8018f4a:	683b      	ldr	r3, [r7, #0]
 8018f4c:	685b      	ldr	r3, [r3, #4]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d103      	bne.n	8018f5a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	f7fe fae2 	bl	801751c <_ZN6tflite12RuntimeShapeC1Ev>
 8018f58:	e00d      	b.n	8018f76 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	3304      	adds	r3, #4
 8018f6a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8018f6c:	68fa      	ldr	r2, [r7, #12]
 8018f6e:	6939      	ldr	r1, [r7, #16]
 8018f70:	6878      	ldr	r0, [r7, #4]
 8018f72:	f7fe fae1 	bl	8017538 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	3718      	adds	r7, #24
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}

08018f7e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 8018f7e:	b5b0      	push	{r4, r5, r7, lr}
 8018f80:	b08e      	sub	sp, #56	; 0x38
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	60f8      	str	r0, [r7, #12]
 8018f86:	60b9      	str	r1, [r7, #8]
 8018f88:	607a      	str	r2, [r7, #4]
 8018f8a:	603b      	str	r3, [r7, #0]
  if (tensor->type != kTfLiteInt4) {
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	7a1b      	ldrb	r3, [r3, #8]
 8018f90:	2b12      	cmp	r3, #18
 8018f92:	d005      	beq.n	8018fa0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x22>
    return *tensor;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	683a      	ldr	r2, [r7, #0]
 8018f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018f9e:	e033      	b.n	8019008 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x8a>
  }

  TfLiteEvalTensor new_tensor;
  new_tensor.data.data = static_cast<int8_t*>(
      context->GetScratchBuffer(context, scratch_buffer_index));
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fa4:	6879      	ldr	r1, [r7, #4]
 8018fa6:	68b8      	ldr	r0, [r7, #8]
 8018fa8:	4798      	blx	r3
 8018faa:	4603      	mov	r3, r0
  new_tensor.data.data = static_cast<int8_t*>(
 8018fac:	617b      	str	r3, [r7, #20]
  new_tensor.dims = tensor->dims;
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	685b      	ldr	r3, [r3, #4]
 8018fb2:	61bb      	str	r3, [r7, #24]
  new_tensor.type = kTfLiteInt8;
 8018fb4:	2309      	movs	r3, #9
 8018fb6:	773b      	strb	r3, [r7, #28]
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8018fb8:	6838      	ldr	r0, [r7, #0]
 8018fba:	f7ff f99c 	bl	80182f6 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8018fbe:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8018fc0:	f107 0320 	add.w	r3, r7, #32
 8018fc4:	6839      	ldr	r1, [r7, #0]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7ff ffb7 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 8018fcc:	f107 0320 	add.w	r3, r7, #32
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7fe faff 	bl	80175d4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8018fd6:	4605      	mov	r5, r0
 8018fd8:	f107 0314 	add.w	r3, r7, #20
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7ff f999 	bl	8018314 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	4629      	mov	r1, r5
 8018fe8:	4620      	mov	r0, r4
 8018fea:	f7fe fb67 	bl	80176bc <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 8018fee:	f107 0320 	add.w	r3, r7, #32
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fe fab3 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	461c      	mov	r4, r3
 8018ffc:	f107 0314 	add.w	r3, r7, #20
 8019000:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019004:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8019008:	68f8      	ldr	r0, [r7, #12]
 801900a:	3738      	adds	r7, #56	; 0x38
 801900c:	46bd      	mov	sp, r7
 801900e:	bdb0      	pop	{r4, r5, r7, pc}

08019010 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8019010:	b590      	push	{r4, r7, lr}
 8019012:	b087      	sub	sp, #28
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801901c:	68f8      	ldr	r0, [r7, #12]
 801901e:	f7fe fefd 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019022:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8019024:	2300      	movs	r3, #0
 8019026:	617b      	str	r3, [r7, #20]
 8019028:	e014      	b.n	8019054 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
    if (i != skip_dim) {
 801902a:	697a      	ldr	r2, [r7, #20]
 801902c:	68bb      	ldr	r3, [r7, #8]
 801902e:	429a      	cmp	r2, r3
 8019030:	d00d      	beq.n	801904e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8019032:	6979      	ldr	r1, [r7, #20]
 8019034:	68f8      	ldr	r0, [r7, #12]
 8019036:	f7ff f97c 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 801903a:	4604      	mov	r4, r0
 801903c:	6979      	ldr	r1, [r7, #20]
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f7ff f977 	bl	8018332 <_ZNK6tflite12RuntimeShape4DimsEi>
 8019044:	4603      	mov	r3, r0
 8019046:	429c      	cmp	r4, r3
 8019048:	d001      	beq.n	801904e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x3e>
 801904a:	f004 fafb 	bl	801d644 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801904e:	697b      	ldr	r3, [r7, #20]
 8019050:	3301      	adds	r3, #1
 8019052:	617b      	str	r3, [r7, #20]
 8019054:	697a      	ldr	r2, [r7, #20]
 8019056:	693b      	ldr	r3, [r7, #16]
 8019058:	429a      	cmp	r2, r3
 801905a:	dbe6      	blt.n	801902a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x1a>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 801905c:	68b9      	ldr	r1, [r7, #8]
 801905e:	68f8      	ldr	r0, [r7, #12]
 8019060:	f7ff fa39 	bl	80184d6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8019064:	4603      	mov	r3, r0
}
 8019066:	4618      	mov	r0, r3
 8019068:	371c      	adds	r7, #28
 801906a:	46bd      	mov	sp, r7
 801906c:	bd90      	pop	{r4, r7, pc}

0801906e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 801906e:	b580      	push	{r7, lr}
 8019070:	ed2d 8b02 	vpush	{d8}
 8019074:	b08e      	sub	sp, #56	; 0x38
 8019076:	af00      	add	r7, sp, #0
 8019078:	60f8      	str	r0, [r7, #12]
 801907a:	60b9      	str	r1, [r7, #8]
 801907c:	607a      	str	r2, [r7, #4]
 801907e:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8019080:	68b8      	ldr	r0, [r7, #8]
 8019082:	f7fe fecb 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019086:	4603      	mov	r3, r0
 8019088:	3b01      	subs	r3, #1
 801908a:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801908c:	683a      	ldr	r2, [r7, #0]
 801908e:	6a39      	ldr	r1, [r7, #32]
 8019090:	68b8      	ldr	r0, [r7, #8]
 8019092:	f7ff ffbd 	bl	8019010 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8019096:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8019098:	6a3b      	ldr	r3, [r7, #32]
 801909a:	683a      	ldr	r2, [r7, #0]
 801909c:	6a39      	ldr	r1, [r7, #32]
 801909e:	68b8      	ldr	r0, [r7, #8]
 80190a0:	f7ff f9ea 	bl	8018478 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80190a4:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 80190a6:	2300      	movs	r3, #0
 80190a8:	637b      	str	r3, [r7, #52]	; 0x34
 80190aa:	e085      	b.n	80191b8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x14a>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 80190ac:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 80190b0:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80190b2:	2300      	movs	r3, #0
 80190b4:	633b      	str	r3, [r7, #48]	; 0x30
 80190b6:	e014      	b.n	80190e2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x74>
      max = std::max(max, input_data[i * depth + c]);
 80190b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190ba:	69ba      	ldr	r2, [r7, #24]
 80190bc:	fb03 f202 	mul.w	r2, r3, r2
 80190c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190c2:	4413      	add	r3, r2
 80190c4:	009b      	lsls	r3, r3, #2
 80190c6:	687a      	ldr	r2, [r7, #4]
 80190c8:	441a      	add	r2, r3
 80190ca:	f107 0310 	add.w	r3, r7, #16
 80190ce:	4611      	mov	r1, r2
 80190d0:	4618      	mov	r0, r3
 80190d2:	f7f0 fe69 	bl	8009da8 <_ZSt3maxIfERKT_S2_S2_>
 80190d6:	4603      	mov	r3, r0
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	613b      	str	r3, [r7, #16]
    for (int c = 0; c < depth; ++c) {
 80190dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190de:	3301      	adds	r3, #1
 80190e0:	633b      	str	r3, [r7, #48]	; 0x30
 80190e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190e4:	69bb      	ldr	r3, [r7, #24]
 80190e6:	429a      	cmp	r2, r3
 80190e8:	dbe6      	blt.n	80190b8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4a>
    }

    // Compute sum.
    float sum = 0.f;
 80190ea:	f04f 0300 	mov.w	r3, #0
 80190ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80190f0:	2300      	movs	r3, #0
 80190f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80190f4:	e035      	b.n	8019162 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf4>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 80190f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190f8:	69ba      	ldr	r2, [r7, #24]
 80190fa:	fb03 f202 	mul.w	r2, r3, r2
 80190fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019100:	4413      	add	r3, r2
 8019102:	009b      	lsls	r3, r3, #2
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	4413      	add	r3, r2
 8019108:	ed93 7a00 	vldr	s14, [r3]
 801910c:	edd7 7a04 	vldr	s15, [r7, #16]
 8019110:	ee37 8a67 	vsub.f32	s16, s14, s15
                                   static_cast<float>(params.beta));
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801911a:	4610      	mov	r0, r2
 801911c:	4619      	mov	r1, r3
 801911e:	f7e7 fd93 	bl	8000c48 <__aeabi_d2f>
 8019122:	ee07 0a90 	vmov	s15, r0
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 8019126:	ee68 7a27 	vmul.f32	s15, s16, s15
 801912a:	eeb0 0a67 	vmov.f32	s0, s15
 801912e:	f7e7 ffef 	bl	8001110 <_ZSt3expf>
 8019132:	ed87 0a05 	vstr	s0, [r7, #20]
      output_data[i * depth + c] = exp_c;
 8019136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019138:	69ba      	ldr	r2, [r7, #24]
 801913a:	fb03 f202 	mul.w	r2, r3, r2
 801913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019140:	4413      	add	r3, r2
 8019142:	009b      	lsls	r3, r3, #2
 8019144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019146:	4413      	add	r3, r2
 8019148:	697a      	ldr	r2, [r7, #20]
 801914a:	601a      	str	r2, [r3, #0]
      sum += exp_c;
 801914c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8019150:	edd7 7a05 	vldr	s15, [r7, #20]
 8019154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019158:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915e:	3301      	adds	r3, #1
 8019160:	62bb      	str	r3, [r7, #40]	; 0x28
 8019162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019164:	69bb      	ldr	r3, [r7, #24]
 8019166:	429a      	cmp	r2, r3
 8019168:	dbc5      	blt.n	80190f6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 801916a:	2300      	movs	r3, #0
 801916c:	627b      	str	r3, [r7, #36]	; 0x24
 801916e:	e01c      	b.n	80191aa <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 8019170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019172:	69ba      	ldr	r2, [r7, #24]
 8019174:	fb03 f202 	mul.w	r2, r3, r2
 8019178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917a:	4413      	add	r3, r2
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019180:	4413      	add	r3, r2
 8019182:	edd3 6a00 	vldr	s13, [r3]
 8019186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019188:	69ba      	ldr	r2, [r7, #24]
 801918a:	fb03 f202 	mul.w	r2, r3, r2
 801918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019190:	4413      	add	r3, r2
 8019192:	009b      	lsls	r3, r3, #2
 8019194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019196:	4413      	add	r3, r2
 8019198:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801919c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80191a0:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 80191a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a6:	3301      	adds	r3, #1
 80191a8:	627b      	str	r3, [r7, #36]	; 0x24
 80191aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191ac:	69bb      	ldr	r3, [r7, #24]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	dbde      	blt.n	8019170 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x102>
  for (int i = 0; i < outer_size; ++i) {
 80191b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191b4:	3301      	adds	r3, #1
 80191b6:	637b      	str	r3, [r7, #52]	; 0x34
 80191b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191ba:	69fb      	ldr	r3, [r7, #28]
 80191bc:	429a      	cmp	r2, r3
 80191be:	f6ff af75 	blt.w	80190ac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
    }
  }
}
 80191c2:	bf00      	nop
 80191c4:	bf00      	nop
 80191c6:	3738      	adds	r7, #56	; 0x38
 80191c8:	46bd      	mov	sp, r7
 80191ca:	ecbd 8b02 	vpop	{d8}
 80191ce:	bd80      	pop	{r7, pc}

080191d0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b084      	sub	sp, #16
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	60f8      	str	r0, [r7, #12]
 80191d8:	60b9      	str	r1, [r7, #8]
 80191da:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d101      	bne.n	80191e8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 80191e4:	f004 fa2e 	bl	801d644 <abort>
  return context->AllocatePersistentBuffer(context,
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191ec:	2140      	movs	r1, #64	; 0x40
 80191ee:	68f8      	ldr	r0, [r7, #12]
 80191f0:	4798      	blx	r3
 80191f2:	4603      	mov	r3, r0
                                           sizeof(CMSISNNSoftmaxParams));
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3710      	adds	r7, #16
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}

080191fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 80191fc:	b590      	push	{r4, r7, lr}
 80191fe:	b09d      	sub	sp, #116	; 0x74
 8019200:	af04      	add	r7, sp, #16
 8019202:	6078      	str	r0, [r7, #4]
 8019204:	6039      	str	r1, [r7, #0]
  MicroContext* micro_context = GetMicroContext(context);
 8019206:	6878      	ldr	r0, [r7, #4]
 8019208:	f7ff f835 	bl	8018276 <_ZN6tflite15GetMicroContextEPK13TfLiteContext>
 801920c:	65f8      	str	r0, [r7, #92]	; 0x5c

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801920e:	6838      	ldr	r0, [r7, #0]
 8019210:	f7fe fa2e 	bl	8017670 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8019214:	4603      	mov	r3, r0
 8019216:	2b01      	cmp	r3, #1
 8019218:	bf14      	ite	ne
 801921a:	2301      	movne	r3, #1
 801921c:	2300      	moveq	r3, #0
 801921e:	b2db      	uxtb	r3, r3
 8019220:	2b00      	cmp	r3, #0
 8019222:	d013      	beq.n	801924c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x50>
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	691c      	ldr	r4, [r3, #16]
 8019228:	6838      	ldr	r0, [r7, #0]
 801922a:	f7fe fa21 	bl	8017670 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801922e:	4603      	mov	r3, r0
 8019230:	2201      	movs	r2, #1
 8019232:	9203      	str	r2, [sp, #12]
 8019234:	9302      	str	r3, [sp, #8]
 8019236:	4b6c      	ldr	r3, [pc, #432]	; (80193e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8019238:	9301      	str	r3, [sp, #4]
 801923a:	4b6c      	ldr	r3, [pc, #432]	; (80193ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f0>)
 801923c:	9300      	str	r3, [sp, #0]
 801923e:	2334      	movs	r3, #52	; 0x34
 8019240:	4a6b      	ldr	r2, [pc, #428]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019242:	496c      	ldr	r1, [pc, #432]	; (80193f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8019244:	6878      	ldr	r0, [r7, #4]
 8019246:	47a0      	blx	r4
 8019248:	2401      	movs	r4, #1
 801924a:	e0c8      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801924c:	6838      	ldr	r0, [r7, #0]
 801924e:	f7fe fa22 	bl	8017696 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8019252:	4603      	mov	r3, r0
 8019254:	2b01      	cmp	r3, #1
 8019256:	bf14      	ite	ne
 8019258:	2301      	movne	r3, #1
 801925a:	2300      	moveq	r3, #0
 801925c:	b2db      	uxtb	r3, r3
 801925e:	2b00      	cmp	r3, #0
 8019260:	d013      	beq.n	801928a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	691c      	ldr	r4, [r3, #16]
 8019266:	6838      	ldr	r0, [r7, #0]
 8019268:	f7fe fa15 	bl	8017696 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801926c:	4603      	mov	r3, r0
 801926e:	2201      	movs	r2, #1
 8019270:	9203      	str	r2, [sp, #12]
 8019272:	9302      	str	r3, [sp, #8]
 8019274:	4b5c      	ldr	r3, [pc, #368]	; (80193e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>)
 8019276:	9301      	str	r3, [sp, #4]
 8019278:	4b5f      	ldr	r3, [pc, #380]	; (80193f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fc>)
 801927a:	9300      	str	r3, [sp, #0]
 801927c:	2335      	movs	r3, #53	; 0x35
 801927e:	4a5c      	ldr	r2, [pc, #368]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019280:	495c      	ldr	r1, [pc, #368]	; (80193f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>)
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	47a0      	blx	r4
 8019286:	2401      	movs	r4, #1
 8019288:	e0a9      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 801928a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	3318      	adds	r3, #24
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	2200      	movs	r2, #0
 8019294:	6839      	ldr	r1, [r7, #0]
 8019296:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8019298:	4798      	blx	r3
 801929a:	65b8      	str	r0, [r7, #88]	; 0x58
  TF_LITE_ENSURE(context, input != nullptr);
 801929c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d10a      	bne.n	80192b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	691c      	ldr	r4, [r3, #16]
 80192a6:	4b55      	ldr	r3, [pc, #340]	; (80193fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>)
 80192a8:	9300      	str	r3, [sp, #0]
 80192aa:	2337      	movs	r3, #55	; 0x37
 80192ac:	4a50      	ldr	r2, [pc, #320]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80192ae:	4954      	ldr	r1, [pc, #336]	; (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	47a0      	blx	r4
 80192b4:	2401      	movs	r4, #1
 80192b6:	e092      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80192b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80192ba:	f7fe f9cc 	bl	8017656 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80192be:	4603      	mov	r3, r0
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	bfd4      	ite	le
 80192c4:	2301      	movle	r3, #1
 80192c6:	2300      	movgt	r3, #0
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d00a      	beq.n	80192e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	691c      	ldr	r4, [r3, #16]
 80192d2:	4b4c      	ldr	r3, [pc, #304]	; (8019404 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>)
 80192d4:	9300      	str	r3, [sp, #0]
 80192d6:	2338      	movs	r3, #56	; 0x38
 80192d8:	4a45      	ldr	r2, [pc, #276]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 80192da:	4949      	ldr	r1, [pc, #292]	; (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 80192dc:	6878      	ldr	r0, [r7, #4]
 80192de:	47a0      	blx	r4
 80192e0:	2401      	movs	r4, #1
 80192e2:	e07c      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 80192e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	331c      	adds	r3, #28
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	2200      	movs	r2, #0
 80192ee:	6839      	ldr	r1, [r7, #0]
 80192f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80192f2:	4798      	blx	r3
 80192f4:	6578      	str	r0, [r7, #84]	; 0x54
  TF_LITE_ENSURE(context, output != nullptr);
 80192f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d10a      	bne.n	8019312 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x116>
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	691c      	ldr	r4, [r3, #16]
 8019300:	4b41      	ldr	r3, [pc, #260]	; (8019408 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8019302:	9300      	str	r3, [sp, #0]
 8019304:	233a      	movs	r3, #58	; 0x3a
 8019306:	4a3a      	ldr	r2, [pc, #232]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019308:	493d      	ldr	r1, [pc, #244]	; (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 801930a:	6878      	ldr	r0, [r7, #4]
 801930c:	47a0      	blx	r4
 801930e:	2401      	movs	r4, #1
 8019310:	e065      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>

  TF_LITE_ENSURE(context, node->user_data != nullptr);
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	691b      	ldr	r3, [r3, #16]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d10a      	bne.n	8019330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	691c      	ldr	r4, [r3, #16]
 801931e:	4b3b      	ldr	r3, [pc, #236]	; (801940c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8019320:	9300      	str	r3, [sp, #0]
 8019322:	233c      	movs	r3, #60	; 0x3c
 8019324:	4a32      	ldr	r2, [pc, #200]	; (80193f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f4>)
 8019326:	4936      	ldr	r1, [pc, #216]	; (8019400 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x204>)
 8019328:	6878      	ldr	r0, [r7, #4]
 801932a:	47a0      	blx	r4
 801932c:	2401      	movs	r4, #1
 801932e:	e056      	b.n	80193de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
  CMSISNNSoftmaxParams* op_data =
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	691b      	ldr	r3, [r3, #16]
 8019334:	653b      	str	r3, [r7, #80]	; 0x50
      static_cast<CMSISNNSoftmaxParams*>(node->user_data);

  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8019336:	683b      	ldr	r3, [r7, #0]
 8019338:	695b      	ldr	r3, [r3, #20]
 801933a:	64fb      	str	r3, [r7, #76]	; 0x4c
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 801933c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019342:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019344:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	f000 f920 	bl	801958c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 801934c:	4603      	mov	r3, r0
 801934e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                        &op_data->softmax_params);

  const auto input_shape = GetTensorShape(input);
 8019352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019356:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019358:	4618      	mov	r0, r3
 801935a:	f7fe f95e 	bl	801761a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const auto output_shape = GetTensorShape(output);
 801935e:	f107 030c 	add.w	r3, r7, #12
 8019362:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019364:	4618      	mov	r0, r3
 8019366:	f7fe f958 	bl	801761a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801936a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801936e:	4618      	mov	r0, r3
 8019370:	f7fe fd54 	bl	8017e1c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8019374:	4603      	mov	r3, r0
 8019376:	3b01      	subs	r3, #1
 8019378:	647b      	str	r3, [r7, #68]	; 0x44
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801937a:	f107 020c 	add.w	r2, r7, #12
 801937e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019384:	4618      	mov	r0, r3
 8019386:	f7ff fe43 	bl	8019010 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801938a:	6438      	str	r0, [r7, #64]	; 0x40
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 801938c:	f107 020c 	add.w	r2, r7, #12
 8019390:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019396:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019398:	f7ff f86e 	bl	8018478 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801939c:	63f8      	str	r0, [r7, #60]	; 0x3c
  op_data->num_rows = outer_size;
 801939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80193a2:	639a      	str	r2, [r3, #56]	; 0x38
  op_data->row_size = depth;
 80193a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80193a8:	63da      	str	r2, [r3, #60]	; 0x3c

  micro_context->DeallocateTempTfLiteTensor(input);
 80193aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	3324      	adds	r3, #36	; 0x24
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80193b4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80193b6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 80193b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	3324      	adds	r3, #36	; 0x24
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80193c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80193c4:	4798      	blx	r3
  return ret_val;
 80193c6:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
}
 80193ca:	f107 030c 	add.w	r3, r7, #12
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7fe f8c5 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
 80193d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80193d8:	4618      	mov	r0, r3
 80193da:	f7fe f8c0 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
 80193de:	4623      	mov	r3, r4
 80193e0:	4618      	mov	r0, r3
 80193e2:	3764      	adds	r7, #100	; 0x64
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd90      	pop	{r4, r7, pc}
 80193e8:	08022b60 	.word	0x08022b60
 80193ec:	08022b64 	.word	0x08022b64
 80193f0:	08022ab4 	.word	0x08022ab4
 80193f4:	08022b44 	.word	0x08022b44
 80193f8:	08022b74 	.word	0x08022b74
 80193fc:	08022ba0 	.word	0x08022ba0
 8019400:	08022b88 	.word	0x08022b88
 8019404:	08022bb4 	.word	0x08022bb4
 8019408:	08022bd0 	.word	0x08022bd0
 801940c:	08022be4 	.word	0x08022be4

08019410 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8019410:	b5b0      	push	{r4, r5, r7, lr}
 8019412:	b0aa      	sub	sp, #168	; 0xa8
 8019414:	af02      	add	r7, sp, #8
 8019416:	6078      	str	r0, [r7, #4]
 8019418:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 801941a:	2200      	movs	r2, #0
 801941c:	6839      	ldr	r1, [r7, #0]
 801941e:	6878      	ldr	r0, [r7, #4]
 8019420:	f7ff fd5b 	bl	8018eda <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8019424:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 8019428:	2200      	movs	r2, #0
 801942a:	6839      	ldr	r1, [r7, #0]
 801942c:	6878      	ldr	r0, [r7, #4]
 801942e:	f7ff fd64 	bl	8018efa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8019432:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

  TFLITE_DCHECK(node->user_data != nullptr);
 8019436:	683b      	ldr	r3, [r7, #0]
 8019438:	691b      	ldr	r3, [r3, #16]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d101      	bne.n	8019442 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x32>
 801943e:	f004 f901 	bl	801d644 <abort>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);
 8019442:	683b      	ldr	r3, [r7, #0]
 8019444:	691b      	ldr	r3, [r3, #16]
  const CMSISNNSoftmaxParams op_data =
 8019446:	f107 0410 	add.w	r4, r7, #16
 801944a:	461d      	mov	r5, r3
 801944c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801944e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801945c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  switch (input->type) {
 8019460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019464:	7a1b      	ldrb	r3, [r3, #8]
 8019466:	2b09      	cmp	r3, #9
 8019468:	d034      	beq.n	80194d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>
 801946a:	2b09      	cmp	r3, #9
 801946c:	dc5c      	bgt.n	8019528 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
 801946e:	2b01      	cmp	r3, #1
 8019470:	d002      	beq.n	8019478 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x68>
 8019472:	2b07      	cmp	r3, #7
 8019474:	d043      	beq.n	80194fe <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xee>
 8019476:	e057      	b.n	8019528 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 8019478:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801947c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8019480:	4618      	mov	r0, r3
 8019482:	f7ff fd5a 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 8019486:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801948a:	f7fe ff16 	bl	80182ba <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 801948e:	4604      	mov	r4, r0
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 8019490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019494:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8019498:	4618      	mov	r0, r3
 801949a:	f7ff fd4e 	bl	8018f3a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 801949e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80194a2:	f7fe ff19 	bl	80182d8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80194a6:	4602      	mov	r2, r0
 80194a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80194ac:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80194b0:	f107 0010 	add.w	r0, r7, #16
 80194b4:	9200      	str	r2, [sp, #0]
 80194b6:	4622      	mov	r2, r4
 80194b8:	f7ff fdd9 	bl	801906e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
          tflite::micro::GetTensorShape(output),
 80194bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fe f84c 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 80194c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7fe f847 	bl	801755e <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorData<float>(output));
      return kTfLiteOk;
 80194d0:	2300      	movs	r3, #0
 80194d2:	e03d      	b.n	8019550 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
    }
    case kTfLiteInt8: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80194d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80194d8:	7a1b      	ldrb	r3, [r3, #8]
 80194da:	4618      	mov	r0, r3
 80194dc:	f7fd ff96 	bl	801740c <TfLiteTypeGetName>
 80194e0:	4603      	mov	r3, r0
 80194e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80194e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80194ea:	f103 0208 	add.w	r2, r3, #8
 80194ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80194f2:	4619      	mov	r1, r3
 80194f4:	4818      	ldr	r0, [pc, #96]	; (8019558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 80194f6:	f7fe ffb3 	bl	8018460 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 80194fa:	2301      	movs	r3, #1
 80194fc:	e028      	b.n	8019550 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
      }
      return kTfLiteOk;
    }
    case kTfLiteInt16: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 80194fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019502:	7a1b      	ldrb	r3, [r3, #8]
 8019504:	4618      	mov	r0, r3
 8019506:	f7fd ff81 	bl	801740c <TfLiteTypeGetName>
 801950a:	4603      	mov	r3, r0
 801950c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019514:	f103 0208 	add.w	r2, r3, #8
 8019518:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801951c:	4619      	mov	r1, r3
 801951e:	480e      	ldr	r0, [pc, #56]	; (8019558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 8019520:	f7fe ff9e 	bl	8018460 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 8019524:	2301      	movs	r3, #1
 8019526:	e013      	b.n	8019550 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x140>
              tflite::micro::GetTensorData<int16_t>(output)),
          ARM_CMSIS_NN_SUCCESS);
      return kTfLiteOk;
    }
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 8019528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801952c:	7a1b      	ldrb	r3, [r3, #8]
 801952e:	4618      	mov	r0, r3
 8019530:	f7fd ff6c 	bl	801740c <TfLiteTypeGetName>
 8019534:	4603      	mov	r3, r0
 8019536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801953a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801953e:	f103 0208 	add.w	r2, r3, #8
 8019542:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019546:	4619      	mov	r1, r3
 8019548:	4803      	ldr	r0, [pc, #12]	; (8019558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
 801954a:	f7fe ff89 	bl	8018460 <_ZN6tflite6UnusedIJRA28_KcPS1_RK10TfLiteTypeEEEvDpOT_>
                  input->type);
      return kTfLiteError;
 801954e:	2301      	movs	r3, #1
  }
}
 8019550:	4618      	mov	r0, r3
 8019552:	37a0      	adds	r7, #160	; 0xa0
 8019554:	46bd      	mov	sp, r7
 8019556:	bdb0      	pop	{r4, r5, r7, pc}
 8019558:	08022c00 	.word	0x08022c00

0801955c <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 801955c:	b580      	push	{r7, lr}
 801955e:	b084      	sub	sp, #16
 8019560:	af02      	add	r7, sp, #8
 8019562:	6078      	str	r0, [r7, #4]
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 8019564:	6878      	ldr	r0, [r7, #4]
 8019566:	2300      	movs	r3, #0
 8019568:	9300      	str	r3, [sp, #0]
 801956a:	4b05      	ldr	r3, [pc, #20]	; (8019580 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
 801956c:	4a05      	ldr	r2, [pc, #20]	; (8019584 <_ZN6tflite16Register_SOFTMAXEv+0x28>)
 801956e:	4906      	ldr	r1, [pc, #24]	; (8019588 <_ZN6tflite16Register_SOFTMAXEv+0x2c>)
 8019570:	f7ff fc5a 	bl	8018e28 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
 8019574:	bf00      	nop
}
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	3708      	adds	r7, #8
 801957a:	46bd      	mov	sp, r7
 801957c:	bd80      	pop	{r7, pc}
 801957e:	bf00      	nop
 8019580:	08019411 	.word	0x08019411
 8019584:	080191fd 	.word	0x080191fd
 8019588:	080191d1 	.word	0x080191d1

0801958c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 801958c:	b5b0      	push	{r4, r5, r7, lr}
 801958e:	b08a      	sub	sp, #40	; 0x28
 8019590:	af04      	add	r7, sp, #16
 8019592:	60f8      	str	r0, [r7, #12]
 8019594:	60b9      	str	r1, [r7, #8]
 8019596:	607a      	str	r2, [r7, #4]
 8019598:	603b      	str	r3, [r7, #0]
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	781b      	ldrb	r3, [r3, #0]
 801959e:	2b09      	cmp	r3, #9
 80195a0:	d003      	beq.n	80195aa <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
 80195a2:	68bb      	ldr	r3, [r7, #8]
 80195a4:	781b      	ldrb	r3, [r3, #0]
 80195a6:	2b07      	cmp	r3, #7
 80195a8:	d121      	bne.n	80195ee <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x62>
    if (input->type == kTfLiteInt16) {
 80195aa:	68bb      	ldr	r3, [r7, #8]
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	2b07      	cmp	r3, #7
 80195b0:	d10e      	bne.n	80195d0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x44>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	691c      	ldr	r4, [r3, #16]
 80195b6:	68bb      	ldr	r3, [r7, #8]
 80195b8:	781b      	ldrb	r3, [r3, #0]
 80195ba:	4618      	mov	r0, r3
 80195bc:	f7fd ff26 	bl	801740c <TfLiteTypeGetName>
 80195c0:	4602      	mov	r2, r0
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	781b      	ldrb	r3, [r3, #0]
 80195c6:	492e      	ldr	r1, [pc, #184]	; (8019680 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 80195c8:	68f8      	ldr	r0, [r7, #12]
 80195ca:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80195cc:	2301      	movs	r3, #1
 80195ce:	e053      	b.n	8019678 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
                          (0.001f * 1.f / 32768));
    } else {  // input->type == kTfLiteInt8
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I8
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	691c      	ldr	r4, [r3, #16]
 80195d4:	68bb      	ldr	r3, [r7, #8]
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	4618      	mov	r0, r3
 80195da:	f7fd ff17 	bl	801740c <TfLiteTypeGetName>
 80195de:	4602      	mov	r2, r0
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	781b      	ldrb	r3, [r3, #0]
 80195e4:	4926      	ldr	r1, [pc, #152]	; (8019680 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf4>)
 80195e6:	68f8      	ldr	r0, [r7, #12]
 80195e8:	47a0      	blx	r4
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80195ea:	2301      	movs	r3, #1
 80195ec:	e044      	b.n	8019678 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                    TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
#endif
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	781b      	ldrb	r3, [r3, #0]
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d018      	beq.n	8019628 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x9c>
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	691c      	ldr	r4, [r3, #16]
 80195fa:	68bb      	ldr	r3, [r7, #8]
 80195fc:	781b      	ldrb	r3, [r3, #0]
 80195fe:	4618      	mov	r0, r3
 8019600:	f7fd ff04 	bl	801740c <TfLiteTypeGetName>
 8019604:	4605      	mov	r5, r0
 8019606:	2001      	movs	r0, #1
 8019608:	f7fd ff00 	bl	801740c <TfLiteTypeGetName>
 801960c:	4603      	mov	r3, r0
 801960e:	9303      	str	r3, [sp, #12]
 8019610:	9502      	str	r5, [sp, #8]
 8019612:	4b1c      	ldr	r3, [pc, #112]	; (8019684 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 8019614:	9301      	str	r3, [sp, #4]
 8019616:	4b1c      	ldr	r3, [pc, #112]	; (8019688 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xfc>)
 8019618:	9300      	str	r3, [sp, #0]
 801961a:	23a0      	movs	r3, #160	; 0xa0
 801961c:	4a1b      	ldr	r2, [pc, #108]	; (801968c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 801961e:	491c      	ldr	r1, [pc, #112]	; (8019690 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 8019620:	68f8      	ldr	r0, [r7, #12]
 8019622:	47a0      	blx	r4
 8019624:	2301      	movs	r3, #1
 8019626:	e027      	b.n	8019678 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	2b01      	cmp	r3, #1
 801962e:	d018      	beq.n	8019662 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd6>
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	691c      	ldr	r4, [r3, #16]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	781b      	ldrb	r3, [r3, #0]
 8019638:	4618      	mov	r0, r3
 801963a:	f7fd fee7 	bl	801740c <TfLiteTypeGetName>
 801963e:	4605      	mov	r5, r0
 8019640:	2001      	movs	r0, #1
 8019642:	f7fd fee3 	bl	801740c <TfLiteTypeGetName>
 8019646:	4603      	mov	r3, r0
 8019648:	9303      	str	r3, [sp, #12]
 801964a:	9502      	str	r5, [sp, #8]
 801964c:	4b0d      	ldr	r3, [pc, #52]	; (8019684 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xf8>)
 801964e:	9301      	str	r3, [sp, #4]
 8019650:	4b10      	ldr	r3, [pc, #64]	; (8019694 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>)
 8019652:	9300      	str	r3, [sp, #0]
 8019654:	23a1      	movs	r3, #161	; 0xa1
 8019656:	4a0d      	ldr	r2, [pc, #52]	; (801968c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x100>)
 8019658:	490d      	ldr	r1, [pc, #52]	; (8019690 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x104>)
 801965a:	68f8      	ldr	r0, [r7, #12]
 801965c:	47a0      	blx	r4
 801965e:	2301      	movs	r3, #1
 8019660:	e00a      	b.n	8019678 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xec>
    op_data->beta = static_cast<double>(params->beta);
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	4618      	mov	r0, r3
 8019668:	f7e6 ff9e 	bl	80005a8 <__aeabi_f2d>
 801966c:	4602      	mov	r2, r0
 801966e:	460b      	mov	r3, r1
 8019670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019672:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8019676:	2300      	movs	r3, #0
}
 8019678:	4618      	mov	r0, r3
 801967a:	3718      	adds	r7, #24
 801967c:	46bd      	mov	sp, r7
 801967e:	bdb0      	pop	{r4, r5, r7, pc}
 8019680:	08022d9c 	.word	0x08022d9c
 8019684:	08022dd4 	.word	0x08022dd4
 8019688:	08022d70 	.word	0x08022d70
 801968c:	08022c1c 	.word	0x08022c1c
 8019690:	08022db8 	.word	0x08022db8
 8019694:	08022d60 	.word	0x08022d60

08019698 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 8019698:	b480      	push	{r7}
 801969a:	b085      	sub	sp, #20
 801969c:	af00      	add	r7, sp, #0
 801969e:	6078      	str	r0, [r7, #4]
 80196a0:	6039      	str	r1, [r7, #0]
  tensor->type = kTfLiteFloat32;
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	2201      	movs	r2, #1
 80196a6:	701a      	strb	r2, [r3, #0]
  tensor->is_variable = false;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	2200      	movs	r2, #0
 80196ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 80196b0:	4a1d      	ldr	r2, [pc, #116]	; (8019728 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	011b      	lsls	r3, r3, #4
 80196b6:	4413      	add	r3, r2
 80196b8:	781a      	ldrb	r2, [r3, #0]
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	751a      	strb	r2, [r3, #20]
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
 80196be:	4a1a      	ldr	r2, [pc, #104]	; (8019728 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	011b      	lsls	r3, r3, #4
 80196c4:	4413      	add	r3, r2
 80196c6:	330c      	adds	r3, #12
 80196c8:	681a      	ldr	r2, [r3, #0]
 80196ca:	683b      	ldr	r3, [r7, #0]
 80196cc:	619a      	str	r2, [r3, #24]
  tensor->dims = tensorData[i].dims;
 80196ce:	4a16      	ldr	r2, [pc, #88]	; (8019728 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	011b      	lsls	r3, r3, #4
 80196d4:	4413      	add	r3, r2
 80196d6:	3308      	adds	r3, #8
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	609a      	str	r2, [r3, #8]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	7d1b      	ldrb	r3, [r3, #20]
 80196e2:	2b02      	cmp	r3, #2
 80196e4:	d10e      	bne.n	8019704 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 80196e6:	4a10      	ldr	r2, [pc, #64]	; (8019728 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	011b      	lsls	r3, r3, #4
 80196ec:	4413      	add	r3, r2
 80196ee:	3304      	adds	r3, #4
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	461a      	mov	r2, r3
 80196f4:	4b0d      	ldr	r3, [pc, #52]	; (801972c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x94>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4413      	add	r3, r2
 80196fa:	60fb      	str	r3, [r7, #12]

    tensor->data.data =  start;
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	68fa      	ldr	r2, [r7, #12]
 8019700:	605a      	str	r2, [r3, #4]
 8019702:	e007      	b.n	8019714 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>
  }
  else {
      tensor->data.data = tensorData[i].data;
 8019704:	4a08      	ldr	r2, [pc, #32]	; (8019728 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x90>)
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	011b      	lsls	r3, r3, #4
 801970a:	4413      	add	r3, r2
 801970c:	3304      	adds	r3, #4
 801970e:	681a      	ldr	r2, [r3, #0]
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	605a      	str	r2, [r3, #4]
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	2200      	movs	r2, #0
 8019718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

}
 801971c:	bf00      	nop
 801971e:	3714      	adds	r7, #20
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr
 8019728:	200050bc 	.word	0x200050bc
 801972c:	20005454 	.word	0x20005454

08019730 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>:

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
 8019730:	b480      	push	{r7}
 8019732:	b085      	sub	sp, #20
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	6039      	str	r1, [r7, #0]

  tensor->type = kTfLiteFloat32;
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	2201      	movs	r2, #1
 801973e:	721a      	strb	r2, [r3, #8]

  tensor->dims = tensorData[i].dims;
 8019740:	4a16      	ldr	r2, [pc, #88]	; (801979c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	011b      	lsls	r3, r3, #4
 8019746:	4413      	add	r3, r2
 8019748:	3308      	adds	r3, #8
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	605a      	str	r2, [r3, #4]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
 8019750:	4a12      	ldr	r2, [pc, #72]	; (801979c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	011b      	lsls	r3, r3, #4
 8019756:	4413      	add	r3, r2
 8019758:	781b      	ldrb	r3, [r3, #0]
 801975a:	73fb      	strb	r3, [r7, #15]
  if(allocation_type == kTfLiteArenaRw) {
 801975c:	7bfb      	ldrb	r3, [r7, #15]
 801975e:	2b02      	cmp	r3, #2
 8019760:	d10e      	bne.n	8019780 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x50>
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8019762:	4a0e      	ldr	r2, [pc, #56]	; (801979c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	011b      	lsls	r3, r3, #4
 8019768:	4413      	add	r3, r2
 801976a:	3304      	adds	r3, #4
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	461a      	mov	r2, r3
 8019770:	4b0b      	ldr	r3, [pc, #44]	; (80197a0 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x70>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	4413      	add	r3, r2
 8019776:	60bb      	str	r3, [r7, #8]

    tensor->data.data =  start;
 8019778:	683b      	ldr	r3, [r7, #0]
 801977a:	68ba      	ldr	r2, [r7, #8]
 801977c:	601a      	str	r2, [r3, #0]
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}
 801977e:	e007      	b.n	8019790 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x60>
    tensor->data.data = tensorData[i].data;
 8019780:	4a06      	ldr	r2, [pc, #24]	; (801979c <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor+0x6c>)
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	011b      	lsls	r3, r3, #4
 8019786:	4413      	add	r3, r2
 8019788:	3304      	adds	r3, #4
 801978a:	681a      	ldr	r2, [r3, #0]
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	601a      	str	r2, [r3, #0]
}
 8019790:	bf00      	nop
 8019792:	3714      	adds	r7, #20
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	200050bc 	.word	0x200050bc
 80197a0:	20005454 	.word	0x20005454

080197a4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b084      	sub	sp, #16
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	6039      	str	r1, [r7, #0]
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	f003 030f 	and.w	r3, r3, #15
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d005      	beq.n	80197c4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x20>
 80197b8:	683b      	ldr	r3, [r7, #0]
 80197ba:	f003 030f 	and.w	r3, r3, #15
 80197be:	f1c3 0310 	rsb	r3, r3, #16
 80197c2:	e000      	b.n	80197c6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x22>
 80197c4:	2300      	movs	r3, #0
 80197c6:	60fb      	str	r3, [r7, #12]

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 80197c8:	4b29      	ldr	r3, [pc, #164]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 80197ca:	681a      	ldr	r2, [r3, #0]
 80197cc:	6839      	ldr	r1, [r7, #0]
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	440b      	add	r3, r1
 80197d2:	425b      	negs	r3, r3
 80197d4:	441a      	add	r2, r3
 80197d6:	4b27      	ldr	r3, [pc, #156]	; (8019874 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd0>)
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d224      	bcs.n	8019828 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 80197de:	4b26      	ldr	r3, [pc, #152]	; (8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	2b09      	cmp	r3, #9
 80197e4:	d906      	bls.n	80197f4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	4619      	mov	r1, r3
 80197ea:	4824      	ldr	r0, [pc, #144]	; (801987c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd8>)
 80197ec:	f7ef fb22 	bl	8008e34 <_Z9ei_printfPKcz>
        (int)bytes);
      return NULL;
 80197f0:	2300      	movs	r3, #0
 80197f2:	e039      	b.n	8019868 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
 80197f4:	2101      	movs	r1, #1
 80197f6:	6838      	ldr	r0, [r7, #0]
 80197f8:	f7fd fdd2 	bl	80173a0 <_Z9ei_callocjj>
 80197fc:	60b8      	str	r0, [r7, #8]
    if (ptr == NULL) {
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d106      	bne.n	8019812 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8019804:	683b      	ldr	r3, [r7, #0]
 8019806:	4619      	mov	r1, r3
 8019808:	481d      	ldr	r0, [pc, #116]	; (8019880 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xdc>)
 801980a:	f7ef fb13 	bl	8008e34 <_Z9ei_printfPKcz>
      return NULL;
 801980e:	2300      	movs	r3, #0
 8019810:	e02a      	b.n	8019868 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
 8019812:	4b19      	ldr	r3, [pc, #100]	; (8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	1c5a      	adds	r2, r3, #1
 8019818:	4917      	ldr	r1, [pc, #92]	; (8019878 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xd4>)
 801981a:	600a      	str	r2, [r1, #0]
 801981c:	4919      	ldr	r1, [pc, #100]	; (8019884 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xe0>)
 801981e:	68ba      	ldr	r2, [r7, #8]
 8019820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return ptr;
 8019824:	68bb      	ldr	r3, [r7, #8]
 8019826:	e01f      	b.n	8019868 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xc4>
  }

  current_location -= bytes;
 8019828:	4b11      	ldr	r3, [pc, #68]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801982a:	681a      	ldr	r2, [r3, #0]
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	425b      	negs	r3, r3
 8019830:	4413      	add	r3, r2
 8019832:	4a0f      	ldr	r2, [pc, #60]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019834:	6013      	str	r3, [r2, #0]

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
 8019836:	4b0e      	ldr	r3, [pc, #56]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	3b0f      	subs	r3, #15
 801983c:	4a0c      	ldr	r2, [pc, #48]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 801983e:	6013      	str	r3, [r2, #0]
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 8019840:	4b0b      	ldr	r3, [pc, #44]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	4b0a      	ldr	r3, [pc, #40]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	f003 030f 	and.w	r3, r3, #15
 801984c:	f1c3 0310 	rsb	r3, r3, #16
 8019850:	4413      	add	r3, r2
 8019852:	4a07      	ldr	r2, [pc, #28]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019854:	6013      	str	r3, [r2, #0]

  ptr = current_location;
 8019856:	4b06      	ldr	r3, [pc, #24]	; (8019870 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0xcc>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	60bb      	str	r3, [r7, #8]
  memset(ptr, 0, bytes);
 801985c:	683a      	ldr	r2, [r7, #0]
 801985e:	2100      	movs	r1, #0
 8019860:	68b8      	ldr	r0, [r7, #8]
 8019862:	f004 ffaf 	bl	801e7c4 <memset>

  return ptr;
 8019866:	68bb      	ldr	r3, [r7, #8]
}
 8019868:	4618      	mov	r0, r3
 801986a:	3710      	adds	r7, #16
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}
 8019870:	2000545c 	.word	0x2000545c
 8019874:	20005458 	.word	0x20005458
 8019878:	2000567c 	.word	0x2000567c
 801987c:	08022e6c 	.word	0x08022e6c
 8019880:	08022eec 	.word	0x08022eec
 8019884:	20005654 	.word	0x20005654

08019888 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8019888:	b580      	push	{r7, lr}
 801988a:	b086      	sub	sp, #24
 801988c:	af00      	add	r7, sp, #0
 801988e:	60f8      	str	r0, [r7, #12]
 8019890:	60b9      	str	r1, [r7, #8]
 8019892:	607a      	str	r2, [r7, #4]
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 8019894:	4b1b      	ldr	r3, [pc, #108]	; (8019904 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	2b03      	cmp	r3, #3
 801989a:	d906      	bls.n	80198aa <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x22>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 801989c:	68bb      	ldr	r3, [r7, #8]
 801989e:	4619      	mov	r1, r3
 80198a0:	4819      	ldr	r0, [pc, #100]	; (8019908 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x80>)
 80198a2:	f7ef fac7 	bl	8008e34 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 80198a6:	2301      	movs	r3, #1
 80198a8:	e028      	b.n	80198fc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffer_t b;
  b.bytes = bytes;
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	613b      	str	r3, [r7, #16]

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 80198ae:	693b      	ldr	r3, [r7, #16]
 80198b0:	4619      	mov	r1, r3
 80198b2:	68f8      	ldr	r0, [r7, #12]
 80198b4:	f7ff ff76 	bl	80197a4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 80198b8:	4603      	mov	r3, r0
 80198ba:	617b      	str	r3, [r7, #20]
  if (!b.ptr) {
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d106      	bne.n	80198d0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 80198c2:	68bb      	ldr	r3, [r7, #8]
 80198c4:	4619      	mov	r1, r3
 80198c6:	4811      	ldr	r0, [pc, #68]	; (801990c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x84>)
 80198c8:	f7ef fab4 	bl	8008e34 <_Z9ei_printfPKcz>
      (int)bytes);
    return kTfLiteError;
 80198cc:	2301      	movs	r3, #1
 80198ce:	e015      	b.n	80198fc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x74>
  }

  scratch_buffers[scratch_buffers_ix] = b;
 80198d0:	4b0c      	ldr	r3, [pc, #48]	; (8019904 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	4a0e      	ldr	r2, [pc, #56]	; (8019910 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x88>)
 80198d6:	00db      	lsls	r3, r3, #3
 80198d8:	4413      	add	r3, r2
 80198da:	f107 0210 	add.w	r2, r7, #16
 80198de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198e2:	e883 0003 	stmia.w	r3, {r0, r1}
  *buffer_idx = scratch_buffers_ix;
 80198e6:	4b07      	ldr	r3, [pc, #28]	; (8019904 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	461a      	mov	r2, r3
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	601a      	str	r2, [r3, #0]

  scratch_buffers_ix++;
 80198f0:	4b04      	ldr	r3, [pc, #16]	; (8019904 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	3301      	adds	r3, #1
 80198f6:	4a03      	ldr	r2, [pc, #12]	; (8019904 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>)
 80198f8:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
 80198fa:	2300      	movs	r3, #0
}
 80198fc:	4618      	mov	r0, r3
 80198fe:	3718      	adds	r7, #24
 8019900:	46bd      	mov	sp, r7
 8019902:	bd80      	pop	{r7, pc}
 8019904:	200056a0 	.word	0x200056a0
 8019908:	08022f24 	.word	0x08022f24
 801990c:	08022f7c 	.word	0x08022f7c
 8019910:	20005680 	.word	0x20005680

08019914 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
 8019914:	b480      	push	{r7}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
 801991a:	6078      	str	r0, [r7, #4]
 801991c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > (int)scratch_buffers_ix) {
 801991e:	4b09      	ldr	r3, [pc, #36]	; (8019944 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x30>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	461a      	mov	r2, r3
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	4293      	cmp	r3, r2
 8019928:	dd01      	ble.n	801992e <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x1a>
    return NULL;
 801992a:	2300      	movs	r3, #0
 801992c:	e004      	b.n	8019938 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x24>
  }
  return scratch_buffers[buffer_idx].ptr;
 801992e:	4a06      	ldr	r2, [pc, #24]	; (8019948 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x34>)
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	00db      	lsls	r3, r3, #3
 8019934:	4413      	add	r3, r2
 8019936:	685b      	ldr	r3, [r3, #4]
}
 8019938:	4618      	mov	r0, r3
 801993a:	370c      	adds	r7, #12
 801993c:	46bd      	mov	sp, r7
 801993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019942:	4770      	bx	lr
 8019944:	200056a0 	.word	0x200056a0
 8019948:	20005680 	.word	0x20005680

0801994c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
 801994c:	b480      	push	{r7}
 801994e:	b083      	sub	sp, #12
 8019950:	af00      	add	r7, sp, #0
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019952:	2300      	movs	r3, #0
 8019954:	607b      	str	r3, [r7, #4]
 8019956:	e00d      	b.n	8019974 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 8019958:	4914      	ldr	r1, [pc, #80]	; (80199ac <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x60>)
 801995a:	687a      	ldr	r2, [r7, #4]
 801995c:	4613      	mov	r3, r2
 801995e:	011b      	lsls	r3, r3, #4
 8019960:	4413      	add	r3, r2
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	440b      	add	r3, r1
 8019966:	3340      	adds	r3, #64	; 0x40
 8019968:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801996c:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	3301      	adds	r3, #1
 8019972:	607b      	str	r3, [r7, #4]
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2b03      	cmp	r3, #3
 8019978:	d9ee      	bls.n	8019958 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0xc>
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 801997a:	2300      	movs	r3, #0
 801997c:	603b      	str	r3, [r7, #0]
 801997e:	e00a      	b.n	8019996 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x4a>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 8019980:	4a0b      	ldr	r2, [pc, #44]	; (80199b0 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x64>)
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	011b      	lsls	r3, r3, #4
 8019986:	4413      	add	r3, r2
 8019988:	330c      	adds	r3, #12
 801998a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801998e:	801a      	strh	r2, [r3, #0]
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	3301      	adds	r3, #1
 8019994:	603b      	str	r3, [r7, #0]
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	2b03      	cmp	r3, #3
 801999a:	d9f1      	bls.n	8019980 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x34>
  }
}
 801999c:	bf00      	nop
 801999e:	bf00      	nop
 80199a0:	370c      	adds	r7, #12
 80199a2:	46bd      	mov	sp, r7
 80199a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	200054b8 	.word	0x200054b8
 80199b0:	200055c8 	.word	0x200055c8

080199b4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b084      	sub	sp, #16
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 80199be:	4b2e      	ldr	r3, [pc, #184]	; (8019a78 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc4>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	4a2e      	ldr	r2, [pc, #184]	; (8019a7c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xc8>)
 80199c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	4413      	add	r3, r2
 80199cc:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 80199ce:	2300      	movs	r3, #0
 80199d0:	60fb      	str	r3, [r7, #12]
 80199d2:	e045      	b.n	8019a60 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xac>
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
 80199d4:	492a      	ldr	r1, [pc, #168]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80199d6:	68fa      	ldr	r2, [r7, #12]
 80199d8:	4613      	mov	r3, r2
 80199da:	011b      	lsls	r3, r3, #4
 80199dc:	4413      	add	r3, r2
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	440b      	add	r3, r1
 80199e2:	3340      	adds	r3, #64	; 0x40
 80199e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199e8:	461a      	mov	r2, r3
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	4293      	cmp	r3, r2
 80199ee:	d107      	bne.n	8019a00 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x4c>
      return &tflTensors[ix].tensor;
 80199f0:	68fa      	ldr	r2, [r7, #12]
 80199f2:	4613      	mov	r3, r2
 80199f4:	011b      	lsls	r3, r3, #4
 80199f6:	4413      	add	r3, r2
 80199f8:	009b      	lsls	r3, r3, #2
 80199fa:	4a21      	ldr	r2, [pc, #132]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 80199fc:	4413      	add	r3, r2
 80199fe:	e037      	b.n	8019a70 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 8019a00:	491f      	ldr	r1, [pc, #124]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a02:	68fa      	ldr	r2, [r7, #12]
 8019a04:	4613      	mov	r3, r2
 8019a06:	011b      	lsls	r3, r3, #4
 8019a08:	4413      	add	r3, r2
 8019a0a:	009b      	lsls	r3, r3, #2
 8019a0c:	440b      	add	r3, r1
 8019a0e:	3340      	adds	r3, #64	; 0x40
 8019a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019a18:	4293      	cmp	r3, r2
 8019a1a:	d11e      	bne.n	8019a5a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xa6>
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 8019a1c:	6838      	ldr	r0, [r7, #0]
 8019a1e:	68fa      	ldr	r2, [r7, #12]
 8019a20:	4613      	mov	r3, r2
 8019a22:	011b      	lsls	r3, r3, #4
 8019a24:	4413      	add	r3, r2
 8019a26:	009b      	lsls	r3, r3, #2
 8019a28:	4a15      	ldr	r2, [pc, #84]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a2a:	4413      	add	r3, r2
 8019a2c:	4619      	mov	r1, r3
 8019a2e:	f7ff fe33 	bl	8019698 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	b218      	sxth	r0, r3
 8019a36:	4912      	ldr	r1, [pc, #72]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a38:	68fa      	ldr	r2, [r7, #12]
 8019a3a:	4613      	mov	r3, r2
 8019a3c:	011b      	lsls	r3, r3, #4
 8019a3e:	4413      	add	r3, r2
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	440b      	add	r3, r1
 8019a44:	3340      	adds	r3, #64	; 0x40
 8019a46:	4602      	mov	r2, r0
 8019a48:	801a      	strh	r2, [r3, #0]
      return &tflTensors[ix].tensor;
 8019a4a:	68fa      	ldr	r2, [r7, #12]
 8019a4c:	4613      	mov	r3, r2
 8019a4e:	011b      	lsls	r3, r3, #4
 8019a50:	4413      	add	r3, r2
 8019a52:	009b      	lsls	r3, r3, #2
 8019a54:	4a0a      	ldr	r2, [pc, #40]	; (8019a80 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xcc>)
 8019a56:	4413      	add	r3, r2
 8019a58:	e00a      	b.n	8019a70 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xbc>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	3301      	adds	r3, #1
 8019a5e:	60fb      	str	r3, [r7, #12]
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	2b03      	cmp	r3, #3
 8019a64:	d9b6      	bls.n	80199d4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 8019a66:	2104      	movs	r1, #4
 8019a68:	4806      	ldr	r0, [pc, #24]	; (8019a84 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xd0>)
 8019a6a:	f7ef f9e3 	bl	8008e34 <_Z9ei_printfPKcz>
  return nullptr;
 8019a6e:	2300      	movs	r3, #0
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3710      	adds	r7, #16
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd80      	pop	{r7, pc}
 8019a78:	20005650 	.word	0x20005650
 8019a7c:	080290bc 	.word	0x080290bc
 8019a80:	200054b8 	.word	0x200054b8
 8019a84:	08022fb0 	.word	0x08022fb0

08019a88 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b084      	sub	sp, #16
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
 8019a90:	6039      	str	r1, [r7, #0]

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 8019a92:	4b25      	ldr	r3, [pc, #148]	; (8019b28 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	4a25      	ldr	r2, [pc, #148]	; (8019b2c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>)
 8019a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	4413      	add	r3, r2
 8019aa0:	603b      	str	r3, [r7, #0]

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	60fb      	str	r3, [r7, #12]
 8019aa6:	e033      	b.n	8019b10 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x88>
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
 8019aa8:	4a21      	ldr	r2, [pc, #132]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	011b      	lsls	r3, r3, #4
 8019aae:	4413      	add	r3, r2
 8019ab0:	330c      	adds	r3, #12
 8019ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ab6:	461a      	mov	r2, r3
 8019ab8:	683b      	ldr	r3, [r7, #0]
 8019aba:	4293      	cmp	r3, r2
 8019abc:	d104      	bne.n	8019ac8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
      return &tflEvalTensors[ix].tensor;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	011b      	lsls	r3, r3, #4
 8019ac2:	4a1b      	ldr	r2, [pc, #108]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019ac4:	4413      	add	r3, r2
 8019ac6:	e02b      	b.n	8019b20 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 8019ac8:	4a19      	ldr	r2, [pc, #100]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	011b      	lsls	r3, r3, #4
 8019ace:	4413      	add	r3, r2
 8019ad0:	330c      	adds	r3, #12
 8019ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ad6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019ada:	4293      	cmp	r3, r2
 8019adc:	d115      	bne.n	8019b0a <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x82>
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	011b      	lsls	r3, r3, #4
 8019ae2:	4a13      	ldr	r2, [pc, #76]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019ae4:	4413      	add	r3, r2
 8019ae6:	4619      	mov	r1, r3
 8019ae8:	6838      	ldr	r0, [r7, #0]
 8019aea:	f7ff fe21 	bl	8019730 <_ZN12_GLOBAL__N_1L23init_tflite_eval_tensorEiP16TfLiteEvalTensor>
      tflEvalTensors[ix].index = tensor_idx;
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	b219      	sxth	r1, r3
 8019af2:	4a0f      	ldr	r2, [pc, #60]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	011b      	lsls	r3, r3, #4
 8019af8:	4413      	add	r3, r2
 8019afa:	330c      	adds	r3, #12
 8019afc:	460a      	mov	r2, r1
 8019afe:	801a      	strh	r2, [r3, #0]
      return &tflEvalTensors[ix].tensor;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	011b      	lsls	r3, r3, #4
 8019b04:	4a0a      	ldr	r2, [pc, #40]	; (8019b30 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
 8019b06:	4413      	add	r3, r2
 8019b08:	e00a      	b.n	8019b20 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	60fb      	str	r3, [r7, #12]
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	2b03      	cmp	r3, #3
 8019b14:	d9c8      	bls.n	8019aa8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x20>
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 8019b16:	2104      	movs	r1, #4
 8019b18:	4806      	ldr	r0, [pc, #24]	; (8019b34 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
 8019b1a:	f7ef f98b 	bl	8008e34 <_Z9ei_printfPKcz>
  return nullptr;
 8019b1e:	2300      	movs	r3, #0
}
 8019b20:	4618      	mov	r0, r3
 8019b22:	3710      	adds	r7, #16
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	20005650 	.word	0x20005650
 8019b2c:	080290bc 	.word	0x080290bc
 8019b30:	200055c8 	.word	0x200055c8
 8019b34:	08022fe8 	.word	0x08022fe8

08019b38 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>:

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b082      	sub	sp, #8
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	2300      	movs	r3, #0
 8019b44:	2200      	movs	r2, #0
 8019b46:	2100      	movs	r1, #0
 8019b48:	f7fe fa1e 	bl	8017f88 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 8019b4c:	4a03      	ldr	r2, [pc, #12]	; (8019b5c <_ZN12_GLOBAL__N_115EonMicroContextC1Ev+0x24>)
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	601a      	str	r2, [r3, #0]
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	4618      	mov	r0, r3
 8019b56:	3708      	adds	r7, #8
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bd80      	pop	{r7, pc}
 8019b5c:	080290d4 	.word	0x080290d4

08019b60 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:

  void* AllocatePersistentBuffer(size_t bytes) {
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	6039      	str	r1, [r7, #0]
    return AllocatePersistentBufferImpl(nullptr, bytes);
 8019b6a:	6839      	ldr	r1, [r7, #0]
 8019b6c:	2000      	movs	r0, #0
 8019b6e:	f7ff fe19 	bl	80197a4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
 8019b72:	4603      	mov	r3, r0
  }
 8019b74:	4618      	mov	r0, r3
 8019b76:	3708      	adds	r7, #8
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b084      	sub	sp, #16
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	60f8      	str	r0, [r7, #12]
 8019b84:	60b9      	str	r1, [r7, #8]
 8019b86:	607a      	str	r2, [r7, #4]
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 8019b88:	687a      	ldr	r2, [r7, #4]
 8019b8a:	68b9      	ldr	r1, [r7, #8]
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	f7ff fe7b 	bl	8019888 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
 8019b92:	4603      	mov	r3, r0
  }
 8019b94:	4618      	mov	r0, r3
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:

  void* GetScratchBuffer(int buffer_index) {
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b082      	sub	sp, #8
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
 8019ba4:	6039      	str	r1, [r7, #0]
    return GetScratchBufferImpl(nullptr, buffer_index);
 8019ba6:	6839      	ldr	r1, [r7, #0]
 8019ba8:	2000      	movs	r0, #0
 8019baa:	f7ff feb3 	bl	8019914 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>
 8019bae:	4603      	mov	r3, r0
  }
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3708      	adds	r7, #8
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
    return GetTensorImpl(nullptr, tensor_index);
 8019bc2:	6839      	ldr	r1, [r7, #0]
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	f7ff fef5 	bl	80199b4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
 8019bca:	4603      	mov	r3, r0
  }
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3708      	adds	r7, #8
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}

08019bd4 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 8019bd4:	b480      	push	{r7}
 8019bd6:	b083      	sub	sp, #12
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	6078      	str	r0, [r7, #4]
 8019bdc:	6039      	str	r1, [r7, #0]
    return;
 8019bde:	bf00      	nop
  }
 8019be0:	370c      	adds	r7, #12
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr

08019bea <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
 8019bea:	b580      	push	{r7, lr}
 8019bec:	b082      	sub	sp, #8
 8019bee:	af00      	add	r7, sp, #0
 8019bf0:	6078      	str	r0, [r7, #4]
 8019bf2:	6039      	str	r1, [r7, #0]
    return GetEvalTensorImpl(nullptr, tensor_index);
 8019bf4:	6839      	ldr	r1, [r7, #0]
 8019bf6:	2000      	movs	r0, #0
 8019bf8:	f7ff ff46 	bl	8019a88 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
 8019bfc:	4603      	mov	r3, r0
  }
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3708      	adds	r7, #8
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
	...

08019c08 <_Z19tflite_learn_6_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8019c08:	b5b0      	push	{r4, r5, r7, lr}
 8019c0a:	b0aa      	sub	sp, #168	; 0xa8
 8019c0c:	af00      	add	r7, sp, #0
 8019c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8019c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c12:	f44f 7144 	mov.w	r1, #784	; 0x310
 8019c16:	2010      	movs	r0, #16
 8019c18:	4798      	blx	r3
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	4aa7      	ldr	r2, [pc, #668]	; (8019ebc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c1e:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8019c20:	4ba6      	ldr	r3, [pc, #664]	; (8019ebc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d104      	bne.n	8019c32 <_Z19tflite_learn_6_initPFPvjjE+0x2a>
    ei_printf("ERR: failed to allocate tensor arena\n");
 8019c28:	48a5      	ldr	r0, [pc, #660]	; (8019ec0 <_Z19tflite_learn_6_initPFPvjjE+0x2b8>)
 8019c2a:	f7ef f903 	bl	8008e34 <_Z9ei_printfPKcz>
    return kTfLiteError;
 8019c2e:	2401      	movs	r4, #1
 8019c30:	e13f      	b.n	8019eb2 <_Z19tflite_learn_6_initPFPvjjE+0x2aa>
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
 8019c32:	4ba2      	ldr	r3, [pc, #648]	; (8019ebc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	4aa3      	ldr	r2, [pc, #652]	; (8019ec4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019c38:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8019c3a:	4ba0      	ldr	r3, [pc, #640]	; (8019ebc <_Z19tflite_learn_6_initPFPvjjE+0x2b4>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8019c42:	4aa1      	ldr	r2, [pc, #644]	; (8019ec8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019c44:	6013      	str	r3, [r2, #0]

  EonMicroContext micro_context_;
 8019c46:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7ff ff74 	bl	8019b38 <_ZN12_GLOBAL__N_115EonMicroContextC1Ev>
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
 8019c50:	4a9e      	ldr	r2, [pc, #632]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019c56:	6093      	str	r3, [r2, #8]
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 8019c58:	4b9c      	ldr	r3, [pc, #624]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c5a:	4a9d      	ldr	r2, [pc, #628]	; (8019ed0 <_Z19tflite_learn_6_initPFPvjjE+0x2c8>)
 8019c5c:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 8019c5e:	4b9b      	ldr	r3, [pc, #620]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c60:	4a9c      	ldr	r2, [pc, #624]	; (8019ed4 <_Z19tflite_learn_6_initPFPvjjE+0x2cc>)
 8019c62:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 8019c64:	4b99      	ldr	r3, [pc, #612]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c66:	4a9c      	ldr	r2, [pc, #624]	; (8019ed8 <_Z19tflite_learn_6_initPFPvjjE+0x2d0>)
 8019c68:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 8019c6a:	4b98      	ldr	r3, [pc, #608]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c6c:	4a9b      	ldr	r2, [pc, #620]	; (8019edc <_Z19tflite_learn_6_initPFPvjjE+0x2d4>)
 8019c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 8019c70:	4b96      	ldr	r3, [pc, #600]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c72:	4a9b      	ldr	r2, [pc, #620]	; (8019ee0 <_Z19tflite_learn_6_initPFPvjjE+0x2d8>)
 8019c74:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 8019c76:	4b95      	ldr	r3, [pc, #596]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c78:	4a9a      	ldr	r2, [pc, #616]	; (8019ee4 <_Z19tflite_learn_6_initPFPvjjE+0x2dc>)
 8019c7a:	611a      	str	r2, [r3, #16]

  ctx.tensors_size = 8;
 8019c7c:	4b93      	ldr	r3, [pc, #588]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019c7e:	2208      	movs	r2, #8
 8019c80:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 8; ++i) {
 8019c82:	2300      	movs	r3, #0
 8019c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019c88:	e024      	b.n	8019cd4 <_Z19tflite_learn_6_initPFPvjjE+0xcc>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
 8019c8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019c8e:	4619      	mov	r1, r3
 8019c90:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8019c94:	f7ff fd00 	bl	8019698 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 8019c98:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8019c9c:	2b02      	cmp	r3, #2
 8019c9e:	d114      	bne.n	8019cca <_Z19tflite_learn_6_initPFPvjjE+0xc2>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 8019ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ca2:	4991      	ldr	r1, [pc, #580]	; (8019ee8 <_Z19tflite_learn_6_initPFPvjjE+0x2e0>)
 8019ca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019ca8:	011b      	lsls	r3, r3, #4
 8019caa:	440b      	add	r3, r1
 8019cac:	330c      	adds	r3, #12
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	4413      	add	r3, r2
 8019cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (data_end_ptr > tensor_boundary) {
 8019cb6:	4b83      	ldr	r3, [pc, #524]	; (8019ec4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d903      	bls.n	8019cca <_Z19tflite_learn_6_initPFPvjjE+0xc2>
        tensor_boundary = data_end_ptr;
 8019cc2:	4a80      	ldr	r2, [pc, #512]	; (8019ec4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019cc8:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < 8; ++i) {
 8019cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019cce:	3301      	adds	r3, #1
 8019cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8019cd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019cd8:	2b07      	cmp	r3, #7
 8019cda:	d9d6      	bls.n	8019c8a <_Z19tflite_learn_6_initPFPvjjE+0x82>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
 8019cdc:	4b79      	ldr	r3, [pc, #484]	; (8019ec4 <_Z19tflite_learn_6_initPFPvjjE+0x2bc>)
 8019cde:	681a      	ldr	r2, [r3, #0]
 8019ce0:	4b79      	ldr	r3, [pc, #484]	; (8019ec8 <_Z19tflite_learn_6_initPFPvjjE+0x2c0>)
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	429a      	cmp	r2, r3
 8019ce6:	d904      	bls.n	8019cf2 <_Z19tflite_learn_6_initPFPvjjE+0xea>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8019ce8:	4880      	ldr	r0, [pc, #512]	; (8019eec <_Z19tflite_learn_6_initPFPvjjE+0x2e4>)
 8019cea:	f7ef f8a3 	bl	8008e34 <_Z9ei_printfPKcz>
    return kTfLiteError;
 8019cee:	2401      	movs	r4, #1
 8019cf0:	e0da      	b.n	8019ea8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 8019cf2:	4c7f      	ldr	r4, [pc, #508]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019cf4:	463b      	mov	r3, r7
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7fe ffd4 	bl	8018ca4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 8019cfc:	4625      	mov	r5, r4
 8019cfe:	463c      	mov	r4, r7
 8019d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019d08:	6823      	ldr	r3, [r4, #0]
 8019d0a:	602b      	str	r3, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
 8019d0c:	4c78      	ldr	r4, [pc, #480]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d0e:	463b      	mov	r3, r7
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7ff fc23 	bl	801955c <_ZN6tflite16Register_SOFTMAXEv>
 8019d16:	3424      	adds	r4, #36	; 0x24
 8019d18:	463d      	mov	r5, r7
 8019d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019d22:	682b      	ldr	r3, [r5, #0]
 8019d24:	6023      	str	r3, [r4, #0]

  for (size_t g = 0; g < 1; ++g) {
 8019d26:	2300      	movs	r3, #0
 8019d28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019d2c:	e054      	b.n	8019dd8 <_Z19tflite_learn_6_initPFPvjjE+0x1d0>
    current_subgraph_index = g;
 8019d2e:	4a71      	ldr	r2, [pc, #452]	; (8019ef4 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019d30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019d34:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019d36:	4a70      	ldr	r2, [pc, #448]	; (8019ef8 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019d44:	e039      	b.n	8019dba <_Z19tflite_learn_6_initPFPvjjE+0x1b2>
      if (registrations[used_ops[i]].init) {
 8019d46:	4a6d      	ldr	r2, [pc, #436]	; (8019efc <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019d4c:	4413      	add	r3, r2
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	4619      	mov	r1, r3
 8019d52:	4a67      	ldr	r2, [pc, #412]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d54:	460b      	mov	r3, r1
 8019d56:	00db      	lsls	r3, r3, #3
 8019d58:	440b      	add	r3, r1
 8019d5a:	009b      	lsls	r3, r3, #2
 8019d5c:	4413      	add	r3, r2
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d025      	beq.n	8019db0 <_Z19tflite_learn_6_initPFPvjjE+0x1a8>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 8019d64:	4a65      	ldr	r2, [pc, #404]	; (8019efc <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019d6a:	4413      	add	r3, r2
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	4619      	mov	r1, r3
 8019d70:	4a5f      	ldr	r2, [pc, #380]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019d72:	460b      	mov	r3, r1
 8019d74:	00db      	lsls	r3, r3, #3
 8019d76:	440b      	add	r3, r1
 8019d78:	009b      	lsls	r3, r3, #2
 8019d7a:	4413      	add	r3, r2
 8019d7c:	681c      	ldr	r4, [r3, #0]
 8019d7e:	4960      	ldr	r1, [pc, #384]	; (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019d80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019d84:	4613      	mov	r3, r2
 8019d86:	009b      	lsls	r3, r3, #2
 8019d88:	4413      	add	r3, r2
 8019d8a:	00db      	lsls	r3, r3, #3
 8019d8c:	440b      	add	r3, r1
 8019d8e:	3314      	adds	r3, #20
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	2200      	movs	r2, #0
 8019d94:	4619      	mov	r1, r3
 8019d96:	484d      	ldr	r0, [pc, #308]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019d98:	47a0      	blx	r4
 8019d9a:	4601      	mov	r1, r0
 8019d9c:	4858      	ldr	r0, [pc, #352]	; (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019d9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019da2:	4613      	mov	r3, r2
 8019da4:	009b      	lsls	r3, r3, #2
 8019da6:	4413      	add	r3, r2
 8019da8:	00db      	lsls	r3, r3, #3
 8019daa:	4403      	add	r3, r0
 8019dac:	3310      	adds	r3, #16
 8019dae:	6019      	str	r1, [r3, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019db4:	3301      	adds	r3, #1
 8019db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8019dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	4a4d      	ldr	r2, [pc, #308]	; (8019ef8 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dc6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8019dca:	429a      	cmp	r2, r3
 8019dcc:	d3bb      	bcc.n	8019d46 <_Z19tflite_learn_6_initPFPvjjE+0x13e>
  for (size_t g = 0; g < 1; ++g) {
 8019dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8019dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d0a6      	beq.n	8019d2e <_Z19tflite_learn_6_initPFPvjjE+0x126>
      }
    }
  }
  current_subgraph_index = 0;
 8019de0:	4b44      	ldr	r3, [pc, #272]	; (8019ef4 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019de2:	2200      	movs	r2, #0
 8019de4:	601a      	str	r2, [r3, #0]

  for(size_t g = 0; g < 1; ++g) {
 8019de6:	2300      	movs	r3, #0
 8019de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019dec:	e054      	b.n	8019e98 <_Z19tflite_learn_6_initPFPvjjE+0x290>
    current_subgraph_index = g;
 8019dee:	4a41      	ldr	r2, [pc, #260]	; (8019ef4 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019df4:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019df6:	4a40      	ldr	r2, [pc, #256]	; (8019ef8 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019e04:	e039      	b.n	8019e7a <_Z19tflite_learn_6_initPFPvjjE+0x272>
      if (registrations[used_ops[i]].prepare) {
 8019e06:	4a3d      	ldr	r2, [pc, #244]	; (8019efc <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019e08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e0c:	4413      	add	r3, r2
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	4619      	mov	r1, r3
 8019e12:	4a37      	ldr	r2, [pc, #220]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019e14:	460b      	mov	r3, r1
 8019e16:	00db      	lsls	r3, r3, #3
 8019e18:	440b      	add	r3, r1
 8019e1a:	009b      	lsls	r3, r3, #2
 8019e1c:	4413      	add	r3, r2
 8019e1e:	3308      	adds	r3, #8
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d024      	beq.n	8019e70 <_Z19tflite_learn_6_initPFPvjjE+0x268>
        ResetTensors();
 8019e26:	f7ff fd91 	bl	801994c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 8019e2a:	4a34      	ldr	r2, [pc, #208]	; (8019efc <_Z19tflite_learn_6_initPFPvjjE+0x2f4>)
 8019e2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e30:	4413      	add	r3, r2
 8019e32:	781b      	ldrb	r3, [r3, #0]
 8019e34:	4619      	mov	r1, r3
 8019e36:	4a2e      	ldr	r2, [pc, #184]	; (8019ef0 <_Z19tflite_learn_6_initPFPvjjE+0x2e8>)
 8019e38:	460b      	mov	r3, r1
 8019e3a:	00db      	lsls	r3, r3, #3
 8019e3c:	440b      	add	r3, r1
 8019e3e:	009b      	lsls	r3, r3, #2
 8019e40:	4413      	add	r3, r2
 8019e42:	3308      	adds	r3, #8
 8019e44:	681c      	ldr	r4, [r3, #0]
 8019e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019e4a:	4613      	mov	r3, r2
 8019e4c:	009b      	lsls	r3, r3, #2
 8019e4e:	4413      	add	r3, r2
 8019e50:	00db      	lsls	r3, r3, #3
 8019e52:	4a2b      	ldr	r2, [pc, #172]	; (8019f00 <_Z19tflite_learn_6_initPFPvjjE+0x2f8>)
 8019e54:	4413      	add	r3, r2
 8019e56:	4619      	mov	r1, r3
 8019e58:	481c      	ldr	r0, [pc, #112]	; (8019ecc <_Z19tflite_learn_6_initPFPvjjE+0x2c4>)
 8019e5a:	47a0      	blx	r4
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
        if (status != kTfLiteOk) {
 8019e62:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d002      	beq.n	8019e70 <_Z19tflite_learn_6_initPFPvjjE+0x268>
          return status;
 8019e6a:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8019e6e:	e01b      	b.n	8019ea8 <_Z19tflite_learn_6_initPFPvjjE+0x2a0>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 8019e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019e74:	3301      	adds	r3, #1
 8019e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8019e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e7e:	3301      	adds	r3, #1
 8019e80:	4a1d      	ldr	r2, [pc, #116]	; (8019ef8 <_Z19tflite_learn_6_initPFPvjjE+0x2f0>)
 8019e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	d3bb      	bcc.n	8019e06 <_Z19tflite_learn_6_initPFPvjjE+0x1fe>
  for(size_t g = 0; g < 1; ++g) {
 8019e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e92:	3301      	adds	r3, #1
 8019e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8019e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d0a6      	beq.n	8019dee <_Z19tflite_learn_6_initPFPvjjE+0x1e6>
        }
      }
    }
  }
  current_subgraph_index = 0;
 8019ea0:	4b14      	ldr	r3, [pc, #80]	; (8019ef4 <_Z19tflite_learn_6_initPFPvjjE+0x2ec>)
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8019ea6:	2400      	movs	r4, #0
}
 8019ea8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8019eac:	4618      	mov	r0, r3
 8019eae:	f000 f8af 	bl	801a010 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 8019eb2:	4623      	mov	r3, r4
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	37a8      	adds	r7, #168	; 0xa8
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bdb0      	pop	{r4, r5, r7, pc}
 8019ebc:	20005454 	.word	0x20005454
 8019ec0:	08023020 	.word	0x08023020
 8019ec4:	20005458 	.word	0x20005458
 8019ec8:	2000545c 	.word	0x2000545c
 8019ecc:	20005460 	.word	0x20005460
 8019ed0:	080197a5 	.word	0x080197a5
 8019ed4:	08019889 	.word	0x08019889
 8019ed8:	08019915 	.word	0x08019915
 8019edc:	080199b5 	.word	0x080199b5
 8019ee0:	08019a89 	.word	0x08019a89
 8019ee4:	08018251 	.word	0x08018251
 8019ee8:	200050bc 	.word	0x200050bc
 8019eec:	08023048 	.word	0x08023048
 8019ef0:	20005608 	.word	0x20005608
 8019ef4:	20005650 	.word	0x20005650
 8019ef8:	080290c4 	.word	0x080290c4
 8019efc:	200051b4 	.word	0x200051b4
 8019f00:	2000513c 	.word	0x2000513c

08019f04 <_Z20tflite_learn_6_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b082      	sub	sp, #8
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
 8019f0c:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(in_tensor_indices[index], tensor);
 8019f0e:	2300      	movs	r3, #0
 8019f10:	6839      	ldr	r1, [r7, #0]
 8019f12:	4618      	mov	r0, r3
 8019f14:	f7ff fbc0 	bl	8019698 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019f18:	2300      	movs	r3, #0
}
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	3708      	adds	r7, #8
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	bd80      	pop	{r7, pc}

08019f22 <_Z21tflite_learn_6_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
 8019f22:	b580      	push	{r7, lr}
 8019f24:	b082      	sub	sp, #8
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	6078      	str	r0, [r7, #4]
 8019f2a:	6039      	str	r1, [r7, #0]
  init_tflite_tensor(out_tensor_indices[index], tensor);
 8019f2c:	2307      	movs	r3, #7
 8019f2e:	6839      	ldr	r1, [r7, #0]
 8019f30:	4618      	mov	r0, r3
 8019f32:	f7ff fbb1 	bl	8019698 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
 8019f36:	2300      	movs	r3, #0
}
 8019f38:	4618      	mov	r0, r3
 8019f3a:	3708      	adds	r7, #8
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}

08019f40 <_Z21tflite_learn_6_invokev>:

TfLiteStatus tflite_learn_6_invoke() {
 8019f40:	b590      	push	{r4, r7, lr}
 8019f42:	b083      	sub	sp, #12
 8019f44:	af00      	add	r7, sp, #0
  for (size_t i = 0; i < 3; ++i) {
 8019f46:	2300      	movs	r3, #0
 8019f48:	607b      	str	r3, [r7, #4]
 8019f4a:	e022      	b.n	8019f92 <_Z21tflite_learn_6_invokev+0x52>
    ResetTensors();
 8019f4c:	f7ff fcfe 	bl	801994c <_ZN12_GLOBAL__N_1L12ResetTensorsEv>

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 8019f50:	4a14      	ldr	r2, [pc, #80]	; (8019fa4 <_Z21tflite_learn_6_invokev+0x64>)
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	4413      	add	r3, r2
 8019f56:	781b      	ldrb	r3, [r3, #0]
 8019f58:	4619      	mov	r1, r3
 8019f5a:	4a13      	ldr	r2, [pc, #76]	; (8019fa8 <_Z21tflite_learn_6_invokev+0x68>)
 8019f5c:	460b      	mov	r3, r1
 8019f5e:	00db      	lsls	r3, r3, #3
 8019f60:	440b      	add	r3, r1
 8019f62:	009b      	lsls	r3, r3, #2
 8019f64:	4413      	add	r3, r2
 8019f66:	330c      	adds	r3, #12
 8019f68:	681c      	ldr	r4, [r3, #0]
 8019f6a:	687a      	ldr	r2, [r7, #4]
 8019f6c:	4613      	mov	r3, r2
 8019f6e:	009b      	lsls	r3, r3, #2
 8019f70:	4413      	add	r3, r2
 8019f72:	00db      	lsls	r3, r3, #3
 8019f74:	4a0d      	ldr	r2, [pc, #52]	; (8019fac <_Z21tflite_learn_6_invokev+0x6c>)
 8019f76:	4413      	add	r3, r2
 8019f78:	4619      	mov	r1, r3
 8019f7a:	480d      	ldr	r0, [pc, #52]	; (8019fb0 <_Z21tflite_learn_6_invokev+0x70>)
 8019f7c:	47a0      	blx	r4
 8019f7e:	4603      	mov	r3, r0
 8019f80:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8019f82:	78fb      	ldrb	r3, [r7, #3]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d001      	beq.n	8019f8c <_Z21tflite_learn_6_invokev+0x4c>
      return status;
 8019f88:	78fb      	ldrb	r3, [r7, #3]
 8019f8a:	e006      	b.n	8019f9a <_Z21tflite_learn_6_invokev+0x5a>
  for (size_t i = 0; i < 3; ++i) {
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	3301      	adds	r3, #1
 8019f90:	607b      	str	r3, [r7, #4]
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2b02      	cmp	r3, #2
 8019f96:	d9d9      	bls.n	8019f4c <_Z21tflite_learn_6_invokev+0xc>
    }
  }
  return kTfLiteOk;
 8019f98:	2300      	movs	r3, #0
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	370c      	adds	r7, #12
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	bd90      	pop	{r4, r7, pc}
 8019fa2:	bf00      	nop
 8019fa4:	200051b4 	.word	0x200051b4
 8019fa8:	20005608 	.word	0x20005608
 8019fac:	2000513c 	.word	0x2000513c
 8019fb0:	20005460 	.word	0x20005460

08019fb4 <_Z20tflite_learn_6_resetPFvPvE>:

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	b084      	sub	sp, #16
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8019fbc:	4b10      	ldr	r3, [pc, #64]	; (801a000 <_Z20tflite_learn_6_resetPFvPvE+0x4c>)
 8019fbe:	681a      	ldr	r2, [r3, #0]
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	4610      	mov	r0, r2
 8019fc4:	4798      	blx	r3
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 8019fc6:	4b0f      	ldr	r3, [pc, #60]	; (801a004 <_Z20tflite_learn_6_resetPFvPvE+0x50>)
 8019fc8:	2200      	movs	r2, #0
 8019fca:	601a      	str	r2, [r3, #0]

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8019fcc:	2300      	movs	r3, #0
 8019fce:	60fb      	str	r3, [r7, #12]
 8019fd0:	e009      	b.n	8019fe6 <_Z20tflite_learn_6_resetPFvPvE+0x32>
    ei_free(overflow_buffers[ix]);
 8019fd2:	4a0d      	ldr	r2, [pc, #52]	; (801a008 <_Z20tflite_learn_6_resetPFvPvE+0x54>)
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7fd f9ee 	bl	80173bc <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	60fb      	str	r3, [r7, #12]
 8019fe6:	4b09      	ldr	r3, [pc, #36]	; (801a00c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	68fa      	ldr	r2, [r7, #12]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d3f0      	bcc.n	8019fd2 <_Z20tflite_learn_6_resetPFvPvE+0x1e>
  }
  overflow_buffers_ix = 0;
 8019ff0:	4b06      	ldr	r3, [pc, #24]	; (801a00c <_Z20tflite_learn_6_resetPFvPvE+0x58>)
 8019ff2:	2200      	movs	r2, #0
 8019ff4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8019ff6:	2300      	movs	r3, #0
}
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	3710      	adds	r7, #16
 8019ffc:	46bd      	mov	sp, r7
 8019ffe:	bd80      	pop	{r7, pc}
 801a000:	20005454 	.word	0x20005454
 801a004:	200056a0 	.word	0x200056a0
 801a008:	20005654 	.word	0x20005654
 801a00c:	2000567c 	.word	0x2000567c

0801a010 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	4a05      	ldr	r2, [pc, #20]	; (801a030 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x20>)
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	601a      	str	r2, [r3, #0]
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	4618      	mov	r0, r3
 801a022:	f7fd ffd3 	bl	8017fcc <_ZN6tflite12MicroContextD1Ev>
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	4618      	mov	r0, r3
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	080290d4 	.word	0x080290d4

0801a034 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 801a034:	b580      	push	{r7, lr}
 801a036:	b082      	sub	sp, #8
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f7ff ffe7 	bl	801a010 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 801a042:	2118      	movs	r1, #24
 801a044:	6878      	ldr	r0, [r7, #4]
 801a046:	f000 f837 	bl	801a0b8 <_ZdlPvj>
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	4618      	mov	r0, r3
 801a04e:	3708      	adds	r7, #8
 801a050:	46bd      	mov	sp, r7
 801a052:	bd80      	pop	{r7, pc}

0801a054 <_Z41__static_initialization_and_destruction_0ii>:
}
 801a054:	b480      	push	{r7}
 801a056:	b083      	sub	sp, #12
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
 801a05c:	6039      	str	r1, [r7, #0]
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2b01      	cmp	r3, #1
 801a062:	d117      	bne.n	801a094 <_Z41__static_initialization_and_destruction_0ii+0x40>
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d112      	bne.n	801a094 <_Z41__static_initialization_and_destruction_0ii+0x40>
};
 801a06e:	4b0c      	ldr	r3, [pc, #48]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	4a0c      	ldr	r2, [pc, #48]	; (801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a074:	6053      	str	r3, [r2, #4]
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 304), (TfLiteIntArray*)&g0::tensor_dimension5, 240, },
 801a076:	4b0a      	ldr	r3, [pc, #40]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	f503 7398 	add.w	r3, r3, #304	; 0x130
};
 801a07e:	4a09      	ldr	r2, [pc, #36]	; (801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a080:	6553      	str	r3, [r2, #84]	; 0x54
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension6, 8, },
 801a082:	4b07      	ldr	r3, [pc, #28]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	3310      	adds	r3, #16
};
 801a088:	4a06      	ldr	r2, [pc, #24]	; (801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a08a:	6653      	str	r3, [r2, #100]	; 0x64
 801a08c:	4b04      	ldr	r3, [pc, #16]	; (801a0a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	4a04      	ldr	r2, [pc, #16]	; (801a0a4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801a092:	6753      	str	r3, [r2, #116]	; 0x74
}
 801a094:	bf00      	nop
 801a096:	370c      	adds	r7, #12
 801a098:	46bd      	mov	sp, r7
 801a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09e:	4770      	bx	lr
 801a0a0:	20005454 	.word	0x20005454
 801a0a4:	200050bc 	.word	0x200050bc

0801a0a8 <_GLOBAL__sub_I__Z19tflite_learn_6_initPFPvjjE>:
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	af00      	add	r7, sp, #0
 801a0ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a0b0:	2001      	movs	r0, #1
 801a0b2:	f7ff ffcf 	bl	801a054 <_Z41__static_initialization_and_destruction_0ii>
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <_ZdlPvj>:
 801a0b8:	f000 b81d 	b.w	801a0f6 <_ZdlPv>

0801a0bc <_ZdaPv>:
 801a0bc:	f000 b81b 	b.w	801a0f6 <_ZdlPv>

0801a0c0 <_ZdaPvj>:
 801a0c0:	f7ff bffc 	b.w	801a0bc <_ZdaPv>

0801a0c4 <_Znwj>:
 801a0c4:	2801      	cmp	r0, #1
 801a0c6:	bf38      	it	cc
 801a0c8:	2001      	movcc	r0, #1
 801a0ca:	b510      	push	{r4, lr}
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	f003 fb00 	bl	801d6d4 <malloc>
 801a0d4:	b100      	cbz	r0, 801a0d8 <_Znwj+0x14>
 801a0d6:	bd10      	pop	{r4, pc}
 801a0d8:	f000 f810 	bl	801a0fc <_ZSt15get_new_handlerv>
 801a0dc:	b908      	cbnz	r0, 801a0e2 <_Znwj+0x1e>
 801a0de:	f003 fab1 	bl	801d644 <abort>
 801a0e2:	4780      	blx	r0
 801a0e4:	e7f3      	b.n	801a0ce <_Znwj+0xa>

0801a0e6 <_Znaj>:
 801a0e6:	f7ff bfed 	b.w	801a0c4 <_Znwj>

0801a0ea <_ZSt20__throw_length_errorPKc>:
 801a0ea:	b508      	push	{r3, lr}
 801a0ec:	f003 faaa 	bl	801d644 <abort>

0801a0f0 <_ZSt25__throw_bad_function_callv>:
 801a0f0:	b508      	push	{r3, lr}
 801a0f2:	f003 faa7 	bl	801d644 <abort>

0801a0f6 <_ZdlPv>:
 801a0f6:	f003 baf5 	b.w	801d6e4 <free>
	...

0801a0fc <_ZSt15get_new_handlerv>:
 801a0fc:	4b02      	ldr	r3, [pc, #8]	; (801a108 <_ZSt15get_new_handlerv+0xc>)
 801a0fe:	6818      	ldr	r0, [r3, #0]
 801a100:	f3bf 8f5b 	dmb	ish
 801a104:	4770      	bx	lr
 801a106:	bf00      	nop
 801a108:	200056a4 	.word	0x200056a4

0801a10c <pow>:
 801a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a10e:	ed2d 8b02 	vpush	{d8}
 801a112:	eeb0 8a40 	vmov.f32	s16, s0
 801a116:	eef0 8a60 	vmov.f32	s17, s1
 801a11a:	ec55 4b11 	vmov	r4, r5, d1
 801a11e:	f001 f84b 	bl	801b1b8 <__ieee754_pow>
 801a122:	4622      	mov	r2, r4
 801a124:	462b      	mov	r3, r5
 801a126:	4620      	mov	r0, r4
 801a128:	4629      	mov	r1, r5
 801a12a:	ec57 6b10 	vmov	r6, r7, d0
 801a12e:	f7e6 fd2d 	bl	8000b8c <__aeabi_dcmpun>
 801a132:	2800      	cmp	r0, #0
 801a134:	d13b      	bne.n	801a1ae <pow+0xa2>
 801a136:	ec51 0b18 	vmov	r0, r1, d8
 801a13a:	2200      	movs	r2, #0
 801a13c:	2300      	movs	r3, #0
 801a13e:	f7e6 fcf3 	bl	8000b28 <__aeabi_dcmpeq>
 801a142:	b1b8      	cbz	r0, 801a174 <pow+0x68>
 801a144:	2200      	movs	r2, #0
 801a146:	2300      	movs	r3, #0
 801a148:	4620      	mov	r0, r4
 801a14a:	4629      	mov	r1, r5
 801a14c:	f7e6 fcec 	bl	8000b28 <__aeabi_dcmpeq>
 801a150:	2800      	cmp	r0, #0
 801a152:	d146      	bne.n	801a1e2 <pow+0xd6>
 801a154:	ec45 4b10 	vmov	d0, r4, r5
 801a158:	f000 faaa 	bl	801a6b0 <finite>
 801a15c:	b338      	cbz	r0, 801a1ae <pow+0xa2>
 801a15e:	2200      	movs	r2, #0
 801a160:	2300      	movs	r3, #0
 801a162:	4620      	mov	r0, r4
 801a164:	4629      	mov	r1, r5
 801a166:	f7e6 fce9 	bl	8000b3c <__aeabi_dcmplt>
 801a16a:	b300      	cbz	r0, 801a1ae <pow+0xa2>
 801a16c:	f004 fbde 	bl	801e92c <__errno>
 801a170:	2322      	movs	r3, #34	; 0x22
 801a172:	e01b      	b.n	801a1ac <pow+0xa0>
 801a174:	ec47 6b10 	vmov	d0, r6, r7
 801a178:	f000 fa9a 	bl	801a6b0 <finite>
 801a17c:	b9e0      	cbnz	r0, 801a1b8 <pow+0xac>
 801a17e:	eeb0 0a48 	vmov.f32	s0, s16
 801a182:	eef0 0a68 	vmov.f32	s1, s17
 801a186:	f000 fa93 	bl	801a6b0 <finite>
 801a18a:	b1a8      	cbz	r0, 801a1b8 <pow+0xac>
 801a18c:	ec45 4b10 	vmov	d0, r4, r5
 801a190:	f000 fa8e 	bl	801a6b0 <finite>
 801a194:	b180      	cbz	r0, 801a1b8 <pow+0xac>
 801a196:	4632      	mov	r2, r6
 801a198:	463b      	mov	r3, r7
 801a19a:	4630      	mov	r0, r6
 801a19c:	4639      	mov	r1, r7
 801a19e:	f7e6 fcf5 	bl	8000b8c <__aeabi_dcmpun>
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d0e2      	beq.n	801a16c <pow+0x60>
 801a1a6:	f004 fbc1 	bl	801e92c <__errno>
 801a1aa:	2321      	movs	r3, #33	; 0x21
 801a1ac:	6003      	str	r3, [r0, #0]
 801a1ae:	ecbd 8b02 	vpop	{d8}
 801a1b2:	ec47 6b10 	vmov	d0, r6, r7
 801a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	4630      	mov	r0, r6
 801a1be:	4639      	mov	r1, r7
 801a1c0:	f7e6 fcb2 	bl	8000b28 <__aeabi_dcmpeq>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d0f2      	beq.n	801a1ae <pow+0xa2>
 801a1c8:	eeb0 0a48 	vmov.f32	s0, s16
 801a1cc:	eef0 0a68 	vmov.f32	s1, s17
 801a1d0:	f000 fa6e 	bl	801a6b0 <finite>
 801a1d4:	2800      	cmp	r0, #0
 801a1d6:	d0ea      	beq.n	801a1ae <pow+0xa2>
 801a1d8:	ec45 4b10 	vmov	d0, r4, r5
 801a1dc:	f000 fa68 	bl	801a6b0 <finite>
 801a1e0:	e7c3      	b.n	801a16a <pow+0x5e>
 801a1e2:	4f01      	ldr	r7, [pc, #4]	; (801a1e8 <pow+0xdc>)
 801a1e4:	2600      	movs	r6, #0
 801a1e6:	e7e2      	b.n	801a1ae <pow+0xa2>
 801a1e8:	3ff00000 	.word	0x3ff00000

0801a1ec <sqrt>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	ed2d 8b02 	vpush	{d8}
 801a1f2:	ec55 4b10 	vmov	r4, r5, d0
 801a1f6:	f000 faa5 	bl	801a744 <__ieee754_sqrt>
 801a1fa:	4622      	mov	r2, r4
 801a1fc:	462b      	mov	r3, r5
 801a1fe:	4620      	mov	r0, r4
 801a200:	4629      	mov	r1, r5
 801a202:	eeb0 8a40 	vmov.f32	s16, s0
 801a206:	eef0 8a60 	vmov.f32	s17, s1
 801a20a:	f7e6 fcbf 	bl	8000b8c <__aeabi_dcmpun>
 801a20e:	b990      	cbnz	r0, 801a236 <sqrt+0x4a>
 801a210:	2200      	movs	r2, #0
 801a212:	2300      	movs	r3, #0
 801a214:	4620      	mov	r0, r4
 801a216:	4629      	mov	r1, r5
 801a218:	f7e6 fc90 	bl	8000b3c <__aeabi_dcmplt>
 801a21c:	b158      	cbz	r0, 801a236 <sqrt+0x4a>
 801a21e:	f004 fb85 	bl	801e92c <__errno>
 801a222:	2321      	movs	r3, #33	; 0x21
 801a224:	6003      	str	r3, [r0, #0]
 801a226:	2200      	movs	r2, #0
 801a228:	2300      	movs	r3, #0
 801a22a:	4610      	mov	r0, r2
 801a22c:	4619      	mov	r1, r3
 801a22e:	f7e6 fb3d 	bl	80008ac <__aeabi_ddiv>
 801a232:	ec41 0b18 	vmov	d8, r0, r1
 801a236:	eeb0 0a48 	vmov.f32	s0, s16
 801a23a:	eef0 0a68 	vmov.f32	s1, s17
 801a23e:	ecbd 8b02 	vpop	{d8}
 801a242:	bd38      	pop	{r3, r4, r5, pc}
 801a244:	0000      	movs	r0, r0
	...

0801a248 <cos>:
 801a248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a24a:	ec53 2b10 	vmov	r2, r3, d0
 801a24e:	4826      	ldr	r0, [pc, #152]	; (801a2e8 <cos+0xa0>)
 801a250:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a254:	4281      	cmp	r1, r0
 801a256:	dc06      	bgt.n	801a266 <cos+0x1e>
 801a258:	ed9f 1b21 	vldr	d1, [pc, #132]	; 801a2e0 <cos+0x98>
 801a25c:	b005      	add	sp, #20
 801a25e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a262:	f000 bc15 	b.w	801aa90 <__kernel_cos>
 801a266:	4821      	ldr	r0, [pc, #132]	; (801a2ec <cos+0xa4>)
 801a268:	4281      	cmp	r1, r0
 801a26a:	dd09      	ble.n	801a280 <cos+0x38>
 801a26c:	ee10 0a10 	vmov	r0, s0
 801a270:	4619      	mov	r1, r3
 801a272:	f7e6 f839 	bl	80002e8 <__aeabi_dsub>
 801a276:	ec41 0b10 	vmov	d0, r0, r1
 801a27a:	b005      	add	sp, #20
 801a27c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a280:	4668      	mov	r0, sp
 801a282:	f001 fcc5 	bl	801bc10 <__ieee754_rem_pio2>
 801a286:	f000 0003 	and.w	r0, r0, #3
 801a28a:	2801      	cmp	r0, #1
 801a28c:	d00b      	beq.n	801a2a6 <cos+0x5e>
 801a28e:	2802      	cmp	r0, #2
 801a290:	d016      	beq.n	801a2c0 <cos+0x78>
 801a292:	b9e0      	cbnz	r0, 801a2ce <cos+0x86>
 801a294:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a298:	ed9d 0b00 	vldr	d0, [sp]
 801a29c:	f000 fbf8 	bl	801aa90 <__kernel_cos>
 801a2a0:	ec51 0b10 	vmov	r0, r1, d0
 801a2a4:	e7e7      	b.n	801a276 <cos+0x2e>
 801a2a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2aa:	ed9d 0b00 	vldr	d0, [sp]
 801a2ae:	f000 fcb7 	bl	801ac20 <__kernel_sin>
 801a2b2:	ec53 2b10 	vmov	r2, r3, d0
 801a2b6:	ee10 0a10 	vmov	r0, s0
 801a2ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a2be:	e7da      	b.n	801a276 <cos+0x2e>
 801a2c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2c4:	ed9d 0b00 	vldr	d0, [sp]
 801a2c8:	f000 fbe2 	bl	801aa90 <__kernel_cos>
 801a2cc:	e7f1      	b.n	801a2b2 <cos+0x6a>
 801a2ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a2d2:	ed9d 0b00 	vldr	d0, [sp]
 801a2d6:	2001      	movs	r0, #1
 801a2d8:	f000 fca2 	bl	801ac20 <__kernel_sin>
 801a2dc:	e7e0      	b.n	801a2a0 <cos+0x58>
 801a2de:	bf00      	nop
	...
 801a2e8:	3fe921fb 	.word	0x3fe921fb
 801a2ec:	7fefffff 	.word	0x7fefffff

0801a2f0 <frexp>:
 801a2f0:	b570      	push	{r4, r5, r6, lr}
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	ec55 4b10 	vmov	r4, r5, d0
 801a2f8:	6001      	str	r1, [r0, #0]
 801a2fa:	4916      	ldr	r1, [pc, #88]	; (801a354 <frexp+0x64>)
 801a2fc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801a300:	428a      	cmp	r2, r1
 801a302:	4606      	mov	r6, r0
 801a304:	462b      	mov	r3, r5
 801a306:	dc22      	bgt.n	801a34e <frexp+0x5e>
 801a308:	ee10 1a10 	vmov	r1, s0
 801a30c:	4311      	orrs	r1, r2
 801a30e:	d01e      	beq.n	801a34e <frexp+0x5e>
 801a310:	4911      	ldr	r1, [pc, #68]	; (801a358 <frexp+0x68>)
 801a312:	4029      	ands	r1, r5
 801a314:	b969      	cbnz	r1, 801a332 <frexp+0x42>
 801a316:	4b11      	ldr	r3, [pc, #68]	; (801a35c <frexp+0x6c>)
 801a318:	2200      	movs	r2, #0
 801a31a:	ee10 0a10 	vmov	r0, s0
 801a31e:	4629      	mov	r1, r5
 801a320:	f7e6 f99a 	bl	8000658 <__aeabi_dmul>
 801a324:	460b      	mov	r3, r1
 801a326:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a32a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801a32e:	4604      	mov	r4, r0
 801a330:	6031      	str	r1, [r6, #0]
 801a332:	6831      	ldr	r1, [r6, #0]
 801a334:	1512      	asrs	r2, r2, #20
 801a336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a33a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 801a33e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a342:	4411      	add	r1, r2
 801a344:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801a348:	6031      	str	r1, [r6, #0]
 801a34a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801a34e:	ec45 4b10 	vmov	d0, r4, r5
 801a352:	bd70      	pop	{r4, r5, r6, pc}
 801a354:	7fefffff 	.word	0x7fefffff
 801a358:	7ff00000 	.word	0x7ff00000
 801a35c:	43500000 	.word	0x43500000

0801a360 <sin>:
 801a360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a362:	ec53 2b10 	vmov	r2, r3, d0
 801a366:	4828      	ldr	r0, [pc, #160]	; (801a408 <sin+0xa8>)
 801a368:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a36c:	4281      	cmp	r1, r0
 801a36e:	dc07      	bgt.n	801a380 <sin+0x20>
 801a370:	ed9f 1b23 	vldr	d1, [pc, #140]	; 801a400 <sin+0xa0>
 801a374:	2000      	movs	r0, #0
 801a376:	b005      	add	sp, #20
 801a378:	f85d eb04 	ldr.w	lr, [sp], #4
 801a37c:	f000 bc50 	b.w	801ac20 <__kernel_sin>
 801a380:	4822      	ldr	r0, [pc, #136]	; (801a40c <sin+0xac>)
 801a382:	4281      	cmp	r1, r0
 801a384:	dd09      	ble.n	801a39a <sin+0x3a>
 801a386:	ee10 0a10 	vmov	r0, s0
 801a38a:	4619      	mov	r1, r3
 801a38c:	f7e5 ffac 	bl	80002e8 <__aeabi_dsub>
 801a390:	ec41 0b10 	vmov	d0, r0, r1
 801a394:	b005      	add	sp, #20
 801a396:	f85d fb04 	ldr.w	pc, [sp], #4
 801a39a:	4668      	mov	r0, sp
 801a39c:	f001 fc38 	bl	801bc10 <__ieee754_rem_pio2>
 801a3a0:	f000 0003 	and.w	r0, r0, #3
 801a3a4:	2801      	cmp	r0, #1
 801a3a6:	d00c      	beq.n	801a3c2 <sin+0x62>
 801a3a8:	2802      	cmp	r0, #2
 801a3aa:	d011      	beq.n	801a3d0 <sin+0x70>
 801a3ac:	b9f0      	cbnz	r0, 801a3ec <sin+0x8c>
 801a3ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3b2:	ed9d 0b00 	vldr	d0, [sp]
 801a3b6:	2001      	movs	r0, #1
 801a3b8:	f000 fc32 	bl	801ac20 <__kernel_sin>
 801a3bc:	ec51 0b10 	vmov	r0, r1, d0
 801a3c0:	e7e6      	b.n	801a390 <sin+0x30>
 801a3c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3c6:	ed9d 0b00 	vldr	d0, [sp]
 801a3ca:	f000 fb61 	bl	801aa90 <__kernel_cos>
 801a3ce:	e7f5      	b.n	801a3bc <sin+0x5c>
 801a3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3d4:	ed9d 0b00 	vldr	d0, [sp]
 801a3d8:	2001      	movs	r0, #1
 801a3da:	f000 fc21 	bl	801ac20 <__kernel_sin>
 801a3de:	ec53 2b10 	vmov	r2, r3, d0
 801a3e2:	ee10 0a10 	vmov	r0, s0
 801a3e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a3ea:	e7d1      	b.n	801a390 <sin+0x30>
 801a3ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a3f0:	ed9d 0b00 	vldr	d0, [sp]
 801a3f4:	f000 fb4c 	bl	801aa90 <__kernel_cos>
 801a3f8:	e7f1      	b.n	801a3de <sin+0x7e>
 801a3fa:	bf00      	nop
 801a3fc:	f3af 8000 	nop.w
	...
 801a408:	3fe921fb 	.word	0x3fe921fb
 801a40c:	7fefffff 	.word	0x7fefffff

0801a410 <tan>:
 801a410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a412:	ec53 2b10 	vmov	r2, r3, d0
 801a416:	4816      	ldr	r0, [pc, #88]	; (801a470 <tan+0x60>)
 801a418:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a41c:	4281      	cmp	r1, r0
 801a41e:	dc07      	bgt.n	801a430 <tan+0x20>
 801a420:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801a468 <tan+0x58>
 801a424:	2001      	movs	r0, #1
 801a426:	b005      	add	sp, #20
 801a428:	f85d eb04 	ldr.w	lr, [sp], #4
 801a42c:	f000 bcb8 	b.w	801ada0 <__kernel_tan>
 801a430:	4810      	ldr	r0, [pc, #64]	; (801a474 <tan+0x64>)
 801a432:	4281      	cmp	r1, r0
 801a434:	dd09      	ble.n	801a44a <tan+0x3a>
 801a436:	ee10 0a10 	vmov	r0, s0
 801a43a:	4619      	mov	r1, r3
 801a43c:	f7e5 ff54 	bl	80002e8 <__aeabi_dsub>
 801a440:	ec41 0b10 	vmov	d0, r0, r1
 801a444:	b005      	add	sp, #20
 801a446:	f85d fb04 	ldr.w	pc, [sp], #4
 801a44a:	4668      	mov	r0, sp
 801a44c:	f001 fbe0 	bl	801bc10 <__ieee754_rem_pio2>
 801a450:	0040      	lsls	r0, r0, #1
 801a452:	f000 0002 	and.w	r0, r0, #2
 801a456:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a45a:	ed9d 0b00 	vldr	d0, [sp]
 801a45e:	f1c0 0001 	rsb	r0, r0, #1
 801a462:	f000 fc9d 	bl	801ada0 <__kernel_tan>
 801a466:	e7ed      	b.n	801a444 <tan+0x34>
	...
 801a470:	3fe921fb 	.word	0x3fe921fb
 801a474:	7fefffff 	.word	0x7fefffff

0801a478 <expf>:
 801a478:	b508      	push	{r3, lr}
 801a47a:	ed2d 8b02 	vpush	{d8}
 801a47e:	eef0 8a40 	vmov.f32	s17, s0
 801a482:	f001 fe7b 	bl	801c17c <__ieee754_expf>
 801a486:	eeb0 8a40 	vmov.f32	s16, s0
 801a48a:	eeb0 0a68 	vmov.f32	s0, s17
 801a48e:	f000 f923 	bl	801a6d8 <finitef>
 801a492:	b160      	cbz	r0, 801a4ae <expf+0x36>
 801a494:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801a4d4 <expf+0x5c>
 801a498:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a0:	dd0a      	ble.n	801a4b8 <expf+0x40>
 801a4a2:	f004 fa43 	bl	801e92c <__errno>
 801a4a6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801a4d8 <expf+0x60>
 801a4aa:	2322      	movs	r3, #34	; 0x22
 801a4ac:	6003      	str	r3, [r0, #0]
 801a4ae:	eeb0 0a48 	vmov.f32	s0, s16
 801a4b2:	ecbd 8b02 	vpop	{d8}
 801a4b6:	bd08      	pop	{r3, pc}
 801a4b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801a4dc <expf+0x64>
 801a4bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801a4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4c4:	d5f3      	bpl.n	801a4ae <expf+0x36>
 801a4c6:	f004 fa31 	bl	801e92c <__errno>
 801a4ca:	2322      	movs	r3, #34	; 0x22
 801a4cc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801a4e0 <expf+0x68>
 801a4d0:	6003      	str	r3, [r0, #0]
 801a4d2:	e7ec      	b.n	801a4ae <expf+0x36>
 801a4d4:	42b17217 	.word	0x42b17217
 801a4d8:	7f800000 	.word	0x7f800000
 801a4dc:	c2cff1b5 	.word	0xc2cff1b5
 801a4e0:	00000000 	.word	0x00000000

0801a4e4 <logf>:
 801a4e4:	b508      	push	{r3, lr}
 801a4e6:	ed2d 8b02 	vpush	{d8}
 801a4ea:	eeb0 8a40 	vmov.f32	s16, s0
 801a4ee:	f001 ff13 	bl	801c318 <__ieee754_logf>
 801a4f2:	eeb4 8a48 	vcmp.f32	s16, s16
 801a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4fa:	d60f      	bvs.n	801a51c <logf+0x38>
 801a4fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a504:	dc0a      	bgt.n	801a51c <logf+0x38>
 801a506:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a50e:	d108      	bne.n	801a522 <logf+0x3e>
 801a510:	f004 fa0c 	bl	801e92c <__errno>
 801a514:	2322      	movs	r3, #34	; 0x22
 801a516:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801a538 <logf+0x54>
 801a51a:	6003      	str	r3, [r0, #0]
 801a51c:	ecbd 8b02 	vpop	{d8}
 801a520:	bd08      	pop	{r3, pc}
 801a522:	f004 fa03 	bl	801e92c <__errno>
 801a526:	ecbd 8b02 	vpop	{d8}
 801a52a:	2321      	movs	r3, #33	; 0x21
 801a52c:	6003      	str	r3, [r0, #0]
 801a52e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a532:	4802      	ldr	r0, [pc, #8]	; (801a53c <logf+0x58>)
 801a534:	f000 b8de 	b.w	801a6f4 <nanf>
 801a538:	ff800000 	.word	0xff800000
 801a53c:	0802972b 	.word	0x0802972b

0801a540 <log10f>:
 801a540:	b508      	push	{r3, lr}
 801a542:	ed2d 8b02 	vpush	{d8}
 801a546:	eeb0 8a40 	vmov.f32	s16, s0
 801a54a:	f001 ffd7 	bl	801c4fc <__ieee754_log10f>
 801a54e:	eeb4 8a48 	vcmp.f32	s16, s16
 801a552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a556:	d60f      	bvs.n	801a578 <log10f+0x38>
 801a558:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a560:	d80a      	bhi.n	801a578 <log10f+0x38>
 801a562:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a56a:	d108      	bne.n	801a57e <log10f+0x3e>
 801a56c:	f004 f9de 	bl	801e92c <__errno>
 801a570:	2322      	movs	r3, #34	; 0x22
 801a572:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801a594 <log10f+0x54>
 801a576:	6003      	str	r3, [r0, #0]
 801a578:	ecbd 8b02 	vpop	{d8}
 801a57c:	bd08      	pop	{r3, pc}
 801a57e:	f004 f9d5 	bl	801e92c <__errno>
 801a582:	ecbd 8b02 	vpop	{d8}
 801a586:	2321      	movs	r3, #33	; 0x21
 801a588:	6003      	str	r3, [r0, #0]
 801a58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a58e:	4802      	ldr	r0, [pc, #8]	; (801a598 <log10f+0x58>)
 801a590:	f000 b8b0 	b.w	801a6f4 <nanf>
 801a594:	ff800000 	.word	0xff800000
 801a598:	0802972b 	.word	0x0802972b

0801a59c <sqrtf>:
 801a59c:	b508      	push	{r3, lr}
 801a59e:	ed2d 8b02 	vpush	{d8}
 801a5a2:	eeb0 8a40 	vmov.f32	s16, s0
 801a5a6:	f000 f9a7 	bl	801a8f8 <__ieee754_sqrtf>
 801a5aa:	eeb4 8a48 	vcmp.f32	s16, s16
 801a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5b2:	d60c      	bvs.n	801a5ce <sqrtf+0x32>
 801a5b4:	eddf 8a07 	vldr	s17, [pc, #28]	; 801a5d4 <sqrtf+0x38>
 801a5b8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5c0:	d505      	bpl.n	801a5ce <sqrtf+0x32>
 801a5c2:	f004 f9b3 	bl	801e92c <__errno>
 801a5c6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a5ca:	2321      	movs	r3, #33	; 0x21
 801a5cc:	6003      	str	r3, [r0, #0]
 801a5ce:	ecbd 8b02 	vpop	{d8}
 801a5d2:	bd08      	pop	{r3, pc}
 801a5d4:	00000000 	.word	0x00000000

0801a5d8 <frexpf>:
 801a5d8:	ee10 3a10 	vmov	r3, s0
 801a5dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a5e0:	2100      	movs	r1, #0
 801a5e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a5e6:	6001      	str	r1, [r0, #0]
 801a5e8:	da19      	bge.n	801a61e <frexpf+0x46>
 801a5ea:	b1c2      	cbz	r2, 801a61e <frexpf+0x46>
 801a5ec:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a5f0:	d10a      	bne.n	801a608 <frexpf+0x30>
 801a5f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a620 <frexpf+0x48>
 801a5f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a5fa:	f06f 0118 	mvn.w	r1, #24
 801a5fe:	ee17 3a90 	vmov	r3, s15
 801a602:	6001      	str	r1, [r0, #0]
 801a604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a608:	6801      	ldr	r1, [r0, #0]
 801a60a:	15d2      	asrs	r2, r2, #23
 801a60c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a610:	3a7e      	subs	r2, #126	; 0x7e
 801a612:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801a616:	4411      	add	r1, r2
 801a618:	ee00 3a10 	vmov	s0, r3
 801a61c:	6001      	str	r1, [r0, #0]
 801a61e:	4770      	bx	lr
 801a620:	4c000000 	.word	0x4c000000

0801a624 <sinf>:
 801a624:	ee10 3a10 	vmov	r3, s0
 801a628:	b507      	push	{r0, r1, r2, lr}
 801a62a:	4a1f      	ldr	r2, [pc, #124]	; (801a6a8 <sinf+0x84>)
 801a62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a630:	4293      	cmp	r3, r2
 801a632:	dc07      	bgt.n	801a644 <sinf+0x20>
 801a634:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801a6ac <sinf+0x88>
 801a638:	2000      	movs	r0, #0
 801a63a:	b003      	add	sp, #12
 801a63c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a640:	f001 bd54 	b.w	801c0ec <__kernel_sinf>
 801a644:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a648:	db04      	blt.n	801a654 <sinf+0x30>
 801a64a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a64e:	b003      	add	sp, #12
 801a650:	f85d fb04 	ldr.w	pc, [sp], #4
 801a654:	4668      	mov	r0, sp
 801a656:	f001 ffa9 	bl	801c5ac <__ieee754_rem_pio2f>
 801a65a:	f000 0003 	and.w	r0, r0, #3
 801a65e:	2801      	cmp	r0, #1
 801a660:	d00a      	beq.n	801a678 <sinf+0x54>
 801a662:	2802      	cmp	r0, #2
 801a664:	d00f      	beq.n	801a686 <sinf+0x62>
 801a666:	b9c0      	cbnz	r0, 801a69a <sinf+0x76>
 801a668:	eddd 0a01 	vldr	s1, [sp, #4]
 801a66c:	ed9d 0a00 	vldr	s0, [sp]
 801a670:	2001      	movs	r0, #1
 801a672:	f001 fd3b 	bl	801c0ec <__kernel_sinf>
 801a676:	e7ea      	b.n	801a64e <sinf+0x2a>
 801a678:	eddd 0a01 	vldr	s1, [sp, #4]
 801a67c:	ed9d 0a00 	vldr	s0, [sp]
 801a680:	f001 fcd6 	bl	801c030 <__kernel_cosf>
 801a684:	e7e3      	b.n	801a64e <sinf+0x2a>
 801a686:	eddd 0a01 	vldr	s1, [sp, #4]
 801a68a:	ed9d 0a00 	vldr	s0, [sp]
 801a68e:	2001      	movs	r0, #1
 801a690:	f001 fd2c 	bl	801c0ec <__kernel_sinf>
 801a694:	eeb1 0a40 	vneg.f32	s0, s0
 801a698:	e7d9      	b.n	801a64e <sinf+0x2a>
 801a69a:	eddd 0a01 	vldr	s1, [sp, #4]
 801a69e:	ed9d 0a00 	vldr	s0, [sp]
 801a6a2:	f001 fcc5 	bl	801c030 <__kernel_cosf>
 801a6a6:	e7f5      	b.n	801a694 <sinf+0x70>
 801a6a8:	3f490fd8 	.word	0x3f490fd8
 801a6ac:	00000000 	.word	0x00000000

0801a6b0 <finite>:
 801a6b0:	b082      	sub	sp, #8
 801a6b2:	ed8d 0b00 	vstr	d0, [sp]
 801a6b6:	9801      	ldr	r0, [sp, #4]
 801a6b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a6bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a6c0:	0fc0      	lsrs	r0, r0, #31
 801a6c2:	b002      	add	sp, #8
 801a6c4:	4770      	bx	lr
	...

0801a6c8 <nan>:
 801a6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a6d0 <nan+0x8>
 801a6cc:	4770      	bx	lr
 801a6ce:	bf00      	nop
 801a6d0:	00000000 	.word	0x00000000
 801a6d4:	7ff80000 	.word	0x7ff80000

0801a6d8 <finitef>:
 801a6d8:	b082      	sub	sp, #8
 801a6da:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a6de:	9801      	ldr	r0, [sp, #4]
 801a6e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a6e4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a6e8:	bfac      	ite	ge
 801a6ea:	2000      	movge	r0, #0
 801a6ec:	2001      	movlt	r0, #1
 801a6ee:	b002      	add	sp, #8
 801a6f0:	4770      	bx	lr
	...

0801a6f4 <nanf>:
 801a6f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a6fc <nanf+0x8>
 801a6f8:	4770      	bx	lr
 801a6fa:	bf00      	nop
 801a6fc:	7fc00000 	.word	0x7fc00000

0801a700 <with_errnof>:
 801a700:	b513      	push	{r0, r1, r4, lr}
 801a702:	4604      	mov	r4, r0
 801a704:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a708:	f004 f910 	bl	801e92c <__errno>
 801a70c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a710:	6004      	str	r4, [r0, #0]
 801a712:	b002      	add	sp, #8
 801a714:	bd10      	pop	{r4, pc}

0801a716 <xflowf>:
 801a716:	b130      	cbz	r0, 801a726 <xflowf+0x10>
 801a718:	eef1 7a40 	vneg.f32	s15, s0
 801a71c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a720:	2022      	movs	r0, #34	; 0x22
 801a722:	f7ff bfed 	b.w	801a700 <with_errnof>
 801a726:	eef0 7a40 	vmov.f32	s15, s0
 801a72a:	e7f7      	b.n	801a71c <xflowf+0x6>

0801a72c <__math_uflowf>:
 801a72c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a734 <__math_uflowf+0x8>
 801a730:	f7ff bff1 	b.w	801a716 <xflowf>
 801a734:	10000000 	.word	0x10000000

0801a738 <__math_oflowf>:
 801a738:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a740 <__math_oflowf+0x8>
 801a73c:	f7ff bfeb 	b.w	801a716 <xflowf>
 801a740:	70000000 	.word	0x70000000

0801a744 <__ieee754_sqrt>:
 801a744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a748:	ec55 4b10 	vmov	r4, r5, d0
 801a74c:	4e67      	ldr	r6, [pc, #412]	; (801a8ec <__ieee754_sqrt+0x1a8>)
 801a74e:	43ae      	bics	r6, r5
 801a750:	ee10 0a10 	vmov	r0, s0
 801a754:	ee10 2a10 	vmov	r2, s0
 801a758:	4629      	mov	r1, r5
 801a75a:	462b      	mov	r3, r5
 801a75c:	d10d      	bne.n	801a77a <__ieee754_sqrt+0x36>
 801a75e:	f7e5 ff7b 	bl	8000658 <__aeabi_dmul>
 801a762:	4602      	mov	r2, r0
 801a764:	460b      	mov	r3, r1
 801a766:	4620      	mov	r0, r4
 801a768:	4629      	mov	r1, r5
 801a76a:	f7e5 fdbf 	bl	80002ec <__adddf3>
 801a76e:	4604      	mov	r4, r0
 801a770:	460d      	mov	r5, r1
 801a772:	ec45 4b10 	vmov	d0, r4, r5
 801a776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a77a:	2d00      	cmp	r5, #0
 801a77c:	dc0b      	bgt.n	801a796 <__ieee754_sqrt+0x52>
 801a77e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a782:	4326      	orrs	r6, r4
 801a784:	d0f5      	beq.n	801a772 <__ieee754_sqrt+0x2e>
 801a786:	b135      	cbz	r5, 801a796 <__ieee754_sqrt+0x52>
 801a788:	f7e5 fdae 	bl	80002e8 <__aeabi_dsub>
 801a78c:	4602      	mov	r2, r0
 801a78e:	460b      	mov	r3, r1
 801a790:	f7e6 f88c 	bl	80008ac <__aeabi_ddiv>
 801a794:	e7eb      	b.n	801a76e <__ieee754_sqrt+0x2a>
 801a796:	1509      	asrs	r1, r1, #20
 801a798:	f000 808d 	beq.w	801a8b6 <__ieee754_sqrt+0x172>
 801a79c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a7a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a7a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a7a8:	07c9      	lsls	r1, r1, #31
 801a7aa:	bf5c      	itt	pl
 801a7ac:	005b      	lslpl	r3, r3, #1
 801a7ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a7b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a7b6:	bf58      	it	pl
 801a7b8:	0052      	lslpl	r2, r2, #1
 801a7ba:	2500      	movs	r5, #0
 801a7bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a7c0:	1076      	asrs	r6, r6, #1
 801a7c2:	0052      	lsls	r2, r2, #1
 801a7c4:	f04f 0e16 	mov.w	lr, #22
 801a7c8:	46ac      	mov	ip, r5
 801a7ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a7ce:	eb0c 0001 	add.w	r0, ip, r1
 801a7d2:	4298      	cmp	r0, r3
 801a7d4:	bfde      	ittt	le
 801a7d6:	1a1b      	suble	r3, r3, r0
 801a7d8:	eb00 0c01 	addle.w	ip, r0, r1
 801a7dc:	186d      	addle	r5, r5, r1
 801a7de:	005b      	lsls	r3, r3, #1
 801a7e0:	f1be 0e01 	subs.w	lr, lr, #1
 801a7e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a7e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a7ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a7f0:	d1ed      	bne.n	801a7ce <__ieee754_sqrt+0x8a>
 801a7f2:	4674      	mov	r4, lr
 801a7f4:	2720      	movs	r7, #32
 801a7f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a7fa:	4563      	cmp	r3, ip
 801a7fc:	eb01 000e 	add.w	r0, r1, lr
 801a800:	dc02      	bgt.n	801a808 <__ieee754_sqrt+0xc4>
 801a802:	d113      	bne.n	801a82c <__ieee754_sqrt+0xe8>
 801a804:	4290      	cmp	r0, r2
 801a806:	d811      	bhi.n	801a82c <__ieee754_sqrt+0xe8>
 801a808:	2800      	cmp	r0, #0
 801a80a:	eb00 0e01 	add.w	lr, r0, r1
 801a80e:	da57      	bge.n	801a8c0 <__ieee754_sqrt+0x17c>
 801a810:	f1be 0f00 	cmp.w	lr, #0
 801a814:	db54      	blt.n	801a8c0 <__ieee754_sqrt+0x17c>
 801a816:	f10c 0801 	add.w	r8, ip, #1
 801a81a:	eba3 030c 	sub.w	r3, r3, ip
 801a81e:	4290      	cmp	r0, r2
 801a820:	bf88      	it	hi
 801a822:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a826:	1a12      	subs	r2, r2, r0
 801a828:	440c      	add	r4, r1
 801a82a:	46c4      	mov	ip, r8
 801a82c:	005b      	lsls	r3, r3, #1
 801a82e:	3f01      	subs	r7, #1
 801a830:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a834:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a838:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a83c:	d1dd      	bne.n	801a7fa <__ieee754_sqrt+0xb6>
 801a83e:	4313      	orrs	r3, r2
 801a840:	d01b      	beq.n	801a87a <__ieee754_sqrt+0x136>
 801a842:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a8f0 <__ieee754_sqrt+0x1ac>
 801a846:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a8f4 <__ieee754_sqrt+0x1b0>
 801a84a:	e9da 0100 	ldrd	r0, r1, [sl]
 801a84e:	e9db 2300 	ldrd	r2, r3, [fp]
 801a852:	f7e5 fd49 	bl	80002e8 <__aeabi_dsub>
 801a856:	e9da 8900 	ldrd	r8, r9, [sl]
 801a85a:	4602      	mov	r2, r0
 801a85c:	460b      	mov	r3, r1
 801a85e:	4640      	mov	r0, r8
 801a860:	4649      	mov	r1, r9
 801a862:	f7e6 f975 	bl	8000b50 <__aeabi_dcmple>
 801a866:	b140      	cbz	r0, 801a87a <__ieee754_sqrt+0x136>
 801a868:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a86c:	e9da 0100 	ldrd	r0, r1, [sl]
 801a870:	e9db 2300 	ldrd	r2, r3, [fp]
 801a874:	d126      	bne.n	801a8c4 <__ieee754_sqrt+0x180>
 801a876:	3501      	adds	r5, #1
 801a878:	463c      	mov	r4, r7
 801a87a:	106a      	asrs	r2, r5, #1
 801a87c:	0863      	lsrs	r3, r4, #1
 801a87e:	07e9      	lsls	r1, r5, #31
 801a880:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a884:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a888:	bf48      	it	mi
 801a88a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a88e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a892:	461c      	mov	r4, r3
 801a894:	e76d      	b.n	801a772 <__ieee754_sqrt+0x2e>
 801a896:	0ad3      	lsrs	r3, r2, #11
 801a898:	3815      	subs	r0, #21
 801a89a:	0552      	lsls	r2, r2, #21
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d0fa      	beq.n	801a896 <__ieee754_sqrt+0x152>
 801a8a0:	02dc      	lsls	r4, r3, #11
 801a8a2:	d50a      	bpl.n	801a8ba <__ieee754_sqrt+0x176>
 801a8a4:	f1c1 0420 	rsb	r4, r1, #32
 801a8a8:	fa22 f404 	lsr.w	r4, r2, r4
 801a8ac:	1e4d      	subs	r5, r1, #1
 801a8ae:	408a      	lsls	r2, r1
 801a8b0:	4323      	orrs	r3, r4
 801a8b2:	1b41      	subs	r1, r0, r5
 801a8b4:	e772      	b.n	801a79c <__ieee754_sqrt+0x58>
 801a8b6:	4608      	mov	r0, r1
 801a8b8:	e7f0      	b.n	801a89c <__ieee754_sqrt+0x158>
 801a8ba:	005b      	lsls	r3, r3, #1
 801a8bc:	3101      	adds	r1, #1
 801a8be:	e7ef      	b.n	801a8a0 <__ieee754_sqrt+0x15c>
 801a8c0:	46e0      	mov	r8, ip
 801a8c2:	e7aa      	b.n	801a81a <__ieee754_sqrt+0xd6>
 801a8c4:	f7e5 fd12 	bl	80002ec <__adddf3>
 801a8c8:	e9da 8900 	ldrd	r8, r9, [sl]
 801a8cc:	4602      	mov	r2, r0
 801a8ce:	460b      	mov	r3, r1
 801a8d0:	4640      	mov	r0, r8
 801a8d2:	4649      	mov	r1, r9
 801a8d4:	f7e6 f932 	bl	8000b3c <__aeabi_dcmplt>
 801a8d8:	b120      	cbz	r0, 801a8e4 <__ieee754_sqrt+0x1a0>
 801a8da:	1ca0      	adds	r0, r4, #2
 801a8dc:	bf08      	it	eq
 801a8de:	3501      	addeq	r5, #1
 801a8e0:	3402      	adds	r4, #2
 801a8e2:	e7ca      	b.n	801a87a <__ieee754_sqrt+0x136>
 801a8e4:	3401      	adds	r4, #1
 801a8e6:	f024 0401 	bic.w	r4, r4, #1
 801a8ea:	e7c6      	b.n	801a87a <__ieee754_sqrt+0x136>
 801a8ec:	7ff00000 	.word	0x7ff00000
 801a8f0:	200051b8 	.word	0x200051b8
 801a8f4:	200051c0 	.word	0x200051c0

0801a8f8 <__ieee754_sqrtf>:
 801a8f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a8fc:	4770      	bx	lr
	...

0801a900 <floor>:
 801a900:	ec51 0b10 	vmov	r0, r1, d0
 801a904:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a90c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801a910:	2e13      	cmp	r6, #19
 801a912:	ee10 5a10 	vmov	r5, s0
 801a916:	ee10 8a10 	vmov	r8, s0
 801a91a:	460c      	mov	r4, r1
 801a91c:	dc31      	bgt.n	801a982 <floor+0x82>
 801a91e:	2e00      	cmp	r6, #0
 801a920:	da14      	bge.n	801a94c <floor+0x4c>
 801a922:	a333      	add	r3, pc, #204	; (adr r3, 801a9f0 <floor+0xf0>)
 801a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a928:	f7e5 fce0 	bl	80002ec <__adddf3>
 801a92c:	2200      	movs	r2, #0
 801a92e:	2300      	movs	r3, #0
 801a930:	f7e6 f922 	bl	8000b78 <__aeabi_dcmpgt>
 801a934:	b138      	cbz	r0, 801a946 <floor+0x46>
 801a936:	2c00      	cmp	r4, #0
 801a938:	da53      	bge.n	801a9e2 <floor+0xe2>
 801a93a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801a93e:	4325      	orrs	r5, r4
 801a940:	d052      	beq.n	801a9e8 <floor+0xe8>
 801a942:	4c2d      	ldr	r4, [pc, #180]	; (801a9f8 <floor+0xf8>)
 801a944:	2500      	movs	r5, #0
 801a946:	4621      	mov	r1, r4
 801a948:	4628      	mov	r0, r5
 801a94a:	e024      	b.n	801a996 <floor+0x96>
 801a94c:	4f2b      	ldr	r7, [pc, #172]	; (801a9fc <floor+0xfc>)
 801a94e:	4137      	asrs	r7, r6
 801a950:	ea01 0307 	and.w	r3, r1, r7
 801a954:	4303      	orrs	r3, r0
 801a956:	d01e      	beq.n	801a996 <floor+0x96>
 801a958:	a325      	add	r3, pc, #148	; (adr r3, 801a9f0 <floor+0xf0>)
 801a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a95e:	f7e5 fcc5 	bl	80002ec <__adddf3>
 801a962:	2200      	movs	r2, #0
 801a964:	2300      	movs	r3, #0
 801a966:	f7e6 f907 	bl	8000b78 <__aeabi_dcmpgt>
 801a96a:	2800      	cmp	r0, #0
 801a96c:	d0eb      	beq.n	801a946 <floor+0x46>
 801a96e:	2c00      	cmp	r4, #0
 801a970:	bfbe      	ittt	lt
 801a972:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a976:	4133      	asrlt	r3, r6
 801a978:	18e4      	addlt	r4, r4, r3
 801a97a:	ea24 0407 	bic.w	r4, r4, r7
 801a97e:	2500      	movs	r5, #0
 801a980:	e7e1      	b.n	801a946 <floor+0x46>
 801a982:	2e33      	cmp	r6, #51	; 0x33
 801a984:	dd0b      	ble.n	801a99e <floor+0x9e>
 801a986:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a98a:	d104      	bne.n	801a996 <floor+0x96>
 801a98c:	ee10 2a10 	vmov	r2, s0
 801a990:	460b      	mov	r3, r1
 801a992:	f7e5 fcab 	bl	80002ec <__adddf3>
 801a996:	ec41 0b10 	vmov	d0, r0, r1
 801a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a99e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801a9a2:	f04f 37ff 	mov.w	r7, #4294967295
 801a9a6:	40df      	lsrs	r7, r3
 801a9a8:	4238      	tst	r0, r7
 801a9aa:	d0f4      	beq.n	801a996 <floor+0x96>
 801a9ac:	a310      	add	r3, pc, #64	; (adr r3, 801a9f0 <floor+0xf0>)
 801a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b2:	f7e5 fc9b 	bl	80002ec <__adddf3>
 801a9b6:	2200      	movs	r2, #0
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	f7e6 f8dd 	bl	8000b78 <__aeabi_dcmpgt>
 801a9be:	2800      	cmp	r0, #0
 801a9c0:	d0c1      	beq.n	801a946 <floor+0x46>
 801a9c2:	2c00      	cmp	r4, #0
 801a9c4:	da0a      	bge.n	801a9dc <floor+0xdc>
 801a9c6:	2e14      	cmp	r6, #20
 801a9c8:	d101      	bne.n	801a9ce <floor+0xce>
 801a9ca:	3401      	adds	r4, #1
 801a9cc:	e006      	b.n	801a9dc <floor+0xdc>
 801a9ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a9d2:	2301      	movs	r3, #1
 801a9d4:	40b3      	lsls	r3, r6
 801a9d6:	441d      	add	r5, r3
 801a9d8:	45a8      	cmp	r8, r5
 801a9da:	d8f6      	bhi.n	801a9ca <floor+0xca>
 801a9dc:	ea25 0507 	bic.w	r5, r5, r7
 801a9e0:	e7b1      	b.n	801a946 <floor+0x46>
 801a9e2:	2500      	movs	r5, #0
 801a9e4:	462c      	mov	r4, r5
 801a9e6:	e7ae      	b.n	801a946 <floor+0x46>
 801a9e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801a9ec:	e7ab      	b.n	801a946 <floor+0x46>
 801a9ee:	bf00      	nop
 801a9f0:	8800759c 	.word	0x8800759c
 801a9f4:	7e37e43c 	.word	0x7e37e43c
 801a9f8:	bff00000 	.word	0xbff00000
 801a9fc:	000fffff 	.word	0x000fffff

0801aa00 <round>:
 801aa00:	ec53 2b10 	vmov	r2, r3, d0
 801aa04:	b570      	push	{r4, r5, r6, lr}
 801aa06:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801aa0a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801aa0e:	2813      	cmp	r0, #19
 801aa10:	ee10 5a10 	vmov	r5, s0
 801aa14:	4619      	mov	r1, r3
 801aa16:	dc18      	bgt.n	801aa4a <round+0x4a>
 801aa18:	2800      	cmp	r0, #0
 801aa1a:	da09      	bge.n	801aa30 <round+0x30>
 801aa1c:	3001      	adds	r0, #1
 801aa1e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801aa22:	d103      	bne.n	801aa2c <round+0x2c>
 801aa24:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801aa28:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	e02a      	b.n	801aa86 <round+0x86>
 801aa30:	4c16      	ldr	r4, [pc, #88]	; (801aa8c <round+0x8c>)
 801aa32:	4104      	asrs	r4, r0
 801aa34:	ea03 0604 	and.w	r6, r3, r4
 801aa38:	4316      	orrs	r6, r2
 801aa3a:	d011      	beq.n	801aa60 <round+0x60>
 801aa3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801aa40:	4103      	asrs	r3, r0
 801aa42:	440b      	add	r3, r1
 801aa44:	ea23 0104 	bic.w	r1, r3, r4
 801aa48:	e7f0      	b.n	801aa2c <round+0x2c>
 801aa4a:	2833      	cmp	r0, #51	; 0x33
 801aa4c:	dd0b      	ble.n	801aa66 <round+0x66>
 801aa4e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801aa52:	d105      	bne.n	801aa60 <round+0x60>
 801aa54:	ee10 0a10 	vmov	r0, s0
 801aa58:	f7e5 fc48 	bl	80002ec <__adddf3>
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	460b      	mov	r3, r1
 801aa60:	ec43 2b10 	vmov	d0, r2, r3
 801aa64:	bd70      	pop	{r4, r5, r6, pc}
 801aa66:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801aa6a:	f04f 34ff 	mov.w	r4, #4294967295
 801aa6e:	40f4      	lsrs	r4, r6
 801aa70:	4214      	tst	r4, r2
 801aa72:	d0f5      	beq.n	801aa60 <round+0x60>
 801aa74:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801aa78:	2301      	movs	r3, #1
 801aa7a:	4083      	lsls	r3, r0
 801aa7c:	195b      	adds	r3, r3, r5
 801aa7e:	bf28      	it	cs
 801aa80:	3101      	addcs	r1, #1
 801aa82:	ea23 0304 	bic.w	r3, r3, r4
 801aa86:	461a      	mov	r2, r3
 801aa88:	460b      	mov	r3, r1
 801aa8a:	e7e9      	b.n	801aa60 <round+0x60>
 801aa8c:	000fffff 	.word	0x000fffff

0801aa90 <__kernel_cos>:
 801aa90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa94:	ec57 6b10 	vmov	r6, r7, d0
 801aa98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801aa9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801aaa0:	ed8d 1b00 	vstr	d1, [sp]
 801aaa4:	da07      	bge.n	801aab6 <__kernel_cos+0x26>
 801aaa6:	ee10 0a10 	vmov	r0, s0
 801aaaa:	4639      	mov	r1, r7
 801aaac:	f7e6 f884 	bl	8000bb8 <__aeabi_d2iz>
 801aab0:	2800      	cmp	r0, #0
 801aab2:	f000 8088 	beq.w	801abc6 <__kernel_cos+0x136>
 801aab6:	4632      	mov	r2, r6
 801aab8:	463b      	mov	r3, r7
 801aaba:	4630      	mov	r0, r6
 801aabc:	4639      	mov	r1, r7
 801aabe:	f7e5 fdcb 	bl	8000658 <__aeabi_dmul>
 801aac2:	4b51      	ldr	r3, [pc, #324]	; (801ac08 <__kernel_cos+0x178>)
 801aac4:	2200      	movs	r2, #0
 801aac6:	4604      	mov	r4, r0
 801aac8:	460d      	mov	r5, r1
 801aaca:	f7e5 fdc5 	bl	8000658 <__aeabi_dmul>
 801aace:	a340      	add	r3, pc, #256	; (adr r3, 801abd0 <__kernel_cos+0x140>)
 801aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad4:	4682      	mov	sl, r0
 801aad6:	468b      	mov	fp, r1
 801aad8:	4620      	mov	r0, r4
 801aada:	4629      	mov	r1, r5
 801aadc:	f7e5 fdbc 	bl	8000658 <__aeabi_dmul>
 801aae0:	a33d      	add	r3, pc, #244	; (adr r3, 801abd8 <__kernel_cos+0x148>)
 801aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae6:	f7e5 fc01 	bl	80002ec <__adddf3>
 801aaea:	4622      	mov	r2, r4
 801aaec:	462b      	mov	r3, r5
 801aaee:	f7e5 fdb3 	bl	8000658 <__aeabi_dmul>
 801aaf2:	a33b      	add	r3, pc, #236	; (adr r3, 801abe0 <__kernel_cos+0x150>)
 801aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf8:	f7e5 fbf6 	bl	80002e8 <__aeabi_dsub>
 801aafc:	4622      	mov	r2, r4
 801aafe:	462b      	mov	r3, r5
 801ab00:	f7e5 fdaa 	bl	8000658 <__aeabi_dmul>
 801ab04:	a338      	add	r3, pc, #224	; (adr r3, 801abe8 <__kernel_cos+0x158>)
 801ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab0a:	f7e5 fbef 	bl	80002ec <__adddf3>
 801ab0e:	4622      	mov	r2, r4
 801ab10:	462b      	mov	r3, r5
 801ab12:	f7e5 fda1 	bl	8000658 <__aeabi_dmul>
 801ab16:	a336      	add	r3, pc, #216	; (adr r3, 801abf0 <__kernel_cos+0x160>)
 801ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab1c:	f7e5 fbe4 	bl	80002e8 <__aeabi_dsub>
 801ab20:	4622      	mov	r2, r4
 801ab22:	462b      	mov	r3, r5
 801ab24:	f7e5 fd98 	bl	8000658 <__aeabi_dmul>
 801ab28:	a333      	add	r3, pc, #204	; (adr r3, 801abf8 <__kernel_cos+0x168>)
 801ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab2e:	f7e5 fbdd 	bl	80002ec <__adddf3>
 801ab32:	4622      	mov	r2, r4
 801ab34:	462b      	mov	r3, r5
 801ab36:	f7e5 fd8f 	bl	8000658 <__aeabi_dmul>
 801ab3a:	4622      	mov	r2, r4
 801ab3c:	462b      	mov	r3, r5
 801ab3e:	f7e5 fd8b 	bl	8000658 <__aeabi_dmul>
 801ab42:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ab46:	4604      	mov	r4, r0
 801ab48:	460d      	mov	r5, r1
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	4639      	mov	r1, r7
 801ab4e:	f7e5 fd83 	bl	8000658 <__aeabi_dmul>
 801ab52:	460b      	mov	r3, r1
 801ab54:	4602      	mov	r2, r0
 801ab56:	4629      	mov	r1, r5
 801ab58:	4620      	mov	r0, r4
 801ab5a:	f7e5 fbc5 	bl	80002e8 <__aeabi_dsub>
 801ab5e:	4b2b      	ldr	r3, [pc, #172]	; (801ac0c <__kernel_cos+0x17c>)
 801ab60:	4598      	cmp	r8, r3
 801ab62:	4606      	mov	r6, r0
 801ab64:	460f      	mov	r7, r1
 801ab66:	dc10      	bgt.n	801ab8a <__kernel_cos+0xfa>
 801ab68:	4602      	mov	r2, r0
 801ab6a:	460b      	mov	r3, r1
 801ab6c:	4650      	mov	r0, sl
 801ab6e:	4659      	mov	r1, fp
 801ab70:	f7e5 fbba 	bl	80002e8 <__aeabi_dsub>
 801ab74:	460b      	mov	r3, r1
 801ab76:	4926      	ldr	r1, [pc, #152]	; (801ac10 <__kernel_cos+0x180>)
 801ab78:	4602      	mov	r2, r0
 801ab7a:	2000      	movs	r0, #0
 801ab7c:	f7e5 fbb4 	bl	80002e8 <__aeabi_dsub>
 801ab80:	ec41 0b10 	vmov	d0, r0, r1
 801ab84:	b003      	add	sp, #12
 801ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab8a:	4b22      	ldr	r3, [pc, #136]	; (801ac14 <__kernel_cos+0x184>)
 801ab8c:	4920      	ldr	r1, [pc, #128]	; (801ac10 <__kernel_cos+0x180>)
 801ab8e:	4598      	cmp	r8, r3
 801ab90:	bfcc      	ite	gt
 801ab92:	4d21      	ldrgt	r5, [pc, #132]	; (801ac18 <__kernel_cos+0x188>)
 801ab94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801ab98:	2400      	movs	r4, #0
 801ab9a:	4622      	mov	r2, r4
 801ab9c:	462b      	mov	r3, r5
 801ab9e:	2000      	movs	r0, #0
 801aba0:	f7e5 fba2 	bl	80002e8 <__aeabi_dsub>
 801aba4:	4622      	mov	r2, r4
 801aba6:	4680      	mov	r8, r0
 801aba8:	4689      	mov	r9, r1
 801abaa:	462b      	mov	r3, r5
 801abac:	4650      	mov	r0, sl
 801abae:	4659      	mov	r1, fp
 801abb0:	f7e5 fb9a 	bl	80002e8 <__aeabi_dsub>
 801abb4:	4632      	mov	r2, r6
 801abb6:	463b      	mov	r3, r7
 801abb8:	f7e5 fb96 	bl	80002e8 <__aeabi_dsub>
 801abbc:	4602      	mov	r2, r0
 801abbe:	460b      	mov	r3, r1
 801abc0:	4640      	mov	r0, r8
 801abc2:	4649      	mov	r1, r9
 801abc4:	e7da      	b.n	801ab7c <__kernel_cos+0xec>
 801abc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801ac00 <__kernel_cos+0x170>
 801abca:	e7db      	b.n	801ab84 <__kernel_cos+0xf4>
 801abcc:	f3af 8000 	nop.w
 801abd0:	be8838d4 	.word	0xbe8838d4
 801abd4:	bda8fae9 	.word	0xbda8fae9
 801abd8:	bdb4b1c4 	.word	0xbdb4b1c4
 801abdc:	3e21ee9e 	.word	0x3e21ee9e
 801abe0:	809c52ad 	.word	0x809c52ad
 801abe4:	3e927e4f 	.word	0x3e927e4f
 801abe8:	19cb1590 	.word	0x19cb1590
 801abec:	3efa01a0 	.word	0x3efa01a0
 801abf0:	16c15177 	.word	0x16c15177
 801abf4:	3f56c16c 	.word	0x3f56c16c
 801abf8:	5555554c 	.word	0x5555554c
 801abfc:	3fa55555 	.word	0x3fa55555
 801ac00:	00000000 	.word	0x00000000
 801ac04:	3ff00000 	.word	0x3ff00000
 801ac08:	3fe00000 	.word	0x3fe00000
 801ac0c:	3fd33332 	.word	0x3fd33332
 801ac10:	3ff00000 	.word	0x3ff00000
 801ac14:	3fe90000 	.word	0x3fe90000
 801ac18:	3fd20000 	.word	0x3fd20000
 801ac1c:	00000000 	.word	0x00000000

0801ac20 <__kernel_sin>:
 801ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	ed2d 8b04 	vpush	{d8-d9}
 801ac28:	eeb0 8a41 	vmov.f32	s16, s2
 801ac2c:	eef0 8a61 	vmov.f32	s17, s3
 801ac30:	ec55 4b10 	vmov	r4, r5, d0
 801ac34:	b083      	sub	sp, #12
 801ac36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ac3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ac3e:	9001      	str	r0, [sp, #4]
 801ac40:	da06      	bge.n	801ac50 <__kernel_sin+0x30>
 801ac42:	ee10 0a10 	vmov	r0, s0
 801ac46:	4629      	mov	r1, r5
 801ac48:	f7e5 ffb6 	bl	8000bb8 <__aeabi_d2iz>
 801ac4c:	2800      	cmp	r0, #0
 801ac4e:	d051      	beq.n	801acf4 <__kernel_sin+0xd4>
 801ac50:	4622      	mov	r2, r4
 801ac52:	462b      	mov	r3, r5
 801ac54:	4620      	mov	r0, r4
 801ac56:	4629      	mov	r1, r5
 801ac58:	f7e5 fcfe 	bl	8000658 <__aeabi_dmul>
 801ac5c:	4682      	mov	sl, r0
 801ac5e:	468b      	mov	fp, r1
 801ac60:	4602      	mov	r2, r0
 801ac62:	460b      	mov	r3, r1
 801ac64:	4620      	mov	r0, r4
 801ac66:	4629      	mov	r1, r5
 801ac68:	f7e5 fcf6 	bl	8000658 <__aeabi_dmul>
 801ac6c:	a341      	add	r3, pc, #260	; (adr r3, 801ad74 <__kernel_sin+0x154>)
 801ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac72:	4680      	mov	r8, r0
 801ac74:	4689      	mov	r9, r1
 801ac76:	4650      	mov	r0, sl
 801ac78:	4659      	mov	r1, fp
 801ac7a:	f7e5 fced 	bl	8000658 <__aeabi_dmul>
 801ac7e:	a33f      	add	r3, pc, #252	; (adr r3, 801ad7c <__kernel_sin+0x15c>)
 801ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac84:	f7e5 fb30 	bl	80002e8 <__aeabi_dsub>
 801ac88:	4652      	mov	r2, sl
 801ac8a:	465b      	mov	r3, fp
 801ac8c:	f7e5 fce4 	bl	8000658 <__aeabi_dmul>
 801ac90:	a33c      	add	r3, pc, #240	; (adr r3, 801ad84 <__kernel_sin+0x164>)
 801ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac96:	f7e5 fb29 	bl	80002ec <__adddf3>
 801ac9a:	4652      	mov	r2, sl
 801ac9c:	465b      	mov	r3, fp
 801ac9e:	f7e5 fcdb 	bl	8000658 <__aeabi_dmul>
 801aca2:	a33a      	add	r3, pc, #232	; (adr r3, 801ad8c <__kernel_sin+0x16c>)
 801aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca8:	f7e5 fb1e 	bl	80002e8 <__aeabi_dsub>
 801acac:	4652      	mov	r2, sl
 801acae:	465b      	mov	r3, fp
 801acb0:	f7e5 fcd2 	bl	8000658 <__aeabi_dmul>
 801acb4:	a337      	add	r3, pc, #220	; (adr r3, 801ad94 <__kernel_sin+0x174>)
 801acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acba:	f7e5 fb17 	bl	80002ec <__adddf3>
 801acbe:	9b01      	ldr	r3, [sp, #4]
 801acc0:	4606      	mov	r6, r0
 801acc2:	460f      	mov	r7, r1
 801acc4:	b9eb      	cbnz	r3, 801ad02 <__kernel_sin+0xe2>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	4650      	mov	r0, sl
 801accc:	4659      	mov	r1, fp
 801acce:	f7e5 fcc3 	bl	8000658 <__aeabi_dmul>
 801acd2:	a325      	add	r3, pc, #148	; (adr r3, 801ad68 <__kernel_sin+0x148>)
 801acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd8:	f7e5 fb06 	bl	80002e8 <__aeabi_dsub>
 801acdc:	4642      	mov	r2, r8
 801acde:	464b      	mov	r3, r9
 801ace0:	f7e5 fcba 	bl	8000658 <__aeabi_dmul>
 801ace4:	4602      	mov	r2, r0
 801ace6:	460b      	mov	r3, r1
 801ace8:	4620      	mov	r0, r4
 801acea:	4629      	mov	r1, r5
 801acec:	f7e5 fafe 	bl	80002ec <__adddf3>
 801acf0:	4604      	mov	r4, r0
 801acf2:	460d      	mov	r5, r1
 801acf4:	ec45 4b10 	vmov	d0, r4, r5
 801acf8:	b003      	add	sp, #12
 801acfa:	ecbd 8b04 	vpop	{d8-d9}
 801acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad02:	4b1b      	ldr	r3, [pc, #108]	; (801ad70 <__kernel_sin+0x150>)
 801ad04:	ec51 0b18 	vmov	r0, r1, d8
 801ad08:	2200      	movs	r2, #0
 801ad0a:	f7e5 fca5 	bl	8000658 <__aeabi_dmul>
 801ad0e:	4632      	mov	r2, r6
 801ad10:	ec41 0b19 	vmov	d9, r0, r1
 801ad14:	463b      	mov	r3, r7
 801ad16:	4640      	mov	r0, r8
 801ad18:	4649      	mov	r1, r9
 801ad1a:	f7e5 fc9d 	bl	8000658 <__aeabi_dmul>
 801ad1e:	4602      	mov	r2, r0
 801ad20:	460b      	mov	r3, r1
 801ad22:	ec51 0b19 	vmov	r0, r1, d9
 801ad26:	f7e5 fadf 	bl	80002e8 <__aeabi_dsub>
 801ad2a:	4652      	mov	r2, sl
 801ad2c:	465b      	mov	r3, fp
 801ad2e:	f7e5 fc93 	bl	8000658 <__aeabi_dmul>
 801ad32:	ec53 2b18 	vmov	r2, r3, d8
 801ad36:	f7e5 fad7 	bl	80002e8 <__aeabi_dsub>
 801ad3a:	a30b      	add	r3, pc, #44	; (adr r3, 801ad68 <__kernel_sin+0x148>)
 801ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad40:	4606      	mov	r6, r0
 801ad42:	460f      	mov	r7, r1
 801ad44:	4640      	mov	r0, r8
 801ad46:	4649      	mov	r1, r9
 801ad48:	f7e5 fc86 	bl	8000658 <__aeabi_dmul>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	4630      	mov	r0, r6
 801ad52:	4639      	mov	r1, r7
 801ad54:	f7e5 faca 	bl	80002ec <__adddf3>
 801ad58:	4602      	mov	r2, r0
 801ad5a:	460b      	mov	r3, r1
 801ad5c:	4620      	mov	r0, r4
 801ad5e:	4629      	mov	r1, r5
 801ad60:	f7e5 fac2 	bl	80002e8 <__aeabi_dsub>
 801ad64:	e7c4      	b.n	801acf0 <__kernel_sin+0xd0>
 801ad66:	bf00      	nop
 801ad68:	55555549 	.word	0x55555549
 801ad6c:	3fc55555 	.word	0x3fc55555
 801ad70:	3fe00000 	.word	0x3fe00000
 801ad74:	5acfd57c 	.word	0x5acfd57c
 801ad78:	3de5d93a 	.word	0x3de5d93a
 801ad7c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ad80:	3e5ae5e6 	.word	0x3e5ae5e6
 801ad84:	57b1fe7d 	.word	0x57b1fe7d
 801ad88:	3ec71de3 	.word	0x3ec71de3
 801ad8c:	19c161d5 	.word	0x19c161d5
 801ad90:	3f2a01a0 	.word	0x3f2a01a0
 801ad94:	1110f8a6 	.word	0x1110f8a6
 801ad98:	3f811111 	.word	0x3f811111
 801ad9c:	00000000 	.word	0x00000000

0801ada0 <__kernel_tan>:
 801ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ada4:	ed2d 8b06 	vpush	{d8-d10}
 801ada8:	ec5b ab10 	vmov	sl, fp, d0
 801adac:	4be0      	ldr	r3, [pc, #896]	; (801b130 <__kernel_tan+0x390>)
 801adae:	b083      	sub	sp, #12
 801adb0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801adb4:	429f      	cmp	r7, r3
 801adb6:	ec59 8b11 	vmov	r8, r9, d1
 801adba:	4606      	mov	r6, r0
 801adbc:	f8cd b000 	str.w	fp, [sp]
 801adc0:	dc61      	bgt.n	801ae86 <__kernel_tan+0xe6>
 801adc2:	ee10 0a10 	vmov	r0, s0
 801adc6:	4659      	mov	r1, fp
 801adc8:	f7e5 fef6 	bl	8000bb8 <__aeabi_d2iz>
 801adcc:	4605      	mov	r5, r0
 801adce:	2800      	cmp	r0, #0
 801add0:	f040 8083 	bne.w	801aeda <__kernel_tan+0x13a>
 801add4:	1c73      	adds	r3, r6, #1
 801add6:	4652      	mov	r2, sl
 801add8:	4313      	orrs	r3, r2
 801adda:	433b      	orrs	r3, r7
 801addc:	d112      	bne.n	801ae04 <__kernel_tan+0x64>
 801adde:	ec4b ab10 	vmov	d0, sl, fp
 801ade2:	f001 f91b 	bl	801c01c <fabs>
 801ade6:	49d3      	ldr	r1, [pc, #844]	; (801b134 <__kernel_tan+0x394>)
 801ade8:	ec53 2b10 	vmov	r2, r3, d0
 801adec:	2000      	movs	r0, #0
 801adee:	f7e5 fd5d 	bl	80008ac <__aeabi_ddiv>
 801adf2:	4682      	mov	sl, r0
 801adf4:	468b      	mov	fp, r1
 801adf6:	ec4b ab10 	vmov	d0, sl, fp
 801adfa:	b003      	add	sp, #12
 801adfc:	ecbd 8b06 	vpop	{d8-d10}
 801ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae04:	2e01      	cmp	r6, #1
 801ae06:	d0f6      	beq.n	801adf6 <__kernel_tan+0x56>
 801ae08:	4642      	mov	r2, r8
 801ae0a:	464b      	mov	r3, r9
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	4659      	mov	r1, fp
 801ae10:	f7e5 fa6c 	bl	80002ec <__adddf3>
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	460f      	mov	r7, r1
 801ae1a:	2000      	movs	r0, #0
 801ae1c:	49c6      	ldr	r1, [pc, #792]	; (801b138 <__kernel_tan+0x398>)
 801ae1e:	f7e5 fd45 	bl	80008ac <__aeabi_ddiv>
 801ae22:	e9cd 0100 	strd	r0, r1, [sp]
 801ae26:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae2a:	462e      	mov	r6, r5
 801ae2c:	4652      	mov	r2, sl
 801ae2e:	462c      	mov	r4, r5
 801ae30:	4630      	mov	r0, r6
 801ae32:	461d      	mov	r5, r3
 801ae34:	4639      	mov	r1, r7
 801ae36:	465b      	mov	r3, fp
 801ae38:	f7e5 fa56 	bl	80002e8 <__aeabi_dsub>
 801ae3c:	4602      	mov	r2, r0
 801ae3e:	460b      	mov	r3, r1
 801ae40:	4640      	mov	r0, r8
 801ae42:	4649      	mov	r1, r9
 801ae44:	f7e5 fa50 	bl	80002e8 <__aeabi_dsub>
 801ae48:	4632      	mov	r2, r6
 801ae4a:	462b      	mov	r3, r5
 801ae4c:	f7e5 fc04 	bl	8000658 <__aeabi_dmul>
 801ae50:	4632      	mov	r2, r6
 801ae52:	4680      	mov	r8, r0
 801ae54:	4689      	mov	r9, r1
 801ae56:	462b      	mov	r3, r5
 801ae58:	4630      	mov	r0, r6
 801ae5a:	4639      	mov	r1, r7
 801ae5c:	f7e5 fbfc 	bl	8000658 <__aeabi_dmul>
 801ae60:	4bb4      	ldr	r3, [pc, #720]	; (801b134 <__kernel_tan+0x394>)
 801ae62:	2200      	movs	r2, #0
 801ae64:	f7e5 fa42 	bl	80002ec <__adddf3>
 801ae68:	4602      	mov	r2, r0
 801ae6a:	460b      	mov	r3, r1
 801ae6c:	4640      	mov	r0, r8
 801ae6e:	4649      	mov	r1, r9
 801ae70:	f7e5 fa3c 	bl	80002ec <__adddf3>
 801ae74:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae78:	f7e5 fbee 	bl	8000658 <__aeabi_dmul>
 801ae7c:	4622      	mov	r2, r4
 801ae7e:	462b      	mov	r3, r5
 801ae80:	f7e5 fa34 	bl	80002ec <__adddf3>
 801ae84:	e7b5      	b.n	801adf2 <__kernel_tan+0x52>
 801ae86:	4bad      	ldr	r3, [pc, #692]	; (801b13c <__kernel_tan+0x39c>)
 801ae88:	429f      	cmp	r7, r3
 801ae8a:	dd26      	ble.n	801aeda <__kernel_tan+0x13a>
 801ae8c:	9b00      	ldr	r3, [sp, #0]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	da09      	bge.n	801aea6 <__kernel_tan+0x106>
 801ae92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ae96:	469b      	mov	fp, r3
 801ae98:	ee10 aa10 	vmov	sl, s0
 801ae9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801aea0:	ee11 8a10 	vmov	r8, s2
 801aea4:	4699      	mov	r9, r3
 801aea6:	4652      	mov	r2, sl
 801aea8:	465b      	mov	r3, fp
 801aeaa:	a183      	add	r1, pc, #524	; (adr r1, 801b0b8 <__kernel_tan+0x318>)
 801aeac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aeb0:	f7e5 fa1a 	bl	80002e8 <__aeabi_dsub>
 801aeb4:	4642      	mov	r2, r8
 801aeb6:	464b      	mov	r3, r9
 801aeb8:	4604      	mov	r4, r0
 801aeba:	460d      	mov	r5, r1
 801aebc:	a180      	add	r1, pc, #512	; (adr r1, 801b0c0 <__kernel_tan+0x320>)
 801aebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aec2:	f7e5 fa11 	bl	80002e8 <__aeabi_dsub>
 801aec6:	4622      	mov	r2, r4
 801aec8:	462b      	mov	r3, r5
 801aeca:	f7e5 fa0f 	bl	80002ec <__adddf3>
 801aece:	f04f 0800 	mov.w	r8, #0
 801aed2:	4682      	mov	sl, r0
 801aed4:	468b      	mov	fp, r1
 801aed6:	f04f 0900 	mov.w	r9, #0
 801aeda:	4652      	mov	r2, sl
 801aedc:	465b      	mov	r3, fp
 801aede:	4650      	mov	r0, sl
 801aee0:	4659      	mov	r1, fp
 801aee2:	f7e5 fbb9 	bl	8000658 <__aeabi_dmul>
 801aee6:	4602      	mov	r2, r0
 801aee8:	460b      	mov	r3, r1
 801aeea:	ec43 2b18 	vmov	d8, r2, r3
 801aeee:	f7e5 fbb3 	bl	8000658 <__aeabi_dmul>
 801aef2:	ec53 2b18 	vmov	r2, r3, d8
 801aef6:	4604      	mov	r4, r0
 801aef8:	460d      	mov	r5, r1
 801aefa:	4650      	mov	r0, sl
 801aefc:	4659      	mov	r1, fp
 801aefe:	f7e5 fbab 	bl	8000658 <__aeabi_dmul>
 801af02:	a371      	add	r3, pc, #452	; (adr r3, 801b0c8 <__kernel_tan+0x328>)
 801af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af08:	ec41 0b19 	vmov	d9, r0, r1
 801af0c:	4620      	mov	r0, r4
 801af0e:	4629      	mov	r1, r5
 801af10:	f7e5 fba2 	bl	8000658 <__aeabi_dmul>
 801af14:	a36e      	add	r3, pc, #440	; (adr r3, 801b0d0 <__kernel_tan+0x330>)
 801af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1a:	f7e5 f9e7 	bl	80002ec <__adddf3>
 801af1e:	4622      	mov	r2, r4
 801af20:	462b      	mov	r3, r5
 801af22:	f7e5 fb99 	bl	8000658 <__aeabi_dmul>
 801af26:	a36c      	add	r3, pc, #432	; (adr r3, 801b0d8 <__kernel_tan+0x338>)
 801af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2c:	f7e5 f9de 	bl	80002ec <__adddf3>
 801af30:	4622      	mov	r2, r4
 801af32:	462b      	mov	r3, r5
 801af34:	f7e5 fb90 	bl	8000658 <__aeabi_dmul>
 801af38:	a369      	add	r3, pc, #420	; (adr r3, 801b0e0 <__kernel_tan+0x340>)
 801af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3e:	f7e5 f9d5 	bl	80002ec <__adddf3>
 801af42:	4622      	mov	r2, r4
 801af44:	462b      	mov	r3, r5
 801af46:	f7e5 fb87 	bl	8000658 <__aeabi_dmul>
 801af4a:	a367      	add	r3, pc, #412	; (adr r3, 801b0e8 <__kernel_tan+0x348>)
 801af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af50:	f7e5 f9cc 	bl	80002ec <__adddf3>
 801af54:	4622      	mov	r2, r4
 801af56:	462b      	mov	r3, r5
 801af58:	f7e5 fb7e 	bl	8000658 <__aeabi_dmul>
 801af5c:	a364      	add	r3, pc, #400	; (adr r3, 801b0f0 <__kernel_tan+0x350>)
 801af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af62:	f7e5 f9c3 	bl	80002ec <__adddf3>
 801af66:	ec53 2b18 	vmov	r2, r3, d8
 801af6a:	f7e5 fb75 	bl	8000658 <__aeabi_dmul>
 801af6e:	a362      	add	r3, pc, #392	; (adr r3, 801b0f8 <__kernel_tan+0x358>)
 801af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af74:	ec41 0b1a 	vmov	d10, r0, r1
 801af78:	4620      	mov	r0, r4
 801af7a:	4629      	mov	r1, r5
 801af7c:	f7e5 fb6c 	bl	8000658 <__aeabi_dmul>
 801af80:	a35f      	add	r3, pc, #380	; (adr r3, 801b100 <__kernel_tan+0x360>)
 801af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af86:	f7e5 f9b1 	bl	80002ec <__adddf3>
 801af8a:	4622      	mov	r2, r4
 801af8c:	462b      	mov	r3, r5
 801af8e:	f7e5 fb63 	bl	8000658 <__aeabi_dmul>
 801af92:	a35d      	add	r3, pc, #372	; (adr r3, 801b108 <__kernel_tan+0x368>)
 801af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af98:	f7e5 f9a8 	bl	80002ec <__adddf3>
 801af9c:	4622      	mov	r2, r4
 801af9e:	462b      	mov	r3, r5
 801afa0:	f7e5 fb5a 	bl	8000658 <__aeabi_dmul>
 801afa4:	a35a      	add	r3, pc, #360	; (adr r3, 801b110 <__kernel_tan+0x370>)
 801afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afaa:	f7e5 f99f 	bl	80002ec <__adddf3>
 801afae:	4622      	mov	r2, r4
 801afb0:	462b      	mov	r3, r5
 801afb2:	f7e5 fb51 	bl	8000658 <__aeabi_dmul>
 801afb6:	a358      	add	r3, pc, #352	; (adr r3, 801b118 <__kernel_tan+0x378>)
 801afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afbc:	f7e5 f996 	bl	80002ec <__adddf3>
 801afc0:	4622      	mov	r2, r4
 801afc2:	462b      	mov	r3, r5
 801afc4:	f7e5 fb48 	bl	8000658 <__aeabi_dmul>
 801afc8:	a355      	add	r3, pc, #340	; (adr r3, 801b120 <__kernel_tan+0x380>)
 801afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afce:	f7e5 f98d 	bl	80002ec <__adddf3>
 801afd2:	4602      	mov	r2, r0
 801afd4:	460b      	mov	r3, r1
 801afd6:	ec51 0b1a 	vmov	r0, r1, d10
 801afda:	f7e5 f987 	bl	80002ec <__adddf3>
 801afde:	ec53 2b19 	vmov	r2, r3, d9
 801afe2:	f7e5 fb39 	bl	8000658 <__aeabi_dmul>
 801afe6:	4642      	mov	r2, r8
 801afe8:	464b      	mov	r3, r9
 801afea:	f7e5 f97f 	bl	80002ec <__adddf3>
 801afee:	ec53 2b18 	vmov	r2, r3, d8
 801aff2:	f7e5 fb31 	bl	8000658 <__aeabi_dmul>
 801aff6:	4642      	mov	r2, r8
 801aff8:	464b      	mov	r3, r9
 801affa:	f7e5 f977 	bl	80002ec <__adddf3>
 801affe:	a34a      	add	r3, pc, #296	; (adr r3, 801b128 <__kernel_tan+0x388>)
 801b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b004:	4604      	mov	r4, r0
 801b006:	460d      	mov	r5, r1
 801b008:	ec51 0b19 	vmov	r0, r1, d9
 801b00c:	f7e5 fb24 	bl	8000658 <__aeabi_dmul>
 801b010:	4622      	mov	r2, r4
 801b012:	462b      	mov	r3, r5
 801b014:	f7e5 f96a 	bl	80002ec <__adddf3>
 801b018:	460b      	mov	r3, r1
 801b01a:	ec41 0b18 	vmov	d8, r0, r1
 801b01e:	4602      	mov	r2, r0
 801b020:	4659      	mov	r1, fp
 801b022:	4650      	mov	r0, sl
 801b024:	f7e5 f962 	bl	80002ec <__adddf3>
 801b028:	4b44      	ldr	r3, [pc, #272]	; (801b13c <__kernel_tan+0x39c>)
 801b02a:	429f      	cmp	r7, r3
 801b02c:	4604      	mov	r4, r0
 801b02e:	460d      	mov	r5, r1
 801b030:	f340 8086 	ble.w	801b140 <__kernel_tan+0x3a0>
 801b034:	4630      	mov	r0, r6
 801b036:	f7e5 faa5 	bl	8000584 <__aeabi_i2d>
 801b03a:	4622      	mov	r2, r4
 801b03c:	4680      	mov	r8, r0
 801b03e:	4689      	mov	r9, r1
 801b040:	462b      	mov	r3, r5
 801b042:	4620      	mov	r0, r4
 801b044:	4629      	mov	r1, r5
 801b046:	f7e5 fb07 	bl	8000658 <__aeabi_dmul>
 801b04a:	4642      	mov	r2, r8
 801b04c:	4606      	mov	r6, r0
 801b04e:	460f      	mov	r7, r1
 801b050:	464b      	mov	r3, r9
 801b052:	4620      	mov	r0, r4
 801b054:	4629      	mov	r1, r5
 801b056:	f7e5 f949 	bl	80002ec <__adddf3>
 801b05a:	4602      	mov	r2, r0
 801b05c:	460b      	mov	r3, r1
 801b05e:	4630      	mov	r0, r6
 801b060:	4639      	mov	r1, r7
 801b062:	f7e5 fc23 	bl	80008ac <__aeabi_ddiv>
 801b066:	ec53 2b18 	vmov	r2, r3, d8
 801b06a:	f7e5 f93d 	bl	80002e8 <__aeabi_dsub>
 801b06e:	4602      	mov	r2, r0
 801b070:	460b      	mov	r3, r1
 801b072:	4650      	mov	r0, sl
 801b074:	4659      	mov	r1, fp
 801b076:	f7e5 f937 	bl	80002e8 <__aeabi_dsub>
 801b07a:	4602      	mov	r2, r0
 801b07c:	460b      	mov	r3, r1
 801b07e:	f7e5 f935 	bl	80002ec <__adddf3>
 801b082:	4602      	mov	r2, r0
 801b084:	460b      	mov	r3, r1
 801b086:	4640      	mov	r0, r8
 801b088:	4649      	mov	r1, r9
 801b08a:	f7e5 f92d 	bl	80002e8 <__aeabi_dsub>
 801b08e:	9b00      	ldr	r3, [sp, #0]
 801b090:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801b094:	f00a 0a02 	and.w	sl, sl, #2
 801b098:	4604      	mov	r4, r0
 801b09a:	f1ca 0001 	rsb	r0, sl, #1
 801b09e:	460d      	mov	r5, r1
 801b0a0:	f7e5 fa70 	bl	8000584 <__aeabi_i2d>
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	460b      	mov	r3, r1
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	4629      	mov	r1, r5
 801b0ac:	f7e5 fad4 	bl	8000658 <__aeabi_dmul>
 801b0b0:	e69f      	b.n	801adf2 <__kernel_tan+0x52>
 801b0b2:	bf00      	nop
 801b0b4:	f3af 8000 	nop.w
 801b0b8:	54442d18 	.word	0x54442d18
 801b0bc:	3fe921fb 	.word	0x3fe921fb
 801b0c0:	33145c07 	.word	0x33145c07
 801b0c4:	3c81a626 	.word	0x3c81a626
 801b0c8:	74bf7ad4 	.word	0x74bf7ad4
 801b0cc:	3efb2a70 	.word	0x3efb2a70
 801b0d0:	32f0a7e9 	.word	0x32f0a7e9
 801b0d4:	3f12b80f 	.word	0x3f12b80f
 801b0d8:	1a8d1068 	.word	0x1a8d1068
 801b0dc:	3f3026f7 	.word	0x3f3026f7
 801b0e0:	fee08315 	.word	0xfee08315
 801b0e4:	3f57dbc8 	.word	0x3f57dbc8
 801b0e8:	e96e8493 	.word	0xe96e8493
 801b0ec:	3f8226e3 	.word	0x3f8226e3
 801b0f0:	1bb341fe 	.word	0x1bb341fe
 801b0f4:	3faba1ba 	.word	0x3faba1ba
 801b0f8:	db605373 	.word	0xdb605373
 801b0fc:	bef375cb 	.word	0xbef375cb
 801b100:	a03792a6 	.word	0xa03792a6
 801b104:	3f147e88 	.word	0x3f147e88
 801b108:	f2f26501 	.word	0xf2f26501
 801b10c:	3f4344d8 	.word	0x3f4344d8
 801b110:	c9560328 	.word	0xc9560328
 801b114:	3f6d6d22 	.word	0x3f6d6d22
 801b118:	8406d637 	.word	0x8406d637
 801b11c:	3f9664f4 	.word	0x3f9664f4
 801b120:	1110fe7a 	.word	0x1110fe7a
 801b124:	3fc11111 	.word	0x3fc11111
 801b128:	55555563 	.word	0x55555563
 801b12c:	3fd55555 	.word	0x3fd55555
 801b130:	3e2fffff 	.word	0x3e2fffff
 801b134:	3ff00000 	.word	0x3ff00000
 801b138:	bff00000 	.word	0xbff00000
 801b13c:	3fe59427 	.word	0x3fe59427
 801b140:	2e01      	cmp	r6, #1
 801b142:	d02f      	beq.n	801b1a4 <__kernel_tan+0x404>
 801b144:	460f      	mov	r7, r1
 801b146:	4602      	mov	r2, r0
 801b148:	460b      	mov	r3, r1
 801b14a:	4689      	mov	r9, r1
 801b14c:	2000      	movs	r0, #0
 801b14e:	4917      	ldr	r1, [pc, #92]	; (801b1ac <__kernel_tan+0x40c>)
 801b150:	f7e5 fbac 	bl	80008ac <__aeabi_ddiv>
 801b154:	2600      	movs	r6, #0
 801b156:	e9cd 0100 	strd	r0, r1, [sp]
 801b15a:	4652      	mov	r2, sl
 801b15c:	465b      	mov	r3, fp
 801b15e:	4630      	mov	r0, r6
 801b160:	4639      	mov	r1, r7
 801b162:	f7e5 f8c1 	bl	80002e8 <__aeabi_dsub>
 801b166:	e9dd 4500 	ldrd	r4, r5, [sp]
 801b16a:	4602      	mov	r2, r0
 801b16c:	460b      	mov	r3, r1
 801b16e:	ec51 0b18 	vmov	r0, r1, d8
 801b172:	f7e5 f8b9 	bl	80002e8 <__aeabi_dsub>
 801b176:	4632      	mov	r2, r6
 801b178:	462b      	mov	r3, r5
 801b17a:	f7e5 fa6d 	bl	8000658 <__aeabi_dmul>
 801b17e:	46b0      	mov	r8, r6
 801b180:	460f      	mov	r7, r1
 801b182:	4642      	mov	r2, r8
 801b184:	462b      	mov	r3, r5
 801b186:	4634      	mov	r4, r6
 801b188:	4649      	mov	r1, r9
 801b18a:	4606      	mov	r6, r0
 801b18c:	4640      	mov	r0, r8
 801b18e:	f7e5 fa63 	bl	8000658 <__aeabi_dmul>
 801b192:	4b07      	ldr	r3, [pc, #28]	; (801b1b0 <__kernel_tan+0x410>)
 801b194:	2200      	movs	r2, #0
 801b196:	f7e5 f8a9 	bl	80002ec <__adddf3>
 801b19a:	4602      	mov	r2, r0
 801b19c:	460b      	mov	r3, r1
 801b19e:	4630      	mov	r0, r6
 801b1a0:	4639      	mov	r1, r7
 801b1a2:	e665      	b.n	801ae70 <__kernel_tan+0xd0>
 801b1a4:	4682      	mov	sl, r0
 801b1a6:	468b      	mov	fp, r1
 801b1a8:	e625      	b.n	801adf6 <__kernel_tan+0x56>
 801b1aa:	bf00      	nop
 801b1ac:	bff00000 	.word	0xbff00000
 801b1b0:	3ff00000 	.word	0x3ff00000
 801b1b4:	00000000 	.word	0x00000000

0801b1b8 <__ieee754_pow>:
 801b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1bc:	ed2d 8b06 	vpush	{d8-d10}
 801b1c0:	b089      	sub	sp, #36	; 0x24
 801b1c2:	ed8d 1b00 	vstr	d1, [sp]
 801b1c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b1ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b1ce:	ea58 0102 	orrs.w	r1, r8, r2
 801b1d2:	ec57 6b10 	vmov	r6, r7, d0
 801b1d6:	d115      	bne.n	801b204 <__ieee754_pow+0x4c>
 801b1d8:	19b3      	adds	r3, r6, r6
 801b1da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801b1de:	4152      	adcs	r2, r2
 801b1e0:	4299      	cmp	r1, r3
 801b1e2:	4b89      	ldr	r3, [pc, #548]	; (801b408 <__ieee754_pow+0x250>)
 801b1e4:	4193      	sbcs	r3, r2
 801b1e6:	f080 84d1 	bcs.w	801bb8c <__ieee754_pow+0x9d4>
 801b1ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b1ee:	4630      	mov	r0, r6
 801b1f0:	4639      	mov	r1, r7
 801b1f2:	f7e5 f87b 	bl	80002ec <__adddf3>
 801b1f6:	ec41 0b10 	vmov	d0, r0, r1
 801b1fa:	b009      	add	sp, #36	; 0x24
 801b1fc:	ecbd 8b06 	vpop	{d8-d10}
 801b200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b204:	4b81      	ldr	r3, [pc, #516]	; (801b40c <__ieee754_pow+0x254>)
 801b206:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b20a:	429c      	cmp	r4, r3
 801b20c:	ee10 aa10 	vmov	sl, s0
 801b210:	463d      	mov	r5, r7
 801b212:	dc06      	bgt.n	801b222 <__ieee754_pow+0x6a>
 801b214:	d101      	bne.n	801b21a <__ieee754_pow+0x62>
 801b216:	2e00      	cmp	r6, #0
 801b218:	d1e7      	bne.n	801b1ea <__ieee754_pow+0x32>
 801b21a:	4598      	cmp	r8, r3
 801b21c:	dc01      	bgt.n	801b222 <__ieee754_pow+0x6a>
 801b21e:	d10f      	bne.n	801b240 <__ieee754_pow+0x88>
 801b220:	b172      	cbz	r2, 801b240 <__ieee754_pow+0x88>
 801b222:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801b226:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801b22a:	ea55 050a 	orrs.w	r5, r5, sl
 801b22e:	d1dc      	bne.n	801b1ea <__ieee754_pow+0x32>
 801b230:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b234:	18db      	adds	r3, r3, r3
 801b236:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801b23a:	4152      	adcs	r2, r2
 801b23c:	429d      	cmp	r5, r3
 801b23e:	e7d0      	b.n	801b1e2 <__ieee754_pow+0x2a>
 801b240:	2d00      	cmp	r5, #0
 801b242:	da3b      	bge.n	801b2bc <__ieee754_pow+0x104>
 801b244:	4b72      	ldr	r3, [pc, #456]	; (801b410 <__ieee754_pow+0x258>)
 801b246:	4598      	cmp	r8, r3
 801b248:	dc51      	bgt.n	801b2ee <__ieee754_pow+0x136>
 801b24a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b24e:	4598      	cmp	r8, r3
 801b250:	f340 84ab 	ble.w	801bbaa <__ieee754_pow+0x9f2>
 801b254:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b258:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b25c:	2b14      	cmp	r3, #20
 801b25e:	dd0f      	ble.n	801b280 <__ieee754_pow+0xc8>
 801b260:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b264:	fa22 f103 	lsr.w	r1, r2, r3
 801b268:	fa01 f303 	lsl.w	r3, r1, r3
 801b26c:	4293      	cmp	r3, r2
 801b26e:	f040 849c 	bne.w	801bbaa <__ieee754_pow+0x9f2>
 801b272:	f001 0101 	and.w	r1, r1, #1
 801b276:	f1c1 0302 	rsb	r3, r1, #2
 801b27a:	9304      	str	r3, [sp, #16]
 801b27c:	b182      	cbz	r2, 801b2a0 <__ieee754_pow+0xe8>
 801b27e:	e05f      	b.n	801b340 <__ieee754_pow+0x188>
 801b280:	2a00      	cmp	r2, #0
 801b282:	d15b      	bne.n	801b33c <__ieee754_pow+0x184>
 801b284:	f1c3 0314 	rsb	r3, r3, #20
 801b288:	fa48 f103 	asr.w	r1, r8, r3
 801b28c:	fa01 f303 	lsl.w	r3, r1, r3
 801b290:	4543      	cmp	r3, r8
 801b292:	f040 8487 	bne.w	801bba4 <__ieee754_pow+0x9ec>
 801b296:	f001 0101 	and.w	r1, r1, #1
 801b29a:	f1c1 0302 	rsb	r3, r1, #2
 801b29e:	9304      	str	r3, [sp, #16]
 801b2a0:	4b5c      	ldr	r3, [pc, #368]	; (801b414 <__ieee754_pow+0x25c>)
 801b2a2:	4598      	cmp	r8, r3
 801b2a4:	d132      	bne.n	801b30c <__ieee754_pow+0x154>
 801b2a6:	f1b9 0f00 	cmp.w	r9, #0
 801b2aa:	f280 8477 	bge.w	801bb9c <__ieee754_pow+0x9e4>
 801b2ae:	4959      	ldr	r1, [pc, #356]	; (801b414 <__ieee754_pow+0x25c>)
 801b2b0:	4632      	mov	r2, r6
 801b2b2:	463b      	mov	r3, r7
 801b2b4:	2000      	movs	r0, #0
 801b2b6:	f7e5 faf9 	bl	80008ac <__aeabi_ddiv>
 801b2ba:	e79c      	b.n	801b1f6 <__ieee754_pow+0x3e>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	9304      	str	r3, [sp, #16]
 801b2c0:	2a00      	cmp	r2, #0
 801b2c2:	d13d      	bne.n	801b340 <__ieee754_pow+0x188>
 801b2c4:	4b51      	ldr	r3, [pc, #324]	; (801b40c <__ieee754_pow+0x254>)
 801b2c6:	4598      	cmp	r8, r3
 801b2c8:	d1ea      	bne.n	801b2a0 <__ieee754_pow+0xe8>
 801b2ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b2ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b2d2:	ea53 030a 	orrs.w	r3, r3, sl
 801b2d6:	f000 8459 	beq.w	801bb8c <__ieee754_pow+0x9d4>
 801b2da:	4b4f      	ldr	r3, [pc, #316]	; (801b418 <__ieee754_pow+0x260>)
 801b2dc:	429c      	cmp	r4, r3
 801b2de:	dd08      	ble.n	801b2f2 <__ieee754_pow+0x13a>
 801b2e0:	f1b9 0f00 	cmp.w	r9, #0
 801b2e4:	f2c0 8456 	blt.w	801bb94 <__ieee754_pow+0x9dc>
 801b2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2ec:	e783      	b.n	801b1f6 <__ieee754_pow+0x3e>
 801b2ee:	2302      	movs	r3, #2
 801b2f0:	e7e5      	b.n	801b2be <__ieee754_pow+0x106>
 801b2f2:	f1b9 0f00 	cmp.w	r9, #0
 801b2f6:	f04f 0000 	mov.w	r0, #0
 801b2fa:	f04f 0100 	mov.w	r1, #0
 801b2fe:	f6bf af7a 	bge.w	801b1f6 <__ieee754_pow+0x3e>
 801b302:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b306:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b30a:	e774      	b.n	801b1f6 <__ieee754_pow+0x3e>
 801b30c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b310:	d106      	bne.n	801b320 <__ieee754_pow+0x168>
 801b312:	4632      	mov	r2, r6
 801b314:	463b      	mov	r3, r7
 801b316:	4630      	mov	r0, r6
 801b318:	4639      	mov	r1, r7
 801b31a:	f7e5 f99d 	bl	8000658 <__aeabi_dmul>
 801b31e:	e76a      	b.n	801b1f6 <__ieee754_pow+0x3e>
 801b320:	4b3e      	ldr	r3, [pc, #248]	; (801b41c <__ieee754_pow+0x264>)
 801b322:	4599      	cmp	r9, r3
 801b324:	d10c      	bne.n	801b340 <__ieee754_pow+0x188>
 801b326:	2d00      	cmp	r5, #0
 801b328:	db0a      	blt.n	801b340 <__ieee754_pow+0x188>
 801b32a:	ec47 6b10 	vmov	d0, r6, r7
 801b32e:	b009      	add	sp, #36	; 0x24
 801b330:	ecbd 8b06 	vpop	{d8-d10}
 801b334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b338:	f7ff ba04 	b.w	801a744 <__ieee754_sqrt>
 801b33c:	2300      	movs	r3, #0
 801b33e:	9304      	str	r3, [sp, #16]
 801b340:	ec47 6b10 	vmov	d0, r6, r7
 801b344:	f000 fe6a 	bl	801c01c <fabs>
 801b348:	ec51 0b10 	vmov	r0, r1, d0
 801b34c:	f1ba 0f00 	cmp.w	sl, #0
 801b350:	d129      	bne.n	801b3a6 <__ieee754_pow+0x1ee>
 801b352:	b124      	cbz	r4, 801b35e <__ieee754_pow+0x1a6>
 801b354:	4b2f      	ldr	r3, [pc, #188]	; (801b414 <__ieee754_pow+0x25c>)
 801b356:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b35a:	429a      	cmp	r2, r3
 801b35c:	d123      	bne.n	801b3a6 <__ieee754_pow+0x1ee>
 801b35e:	f1b9 0f00 	cmp.w	r9, #0
 801b362:	da05      	bge.n	801b370 <__ieee754_pow+0x1b8>
 801b364:	4602      	mov	r2, r0
 801b366:	460b      	mov	r3, r1
 801b368:	2000      	movs	r0, #0
 801b36a:	492a      	ldr	r1, [pc, #168]	; (801b414 <__ieee754_pow+0x25c>)
 801b36c:	f7e5 fa9e 	bl	80008ac <__aeabi_ddiv>
 801b370:	2d00      	cmp	r5, #0
 801b372:	f6bf af40 	bge.w	801b1f6 <__ieee754_pow+0x3e>
 801b376:	9b04      	ldr	r3, [sp, #16]
 801b378:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b37c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b380:	431c      	orrs	r4, r3
 801b382:	d108      	bne.n	801b396 <__ieee754_pow+0x1de>
 801b384:	4602      	mov	r2, r0
 801b386:	460b      	mov	r3, r1
 801b388:	4610      	mov	r0, r2
 801b38a:	4619      	mov	r1, r3
 801b38c:	f7e4 ffac 	bl	80002e8 <__aeabi_dsub>
 801b390:	4602      	mov	r2, r0
 801b392:	460b      	mov	r3, r1
 801b394:	e78f      	b.n	801b2b6 <__ieee754_pow+0xfe>
 801b396:	9b04      	ldr	r3, [sp, #16]
 801b398:	2b01      	cmp	r3, #1
 801b39a:	f47f af2c 	bne.w	801b1f6 <__ieee754_pow+0x3e>
 801b39e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3a2:	4619      	mov	r1, r3
 801b3a4:	e727      	b.n	801b1f6 <__ieee754_pow+0x3e>
 801b3a6:	0feb      	lsrs	r3, r5, #31
 801b3a8:	3b01      	subs	r3, #1
 801b3aa:	9306      	str	r3, [sp, #24]
 801b3ac:	9a06      	ldr	r2, [sp, #24]
 801b3ae:	9b04      	ldr	r3, [sp, #16]
 801b3b0:	4313      	orrs	r3, r2
 801b3b2:	d102      	bne.n	801b3ba <__ieee754_pow+0x202>
 801b3b4:	4632      	mov	r2, r6
 801b3b6:	463b      	mov	r3, r7
 801b3b8:	e7e6      	b.n	801b388 <__ieee754_pow+0x1d0>
 801b3ba:	4b19      	ldr	r3, [pc, #100]	; (801b420 <__ieee754_pow+0x268>)
 801b3bc:	4598      	cmp	r8, r3
 801b3be:	f340 80fb 	ble.w	801b5b8 <__ieee754_pow+0x400>
 801b3c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b3c6:	4598      	cmp	r8, r3
 801b3c8:	4b13      	ldr	r3, [pc, #76]	; (801b418 <__ieee754_pow+0x260>)
 801b3ca:	dd0c      	ble.n	801b3e6 <__ieee754_pow+0x22e>
 801b3cc:	429c      	cmp	r4, r3
 801b3ce:	dc0f      	bgt.n	801b3f0 <__ieee754_pow+0x238>
 801b3d0:	f1b9 0f00 	cmp.w	r9, #0
 801b3d4:	da0f      	bge.n	801b3f6 <__ieee754_pow+0x23e>
 801b3d6:	2000      	movs	r0, #0
 801b3d8:	b009      	add	sp, #36	; 0x24
 801b3da:	ecbd 8b06 	vpop	{d8-d10}
 801b3de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3e2:	f001 babe 	b.w	801c962 <__math_oflow>
 801b3e6:	429c      	cmp	r4, r3
 801b3e8:	dbf2      	blt.n	801b3d0 <__ieee754_pow+0x218>
 801b3ea:	4b0a      	ldr	r3, [pc, #40]	; (801b414 <__ieee754_pow+0x25c>)
 801b3ec:	429c      	cmp	r4, r3
 801b3ee:	dd19      	ble.n	801b424 <__ieee754_pow+0x26c>
 801b3f0:	f1b9 0f00 	cmp.w	r9, #0
 801b3f4:	dcef      	bgt.n	801b3d6 <__ieee754_pow+0x21e>
 801b3f6:	2000      	movs	r0, #0
 801b3f8:	b009      	add	sp, #36	; 0x24
 801b3fa:	ecbd 8b06 	vpop	{d8-d10}
 801b3fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b402:	f001 baa5 	b.w	801c950 <__math_uflow>
 801b406:	bf00      	nop
 801b408:	fff00000 	.word	0xfff00000
 801b40c:	7ff00000 	.word	0x7ff00000
 801b410:	433fffff 	.word	0x433fffff
 801b414:	3ff00000 	.word	0x3ff00000
 801b418:	3fefffff 	.word	0x3fefffff
 801b41c:	3fe00000 	.word	0x3fe00000
 801b420:	41e00000 	.word	0x41e00000
 801b424:	4b60      	ldr	r3, [pc, #384]	; (801b5a8 <__ieee754_pow+0x3f0>)
 801b426:	2200      	movs	r2, #0
 801b428:	f7e4 ff5e 	bl	80002e8 <__aeabi_dsub>
 801b42c:	a354      	add	r3, pc, #336	; (adr r3, 801b580 <__ieee754_pow+0x3c8>)
 801b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b432:	4604      	mov	r4, r0
 801b434:	460d      	mov	r5, r1
 801b436:	f7e5 f90f 	bl	8000658 <__aeabi_dmul>
 801b43a:	a353      	add	r3, pc, #332	; (adr r3, 801b588 <__ieee754_pow+0x3d0>)
 801b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b440:	4606      	mov	r6, r0
 801b442:	460f      	mov	r7, r1
 801b444:	4620      	mov	r0, r4
 801b446:	4629      	mov	r1, r5
 801b448:	f7e5 f906 	bl	8000658 <__aeabi_dmul>
 801b44c:	4b57      	ldr	r3, [pc, #348]	; (801b5ac <__ieee754_pow+0x3f4>)
 801b44e:	4682      	mov	sl, r0
 801b450:	468b      	mov	fp, r1
 801b452:	2200      	movs	r2, #0
 801b454:	4620      	mov	r0, r4
 801b456:	4629      	mov	r1, r5
 801b458:	f7e5 f8fe 	bl	8000658 <__aeabi_dmul>
 801b45c:	4602      	mov	r2, r0
 801b45e:	460b      	mov	r3, r1
 801b460:	a14b      	add	r1, pc, #300	; (adr r1, 801b590 <__ieee754_pow+0x3d8>)
 801b462:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b466:	f7e4 ff3f 	bl	80002e8 <__aeabi_dsub>
 801b46a:	4622      	mov	r2, r4
 801b46c:	462b      	mov	r3, r5
 801b46e:	f7e5 f8f3 	bl	8000658 <__aeabi_dmul>
 801b472:	4602      	mov	r2, r0
 801b474:	460b      	mov	r3, r1
 801b476:	2000      	movs	r0, #0
 801b478:	494d      	ldr	r1, [pc, #308]	; (801b5b0 <__ieee754_pow+0x3f8>)
 801b47a:	f7e4 ff35 	bl	80002e8 <__aeabi_dsub>
 801b47e:	4622      	mov	r2, r4
 801b480:	4680      	mov	r8, r0
 801b482:	4689      	mov	r9, r1
 801b484:	462b      	mov	r3, r5
 801b486:	4620      	mov	r0, r4
 801b488:	4629      	mov	r1, r5
 801b48a:	f7e5 f8e5 	bl	8000658 <__aeabi_dmul>
 801b48e:	4602      	mov	r2, r0
 801b490:	460b      	mov	r3, r1
 801b492:	4640      	mov	r0, r8
 801b494:	4649      	mov	r1, r9
 801b496:	f7e5 f8df 	bl	8000658 <__aeabi_dmul>
 801b49a:	a33f      	add	r3, pc, #252	; (adr r3, 801b598 <__ieee754_pow+0x3e0>)
 801b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a0:	f7e5 f8da 	bl	8000658 <__aeabi_dmul>
 801b4a4:	4602      	mov	r2, r0
 801b4a6:	460b      	mov	r3, r1
 801b4a8:	4650      	mov	r0, sl
 801b4aa:	4659      	mov	r1, fp
 801b4ac:	f7e4 ff1c 	bl	80002e8 <__aeabi_dsub>
 801b4b0:	4602      	mov	r2, r0
 801b4b2:	460b      	mov	r3, r1
 801b4b4:	4680      	mov	r8, r0
 801b4b6:	4689      	mov	r9, r1
 801b4b8:	4630      	mov	r0, r6
 801b4ba:	4639      	mov	r1, r7
 801b4bc:	f7e4 ff16 	bl	80002ec <__adddf3>
 801b4c0:	2000      	movs	r0, #0
 801b4c2:	4632      	mov	r2, r6
 801b4c4:	463b      	mov	r3, r7
 801b4c6:	4604      	mov	r4, r0
 801b4c8:	460d      	mov	r5, r1
 801b4ca:	f7e4 ff0d 	bl	80002e8 <__aeabi_dsub>
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	460b      	mov	r3, r1
 801b4d2:	4640      	mov	r0, r8
 801b4d4:	4649      	mov	r1, r9
 801b4d6:	f7e4 ff07 	bl	80002e8 <__aeabi_dsub>
 801b4da:	9b04      	ldr	r3, [sp, #16]
 801b4dc:	9a06      	ldr	r2, [sp, #24]
 801b4de:	3b01      	subs	r3, #1
 801b4e0:	4313      	orrs	r3, r2
 801b4e2:	4682      	mov	sl, r0
 801b4e4:	468b      	mov	fp, r1
 801b4e6:	f040 81e7 	bne.w	801b8b8 <__ieee754_pow+0x700>
 801b4ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801b5a0 <__ieee754_pow+0x3e8>
 801b4ee:	eeb0 8a47 	vmov.f32	s16, s14
 801b4f2:	eef0 8a67 	vmov.f32	s17, s15
 801b4f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b4fa:	2600      	movs	r6, #0
 801b4fc:	4632      	mov	r2, r6
 801b4fe:	463b      	mov	r3, r7
 801b500:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b504:	f7e4 fef0 	bl	80002e8 <__aeabi_dsub>
 801b508:	4622      	mov	r2, r4
 801b50a:	462b      	mov	r3, r5
 801b50c:	f7e5 f8a4 	bl	8000658 <__aeabi_dmul>
 801b510:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b514:	4680      	mov	r8, r0
 801b516:	4689      	mov	r9, r1
 801b518:	4650      	mov	r0, sl
 801b51a:	4659      	mov	r1, fp
 801b51c:	f7e5 f89c 	bl	8000658 <__aeabi_dmul>
 801b520:	4602      	mov	r2, r0
 801b522:	460b      	mov	r3, r1
 801b524:	4640      	mov	r0, r8
 801b526:	4649      	mov	r1, r9
 801b528:	f7e4 fee0 	bl	80002ec <__adddf3>
 801b52c:	4632      	mov	r2, r6
 801b52e:	463b      	mov	r3, r7
 801b530:	4680      	mov	r8, r0
 801b532:	4689      	mov	r9, r1
 801b534:	4620      	mov	r0, r4
 801b536:	4629      	mov	r1, r5
 801b538:	f7e5 f88e 	bl	8000658 <__aeabi_dmul>
 801b53c:	460b      	mov	r3, r1
 801b53e:	4604      	mov	r4, r0
 801b540:	460d      	mov	r5, r1
 801b542:	4602      	mov	r2, r0
 801b544:	4649      	mov	r1, r9
 801b546:	4640      	mov	r0, r8
 801b548:	f7e4 fed0 	bl	80002ec <__adddf3>
 801b54c:	4b19      	ldr	r3, [pc, #100]	; (801b5b4 <__ieee754_pow+0x3fc>)
 801b54e:	4299      	cmp	r1, r3
 801b550:	ec45 4b19 	vmov	d9, r4, r5
 801b554:	4606      	mov	r6, r0
 801b556:	460f      	mov	r7, r1
 801b558:	468b      	mov	fp, r1
 801b55a:	f340 82f0 	ble.w	801bb3e <__ieee754_pow+0x986>
 801b55e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b566:	4303      	orrs	r3, r0
 801b568:	f000 81e4 	beq.w	801b934 <__ieee754_pow+0x77c>
 801b56c:	ec51 0b18 	vmov	r0, r1, d8
 801b570:	2200      	movs	r2, #0
 801b572:	2300      	movs	r3, #0
 801b574:	f7e5 fae2 	bl	8000b3c <__aeabi_dcmplt>
 801b578:	3800      	subs	r0, #0
 801b57a:	bf18      	it	ne
 801b57c:	2001      	movne	r0, #1
 801b57e:	e72b      	b.n	801b3d8 <__ieee754_pow+0x220>
 801b580:	60000000 	.word	0x60000000
 801b584:	3ff71547 	.word	0x3ff71547
 801b588:	f85ddf44 	.word	0xf85ddf44
 801b58c:	3e54ae0b 	.word	0x3e54ae0b
 801b590:	55555555 	.word	0x55555555
 801b594:	3fd55555 	.word	0x3fd55555
 801b598:	652b82fe 	.word	0x652b82fe
 801b59c:	3ff71547 	.word	0x3ff71547
 801b5a0:	00000000 	.word	0x00000000
 801b5a4:	bff00000 	.word	0xbff00000
 801b5a8:	3ff00000 	.word	0x3ff00000
 801b5ac:	3fd00000 	.word	0x3fd00000
 801b5b0:	3fe00000 	.word	0x3fe00000
 801b5b4:	408fffff 	.word	0x408fffff
 801b5b8:	4bd5      	ldr	r3, [pc, #852]	; (801b910 <__ieee754_pow+0x758>)
 801b5ba:	402b      	ands	r3, r5
 801b5bc:	2200      	movs	r2, #0
 801b5be:	b92b      	cbnz	r3, 801b5cc <__ieee754_pow+0x414>
 801b5c0:	4bd4      	ldr	r3, [pc, #848]	; (801b914 <__ieee754_pow+0x75c>)
 801b5c2:	f7e5 f849 	bl	8000658 <__aeabi_dmul>
 801b5c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b5ca:	460c      	mov	r4, r1
 801b5cc:	1523      	asrs	r3, r4, #20
 801b5ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b5d2:	4413      	add	r3, r2
 801b5d4:	9305      	str	r3, [sp, #20]
 801b5d6:	4bd0      	ldr	r3, [pc, #832]	; (801b918 <__ieee754_pow+0x760>)
 801b5d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b5dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b5e0:	429c      	cmp	r4, r3
 801b5e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b5e6:	dd08      	ble.n	801b5fa <__ieee754_pow+0x442>
 801b5e8:	4bcc      	ldr	r3, [pc, #816]	; (801b91c <__ieee754_pow+0x764>)
 801b5ea:	429c      	cmp	r4, r3
 801b5ec:	f340 8162 	ble.w	801b8b4 <__ieee754_pow+0x6fc>
 801b5f0:	9b05      	ldr	r3, [sp, #20]
 801b5f2:	3301      	adds	r3, #1
 801b5f4:	9305      	str	r3, [sp, #20]
 801b5f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b5fa:	2400      	movs	r4, #0
 801b5fc:	00e3      	lsls	r3, r4, #3
 801b5fe:	9307      	str	r3, [sp, #28]
 801b600:	4bc7      	ldr	r3, [pc, #796]	; (801b920 <__ieee754_pow+0x768>)
 801b602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b606:	ed93 7b00 	vldr	d7, [r3]
 801b60a:	4629      	mov	r1, r5
 801b60c:	ec53 2b17 	vmov	r2, r3, d7
 801b610:	eeb0 9a47 	vmov.f32	s18, s14
 801b614:	eef0 9a67 	vmov.f32	s19, s15
 801b618:	4682      	mov	sl, r0
 801b61a:	f7e4 fe65 	bl	80002e8 <__aeabi_dsub>
 801b61e:	4652      	mov	r2, sl
 801b620:	4606      	mov	r6, r0
 801b622:	460f      	mov	r7, r1
 801b624:	462b      	mov	r3, r5
 801b626:	ec51 0b19 	vmov	r0, r1, d9
 801b62a:	f7e4 fe5f 	bl	80002ec <__adddf3>
 801b62e:	4602      	mov	r2, r0
 801b630:	460b      	mov	r3, r1
 801b632:	2000      	movs	r0, #0
 801b634:	49bb      	ldr	r1, [pc, #748]	; (801b924 <__ieee754_pow+0x76c>)
 801b636:	f7e5 f939 	bl	80008ac <__aeabi_ddiv>
 801b63a:	ec41 0b1a 	vmov	d10, r0, r1
 801b63e:	4602      	mov	r2, r0
 801b640:	460b      	mov	r3, r1
 801b642:	4630      	mov	r0, r6
 801b644:	4639      	mov	r1, r7
 801b646:	f7e5 f807 	bl	8000658 <__aeabi_dmul>
 801b64a:	2300      	movs	r3, #0
 801b64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b650:	9302      	str	r3, [sp, #8]
 801b652:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b656:	46ab      	mov	fp, r5
 801b658:	106d      	asrs	r5, r5, #1
 801b65a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b65e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b662:	ec41 0b18 	vmov	d8, r0, r1
 801b666:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b66a:	2200      	movs	r2, #0
 801b66c:	4640      	mov	r0, r8
 801b66e:	4649      	mov	r1, r9
 801b670:	4614      	mov	r4, r2
 801b672:	461d      	mov	r5, r3
 801b674:	f7e4 fff0 	bl	8000658 <__aeabi_dmul>
 801b678:	4602      	mov	r2, r0
 801b67a:	460b      	mov	r3, r1
 801b67c:	4630      	mov	r0, r6
 801b67e:	4639      	mov	r1, r7
 801b680:	f7e4 fe32 	bl	80002e8 <__aeabi_dsub>
 801b684:	ec53 2b19 	vmov	r2, r3, d9
 801b688:	4606      	mov	r6, r0
 801b68a:	460f      	mov	r7, r1
 801b68c:	4620      	mov	r0, r4
 801b68e:	4629      	mov	r1, r5
 801b690:	f7e4 fe2a 	bl	80002e8 <__aeabi_dsub>
 801b694:	4602      	mov	r2, r0
 801b696:	460b      	mov	r3, r1
 801b698:	4650      	mov	r0, sl
 801b69a:	4659      	mov	r1, fp
 801b69c:	f7e4 fe24 	bl	80002e8 <__aeabi_dsub>
 801b6a0:	4642      	mov	r2, r8
 801b6a2:	464b      	mov	r3, r9
 801b6a4:	f7e4 ffd8 	bl	8000658 <__aeabi_dmul>
 801b6a8:	4602      	mov	r2, r0
 801b6aa:	460b      	mov	r3, r1
 801b6ac:	4630      	mov	r0, r6
 801b6ae:	4639      	mov	r1, r7
 801b6b0:	f7e4 fe1a 	bl	80002e8 <__aeabi_dsub>
 801b6b4:	ec53 2b1a 	vmov	r2, r3, d10
 801b6b8:	f7e4 ffce 	bl	8000658 <__aeabi_dmul>
 801b6bc:	ec53 2b18 	vmov	r2, r3, d8
 801b6c0:	ec41 0b19 	vmov	d9, r0, r1
 801b6c4:	ec51 0b18 	vmov	r0, r1, d8
 801b6c8:	f7e4 ffc6 	bl	8000658 <__aeabi_dmul>
 801b6cc:	a37c      	add	r3, pc, #496	; (adr r3, 801b8c0 <__ieee754_pow+0x708>)
 801b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	460d      	mov	r5, r1
 801b6d6:	f7e4 ffbf 	bl	8000658 <__aeabi_dmul>
 801b6da:	a37b      	add	r3, pc, #492	; (adr r3, 801b8c8 <__ieee754_pow+0x710>)
 801b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e0:	f7e4 fe04 	bl	80002ec <__adddf3>
 801b6e4:	4622      	mov	r2, r4
 801b6e6:	462b      	mov	r3, r5
 801b6e8:	f7e4 ffb6 	bl	8000658 <__aeabi_dmul>
 801b6ec:	a378      	add	r3, pc, #480	; (adr r3, 801b8d0 <__ieee754_pow+0x718>)
 801b6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f2:	f7e4 fdfb 	bl	80002ec <__adddf3>
 801b6f6:	4622      	mov	r2, r4
 801b6f8:	462b      	mov	r3, r5
 801b6fa:	f7e4 ffad 	bl	8000658 <__aeabi_dmul>
 801b6fe:	a376      	add	r3, pc, #472	; (adr r3, 801b8d8 <__ieee754_pow+0x720>)
 801b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b704:	f7e4 fdf2 	bl	80002ec <__adddf3>
 801b708:	4622      	mov	r2, r4
 801b70a:	462b      	mov	r3, r5
 801b70c:	f7e4 ffa4 	bl	8000658 <__aeabi_dmul>
 801b710:	a373      	add	r3, pc, #460	; (adr r3, 801b8e0 <__ieee754_pow+0x728>)
 801b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b716:	f7e4 fde9 	bl	80002ec <__adddf3>
 801b71a:	4622      	mov	r2, r4
 801b71c:	462b      	mov	r3, r5
 801b71e:	f7e4 ff9b 	bl	8000658 <__aeabi_dmul>
 801b722:	a371      	add	r3, pc, #452	; (adr r3, 801b8e8 <__ieee754_pow+0x730>)
 801b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b728:	f7e4 fde0 	bl	80002ec <__adddf3>
 801b72c:	4622      	mov	r2, r4
 801b72e:	4606      	mov	r6, r0
 801b730:	460f      	mov	r7, r1
 801b732:	462b      	mov	r3, r5
 801b734:	4620      	mov	r0, r4
 801b736:	4629      	mov	r1, r5
 801b738:	f7e4 ff8e 	bl	8000658 <__aeabi_dmul>
 801b73c:	4602      	mov	r2, r0
 801b73e:	460b      	mov	r3, r1
 801b740:	4630      	mov	r0, r6
 801b742:	4639      	mov	r1, r7
 801b744:	f7e4 ff88 	bl	8000658 <__aeabi_dmul>
 801b748:	4642      	mov	r2, r8
 801b74a:	4604      	mov	r4, r0
 801b74c:	460d      	mov	r5, r1
 801b74e:	464b      	mov	r3, r9
 801b750:	ec51 0b18 	vmov	r0, r1, d8
 801b754:	f7e4 fdca 	bl	80002ec <__adddf3>
 801b758:	ec53 2b19 	vmov	r2, r3, d9
 801b75c:	f7e4 ff7c 	bl	8000658 <__aeabi_dmul>
 801b760:	4622      	mov	r2, r4
 801b762:	462b      	mov	r3, r5
 801b764:	f7e4 fdc2 	bl	80002ec <__adddf3>
 801b768:	4642      	mov	r2, r8
 801b76a:	4682      	mov	sl, r0
 801b76c:	468b      	mov	fp, r1
 801b76e:	464b      	mov	r3, r9
 801b770:	4640      	mov	r0, r8
 801b772:	4649      	mov	r1, r9
 801b774:	f7e4 ff70 	bl	8000658 <__aeabi_dmul>
 801b778:	4b6b      	ldr	r3, [pc, #428]	; (801b928 <__ieee754_pow+0x770>)
 801b77a:	2200      	movs	r2, #0
 801b77c:	4606      	mov	r6, r0
 801b77e:	460f      	mov	r7, r1
 801b780:	f7e4 fdb4 	bl	80002ec <__adddf3>
 801b784:	4652      	mov	r2, sl
 801b786:	465b      	mov	r3, fp
 801b788:	f7e4 fdb0 	bl	80002ec <__adddf3>
 801b78c:	2000      	movs	r0, #0
 801b78e:	4604      	mov	r4, r0
 801b790:	460d      	mov	r5, r1
 801b792:	4602      	mov	r2, r0
 801b794:	460b      	mov	r3, r1
 801b796:	4640      	mov	r0, r8
 801b798:	4649      	mov	r1, r9
 801b79a:	f7e4 ff5d 	bl	8000658 <__aeabi_dmul>
 801b79e:	4b62      	ldr	r3, [pc, #392]	; (801b928 <__ieee754_pow+0x770>)
 801b7a0:	4680      	mov	r8, r0
 801b7a2:	4689      	mov	r9, r1
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	4629      	mov	r1, r5
 801b7aa:	f7e4 fd9d 	bl	80002e8 <__aeabi_dsub>
 801b7ae:	4632      	mov	r2, r6
 801b7b0:	463b      	mov	r3, r7
 801b7b2:	f7e4 fd99 	bl	80002e8 <__aeabi_dsub>
 801b7b6:	4602      	mov	r2, r0
 801b7b8:	460b      	mov	r3, r1
 801b7ba:	4650      	mov	r0, sl
 801b7bc:	4659      	mov	r1, fp
 801b7be:	f7e4 fd93 	bl	80002e8 <__aeabi_dsub>
 801b7c2:	ec53 2b18 	vmov	r2, r3, d8
 801b7c6:	f7e4 ff47 	bl	8000658 <__aeabi_dmul>
 801b7ca:	4622      	mov	r2, r4
 801b7cc:	4606      	mov	r6, r0
 801b7ce:	460f      	mov	r7, r1
 801b7d0:	462b      	mov	r3, r5
 801b7d2:	ec51 0b19 	vmov	r0, r1, d9
 801b7d6:	f7e4 ff3f 	bl	8000658 <__aeabi_dmul>
 801b7da:	4602      	mov	r2, r0
 801b7dc:	460b      	mov	r3, r1
 801b7de:	4630      	mov	r0, r6
 801b7e0:	4639      	mov	r1, r7
 801b7e2:	f7e4 fd83 	bl	80002ec <__adddf3>
 801b7e6:	4606      	mov	r6, r0
 801b7e8:	460f      	mov	r7, r1
 801b7ea:	4602      	mov	r2, r0
 801b7ec:	460b      	mov	r3, r1
 801b7ee:	4640      	mov	r0, r8
 801b7f0:	4649      	mov	r1, r9
 801b7f2:	f7e4 fd7b 	bl	80002ec <__adddf3>
 801b7f6:	a33e      	add	r3, pc, #248	; (adr r3, 801b8f0 <__ieee754_pow+0x738>)
 801b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7fc:	2000      	movs	r0, #0
 801b7fe:	4604      	mov	r4, r0
 801b800:	460d      	mov	r5, r1
 801b802:	f7e4 ff29 	bl	8000658 <__aeabi_dmul>
 801b806:	4642      	mov	r2, r8
 801b808:	ec41 0b18 	vmov	d8, r0, r1
 801b80c:	464b      	mov	r3, r9
 801b80e:	4620      	mov	r0, r4
 801b810:	4629      	mov	r1, r5
 801b812:	f7e4 fd69 	bl	80002e8 <__aeabi_dsub>
 801b816:	4602      	mov	r2, r0
 801b818:	460b      	mov	r3, r1
 801b81a:	4630      	mov	r0, r6
 801b81c:	4639      	mov	r1, r7
 801b81e:	f7e4 fd63 	bl	80002e8 <__aeabi_dsub>
 801b822:	a335      	add	r3, pc, #212	; (adr r3, 801b8f8 <__ieee754_pow+0x740>)
 801b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b828:	f7e4 ff16 	bl	8000658 <__aeabi_dmul>
 801b82c:	a334      	add	r3, pc, #208	; (adr r3, 801b900 <__ieee754_pow+0x748>)
 801b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b832:	4606      	mov	r6, r0
 801b834:	460f      	mov	r7, r1
 801b836:	4620      	mov	r0, r4
 801b838:	4629      	mov	r1, r5
 801b83a:	f7e4 ff0d 	bl	8000658 <__aeabi_dmul>
 801b83e:	4602      	mov	r2, r0
 801b840:	460b      	mov	r3, r1
 801b842:	4630      	mov	r0, r6
 801b844:	4639      	mov	r1, r7
 801b846:	f7e4 fd51 	bl	80002ec <__adddf3>
 801b84a:	9a07      	ldr	r2, [sp, #28]
 801b84c:	4b37      	ldr	r3, [pc, #220]	; (801b92c <__ieee754_pow+0x774>)
 801b84e:	4413      	add	r3, r2
 801b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b854:	f7e4 fd4a 	bl	80002ec <__adddf3>
 801b858:	4682      	mov	sl, r0
 801b85a:	9805      	ldr	r0, [sp, #20]
 801b85c:	468b      	mov	fp, r1
 801b85e:	f7e4 fe91 	bl	8000584 <__aeabi_i2d>
 801b862:	9a07      	ldr	r2, [sp, #28]
 801b864:	4b32      	ldr	r3, [pc, #200]	; (801b930 <__ieee754_pow+0x778>)
 801b866:	4413      	add	r3, r2
 801b868:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b86c:	4606      	mov	r6, r0
 801b86e:	460f      	mov	r7, r1
 801b870:	4652      	mov	r2, sl
 801b872:	465b      	mov	r3, fp
 801b874:	ec51 0b18 	vmov	r0, r1, d8
 801b878:	f7e4 fd38 	bl	80002ec <__adddf3>
 801b87c:	4642      	mov	r2, r8
 801b87e:	464b      	mov	r3, r9
 801b880:	f7e4 fd34 	bl	80002ec <__adddf3>
 801b884:	4632      	mov	r2, r6
 801b886:	463b      	mov	r3, r7
 801b888:	f7e4 fd30 	bl	80002ec <__adddf3>
 801b88c:	2000      	movs	r0, #0
 801b88e:	4632      	mov	r2, r6
 801b890:	463b      	mov	r3, r7
 801b892:	4604      	mov	r4, r0
 801b894:	460d      	mov	r5, r1
 801b896:	f7e4 fd27 	bl	80002e8 <__aeabi_dsub>
 801b89a:	4642      	mov	r2, r8
 801b89c:	464b      	mov	r3, r9
 801b89e:	f7e4 fd23 	bl	80002e8 <__aeabi_dsub>
 801b8a2:	ec53 2b18 	vmov	r2, r3, d8
 801b8a6:	f7e4 fd1f 	bl	80002e8 <__aeabi_dsub>
 801b8aa:	4602      	mov	r2, r0
 801b8ac:	460b      	mov	r3, r1
 801b8ae:	4650      	mov	r0, sl
 801b8b0:	4659      	mov	r1, fp
 801b8b2:	e610      	b.n	801b4d6 <__ieee754_pow+0x31e>
 801b8b4:	2401      	movs	r4, #1
 801b8b6:	e6a1      	b.n	801b5fc <__ieee754_pow+0x444>
 801b8b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801b908 <__ieee754_pow+0x750>
 801b8bc:	e617      	b.n	801b4ee <__ieee754_pow+0x336>
 801b8be:	bf00      	nop
 801b8c0:	4a454eef 	.word	0x4a454eef
 801b8c4:	3fca7e28 	.word	0x3fca7e28
 801b8c8:	93c9db65 	.word	0x93c9db65
 801b8cc:	3fcd864a 	.word	0x3fcd864a
 801b8d0:	a91d4101 	.word	0xa91d4101
 801b8d4:	3fd17460 	.word	0x3fd17460
 801b8d8:	518f264d 	.word	0x518f264d
 801b8dc:	3fd55555 	.word	0x3fd55555
 801b8e0:	db6fabff 	.word	0xdb6fabff
 801b8e4:	3fdb6db6 	.word	0x3fdb6db6
 801b8e8:	33333303 	.word	0x33333303
 801b8ec:	3fe33333 	.word	0x3fe33333
 801b8f0:	e0000000 	.word	0xe0000000
 801b8f4:	3feec709 	.word	0x3feec709
 801b8f8:	dc3a03fd 	.word	0xdc3a03fd
 801b8fc:	3feec709 	.word	0x3feec709
 801b900:	145b01f5 	.word	0x145b01f5
 801b904:	be3e2fe0 	.word	0xbe3e2fe0
 801b908:	00000000 	.word	0x00000000
 801b90c:	3ff00000 	.word	0x3ff00000
 801b910:	7ff00000 	.word	0x7ff00000
 801b914:	43400000 	.word	0x43400000
 801b918:	0003988e 	.word	0x0003988e
 801b91c:	000bb679 	.word	0x000bb679
 801b920:	08029100 	.word	0x08029100
 801b924:	3ff00000 	.word	0x3ff00000
 801b928:	40080000 	.word	0x40080000
 801b92c:	08029120 	.word	0x08029120
 801b930:	08029110 	.word	0x08029110
 801b934:	a3b3      	add	r3, pc, #716	; (adr r3, 801bc04 <__ieee754_pow+0xa4c>)
 801b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93a:	4640      	mov	r0, r8
 801b93c:	4649      	mov	r1, r9
 801b93e:	f7e4 fcd5 	bl	80002ec <__adddf3>
 801b942:	4622      	mov	r2, r4
 801b944:	ec41 0b1a 	vmov	d10, r0, r1
 801b948:	462b      	mov	r3, r5
 801b94a:	4630      	mov	r0, r6
 801b94c:	4639      	mov	r1, r7
 801b94e:	f7e4 fccb 	bl	80002e8 <__aeabi_dsub>
 801b952:	4602      	mov	r2, r0
 801b954:	460b      	mov	r3, r1
 801b956:	ec51 0b1a 	vmov	r0, r1, d10
 801b95a:	f7e5 f90d 	bl	8000b78 <__aeabi_dcmpgt>
 801b95e:	2800      	cmp	r0, #0
 801b960:	f47f ae04 	bne.w	801b56c <__ieee754_pow+0x3b4>
 801b964:	4aa2      	ldr	r2, [pc, #648]	; (801bbf0 <__ieee754_pow+0xa38>)
 801b966:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b96a:	4293      	cmp	r3, r2
 801b96c:	f340 8107 	ble.w	801bb7e <__ieee754_pow+0x9c6>
 801b970:	151b      	asrs	r3, r3, #20
 801b972:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b976:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b97a:	fa4a fa03 	asr.w	sl, sl, r3
 801b97e:	44da      	add	sl, fp
 801b980:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801b984:	489b      	ldr	r0, [pc, #620]	; (801bbf4 <__ieee754_pow+0xa3c>)
 801b986:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b98a:	4108      	asrs	r0, r1
 801b98c:	ea00 030a 	and.w	r3, r0, sl
 801b990:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801b994:	f1c1 0114 	rsb	r1, r1, #20
 801b998:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b99c:	fa4a fa01 	asr.w	sl, sl, r1
 801b9a0:	f1bb 0f00 	cmp.w	fp, #0
 801b9a4:	f04f 0200 	mov.w	r2, #0
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	4629      	mov	r1, r5
 801b9ac:	bfb8      	it	lt
 801b9ae:	f1ca 0a00 	rsblt	sl, sl, #0
 801b9b2:	f7e4 fc99 	bl	80002e8 <__aeabi_dsub>
 801b9b6:	ec41 0b19 	vmov	d9, r0, r1
 801b9ba:	4642      	mov	r2, r8
 801b9bc:	464b      	mov	r3, r9
 801b9be:	ec51 0b19 	vmov	r0, r1, d9
 801b9c2:	f7e4 fc93 	bl	80002ec <__adddf3>
 801b9c6:	a37a      	add	r3, pc, #488	; (adr r3, 801bbb0 <__ieee754_pow+0x9f8>)
 801b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	4604      	mov	r4, r0
 801b9d0:	460d      	mov	r5, r1
 801b9d2:	f7e4 fe41 	bl	8000658 <__aeabi_dmul>
 801b9d6:	ec53 2b19 	vmov	r2, r3, d9
 801b9da:	4606      	mov	r6, r0
 801b9dc:	460f      	mov	r7, r1
 801b9de:	4620      	mov	r0, r4
 801b9e0:	4629      	mov	r1, r5
 801b9e2:	f7e4 fc81 	bl	80002e8 <__aeabi_dsub>
 801b9e6:	4602      	mov	r2, r0
 801b9e8:	460b      	mov	r3, r1
 801b9ea:	4640      	mov	r0, r8
 801b9ec:	4649      	mov	r1, r9
 801b9ee:	f7e4 fc7b 	bl	80002e8 <__aeabi_dsub>
 801b9f2:	a371      	add	r3, pc, #452	; (adr r3, 801bbb8 <__ieee754_pow+0xa00>)
 801b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f8:	f7e4 fe2e 	bl	8000658 <__aeabi_dmul>
 801b9fc:	a370      	add	r3, pc, #448	; (adr r3, 801bbc0 <__ieee754_pow+0xa08>)
 801b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba02:	4680      	mov	r8, r0
 801ba04:	4689      	mov	r9, r1
 801ba06:	4620      	mov	r0, r4
 801ba08:	4629      	mov	r1, r5
 801ba0a:	f7e4 fe25 	bl	8000658 <__aeabi_dmul>
 801ba0e:	4602      	mov	r2, r0
 801ba10:	460b      	mov	r3, r1
 801ba12:	4640      	mov	r0, r8
 801ba14:	4649      	mov	r1, r9
 801ba16:	f7e4 fc69 	bl	80002ec <__adddf3>
 801ba1a:	4604      	mov	r4, r0
 801ba1c:	460d      	mov	r5, r1
 801ba1e:	4602      	mov	r2, r0
 801ba20:	460b      	mov	r3, r1
 801ba22:	4630      	mov	r0, r6
 801ba24:	4639      	mov	r1, r7
 801ba26:	f7e4 fc61 	bl	80002ec <__adddf3>
 801ba2a:	4632      	mov	r2, r6
 801ba2c:	463b      	mov	r3, r7
 801ba2e:	4680      	mov	r8, r0
 801ba30:	4689      	mov	r9, r1
 801ba32:	f7e4 fc59 	bl	80002e8 <__aeabi_dsub>
 801ba36:	4602      	mov	r2, r0
 801ba38:	460b      	mov	r3, r1
 801ba3a:	4620      	mov	r0, r4
 801ba3c:	4629      	mov	r1, r5
 801ba3e:	f7e4 fc53 	bl	80002e8 <__aeabi_dsub>
 801ba42:	4642      	mov	r2, r8
 801ba44:	4606      	mov	r6, r0
 801ba46:	460f      	mov	r7, r1
 801ba48:	464b      	mov	r3, r9
 801ba4a:	4640      	mov	r0, r8
 801ba4c:	4649      	mov	r1, r9
 801ba4e:	f7e4 fe03 	bl	8000658 <__aeabi_dmul>
 801ba52:	a35d      	add	r3, pc, #372	; (adr r3, 801bbc8 <__ieee754_pow+0xa10>)
 801ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba58:	4604      	mov	r4, r0
 801ba5a:	460d      	mov	r5, r1
 801ba5c:	f7e4 fdfc 	bl	8000658 <__aeabi_dmul>
 801ba60:	a35b      	add	r3, pc, #364	; (adr r3, 801bbd0 <__ieee754_pow+0xa18>)
 801ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba66:	f7e4 fc3f 	bl	80002e8 <__aeabi_dsub>
 801ba6a:	4622      	mov	r2, r4
 801ba6c:	462b      	mov	r3, r5
 801ba6e:	f7e4 fdf3 	bl	8000658 <__aeabi_dmul>
 801ba72:	a359      	add	r3, pc, #356	; (adr r3, 801bbd8 <__ieee754_pow+0xa20>)
 801ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba78:	f7e4 fc38 	bl	80002ec <__adddf3>
 801ba7c:	4622      	mov	r2, r4
 801ba7e:	462b      	mov	r3, r5
 801ba80:	f7e4 fdea 	bl	8000658 <__aeabi_dmul>
 801ba84:	a356      	add	r3, pc, #344	; (adr r3, 801bbe0 <__ieee754_pow+0xa28>)
 801ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba8a:	f7e4 fc2d 	bl	80002e8 <__aeabi_dsub>
 801ba8e:	4622      	mov	r2, r4
 801ba90:	462b      	mov	r3, r5
 801ba92:	f7e4 fde1 	bl	8000658 <__aeabi_dmul>
 801ba96:	a354      	add	r3, pc, #336	; (adr r3, 801bbe8 <__ieee754_pow+0xa30>)
 801ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba9c:	f7e4 fc26 	bl	80002ec <__adddf3>
 801baa0:	4622      	mov	r2, r4
 801baa2:	462b      	mov	r3, r5
 801baa4:	f7e4 fdd8 	bl	8000658 <__aeabi_dmul>
 801baa8:	4602      	mov	r2, r0
 801baaa:	460b      	mov	r3, r1
 801baac:	4640      	mov	r0, r8
 801baae:	4649      	mov	r1, r9
 801bab0:	f7e4 fc1a 	bl	80002e8 <__aeabi_dsub>
 801bab4:	4604      	mov	r4, r0
 801bab6:	460d      	mov	r5, r1
 801bab8:	4602      	mov	r2, r0
 801baba:	460b      	mov	r3, r1
 801babc:	4640      	mov	r0, r8
 801babe:	4649      	mov	r1, r9
 801bac0:	f7e4 fdca 	bl	8000658 <__aeabi_dmul>
 801bac4:	2200      	movs	r2, #0
 801bac6:	ec41 0b19 	vmov	d9, r0, r1
 801baca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bace:	4620      	mov	r0, r4
 801bad0:	4629      	mov	r1, r5
 801bad2:	f7e4 fc09 	bl	80002e8 <__aeabi_dsub>
 801bad6:	4602      	mov	r2, r0
 801bad8:	460b      	mov	r3, r1
 801bada:	ec51 0b19 	vmov	r0, r1, d9
 801bade:	f7e4 fee5 	bl	80008ac <__aeabi_ddiv>
 801bae2:	4632      	mov	r2, r6
 801bae4:	4604      	mov	r4, r0
 801bae6:	460d      	mov	r5, r1
 801bae8:	463b      	mov	r3, r7
 801baea:	4640      	mov	r0, r8
 801baec:	4649      	mov	r1, r9
 801baee:	f7e4 fdb3 	bl	8000658 <__aeabi_dmul>
 801baf2:	4632      	mov	r2, r6
 801baf4:	463b      	mov	r3, r7
 801baf6:	f7e4 fbf9 	bl	80002ec <__adddf3>
 801bafa:	4602      	mov	r2, r0
 801bafc:	460b      	mov	r3, r1
 801bafe:	4620      	mov	r0, r4
 801bb00:	4629      	mov	r1, r5
 801bb02:	f7e4 fbf1 	bl	80002e8 <__aeabi_dsub>
 801bb06:	4642      	mov	r2, r8
 801bb08:	464b      	mov	r3, r9
 801bb0a:	f7e4 fbed 	bl	80002e8 <__aeabi_dsub>
 801bb0e:	460b      	mov	r3, r1
 801bb10:	4602      	mov	r2, r0
 801bb12:	4939      	ldr	r1, [pc, #228]	; (801bbf8 <__ieee754_pow+0xa40>)
 801bb14:	2000      	movs	r0, #0
 801bb16:	f7e4 fbe7 	bl	80002e8 <__aeabi_dsub>
 801bb1a:	ec41 0b10 	vmov	d0, r0, r1
 801bb1e:	ee10 3a90 	vmov	r3, s1
 801bb22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801bb26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bb2a:	da2b      	bge.n	801bb84 <__ieee754_pow+0x9cc>
 801bb2c:	4650      	mov	r0, sl
 801bb2e:	f000 fe73 	bl	801c818 <scalbn>
 801bb32:	ec51 0b10 	vmov	r0, r1, d0
 801bb36:	ec53 2b18 	vmov	r2, r3, d8
 801bb3a:	f7ff bbee 	b.w	801b31a <__ieee754_pow+0x162>
 801bb3e:	4b2f      	ldr	r3, [pc, #188]	; (801bbfc <__ieee754_pow+0xa44>)
 801bb40:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801bb44:	429e      	cmp	r6, r3
 801bb46:	f77f af0d 	ble.w	801b964 <__ieee754_pow+0x7ac>
 801bb4a:	4b2d      	ldr	r3, [pc, #180]	; (801bc00 <__ieee754_pow+0xa48>)
 801bb4c:	440b      	add	r3, r1
 801bb4e:	4303      	orrs	r3, r0
 801bb50:	d009      	beq.n	801bb66 <__ieee754_pow+0x9ae>
 801bb52:	ec51 0b18 	vmov	r0, r1, d8
 801bb56:	2200      	movs	r2, #0
 801bb58:	2300      	movs	r3, #0
 801bb5a:	f7e4 ffef 	bl	8000b3c <__aeabi_dcmplt>
 801bb5e:	3800      	subs	r0, #0
 801bb60:	bf18      	it	ne
 801bb62:	2001      	movne	r0, #1
 801bb64:	e448      	b.n	801b3f8 <__ieee754_pow+0x240>
 801bb66:	4622      	mov	r2, r4
 801bb68:	462b      	mov	r3, r5
 801bb6a:	f7e4 fbbd 	bl	80002e8 <__aeabi_dsub>
 801bb6e:	4642      	mov	r2, r8
 801bb70:	464b      	mov	r3, r9
 801bb72:	f7e4 fff7 	bl	8000b64 <__aeabi_dcmpge>
 801bb76:	2800      	cmp	r0, #0
 801bb78:	f43f aef4 	beq.w	801b964 <__ieee754_pow+0x7ac>
 801bb7c:	e7e9      	b.n	801bb52 <__ieee754_pow+0x99a>
 801bb7e:	f04f 0a00 	mov.w	sl, #0
 801bb82:	e71a      	b.n	801b9ba <__ieee754_pow+0x802>
 801bb84:	ec51 0b10 	vmov	r0, r1, d0
 801bb88:	4619      	mov	r1, r3
 801bb8a:	e7d4      	b.n	801bb36 <__ieee754_pow+0x97e>
 801bb8c:	491a      	ldr	r1, [pc, #104]	; (801bbf8 <__ieee754_pow+0xa40>)
 801bb8e:	2000      	movs	r0, #0
 801bb90:	f7ff bb31 	b.w	801b1f6 <__ieee754_pow+0x3e>
 801bb94:	2000      	movs	r0, #0
 801bb96:	2100      	movs	r1, #0
 801bb98:	f7ff bb2d 	b.w	801b1f6 <__ieee754_pow+0x3e>
 801bb9c:	4630      	mov	r0, r6
 801bb9e:	4639      	mov	r1, r7
 801bba0:	f7ff bb29 	b.w	801b1f6 <__ieee754_pow+0x3e>
 801bba4:	9204      	str	r2, [sp, #16]
 801bba6:	f7ff bb7b 	b.w	801b2a0 <__ieee754_pow+0xe8>
 801bbaa:	2300      	movs	r3, #0
 801bbac:	f7ff bb65 	b.w	801b27a <__ieee754_pow+0xc2>
 801bbb0:	00000000 	.word	0x00000000
 801bbb4:	3fe62e43 	.word	0x3fe62e43
 801bbb8:	fefa39ef 	.word	0xfefa39ef
 801bbbc:	3fe62e42 	.word	0x3fe62e42
 801bbc0:	0ca86c39 	.word	0x0ca86c39
 801bbc4:	be205c61 	.word	0xbe205c61
 801bbc8:	72bea4d0 	.word	0x72bea4d0
 801bbcc:	3e663769 	.word	0x3e663769
 801bbd0:	c5d26bf1 	.word	0xc5d26bf1
 801bbd4:	3ebbbd41 	.word	0x3ebbbd41
 801bbd8:	af25de2c 	.word	0xaf25de2c
 801bbdc:	3f11566a 	.word	0x3f11566a
 801bbe0:	16bebd93 	.word	0x16bebd93
 801bbe4:	3f66c16c 	.word	0x3f66c16c
 801bbe8:	5555553e 	.word	0x5555553e
 801bbec:	3fc55555 	.word	0x3fc55555
 801bbf0:	3fe00000 	.word	0x3fe00000
 801bbf4:	fff00000 	.word	0xfff00000
 801bbf8:	3ff00000 	.word	0x3ff00000
 801bbfc:	4090cbff 	.word	0x4090cbff
 801bc00:	3f6f3400 	.word	0x3f6f3400
 801bc04:	652b82fe 	.word	0x652b82fe
 801bc08:	3c971547 	.word	0x3c971547
 801bc0c:	00000000 	.word	0x00000000

0801bc10 <__ieee754_rem_pio2>:
 801bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc14:	ed2d 8b02 	vpush	{d8}
 801bc18:	ec55 4b10 	vmov	r4, r5, d0
 801bc1c:	4bca      	ldr	r3, [pc, #808]	; (801bf48 <__ieee754_rem_pio2+0x338>)
 801bc1e:	b08b      	sub	sp, #44	; 0x2c
 801bc20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801bc24:	4598      	cmp	r8, r3
 801bc26:	4682      	mov	sl, r0
 801bc28:	9502      	str	r5, [sp, #8]
 801bc2a:	dc08      	bgt.n	801bc3e <__ieee754_rem_pio2+0x2e>
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	2300      	movs	r3, #0
 801bc30:	ed80 0b00 	vstr	d0, [r0]
 801bc34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801bc38:	f04f 0b00 	mov.w	fp, #0
 801bc3c:	e028      	b.n	801bc90 <__ieee754_rem_pio2+0x80>
 801bc3e:	4bc3      	ldr	r3, [pc, #780]	; (801bf4c <__ieee754_rem_pio2+0x33c>)
 801bc40:	4598      	cmp	r8, r3
 801bc42:	dc78      	bgt.n	801bd36 <__ieee754_rem_pio2+0x126>
 801bc44:	9b02      	ldr	r3, [sp, #8]
 801bc46:	4ec2      	ldr	r6, [pc, #776]	; (801bf50 <__ieee754_rem_pio2+0x340>)
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	ee10 0a10 	vmov	r0, s0
 801bc4e:	a3b0      	add	r3, pc, #704	; (adr r3, 801bf10 <__ieee754_rem_pio2+0x300>)
 801bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc54:	4629      	mov	r1, r5
 801bc56:	dd39      	ble.n	801bccc <__ieee754_rem_pio2+0xbc>
 801bc58:	f7e4 fb46 	bl	80002e8 <__aeabi_dsub>
 801bc5c:	45b0      	cmp	r8, r6
 801bc5e:	4604      	mov	r4, r0
 801bc60:	460d      	mov	r5, r1
 801bc62:	d01b      	beq.n	801bc9c <__ieee754_rem_pio2+0x8c>
 801bc64:	a3ac      	add	r3, pc, #688	; (adr r3, 801bf18 <__ieee754_rem_pio2+0x308>)
 801bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc6a:	f7e4 fb3d 	bl	80002e8 <__aeabi_dsub>
 801bc6e:	4602      	mov	r2, r0
 801bc70:	460b      	mov	r3, r1
 801bc72:	e9ca 2300 	strd	r2, r3, [sl]
 801bc76:	4620      	mov	r0, r4
 801bc78:	4629      	mov	r1, r5
 801bc7a:	f7e4 fb35 	bl	80002e8 <__aeabi_dsub>
 801bc7e:	a3a6      	add	r3, pc, #664	; (adr r3, 801bf18 <__ieee754_rem_pio2+0x308>)
 801bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc84:	f7e4 fb30 	bl	80002e8 <__aeabi_dsub>
 801bc88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bc8c:	f04f 0b01 	mov.w	fp, #1
 801bc90:	4658      	mov	r0, fp
 801bc92:	b00b      	add	sp, #44	; 0x2c
 801bc94:	ecbd 8b02 	vpop	{d8}
 801bc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc9c:	a3a0      	add	r3, pc, #640	; (adr r3, 801bf20 <__ieee754_rem_pio2+0x310>)
 801bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca2:	f7e4 fb21 	bl	80002e8 <__aeabi_dsub>
 801bca6:	a3a0      	add	r3, pc, #640	; (adr r3, 801bf28 <__ieee754_rem_pio2+0x318>)
 801bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcac:	4604      	mov	r4, r0
 801bcae:	460d      	mov	r5, r1
 801bcb0:	f7e4 fb1a 	bl	80002e8 <__aeabi_dsub>
 801bcb4:	4602      	mov	r2, r0
 801bcb6:	460b      	mov	r3, r1
 801bcb8:	e9ca 2300 	strd	r2, r3, [sl]
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	4629      	mov	r1, r5
 801bcc0:	f7e4 fb12 	bl	80002e8 <__aeabi_dsub>
 801bcc4:	a398      	add	r3, pc, #608	; (adr r3, 801bf28 <__ieee754_rem_pio2+0x318>)
 801bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcca:	e7db      	b.n	801bc84 <__ieee754_rem_pio2+0x74>
 801bccc:	f7e4 fb0e 	bl	80002ec <__adddf3>
 801bcd0:	45b0      	cmp	r8, r6
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	460d      	mov	r5, r1
 801bcd6:	d016      	beq.n	801bd06 <__ieee754_rem_pio2+0xf6>
 801bcd8:	a38f      	add	r3, pc, #572	; (adr r3, 801bf18 <__ieee754_rem_pio2+0x308>)
 801bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcde:	f7e4 fb05 	bl	80002ec <__adddf3>
 801bce2:	4602      	mov	r2, r0
 801bce4:	460b      	mov	r3, r1
 801bce6:	e9ca 2300 	strd	r2, r3, [sl]
 801bcea:	4620      	mov	r0, r4
 801bcec:	4629      	mov	r1, r5
 801bcee:	f7e4 fafb 	bl	80002e8 <__aeabi_dsub>
 801bcf2:	a389      	add	r3, pc, #548	; (adr r3, 801bf18 <__ieee754_rem_pio2+0x308>)
 801bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf8:	f7e4 faf8 	bl	80002ec <__adddf3>
 801bcfc:	f04f 3bff 	mov.w	fp, #4294967295
 801bd00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bd04:	e7c4      	b.n	801bc90 <__ieee754_rem_pio2+0x80>
 801bd06:	a386      	add	r3, pc, #536	; (adr r3, 801bf20 <__ieee754_rem_pio2+0x310>)
 801bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0c:	f7e4 faee 	bl	80002ec <__adddf3>
 801bd10:	a385      	add	r3, pc, #532	; (adr r3, 801bf28 <__ieee754_rem_pio2+0x318>)
 801bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd16:	4604      	mov	r4, r0
 801bd18:	460d      	mov	r5, r1
 801bd1a:	f7e4 fae7 	bl	80002ec <__adddf3>
 801bd1e:	4602      	mov	r2, r0
 801bd20:	460b      	mov	r3, r1
 801bd22:	e9ca 2300 	strd	r2, r3, [sl]
 801bd26:	4620      	mov	r0, r4
 801bd28:	4629      	mov	r1, r5
 801bd2a:	f7e4 fadd 	bl	80002e8 <__aeabi_dsub>
 801bd2e:	a37e      	add	r3, pc, #504	; (adr r3, 801bf28 <__ieee754_rem_pio2+0x318>)
 801bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd34:	e7e0      	b.n	801bcf8 <__ieee754_rem_pio2+0xe8>
 801bd36:	4b87      	ldr	r3, [pc, #540]	; (801bf54 <__ieee754_rem_pio2+0x344>)
 801bd38:	4598      	cmp	r8, r3
 801bd3a:	f300 80d8 	bgt.w	801beee <__ieee754_rem_pio2+0x2de>
 801bd3e:	f000 f96d 	bl	801c01c <fabs>
 801bd42:	ec55 4b10 	vmov	r4, r5, d0
 801bd46:	ee10 0a10 	vmov	r0, s0
 801bd4a:	a379      	add	r3, pc, #484	; (adr r3, 801bf30 <__ieee754_rem_pio2+0x320>)
 801bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd50:	4629      	mov	r1, r5
 801bd52:	f7e4 fc81 	bl	8000658 <__aeabi_dmul>
 801bd56:	4b80      	ldr	r3, [pc, #512]	; (801bf58 <__ieee754_rem_pio2+0x348>)
 801bd58:	2200      	movs	r2, #0
 801bd5a:	f7e4 fac7 	bl	80002ec <__adddf3>
 801bd5e:	f7e4 ff2b 	bl	8000bb8 <__aeabi_d2iz>
 801bd62:	4683      	mov	fp, r0
 801bd64:	f7e4 fc0e 	bl	8000584 <__aeabi_i2d>
 801bd68:	4602      	mov	r2, r0
 801bd6a:	460b      	mov	r3, r1
 801bd6c:	ec43 2b18 	vmov	d8, r2, r3
 801bd70:	a367      	add	r3, pc, #412	; (adr r3, 801bf10 <__ieee754_rem_pio2+0x300>)
 801bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd76:	f7e4 fc6f 	bl	8000658 <__aeabi_dmul>
 801bd7a:	4602      	mov	r2, r0
 801bd7c:	460b      	mov	r3, r1
 801bd7e:	4620      	mov	r0, r4
 801bd80:	4629      	mov	r1, r5
 801bd82:	f7e4 fab1 	bl	80002e8 <__aeabi_dsub>
 801bd86:	a364      	add	r3, pc, #400	; (adr r3, 801bf18 <__ieee754_rem_pio2+0x308>)
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	4606      	mov	r6, r0
 801bd8e:	460f      	mov	r7, r1
 801bd90:	ec51 0b18 	vmov	r0, r1, d8
 801bd94:	f7e4 fc60 	bl	8000658 <__aeabi_dmul>
 801bd98:	f1bb 0f1f 	cmp.w	fp, #31
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	460d      	mov	r5, r1
 801bda0:	dc0d      	bgt.n	801bdbe <__ieee754_rem_pio2+0x1ae>
 801bda2:	4b6e      	ldr	r3, [pc, #440]	; (801bf5c <__ieee754_rem_pio2+0x34c>)
 801bda4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bdac:	4543      	cmp	r3, r8
 801bdae:	d006      	beq.n	801bdbe <__ieee754_rem_pio2+0x1ae>
 801bdb0:	4622      	mov	r2, r4
 801bdb2:	462b      	mov	r3, r5
 801bdb4:	4630      	mov	r0, r6
 801bdb6:	4639      	mov	r1, r7
 801bdb8:	f7e4 fa96 	bl	80002e8 <__aeabi_dsub>
 801bdbc:	e00e      	b.n	801bddc <__ieee754_rem_pio2+0x1cc>
 801bdbe:	462b      	mov	r3, r5
 801bdc0:	4622      	mov	r2, r4
 801bdc2:	4630      	mov	r0, r6
 801bdc4:	4639      	mov	r1, r7
 801bdc6:	f7e4 fa8f 	bl	80002e8 <__aeabi_dsub>
 801bdca:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bdce:	9303      	str	r3, [sp, #12]
 801bdd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801bdd4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801bdd8:	2b10      	cmp	r3, #16
 801bdda:	dc02      	bgt.n	801bde2 <__ieee754_rem_pio2+0x1d2>
 801bddc:	e9ca 0100 	strd	r0, r1, [sl]
 801bde0:	e039      	b.n	801be56 <__ieee754_rem_pio2+0x246>
 801bde2:	a34f      	add	r3, pc, #316	; (adr r3, 801bf20 <__ieee754_rem_pio2+0x310>)
 801bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde8:	ec51 0b18 	vmov	r0, r1, d8
 801bdec:	f7e4 fc34 	bl	8000658 <__aeabi_dmul>
 801bdf0:	4604      	mov	r4, r0
 801bdf2:	460d      	mov	r5, r1
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	460b      	mov	r3, r1
 801bdf8:	4630      	mov	r0, r6
 801bdfa:	4639      	mov	r1, r7
 801bdfc:	f7e4 fa74 	bl	80002e8 <__aeabi_dsub>
 801be00:	4602      	mov	r2, r0
 801be02:	460b      	mov	r3, r1
 801be04:	4680      	mov	r8, r0
 801be06:	4689      	mov	r9, r1
 801be08:	4630      	mov	r0, r6
 801be0a:	4639      	mov	r1, r7
 801be0c:	f7e4 fa6c 	bl	80002e8 <__aeabi_dsub>
 801be10:	4622      	mov	r2, r4
 801be12:	462b      	mov	r3, r5
 801be14:	f7e4 fa68 	bl	80002e8 <__aeabi_dsub>
 801be18:	a343      	add	r3, pc, #268	; (adr r3, 801bf28 <__ieee754_rem_pio2+0x318>)
 801be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be1e:	4604      	mov	r4, r0
 801be20:	460d      	mov	r5, r1
 801be22:	ec51 0b18 	vmov	r0, r1, d8
 801be26:	f7e4 fc17 	bl	8000658 <__aeabi_dmul>
 801be2a:	4622      	mov	r2, r4
 801be2c:	462b      	mov	r3, r5
 801be2e:	f7e4 fa5b 	bl	80002e8 <__aeabi_dsub>
 801be32:	4602      	mov	r2, r0
 801be34:	460b      	mov	r3, r1
 801be36:	4604      	mov	r4, r0
 801be38:	460d      	mov	r5, r1
 801be3a:	4640      	mov	r0, r8
 801be3c:	4649      	mov	r1, r9
 801be3e:	f7e4 fa53 	bl	80002e8 <__aeabi_dsub>
 801be42:	9a03      	ldr	r2, [sp, #12]
 801be44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801be48:	1ad3      	subs	r3, r2, r3
 801be4a:	2b31      	cmp	r3, #49	; 0x31
 801be4c:	dc24      	bgt.n	801be98 <__ieee754_rem_pio2+0x288>
 801be4e:	e9ca 0100 	strd	r0, r1, [sl]
 801be52:	4646      	mov	r6, r8
 801be54:	464f      	mov	r7, r9
 801be56:	e9da 8900 	ldrd	r8, r9, [sl]
 801be5a:	4630      	mov	r0, r6
 801be5c:	4642      	mov	r2, r8
 801be5e:	464b      	mov	r3, r9
 801be60:	4639      	mov	r1, r7
 801be62:	f7e4 fa41 	bl	80002e8 <__aeabi_dsub>
 801be66:	462b      	mov	r3, r5
 801be68:	4622      	mov	r2, r4
 801be6a:	f7e4 fa3d 	bl	80002e8 <__aeabi_dsub>
 801be6e:	9b02      	ldr	r3, [sp, #8]
 801be70:	2b00      	cmp	r3, #0
 801be72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801be76:	f6bf af0b 	bge.w	801bc90 <__ieee754_rem_pio2+0x80>
 801be7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801be7e:	f8ca 3004 	str.w	r3, [sl, #4]
 801be82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be86:	f8ca 8000 	str.w	r8, [sl]
 801be8a:	f8ca 0008 	str.w	r0, [sl, #8]
 801be8e:	f8ca 300c 	str.w	r3, [sl, #12]
 801be92:	f1cb 0b00 	rsb	fp, fp, #0
 801be96:	e6fb      	b.n	801bc90 <__ieee754_rem_pio2+0x80>
 801be98:	a327      	add	r3, pc, #156	; (adr r3, 801bf38 <__ieee754_rem_pio2+0x328>)
 801be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be9e:	ec51 0b18 	vmov	r0, r1, d8
 801bea2:	f7e4 fbd9 	bl	8000658 <__aeabi_dmul>
 801bea6:	4604      	mov	r4, r0
 801bea8:	460d      	mov	r5, r1
 801beaa:	4602      	mov	r2, r0
 801beac:	460b      	mov	r3, r1
 801beae:	4640      	mov	r0, r8
 801beb0:	4649      	mov	r1, r9
 801beb2:	f7e4 fa19 	bl	80002e8 <__aeabi_dsub>
 801beb6:	4602      	mov	r2, r0
 801beb8:	460b      	mov	r3, r1
 801beba:	4606      	mov	r6, r0
 801bebc:	460f      	mov	r7, r1
 801bebe:	4640      	mov	r0, r8
 801bec0:	4649      	mov	r1, r9
 801bec2:	f7e4 fa11 	bl	80002e8 <__aeabi_dsub>
 801bec6:	4622      	mov	r2, r4
 801bec8:	462b      	mov	r3, r5
 801beca:	f7e4 fa0d 	bl	80002e8 <__aeabi_dsub>
 801bece:	a31c      	add	r3, pc, #112	; (adr r3, 801bf40 <__ieee754_rem_pio2+0x330>)
 801bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bed4:	4604      	mov	r4, r0
 801bed6:	460d      	mov	r5, r1
 801bed8:	ec51 0b18 	vmov	r0, r1, d8
 801bedc:	f7e4 fbbc 	bl	8000658 <__aeabi_dmul>
 801bee0:	4622      	mov	r2, r4
 801bee2:	462b      	mov	r3, r5
 801bee4:	f7e4 fa00 	bl	80002e8 <__aeabi_dsub>
 801bee8:	4604      	mov	r4, r0
 801beea:	460d      	mov	r5, r1
 801beec:	e760      	b.n	801bdb0 <__ieee754_rem_pio2+0x1a0>
 801beee:	4b1c      	ldr	r3, [pc, #112]	; (801bf60 <__ieee754_rem_pio2+0x350>)
 801bef0:	4598      	cmp	r8, r3
 801bef2:	dd37      	ble.n	801bf64 <__ieee754_rem_pio2+0x354>
 801bef4:	ee10 2a10 	vmov	r2, s0
 801bef8:	462b      	mov	r3, r5
 801befa:	4620      	mov	r0, r4
 801befc:	4629      	mov	r1, r5
 801befe:	f7e4 f9f3 	bl	80002e8 <__aeabi_dsub>
 801bf02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bf06:	e9ca 0100 	strd	r0, r1, [sl]
 801bf0a:	e695      	b.n	801bc38 <__ieee754_rem_pio2+0x28>
 801bf0c:	f3af 8000 	nop.w
 801bf10:	54400000 	.word	0x54400000
 801bf14:	3ff921fb 	.word	0x3ff921fb
 801bf18:	1a626331 	.word	0x1a626331
 801bf1c:	3dd0b461 	.word	0x3dd0b461
 801bf20:	1a600000 	.word	0x1a600000
 801bf24:	3dd0b461 	.word	0x3dd0b461
 801bf28:	2e037073 	.word	0x2e037073
 801bf2c:	3ba3198a 	.word	0x3ba3198a
 801bf30:	6dc9c883 	.word	0x6dc9c883
 801bf34:	3fe45f30 	.word	0x3fe45f30
 801bf38:	2e000000 	.word	0x2e000000
 801bf3c:	3ba3198a 	.word	0x3ba3198a
 801bf40:	252049c1 	.word	0x252049c1
 801bf44:	397b839a 	.word	0x397b839a
 801bf48:	3fe921fb 	.word	0x3fe921fb
 801bf4c:	4002d97b 	.word	0x4002d97b
 801bf50:	3ff921fb 	.word	0x3ff921fb
 801bf54:	413921fb 	.word	0x413921fb
 801bf58:	3fe00000 	.word	0x3fe00000
 801bf5c:	08029130 	.word	0x08029130
 801bf60:	7fefffff 	.word	0x7fefffff
 801bf64:	ea4f 5628 	mov.w	r6, r8, asr #20
 801bf68:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801bf6c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 801bf70:	4620      	mov	r0, r4
 801bf72:	460d      	mov	r5, r1
 801bf74:	f7e4 fe20 	bl	8000bb8 <__aeabi_d2iz>
 801bf78:	f7e4 fb04 	bl	8000584 <__aeabi_i2d>
 801bf7c:	4602      	mov	r2, r0
 801bf7e:	460b      	mov	r3, r1
 801bf80:	4620      	mov	r0, r4
 801bf82:	4629      	mov	r1, r5
 801bf84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bf88:	f7e4 f9ae 	bl	80002e8 <__aeabi_dsub>
 801bf8c:	4b21      	ldr	r3, [pc, #132]	; (801c014 <__ieee754_rem_pio2+0x404>)
 801bf8e:	2200      	movs	r2, #0
 801bf90:	f7e4 fb62 	bl	8000658 <__aeabi_dmul>
 801bf94:	460d      	mov	r5, r1
 801bf96:	4604      	mov	r4, r0
 801bf98:	f7e4 fe0e 	bl	8000bb8 <__aeabi_d2iz>
 801bf9c:	f7e4 faf2 	bl	8000584 <__aeabi_i2d>
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	460b      	mov	r3, r1
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	4629      	mov	r1, r5
 801bfa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bfac:	f7e4 f99c 	bl	80002e8 <__aeabi_dsub>
 801bfb0:	4b18      	ldr	r3, [pc, #96]	; (801c014 <__ieee754_rem_pio2+0x404>)
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	f7e4 fb50 	bl	8000658 <__aeabi_dmul>
 801bfb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bfbc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801bfc0:	2703      	movs	r7, #3
 801bfc2:	2400      	movs	r4, #0
 801bfc4:	2500      	movs	r5, #0
 801bfc6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801bfca:	4622      	mov	r2, r4
 801bfcc:	462b      	mov	r3, r5
 801bfce:	46b9      	mov	r9, r7
 801bfd0:	3f01      	subs	r7, #1
 801bfd2:	f7e4 fda9 	bl	8000b28 <__aeabi_dcmpeq>
 801bfd6:	2800      	cmp	r0, #0
 801bfd8:	d1f5      	bne.n	801bfc6 <__ieee754_rem_pio2+0x3b6>
 801bfda:	4b0f      	ldr	r3, [pc, #60]	; (801c018 <__ieee754_rem_pio2+0x408>)
 801bfdc:	9301      	str	r3, [sp, #4]
 801bfde:	2302      	movs	r3, #2
 801bfe0:	9300      	str	r3, [sp, #0]
 801bfe2:	4632      	mov	r2, r6
 801bfe4:	464b      	mov	r3, r9
 801bfe6:	4651      	mov	r1, sl
 801bfe8:	a804      	add	r0, sp, #16
 801bfea:	f000 fd29 	bl	801ca40 <__kernel_rem_pio2>
 801bfee:	9b02      	ldr	r3, [sp, #8]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	4683      	mov	fp, r0
 801bff4:	f6bf ae4c 	bge.w	801bc90 <__ieee754_rem_pio2+0x80>
 801bff8:	e9da 2100 	ldrd	r2, r1, [sl]
 801bffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c000:	e9ca 2300 	strd	r2, r3, [sl]
 801c004:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801c008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c00c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801c010:	e73f      	b.n	801be92 <__ieee754_rem_pio2+0x282>
 801c012:	bf00      	nop
 801c014:	41700000 	.word	0x41700000
 801c018:	080291b0 	.word	0x080291b0

0801c01c <fabs>:
 801c01c:	ec51 0b10 	vmov	r0, r1, d0
 801c020:	ee10 2a10 	vmov	r2, s0
 801c024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c028:	ec43 2b10 	vmov	d0, r2, r3
 801c02c:	4770      	bx	lr
	...

0801c030 <__kernel_cosf>:
 801c030:	ee10 3a10 	vmov	r3, s0
 801c034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c038:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c03c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c040:	da05      	bge.n	801c04e <__kernel_cosf+0x1e>
 801c042:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c046:	ee17 2a90 	vmov	r2, s15
 801c04a:	2a00      	cmp	r2, #0
 801c04c:	d03b      	beq.n	801c0c6 <__kernel_cosf+0x96>
 801c04e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c052:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801c0cc <__kernel_cosf+0x9c>
 801c056:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801c0d0 <__kernel_cosf+0xa0>
 801c05a:	4a1e      	ldr	r2, [pc, #120]	; (801c0d4 <__kernel_cosf+0xa4>)
 801c05c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c060:	4293      	cmp	r3, r2
 801c062:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801c0d8 <__kernel_cosf+0xa8>
 801c066:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c06a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801c0dc <__kernel_cosf+0xac>
 801c06e:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c072:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801c0e0 <__kernel_cosf+0xb0>
 801c076:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c07a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801c0e4 <__kernel_cosf+0xb4>
 801c07e:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c082:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801c086:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c08a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c08e:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c092:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c096:	dc04      	bgt.n	801c0a2 <__kernel_cosf+0x72>
 801c098:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c09c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801c0a0:	4770      	bx	lr
 801c0a2:	4a11      	ldr	r2, [pc, #68]	; (801c0e8 <__kernel_cosf+0xb8>)
 801c0a4:	4293      	cmp	r3, r2
 801c0a6:	bfda      	itte	le
 801c0a8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801c0ac:	ee07 3a10 	vmovle	s14, r3
 801c0b0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801c0b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c0b8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801c0bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c0c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c0c4:	4770      	bx	lr
 801c0c6:	eeb0 0a66 	vmov.f32	s0, s13
 801c0ca:	4770      	bx	lr
 801c0cc:	ad47d74e 	.word	0xad47d74e
 801c0d0:	310f74f6 	.word	0x310f74f6
 801c0d4:	3e999999 	.word	0x3e999999
 801c0d8:	b493f27c 	.word	0xb493f27c
 801c0dc:	37d00d01 	.word	0x37d00d01
 801c0e0:	bab60b61 	.word	0xbab60b61
 801c0e4:	3d2aaaab 	.word	0x3d2aaaab
 801c0e8:	3f480000 	.word	0x3f480000

0801c0ec <__kernel_sinf>:
 801c0ec:	ee10 3a10 	vmov	r3, s0
 801c0f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0f4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c0f8:	da04      	bge.n	801c104 <__kernel_sinf+0x18>
 801c0fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c0fe:	ee17 3a90 	vmov	r3, s15
 801c102:	b35b      	cbz	r3, 801c15c <__kernel_sinf+0x70>
 801c104:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c108:	eddf 7a15 	vldr	s15, [pc, #84]	; 801c160 <__kernel_sinf+0x74>
 801c10c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c164 <__kernel_sinf+0x78>
 801c110:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c114:	eddf 7a14 	vldr	s15, [pc, #80]	; 801c168 <__kernel_sinf+0x7c>
 801c118:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c11c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801c16c <__kernel_sinf+0x80>
 801c120:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c124:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c170 <__kernel_sinf+0x84>
 801c128:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c12c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c130:	b930      	cbnz	r0, 801c140 <__kernel_sinf+0x54>
 801c132:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c174 <__kernel_sinf+0x88>
 801c136:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c13a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c13e:	4770      	bx	lr
 801c140:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c144:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c148:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c14c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c150:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c178 <__kernel_sinf+0x8c>
 801c154:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c158:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c15c:	4770      	bx	lr
 801c15e:	bf00      	nop
 801c160:	2f2ec9d3 	.word	0x2f2ec9d3
 801c164:	b2d72f34 	.word	0xb2d72f34
 801c168:	3638ef1b 	.word	0x3638ef1b
 801c16c:	b9500d01 	.word	0xb9500d01
 801c170:	3c088889 	.word	0x3c088889
 801c174:	be2aaaab 	.word	0xbe2aaaab
 801c178:	3e2aaaab 	.word	0x3e2aaaab

0801c17c <__ieee754_expf>:
 801c17c:	ee10 2a10 	vmov	r2, s0
 801c180:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801c184:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c188:	d902      	bls.n	801c190 <__ieee754_expf+0x14>
 801c18a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c18e:	4770      	bx	lr
 801c190:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801c194:	d106      	bne.n	801c1a4 <__ieee754_expf+0x28>
 801c196:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801c2d0 <__ieee754_expf+0x154>
 801c19a:	2900      	cmp	r1, #0
 801c19c:	bf18      	it	ne
 801c19e:	eeb0 0a67 	vmovne.f32	s0, s15
 801c1a2:	4770      	bx	lr
 801c1a4:	484b      	ldr	r0, [pc, #300]	; (801c2d4 <__ieee754_expf+0x158>)
 801c1a6:	4282      	cmp	r2, r0
 801c1a8:	dd02      	ble.n	801c1b0 <__ieee754_expf+0x34>
 801c1aa:	2000      	movs	r0, #0
 801c1ac:	f7fe bac4 	b.w	801a738 <__math_oflowf>
 801c1b0:	2a00      	cmp	r2, #0
 801c1b2:	da05      	bge.n	801c1c0 <__ieee754_expf+0x44>
 801c1b4:	4a48      	ldr	r2, [pc, #288]	; (801c2d8 <__ieee754_expf+0x15c>)
 801c1b6:	4293      	cmp	r3, r2
 801c1b8:	d902      	bls.n	801c1c0 <__ieee754_expf+0x44>
 801c1ba:	2000      	movs	r0, #0
 801c1bc:	f7fe bab6 	b.w	801a72c <__math_uflowf>
 801c1c0:	4a46      	ldr	r2, [pc, #280]	; (801c2dc <__ieee754_expf+0x160>)
 801c1c2:	4293      	cmp	r3, r2
 801c1c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801c1c8:	d952      	bls.n	801c270 <__ieee754_expf+0xf4>
 801c1ca:	4a45      	ldr	r2, [pc, #276]	; (801c2e0 <__ieee754_expf+0x164>)
 801c1cc:	4293      	cmp	r3, r2
 801c1ce:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801c1d2:	d834      	bhi.n	801c23e <__ieee754_expf+0xc2>
 801c1d4:	4b43      	ldr	r3, [pc, #268]	; (801c2e4 <__ieee754_expf+0x168>)
 801c1d6:	4413      	add	r3, r2
 801c1d8:	ed93 7a00 	vldr	s14, [r3]
 801c1dc:	4b42      	ldr	r3, [pc, #264]	; (801c2e8 <__ieee754_expf+0x16c>)
 801c1de:	4413      	add	r3, r2
 801c1e0:	ee30 7a47 	vsub.f32	s14, s0, s14
 801c1e4:	f1c1 0201 	rsb	r2, r1, #1
 801c1e8:	edd3 7a00 	vldr	s15, [r3]
 801c1ec:	1a52      	subs	r2, r2, r1
 801c1ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 801c1f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 801c1f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801c2ec <__ieee754_expf+0x170>
 801c1fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c2f0 <__ieee754_expf+0x174>
 801c1fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 801c202:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801c2f4 <__ieee754_expf+0x178>
 801c206:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c20a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801c2f8 <__ieee754_expf+0x17c>
 801c20e:	eee5 6a06 	vfma.f32	s13, s10, s12
 801c212:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801c2fc <__ieee754_expf+0x180>
 801c216:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c21a:	eef0 6a40 	vmov.f32	s13, s0
 801c21e:	eee5 6a46 	vfms.f32	s13, s10, s12
 801c222:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801c226:	ee20 5a26 	vmul.f32	s10, s0, s13
 801c22a:	bb92      	cbnz	r2, 801c292 <__ieee754_expf+0x116>
 801c22c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801c230:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801c234:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c238:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801c23c:	4770      	bx	lr
 801c23e:	4b30      	ldr	r3, [pc, #192]	; (801c300 <__ieee754_expf+0x184>)
 801c240:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801c304 <__ieee754_expf+0x188>
 801c244:	eddf 6a30 	vldr	s13, [pc, #192]	; 801c308 <__ieee754_expf+0x18c>
 801c248:	4413      	add	r3, r2
 801c24a:	edd3 7a00 	vldr	s15, [r3]
 801c24e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c252:	eeb0 7a40 	vmov.f32	s14, s0
 801c256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c25a:	ee17 2a90 	vmov	r2, s15
 801c25e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c262:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c266:	eddf 6a29 	vldr	s13, [pc, #164]	; 801c30c <__ieee754_expf+0x190>
 801c26a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c26e:	e7be      	b.n	801c1ee <__ieee754_expf+0x72>
 801c270:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 801c274:	d20b      	bcs.n	801c28e <__ieee754_expf+0x112>
 801c276:	eddf 6a26 	vldr	s13, [pc, #152]	; 801c310 <__ieee754_expf+0x194>
 801c27a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801c27e:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c286:	dd02      	ble.n	801c28e <__ieee754_expf+0x112>
 801c288:	ee30 0a25 	vadd.f32	s0, s0, s11
 801c28c:	4770      	bx	lr
 801c28e:	2200      	movs	r2, #0
 801c290:	e7af      	b.n	801c1f2 <__ieee754_expf+0x76>
 801c292:	ee36 6a66 	vsub.f32	s12, s12, s13
 801c296:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801c29a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c29e:	bfb8      	it	lt
 801c2a0:	3264      	addlt	r2, #100	; 0x64
 801c2a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c2a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c2aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c2ae:	ee17 3a90 	vmov	r3, s15
 801c2b2:	bfab      	itete	ge
 801c2b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801c2b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801c2bc:	ee00 3a10 	vmovge	s0, r3
 801c2c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801c314 <__ieee754_expf+0x198>
 801c2c4:	bfbc      	itt	lt
 801c2c6:	ee00 3a10 	vmovlt	s0, r3
 801c2ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801c2ce:	4770      	bx	lr
 801c2d0:	00000000 	.word	0x00000000
 801c2d4:	42b17217 	.word	0x42b17217
 801c2d8:	42cff1b5 	.word	0x42cff1b5
 801c2dc:	3eb17218 	.word	0x3eb17218
 801c2e0:	3f851591 	.word	0x3f851591
 801c2e4:	080292c0 	.word	0x080292c0
 801c2e8:	080292c8 	.word	0x080292c8
 801c2ec:	3331bb4c 	.word	0x3331bb4c
 801c2f0:	b5ddea0e 	.word	0xb5ddea0e
 801c2f4:	388ab355 	.word	0x388ab355
 801c2f8:	bb360b61 	.word	0xbb360b61
 801c2fc:	3e2aaaab 	.word	0x3e2aaaab
 801c300:	080292b8 	.word	0x080292b8
 801c304:	3fb8aa3b 	.word	0x3fb8aa3b
 801c308:	3f317180 	.word	0x3f317180
 801c30c:	3717f7d1 	.word	0x3717f7d1
 801c310:	7149f2ca 	.word	0x7149f2ca
 801c314:	0d800000 	.word	0x0d800000

0801c318 <__ieee754_logf>:
 801c318:	ee10 3a10 	vmov	r3, s0
 801c31c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c320:	d106      	bne.n	801c330 <__ieee754_logf+0x18>
 801c322:	ed9f 7a66 	vldr	s14, [pc, #408]	; 801c4bc <__ieee754_logf+0x1a4>
 801c326:	eddf 7a66 	vldr	s15, [pc, #408]	; 801c4c0 <__ieee754_logf+0x1a8>
 801c32a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c32e:	4770      	bx	lr
 801c330:	2b00      	cmp	r3, #0
 801c332:	da02      	bge.n	801c33a <__ieee754_logf+0x22>
 801c334:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c338:	e7f5      	b.n	801c326 <__ieee754_logf+0xe>
 801c33a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c33e:	db02      	blt.n	801c346 <__ieee754_logf+0x2e>
 801c340:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c344:	4770      	bx	lr
 801c346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c34a:	bfb8      	it	lt
 801c34c:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 801c4c4 <__ieee754_logf+0x1ac>
 801c350:	485d      	ldr	r0, [pc, #372]	; (801c4c8 <__ieee754_logf+0x1b0>)
 801c352:	bfbe      	ittt	lt
 801c354:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c358:	f06f 0118 	mvnlt.w	r1, #24
 801c35c:	ee17 3a90 	vmovlt	r3, s15
 801c360:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801c364:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801c368:	4418      	add	r0, r3
 801c36a:	bfa8      	it	ge
 801c36c:	2100      	movge	r1, #0
 801c36e:	3a7f      	subs	r2, #127	; 0x7f
 801c370:	440a      	add	r2, r1
 801c372:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801c376:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801c37a:	4319      	orrs	r1, r3
 801c37c:	ee00 1a10 	vmov	s0, r1
 801c380:	4952      	ldr	r1, [pc, #328]	; (801c4cc <__ieee754_logf+0x1b4>)
 801c382:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801c386:	f103 000f 	add.w	r0, r3, #15
 801c38a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c38e:	4001      	ands	r1, r0
 801c390:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c394:	bb89      	cbnz	r1, 801c3fa <__ieee754_logf+0xe2>
 801c396:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801c39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c39e:	d10f      	bne.n	801c3c0 <__ieee754_logf+0xa8>
 801c3a0:	2a00      	cmp	r2, #0
 801c3a2:	f000 8087 	beq.w	801c4b4 <__ieee754_logf+0x19c>
 801c3a6:	ee07 2a90 	vmov	s15, r2
 801c3aa:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801c4d0 <__ieee754_logf+0x1b8>
 801c3ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801c4d4 <__ieee754_logf+0x1bc>
 801c3b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c3ba:	eea7 0a87 	vfma.f32	s0, s15, s14
 801c3be:	4770      	bx	lr
 801c3c0:	eddf 6a45 	vldr	s13, [pc, #276]	; 801c4d8 <__ieee754_logf+0x1c0>
 801c3c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c3c8:	eee0 7a66 	vfms.f32	s15, s0, s13
 801c3cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c3d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c3d4:	b912      	cbnz	r2, 801c3dc <__ieee754_logf+0xc4>
 801c3d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c3da:	4770      	bx	lr
 801c3dc:	ee07 2a90 	vmov	s15, r2
 801c3e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801c4d0 <__ieee754_logf+0x1b8>
 801c3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3e8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c3ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 801c3f0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c4d4 <__ieee754_logf+0x1bc>
 801c3f4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801c3f8:	4770      	bx	lr
 801c3fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801c3fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c402:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c4dc <__ieee754_logf+0x1c4>
 801c406:	eddf 4a36 	vldr	s9, [pc, #216]	; 801c4e0 <__ieee754_logf+0x1c8>
 801c40a:	4936      	ldr	r1, [pc, #216]	; (801c4e4 <__ieee754_logf+0x1cc>)
 801c40c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801c410:	4419      	add	r1, r3
 801c412:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801c416:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801c41a:	430b      	orrs	r3, r1
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	ee07 2a90 	vmov	s15, r2
 801c422:	ee26 5a06 	vmul.f32	s10, s12, s12
 801c426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c42a:	ee25 7a05 	vmul.f32	s14, s10, s10
 801c42e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801c4e8 <__ieee754_logf+0x1d0>
 801c432:	eee7 7a25 	vfma.f32	s15, s14, s11
 801c436:	eddf 5a2d 	vldr	s11, [pc, #180]	; 801c4ec <__ieee754_logf+0x1d4>
 801c43a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c43e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801c4f0 <__ieee754_logf+0x1d8>
 801c442:	eee7 7a24 	vfma.f32	s15, s14, s9
 801c446:	eddf 4a2b 	vldr	s9, [pc, #172]	; 801c4f4 <__ieee754_logf+0x1dc>
 801c44a:	eee7 4a87 	vfma.f32	s9, s15, s14
 801c44e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801c4f8 <__ieee754_logf+0x1e0>
 801c452:	eee4 7a87 	vfma.f32	s15, s9, s14
 801c456:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c45a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801c45e:	dd1a      	ble.n	801c496 <__ieee754_logf+0x17e>
 801c460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c464:	ee20 7a07 	vmul.f32	s14, s0, s14
 801c468:	ee27 7a00 	vmul.f32	s14, s14, s0
 801c46c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c470:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c474:	b912      	cbnz	r2, 801c47c <__ieee754_logf+0x164>
 801c476:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c47a:	e7ac      	b.n	801c3d6 <__ieee754_logf+0xbe>
 801c47c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 801c4d0 <__ieee754_logf+0x1b8>
 801c480:	eee6 7a86 	vfma.f32	s15, s13, s12
 801c484:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c488:	ee37 0a40 	vsub.f32	s0, s14, s0
 801c48c:	eddf 7a11 	vldr	s15, [pc, #68]	; 801c4d4 <__ieee754_logf+0x1bc>
 801c490:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801c494:	4770      	bx	lr
 801c496:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c49a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c49e:	b912      	cbnz	r2, 801c4a6 <__ieee754_logf+0x18e>
 801c4a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c4a4:	4770      	bx	lr
 801c4a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801c4d0 <__ieee754_logf+0x1b8>
 801c4aa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801c4ae:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c4b2:	e7eb      	b.n	801c48c <__ieee754_logf+0x174>
 801c4b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801c4c0 <__ieee754_logf+0x1a8>
 801c4b8:	4770      	bx	lr
 801c4ba:	bf00      	nop
 801c4bc:	cc000000 	.word	0xcc000000
 801c4c0:	00000000 	.word	0x00000000
 801c4c4:	4c000000 	.word	0x4c000000
 801c4c8:	004afb20 	.word	0x004afb20
 801c4cc:	007ffff0 	.word	0x007ffff0
 801c4d0:	3717f7d1 	.word	0x3717f7d1
 801c4d4:	3f317180 	.word	0x3f317180
 801c4d8:	3eaaaaab 	.word	0x3eaaaaab
 801c4dc:	3e1cd04f 	.word	0x3e1cd04f
 801c4e0:	3e178897 	.word	0x3e178897
 801c4e4:	ffcf5c30 	.word	0xffcf5c30
 801c4e8:	3e638e29 	.word	0x3e638e29
 801c4ec:	3ecccccd 	.word	0x3ecccccd
 801c4f0:	3e3a3325 	.word	0x3e3a3325
 801c4f4:	3e924925 	.word	0x3e924925
 801c4f8:	3f2aaaab 	.word	0x3f2aaaab

0801c4fc <__ieee754_log10f>:
 801c4fc:	b508      	push	{r3, lr}
 801c4fe:	ee10 2a10 	vmov	r2, s0
 801c502:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801c506:	ed2d 8b02 	vpush	{d8}
 801c50a:	d108      	bne.n	801c51e <__ieee754_log10f+0x22>
 801c50c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801c594 <__ieee754_log10f+0x98>
 801c510:	eddf 7a21 	vldr	s15, [pc, #132]	; 801c598 <__ieee754_log10f+0x9c>
 801c514:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801c518:	ecbd 8b02 	vpop	{d8}
 801c51c:	bd08      	pop	{r3, pc}
 801c51e:	2a00      	cmp	r2, #0
 801c520:	da02      	bge.n	801c528 <__ieee754_log10f+0x2c>
 801c522:	ee30 7a40 	vsub.f32	s14, s0, s0
 801c526:	e7f3      	b.n	801c510 <__ieee754_log10f+0x14>
 801c528:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c52c:	db02      	blt.n	801c534 <__ieee754_log10f+0x38>
 801c52e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c532:	e7f1      	b.n	801c518 <__ieee754_log10f+0x1c>
 801c534:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801c538:	bfbf      	itttt	lt
 801c53a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801c59c <__ieee754_log10f+0xa0>
 801c53e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c542:	f06f 0118 	mvnlt.w	r1, #24
 801c546:	ee17 2a90 	vmovlt	r2, s15
 801c54a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801c54e:	bfa8      	it	ge
 801c550:	2100      	movge	r1, #0
 801c552:	3b7f      	subs	r3, #127	; 0x7f
 801c554:	440b      	add	r3, r1
 801c556:	0fd9      	lsrs	r1, r3, #31
 801c558:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c55c:	ee07 3a90 	vmov	s15, r3
 801c560:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801c564:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 801c568:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801c56c:	ee00 3a10 	vmov	s0, r3
 801c570:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801c574:	f7ff fed0 	bl	801c318 <__ieee754_logf>
 801c578:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c5a0 <__ieee754_log10f+0xa4>
 801c57c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c580:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c5a4 <__ieee754_log10f+0xa8>
 801c584:	eea8 0a27 	vfma.f32	s0, s16, s15
 801c588:	eddf 7a07 	vldr	s15, [pc, #28]	; 801c5a8 <__ieee754_log10f+0xac>
 801c58c:	eea8 0a27 	vfma.f32	s0, s16, s15
 801c590:	e7c2      	b.n	801c518 <__ieee754_log10f+0x1c>
 801c592:	bf00      	nop
 801c594:	cc000000 	.word	0xcc000000
 801c598:	00000000 	.word	0x00000000
 801c59c:	4c000000 	.word	0x4c000000
 801c5a0:	3ede5bd9 	.word	0x3ede5bd9
 801c5a4:	355427db 	.word	0x355427db
 801c5a8:	3e9a2080 	.word	0x3e9a2080

0801c5ac <__ieee754_rem_pio2f>:
 801c5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5ae:	ee10 6a10 	vmov	r6, s0
 801c5b2:	4b86      	ldr	r3, [pc, #536]	; (801c7cc <__ieee754_rem_pio2f+0x220>)
 801c5b4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801c5b8:	429d      	cmp	r5, r3
 801c5ba:	b087      	sub	sp, #28
 801c5bc:	4604      	mov	r4, r0
 801c5be:	dc05      	bgt.n	801c5cc <__ieee754_rem_pio2f+0x20>
 801c5c0:	2300      	movs	r3, #0
 801c5c2:	ed80 0a00 	vstr	s0, [r0]
 801c5c6:	6043      	str	r3, [r0, #4]
 801c5c8:	2000      	movs	r0, #0
 801c5ca:	e020      	b.n	801c60e <__ieee754_rem_pio2f+0x62>
 801c5cc:	4b80      	ldr	r3, [pc, #512]	; (801c7d0 <__ieee754_rem_pio2f+0x224>)
 801c5ce:	429d      	cmp	r5, r3
 801c5d0:	dc38      	bgt.n	801c644 <__ieee754_rem_pio2f+0x98>
 801c5d2:	2e00      	cmp	r6, #0
 801c5d4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801c7d4 <__ieee754_rem_pio2f+0x228>
 801c5d8:	4b7f      	ldr	r3, [pc, #508]	; (801c7d8 <__ieee754_rem_pio2f+0x22c>)
 801c5da:	f025 050f 	bic.w	r5, r5, #15
 801c5de:	dd18      	ble.n	801c612 <__ieee754_rem_pio2f+0x66>
 801c5e0:	429d      	cmp	r5, r3
 801c5e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801c5e6:	bf09      	itett	eq
 801c5e8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801c7dc <__ieee754_rem_pio2f+0x230>
 801c5ec:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801c7e0 <__ieee754_rem_pio2f+0x234>
 801c5f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801c5f4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801c7e4 <__ieee754_rem_pio2f+0x238>
 801c5f8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801c5fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c600:	edc0 6a00 	vstr	s13, [r0]
 801c604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c608:	edc0 7a01 	vstr	s15, [r0, #4]
 801c60c:	2001      	movs	r0, #1
 801c60e:	b007      	add	sp, #28
 801c610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c612:	429d      	cmp	r5, r3
 801c614:	ee70 7a07 	vadd.f32	s15, s0, s14
 801c618:	bf09      	itett	eq
 801c61a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801c7dc <__ieee754_rem_pio2f+0x230>
 801c61e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801c7e0 <__ieee754_rem_pio2f+0x234>
 801c622:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801c626:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801c7e4 <__ieee754_rem_pio2f+0x238>
 801c62a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801c62e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c632:	edc0 6a00 	vstr	s13, [r0]
 801c636:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c63a:	edc0 7a01 	vstr	s15, [r0, #4]
 801c63e:	f04f 30ff 	mov.w	r0, #4294967295
 801c642:	e7e4      	b.n	801c60e <__ieee754_rem_pio2f+0x62>
 801c644:	4b68      	ldr	r3, [pc, #416]	; (801c7e8 <__ieee754_rem_pio2f+0x23c>)
 801c646:	429d      	cmp	r5, r3
 801c648:	dc71      	bgt.n	801c72e <__ieee754_rem_pio2f+0x182>
 801c64a:	f000 f8db 	bl	801c804 <fabsf>
 801c64e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801c7ec <__ieee754_rem_pio2f+0x240>
 801c652:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c656:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c662:	ee17 0a90 	vmov	r0, s15
 801c666:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801c7d4 <__ieee754_rem_pio2f+0x228>
 801c66a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801c66e:	281f      	cmp	r0, #31
 801c670:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801c7e0 <__ieee754_rem_pio2f+0x234>
 801c674:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c678:	eeb1 6a47 	vneg.f32	s12, s14
 801c67c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801c680:	ee16 2a90 	vmov	r2, s13
 801c684:	dc1c      	bgt.n	801c6c0 <__ieee754_rem_pio2f+0x114>
 801c686:	495a      	ldr	r1, [pc, #360]	; (801c7f0 <__ieee754_rem_pio2f+0x244>)
 801c688:	1e47      	subs	r7, r0, #1
 801c68a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801c68e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801c692:	428b      	cmp	r3, r1
 801c694:	d014      	beq.n	801c6c0 <__ieee754_rem_pio2f+0x114>
 801c696:	6022      	str	r2, [r4, #0]
 801c698:	ed94 7a00 	vldr	s14, [r4]
 801c69c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c6a0:	2e00      	cmp	r6, #0
 801c6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c6a6:	ed84 0a01 	vstr	s0, [r4, #4]
 801c6aa:	dab0      	bge.n	801c60e <__ieee754_rem_pio2f+0x62>
 801c6ac:	eeb1 7a47 	vneg.f32	s14, s14
 801c6b0:	eeb1 0a40 	vneg.f32	s0, s0
 801c6b4:	ed84 7a00 	vstr	s14, [r4]
 801c6b8:	ed84 0a01 	vstr	s0, [r4, #4]
 801c6bc:	4240      	negs	r0, r0
 801c6be:	e7a6      	b.n	801c60e <__ieee754_rem_pio2f+0x62>
 801c6c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c6c4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801c6c8:	2908      	cmp	r1, #8
 801c6ca:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801c6ce:	dde2      	ble.n	801c696 <__ieee754_rem_pio2f+0xea>
 801c6d0:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c7dc <__ieee754_rem_pio2f+0x230>
 801c6d4:	eef0 6a40 	vmov.f32	s13, s0
 801c6d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801c6dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 801c6e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c6e4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c7e4 <__ieee754_rem_pio2f+0x238>
 801c6e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801c6ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801c6f0:	ee15 2a90 	vmov	r2, s11
 801c6f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801c6f8:	1a5b      	subs	r3, r3, r1
 801c6fa:	2b19      	cmp	r3, #25
 801c6fc:	dc04      	bgt.n	801c708 <__ieee754_rem_pio2f+0x15c>
 801c6fe:	edc4 5a00 	vstr	s11, [r4]
 801c702:	eeb0 0a66 	vmov.f32	s0, s13
 801c706:	e7c7      	b.n	801c698 <__ieee754_rem_pio2f+0xec>
 801c708:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801c7f4 <__ieee754_rem_pio2f+0x248>
 801c70c:	eeb0 0a66 	vmov.f32	s0, s13
 801c710:	eea6 0a25 	vfma.f32	s0, s12, s11
 801c714:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801c718:	eddf 6a37 	vldr	s13, [pc, #220]	; 801c7f8 <__ieee754_rem_pio2f+0x24c>
 801c71c:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c720:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801c724:	ee30 7a67 	vsub.f32	s14, s0, s15
 801c728:	ed84 7a00 	vstr	s14, [r4]
 801c72c:	e7b4      	b.n	801c698 <__ieee754_rem_pio2f+0xec>
 801c72e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801c732:	db06      	blt.n	801c742 <__ieee754_rem_pio2f+0x196>
 801c734:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c738:	edc0 7a01 	vstr	s15, [r0, #4]
 801c73c:	edc0 7a00 	vstr	s15, [r0]
 801c740:	e742      	b.n	801c5c8 <__ieee754_rem_pio2f+0x1c>
 801c742:	15ea      	asrs	r2, r5, #23
 801c744:	3a86      	subs	r2, #134	; 0x86
 801c746:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801c74a:	ee07 3a90 	vmov	s15, r3
 801c74e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c752:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801c7fc <__ieee754_rem_pio2f+0x250>
 801c756:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c75e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801c762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c766:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801c76a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c76e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c772:	ed8d 7a04 	vstr	s14, [sp, #16]
 801c776:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c77a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c782:	edcd 7a05 	vstr	s15, [sp, #20]
 801c786:	d11e      	bne.n	801c7c6 <__ieee754_rem_pio2f+0x21a>
 801c788:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801c78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c790:	bf14      	ite	ne
 801c792:	2302      	movne	r3, #2
 801c794:	2301      	moveq	r3, #1
 801c796:	491a      	ldr	r1, [pc, #104]	; (801c800 <__ieee754_rem_pio2f+0x254>)
 801c798:	9101      	str	r1, [sp, #4]
 801c79a:	2102      	movs	r1, #2
 801c79c:	9100      	str	r1, [sp, #0]
 801c79e:	a803      	add	r0, sp, #12
 801c7a0:	4621      	mov	r1, r4
 801c7a2:	f000 fc9b 	bl	801d0dc <__kernel_rem_pio2f>
 801c7a6:	2e00      	cmp	r6, #0
 801c7a8:	f6bf af31 	bge.w	801c60e <__ieee754_rem_pio2f+0x62>
 801c7ac:	edd4 7a00 	vldr	s15, [r4]
 801c7b0:	eef1 7a67 	vneg.f32	s15, s15
 801c7b4:	edc4 7a00 	vstr	s15, [r4]
 801c7b8:	edd4 7a01 	vldr	s15, [r4, #4]
 801c7bc:	eef1 7a67 	vneg.f32	s15, s15
 801c7c0:	edc4 7a01 	vstr	s15, [r4, #4]
 801c7c4:	e77a      	b.n	801c6bc <__ieee754_rem_pio2f+0x110>
 801c7c6:	2303      	movs	r3, #3
 801c7c8:	e7e5      	b.n	801c796 <__ieee754_rem_pio2f+0x1ea>
 801c7ca:	bf00      	nop
 801c7cc:	3f490fd8 	.word	0x3f490fd8
 801c7d0:	4016cbe3 	.word	0x4016cbe3
 801c7d4:	3fc90f80 	.word	0x3fc90f80
 801c7d8:	3fc90fd0 	.word	0x3fc90fd0
 801c7dc:	37354400 	.word	0x37354400
 801c7e0:	37354443 	.word	0x37354443
 801c7e4:	2e85a308 	.word	0x2e85a308
 801c7e8:	43490f80 	.word	0x43490f80
 801c7ec:	3f22f984 	.word	0x3f22f984
 801c7f0:	080292d0 	.word	0x080292d0
 801c7f4:	2e85a300 	.word	0x2e85a300
 801c7f8:	248d3132 	.word	0x248d3132
 801c7fc:	43800000 	.word	0x43800000
 801c800:	08029350 	.word	0x08029350

0801c804 <fabsf>:
 801c804:	ee10 3a10 	vmov	r3, s0
 801c808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c80c:	ee00 3a10 	vmov	s0, r3
 801c810:	4770      	bx	lr
 801c812:	0000      	movs	r0, r0
 801c814:	0000      	movs	r0, r0
	...

0801c818 <scalbn>:
 801c818:	b570      	push	{r4, r5, r6, lr}
 801c81a:	ec55 4b10 	vmov	r4, r5, d0
 801c81e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c822:	4606      	mov	r6, r0
 801c824:	462b      	mov	r3, r5
 801c826:	b999      	cbnz	r1, 801c850 <scalbn+0x38>
 801c828:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c82c:	4323      	orrs	r3, r4
 801c82e:	d03f      	beq.n	801c8b0 <scalbn+0x98>
 801c830:	4b35      	ldr	r3, [pc, #212]	; (801c908 <scalbn+0xf0>)
 801c832:	4629      	mov	r1, r5
 801c834:	ee10 0a10 	vmov	r0, s0
 801c838:	2200      	movs	r2, #0
 801c83a:	f7e3 ff0d 	bl	8000658 <__aeabi_dmul>
 801c83e:	4b33      	ldr	r3, [pc, #204]	; (801c90c <scalbn+0xf4>)
 801c840:	429e      	cmp	r6, r3
 801c842:	4604      	mov	r4, r0
 801c844:	460d      	mov	r5, r1
 801c846:	da10      	bge.n	801c86a <scalbn+0x52>
 801c848:	a327      	add	r3, pc, #156	; (adr r3, 801c8e8 <scalbn+0xd0>)
 801c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c84e:	e01f      	b.n	801c890 <scalbn+0x78>
 801c850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801c854:	4291      	cmp	r1, r2
 801c856:	d10c      	bne.n	801c872 <scalbn+0x5a>
 801c858:	ee10 2a10 	vmov	r2, s0
 801c85c:	4620      	mov	r0, r4
 801c85e:	4629      	mov	r1, r5
 801c860:	f7e3 fd44 	bl	80002ec <__adddf3>
 801c864:	4604      	mov	r4, r0
 801c866:	460d      	mov	r5, r1
 801c868:	e022      	b.n	801c8b0 <scalbn+0x98>
 801c86a:	460b      	mov	r3, r1
 801c86c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c870:	3936      	subs	r1, #54	; 0x36
 801c872:	f24c 3250 	movw	r2, #50000	; 0xc350
 801c876:	4296      	cmp	r6, r2
 801c878:	dd0d      	ble.n	801c896 <scalbn+0x7e>
 801c87a:	2d00      	cmp	r5, #0
 801c87c:	a11c      	add	r1, pc, #112	; (adr r1, 801c8f0 <scalbn+0xd8>)
 801c87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c882:	da02      	bge.n	801c88a <scalbn+0x72>
 801c884:	a11c      	add	r1, pc, #112	; (adr r1, 801c8f8 <scalbn+0xe0>)
 801c886:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c88a:	a319      	add	r3, pc, #100	; (adr r3, 801c8f0 <scalbn+0xd8>)
 801c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c890:	f7e3 fee2 	bl	8000658 <__aeabi_dmul>
 801c894:	e7e6      	b.n	801c864 <scalbn+0x4c>
 801c896:	1872      	adds	r2, r6, r1
 801c898:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c89c:	428a      	cmp	r2, r1
 801c89e:	dcec      	bgt.n	801c87a <scalbn+0x62>
 801c8a0:	2a00      	cmp	r2, #0
 801c8a2:	dd08      	ble.n	801c8b6 <scalbn+0x9e>
 801c8a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c8a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c8ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c8b0:	ec45 4b10 	vmov	d0, r4, r5
 801c8b4:	bd70      	pop	{r4, r5, r6, pc}
 801c8b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c8ba:	da08      	bge.n	801c8ce <scalbn+0xb6>
 801c8bc:	2d00      	cmp	r5, #0
 801c8be:	a10a      	add	r1, pc, #40	; (adr r1, 801c8e8 <scalbn+0xd0>)
 801c8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8c4:	dac0      	bge.n	801c848 <scalbn+0x30>
 801c8c6:	a10e      	add	r1, pc, #56	; (adr r1, 801c900 <scalbn+0xe8>)
 801c8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8cc:	e7bc      	b.n	801c848 <scalbn+0x30>
 801c8ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c8d2:	3236      	adds	r2, #54	; 0x36
 801c8d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c8d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c8dc:	4620      	mov	r0, r4
 801c8de:	4b0c      	ldr	r3, [pc, #48]	; (801c910 <scalbn+0xf8>)
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	e7d5      	b.n	801c890 <scalbn+0x78>
 801c8e4:	f3af 8000 	nop.w
 801c8e8:	c2f8f359 	.word	0xc2f8f359
 801c8ec:	01a56e1f 	.word	0x01a56e1f
 801c8f0:	8800759c 	.word	0x8800759c
 801c8f4:	7e37e43c 	.word	0x7e37e43c
 801c8f8:	8800759c 	.word	0x8800759c
 801c8fc:	fe37e43c 	.word	0xfe37e43c
 801c900:	c2f8f359 	.word	0xc2f8f359
 801c904:	81a56e1f 	.word	0x81a56e1f
 801c908:	43500000 	.word	0x43500000
 801c90c:	ffff3cb0 	.word	0xffff3cb0
 801c910:	3c900000 	.word	0x3c900000

0801c914 <with_errno>:
 801c914:	b570      	push	{r4, r5, r6, lr}
 801c916:	4604      	mov	r4, r0
 801c918:	460d      	mov	r5, r1
 801c91a:	4616      	mov	r6, r2
 801c91c:	f002 f806 	bl	801e92c <__errno>
 801c920:	4629      	mov	r1, r5
 801c922:	6006      	str	r6, [r0, #0]
 801c924:	4620      	mov	r0, r4
 801c926:	bd70      	pop	{r4, r5, r6, pc}

0801c928 <xflow>:
 801c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c92a:	4614      	mov	r4, r2
 801c92c:	461d      	mov	r5, r3
 801c92e:	b108      	cbz	r0, 801c934 <xflow+0xc>
 801c930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c934:	e9cd 2300 	strd	r2, r3, [sp]
 801c938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c93c:	4620      	mov	r0, r4
 801c93e:	4629      	mov	r1, r5
 801c940:	f7e3 fe8a 	bl	8000658 <__aeabi_dmul>
 801c944:	2222      	movs	r2, #34	; 0x22
 801c946:	b003      	add	sp, #12
 801c948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c94c:	f7ff bfe2 	b.w	801c914 <with_errno>

0801c950 <__math_uflow>:
 801c950:	b508      	push	{r3, lr}
 801c952:	2200      	movs	r2, #0
 801c954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801c958:	f7ff ffe6 	bl	801c928 <xflow>
 801c95c:	ec41 0b10 	vmov	d0, r0, r1
 801c960:	bd08      	pop	{r3, pc}

0801c962 <__math_oflow>:
 801c962:	b508      	push	{r3, lr}
 801c964:	2200      	movs	r2, #0
 801c966:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801c96a:	f7ff ffdd 	bl	801c928 <xflow>
 801c96e:	ec41 0b10 	vmov	d0, r0, r1
 801c972:	bd08      	pop	{r3, pc}

0801c974 <scalbnf>:
 801c974:	ee10 3a10 	vmov	r3, s0
 801c978:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c97c:	d02b      	beq.n	801c9d6 <scalbnf+0x62>
 801c97e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c982:	d302      	bcc.n	801c98a <scalbnf+0x16>
 801c984:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c988:	4770      	bx	lr
 801c98a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c98e:	d123      	bne.n	801c9d8 <scalbnf+0x64>
 801c990:	4b24      	ldr	r3, [pc, #144]	; (801ca24 <scalbnf+0xb0>)
 801c992:	eddf 7a25 	vldr	s15, [pc, #148]	; 801ca28 <scalbnf+0xb4>
 801c996:	4298      	cmp	r0, r3
 801c998:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c99c:	db17      	blt.n	801c9ce <scalbnf+0x5a>
 801c99e:	ee10 3a10 	vmov	r3, s0
 801c9a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c9a6:	3a19      	subs	r2, #25
 801c9a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 801c9ac:	4288      	cmp	r0, r1
 801c9ae:	dd15      	ble.n	801c9dc <scalbnf+0x68>
 801c9b0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801ca2c <scalbnf+0xb8>
 801c9b4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801ca30 <scalbnf+0xbc>
 801c9b8:	ee10 3a10 	vmov	r3, s0
 801c9bc:	eeb0 7a67 	vmov.f32	s14, s15
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	bfb8      	it	lt
 801c9c4:	eef0 7a66 	vmovlt.f32	s15, s13
 801c9c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801c9cc:	4770      	bx	lr
 801c9ce:	eddf 7a19 	vldr	s15, [pc, #100]	; 801ca34 <scalbnf+0xc0>
 801c9d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801c9d6:	4770      	bx	lr
 801c9d8:	0dd2      	lsrs	r2, r2, #23
 801c9da:	e7e5      	b.n	801c9a8 <scalbnf+0x34>
 801c9dc:	4410      	add	r0, r2
 801c9de:	28fe      	cmp	r0, #254	; 0xfe
 801c9e0:	dce6      	bgt.n	801c9b0 <scalbnf+0x3c>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	dd06      	ble.n	801c9f4 <scalbnf+0x80>
 801c9e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c9ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801c9ee:	ee00 3a10 	vmov	s0, r3
 801c9f2:	4770      	bx	lr
 801c9f4:	f110 0f16 	cmn.w	r0, #22
 801c9f8:	da09      	bge.n	801ca0e <scalbnf+0x9a>
 801c9fa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ca34 <scalbnf+0xc0>
 801c9fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801ca38 <scalbnf+0xc4>
 801ca02:	ee10 3a10 	vmov	r3, s0
 801ca06:	eeb0 7a67 	vmov.f32	s14, s15
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	e7d9      	b.n	801c9c2 <scalbnf+0x4e>
 801ca0e:	3019      	adds	r0, #25
 801ca10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ca14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ca18:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801ca3c <scalbnf+0xc8>
 801ca1c:	ee07 3a90 	vmov	s15, r3
 801ca20:	e7d7      	b.n	801c9d2 <scalbnf+0x5e>
 801ca22:	bf00      	nop
 801ca24:	ffff3cb0 	.word	0xffff3cb0
 801ca28:	4c000000 	.word	0x4c000000
 801ca2c:	7149f2ca 	.word	0x7149f2ca
 801ca30:	f149f2ca 	.word	0xf149f2ca
 801ca34:	0da24260 	.word	0x0da24260
 801ca38:	8da24260 	.word	0x8da24260
 801ca3c:	33000000 	.word	0x33000000

0801ca40 <__kernel_rem_pio2>:
 801ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca44:	ed2d 8b02 	vpush	{d8}
 801ca48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801ca4c:	f112 0f14 	cmn.w	r2, #20
 801ca50:	9306      	str	r3, [sp, #24]
 801ca52:	9104      	str	r1, [sp, #16]
 801ca54:	4bc2      	ldr	r3, [pc, #776]	; (801cd60 <__kernel_rem_pio2+0x320>)
 801ca56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801ca58:	9009      	str	r0, [sp, #36]	; 0x24
 801ca5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ca5e:	9300      	str	r3, [sp, #0]
 801ca60:	9b06      	ldr	r3, [sp, #24]
 801ca62:	f103 33ff 	add.w	r3, r3, #4294967295
 801ca66:	bfa8      	it	ge
 801ca68:	1ed4      	subge	r4, r2, #3
 801ca6a:	9305      	str	r3, [sp, #20]
 801ca6c:	bfb2      	itee	lt
 801ca6e:	2400      	movlt	r4, #0
 801ca70:	2318      	movge	r3, #24
 801ca72:	fb94 f4f3 	sdivge	r4, r4, r3
 801ca76:	f06f 0317 	mvn.w	r3, #23
 801ca7a:	fb04 3303 	mla	r3, r4, r3, r3
 801ca7e:	eb03 0a02 	add.w	sl, r3, r2
 801ca82:	9b00      	ldr	r3, [sp, #0]
 801ca84:	9a05      	ldr	r2, [sp, #20]
 801ca86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801cd50 <__kernel_rem_pio2+0x310>
 801ca8a:	eb03 0802 	add.w	r8, r3, r2
 801ca8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801ca90:	1aa7      	subs	r7, r4, r2
 801ca92:	ae20      	add	r6, sp, #128	; 0x80
 801ca94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ca98:	2500      	movs	r5, #0
 801ca9a:	4545      	cmp	r5, r8
 801ca9c:	dd13      	ble.n	801cac6 <__kernel_rem_pio2+0x86>
 801ca9e:	9b06      	ldr	r3, [sp, #24]
 801caa0:	aa20      	add	r2, sp, #128	; 0x80
 801caa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801caa6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801caaa:	f04f 0800 	mov.w	r8, #0
 801caae:	9b00      	ldr	r3, [sp, #0]
 801cab0:	4598      	cmp	r8, r3
 801cab2:	dc31      	bgt.n	801cb18 <__kernel_rem_pio2+0xd8>
 801cab4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801cd50 <__kernel_rem_pio2+0x310>
 801cab8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cabc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cac0:	462f      	mov	r7, r5
 801cac2:	2600      	movs	r6, #0
 801cac4:	e01b      	b.n	801cafe <__kernel_rem_pio2+0xbe>
 801cac6:	42ef      	cmn	r7, r5
 801cac8:	d407      	bmi.n	801cada <__kernel_rem_pio2+0x9a>
 801caca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801cace:	f7e3 fd59 	bl	8000584 <__aeabi_i2d>
 801cad2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801cad6:	3501      	adds	r5, #1
 801cad8:	e7df      	b.n	801ca9a <__kernel_rem_pio2+0x5a>
 801cada:	ec51 0b18 	vmov	r0, r1, d8
 801cade:	e7f8      	b.n	801cad2 <__kernel_rem_pio2+0x92>
 801cae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cae4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801cae8:	f7e3 fdb6 	bl	8000658 <__aeabi_dmul>
 801caec:	4602      	mov	r2, r0
 801caee:	460b      	mov	r3, r1
 801caf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801caf4:	f7e3 fbfa 	bl	80002ec <__adddf3>
 801caf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cafc:	3601      	adds	r6, #1
 801cafe:	9b05      	ldr	r3, [sp, #20]
 801cb00:	429e      	cmp	r6, r3
 801cb02:	f1a7 0708 	sub.w	r7, r7, #8
 801cb06:	ddeb      	ble.n	801cae0 <__kernel_rem_pio2+0xa0>
 801cb08:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cb0c:	f108 0801 	add.w	r8, r8, #1
 801cb10:	ecab 7b02 	vstmia	fp!, {d7}
 801cb14:	3508      	adds	r5, #8
 801cb16:	e7ca      	b.n	801caae <__kernel_rem_pio2+0x6e>
 801cb18:	9b00      	ldr	r3, [sp, #0]
 801cb1a:	aa0c      	add	r2, sp, #48	; 0x30
 801cb1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cb20:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb22:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801cb24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cb28:	9c00      	ldr	r4, [sp, #0]
 801cb2a:	930a      	str	r3, [sp, #40]	; 0x28
 801cb2c:	00e3      	lsls	r3, r4, #3
 801cb2e:	9308      	str	r3, [sp, #32]
 801cb30:	ab98      	add	r3, sp, #608	; 0x260
 801cb32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cb36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801cb3a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801cb3e:	ab70      	add	r3, sp, #448	; 0x1c0
 801cb40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801cb44:	46c3      	mov	fp, r8
 801cb46:	46a1      	mov	r9, r4
 801cb48:	f1b9 0f00 	cmp.w	r9, #0
 801cb4c:	f1a5 0508 	sub.w	r5, r5, #8
 801cb50:	dc77      	bgt.n	801cc42 <__kernel_rem_pio2+0x202>
 801cb52:	ec47 6b10 	vmov	d0, r6, r7
 801cb56:	4650      	mov	r0, sl
 801cb58:	f7ff fe5e 	bl	801c818 <scalbn>
 801cb5c:	ec57 6b10 	vmov	r6, r7, d0
 801cb60:	2200      	movs	r2, #0
 801cb62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801cb66:	ee10 0a10 	vmov	r0, s0
 801cb6a:	4639      	mov	r1, r7
 801cb6c:	f7e3 fd74 	bl	8000658 <__aeabi_dmul>
 801cb70:	ec41 0b10 	vmov	d0, r0, r1
 801cb74:	f7fd fec4 	bl	801a900 <floor>
 801cb78:	4b7a      	ldr	r3, [pc, #488]	; (801cd64 <__kernel_rem_pio2+0x324>)
 801cb7a:	ec51 0b10 	vmov	r0, r1, d0
 801cb7e:	2200      	movs	r2, #0
 801cb80:	f7e3 fd6a 	bl	8000658 <__aeabi_dmul>
 801cb84:	4602      	mov	r2, r0
 801cb86:	460b      	mov	r3, r1
 801cb88:	4630      	mov	r0, r6
 801cb8a:	4639      	mov	r1, r7
 801cb8c:	f7e3 fbac 	bl	80002e8 <__aeabi_dsub>
 801cb90:	460f      	mov	r7, r1
 801cb92:	4606      	mov	r6, r0
 801cb94:	f7e4 f810 	bl	8000bb8 <__aeabi_d2iz>
 801cb98:	9002      	str	r0, [sp, #8]
 801cb9a:	f7e3 fcf3 	bl	8000584 <__aeabi_i2d>
 801cb9e:	4602      	mov	r2, r0
 801cba0:	460b      	mov	r3, r1
 801cba2:	4630      	mov	r0, r6
 801cba4:	4639      	mov	r1, r7
 801cba6:	f7e3 fb9f 	bl	80002e8 <__aeabi_dsub>
 801cbaa:	f1ba 0f00 	cmp.w	sl, #0
 801cbae:	4606      	mov	r6, r0
 801cbb0:	460f      	mov	r7, r1
 801cbb2:	dd6d      	ble.n	801cc90 <__kernel_rem_pio2+0x250>
 801cbb4:	1e61      	subs	r1, r4, #1
 801cbb6:	ab0c      	add	r3, sp, #48	; 0x30
 801cbb8:	9d02      	ldr	r5, [sp, #8]
 801cbba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbbe:	f1ca 0018 	rsb	r0, sl, #24
 801cbc2:	fa43 f200 	asr.w	r2, r3, r0
 801cbc6:	4415      	add	r5, r2
 801cbc8:	4082      	lsls	r2, r0
 801cbca:	1a9b      	subs	r3, r3, r2
 801cbcc:	aa0c      	add	r2, sp, #48	; 0x30
 801cbce:	9502      	str	r5, [sp, #8]
 801cbd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cbd4:	f1ca 0217 	rsb	r2, sl, #23
 801cbd8:	fa43 fb02 	asr.w	fp, r3, r2
 801cbdc:	f1bb 0f00 	cmp.w	fp, #0
 801cbe0:	dd65      	ble.n	801ccae <__kernel_rem_pio2+0x26e>
 801cbe2:	9b02      	ldr	r3, [sp, #8]
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	3301      	adds	r3, #1
 801cbe8:	9302      	str	r3, [sp, #8]
 801cbea:	4615      	mov	r5, r2
 801cbec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801cbf0:	4294      	cmp	r4, r2
 801cbf2:	f300 809f 	bgt.w	801cd34 <__kernel_rem_pio2+0x2f4>
 801cbf6:	f1ba 0f00 	cmp.w	sl, #0
 801cbfa:	dd07      	ble.n	801cc0c <__kernel_rem_pio2+0x1cc>
 801cbfc:	f1ba 0f01 	cmp.w	sl, #1
 801cc00:	f000 80c1 	beq.w	801cd86 <__kernel_rem_pio2+0x346>
 801cc04:	f1ba 0f02 	cmp.w	sl, #2
 801cc08:	f000 80c7 	beq.w	801cd9a <__kernel_rem_pio2+0x35a>
 801cc0c:	f1bb 0f02 	cmp.w	fp, #2
 801cc10:	d14d      	bne.n	801ccae <__kernel_rem_pio2+0x26e>
 801cc12:	4632      	mov	r2, r6
 801cc14:	463b      	mov	r3, r7
 801cc16:	4954      	ldr	r1, [pc, #336]	; (801cd68 <__kernel_rem_pio2+0x328>)
 801cc18:	2000      	movs	r0, #0
 801cc1a:	f7e3 fb65 	bl	80002e8 <__aeabi_dsub>
 801cc1e:	4606      	mov	r6, r0
 801cc20:	460f      	mov	r7, r1
 801cc22:	2d00      	cmp	r5, #0
 801cc24:	d043      	beq.n	801ccae <__kernel_rem_pio2+0x26e>
 801cc26:	4650      	mov	r0, sl
 801cc28:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801cd58 <__kernel_rem_pio2+0x318>
 801cc2c:	f7ff fdf4 	bl	801c818 <scalbn>
 801cc30:	4630      	mov	r0, r6
 801cc32:	4639      	mov	r1, r7
 801cc34:	ec53 2b10 	vmov	r2, r3, d0
 801cc38:	f7e3 fb56 	bl	80002e8 <__aeabi_dsub>
 801cc3c:	4606      	mov	r6, r0
 801cc3e:	460f      	mov	r7, r1
 801cc40:	e035      	b.n	801ccae <__kernel_rem_pio2+0x26e>
 801cc42:	4b4a      	ldr	r3, [pc, #296]	; (801cd6c <__kernel_rem_pio2+0x32c>)
 801cc44:	2200      	movs	r2, #0
 801cc46:	4630      	mov	r0, r6
 801cc48:	4639      	mov	r1, r7
 801cc4a:	f7e3 fd05 	bl	8000658 <__aeabi_dmul>
 801cc4e:	f7e3 ffb3 	bl	8000bb8 <__aeabi_d2iz>
 801cc52:	f7e3 fc97 	bl	8000584 <__aeabi_i2d>
 801cc56:	4602      	mov	r2, r0
 801cc58:	460b      	mov	r3, r1
 801cc5a:	ec43 2b18 	vmov	d8, r2, r3
 801cc5e:	4b44      	ldr	r3, [pc, #272]	; (801cd70 <__kernel_rem_pio2+0x330>)
 801cc60:	2200      	movs	r2, #0
 801cc62:	f7e3 fcf9 	bl	8000658 <__aeabi_dmul>
 801cc66:	4602      	mov	r2, r0
 801cc68:	460b      	mov	r3, r1
 801cc6a:	4630      	mov	r0, r6
 801cc6c:	4639      	mov	r1, r7
 801cc6e:	f7e3 fb3b 	bl	80002e8 <__aeabi_dsub>
 801cc72:	f7e3 ffa1 	bl	8000bb8 <__aeabi_d2iz>
 801cc76:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cc7a:	f84b 0b04 	str.w	r0, [fp], #4
 801cc7e:	ec51 0b18 	vmov	r0, r1, d8
 801cc82:	f7e3 fb33 	bl	80002ec <__adddf3>
 801cc86:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc8a:	4606      	mov	r6, r0
 801cc8c:	460f      	mov	r7, r1
 801cc8e:	e75b      	b.n	801cb48 <__kernel_rem_pio2+0x108>
 801cc90:	d106      	bne.n	801cca0 <__kernel_rem_pio2+0x260>
 801cc92:	1e63      	subs	r3, r4, #1
 801cc94:	aa0c      	add	r2, sp, #48	; 0x30
 801cc96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc9a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801cc9e:	e79d      	b.n	801cbdc <__kernel_rem_pio2+0x19c>
 801cca0:	4b34      	ldr	r3, [pc, #208]	; (801cd74 <__kernel_rem_pio2+0x334>)
 801cca2:	2200      	movs	r2, #0
 801cca4:	f7e3 ff5e 	bl	8000b64 <__aeabi_dcmpge>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	d140      	bne.n	801cd2e <__kernel_rem_pio2+0x2ee>
 801ccac:	4683      	mov	fp, r0
 801ccae:	2200      	movs	r2, #0
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	4639      	mov	r1, r7
 801ccb6:	f7e3 ff37 	bl	8000b28 <__aeabi_dcmpeq>
 801ccba:	2800      	cmp	r0, #0
 801ccbc:	f000 80c1 	beq.w	801ce42 <__kernel_rem_pio2+0x402>
 801ccc0:	1e65      	subs	r5, r4, #1
 801ccc2:	462b      	mov	r3, r5
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	9900      	ldr	r1, [sp, #0]
 801ccc8:	428b      	cmp	r3, r1
 801ccca:	da6d      	bge.n	801cda8 <__kernel_rem_pio2+0x368>
 801cccc:	2a00      	cmp	r2, #0
 801ccce:	f000 808a 	beq.w	801cde6 <__kernel_rem_pio2+0x3a6>
 801ccd2:	ab0c      	add	r3, sp, #48	; 0x30
 801ccd4:	f1aa 0a18 	sub.w	sl, sl, #24
 801ccd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	f000 80ae 	beq.w	801ce3e <__kernel_rem_pio2+0x3fe>
 801cce2:	4650      	mov	r0, sl
 801cce4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801cd58 <__kernel_rem_pio2+0x318>
 801cce8:	f7ff fd96 	bl	801c818 <scalbn>
 801ccec:	1c6b      	adds	r3, r5, #1
 801ccee:	00da      	lsls	r2, r3, #3
 801ccf0:	9205      	str	r2, [sp, #20]
 801ccf2:	ec57 6b10 	vmov	r6, r7, d0
 801ccf6:	aa70      	add	r2, sp, #448	; 0x1c0
 801ccf8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801cd6c <__kernel_rem_pio2+0x32c>
 801ccfc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801cd00:	462c      	mov	r4, r5
 801cd02:	f04f 0800 	mov.w	r8, #0
 801cd06:	2c00      	cmp	r4, #0
 801cd08:	f280 80d4 	bge.w	801ceb4 <__kernel_rem_pio2+0x474>
 801cd0c:	462c      	mov	r4, r5
 801cd0e:	2c00      	cmp	r4, #0
 801cd10:	f2c0 8102 	blt.w	801cf18 <__kernel_rem_pio2+0x4d8>
 801cd14:	4b18      	ldr	r3, [pc, #96]	; (801cd78 <__kernel_rem_pio2+0x338>)
 801cd16:	461e      	mov	r6, r3
 801cd18:	ab70      	add	r3, sp, #448	; 0x1c0
 801cd1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801cd1e:	1b2b      	subs	r3, r5, r4
 801cd20:	f04f 0900 	mov.w	r9, #0
 801cd24:	f04f 0a00 	mov.w	sl, #0
 801cd28:	2700      	movs	r7, #0
 801cd2a:	9306      	str	r3, [sp, #24]
 801cd2c:	e0e6      	b.n	801cefc <__kernel_rem_pio2+0x4bc>
 801cd2e:	f04f 0b02 	mov.w	fp, #2
 801cd32:	e756      	b.n	801cbe2 <__kernel_rem_pio2+0x1a2>
 801cd34:	f8d8 3000 	ldr.w	r3, [r8]
 801cd38:	bb05      	cbnz	r5, 801cd7c <__kernel_rem_pio2+0x33c>
 801cd3a:	b123      	cbz	r3, 801cd46 <__kernel_rem_pio2+0x306>
 801cd3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801cd40:	f8c8 3000 	str.w	r3, [r8]
 801cd44:	2301      	movs	r3, #1
 801cd46:	3201      	adds	r2, #1
 801cd48:	f108 0804 	add.w	r8, r8, #4
 801cd4c:	461d      	mov	r5, r3
 801cd4e:	e74f      	b.n	801cbf0 <__kernel_rem_pio2+0x1b0>
	...
 801cd5c:	3ff00000 	.word	0x3ff00000
 801cd60:	080296a8 	.word	0x080296a8
 801cd64:	40200000 	.word	0x40200000
 801cd68:	3ff00000 	.word	0x3ff00000
 801cd6c:	3e700000 	.word	0x3e700000
 801cd70:	41700000 	.word	0x41700000
 801cd74:	3fe00000 	.word	0x3fe00000
 801cd78:	08029668 	.word	0x08029668
 801cd7c:	1acb      	subs	r3, r1, r3
 801cd7e:	f8c8 3000 	str.w	r3, [r8]
 801cd82:	462b      	mov	r3, r5
 801cd84:	e7df      	b.n	801cd46 <__kernel_rem_pio2+0x306>
 801cd86:	1e62      	subs	r2, r4, #1
 801cd88:	ab0c      	add	r3, sp, #48	; 0x30
 801cd8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801cd92:	a90c      	add	r1, sp, #48	; 0x30
 801cd94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801cd98:	e738      	b.n	801cc0c <__kernel_rem_pio2+0x1cc>
 801cd9a:	1e62      	subs	r2, r4, #1
 801cd9c:	ab0c      	add	r3, sp, #48	; 0x30
 801cd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cda2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801cda6:	e7f4      	b.n	801cd92 <__kernel_rem_pio2+0x352>
 801cda8:	a90c      	add	r1, sp, #48	; 0x30
 801cdaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801cdae:	3b01      	subs	r3, #1
 801cdb0:	430a      	orrs	r2, r1
 801cdb2:	e788      	b.n	801ccc6 <__kernel_rem_pio2+0x286>
 801cdb4:	3301      	adds	r3, #1
 801cdb6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801cdba:	2900      	cmp	r1, #0
 801cdbc:	d0fa      	beq.n	801cdb4 <__kernel_rem_pio2+0x374>
 801cdbe:	9a08      	ldr	r2, [sp, #32]
 801cdc0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801cdc4:	446a      	add	r2, sp
 801cdc6:	3a98      	subs	r2, #152	; 0x98
 801cdc8:	9208      	str	r2, [sp, #32]
 801cdca:	9a06      	ldr	r2, [sp, #24]
 801cdcc:	a920      	add	r1, sp, #128	; 0x80
 801cdce:	18a2      	adds	r2, r4, r2
 801cdd0:	18e3      	adds	r3, r4, r3
 801cdd2:	f104 0801 	add.w	r8, r4, #1
 801cdd6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801cdda:	9302      	str	r3, [sp, #8]
 801cddc:	9b02      	ldr	r3, [sp, #8]
 801cdde:	4543      	cmp	r3, r8
 801cde0:	da04      	bge.n	801cdec <__kernel_rem_pio2+0x3ac>
 801cde2:	461c      	mov	r4, r3
 801cde4:	e6a2      	b.n	801cb2c <__kernel_rem_pio2+0xec>
 801cde6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cde8:	2301      	movs	r3, #1
 801cdea:	e7e4      	b.n	801cdb6 <__kernel_rem_pio2+0x376>
 801cdec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801cdf2:	f7e3 fbc7 	bl	8000584 <__aeabi_i2d>
 801cdf6:	e8e5 0102 	strd	r0, r1, [r5], #8
 801cdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdfc:	46ab      	mov	fp, r5
 801cdfe:	461c      	mov	r4, r3
 801ce00:	f04f 0900 	mov.w	r9, #0
 801ce04:	2600      	movs	r6, #0
 801ce06:	2700      	movs	r7, #0
 801ce08:	9b05      	ldr	r3, [sp, #20]
 801ce0a:	4599      	cmp	r9, r3
 801ce0c:	dd06      	ble.n	801ce1c <__kernel_rem_pio2+0x3dc>
 801ce0e:	9b08      	ldr	r3, [sp, #32]
 801ce10:	e8e3 6702 	strd	r6, r7, [r3], #8
 801ce14:	f108 0801 	add.w	r8, r8, #1
 801ce18:	9308      	str	r3, [sp, #32]
 801ce1a:	e7df      	b.n	801cddc <__kernel_rem_pio2+0x39c>
 801ce1c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801ce20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801ce24:	f7e3 fc18 	bl	8000658 <__aeabi_dmul>
 801ce28:	4602      	mov	r2, r0
 801ce2a:	460b      	mov	r3, r1
 801ce2c:	4630      	mov	r0, r6
 801ce2e:	4639      	mov	r1, r7
 801ce30:	f7e3 fa5c 	bl	80002ec <__adddf3>
 801ce34:	f109 0901 	add.w	r9, r9, #1
 801ce38:	4606      	mov	r6, r0
 801ce3a:	460f      	mov	r7, r1
 801ce3c:	e7e4      	b.n	801ce08 <__kernel_rem_pio2+0x3c8>
 801ce3e:	3d01      	subs	r5, #1
 801ce40:	e747      	b.n	801ccd2 <__kernel_rem_pio2+0x292>
 801ce42:	ec47 6b10 	vmov	d0, r6, r7
 801ce46:	f1ca 0000 	rsb	r0, sl, #0
 801ce4a:	f7ff fce5 	bl	801c818 <scalbn>
 801ce4e:	ec57 6b10 	vmov	r6, r7, d0
 801ce52:	4ba0      	ldr	r3, [pc, #640]	; (801d0d4 <__kernel_rem_pio2+0x694>)
 801ce54:	ee10 0a10 	vmov	r0, s0
 801ce58:	2200      	movs	r2, #0
 801ce5a:	4639      	mov	r1, r7
 801ce5c:	f7e3 fe82 	bl	8000b64 <__aeabi_dcmpge>
 801ce60:	b1f8      	cbz	r0, 801cea2 <__kernel_rem_pio2+0x462>
 801ce62:	4b9d      	ldr	r3, [pc, #628]	; (801d0d8 <__kernel_rem_pio2+0x698>)
 801ce64:	2200      	movs	r2, #0
 801ce66:	4630      	mov	r0, r6
 801ce68:	4639      	mov	r1, r7
 801ce6a:	f7e3 fbf5 	bl	8000658 <__aeabi_dmul>
 801ce6e:	f7e3 fea3 	bl	8000bb8 <__aeabi_d2iz>
 801ce72:	4680      	mov	r8, r0
 801ce74:	f7e3 fb86 	bl	8000584 <__aeabi_i2d>
 801ce78:	4b96      	ldr	r3, [pc, #600]	; (801d0d4 <__kernel_rem_pio2+0x694>)
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	f7e3 fbec 	bl	8000658 <__aeabi_dmul>
 801ce80:	460b      	mov	r3, r1
 801ce82:	4602      	mov	r2, r0
 801ce84:	4639      	mov	r1, r7
 801ce86:	4630      	mov	r0, r6
 801ce88:	f7e3 fa2e 	bl	80002e8 <__aeabi_dsub>
 801ce8c:	f7e3 fe94 	bl	8000bb8 <__aeabi_d2iz>
 801ce90:	1c65      	adds	r5, r4, #1
 801ce92:	ab0c      	add	r3, sp, #48	; 0x30
 801ce94:	f10a 0a18 	add.w	sl, sl, #24
 801ce98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ce9c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801cea0:	e71f      	b.n	801cce2 <__kernel_rem_pio2+0x2a2>
 801cea2:	4630      	mov	r0, r6
 801cea4:	4639      	mov	r1, r7
 801cea6:	f7e3 fe87 	bl	8000bb8 <__aeabi_d2iz>
 801ceaa:	ab0c      	add	r3, sp, #48	; 0x30
 801ceac:	4625      	mov	r5, r4
 801ceae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ceb2:	e716      	b.n	801cce2 <__kernel_rem_pio2+0x2a2>
 801ceb4:	ab0c      	add	r3, sp, #48	; 0x30
 801ceb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ceba:	f7e3 fb63 	bl	8000584 <__aeabi_i2d>
 801cebe:	4632      	mov	r2, r6
 801cec0:	463b      	mov	r3, r7
 801cec2:	f7e3 fbc9 	bl	8000658 <__aeabi_dmul>
 801cec6:	4642      	mov	r2, r8
 801cec8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801cecc:	464b      	mov	r3, r9
 801cece:	4630      	mov	r0, r6
 801ced0:	4639      	mov	r1, r7
 801ced2:	f7e3 fbc1 	bl	8000658 <__aeabi_dmul>
 801ced6:	3c01      	subs	r4, #1
 801ced8:	4606      	mov	r6, r0
 801ceda:	460f      	mov	r7, r1
 801cedc:	e713      	b.n	801cd06 <__kernel_rem_pio2+0x2c6>
 801cede:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801cee2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801cee6:	f7e3 fbb7 	bl	8000658 <__aeabi_dmul>
 801ceea:	4602      	mov	r2, r0
 801ceec:	460b      	mov	r3, r1
 801ceee:	4648      	mov	r0, r9
 801cef0:	4651      	mov	r1, sl
 801cef2:	f7e3 f9fb 	bl	80002ec <__adddf3>
 801cef6:	3701      	adds	r7, #1
 801cef8:	4681      	mov	r9, r0
 801cefa:	468a      	mov	sl, r1
 801cefc:	9b00      	ldr	r3, [sp, #0]
 801cefe:	429f      	cmp	r7, r3
 801cf00:	dc02      	bgt.n	801cf08 <__kernel_rem_pio2+0x4c8>
 801cf02:	9b06      	ldr	r3, [sp, #24]
 801cf04:	429f      	cmp	r7, r3
 801cf06:	ddea      	ble.n	801cede <__kernel_rem_pio2+0x49e>
 801cf08:	9a06      	ldr	r2, [sp, #24]
 801cf0a:	ab48      	add	r3, sp, #288	; 0x120
 801cf0c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801cf10:	e9c6 9a00 	strd	r9, sl, [r6]
 801cf14:	3c01      	subs	r4, #1
 801cf16:	e6fa      	b.n	801cd0e <__kernel_rem_pio2+0x2ce>
 801cf18:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801cf1a:	2b02      	cmp	r3, #2
 801cf1c:	dc0b      	bgt.n	801cf36 <__kernel_rem_pio2+0x4f6>
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	dc39      	bgt.n	801cf96 <__kernel_rem_pio2+0x556>
 801cf22:	d05d      	beq.n	801cfe0 <__kernel_rem_pio2+0x5a0>
 801cf24:	9b02      	ldr	r3, [sp, #8]
 801cf26:	f003 0007 	and.w	r0, r3, #7
 801cf2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801cf2e:	ecbd 8b02 	vpop	{d8}
 801cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801cf38:	2b03      	cmp	r3, #3
 801cf3a:	d1f3      	bne.n	801cf24 <__kernel_rem_pio2+0x4e4>
 801cf3c:	9b05      	ldr	r3, [sp, #20]
 801cf3e:	9500      	str	r5, [sp, #0]
 801cf40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801cf44:	eb0d 0403 	add.w	r4, sp, r3
 801cf48:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801cf4c:	46a2      	mov	sl, r4
 801cf4e:	9b00      	ldr	r3, [sp, #0]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	f1aa 0a08 	sub.w	sl, sl, #8
 801cf56:	dc69      	bgt.n	801d02c <__kernel_rem_pio2+0x5ec>
 801cf58:	46aa      	mov	sl, r5
 801cf5a:	f1ba 0f01 	cmp.w	sl, #1
 801cf5e:	f1a4 0408 	sub.w	r4, r4, #8
 801cf62:	f300 8083 	bgt.w	801d06c <__kernel_rem_pio2+0x62c>
 801cf66:	9c05      	ldr	r4, [sp, #20]
 801cf68:	ab48      	add	r3, sp, #288	; 0x120
 801cf6a:	441c      	add	r4, r3
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	2100      	movs	r1, #0
 801cf70:	2d01      	cmp	r5, #1
 801cf72:	f300 809a 	bgt.w	801d0aa <__kernel_rem_pio2+0x66a>
 801cf76:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801cf7a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801cf7e:	f1bb 0f00 	cmp.w	fp, #0
 801cf82:	f040 8098 	bne.w	801d0b6 <__kernel_rem_pio2+0x676>
 801cf86:	9b04      	ldr	r3, [sp, #16]
 801cf88:	e9c3 7800 	strd	r7, r8, [r3]
 801cf8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801cf90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801cf94:	e7c6      	b.n	801cf24 <__kernel_rem_pio2+0x4e4>
 801cf96:	9e05      	ldr	r6, [sp, #20]
 801cf98:	ab48      	add	r3, sp, #288	; 0x120
 801cf9a:	441e      	add	r6, r3
 801cf9c:	462c      	mov	r4, r5
 801cf9e:	2000      	movs	r0, #0
 801cfa0:	2100      	movs	r1, #0
 801cfa2:	2c00      	cmp	r4, #0
 801cfa4:	da33      	bge.n	801d00e <__kernel_rem_pio2+0x5ce>
 801cfa6:	f1bb 0f00 	cmp.w	fp, #0
 801cfaa:	d036      	beq.n	801d01a <__kernel_rem_pio2+0x5da>
 801cfac:	4602      	mov	r2, r0
 801cfae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cfb2:	9c04      	ldr	r4, [sp, #16]
 801cfb4:	e9c4 2300 	strd	r2, r3, [r4]
 801cfb8:	4602      	mov	r2, r0
 801cfba:	460b      	mov	r3, r1
 801cfbc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801cfc0:	f7e3 f992 	bl	80002e8 <__aeabi_dsub>
 801cfc4:	ae4a      	add	r6, sp, #296	; 0x128
 801cfc6:	2401      	movs	r4, #1
 801cfc8:	42a5      	cmp	r5, r4
 801cfca:	da29      	bge.n	801d020 <__kernel_rem_pio2+0x5e0>
 801cfcc:	f1bb 0f00 	cmp.w	fp, #0
 801cfd0:	d002      	beq.n	801cfd8 <__kernel_rem_pio2+0x598>
 801cfd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cfd6:	4619      	mov	r1, r3
 801cfd8:	9b04      	ldr	r3, [sp, #16]
 801cfda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801cfde:	e7a1      	b.n	801cf24 <__kernel_rem_pio2+0x4e4>
 801cfe0:	9c05      	ldr	r4, [sp, #20]
 801cfe2:	ab48      	add	r3, sp, #288	; 0x120
 801cfe4:	441c      	add	r4, r3
 801cfe6:	2000      	movs	r0, #0
 801cfe8:	2100      	movs	r1, #0
 801cfea:	2d00      	cmp	r5, #0
 801cfec:	da09      	bge.n	801d002 <__kernel_rem_pio2+0x5c2>
 801cfee:	f1bb 0f00 	cmp.w	fp, #0
 801cff2:	d002      	beq.n	801cffa <__kernel_rem_pio2+0x5ba>
 801cff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cff8:	4619      	mov	r1, r3
 801cffa:	9b04      	ldr	r3, [sp, #16]
 801cffc:	e9c3 0100 	strd	r0, r1, [r3]
 801d000:	e790      	b.n	801cf24 <__kernel_rem_pio2+0x4e4>
 801d002:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d006:	f7e3 f971 	bl	80002ec <__adddf3>
 801d00a:	3d01      	subs	r5, #1
 801d00c:	e7ed      	b.n	801cfea <__kernel_rem_pio2+0x5aa>
 801d00e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801d012:	f7e3 f96b 	bl	80002ec <__adddf3>
 801d016:	3c01      	subs	r4, #1
 801d018:	e7c3      	b.n	801cfa2 <__kernel_rem_pio2+0x562>
 801d01a:	4602      	mov	r2, r0
 801d01c:	460b      	mov	r3, r1
 801d01e:	e7c8      	b.n	801cfb2 <__kernel_rem_pio2+0x572>
 801d020:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801d024:	f7e3 f962 	bl	80002ec <__adddf3>
 801d028:	3401      	adds	r4, #1
 801d02a:	e7cd      	b.n	801cfc8 <__kernel_rem_pio2+0x588>
 801d02c:	e9da 8900 	ldrd	r8, r9, [sl]
 801d030:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801d034:	9b00      	ldr	r3, [sp, #0]
 801d036:	3b01      	subs	r3, #1
 801d038:	9300      	str	r3, [sp, #0]
 801d03a:	4632      	mov	r2, r6
 801d03c:	463b      	mov	r3, r7
 801d03e:	4640      	mov	r0, r8
 801d040:	4649      	mov	r1, r9
 801d042:	f7e3 f953 	bl	80002ec <__adddf3>
 801d046:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d04a:	4602      	mov	r2, r0
 801d04c:	460b      	mov	r3, r1
 801d04e:	4640      	mov	r0, r8
 801d050:	4649      	mov	r1, r9
 801d052:	f7e3 f949 	bl	80002e8 <__aeabi_dsub>
 801d056:	4632      	mov	r2, r6
 801d058:	463b      	mov	r3, r7
 801d05a:	f7e3 f947 	bl	80002ec <__adddf3>
 801d05e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801d062:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801d066:	ed8a 7b00 	vstr	d7, [sl]
 801d06a:	e770      	b.n	801cf4e <__kernel_rem_pio2+0x50e>
 801d06c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801d070:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801d074:	4640      	mov	r0, r8
 801d076:	4632      	mov	r2, r6
 801d078:	463b      	mov	r3, r7
 801d07a:	4649      	mov	r1, r9
 801d07c:	f7e3 f936 	bl	80002ec <__adddf3>
 801d080:	e9cd 0100 	strd	r0, r1, [sp]
 801d084:	4602      	mov	r2, r0
 801d086:	460b      	mov	r3, r1
 801d088:	4640      	mov	r0, r8
 801d08a:	4649      	mov	r1, r9
 801d08c:	f7e3 f92c 	bl	80002e8 <__aeabi_dsub>
 801d090:	4632      	mov	r2, r6
 801d092:	463b      	mov	r3, r7
 801d094:	f7e3 f92a 	bl	80002ec <__adddf3>
 801d098:	ed9d 7b00 	vldr	d7, [sp]
 801d09c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d0a0:	ed84 7b00 	vstr	d7, [r4]
 801d0a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d0a8:	e757      	b.n	801cf5a <__kernel_rem_pio2+0x51a>
 801d0aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801d0ae:	f7e3 f91d 	bl	80002ec <__adddf3>
 801d0b2:	3d01      	subs	r5, #1
 801d0b4:	e75c      	b.n	801cf70 <__kernel_rem_pio2+0x530>
 801d0b6:	9b04      	ldr	r3, [sp, #16]
 801d0b8:	9a04      	ldr	r2, [sp, #16]
 801d0ba:	601f      	str	r7, [r3, #0]
 801d0bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801d0c0:	605c      	str	r4, [r3, #4]
 801d0c2:	609d      	str	r5, [r3, #8]
 801d0c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d0c8:	60d3      	str	r3, [r2, #12]
 801d0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d0ce:	6110      	str	r0, [r2, #16]
 801d0d0:	6153      	str	r3, [r2, #20]
 801d0d2:	e727      	b.n	801cf24 <__kernel_rem_pio2+0x4e4>
 801d0d4:	41700000 	.word	0x41700000
 801d0d8:	3e700000 	.word	0x3e700000

0801d0dc <__kernel_rem_pio2f>:
 801d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e0:	ed2d 8b04 	vpush	{d8-d9}
 801d0e4:	b0d9      	sub	sp, #356	; 0x164
 801d0e6:	4688      	mov	r8, r1
 801d0e8:	9002      	str	r0, [sp, #8]
 801d0ea:	49b8      	ldr	r1, [pc, #736]	; (801d3cc <__kernel_rem_pio2f+0x2f0>)
 801d0ec:	9866      	ldr	r0, [sp, #408]	; 0x198
 801d0ee:	9301      	str	r3, [sp, #4]
 801d0f0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801d0f4:	9901      	ldr	r1, [sp, #4]
 801d0f6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801d0f8:	f101 3bff 	add.w	fp, r1, #4294967295
 801d0fc:	1d11      	adds	r1, r2, #4
 801d0fe:	db25      	blt.n	801d14c <__kernel_rem_pio2f+0x70>
 801d100:	1ed0      	subs	r0, r2, #3
 801d102:	bf48      	it	mi
 801d104:	1d10      	addmi	r0, r2, #4
 801d106:	10c0      	asrs	r0, r0, #3
 801d108:	1c45      	adds	r5, r0, #1
 801d10a:	00e9      	lsls	r1, r5, #3
 801d10c:	eba0 070b 	sub.w	r7, r0, fp
 801d110:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d114:	9103      	str	r1, [sp, #12]
 801d116:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801d11a:	eb0a 0c0b 	add.w	ip, sl, fp
 801d11e:	ae1c      	add	r6, sp, #112	; 0x70
 801d120:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801d124:	2400      	movs	r4, #0
 801d126:	4564      	cmp	r4, ip
 801d128:	dd12      	ble.n	801d150 <__kernel_rem_pio2f+0x74>
 801d12a:	9901      	ldr	r1, [sp, #4]
 801d12c:	ac1c      	add	r4, sp, #112	; 0x70
 801d12e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d132:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801d136:	f04f 0c00 	mov.w	ip, #0
 801d13a:	45d4      	cmp	ip, sl
 801d13c:	dc27      	bgt.n	801d18e <__kernel_rem_pio2f+0xb2>
 801d13e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d142:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d146:	4627      	mov	r7, r4
 801d148:	2600      	movs	r6, #0
 801d14a:	e016      	b.n	801d17a <__kernel_rem_pio2f+0x9e>
 801d14c:	2000      	movs	r0, #0
 801d14e:	e7db      	b.n	801d108 <__kernel_rem_pio2f+0x2c>
 801d150:	42e7      	cmn	r7, r4
 801d152:	bf5d      	ittte	pl
 801d154:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801d158:	ee07 1a90 	vmovpl	s15, r1
 801d15c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d160:	eef0 7a47 	vmovmi.f32	s15, s14
 801d164:	ece6 7a01 	vstmia	r6!, {s15}
 801d168:	3401      	adds	r4, #1
 801d16a:	e7dc      	b.n	801d126 <__kernel_rem_pio2f+0x4a>
 801d16c:	ecfe 6a01 	vldmia	lr!, {s13}
 801d170:	ed97 7a00 	vldr	s14, [r7]
 801d174:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d178:	3601      	adds	r6, #1
 801d17a:	455e      	cmp	r6, fp
 801d17c:	f1a7 0704 	sub.w	r7, r7, #4
 801d180:	ddf4      	ble.n	801d16c <__kernel_rem_pio2f+0x90>
 801d182:	ece9 7a01 	vstmia	r9!, {s15}
 801d186:	f10c 0c01 	add.w	ip, ip, #1
 801d18a:	3404      	adds	r4, #4
 801d18c:	e7d5      	b.n	801d13a <__kernel_rem_pio2f+0x5e>
 801d18e:	a908      	add	r1, sp, #32
 801d190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d194:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801d198:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801d3d8 <__kernel_rem_pio2f+0x2fc>
 801d19c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801d3d4 <__kernel_rem_pio2f+0x2f8>
 801d1a0:	9105      	str	r1, [sp, #20]
 801d1a2:	9304      	str	r3, [sp, #16]
 801d1a4:	4656      	mov	r6, sl
 801d1a6:	00b3      	lsls	r3, r6, #2
 801d1a8:	9306      	str	r3, [sp, #24]
 801d1aa:	ab58      	add	r3, sp, #352	; 0x160
 801d1ac:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d1b0:	ac08      	add	r4, sp, #32
 801d1b2:	ab44      	add	r3, sp, #272	; 0x110
 801d1b4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801d1b8:	46a4      	mov	ip, r4
 801d1ba:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d1be:	4637      	mov	r7, r6
 801d1c0:	2f00      	cmp	r7, #0
 801d1c2:	f1a0 0004 	sub.w	r0, r0, #4
 801d1c6:	dc4a      	bgt.n	801d25e <__kernel_rem_pio2f+0x182>
 801d1c8:	4628      	mov	r0, r5
 801d1ca:	9207      	str	r2, [sp, #28]
 801d1cc:	f7ff fbd2 	bl	801c974 <scalbnf>
 801d1d0:	eeb0 8a40 	vmov.f32	s16, s0
 801d1d4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801d1d8:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d1dc:	f000 f9f0 	bl	801d5c0 <floorf>
 801d1e0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801d1e4:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d1e8:	2d00      	cmp	r5, #0
 801d1ea:	9a07      	ldr	r2, [sp, #28]
 801d1ec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d1f0:	ee17 9a90 	vmov	r9, s15
 801d1f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1f8:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d1fc:	dd41      	ble.n	801d282 <__kernel_rem_pio2f+0x1a6>
 801d1fe:	f106 3cff 	add.w	ip, r6, #4294967295
 801d202:	ab08      	add	r3, sp, #32
 801d204:	f1c5 0e08 	rsb	lr, r5, #8
 801d208:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801d20c:	fa47 f00e 	asr.w	r0, r7, lr
 801d210:	4481      	add	r9, r0
 801d212:	fa00 f00e 	lsl.w	r0, r0, lr
 801d216:	1a3f      	subs	r7, r7, r0
 801d218:	f1c5 0007 	rsb	r0, r5, #7
 801d21c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801d220:	4107      	asrs	r7, r0
 801d222:	2f00      	cmp	r7, #0
 801d224:	dd3c      	ble.n	801d2a0 <__kernel_rem_pio2f+0x1c4>
 801d226:	f04f 0e00 	mov.w	lr, #0
 801d22a:	f109 0901 	add.w	r9, r9, #1
 801d22e:	4671      	mov	r1, lr
 801d230:	4576      	cmp	r6, lr
 801d232:	dc67      	bgt.n	801d304 <__kernel_rem_pio2f+0x228>
 801d234:	2d00      	cmp	r5, #0
 801d236:	dd03      	ble.n	801d240 <__kernel_rem_pio2f+0x164>
 801d238:	2d01      	cmp	r5, #1
 801d23a:	d074      	beq.n	801d326 <__kernel_rem_pio2f+0x24a>
 801d23c:	2d02      	cmp	r5, #2
 801d23e:	d07b      	beq.n	801d338 <__kernel_rem_pio2f+0x25c>
 801d240:	2f02      	cmp	r7, #2
 801d242:	d12d      	bne.n	801d2a0 <__kernel_rem_pio2f+0x1c4>
 801d244:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d248:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d24c:	b341      	cbz	r1, 801d2a0 <__kernel_rem_pio2f+0x1c4>
 801d24e:	4628      	mov	r0, r5
 801d250:	9207      	str	r2, [sp, #28]
 801d252:	f7ff fb8f 	bl	801c974 <scalbnf>
 801d256:	9a07      	ldr	r2, [sp, #28]
 801d258:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d25c:	e020      	b.n	801d2a0 <__kernel_rem_pio2f+0x1c4>
 801d25e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d262:	3f01      	subs	r7, #1
 801d264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d26c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d270:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d274:	ecac 0a01 	vstmia	ip!, {s0}
 801d278:	ed90 0a00 	vldr	s0, [r0]
 801d27c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d280:	e79e      	b.n	801d1c0 <__kernel_rem_pio2f+0xe4>
 801d282:	d105      	bne.n	801d290 <__kernel_rem_pio2f+0x1b4>
 801d284:	1e70      	subs	r0, r6, #1
 801d286:	ab08      	add	r3, sp, #32
 801d288:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801d28c:	11ff      	asrs	r7, r7, #7
 801d28e:	e7c8      	b.n	801d222 <__kernel_rem_pio2f+0x146>
 801d290:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d294:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d29c:	da30      	bge.n	801d300 <__kernel_rem_pio2f+0x224>
 801d29e:	2700      	movs	r7, #0
 801d2a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2a8:	f040 809a 	bne.w	801d3e0 <__kernel_rem_pio2f+0x304>
 801d2ac:	1e74      	subs	r4, r6, #1
 801d2ae:	46a4      	mov	ip, r4
 801d2b0:	2100      	movs	r1, #0
 801d2b2:	45d4      	cmp	ip, sl
 801d2b4:	da47      	bge.n	801d346 <__kernel_rem_pio2f+0x26a>
 801d2b6:	2900      	cmp	r1, #0
 801d2b8:	d063      	beq.n	801d382 <__kernel_rem_pio2f+0x2a6>
 801d2ba:	ab08      	add	r3, sp, #32
 801d2bc:	3d08      	subs	r5, #8
 801d2be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d07f      	beq.n	801d3c6 <__kernel_rem_pio2f+0x2ea>
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d2cc:	f7ff fb52 	bl	801c974 <scalbnf>
 801d2d0:	1c63      	adds	r3, r4, #1
 801d2d2:	aa44      	add	r2, sp, #272	; 0x110
 801d2d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801d3d8 <__kernel_rem_pio2f+0x2fc>
 801d2d8:	0099      	lsls	r1, r3, #2
 801d2da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d2de:	4623      	mov	r3, r4
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	f280 80ad 	bge.w	801d440 <__kernel_rem_pio2f+0x364>
 801d2e6:	4623      	mov	r3, r4
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	f2c0 80cb 	blt.w	801d484 <__kernel_rem_pio2f+0x3a8>
 801d2ee:	aa44      	add	r2, sp, #272	; 0x110
 801d2f0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d2f4:	4e36      	ldr	r6, [pc, #216]	; (801d3d0 <__kernel_rem_pio2f+0x2f4>)
 801d2f6:	eddf 7a39 	vldr	s15, [pc, #228]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d2fa:	2000      	movs	r0, #0
 801d2fc:	1ae2      	subs	r2, r4, r3
 801d2fe:	e0b6      	b.n	801d46e <__kernel_rem_pio2f+0x392>
 801d300:	2702      	movs	r7, #2
 801d302:	e790      	b.n	801d226 <__kernel_rem_pio2f+0x14a>
 801d304:	6820      	ldr	r0, [r4, #0]
 801d306:	b949      	cbnz	r1, 801d31c <__kernel_rem_pio2f+0x240>
 801d308:	b118      	cbz	r0, 801d312 <__kernel_rem_pio2f+0x236>
 801d30a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801d30e:	6020      	str	r0, [r4, #0]
 801d310:	2001      	movs	r0, #1
 801d312:	f10e 0e01 	add.w	lr, lr, #1
 801d316:	3404      	adds	r4, #4
 801d318:	4601      	mov	r1, r0
 801d31a:	e789      	b.n	801d230 <__kernel_rem_pio2f+0x154>
 801d31c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d320:	6020      	str	r0, [r4, #0]
 801d322:	4608      	mov	r0, r1
 801d324:	e7f5      	b.n	801d312 <__kernel_rem_pio2f+0x236>
 801d326:	1e74      	subs	r4, r6, #1
 801d328:	ab08      	add	r3, sp, #32
 801d32a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d32e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d332:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d336:	e783      	b.n	801d240 <__kernel_rem_pio2f+0x164>
 801d338:	1e74      	subs	r4, r6, #1
 801d33a:	ab08      	add	r3, sp, #32
 801d33c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d340:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801d344:	e7f5      	b.n	801d332 <__kernel_rem_pio2f+0x256>
 801d346:	ab08      	add	r3, sp, #32
 801d348:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801d34c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d350:	4301      	orrs	r1, r0
 801d352:	e7ae      	b.n	801d2b2 <__kernel_rem_pio2f+0x1d6>
 801d354:	3001      	adds	r0, #1
 801d356:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801d35a:	2f00      	cmp	r7, #0
 801d35c:	d0fa      	beq.n	801d354 <__kernel_rem_pio2f+0x278>
 801d35e:	9b06      	ldr	r3, [sp, #24]
 801d360:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801d364:	eb0d 0403 	add.w	r4, sp, r3
 801d368:	9b01      	ldr	r3, [sp, #4]
 801d36a:	18f7      	adds	r7, r6, r3
 801d36c:	ab1c      	add	r3, sp, #112	; 0x70
 801d36e:	f106 0c01 	add.w	ip, r6, #1
 801d372:	3c4c      	subs	r4, #76	; 0x4c
 801d374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d378:	4430      	add	r0, r6
 801d37a:	4560      	cmp	r0, ip
 801d37c:	da04      	bge.n	801d388 <__kernel_rem_pio2f+0x2ac>
 801d37e:	4606      	mov	r6, r0
 801d380:	e711      	b.n	801d1a6 <__kernel_rem_pio2f+0xca>
 801d382:	9c05      	ldr	r4, [sp, #20]
 801d384:	2001      	movs	r0, #1
 801d386:	e7e6      	b.n	801d356 <__kernel_rem_pio2f+0x27a>
 801d388:	9b04      	ldr	r3, [sp, #16]
 801d38a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d38e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d392:	9306      	str	r3, [sp, #24]
 801d394:	ee07 3a90 	vmov	s15, r3
 801d398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d39c:	2600      	movs	r6, #0
 801d39e:	ece7 7a01 	vstmia	r7!, {s15}
 801d3a2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d3a6:	46b9      	mov	r9, r7
 801d3a8:	455e      	cmp	r6, fp
 801d3aa:	dd04      	ble.n	801d3b6 <__kernel_rem_pio2f+0x2da>
 801d3ac:	ece4 7a01 	vstmia	r4!, {s15}
 801d3b0:	f10c 0c01 	add.w	ip, ip, #1
 801d3b4:	e7e1      	b.n	801d37a <__kernel_rem_pio2f+0x29e>
 801d3b6:	ecfe 6a01 	vldmia	lr!, {s13}
 801d3ba:	ed39 7a01 	vldmdb	r9!, {s14}
 801d3be:	3601      	adds	r6, #1
 801d3c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d3c4:	e7f0      	b.n	801d3a8 <__kernel_rem_pio2f+0x2cc>
 801d3c6:	3c01      	subs	r4, #1
 801d3c8:	e777      	b.n	801d2ba <__kernel_rem_pio2f+0x1de>
 801d3ca:	bf00      	nop
 801d3cc:	080296e4 	.word	0x080296e4
 801d3d0:	080296b8 	.word	0x080296b8
 801d3d4:	43800000 	.word	0x43800000
 801d3d8:	3b800000 	.word	0x3b800000
 801d3dc:	00000000 	.word	0x00000000
 801d3e0:	9b03      	ldr	r3, [sp, #12]
 801d3e2:	eeb0 0a48 	vmov.f32	s0, s16
 801d3e6:	1a98      	subs	r0, r3, r2
 801d3e8:	f7ff fac4 	bl	801c974 <scalbnf>
 801d3ec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801d3d4 <__kernel_rem_pio2f+0x2f8>
 801d3f0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3f8:	db19      	blt.n	801d42e <__kernel_rem_pio2f+0x352>
 801d3fa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801d3d8 <__kernel_rem_pio2f+0x2fc>
 801d3fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d402:	aa08      	add	r2, sp, #32
 801d404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d408:	1c74      	adds	r4, r6, #1
 801d40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d40e:	3508      	adds	r5, #8
 801d410:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d418:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d41c:	ee10 3a10 	vmov	r3, s0
 801d420:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d424:	ee17 3a90 	vmov	r3, s15
 801d428:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d42c:	e74b      	b.n	801d2c6 <__kernel_rem_pio2f+0x1ea>
 801d42e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d432:	aa08      	add	r2, sp, #32
 801d434:	ee10 3a10 	vmov	r3, s0
 801d438:	4634      	mov	r4, r6
 801d43a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d43e:	e742      	b.n	801d2c6 <__kernel_rem_pio2f+0x1ea>
 801d440:	a808      	add	r0, sp, #32
 801d442:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d446:	9001      	str	r0, [sp, #4]
 801d448:	ee07 0a90 	vmov	s15, r0
 801d44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d450:	3b01      	subs	r3, #1
 801d452:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d456:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d45a:	ed62 7a01 	vstmdb	r2!, {s15}
 801d45e:	e73f      	b.n	801d2e0 <__kernel_rem_pio2f+0x204>
 801d460:	ecf6 6a01 	vldmia	r6!, {s13}
 801d464:	ecb5 7a01 	vldmia	r5!, {s14}
 801d468:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d46c:	3001      	adds	r0, #1
 801d46e:	4550      	cmp	r0, sl
 801d470:	dc01      	bgt.n	801d476 <__kernel_rem_pio2f+0x39a>
 801d472:	4290      	cmp	r0, r2
 801d474:	ddf4      	ble.n	801d460 <__kernel_rem_pio2f+0x384>
 801d476:	a858      	add	r0, sp, #352	; 0x160
 801d478:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d47c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801d480:	3b01      	subs	r3, #1
 801d482:	e731      	b.n	801d2e8 <__kernel_rem_pio2f+0x20c>
 801d484:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d486:	2b02      	cmp	r3, #2
 801d488:	dc09      	bgt.n	801d49e <__kernel_rem_pio2f+0x3c2>
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	dc2b      	bgt.n	801d4e6 <__kernel_rem_pio2f+0x40a>
 801d48e:	d044      	beq.n	801d51a <__kernel_rem_pio2f+0x43e>
 801d490:	f009 0007 	and.w	r0, r9, #7
 801d494:	b059      	add	sp, #356	; 0x164
 801d496:	ecbd 8b04 	vpop	{d8-d9}
 801d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d4a0:	2b03      	cmp	r3, #3
 801d4a2:	d1f5      	bne.n	801d490 <__kernel_rem_pio2f+0x3b4>
 801d4a4:	aa30      	add	r2, sp, #192	; 0xc0
 801d4a6:	1f0b      	subs	r3, r1, #4
 801d4a8:	4413      	add	r3, r2
 801d4aa:	461a      	mov	r2, r3
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	2800      	cmp	r0, #0
 801d4b0:	f1a2 0204 	sub.w	r2, r2, #4
 801d4b4:	dc52      	bgt.n	801d55c <__kernel_rem_pio2f+0x480>
 801d4b6:	4622      	mov	r2, r4
 801d4b8:	2a01      	cmp	r2, #1
 801d4ba:	f1a3 0304 	sub.w	r3, r3, #4
 801d4be:	dc5d      	bgt.n	801d57c <__kernel_rem_pio2f+0x4a0>
 801d4c0:	ab30      	add	r3, sp, #192	; 0xc0
 801d4c2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d4c6:	440b      	add	r3, r1
 801d4c8:	2c01      	cmp	r4, #1
 801d4ca:	dc67      	bgt.n	801d59c <__kernel_rem_pio2f+0x4c0>
 801d4cc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d4d0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801d4d4:	2f00      	cmp	r7, #0
 801d4d6:	d167      	bne.n	801d5a8 <__kernel_rem_pio2f+0x4cc>
 801d4d8:	edc8 6a00 	vstr	s13, [r8]
 801d4dc:	ed88 7a01 	vstr	s14, [r8, #4]
 801d4e0:	edc8 7a02 	vstr	s15, [r8, #8]
 801d4e4:	e7d4      	b.n	801d490 <__kernel_rem_pio2f+0x3b4>
 801d4e6:	ab30      	add	r3, sp, #192	; 0xc0
 801d4e8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d4ec:	440b      	add	r3, r1
 801d4ee:	4622      	mov	r2, r4
 801d4f0:	2a00      	cmp	r2, #0
 801d4f2:	da24      	bge.n	801d53e <__kernel_rem_pio2f+0x462>
 801d4f4:	b34f      	cbz	r7, 801d54a <__kernel_rem_pio2f+0x46e>
 801d4f6:	eef1 7a47 	vneg.f32	s15, s14
 801d4fa:	edc8 7a00 	vstr	s15, [r8]
 801d4fe:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801d502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d506:	aa31      	add	r2, sp, #196	; 0xc4
 801d508:	2301      	movs	r3, #1
 801d50a:	429c      	cmp	r4, r3
 801d50c:	da20      	bge.n	801d550 <__kernel_rem_pio2f+0x474>
 801d50e:	b10f      	cbz	r7, 801d514 <__kernel_rem_pio2f+0x438>
 801d510:	eef1 7a67 	vneg.f32	s15, s15
 801d514:	edc8 7a01 	vstr	s15, [r8, #4]
 801d518:	e7ba      	b.n	801d490 <__kernel_rem_pio2f+0x3b4>
 801d51a:	ab30      	add	r3, sp, #192	; 0xc0
 801d51c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801d3dc <__kernel_rem_pio2f+0x300>
 801d520:	440b      	add	r3, r1
 801d522:	2c00      	cmp	r4, #0
 801d524:	da05      	bge.n	801d532 <__kernel_rem_pio2f+0x456>
 801d526:	b10f      	cbz	r7, 801d52c <__kernel_rem_pio2f+0x450>
 801d528:	eef1 7a67 	vneg.f32	s15, s15
 801d52c:	edc8 7a00 	vstr	s15, [r8]
 801d530:	e7ae      	b.n	801d490 <__kernel_rem_pio2f+0x3b4>
 801d532:	ed33 7a01 	vldmdb	r3!, {s14}
 801d536:	3c01      	subs	r4, #1
 801d538:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d53c:	e7f1      	b.n	801d522 <__kernel_rem_pio2f+0x446>
 801d53e:	ed73 7a01 	vldmdb	r3!, {s15}
 801d542:	3a01      	subs	r2, #1
 801d544:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d548:	e7d2      	b.n	801d4f0 <__kernel_rem_pio2f+0x414>
 801d54a:	eef0 7a47 	vmov.f32	s15, s14
 801d54e:	e7d4      	b.n	801d4fa <__kernel_rem_pio2f+0x41e>
 801d550:	ecb2 7a01 	vldmia	r2!, {s14}
 801d554:	3301      	adds	r3, #1
 801d556:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d55a:	e7d6      	b.n	801d50a <__kernel_rem_pio2f+0x42e>
 801d55c:	edd2 7a00 	vldr	s15, [r2]
 801d560:	edd2 6a01 	vldr	s13, [r2, #4]
 801d564:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d568:	3801      	subs	r0, #1
 801d56a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d56e:	ed82 7a00 	vstr	s14, [r2]
 801d572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d576:	edc2 7a01 	vstr	s15, [r2, #4]
 801d57a:	e798      	b.n	801d4ae <__kernel_rem_pio2f+0x3d2>
 801d57c:	edd3 7a00 	vldr	s15, [r3]
 801d580:	edd3 6a01 	vldr	s13, [r3, #4]
 801d584:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d588:	3a01      	subs	r2, #1
 801d58a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d58e:	ed83 7a00 	vstr	s14, [r3]
 801d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d596:	edc3 7a01 	vstr	s15, [r3, #4]
 801d59a:	e78d      	b.n	801d4b8 <__kernel_rem_pio2f+0x3dc>
 801d59c:	ed33 7a01 	vldmdb	r3!, {s14}
 801d5a0:	3c01      	subs	r4, #1
 801d5a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5a6:	e78f      	b.n	801d4c8 <__kernel_rem_pio2f+0x3ec>
 801d5a8:	eef1 6a66 	vneg.f32	s13, s13
 801d5ac:	eeb1 7a47 	vneg.f32	s14, s14
 801d5b0:	edc8 6a00 	vstr	s13, [r8]
 801d5b4:	ed88 7a01 	vstr	s14, [r8, #4]
 801d5b8:	eef1 7a67 	vneg.f32	s15, s15
 801d5bc:	e790      	b.n	801d4e0 <__kernel_rem_pio2f+0x404>
 801d5be:	bf00      	nop

0801d5c0 <floorf>:
 801d5c0:	ee10 3a10 	vmov	r3, s0
 801d5c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d5c8:	3a7f      	subs	r2, #127	; 0x7f
 801d5ca:	2a16      	cmp	r2, #22
 801d5cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d5d0:	dc2a      	bgt.n	801d628 <floorf+0x68>
 801d5d2:	2a00      	cmp	r2, #0
 801d5d4:	da11      	bge.n	801d5fa <floorf+0x3a>
 801d5d6:	eddf 7a18 	vldr	s15, [pc, #96]	; 801d638 <floorf+0x78>
 801d5da:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d5de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5e6:	dd05      	ble.n	801d5f4 <floorf+0x34>
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	da23      	bge.n	801d634 <floorf+0x74>
 801d5ec:	4a13      	ldr	r2, [pc, #76]	; (801d63c <floorf+0x7c>)
 801d5ee:	2900      	cmp	r1, #0
 801d5f0:	bf18      	it	ne
 801d5f2:	4613      	movne	r3, r2
 801d5f4:	ee00 3a10 	vmov	s0, r3
 801d5f8:	4770      	bx	lr
 801d5fa:	4911      	ldr	r1, [pc, #68]	; (801d640 <floorf+0x80>)
 801d5fc:	4111      	asrs	r1, r2
 801d5fe:	420b      	tst	r3, r1
 801d600:	d0fa      	beq.n	801d5f8 <floorf+0x38>
 801d602:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801d638 <floorf+0x78>
 801d606:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d60a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d612:	ddef      	ble.n	801d5f4 <floorf+0x34>
 801d614:	2b00      	cmp	r3, #0
 801d616:	bfbe      	ittt	lt
 801d618:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801d61c:	fa40 f202 	asrlt.w	r2, r0, r2
 801d620:	189b      	addlt	r3, r3, r2
 801d622:	ea23 0301 	bic.w	r3, r3, r1
 801d626:	e7e5      	b.n	801d5f4 <floorf+0x34>
 801d628:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d62c:	d3e4      	bcc.n	801d5f8 <floorf+0x38>
 801d62e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d632:	4770      	bx	lr
 801d634:	2300      	movs	r3, #0
 801d636:	e7dd      	b.n	801d5f4 <floorf+0x34>
 801d638:	7149f2ca 	.word	0x7149f2ca
 801d63c:	bf800000 	.word	0xbf800000
 801d640:	007fffff 	.word	0x007fffff

0801d644 <abort>:
 801d644:	b508      	push	{r3, lr}
 801d646:	2006      	movs	r0, #6
 801d648:	f001 f8fe 	bl	801e848 <raise>
 801d64c:	2001      	movs	r0, #1
 801d64e:	f7f2 ff25 	bl	801049c <_exit>
	...

0801d654 <__assert_func>:
 801d654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d656:	4614      	mov	r4, r2
 801d658:	461a      	mov	r2, r3
 801d65a:	4b09      	ldr	r3, [pc, #36]	; (801d680 <__assert_func+0x2c>)
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	4605      	mov	r5, r0
 801d660:	68d8      	ldr	r0, [r3, #12]
 801d662:	b14c      	cbz	r4, 801d678 <__assert_func+0x24>
 801d664:	4b07      	ldr	r3, [pc, #28]	; (801d684 <__assert_func+0x30>)
 801d666:	9100      	str	r1, [sp, #0]
 801d668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d66c:	4906      	ldr	r1, [pc, #24]	; (801d688 <__assert_func+0x34>)
 801d66e:	462b      	mov	r3, r5
 801d670:	f000 ffda 	bl	801e628 <fiprintf>
 801d674:	f7ff ffe6 	bl	801d644 <abort>
 801d678:	4b04      	ldr	r3, [pc, #16]	; (801d68c <__assert_func+0x38>)
 801d67a:	461c      	mov	r4, r3
 801d67c:	e7f3      	b.n	801d666 <__assert_func+0x12>
 801d67e:	bf00      	nop
 801d680:	2000538c 	.word	0x2000538c
 801d684:	080296f0 	.word	0x080296f0
 801d688:	080296fd 	.word	0x080296fd
 801d68c:	0802972b 	.word	0x0802972b

0801d690 <atof>:
 801d690:	2100      	movs	r1, #0
 801d692:	f000 bf19 	b.w	801e4c8 <strtod>
	...

0801d698 <calloc>:
 801d698:	4b02      	ldr	r3, [pc, #8]	; (801d6a4 <calloc+0xc>)
 801d69a:	460a      	mov	r2, r1
 801d69c:	4601      	mov	r1, r0
 801d69e:	6818      	ldr	r0, [r3, #0]
 801d6a0:	f000 b802 	b.w	801d6a8 <_calloc_r>
 801d6a4:	2000538c 	.word	0x2000538c

0801d6a8 <_calloc_r>:
 801d6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d6aa:	fba1 2402 	umull	r2, r4, r1, r2
 801d6ae:	b94c      	cbnz	r4, 801d6c4 <_calloc_r+0x1c>
 801d6b0:	4611      	mov	r1, r2
 801d6b2:	9201      	str	r2, [sp, #4]
 801d6b4:	f000 f83e 	bl	801d734 <_malloc_r>
 801d6b8:	9a01      	ldr	r2, [sp, #4]
 801d6ba:	4605      	mov	r5, r0
 801d6bc:	b930      	cbnz	r0, 801d6cc <_calloc_r+0x24>
 801d6be:	4628      	mov	r0, r5
 801d6c0:	b003      	add	sp, #12
 801d6c2:	bd30      	pop	{r4, r5, pc}
 801d6c4:	220c      	movs	r2, #12
 801d6c6:	6002      	str	r2, [r0, #0]
 801d6c8:	2500      	movs	r5, #0
 801d6ca:	e7f8      	b.n	801d6be <_calloc_r+0x16>
 801d6cc:	4621      	mov	r1, r4
 801d6ce:	f001 f879 	bl	801e7c4 <memset>
 801d6d2:	e7f4      	b.n	801d6be <_calloc_r+0x16>

0801d6d4 <malloc>:
 801d6d4:	4b02      	ldr	r3, [pc, #8]	; (801d6e0 <malloc+0xc>)
 801d6d6:	4601      	mov	r1, r0
 801d6d8:	6818      	ldr	r0, [r3, #0]
 801d6da:	f000 b82b 	b.w	801d734 <_malloc_r>
 801d6de:	bf00      	nop
 801d6e0:	2000538c 	.word	0x2000538c

0801d6e4 <free>:
 801d6e4:	4b02      	ldr	r3, [pc, #8]	; (801d6f0 <free+0xc>)
 801d6e6:	4601      	mov	r1, r0
 801d6e8:	6818      	ldr	r0, [r3, #0]
 801d6ea:	f001 b95b 	b.w	801e9a4 <_free_r>
 801d6ee:	bf00      	nop
 801d6f0:	2000538c 	.word	0x2000538c

0801d6f4 <sbrk_aligned>:
 801d6f4:	b570      	push	{r4, r5, r6, lr}
 801d6f6:	4e0e      	ldr	r6, [pc, #56]	; (801d730 <sbrk_aligned+0x3c>)
 801d6f8:	460c      	mov	r4, r1
 801d6fa:	6831      	ldr	r1, [r6, #0]
 801d6fc:	4605      	mov	r5, r0
 801d6fe:	b911      	cbnz	r1, 801d706 <sbrk_aligned+0x12>
 801d700:	f001 f8f2 	bl	801e8e8 <_sbrk_r>
 801d704:	6030      	str	r0, [r6, #0]
 801d706:	4621      	mov	r1, r4
 801d708:	4628      	mov	r0, r5
 801d70a:	f001 f8ed 	bl	801e8e8 <_sbrk_r>
 801d70e:	1c43      	adds	r3, r0, #1
 801d710:	d00a      	beq.n	801d728 <sbrk_aligned+0x34>
 801d712:	1cc4      	adds	r4, r0, #3
 801d714:	f024 0403 	bic.w	r4, r4, #3
 801d718:	42a0      	cmp	r0, r4
 801d71a:	d007      	beq.n	801d72c <sbrk_aligned+0x38>
 801d71c:	1a21      	subs	r1, r4, r0
 801d71e:	4628      	mov	r0, r5
 801d720:	f001 f8e2 	bl	801e8e8 <_sbrk_r>
 801d724:	3001      	adds	r0, #1
 801d726:	d101      	bne.n	801d72c <sbrk_aligned+0x38>
 801d728:	f04f 34ff 	mov.w	r4, #4294967295
 801d72c:	4620      	mov	r0, r4
 801d72e:	bd70      	pop	{r4, r5, r6, pc}
 801d730:	200056ac 	.word	0x200056ac

0801d734 <_malloc_r>:
 801d734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d738:	1ccd      	adds	r5, r1, #3
 801d73a:	f025 0503 	bic.w	r5, r5, #3
 801d73e:	3508      	adds	r5, #8
 801d740:	2d0c      	cmp	r5, #12
 801d742:	bf38      	it	cc
 801d744:	250c      	movcc	r5, #12
 801d746:	2d00      	cmp	r5, #0
 801d748:	4607      	mov	r7, r0
 801d74a:	db01      	blt.n	801d750 <_malloc_r+0x1c>
 801d74c:	42a9      	cmp	r1, r5
 801d74e:	d905      	bls.n	801d75c <_malloc_r+0x28>
 801d750:	230c      	movs	r3, #12
 801d752:	603b      	str	r3, [r7, #0]
 801d754:	2600      	movs	r6, #0
 801d756:	4630      	mov	r0, r6
 801d758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d75c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d830 <_malloc_r+0xfc>
 801d760:	f000 f868 	bl	801d834 <__malloc_lock>
 801d764:	f8d8 3000 	ldr.w	r3, [r8]
 801d768:	461c      	mov	r4, r3
 801d76a:	bb5c      	cbnz	r4, 801d7c4 <_malloc_r+0x90>
 801d76c:	4629      	mov	r1, r5
 801d76e:	4638      	mov	r0, r7
 801d770:	f7ff ffc0 	bl	801d6f4 <sbrk_aligned>
 801d774:	1c43      	adds	r3, r0, #1
 801d776:	4604      	mov	r4, r0
 801d778:	d155      	bne.n	801d826 <_malloc_r+0xf2>
 801d77a:	f8d8 4000 	ldr.w	r4, [r8]
 801d77e:	4626      	mov	r6, r4
 801d780:	2e00      	cmp	r6, #0
 801d782:	d145      	bne.n	801d810 <_malloc_r+0xdc>
 801d784:	2c00      	cmp	r4, #0
 801d786:	d048      	beq.n	801d81a <_malloc_r+0xe6>
 801d788:	6823      	ldr	r3, [r4, #0]
 801d78a:	4631      	mov	r1, r6
 801d78c:	4638      	mov	r0, r7
 801d78e:	eb04 0903 	add.w	r9, r4, r3
 801d792:	f001 f8a9 	bl	801e8e8 <_sbrk_r>
 801d796:	4581      	cmp	r9, r0
 801d798:	d13f      	bne.n	801d81a <_malloc_r+0xe6>
 801d79a:	6821      	ldr	r1, [r4, #0]
 801d79c:	1a6d      	subs	r5, r5, r1
 801d79e:	4629      	mov	r1, r5
 801d7a0:	4638      	mov	r0, r7
 801d7a2:	f7ff ffa7 	bl	801d6f4 <sbrk_aligned>
 801d7a6:	3001      	adds	r0, #1
 801d7a8:	d037      	beq.n	801d81a <_malloc_r+0xe6>
 801d7aa:	6823      	ldr	r3, [r4, #0]
 801d7ac:	442b      	add	r3, r5
 801d7ae:	6023      	str	r3, [r4, #0]
 801d7b0:	f8d8 3000 	ldr.w	r3, [r8]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d038      	beq.n	801d82a <_malloc_r+0xf6>
 801d7b8:	685a      	ldr	r2, [r3, #4]
 801d7ba:	42a2      	cmp	r2, r4
 801d7bc:	d12b      	bne.n	801d816 <_malloc_r+0xe2>
 801d7be:	2200      	movs	r2, #0
 801d7c0:	605a      	str	r2, [r3, #4]
 801d7c2:	e00f      	b.n	801d7e4 <_malloc_r+0xb0>
 801d7c4:	6822      	ldr	r2, [r4, #0]
 801d7c6:	1b52      	subs	r2, r2, r5
 801d7c8:	d41f      	bmi.n	801d80a <_malloc_r+0xd6>
 801d7ca:	2a0b      	cmp	r2, #11
 801d7cc:	d917      	bls.n	801d7fe <_malloc_r+0xca>
 801d7ce:	1961      	adds	r1, r4, r5
 801d7d0:	42a3      	cmp	r3, r4
 801d7d2:	6025      	str	r5, [r4, #0]
 801d7d4:	bf18      	it	ne
 801d7d6:	6059      	strne	r1, [r3, #4]
 801d7d8:	6863      	ldr	r3, [r4, #4]
 801d7da:	bf08      	it	eq
 801d7dc:	f8c8 1000 	streq.w	r1, [r8]
 801d7e0:	5162      	str	r2, [r4, r5]
 801d7e2:	604b      	str	r3, [r1, #4]
 801d7e4:	4638      	mov	r0, r7
 801d7e6:	f104 060b 	add.w	r6, r4, #11
 801d7ea:	f000 f829 	bl	801d840 <__malloc_unlock>
 801d7ee:	f026 0607 	bic.w	r6, r6, #7
 801d7f2:	1d23      	adds	r3, r4, #4
 801d7f4:	1af2      	subs	r2, r6, r3
 801d7f6:	d0ae      	beq.n	801d756 <_malloc_r+0x22>
 801d7f8:	1b9b      	subs	r3, r3, r6
 801d7fa:	50a3      	str	r3, [r4, r2]
 801d7fc:	e7ab      	b.n	801d756 <_malloc_r+0x22>
 801d7fe:	42a3      	cmp	r3, r4
 801d800:	6862      	ldr	r2, [r4, #4]
 801d802:	d1dd      	bne.n	801d7c0 <_malloc_r+0x8c>
 801d804:	f8c8 2000 	str.w	r2, [r8]
 801d808:	e7ec      	b.n	801d7e4 <_malloc_r+0xb0>
 801d80a:	4623      	mov	r3, r4
 801d80c:	6864      	ldr	r4, [r4, #4]
 801d80e:	e7ac      	b.n	801d76a <_malloc_r+0x36>
 801d810:	4634      	mov	r4, r6
 801d812:	6876      	ldr	r6, [r6, #4]
 801d814:	e7b4      	b.n	801d780 <_malloc_r+0x4c>
 801d816:	4613      	mov	r3, r2
 801d818:	e7cc      	b.n	801d7b4 <_malloc_r+0x80>
 801d81a:	230c      	movs	r3, #12
 801d81c:	603b      	str	r3, [r7, #0]
 801d81e:	4638      	mov	r0, r7
 801d820:	f000 f80e 	bl	801d840 <__malloc_unlock>
 801d824:	e797      	b.n	801d756 <_malloc_r+0x22>
 801d826:	6025      	str	r5, [r4, #0]
 801d828:	e7dc      	b.n	801d7e4 <_malloc_r+0xb0>
 801d82a:	605b      	str	r3, [r3, #4]
 801d82c:	deff      	udf	#255	; 0xff
 801d82e:	bf00      	nop
 801d830:	200056a8 	.word	0x200056a8

0801d834 <__malloc_lock>:
 801d834:	4801      	ldr	r0, [pc, #4]	; (801d83c <__malloc_lock+0x8>)
 801d836:	f001 b8a4 	b.w	801e982 <__retarget_lock_acquire_recursive>
 801d83a:	bf00      	nop
 801d83c:	200057f0 	.word	0x200057f0

0801d840 <__malloc_unlock>:
 801d840:	4801      	ldr	r0, [pc, #4]	; (801d848 <__malloc_unlock+0x8>)
 801d842:	f001 b89f 	b.w	801e984 <__retarget_lock_release_recursive>
 801d846:	bf00      	nop
 801d848:	200057f0 	.word	0x200057f0

0801d84c <_realloc_r>:
 801d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d850:	4680      	mov	r8, r0
 801d852:	4614      	mov	r4, r2
 801d854:	460e      	mov	r6, r1
 801d856:	b921      	cbnz	r1, 801d862 <_realloc_r+0x16>
 801d858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d85c:	4611      	mov	r1, r2
 801d85e:	f7ff bf69 	b.w	801d734 <_malloc_r>
 801d862:	b92a      	cbnz	r2, 801d870 <_realloc_r+0x24>
 801d864:	f001 f89e 	bl	801e9a4 <_free_r>
 801d868:	4625      	mov	r5, r4
 801d86a:	4628      	mov	r0, r5
 801d86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d870:	f002 f8fb 	bl	801fa6a <_malloc_usable_size_r>
 801d874:	4284      	cmp	r4, r0
 801d876:	4607      	mov	r7, r0
 801d878:	d802      	bhi.n	801d880 <_realloc_r+0x34>
 801d87a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d87e:	d812      	bhi.n	801d8a6 <_realloc_r+0x5a>
 801d880:	4621      	mov	r1, r4
 801d882:	4640      	mov	r0, r8
 801d884:	f7ff ff56 	bl	801d734 <_malloc_r>
 801d888:	4605      	mov	r5, r0
 801d88a:	2800      	cmp	r0, #0
 801d88c:	d0ed      	beq.n	801d86a <_realloc_r+0x1e>
 801d88e:	42bc      	cmp	r4, r7
 801d890:	4622      	mov	r2, r4
 801d892:	4631      	mov	r1, r6
 801d894:	bf28      	it	cs
 801d896:	463a      	movcs	r2, r7
 801d898:	f001 f875 	bl	801e986 <memcpy>
 801d89c:	4631      	mov	r1, r6
 801d89e:	4640      	mov	r0, r8
 801d8a0:	f001 f880 	bl	801e9a4 <_free_r>
 801d8a4:	e7e1      	b.n	801d86a <_realloc_r+0x1e>
 801d8a6:	4635      	mov	r5, r6
 801d8a8:	e7df      	b.n	801d86a <_realloc_r+0x1e>

0801d8aa <sulp>:
 801d8aa:	b570      	push	{r4, r5, r6, lr}
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	460d      	mov	r5, r1
 801d8b0:	ec45 4b10 	vmov	d0, r4, r5
 801d8b4:	4616      	mov	r6, r2
 801d8b6:	f001 ff97 	bl	801f7e8 <__ulp>
 801d8ba:	ec51 0b10 	vmov	r0, r1, d0
 801d8be:	b17e      	cbz	r6, 801d8e0 <sulp+0x36>
 801d8c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d8c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	dd09      	ble.n	801d8e0 <sulp+0x36>
 801d8cc:	051b      	lsls	r3, r3, #20
 801d8ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801d8d2:	2400      	movs	r4, #0
 801d8d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801d8d8:	4622      	mov	r2, r4
 801d8da:	462b      	mov	r3, r5
 801d8dc:	f7e2 febc 	bl	8000658 <__aeabi_dmul>
 801d8e0:	bd70      	pop	{r4, r5, r6, pc}
 801d8e2:	0000      	movs	r0, r0
 801d8e4:	0000      	movs	r0, r0
	...

0801d8e8 <_strtod_l>:
 801d8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8ec:	ed2d 8b02 	vpush	{d8}
 801d8f0:	b09b      	sub	sp, #108	; 0x6c
 801d8f2:	4604      	mov	r4, r0
 801d8f4:	9213      	str	r2, [sp, #76]	; 0x4c
 801d8f6:	2200      	movs	r2, #0
 801d8f8:	9216      	str	r2, [sp, #88]	; 0x58
 801d8fa:	460d      	mov	r5, r1
 801d8fc:	f04f 0800 	mov.w	r8, #0
 801d900:	f04f 0900 	mov.w	r9, #0
 801d904:	460a      	mov	r2, r1
 801d906:	9215      	str	r2, [sp, #84]	; 0x54
 801d908:	7811      	ldrb	r1, [r2, #0]
 801d90a:	292b      	cmp	r1, #43	; 0x2b
 801d90c:	d04c      	beq.n	801d9a8 <_strtod_l+0xc0>
 801d90e:	d83a      	bhi.n	801d986 <_strtod_l+0x9e>
 801d910:	290d      	cmp	r1, #13
 801d912:	d834      	bhi.n	801d97e <_strtod_l+0x96>
 801d914:	2908      	cmp	r1, #8
 801d916:	d834      	bhi.n	801d982 <_strtod_l+0x9a>
 801d918:	2900      	cmp	r1, #0
 801d91a:	d03d      	beq.n	801d998 <_strtod_l+0xb0>
 801d91c:	2200      	movs	r2, #0
 801d91e:	920a      	str	r2, [sp, #40]	; 0x28
 801d920:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d922:	7832      	ldrb	r2, [r6, #0]
 801d924:	2a30      	cmp	r2, #48	; 0x30
 801d926:	f040 80b4 	bne.w	801da92 <_strtod_l+0x1aa>
 801d92a:	7872      	ldrb	r2, [r6, #1]
 801d92c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801d930:	2a58      	cmp	r2, #88	; 0x58
 801d932:	d170      	bne.n	801da16 <_strtod_l+0x12e>
 801d934:	9302      	str	r3, [sp, #8]
 801d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d938:	9301      	str	r3, [sp, #4]
 801d93a:	ab16      	add	r3, sp, #88	; 0x58
 801d93c:	9300      	str	r3, [sp, #0]
 801d93e:	4a8e      	ldr	r2, [pc, #568]	; (801db78 <_strtod_l+0x290>)
 801d940:	ab17      	add	r3, sp, #92	; 0x5c
 801d942:	a915      	add	r1, sp, #84	; 0x54
 801d944:	4620      	mov	r0, r4
 801d946:	f001 f8e1 	bl	801eb0c <__gethex>
 801d94a:	f010 070f 	ands.w	r7, r0, #15
 801d94e:	4605      	mov	r5, r0
 801d950:	d005      	beq.n	801d95e <_strtod_l+0x76>
 801d952:	2f06      	cmp	r7, #6
 801d954:	d12a      	bne.n	801d9ac <_strtod_l+0xc4>
 801d956:	3601      	adds	r6, #1
 801d958:	2300      	movs	r3, #0
 801d95a:	9615      	str	r6, [sp, #84]	; 0x54
 801d95c:	930a      	str	r3, [sp, #40]	; 0x28
 801d95e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d960:	2b00      	cmp	r3, #0
 801d962:	f040 857f 	bne.w	801e464 <_strtod_l+0xb7c>
 801d966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d968:	b1db      	cbz	r3, 801d9a2 <_strtod_l+0xba>
 801d96a:	4642      	mov	r2, r8
 801d96c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d970:	ec43 2b10 	vmov	d0, r2, r3
 801d974:	b01b      	add	sp, #108	; 0x6c
 801d976:	ecbd 8b02 	vpop	{d8}
 801d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d97e:	2920      	cmp	r1, #32
 801d980:	d1cc      	bne.n	801d91c <_strtod_l+0x34>
 801d982:	3201      	adds	r2, #1
 801d984:	e7bf      	b.n	801d906 <_strtod_l+0x1e>
 801d986:	292d      	cmp	r1, #45	; 0x2d
 801d988:	d1c8      	bne.n	801d91c <_strtod_l+0x34>
 801d98a:	2101      	movs	r1, #1
 801d98c:	910a      	str	r1, [sp, #40]	; 0x28
 801d98e:	1c51      	adds	r1, r2, #1
 801d990:	9115      	str	r1, [sp, #84]	; 0x54
 801d992:	7852      	ldrb	r2, [r2, #1]
 801d994:	2a00      	cmp	r2, #0
 801d996:	d1c3      	bne.n	801d920 <_strtod_l+0x38>
 801d998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d99a:	9515      	str	r5, [sp, #84]	; 0x54
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	f040 855f 	bne.w	801e460 <_strtod_l+0xb78>
 801d9a2:	4642      	mov	r2, r8
 801d9a4:	464b      	mov	r3, r9
 801d9a6:	e7e3      	b.n	801d970 <_strtod_l+0x88>
 801d9a8:	2100      	movs	r1, #0
 801d9aa:	e7ef      	b.n	801d98c <_strtod_l+0xa4>
 801d9ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d9ae:	b13a      	cbz	r2, 801d9c0 <_strtod_l+0xd8>
 801d9b0:	2135      	movs	r1, #53	; 0x35
 801d9b2:	a818      	add	r0, sp, #96	; 0x60
 801d9b4:	f002 f815 	bl	801f9e2 <__copybits>
 801d9b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d9ba:	4620      	mov	r0, r4
 801d9bc:	f001 fbe8 	bl	801f190 <_Bfree>
 801d9c0:	3f01      	subs	r7, #1
 801d9c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d9c4:	2f04      	cmp	r7, #4
 801d9c6:	d806      	bhi.n	801d9d6 <_strtod_l+0xee>
 801d9c8:	e8df f007 	tbb	[pc, r7]
 801d9cc:	201d0314 	.word	0x201d0314
 801d9d0:	14          	.byte	0x14
 801d9d1:	00          	.byte	0x00
 801d9d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801d9d6:	05e9      	lsls	r1, r5, #23
 801d9d8:	bf48      	it	mi
 801d9da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801d9de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d9e2:	0d1b      	lsrs	r3, r3, #20
 801d9e4:	051b      	lsls	r3, r3, #20
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d1b9      	bne.n	801d95e <_strtod_l+0x76>
 801d9ea:	f000 ff9f 	bl	801e92c <__errno>
 801d9ee:	2322      	movs	r3, #34	; 0x22
 801d9f0:	6003      	str	r3, [r0, #0]
 801d9f2:	e7b4      	b.n	801d95e <_strtod_l+0x76>
 801d9f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 801d9f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d9fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801da00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801da04:	e7e7      	b.n	801d9d6 <_strtod_l+0xee>
 801da06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801db80 <_strtod_l+0x298>
 801da0a:	e7e4      	b.n	801d9d6 <_strtod_l+0xee>
 801da0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801da10:	f04f 38ff 	mov.w	r8, #4294967295
 801da14:	e7df      	b.n	801d9d6 <_strtod_l+0xee>
 801da16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da18:	1c5a      	adds	r2, r3, #1
 801da1a:	9215      	str	r2, [sp, #84]	; 0x54
 801da1c:	785b      	ldrb	r3, [r3, #1]
 801da1e:	2b30      	cmp	r3, #48	; 0x30
 801da20:	d0f9      	beq.n	801da16 <_strtod_l+0x12e>
 801da22:	2b00      	cmp	r3, #0
 801da24:	d09b      	beq.n	801d95e <_strtod_l+0x76>
 801da26:	2301      	movs	r3, #1
 801da28:	f04f 0a00 	mov.w	sl, #0
 801da2c:	9304      	str	r3, [sp, #16]
 801da2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da30:	930b      	str	r3, [sp, #44]	; 0x2c
 801da32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801da36:	46d3      	mov	fp, sl
 801da38:	220a      	movs	r2, #10
 801da3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801da3c:	7806      	ldrb	r6, [r0, #0]
 801da3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801da42:	b2d9      	uxtb	r1, r3
 801da44:	2909      	cmp	r1, #9
 801da46:	d926      	bls.n	801da96 <_strtod_l+0x1ae>
 801da48:	494c      	ldr	r1, [pc, #304]	; (801db7c <_strtod_l+0x294>)
 801da4a:	2201      	movs	r2, #1
 801da4c:	f000 fec2 	bl	801e7d4 <strncmp>
 801da50:	2800      	cmp	r0, #0
 801da52:	d030      	beq.n	801dab6 <_strtod_l+0x1ce>
 801da54:	2000      	movs	r0, #0
 801da56:	4632      	mov	r2, r6
 801da58:	9005      	str	r0, [sp, #20]
 801da5a:	465e      	mov	r6, fp
 801da5c:	4603      	mov	r3, r0
 801da5e:	2a65      	cmp	r2, #101	; 0x65
 801da60:	d001      	beq.n	801da66 <_strtod_l+0x17e>
 801da62:	2a45      	cmp	r2, #69	; 0x45
 801da64:	d113      	bne.n	801da8e <_strtod_l+0x1a6>
 801da66:	b91e      	cbnz	r6, 801da70 <_strtod_l+0x188>
 801da68:	9a04      	ldr	r2, [sp, #16]
 801da6a:	4302      	orrs	r2, r0
 801da6c:	d094      	beq.n	801d998 <_strtod_l+0xb0>
 801da6e:	2600      	movs	r6, #0
 801da70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801da72:	1c6a      	adds	r2, r5, #1
 801da74:	9215      	str	r2, [sp, #84]	; 0x54
 801da76:	786a      	ldrb	r2, [r5, #1]
 801da78:	2a2b      	cmp	r2, #43	; 0x2b
 801da7a:	d074      	beq.n	801db66 <_strtod_l+0x27e>
 801da7c:	2a2d      	cmp	r2, #45	; 0x2d
 801da7e:	d078      	beq.n	801db72 <_strtod_l+0x28a>
 801da80:	f04f 0c00 	mov.w	ip, #0
 801da84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801da88:	2909      	cmp	r1, #9
 801da8a:	d97f      	bls.n	801db8c <_strtod_l+0x2a4>
 801da8c:	9515      	str	r5, [sp, #84]	; 0x54
 801da8e:	2700      	movs	r7, #0
 801da90:	e09e      	b.n	801dbd0 <_strtod_l+0x2e8>
 801da92:	2300      	movs	r3, #0
 801da94:	e7c8      	b.n	801da28 <_strtod_l+0x140>
 801da96:	f1bb 0f08 	cmp.w	fp, #8
 801da9a:	bfd8      	it	le
 801da9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801da9e:	f100 0001 	add.w	r0, r0, #1
 801daa2:	bfda      	itte	le
 801daa4:	fb02 3301 	mlale	r3, r2, r1, r3
 801daa8:	9309      	strle	r3, [sp, #36]	; 0x24
 801daaa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801daae:	f10b 0b01 	add.w	fp, fp, #1
 801dab2:	9015      	str	r0, [sp, #84]	; 0x54
 801dab4:	e7c1      	b.n	801da3a <_strtod_l+0x152>
 801dab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dab8:	1c5a      	adds	r2, r3, #1
 801daba:	9215      	str	r2, [sp, #84]	; 0x54
 801dabc:	785a      	ldrb	r2, [r3, #1]
 801dabe:	f1bb 0f00 	cmp.w	fp, #0
 801dac2:	d037      	beq.n	801db34 <_strtod_l+0x24c>
 801dac4:	9005      	str	r0, [sp, #20]
 801dac6:	465e      	mov	r6, fp
 801dac8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801dacc:	2b09      	cmp	r3, #9
 801dace:	d912      	bls.n	801daf6 <_strtod_l+0x20e>
 801dad0:	2301      	movs	r3, #1
 801dad2:	e7c4      	b.n	801da5e <_strtod_l+0x176>
 801dad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dad6:	1c5a      	adds	r2, r3, #1
 801dad8:	9215      	str	r2, [sp, #84]	; 0x54
 801dada:	785a      	ldrb	r2, [r3, #1]
 801dadc:	3001      	adds	r0, #1
 801dade:	2a30      	cmp	r2, #48	; 0x30
 801dae0:	d0f8      	beq.n	801dad4 <_strtod_l+0x1ec>
 801dae2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dae6:	2b08      	cmp	r3, #8
 801dae8:	f200 84c1 	bhi.w	801e46e <_strtod_l+0xb86>
 801daec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801daee:	9005      	str	r0, [sp, #20]
 801daf0:	2000      	movs	r0, #0
 801daf2:	930b      	str	r3, [sp, #44]	; 0x2c
 801daf4:	4606      	mov	r6, r0
 801daf6:	3a30      	subs	r2, #48	; 0x30
 801daf8:	f100 0301 	add.w	r3, r0, #1
 801dafc:	d014      	beq.n	801db28 <_strtod_l+0x240>
 801dafe:	9905      	ldr	r1, [sp, #20]
 801db00:	4419      	add	r1, r3
 801db02:	9105      	str	r1, [sp, #20]
 801db04:	4633      	mov	r3, r6
 801db06:	eb00 0c06 	add.w	ip, r0, r6
 801db0a:	210a      	movs	r1, #10
 801db0c:	4563      	cmp	r3, ip
 801db0e:	d113      	bne.n	801db38 <_strtod_l+0x250>
 801db10:	1833      	adds	r3, r6, r0
 801db12:	2b08      	cmp	r3, #8
 801db14:	f106 0601 	add.w	r6, r6, #1
 801db18:	4406      	add	r6, r0
 801db1a:	dc1a      	bgt.n	801db52 <_strtod_l+0x26a>
 801db1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801db1e:	230a      	movs	r3, #10
 801db20:	fb03 2301 	mla	r3, r3, r1, r2
 801db24:	9309      	str	r3, [sp, #36]	; 0x24
 801db26:	2300      	movs	r3, #0
 801db28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801db2a:	1c51      	adds	r1, r2, #1
 801db2c:	9115      	str	r1, [sp, #84]	; 0x54
 801db2e:	7852      	ldrb	r2, [r2, #1]
 801db30:	4618      	mov	r0, r3
 801db32:	e7c9      	b.n	801dac8 <_strtod_l+0x1e0>
 801db34:	4658      	mov	r0, fp
 801db36:	e7d2      	b.n	801dade <_strtod_l+0x1f6>
 801db38:	2b08      	cmp	r3, #8
 801db3a:	f103 0301 	add.w	r3, r3, #1
 801db3e:	dc03      	bgt.n	801db48 <_strtod_l+0x260>
 801db40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801db42:	434f      	muls	r7, r1
 801db44:	9709      	str	r7, [sp, #36]	; 0x24
 801db46:	e7e1      	b.n	801db0c <_strtod_l+0x224>
 801db48:	2b10      	cmp	r3, #16
 801db4a:	bfd8      	it	le
 801db4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 801db50:	e7dc      	b.n	801db0c <_strtod_l+0x224>
 801db52:	2e10      	cmp	r6, #16
 801db54:	bfdc      	itt	le
 801db56:	230a      	movle	r3, #10
 801db58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801db5c:	e7e3      	b.n	801db26 <_strtod_l+0x23e>
 801db5e:	2300      	movs	r3, #0
 801db60:	9305      	str	r3, [sp, #20]
 801db62:	2301      	movs	r3, #1
 801db64:	e780      	b.n	801da68 <_strtod_l+0x180>
 801db66:	f04f 0c00 	mov.w	ip, #0
 801db6a:	1caa      	adds	r2, r5, #2
 801db6c:	9215      	str	r2, [sp, #84]	; 0x54
 801db6e:	78aa      	ldrb	r2, [r5, #2]
 801db70:	e788      	b.n	801da84 <_strtod_l+0x19c>
 801db72:	f04f 0c01 	mov.w	ip, #1
 801db76:	e7f8      	b.n	801db6a <_strtod_l+0x282>
 801db78:	0802973c 	.word	0x0802973c
 801db7c:	0802972c 	.word	0x0802972c
 801db80:	7ff00000 	.word	0x7ff00000
 801db84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801db86:	1c51      	adds	r1, r2, #1
 801db88:	9115      	str	r1, [sp, #84]	; 0x54
 801db8a:	7852      	ldrb	r2, [r2, #1]
 801db8c:	2a30      	cmp	r2, #48	; 0x30
 801db8e:	d0f9      	beq.n	801db84 <_strtod_l+0x29c>
 801db90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801db94:	2908      	cmp	r1, #8
 801db96:	f63f af7a 	bhi.w	801da8e <_strtod_l+0x1a6>
 801db9a:	3a30      	subs	r2, #48	; 0x30
 801db9c:	9208      	str	r2, [sp, #32]
 801db9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dba0:	920c      	str	r2, [sp, #48]	; 0x30
 801dba2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801dba4:	1c57      	adds	r7, r2, #1
 801dba6:	9715      	str	r7, [sp, #84]	; 0x54
 801dba8:	7852      	ldrb	r2, [r2, #1]
 801dbaa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801dbae:	f1be 0f09 	cmp.w	lr, #9
 801dbb2:	d938      	bls.n	801dc26 <_strtod_l+0x33e>
 801dbb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dbb6:	1a7f      	subs	r7, r7, r1
 801dbb8:	2f08      	cmp	r7, #8
 801dbba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801dbbe:	dc03      	bgt.n	801dbc8 <_strtod_l+0x2e0>
 801dbc0:	9908      	ldr	r1, [sp, #32]
 801dbc2:	428f      	cmp	r7, r1
 801dbc4:	bfa8      	it	ge
 801dbc6:	460f      	movge	r7, r1
 801dbc8:	f1bc 0f00 	cmp.w	ip, #0
 801dbcc:	d000      	beq.n	801dbd0 <_strtod_l+0x2e8>
 801dbce:	427f      	negs	r7, r7
 801dbd0:	2e00      	cmp	r6, #0
 801dbd2:	d14f      	bne.n	801dc74 <_strtod_l+0x38c>
 801dbd4:	9904      	ldr	r1, [sp, #16]
 801dbd6:	4301      	orrs	r1, r0
 801dbd8:	f47f aec1 	bne.w	801d95e <_strtod_l+0x76>
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	f47f aedb 	bne.w	801d998 <_strtod_l+0xb0>
 801dbe2:	2a69      	cmp	r2, #105	; 0x69
 801dbe4:	d029      	beq.n	801dc3a <_strtod_l+0x352>
 801dbe6:	dc26      	bgt.n	801dc36 <_strtod_l+0x34e>
 801dbe8:	2a49      	cmp	r2, #73	; 0x49
 801dbea:	d026      	beq.n	801dc3a <_strtod_l+0x352>
 801dbec:	2a4e      	cmp	r2, #78	; 0x4e
 801dbee:	f47f aed3 	bne.w	801d998 <_strtod_l+0xb0>
 801dbf2:	499b      	ldr	r1, [pc, #620]	; (801de60 <_strtod_l+0x578>)
 801dbf4:	a815      	add	r0, sp, #84	; 0x54
 801dbf6:	f001 f9c9 	bl	801ef8c <__match>
 801dbfa:	2800      	cmp	r0, #0
 801dbfc:	f43f aecc 	beq.w	801d998 <_strtod_l+0xb0>
 801dc00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc02:	781b      	ldrb	r3, [r3, #0]
 801dc04:	2b28      	cmp	r3, #40	; 0x28
 801dc06:	d12f      	bne.n	801dc68 <_strtod_l+0x380>
 801dc08:	4996      	ldr	r1, [pc, #600]	; (801de64 <_strtod_l+0x57c>)
 801dc0a:	aa18      	add	r2, sp, #96	; 0x60
 801dc0c:	a815      	add	r0, sp, #84	; 0x54
 801dc0e:	f001 f9d1 	bl	801efb4 <__hexnan>
 801dc12:	2805      	cmp	r0, #5
 801dc14:	d128      	bne.n	801dc68 <_strtod_l+0x380>
 801dc16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dc18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801dc1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801dc20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801dc24:	e69b      	b.n	801d95e <_strtod_l+0x76>
 801dc26:	9f08      	ldr	r7, [sp, #32]
 801dc28:	210a      	movs	r1, #10
 801dc2a:	fb01 2107 	mla	r1, r1, r7, r2
 801dc2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801dc32:	9208      	str	r2, [sp, #32]
 801dc34:	e7b5      	b.n	801dba2 <_strtod_l+0x2ba>
 801dc36:	2a6e      	cmp	r2, #110	; 0x6e
 801dc38:	e7d9      	b.n	801dbee <_strtod_l+0x306>
 801dc3a:	498b      	ldr	r1, [pc, #556]	; (801de68 <_strtod_l+0x580>)
 801dc3c:	a815      	add	r0, sp, #84	; 0x54
 801dc3e:	f001 f9a5 	bl	801ef8c <__match>
 801dc42:	2800      	cmp	r0, #0
 801dc44:	f43f aea8 	beq.w	801d998 <_strtod_l+0xb0>
 801dc48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc4a:	4988      	ldr	r1, [pc, #544]	; (801de6c <_strtod_l+0x584>)
 801dc4c:	3b01      	subs	r3, #1
 801dc4e:	a815      	add	r0, sp, #84	; 0x54
 801dc50:	9315      	str	r3, [sp, #84]	; 0x54
 801dc52:	f001 f99b 	bl	801ef8c <__match>
 801dc56:	b910      	cbnz	r0, 801dc5e <_strtod_l+0x376>
 801dc58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dc5a:	3301      	adds	r3, #1
 801dc5c:	9315      	str	r3, [sp, #84]	; 0x54
 801dc5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801de7c <_strtod_l+0x594>
 801dc62:	f04f 0800 	mov.w	r8, #0
 801dc66:	e67a      	b.n	801d95e <_strtod_l+0x76>
 801dc68:	4881      	ldr	r0, [pc, #516]	; (801de70 <_strtod_l+0x588>)
 801dc6a:	f7fc fd2d 	bl	801a6c8 <nan>
 801dc6e:	ec59 8b10 	vmov	r8, r9, d0
 801dc72:	e674      	b.n	801d95e <_strtod_l+0x76>
 801dc74:	9b05      	ldr	r3, [sp, #20]
 801dc76:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc78:	1afb      	subs	r3, r7, r3
 801dc7a:	f1bb 0f00 	cmp.w	fp, #0
 801dc7e:	bf08      	it	eq
 801dc80:	46b3      	moveq	fp, r6
 801dc82:	2e10      	cmp	r6, #16
 801dc84:	9308      	str	r3, [sp, #32]
 801dc86:	4635      	mov	r5, r6
 801dc88:	bfa8      	it	ge
 801dc8a:	2510      	movge	r5, #16
 801dc8c:	f7e2 fc6a 	bl	8000564 <__aeabi_ui2d>
 801dc90:	2e09      	cmp	r6, #9
 801dc92:	4680      	mov	r8, r0
 801dc94:	4689      	mov	r9, r1
 801dc96:	dd13      	ble.n	801dcc0 <_strtod_l+0x3d8>
 801dc98:	4b76      	ldr	r3, [pc, #472]	; (801de74 <_strtod_l+0x58c>)
 801dc9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801dc9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801dca2:	f7e2 fcd9 	bl	8000658 <__aeabi_dmul>
 801dca6:	4680      	mov	r8, r0
 801dca8:	4650      	mov	r0, sl
 801dcaa:	4689      	mov	r9, r1
 801dcac:	f7e2 fc5a 	bl	8000564 <__aeabi_ui2d>
 801dcb0:	4602      	mov	r2, r0
 801dcb2:	460b      	mov	r3, r1
 801dcb4:	4640      	mov	r0, r8
 801dcb6:	4649      	mov	r1, r9
 801dcb8:	f7e2 fb18 	bl	80002ec <__adddf3>
 801dcbc:	4680      	mov	r8, r0
 801dcbe:	4689      	mov	r9, r1
 801dcc0:	2e0f      	cmp	r6, #15
 801dcc2:	dc38      	bgt.n	801dd36 <_strtod_l+0x44e>
 801dcc4:	9b08      	ldr	r3, [sp, #32]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	f43f ae49 	beq.w	801d95e <_strtod_l+0x76>
 801dccc:	dd24      	ble.n	801dd18 <_strtod_l+0x430>
 801dcce:	2b16      	cmp	r3, #22
 801dcd0:	dc0b      	bgt.n	801dcea <_strtod_l+0x402>
 801dcd2:	4968      	ldr	r1, [pc, #416]	; (801de74 <_strtod_l+0x58c>)
 801dcd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dcd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dcdc:	4642      	mov	r2, r8
 801dcde:	464b      	mov	r3, r9
 801dce0:	f7e2 fcba 	bl	8000658 <__aeabi_dmul>
 801dce4:	4680      	mov	r8, r0
 801dce6:	4689      	mov	r9, r1
 801dce8:	e639      	b.n	801d95e <_strtod_l+0x76>
 801dcea:	9a08      	ldr	r2, [sp, #32]
 801dcec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 801dcf0:	4293      	cmp	r3, r2
 801dcf2:	db20      	blt.n	801dd36 <_strtod_l+0x44e>
 801dcf4:	4c5f      	ldr	r4, [pc, #380]	; (801de74 <_strtod_l+0x58c>)
 801dcf6:	f1c6 060f 	rsb	r6, r6, #15
 801dcfa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801dcfe:	4642      	mov	r2, r8
 801dd00:	464b      	mov	r3, r9
 801dd02:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd06:	f7e2 fca7 	bl	8000658 <__aeabi_dmul>
 801dd0a:	9b08      	ldr	r3, [sp, #32]
 801dd0c:	1b9e      	subs	r6, r3, r6
 801dd0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801dd12:	e9d4 2300 	ldrd	r2, r3, [r4]
 801dd16:	e7e3      	b.n	801dce0 <_strtod_l+0x3f8>
 801dd18:	9b08      	ldr	r3, [sp, #32]
 801dd1a:	3316      	adds	r3, #22
 801dd1c:	db0b      	blt.n	801dd36 <_strtod_l+0x44e>
 801dd1e:	9b05      	ldr	r3, [sp, #20]
 801dd20:	1bdf      	subs	r7, r3, r7
 801dd22:	4b54      	ldr	r3, [pc, #336]	; (801de74 <_strtod_l+0x58c>)
 801dd24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801dd28:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dd2c:	4640      	mov	r0, r8
 801dd2e:	4649      	mov	r1, r9
 801dd30:	f7e2 fdbc 	bl	80008ac <__aeabi_ddiv>
 801dd34:	e7d6      	b.n	801dce4 <_strtod_l+0x3fc>
 801dd36:	9b08      	ldr	r3, [sp, #32]
 801dd38:	1b75      	subs	r5, r6, r5
 801dd3a:	441d      	add	r5, r3
 801dd3c:	2d00      	cmp	r5, #0
 801dd3e:	dd70      	ble.n	801de22 <_strtod_l+0x53a>
 801dd40:	f015 030f 	ands.w	r3, r5, #15
 801dd44:	d00a      	beq.n	801dd5c <_strtod_l+0x474>
 801dd46:	494b      	ldr	r1, [pc, #300]	; (801de74 <_strtod_l+0x58c>)
 801dd48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dd4c:	4642      	mov	r2, r8
 801dd4e:	464b      	mov	r3, r9
 801dd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801dd54:	f7e2 fc80 	bl	8000658 <__aeabi_dmul>
 801dd58:	4680      	mov	r8, r0
 801dd5a:	4689      	mov	r9, r1
 801dd5c:	f035 050f 	bics.w	r5, r5, #15
 801dd60:	d04d      	beq.n	801ddfe <_strtod_l+0x516>
 801dd62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801dd66:	dd22      	ble.n	801ddae <_strtod_l+0x4c6>
 801dd68:	2500      	movs	r5, #0
 801dd6a:	46ab      	mov	fp, r5
 801dd6c:	9509      	str	r5, [sp, #36]	; 0x24
 801dd6e:	9505      	str	r5, [sp, #20]
 801dd70:	2322      	movs	r3, #34	; 0x22
 801dd72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801de7c <_strtod_l+0x594>
 801dd76:	6023      	str	r3, [r4, #0]
 801dd78:	f04f 0800 	mov.w	r8, #0
 801dd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	f43f aded 	beq.w	801d95e <_strtod_l+0x76>
 801dd84:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dd86:	4620      	mov	r0, r4
 801dd88:	f001 fa02 	bl	801f190 <_Bfree>
 801dd8c:	9905      	ldr	r1, [sp, #20]
 801dd8e:	4620      	mov	r0, r4
 801dd90:	f001 f9fe 	bl	801f190 <_Bfree>
 801dd94:	4659      	mov	r1, fp
 801dd96:	4620      	mov	r0, r4
 801dd98:	f001 f9fa 	bl	801f190 <_Bfree>
 801dd9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd9e:	4620      	mov	r0, r4
 801dda0:	f001 f9f6 	bl	801f190 <_Bfree>
 801dda4:	4629      	mov	r1, r5
 801dda6:	4620      	mov	r0, r4
 801dda8:	f001 f9f2 	bl	801f190 <_Bfree>
 801ddac:	e5d7      	b.n	801d95e <_strtod_l+0x76>
 801ddae:	4b32      	ldr	r3, [pc, #200]	; (801de78 <_strtod_l+0x590>)
 801ddb0:	9304      	str	r3, [sp, #16]
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	112d      	asrs	r5, r5, #4
 801ddb6:	4640      	mov	r0, r8
 801ddb8:	4649      	mov	r1, r9
 801ddba:	469a      	mov	sl, r3
 801ddbc:	2d01      	cmp	r5, #1
 801ddbe:	dc21      	bgt.n	801de04 <_strtod_l+0x51c>
 801ddc0:	b10b      	cbz	r3, 801ddc6 <_strtod_l+0x4de>
 801ddc2:	4680      	mov	r8, r0
 801ddc4:	4689      	mov	r9, r1
 801ddc6:	492c      	ldr	r1, [pc, #176]	; (801de78 <_strtod_l+0x590>)
 801ddc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801ddcc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ddd0:	4642      	mov	r2, r8
 801ddd2:	464b      	mov	r3, r9
 801ddd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ddd8:	f7e2 fc3e 	bl	8000658 <__aeabi_dmul>
 801dddc:	4b27      	ldr	r3, [pc, #156]	; (801de7c <_strtod_l+0x594>)
 801ddde:	460a      	mov	r2, r1
 801dde0:	400b      	ands	r3, r1
 801dde2:	4927      	ldr	r1, [pc, #156]	; (801de80 <_strtod_l+0x598>)
 801dde4:	428b      	cmp	r3, r1
 801dde6:	4680      	mov	r8, r0
 801dde8:	d8be      	bhi.n	801dd68 <_strtod_l+0x480>
 801ddea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ddee:	428b      	cmp	r3, r1
 801ddf0:	bf86      	itte	hi
 801ddf2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801de84 <_strtod_l+0x59c>
 801ddf6:	f04f 38ff 	movhi.w	r8, #4294967295
 801ddfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801ddfe:	2300      	movs	r3, #0
 801de00:	9304      	str	r3, [sp, #16]
 801de02:	e07b      	b.n	801defc <_strtod_l+0x614>
 801de04:	07ea      	lsls	r2, r5, #31
 801de06:	d505      	bpl.n	801de14 <_strtod_l+0x52c>
 801de08:	9b04      	ldr	r3, [sp, #16]
 801de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de0e:	f7e2 fc23 	bl	8000658 <__aeabi_dmul>
 801de12:	2301      	movs	r3, #1
 801de14:	9a04      	ldr	r2, [sp, #16]
 801de16:	3208      	adds	r2, #8
 801de18:	f10a 0a01 	add.w	sl, sl, #1
 801de1c:	106d      	asrs	r5, r5, #1
 801de1e:	9204      	str	r2, [sp, #16]
 801de20:	e7cc      	b.n	801ddbc <_strtod_l+0x4d4>
 801de22:	d0ec      	beq.n	801ddfe <_strtod_l+0x516>
 801de24:	426d      	negs	r5, r5
 801de26:	f015 020f 	ands.w	r2, r5, #15
 801de2a:	d00a      	beq.n	801de42 <_strtod_l+0x55a>
 801de2c:	4b11      	ldr	r3, [pc, #68]	; (801de74 <_strtod_l+0x58c>)
 801de2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801de32:	4640      	mov	r0, r8
 801de34:	4649      	mov	r1, r9
 801de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de3a:	f7e2 fd37 	bl	80008ac <__aeabi_ddiv>
 801de3e:	4680      	mov	r8, r0
 801de40:	4689      	mov	r9, r1
 801de42:	112d      	asrs	r5, r5, #4
 801de44:	d0db      	beq.n	801ddfe <_strtod_l+0x516>
 801de46:	2d1f      	cmp	r5, #31
 801de48:	dd1e      	ble.n	801de88 <_strtod_l+0x5a0>
 801de4a:	2500      	movs	r5, #0
 801de4c:	46ab      	mov	fp, r5
 801de4e:	9509      	str	r5, [sp, #36]	; 0x24
 801de50:	9505      	str	r5, [sp, #20]
 801de52:	2322      	movs	r3, #34	; 0x22
 801de54:	f04f 0800 	mov.w	r8, #0
 801de58:	f04f 0900 	mov.w	r9, #0
 801de5c:	6023      	str	r3, [r4, #0]
 801de5e:	e78d      	b.n	801dd7c <_strtod_l+0x494>
 801de60:	08029737 	.word	0x08029737
 801de64:	08029750 	.word	0x08029750
 801de68:	0802972e 	.word	0x0802972e
 801de6c:	08029731 	.word	0x08029731
 801de70:	0802972b 	.word	0x0802972b
 801de74:	080299a8 	.word	0x080299a8
 801de78:	08029980 	.word	0x08029980
 801de7c:	7ff00000 	.word	0x7ff00000
 801de80:	7ca00000 	.word	0x7ca00000
 801de84:	7fefffff 	.word	0x7fefffff
 801de88:	f015 0310 	ands.w	r3, r5, #16
 801de8c:	bf18      	it	ne
 801de8e:	236a      	movne	r3, #106	; 0x6a
 801de90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801e234 <_strtod_l+0x94c>
 801de94:	9304      	str	r3, [sp, #16]
 801de96:	4640      	mov	r0, r8
 801de98:	4649      	mov	r1, r9
 801de9a:	2300      	movs	r3, #0
 801de9c:	07ea      	lsls	r2, r5, #31
 801de9e:	d504      	bpl.n	801deaa <_strtod_l+0x5c2>
 801dea0:	e9da 2300 	ldrd	r2, r3, [sl]
 801dea4:	f7e2 fbd8 	bl	8000658 <__aeabi_dmul>
 801dea8:	2301      	movs	r3, #1
 801deaa:	106d      	asrs	r5, r5, #1
 801deac:	f10a 0a08 	add.w	sl, sl, #8
 801deb0:	d1f4      	bne.n	801de9c <_strtod_l+0x5b4>
 801deb2:	b10b      	cbz	r3, 801deb8 <_strtod_l+0x5d0>
 801deb4:	4680      	mov	r8, r0
 801deb6:	4689      	mov	r9, r1
 801deb8:	9b04      	ldr	r3, [sp, #16]
 801deba:	b1bb      	cbz	r3, 801deec <_strtod_l+0x604>
 801debc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801dec0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	4649      	mov	r1, r9
 801dec8:	dd10      	ble.n	801deec <_strtod_l+0x604>
 801deca:	2b1f      	cmp	r3, #31
 801decc:	f340 811e 	ble.w	801e10c <_strtod_l+0x824>
 801ded0:	2b34      	cmp	r3, #52	; 0x34
 801ded2:	bfde      	ittt	le
 801ded4:	f04f 33ff 	movle.w	r3, #4294967295
 801ded8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801dedc:	4093      	lslle	r3, r2
 801dede:	f04f 0800 	mov.w	r8, #0
 801dee2:	bfcc      	ite	gt
 801dee4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801dee8:	ea03 0901 	andle.w	r9, r3, r1
 801deec:	2200      	movs	r2, #0
 801deee:	2300      	movs	r3, #0
 801def0:	4640      	mov	r0, r8
 801def2:	4649      	mov	r1, r9
 801def4:	f7e2 fe18 	bl	8000b28 <__aeabi_dcmpeq>
 801def8:	2800      	cmp	r0, #0
 801defa:	d1a6      	bne.n	801de4a <_strtod_l+0x562>
 801defc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801defe:	9300      	str	r3, [sp, #0]
 801df00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801df02:	4633      	mov	r3, r6
 801df04:	465a      	mov	r2, fp
 801df06:	4620      	mov	r0, r4
 801df08:	f001 f9aa 	bl	801f260 <__s2b>
 801df0c:	9009      	str	r0, [sp, #36]	; 0x24
 801df0e:	2800      	cmp	r0, #0
 801df10:	f43f af2a 	beq.w	801dd68 <_strtod_l+0x480>
 801df14:	9a08      	ldr	r2, [sp, #32]
 801df16:	9b05      	ldr	r3, [sp, #20]
 801df18:	2a00      	cmp	r2, #0
 801df1a:	eba3 0307 	sub.w	r3, r3, r7
 801df1e:	bfa8      	it	ge
 801df20:	2300      	movge	r3, #0
 801df22:	930c      	str	r3, [sp, #48]	; 0x30
 801df24:	2500      	movs	r5, #0
 801df26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801df2a:	9312      	str	r3, [sp, #72]	; 0x48
 801df2c:	46ab      	mov	fp, r5
 801df2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df30:	4620      	mov	r0, r4
 801df32:	6859      	ldr	r1, [r3, #4]
 801df34:	f001 f8ec 	bl	801f110 <_Balloc>
 801df38:	9005      	str	r0, [sp, #20]
 801df3a:	2800      	cmp	r0, #0
 801df3c:	f43f af18 	beq.w	801dd70 <_strtod_l+0x488>
 801df40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df42:	691a      	ldr	r2, [r3, #16]
 801df44:	3202      	adds	r2, #2
 801df46:	f103 010c 	add.w	r1, r3, #12
 801df4a:	0092      	lsls	r2, r2, #2
 801df4c:	300c      	adds	r0, #12
 801df4e:	f000 fd1a 	bl	801e986 <memcpy>
 801df52:	ec49 8b10 	vmov	d0, r8, r9
 801df56:	aa18      	add	r2, sp, #96	; 0x60
 801df58:	a917      	add	r1, sp, #92	; 0x5c
 801df5a:	4620      	mov	r0, r4
 801df5c:	f001 fcb4 	bl	801f8c8 <__d2b>
 801df60:	ec49 8b18 	vmov	d8, r8, r9
 801df64:	9016      	str	r0, [sp, #88]	; 0x58
 801df66:	2800      	cmp	r0, #0
 801df68:	f43f af02 	beq.w	801dd70 <_strtod_l+0x488>
 801df6c:	2101      	movs	r1, #1
 801df6e:	4620      	mov	r0, r4
 801df70:	f001 fa0e 	bl	801f390 <__i2b>
 801df74:	4683      	mov	fp, r0
 801df76:	2800      	cmp	r0, #0
 801df78:	f43f aefa 	beq.w	801dd70 <_strtod_l+0x488>
 801df7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801df7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801df80:	2e00      	cmp	r6, #0
 801df82:	bfab      	itete	ge
 801df84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801df86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 801df88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801df8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801df8e:	bfac      	ite	ge
 801df90:	eb06 0a03 	addge.w	sl, r6, r3
 801df94:	1b9f      	sublt	r7, r3, r6
 801df96:	9b04      	ldr	r3, [sp, #16]
 801df98:	1af6      	subs	r6, r6, r3
 801df9a:	4416      	add	r6, r2
 801df9c:	4ba0      	ldr	r3, [pc, #640]	; (801e220 <_strtod_l+0x938>)
 801df9e:	3e01      	subs	r6, #1
 801dfa0:	429e      	cmp	r6, r3
 801dfa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801dfa6:	f280 80c4 	bge.w	801e132 <_strtod_l+0x84a>
 801dfaa:	1b9b      	subs	r3, r3, r6
 801dfac:	2b1f      	cmp	r3, #31
 801dfae:	eba2 0203 	sub.w	r2, r2, r3
 801dfb2:	f04f 0101 	mov.w	r1, #1
 801dfb6:	f300 80b0 	bgt.w	801e11a <_strtod_l+0x832>
 801dfba:	fa01 f303 	lsl.w	r3, r1, r3
 801dfbe:	930e      	str	r3, [sp, #56]	; 0x38
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	930d      	str	r3, [sp, #52]	; 0x34
 801dfc4:	eb0a 0602 	add.w	r6, sl, r2
 801dfc8:	9b04      	ldr	r3, [sp, #16]
 801dfca:	45b2      	cmp	sl, r6
 801dfcc:	4417      	add	r7, r2
 801dfce:	441f      	add	r7, r3
 801dfd0:	4653      	mov	r3, sl
 801dfd2:	bfa8      	it	ge
 801dfd4:	4633      	movge	r3, r6
 801dfd6:	42bb      	cmp	r3, r7
 801dfd8:	bfa8      	it	ge
 801dfda:	463b      	movge	r3, r7
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	bfc2      	ittt	gt
 801dfe0:	1af6      	subgt	r6, r6, r3
 801dfe2:	1aff      	subgt	r7, r7, r3
 801dfe4:	ebaa 0a03 	subgt.w	sl, sl, r3
 801dfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	dd17      	ble.n	801e01e <_strtod_l+0x736>
 801dfee:	4659      	mov	r1, fp
 801dff0:	461a      	mov	r2, r3
 801dff2:	4620      	mov	r0, r4
 801dff4:	f001 fa8c 	bl	801f510 <__pow5mult>
 801dff8:	4683      	mov	fp, r0
 801dffa:	2800      	cmp	r0, #0
 801dffc:	f43f aeb8 	beq.w	801dd70 <_strtod_l+0x488>
 801e000:	4601      	mov	r1, r0
 801e002:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e004:	4620      	mov	r0, r4
 801e006:	f001 f9d9 	bl	801f3bc <__multiply>
 801e00a:	900b      	str	r0, [sp, #44]	; 0x2c
 801e00c:	2800      	cmp	r0, #0
 801e00e:	f43f aeaf 	beq.w	801dd70 <_strtod_l+0x488>
 801e012:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e014:	4620      	mov	r0, r4
 801e016:	f001 f8bb 	bl	801f190 <_Bfree>
 801e01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e01c:	9316      	str	r3, [sp, #88]	; 0x58
 801e01e:	2e00      	cmp	r6, #0
 801e020:	f300 808c 	bgt.w	801e13c <_strtod_l+0x854>
 801e024:	9b08      	ldr	r3, [sp, #32]
 801e026:	2b00      	cmp	r3, #0
 801e028:	dd08      	ble.n	801e03c <_strtod_l+0x754>
 801e02a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e02c:	9905      	ldr	r1, [sp, #20]
 801e02e:	4620      	mov	r0, r4
 801e030:	f001 fa6e 	bl	801f510 <__pow5mult>
 801e034:	9005      	str	r0, [sp, #20]
 801e036:	2800      	cmp	r0, #0
 801e038:	f43f ae9a 	beq.w	801dd70 <_strtod_l+0x488>
 801e03c:	2f00      	cmp	r7, #0
 801e03e:	dd08      	ble.n	801e052 <_strtod_l+0x76a>
 801e040:	9905      	ldr	r1, [sp, #20]
 801e042:	463a      	mov	r2, r7
 801e044:	4620      	mov	r0, r4
 801e046:	f001 fabd 	bl	801f5c4 <__lshift>
 801e04a:	9005      	str	r0, [sp, #20]
 801e04c:	2800      	cmp	r0, #0
 801e04e:	f43f ae8f 	beq.w	801dd70 <_strtod_l+0x488>
 801e052:	f1ba 0f00 	cmp.w	sl, #0
 801e056:	dd08      	ble.n	801e06a <_strtod_l+0x782>
 801e058:	4659      	mov	r1, fp
 801e05a:	4652      	mov	r2, sl
 801e05c:	4620      	mov	r0, r4
 801e05e:	f001 fab1 	bl	801f5c4 <__lshift>
 801e062:	4683      	mov	fp, r0
 801e064:	2800      	cmp	r0, #0
 801e066:	f43f ae83 	beq.w	801dd70 <_strtod_l+0x488>
 801e06a:	9a05      	ldr	r2, [sp, #20]
 801e06c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e06e:	4620      	mov	r0, r4
 801e070:	f001 fb30 	bl	801f6d4 <__mdiff>
 801e074:	4605      	mov	r5, r0
 801e076:	2800      	cmp	r0, #0
 801e078:	f43f ae7a 	beq.w	801dd70 <_strtod_l+0x488>
 801e07c:	68c3      	ldr	r3, [r0, #12]
 801e07e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e080:	2300      	movs	r3, #0
 801e082:	60c3      	str	r3, [r0, #12]
 801e084:	4659      	mov	r1, fp
 801e086:	f001 fb09 	bl	801f69c <__mcmp>
 801e08a:	2800      	cmp	r0, #0
 801e08c:	da60      	bge.n	801e150 <_strtod_l+0x868>
 801e08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e090:	ea53 0308 	orrs.w	r3, r3, r8
 801e094:	f040 8084 	bne.w	801e1a0 <_strtod_l+0x8b8>
 801e098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d17f      	bne.n	801e1a0 <_strtod_l+0x8b8>
 801e0a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e0a4:	0d1b      	lsrs	r3, r3, #20
 801e0a6:	051b      	lsls	r3, r3, #20
 801e0a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e0ac:	d978      	bls.n	801e1a0 <_strtod_l+0x8b8>
 801e0ae:	696b      	ldr	r3, [r5, #20]
 801e0b0:	b913      	cbnz	r3, 801e0b8 <_strtod_l+0x7d0>
 801e0b2:	692b      	ldr	r3, [r5, #16]
 801e0b4:	2b01      	cmp	r3, #1
 801e0b6:	dd73      	ble.n	801e1a0 <_strtod_l+0x8b8>
 801e0b8:	4629      	mov	r1, r5
 801e0ba:	2201      	movs	r2, #1
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f001 fa81 	bl	801f5c4 <__lshift>
 801e0c2:	4659      	mov	r1, fp
 801e0c4:	4605      	mov	r5, r0
 801e0c6:	f001 fae9 	bl	801f69c <__mcmp>
 801e0ca:	2800      	cmp	r0, #0
 801e0cc:	dd68      	ble.n	801e1a0 <_strtod_l+0x8b8>
 801e0ce:	9904      	ldr	r1, [sp, #16]
 801e0d0:	4a54      	ldr	r2, [pc, #336]	; (801e224 <_strtod_l+0x93c>)
 801e0d2:	464b      	mov	r3, r9
 801e0d4:	2900      	cmp	r1, #0
 801e0d6:	f000 8084 	beq.w	801e1e2 <_strtod_l+0x8fa>
 801e0da:	ea02 0109 	and.w	r1, r2, r9
 801e0de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e0e2:	dc7e      	bgt.n	801e1e2 <_strtod_l+0x8fa>
 801e0e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e0e8:	f77f aeb3 	ble.w	801de52 <_strtod_l+0x56a>
 801e0ec:	4b4e      	ldr	r3, [pc, #312]	; (801e228 <_strtod_l+0x940>)
 801e0ee:	4640      	mov	r0, r8
 801e0f0:	4649      	mov	r1, r9
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	f7e2 fab0 	bl	8000658 <__aeabi_dmul>
 801e0f8:	4b4a      	ldr	r3, [pc, #296]	; (801e224 <_strtod_l+0x93c>)
 801e0fa:	400b      	ands	r3, r1
 801e0fc:	4680      	mov	r8, r0
 801e0fe:	4689      	mov	r9, r1
 801e100:	2b00      	cmp	r3, #0
 801e102:	f47f ae3f 	bne.w	801dd84 <_strtod_l+0x49c>
 801e106:	2322      	movs	r3, #34	; 0x22
 801e108:	6023      	str	r3, [r4, #0]
 801e10a:	e63b      	b.n	801dd84 <_strtod_l+0x49c>
 801e10c:	f04f 32ff 	mov.w	r2, #4294967295
 801e110:	fa02 f303 	lsl.w	r3, r2, r3
 801e114:	ea03 0808 	and.w	r8, r3, r8
 801e118:	e6e8      	b.n	801deec <_strtod_l+0x604>
 801e11a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801e11e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801e122:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801e126:	36e2      	adds	r6, #226	; 0xe2
 801e128:	fa01 f306 	lsl.w	r3, r1, r6
 801e12c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801e130:	e748      	b.n	801dfc4 <_strtod_l+0x6dc>
 801e132:	2100      	movs	r1, #0
 801e134:	2301      	movs	r3, #1
 801e136:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801e13a:	e743      	b.n	801dfc4 <_strtod_l+0x6dc>
 801e13c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e13e:	4632      	mov	r2, r6
 801e140:	4620      	mov	r0, r4
 801e142:	f001 fa3f 	bl	801f5c4 <__lshift>
 801e146:	9016      	str	r0, [sp, #88]	; 0x58
 801e148:	2800      	cmp	r0, #0
 801e14a:	f47f af6b 	bne.w	801e024 <_strtod_l+0x73c>
 801e14e:	e60f      	b.n	801dd70 <_strtod_l+0x488>
 801e150:	46ca      	mov	sl, r9
 801e152:	d171      	bne.n	801e238 <_strtod_l+0x950>
 801e154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e156:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e15a:	b352      	cbz	r2, 801e1b2 <_strtod_l+0x8ca>
 801e15c:	4a33      	ldr	r2, [pc, #204]	; (801e22c <_strtod_l+0x944>)
 801e15e:	4293      	cmp	r3, r2
 801e160:	d12a      	bne.n	801e1b8 <_strtod_l+0x8d0>
 801e162:	9b04      	ldr	r3, [sp, #16]
 801e164:	4641      	mov	r1, r8
 801e166:	b1fb      	cbz	r3, 801e1a8 <_strtod_l+0x8c0>
 801e168:	4b2e      	ldr	r3, [pc, #184]	; (801e224 <_strtod_l+0x93c>)
 801e16a:	ea09 0303 	and.w	r3, r9, r3
 801e16e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e172:	f04f 32ff 	mov.w	r2, #4294967295
 801e176:	d81a      	bhi.n	801e1ae <_strtod_l+0x8c6>
 801e178:	0d1b      	lsrs	r3, r3, #20
 801e17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e17e:	fa02 f303 	lsl.w	r3, r2, r3
 801e182:	4299      	cmp	r1, r3
 801e184:	d118      	bne.n	801e1b8 <_strtod_l+0x8d0>
 801e186:	4b2a      	ldr	r3, [pc, #168]	; (801e230 <_strtod_l+0x948>)
 801e188:	459a      	cmp	sl, r3
 801e18a:	d102      	bne.n	801e192 <_strtod_l+0x8aa>
 801e18c:	3101      	adds	r1, #1
 801e18e:	f43f adef 	beq.w	801dd70 <_strtod_l+0x488>
 801e192:	4b24      	ldr	r3, [pc, #144]	; (801e224 <_strtod_l+0x93c>)
 801e194:	ea0a 0303 	and.w	r3, sl, r3
 801e198:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e19c:	f04f 0800 	mov.w	r8, #0
 801e1a0:	9b04      	ldr	r3, [sp, #16]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d1a2      	bne.n	801e0ec <_strtod_l+0x804>
 801e1a6:	e5ed      	b.n	801dd84 <_strtod_l+0x49c>
 801e1a8:	f04f 33ff 	mov.w	r3, #4294967295
 801e1ac:	e7e9      	b.n	801e182 <_strtod_l+0x89a>
 801e1ae:	4613      	mov	r3, r2
 801e1b0:	e7e7      	b.n	801e182 <_strtod_l+0x89a>
 801e1b2:	ea53 0308 	orrs.w	r3, r3, r8
 801e1b6:	d08a      	beq.n	801e0ce <_strtod_l+0x7e6>
 801e1b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e1ba:	b1e3      	cbz	r3, 801e1f6 <_strtod_l+0x90e>
 801e1bc:	ea13 0f0a 	tst.w	r3, sl
 801e1c0:	d0ee      	beq.n	801e1a0 <_strtod_l+0x8b8>
 801e1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1c4:	9a04      	ldr	r2, [sp, #16]
 801e1c6:	4640      	mov	r0, r8
 801e1c8:	4649      	mov	r1, r9
 801e1ca:	b1c3      	cbz	r3, 801e1fe <_strtod_l+0x916>
 801e1cc:	f7ff fb6d 	bl	801d8aa <sulp>
 801e1d0:	4602      	mov	r2, r0
 801e1d2:	460b      	mov	r3, r1
 801e1d4:	ec51 0b18 	vmov	r0, r1, d8
 801e1d8:	f7e2 f888 	bl	80002ec <__adddf3>
 801e1dc:	4680      	mov	r8, r0
 801e1de:	4689      	mov	r9, r1
 801e1e0:	e7de      	b.n	801e1a0 <_strtod_l+0x8b8>
 801e1e2:	4013      	ands	r3, r2
 801e1e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e1e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e1ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e1f0:	f04f 38ff 	mov.w	r8, #4294967295
 801e1f4:	e7d4      	b.n	801e1a0 <_strtod_l+0x8b8>
 801e1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1f8:	ea13 0f08 	tst.w	r3, r8
 801e1fc:	e7e0      	b.n	801e1c0 <_strtod_l+0x8d8>
 801e1fe:	f7ff fb54 	bl	801d8aa <sulp>
 801e202:	4602      	mov	r2, r0
 801e204:	460b      	mov	r3, r1
 801e206:	ec51 0b18 	vmov	r0, r1, d8
 801e20a:	f7e2 f86d 	bl	80002e8 <__aeabi_dsub>
 801e20e:	2200      	movs	r2, #0
 801e210:	2300      	movs	r3, #0
 801e212:	4680      	mov	r8, r0
 801e214:	4689      	mov	r9, r1
 801e216:	f7e2 fc87 	bl	8000b28 <__aeabi_dcmpeq>
 801e21a:	2800      	cmp	r0, #0
 801e21c:	d0c0      	beq.n	801e1a0 <_strtod_l+0x8b8>
 801e21e:	e618      	b.n	801de52 <_strtod_l+0x56a>
 801e220:	fffffc02 	.word	0xfffffc02
 801e224:	7ff00000 	.word	0x7ff00000
 801e228:	39500000 	.word	0x39500000
 801e22c:	000fffff 	.word	0x000fffff
 801e230:	7fefffff 	.word	0x7fefffff
 801e234:	08029768 	.word	0x08029768
 801e238:	4659      	mov	r1, fp
 801e23a:	4628      	mov	r0, r5
 801e23c:	f001 fb9e 	bl	801f97c <__ratio>
 801e240:	ec57 6b10 	vmov	r6, r7, d0
 801e244:	ee10 0a10 	vmov	r0, s0
 801e248:	2200      	movs	r2, #0
 801e24a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e24e:	4639      	mov	r1, r7
 801e250:	f7e2 fc7e 	bl	8000b50 <__aeabi_dcmple>
 801e254:	2800      	cmp	r0, #0
 801e256:	d071      	beq.n	801e33c <_strtod_l+0xa54>
 801e258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d17c      	bne.n	801e358 <_strtod_l+0xa70>
 801e25e:	f1b8 0f00 	cmp.w	r8, #0
 801e262:	d15a      	bne.n	801e31a <_strtod_l+0xa32>
 801e264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e268:	2b00      	cmp	r3, #0
 801e26a:	d15d      	bne.n	801e328 <_strtod_l+0xa40>
 801e26c:	4b90      	ldr	r3, [pc, #576]	; (801e4b0 <_strtod_l+0xbc8>)
 801e26e:	2200      	movs	r2, #0
 801e270:	4630      	mov	r0, r6
 801e272:	4639      	mov	r1, r7
 801e274:	f7e2 fc62 	bl	8000b3c <__aeabi_dcmplt>
 801e278:	2800      	cmp	r0, #0
 801e27a:	d15c      	bne.n	801e336 <_strtod_l+0xa4e>
 801e27c:	4630      	mov	r0, r6
 801e27e:	4639      	mov	r1, r7
 801e280:	4b8c      	ldr	r3, [pc, #560]	; (801e4b4 <_strtod_l+0xbcc>)
 801e282:	2200      	movs	r2, #0
 801e284:	f7e2 f9e8 	bl	8000658 <__aeabi_dmul>
 801e288:	4606      	mov	r6, r0
 801e28a:	460f      	mov	r7, r1
 801e28c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801e290:	9606      	str	r6, [sp, #24]
 801e292:	9307      	str	r3, [sp, #28]
 801e294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e298:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e29c:	4b86      	ldr	r3, [pc, #536]	; (801e4b8 <_strtod_l+0xbd0>)
 801e29e:	ea0a 0303 	and.w	r3, sl, r3
 801e2a2:	930d      	str	r3, [sp, #52]	; 0x34
 801e2a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e2a6:	4b85      	ldr	r3, [pc, #532]	; (801e4bc <_strtod_l+0xbd4>)
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	f040 8090 	bne.w	801e3ce <_strtod_l+0xae6>
 801e2ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801e2b2:	ec49 8b10 	vmov	d0, r8, r9
 801e2b6:	f001 fa97 	bl	801f7e8 <__ulp>
 801e2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e2be:	ec51 0b10 	vmov	r0, r1, d0
 801e2c2:	f7e2 f9c9 	bl	8000658 <__aeabi_dmul>
 801e2c6:	4642      	mov	r2, r8
 801e2c8:	464b      	mov	r3, r9
 801e2ca:	f7e2 f80f 	bl	80002ec <__adddf3>
 801e2ce:	460b      	mov	r3, r1
 801e2d0:	4979      	ldr	r1, [pc, #484]	; (801e4b8 <_strtod_l+0xbd0>)
 801e2d2:	4a7b      	ldr	r2, [pc, #492]	; (801e4c0 <_strtod_l+0xbd8>)
 801e2d4:	4019      	ands	r1, r3
 801e2d6:	4291      	cmp	r1, r2
 801e2d8:	4680      	mov	r8, r0
 801e2da:	d944      	bls.n	801e366 <_strtod_l+0xa7e>
 801e2dc:	ee18 2a90 	vmov	r2, s17
 801e2e0:	4b78      	ldr	r3, [pc, #480]	; (801e4c4 <_strtod_l+0xbdc>)
 801e2e2:	429a      	cmp	r2, r3
 801e2e4:	d104      	bne.n	801e2f0 <_strtod_l+0xa08>
 801e2e6:	ee18 3a10 	vmov	r3, s16
 801e2ea:	3301      	adds	r3, #1
 801e2ec:	f43f ad40 	beq.w	801dd70 <_strtod_l+0x488>
 801e2f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801e4c4 <_strtod_l+0xbdc>
 801e2f4:	f04f 38ff 	mov.w	r8, #4294967295
 801e2f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e2fa:	4620      	mov	r0, r4
 801e2fc:	f000 ff48 	bl	801f190 <_Bfree>
 801e300:	9905      	ldr	r1, [sp, #20]
 801e302:	4620      	mov	r0, r4
 801e304:	f000 ff44 	bl	801f190 <_Bfree>
 801e308:	4659      	mov	r1, fp
 801e30a:	4620      	mov	r0, r4
 801e30c:	f000 ff40 	bl	801f190 <_Bfree>
 801e310:	4629      	mov	r1, r5
 801e312:	4620      	mov	r0, r4
 801e314:	f000 ff3c 	bl	801f190 <_Bfree>
 801e318:	e609      	b.n	801df2e <_strtod_l+0x646>
 801e31a:	f1b8 0f01 	cmp.w	r8, #1
 801e31e:	d103      	bne.n	801e328 <_strtod_l+0xa40>
 801e320:	f1b9 0f00 	cmp.w	r9, #0
 801e324:	f43f ad95 	beq.w	801de52 <_strtod_l+0x56a>
 801e328:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e480 <_strtod_l+0xb98>
 801e32c:	4f60      	ldr	r7, [pc, #384]	; (801e4b0 <_strtod_l+0xbc8>)
 801e32e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e332:	2600      	movs	r6, #0
 801e334:	e7ae      	b.n	801e294 <_strtod_l+0x9ac>
 801e336:	4f5f      	ldr	r7, [pc, #380]	; (801e4b4 <_strtod_l+0xbcc>)
 801e338:	2600      	movs	r6, #0
 801e33a:	e7a7      	b.n	801e28c <_strtod_l+0x9a4>
 801e33c:	4b5d      	ldr	r3, [pc, #372]	; (801e4b4 <_strtod_l+0xbcc>)
 801e33e:	4630      	mov	r0, r6
 801e340:	4639      	mov	r1, r7
 801e342:	2200      	movs	r2, #0
 801e344:	f7e2 f988 	bl	8000658 <__aeabi_dmul>
 801e348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e34a:	4606      	mov	r6, r0
 801e34c:	460f      	mov	r7, r1
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d09c      	beq.n	801e28c <_strtod_l+0x9a4>
 801e352:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801e356:	e79d      	b.n	801e294 <_strtod_l+0x9ac>
 801e358:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801e488 <_strtod_l+0xba0>
 801e35c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e360:	ec57 6b17 	vmov	r6, r7, d7
 801e364:	e796      	b.n	801e294 <_strtod_l+0x9ac>
 801e366:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e36a:	9b04      	ldr	r3, [sp, #16]
 801e36c:	46ca      	mov	sl, r9
 801e36e:	2b00      	cmp	r3, #0
 801e370:	d1c2      	bne.n	801e2f8 <_strtod_l+0xa10>
 801e372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e376:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e378:	0d1b      	lsrs	r3, r3, #20
 801e37a:	051b      	lsls	r3, r3, #20
 801e37c:	429a      	cmp	r2, r3
 801e37e:	d1bb      	bne.n	801e2f8 <_strtod_l+0xa10>
 801e380:	4630      	mov	r0, r6
 801e382:	4639      	mov	r1, r7
 801e384:	f7e2 fd18 	bl	8000db8 <__aeabi_d2lz>
 801e388:	f7e2 f938 	bl	80005fc <__aeabi_l2d>
 801e38c:	4602      	mov	r2, r0
 801e38e:	460b      	mov	r3, r1
 801e390:	4630      	mov	r0, r6
 801e392:	4639      	mov	r1, r7
 801e394:	f7e1 ffa8 	bl	80002e8 <__aeabi_dsub>
 801e398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e39a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e39e:	ea43 0308 	orr.w	r3, r3, r8
 801e3a2:	4313      	orrs	r3, r2
 801e3a4:	4606      	mov	r6, r0
 801e3a6:	460f      	mov	r7, r1
 801e3a8:	d054      	beq.n	801e454 <_strtod_l+0xb6c>
 801e3aa:	a339      	add	r3, pc, #228	; (adr r3, 801e490 <_strtod_l+0xba8>)
 801e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b0:	f7e2 fbc4 	bl	8000b3c <__aeabi_dcmplt>
 801e3b4:	2800      	cmp	r0, #0
 801e3b6:	f47f ace5 	bne.w	801dd84 <_strtod_l+0x49c>
 801e3ba:	a337      	add	r3, pc, #220	; (adr r3, 801e498 <_strtod_l+0xbb0>)
 801e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3c0:	4630      	mov	r0, r6
 801e3c2:	4639      	mov	r1, r7
 801e3c4:	f7e2 fbd8 	bl	8000b78 <__aeabi_dcmpgt>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	d095      	beq.n	801e2f8 <_strtod_l+0xa10>
 801e3cc:	e4da      	b.n	801dd84 <_strtod_l+0x49c>
 801e3ce:	9b04      	ldr	r3, [sp, #16]
 801e3d0:	b333      	cbz	r3, 801e420 <_strtod_l+0xb38>
 801e3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e3d8:	d822      	bhi.n	801e420 <_strtod_l+0xb38>
 801e3da:	a331      	add	r3, pc, #196	; (adr r3, 801e4a0 <_strtod_l+0xbb8>)
 801e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	4639      	mov	r1, r7
 801e3e4:	f7e2 fbb4 	bl	8000b50 <__aeabi_dcmple>
 801e3e8:	b1a0      	cbz	r0, 801e414 <_strtod_l+0xb2c>
 801e3ea:	4639      	mov	r1, r7
 801e3ec:	4630      	mov	r0, r6
 801e3ee:	f7e2 fc0b 	bl	8000c08 <__aeabi_d2uiz>
 801e3f2:	2801      	cmp	r0, #1
 801e3f4:	bf38      	it	cc
 801e3f6:	2001      	movcc	r0, #1
 801e3f8:	f7e2 f8b4 	bl	8000564 <__aeabi_ui2d>
 801e3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e3fe:	4606      	mov	r6, r0
 801e400:	460f      	mov	r7, r1
 801e402:	bb23      	cbnz	r3, 801e44e <_strtod_l+0xb66>
 801e404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e408:	9010      	str	r0, [sp, #64]	; 0x40
 801e40a:	9311      	str	r3, [sp, #68]	; 0x44
 801e40c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e410:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801e414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e416:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e418:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e41c:	1a9b      	subs	r3, r3, r2
 801e41e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e420:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e424:	eeb0 0a48 	vmov.f32	s0, s16
 801e428:	eef0 0a68 	vmov.f32	s1, s17
 801e42c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e430:	f001 f9da 	bl	801f7e8 <__ulp>
 801e434:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e438:	ec53 2b10 	vmov	r2, r3, d0
 801e43c:	f7e2 f90c 	bl	8000658 <__aeabi_dmul>
 801e440:	ec53 2b18 	vmov	r2, r3, d8
 801e444:	f7e1 ff52 	bl	80002ec <__adddf3>
 801e448:	4680      	mov	r8, r0
 801e44a:	4689      	mov	r9, r1
 801e44c:	e78d      	b.n	801e36a <_strtod_l+0xa82>
 801e44e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801e452:	e7db      	b.n	801e40c <_strtod_l+0xb24>
 801e454:	a314      	add	r3, pc, #80	; (adr r3, 801e4a8 <_strtod_l+0xbc0>)
 801e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e45a:	f7e2 fb6f 	bl	8000b3c <__aeabi_dcmplt>
 801e45e:	e7b3      	b.n	801e3c8 <_strtod_l+0xae0>
 801e460:	2300      	movs	r3, #0
 801e462:	930a      	str	r3, [sp, #40]	; 0x28
 801e464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e468:	6013      	str	r3, [r2, #0]
 801e46a:	f7ff ba7c 	b.w	801d966 <_strtod_l+0x7e>
 801e46e:	2a65      	cmp	r2, #101	; 0x65
 801e470:	f43f ab75 	beq.w	801db5e <_strtod_l+0x276>
 801e474:	2a45      	cmp	r2, #69	; 0x45
 801e476:	f43f ab72 	beq.w	801db5e <_strtod_l+0x276>
 801e47a:	2301      	movs	r3, #1
 801e47c:	f7ff bbaa 	b.w	801dbd4 <_strtod_l+0x2ec>
 801e480:	00000000 	.word	0x00000000
 801e484:	bff00000 	.word	0xbff00000
 801e488:	00000000 	.word	0x00000000
 801e48c:	3ff00000 	.word	0x3ff00000
 801e490:	94a03595 	.word	0x94a03595
 801e494:	3fdfffff 	.word	0x3fdfffff
 801e498:	35afe535 	.word	0x35afe535
 801e49c:	3fe00000 	.word	0x3fe00000
 801e4a0:	ffc00000 	.word	0xffc00000
 801e4a4:	41dfffff 	.word	0x41dfffff
 801e4a8:	94a03595 	.word	0x94a03595
 801e4ac:	3fcfffff 	.word	0x3fcfffff
 801e4b0:	3ff00000 	.word	0x3ff00000
 801e4b4:	3fe00000 	.word	0x3fe00000
 801e4b8:	7ff00000 	.word	0x7ff00000
 801e4bc:	7fe00000 	.word	0x7fe00000
 801e4c0:	7c9fffff 	.word	0x7c9fffff
 801e4c4:	7fefffff 	.word	0x7fefffff

0801e4c8 <strtod>:
 801e4c8:	460a      	mov	r2, r1
 801e4ca:	4601      	mov	r1, r0
 801e4cc:	4802      	ldr	r0, [pc, #8]	; (801e4d8 <strtod+0x10>)
 801e4ce:	4b03      	ldr	r3, [pc, #12]	; (801e4dc <strtod+0x14>)
 801e4d0:	6800      	ldr	r0, [r0, #0]
 801e4d2:	f7ff ba09 	b.w	801d8e8 <_strtod_l>
 801e4d6:	bf00      	nop
 801e4d8:	2000538c 	.word	0x2000538c
 801e4dc:	200051d4 	.word	0x200051d4

0801e4e0 <std>:
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	b510      	push	{r4, lr}
 801e4e4:	4604      	mov	r4, r0
 801e4e6:	e9c0 3300 	strd	r3, r3, [r0]
 801e4ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e4ee:	6083      	str	r3, [r0, #8]
 801e4f0:	8181      	strh	r1, [r0, #12]
 801e4f2:	6643      	str	r3, [r0, #100]	; 0x64
 801e4f4:	81c2      	strh	r2, [r0, #14]
 801e4f6:	6183      	str	r3, [r0, #24]
 801e4f8:	4619      	mov	r1, r3
 801e4fa:	2208      	movs	r2, #8
 801e4fc:	305c      	adds	r0, #92	; 0x5c
 801e4fe:	f000 f961 	bl	801e7c4 <memset>
 801e502:	4b0d      	ldr	r3, [pc, #52]	; (801e538 <std+0x58>)
 801e504:	6263      	str	r3, [r4, #36]	; 0x24
 801e506:	4b0d      	ldr	r3, [pc, #52]	; (801e53c <std+0x5c>)
 801e508:	62a3      	str	r3, [r4, #40]	; 0x28
 801e50a:	4b0d      	ldr	r3, [pc, #52]	; (801e540 <std+0x60>)
 801e50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e50e:	4b0d      	ldr	r3, [pc, #52]	; (801e544 <std+0x64>)
 801e510:	6323      	str	r3, [r4, #48]	; 0x30
 801e512:	4b0d      	ldr	r3, [pc, #52]	; (801e548 <std+0x68>)
 801e514:	6224      	str	r4, [r4, #32]
 801e516:	429c      	cmp	r4, r3
 801e518:	d006      	beq.n	801e528 <std+0x48>
 801e51a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801e51e:	4294      	cmp	r4, r2
 801e520:	d002      	beq.n	801e528 <std+0x48>
 801e522:	33d0      	adds	r3, #208	; 0xd0
 801e524:	429c      	cmp	r4, r3
 801e526:	d105      	bne.n	801e534 <std+0x54>
 801e528:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e530:	f000 ba26 	b.w	801e980 <__retarget_lock_init_recursive>
 801e534:	bd10      	pop	{r4, pc}
 801e536:	bf00      	nop
 801e538:	0801e6c9 	.word	0x0801e6c9
 801e53c:	0801e6eb 	.word	0x0801e6eb
 801e540:	0801e723 	.word	0x0801e723
 801e544:	0801e747 	.word	0x0801e747
 801e548:	200056b0 	.word	0x200056b0

0801e54c <stdio_exit_handler>:
 801e54c:	4a02      	ldr	r2, [pc, #8]	; (801e558 <stdio_exit_handler+0xc>)
 801e54e:	4903      	ldr	r1, [pc, #12]	; (801e55c <stdio_exit_handler+0x10>)
 801e550:	4803      	ldr	r0, [pc, #12]	; (801e560 <stdio_exit_handler+0x14>)
 801e552:	f000 b87b 	b.w	801e64c <_fwalk_sglue>
 801e556:	bf00      	nop
 801e558:	200051c8 	.word	0x200051c8
 801e55c:	080203f9 	.word	0x080203f9
 801e560:	20005340 	.word	0x20005340

0801e564 <cleanup_stdio>:
 801e564:	6841      	ldr	r1, [r0, #4]
 801e566:	4b0c      	ldr	r3, [pc, #48]	; (801e598 <cleanup_stdio+0x34>)
 801e568:	4299      	cmp	r1, r3
 801e56a:	b510      	push	{r4, lr}
 801e56c:	4604      	mov	r4, r0
 801e56e:	d001      	beq.n	801e574 <cleanup_stdio+0x10>
 801e570:	f001 ff42 	bl	80203f8 <_fflush_r>
 801e574:	68a1      	ldr	r1, [r4, #8]
 801e576:	4b09      	ldr	r3, [pc, #36]	; (801e59c <cleanup_stdio+0x38>)
 801e578:	4299      	cmp	r1, r3
 801e57a:	d002      	beq.n	801e582 <cleanup_stdio+0x1e>
 801e57c:	4620      	mov	r0, r4
 801e57e:	f001 ff3b 	bl	80203f8 <_fflush_r>
 801e582:	68e1      	ldr	r1, [r4, #12]
 801e584:	4b06      	ldr	r3, [pc, #24]	; (801e5a0 <cleanup_stdio+0x3c>)
 801e586:	4299      	cmp	r1, r3
 801e588:	d004      	beq.n	801e594 <cleanup_stdio+0x30>
 801e58a:	4620      	mov	r0, r4
 801e58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e590:	f001 bf32 	b.w	80203f8 <_fflush_r>
 801e594:	bd10      	pop	{r4, pc}
 801e596:	bf00      	nop
 801e598:	200056b0 	.word	0x200056b0
 801e59c:	20005718 	.word	0x20005718
 801e5a0:	20005780 	.word	0x20005780

0801e5a4 <global_stdio_init.part.0>:
 801e5a4:	b510      	push	{r4, lr}
 801e5a6:	4b0b      	ldr	r3, [pc, #44]	; (801e5d4 <global_stdio_init.part.0+0x30>)
 801e5a8:	4c0b      	ldr	r4, [pc, #44]	; (801e5d8 <global_stdio_init.part.0+0x34>)
 801e5aa:	4a0c      	ldr	r2, [pc, #48]	; (801e5dc <global_stdio_init.part.0+0x38>)
 801e5ac:	601a      	str	r2, [r3, #0]
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	2200      	movs	r2, #0
 801e5b2:	2104      	movs	r1, #4
 801e5b4:	f7ff ff94 	bl	801e4e0 <std>
 801e5b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801e5bc:	2201      	movs	r2, #1
 801e5be:	2109      	movs	r1, #9
 801e5c0:	f7ff ff8e 	bl	801e4e0 <std>
 801e5c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801e5c8:	2202      	movs	r2, #2
 801e5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5ce:	2112      	movs	r1, #18
 801e5d0:	f7ff bf86 	b.w	801e4e0 <std>
 801e5d4:	200057e8 	.word	0x200057e8
 801e5d8:	200056b0 	.word	0x200056b0
 801e5dc:	0801e54d 	.word	0x0801e54d

0801e5e0 <__sfp_lock_acquire>:
 801e5e0:	4801      	ldr	r0, [pc, #4]	; (801e5e8 <__sfp_lock_acquire+0x8>)
 801e5e2:	f000 b9ce 	b.w	801e982 <__retarget_lock_acquire_recursive>
 801e5e6:	bf00      	nop
 801e5e8:	200057f1 	.word	0x200057f1

0801e5ec <__sfp_lock_release>:
 801e5ec:	4801      	ldr	r0, [pc, #4]	; (801e5f4 <__sfp_lock_release+0x8>)
 801e5ee:	f000 b9c9 	b.w	801e984 <__retarget_lock_release_recursive>
 801e5f2:	bf00      	nop
 801e5f4:	200057f1 	.word	0x200057f1

0801e5f8 <__sinit>:
 801e5f8:	b510      	push	{r4, lr}
 801e5fa:	4604      	mov	r4, r0
 801e5fc:	f7ff fff0 	bl	801e5e0 <__sfp_lock_acquire>
 801e600:	6a23      	ldr	r3, [r4, #32]
 801e602:	b11b      	cbz	r3, 801e60c <__sinit+0x14>
 801e604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e608:	f7ff bff0 	b.w	801e5ec <__sfp_lock_release>
 801e60c:	4b04      	ldr	r3, [pc, #16]	; (801e620 <__sinit+0x28>)
 801e60e:	6223      	str	r3, [r4, #32]
 801e610:	4b04      	ldr	r3, [pc, #16]	; (801e624 <__sinit+0x2c>)
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d1f5      	bne.n	801e604 <__sinit+0xc>
 801e618:	f7ff ffc4 	bl	801e5a4 <global_stdio_init.part.0>
 801e61c:	e7f2      	b.n	801e604 <__sinit+0xc>
 801e61e:	bf00      	nop
 801e620:	0801e565 	.word	0x0801e565
 801e624:	200057e8 	.word	0x200057e8

0801e628 <fiprintf>:
 801e628:	b40e      	push	{r1, r2, r3}
 801e62a:	b503      	push	{r0, r1, lr}
 801e62c:	4601      	mov	r1, r0
 801e62e:	ab03      	add	r3, sp, #12
 801e630:	4805      	ldr	r0, [pc, #20]	; (801e648 <fiprintf+0x20>)
 801e632:	f853 2b04 	ldr.w	r2, [r3], #4
 801e636:	6800      	ldr	r0, [r0, #0]
 801e638:	9301      	str	r3, [sp, #4]
 801e63a:	f001 fbad 	bl	801fd98 <_vfiprintf_r>
 801e63e:	b002      	add	sp, #8
 801e640:	f85d eb04 	ldr.w	lr, [sp], #4
 801e644:	b003      	add	sp, #12
 801e646:	4770      	bx	lr
 801e648:	2000538c 	.word	0x2000538c

0801e64c <_fwalk_sglue>:
 801e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e650:	4607      	mov	r7, r0
 801e652:	4688      	mov	r8, r1
 801e654:	4614      	mov	r4, r2
 801e656:	2600      	movs	r6, #0
 801e658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e65c:	f1b9 0901 	subs.w	r9, r9, #1
 801e660:	d505      	bpl.n	801e66e <_fwalk_sglue+0x22>
 801e662:	6824      	ldr	r4, [r4, #0]
 801e664:	2c00      	cmp	r4, #0
 801e666:	d1f7      	bne.n	801e658 <_fwalk_sglue+0xc>
 801e668:	4630      	mov	r0, r6
 801e66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e66e:	89ab      	ldrh	r3, [r5, #12]
 801e670:	2b01      	cmp	r3, #1
 801e672:	d907      	bls.n	801e684 <_fwalk_sglue+0x38>
 801e674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e678:	3301      	adds	r3, #1
 801e67a:	d003      	beq.n	801e684 <_fwalk_sglue+0x38>
 801e67c:	4629      	mov	r1, r5
 801e67e:	4638      	mov	r0, r7
 801e680:	47c0      	blx	r8
 801e682:	4306      	orrs	r6, r0
 801e684:	3568      	adds	r5, #104	; 0x68
 801e686:	e7e9      	b.n	801e65c <_fwalk_sglue+0x10>

0801e688 <siprintf>:
 801e688:	b40e      	push	{r1, r2, r3}
 801e68a:	b500      	push	{lr}
 801e68c:	b09c      	sub	sp, #112	; 0x70
 801e68e:	ab1d      	add	r3, sp, #116	; 0x74
 801e690:	9002      	str	r0, [sp, #8]
 801e692:	9006      	str	r0, [sp, #24]
 801e694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e698:	4809      	ldr	r0, [pc, #36]	; (801e6c0 <siprintf+0x38>)
 801e69a:	9107      	str	r1, [sp, #28]
 801e69c:	9104      	str	r1, [sp, #16]
 801e69e:	4909      	ldr	r1, [pc, #36]	; (801e6c4 <siprintf+0x3c>)
 801e6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6a4:	9105      	str	r1, [sp, #20]
 801e6a6:	6800      	ldr	r0, [r0, #0]
 801e6a8:	9301      	str	r3, [sp, #4]
 801e6aa:	a902      	add	r1, sp, #8
 801e6ac:	f001 fa4c 	bl	801fb48 <_svfiprintf_r>
 801e6b0:	9b02      	ldr	r3, [sp, #8]
 801e6b2:	2200      	movs	r2, #0
 801e6b4:	701a      	strb	r2, [r3, #0]
 801e6b6:	b01c      	add	sp, #112	; 0x70
 801e6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6bc:	b003      	add	sp, #12
 801e6be:	4770      	bx	lr
 801e6c0:	2000538c 	.word	0x2000538c
 801e6c4:	ffff0208 	.word	0xffff0208

0801e6c8 <__sread>:
 801e6c8:	b510      	push	{r4, lr}
 801e6ca:	460c      	mov	r4, r1
 801e6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6d0:	f000 f8e4 	bl	801e89c <_read_r>
 801e6d4:	2800      	cmp	r0, #0
 801e6d6:	bfab      	itete	ge
 801e6d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e6da:	89a3      	ldrhlt	r3, [r4, #12]
 801e6dc:	181b      	addge	r3, r3, r0
 801e6de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e6e2:	bfac      	ite	ge
 801e6e4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e6e6:	81a3      	strhlt	r3, [r4, #12]
 801e6e8:	bd10      	pop	{r4, pc}

0801e6ea <__swrite>:
 801e6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6ee:	461f      	mov	r7, r3
 801e6f0:	898b      	ldrh	r3, [r1, #12]
 801e6f2:	05db      	lsls	r3, r3, #23
 801e6f4:	4605      	mov	r5, r0
 801e6f6:	460c      	mov	r4, r1
 801e6f8:	4616      	mov	r6, r2
 801e6fa:	d505      	bpl.n	801e708 <__swrite+0x1e>
 801e6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e700:	2302      	movs	r3, #2
 801e702:	2200      	movs	r2, #0
 801e704:	f000 f8b8 	bl	801e878 <_lseek_r>
 801e708:	89a3      	ldrh	r3, [r4, #12]
 801e70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e712:	81a3      	strh	r3, [r4, #12]
 801e714:	4632      	mov	r2, r6
 801e716:	463b      	mov	r3, r7
 801e718:	4628      	mov	r0, r5
 801e71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e71e:	f000 b8f3 	b.w	801e908 <_write_r>

0801e722 <__sseek>:
 801e722:	b510      	push	{r4, lr}
 801e724:	460c      	mov	r4, r1
 801e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e72a:	f000 f8a5 	bl	801e878 <_lseek_r>
 801e72e:	1c43      	adds	r3, r0, #1
 801e730:	89a3      	ldrh	r3, [r4, #12]
 801e732:	bf15      	itete	ne
 801e734:	6560      	strne	r0, [r4, #84]	; 0x54
 801e736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e73e:	81a3      	strheq	r3, [r4, #12]
 801e740:	bf18      	it	ne
 801e742:	81a3      	strhne	r3, [r4, #12]
 801e744:	bd10      	pop	{r4, pc}

0801e746 <__sclose>:
 801e746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e74a:	f000 b885 	b.w	801e858 <_close_r>
	...

0801e750 <_vsiprintf_r>:
 801e750:	b500      	push	{lr}
 801e752:	b09b      	sub	sp, #108	; 0x6c
 801e754:	9100      	str	r1, [sp, #0]
 801e756:	9104      	str	r1, [sp, #16]
 801e758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e75c:	9105      	str	r1, [sp, #20]
 801e75e:	9102      	str	r1, [sp, #8]
 801e760:	4905      	ldr	r1, [pc, #20]	; (801e778 <_vsiprintf_r+0x28>)
 801e762:	9103      	str	r1, [sp, #12]
 801e764:	4669      	mov	r1, sp
 801e766:	f001 f9ef 	bl	801fb48 <_svfiprintf_r>
 801e76a:	9b00      	ldr	r3, [sp, #0]
 801e76c:	2200      	movs	r2, #0
 801e76e:	701a      	strb	r2, [r3, #0]
 801e770:	b01b      	add	sp, #108	; 0x6c
 801e772:	f85d fb04 	ldr.w	pc, [sp], #4
 801e776:	bf00      	nop
 801e778:	ffff0208 	.word	0xffff0208

0801e77c <vsiprintf>:
 801e77c:	4613      	mov	r3, r2
 801e77e:	460a      	mov	r2, r1
 801e780:	4601      	mov	r1, r0
 801e782:	4802      	ldr	r0, [pc, #8]	; (801e78c <vsiprintf+0x10>)
 801e784:	6800      	ldr	r0, [r0, #0]
 801e786:	f7ff bfe3 	b.w	801e750 <_vsiprintf_r>
 801e78a:	bf00      	nop
 801e78c:	2000538c 	.word	0x2000538c

0801e790 <memmove>:
 801e790:	4288      	cmp	r0, r1
 801e792:	b510      	push	{r4, lr}
 801e794:	eb01 0402 	add.w	r4, r1, r2
 801e798:	d902      	bls.n	801e7a0 <memmove+0x10>
 801e79a:	4284      	cmp	r4, r0
 801e79c:	4623      	mov	r3, r4
 801e79e:	d807      	bhi.n	801e7b0 <memmove+0x20>
 801e7a0:	1e43      	subs	r3, r0, #1
 801e7a2:	42a1      	cmp	r1, r4
 801e7a4:	d008      	beq.n	801e7b8 <memmove+0x28>
 801e7a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e7aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e7ae:	e7f8      	b.n	801e7a2 <memmove+0x12>
 801e7b0:	4402      	add	r2, r0
 801e7b2:	4601      	mov	r1, r0
 801e7b4:	428a      	cmp	r2, r1
 801e7b6:	d100      	bne.n	801e7ba <memmove+0x2a>
 801e7b8:	bd10      	pop	{r4, pc}
 801e7ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e7be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e7c2:	e7f7      	b.n	801e7b4 <memmove+0x24>

0801e7c4 <memset>:
 801e7c4:	4402      	add	r2, r0
 801e7c6:	4603      	mov	r3, r0
 801e7c8:	4293      	cmp	r3, r2
 801e7ca:	d100      	bne.n	801e7ce <memset+0xa>
 801e7cc:	4770      	bx	lr
 801e7ce:	f803 1b01 	strb.w	r1, [r3], #1
 801e7d2:	e7f9      	b.n	801e7c8 <memset+0x4>

0801e7d4 <strncmp>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	b16a      	cbz	r2, 801e7f4 <strncmp+0x20>
 801e7d8:	3901      	subs	r1, #1
 801e7da:	1884      	adds	r4, r0, r2
 801e7dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e7e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e7e4:	429a      	cmp	r2, r3
 801e7e6:	d103      	bne.n	801e7f0 <strncmp+0x1c>
 801e7e8:	42a0      	cmp	r0, r4
 801e7ea:	d001      	beq.n	801e7f0 <strncmp+0x1c>
 801e7ec:	2a00      	cmp	r2, #0
 801e7ee:	d1f5      	bne.n	801e7dc <strncmp+0x8>
 801e7f0:	1ad0      	subs	r0, r2, r3
 801e7f2:	bd10      	pop	{r4, pc}
 801e7f4:	4610      	mov	r0, r2
 801e7f6:	e7fc      	b.n	801e7f2 <strncmp+0x1e>

0801e7f8 <_raise_r>:
 801e7f8:	291f      	cmp	r1, #31
 801e7fa:	b538      	push	{r3, r4, r5, lr}
 801e7fc:	4604      	mov	r4, r0
 801e7fe:	460d      	mov	r5, r1
 801e800:	d904      	bls.n	801e80c <_raise_r+0x14>
 801e802:	2316      	movs	r3, #22
 801e804:	6003      	str	r3, [r0, #0]
 801e806:	f04f 30ff 	mov.w	r0, #4294967295
 801e80a:	bd38      	pop	{r3, r4, r5, pc}
 801e80c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e80e:	b112      	cbz	r2, 801e816 <_raise_r+0x1e>
 801e810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e814:	b94b      	cbnz	r3, 801e82a <_raise_r+0x32>
 801e816:	4620      	mov	r0, r4
 801e818:	f000 f864 	bl	801e8e4 <_getpid_r>
 801e81c:	462a      	mov	r2, r5
 801e81e:	4601      	mov	r1, r0
 801e820:	4620      	mov	r0, r4
 801e822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e826:	f000 b84b 	b.w	801e8c0 <_kill_r>
 801e82a:	2b01      	cmp	r3, #1
 801e82c:	d00a      	beq.n	801e844 <_raise_r+0x4c>
 801e82e:	1c59      	adds	r1, r3, #1
 801e830:	d103      	bne.n	801e83a <_raise_r+0x42>
 801e832:	2316      	movs	r3, #22
 801e834:	6003      	str	r3, [r0, #0]
 801e836:	2001      	movs	r0, #1
 801e838:	e7e7      	b.n	801e80a <_raise_r+0x12>
 801e83a:	2400      	movs	r4, #0
 801e83c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e840:	4628      	mov	r0, r5
 801e842:	4798      	blx	r3
 801e844:	2000      	movs	r0, #0
 801e846:	e7e0      	b.n	801e80a <_raise_r+0x12>

0801e848 <raise>:
 801e848:	4b02      	ldr	r3, [pc, #8]	; (801e854 <raise+0xc>)
 801e84a:	4601      	mov	r1, r0
 801e84c:	6818      	ldr	r0, [r3, #0]
 801e84e:	f7ff bfd3 	b.w	801e7f8 <_raise_r>
 801e852:	bf00      	nop
 801e854:	2000538c 	.word	0x2000538c

0801e858 <_close_r>:
 801e858:	b538      	push	{r3, r4, r5, lr}
 801e85a:	4d06      	ldr	r5, [pc, #24]	; (801e874 <_close_r+0x1c>)
 801e85c:	2300      	movs	r3, #0
 801e85e:	4604      	mov	r4, r0
 801e860:	4608      	mov	r0, r1
 801e862:	602b      	str	r3, [r5, #0]
 801e864:	f7f1 fe5d 	bl	8010522 <_close>
 801e868:	1c43      	adds	r3, r0, #1
 801e86a:	d102      	bne.n	801e872 <_close_r+0x1a>
 801e86c:	682b      	ldr	r3, [r5, #0]
 801e86e:	b103      	cbz	r3, 801e872 <_close_r+0x1a>
 801e870:	6023      	str	r3, [r4, #0]
 801e872:	bd38      	pop	{r3, r4, r5, pc}
 801e874:	200057ec 	.word	0x200057ec

0801e878 <_lseek_r>:
 801e878:	b538      	push	{r3, r4, r5, lr}
 801e87a:	4d07      	ldr	r5, [pc, #28]	; (801e898 <_lseek_r+0x20>)
 801e87c:	4604      	mov	r4, r0
 801e87e:	4608      	mov	r0, r1
 801e880:	4611      	mov	r1, r2
 801e882:	2200      	movs	r2, #0
 801e884:	602a      	str	r2, [r5, #0]
 801e886:	461a      	mov	r2, r3
 801e888:	f7f1 fe72 	bl	8010570 <_lseek>
 801e88c:	1c43      	adds	r3, r0, #1
 801e88e:	d102      	bne.n	801e896 <_lseek_r+0x1e>
 801e890:	682b      	ldr	r3, [r5, #0]
 801e892:	b103      	cbz	r3, 801e896 <_lseek_r+0x1e>
 801e894:	6023      	str	r3, [r4, #0]
 801e896:	bd38      	pop	{r3, r4, r5, pc}
 801e898:	200057ec 	.word	0x200057ec

0801e89c <_read_r>:
 801e89c:	b538      	push	{r3, r4, r5, lr}
 801e89e:	4d07      	ldr	r5, [pc, #28]	; (801e8bc <_read_r+0x20>)
 801e8a0:	4604      	mov	r4, r0
 801e8a2:	4608      	mov	r0, r1
 801e8a4:	4611      	mov	r1, r2
 801e8a6:	2200      	movs	r2, #0
 801e8a8:	602a      	str	r2, [r5, #0]
 801e8aa:	461a      	mov	r2, r3
 801e8ac:	f7f1 fe00 	bl	80104b0 <_read>
 801e8b0:	1c43      	adds	r3, r0, #1
 801e8b2:	d102      	bne.n	801e8ba <_read_r+0x1e>
 801e8b4:	682b      	ldr	r3, [r5, #0]
 801e8b6:	b103      	cbz	r3, 801e8ba <_read_r+0x1e>
 801e8b8:	6023      	str	r3, [r4, #0]
 801e8ba:	bd38      	pop	{r3, r4, r5, pc}
 801e8bc:	200057ec 	.word	0x200057ec

0801e8c0 <_kill_r>:
 801e8c0:	b538      	push	{r3, r4, r5, lr}
 801e8c2:	4d07      	ldr	r5, [pc, #28]	; (801e8e0 <_kill_r+0x20>)
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	4608      	mov	r0, r1
 801e8ca:	4611      	mov	r1, r2
 801e8cc:	602b      	str	r3, [r5, #0]
 801e8ce:	f7f1 fdd5 	bl	801047c <_kill>
 801e8d2:	1c43      	adds	r3, r0, #1
 801e8d4:	d102      	bne.n	801e8dc <_kill_r+0x1c>
 801e8d6:	682b      	ldr	r3, [r5, #0]
 801e8d8:	b103      	cbz	r3, 801e8dc <_kill_r+0x1c>
 801e8da:	6023      	str	r3, [r4, #0]
 801e8dc:	bd38      	pop	{r3, r4, r5, pc}
 801e8de:	bf00      	nop
 801e8e0:	200057ec 	.word	0x200057ec

0801e8e4 <_getpid_r>:
 801e8e4:	f7f1 bdc2 	b.w	801046c <_getpid>

0801e8e8 <_sbrk_r>:
 801e8e8:	b538      	push	{r3, r4, r5, lr}
 801e8ea:	4d06      	ldr	r5, [pc, #24]	; (801e904 <_sbrk_r+0x1c>)
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	4604      	mov	r4, r0
 801e8f0:	4608      	mov	r0, r1
 801e8f2:	602b      	str	r3, [r5, #0]
 801e8f4:	f7f1 fe4a 	bl	801058c <_sbrk>
 801e8f8:	1c43      	adds	r3, r0, #1
 801e8fa:	d102      	bne.n	801e902 <_sbrk_r+0x1a>
 801e8fc:	682b      	ldr	r3, [r5, #0]
 801e8fe:	b103      	cbz	r3, 801e902 <_sbrk_r+0x1a>
 801e900:	6023      	str	r3, [r4, #0]
 801e902:	bd38      	pop	{r3, r4, r5, pc}
 801e904:	200057ec 	.word	0x200057ec

0801e908 <_write_r>:
 801e908:	b538      	push	{r3, r4, r5, lr}
 801e90a:	4d07      	ldr	r5, [pc, #28]	; (801e928 <_write_r+0x20>)
 801e90c:	4604      	mov	r4, r0
 801e90e:	4608      	mov	r0, r1
 801e910:	4611      	mov	r1, r2
 801e912:	2200      	movs	r2, #0
 801e914:	602a      	str	r2, [r5, #0]
 801e916:	461a      	mov	r2, r3
 801e918:	f7f1 fde7 	bl	80104ea <_write>
 801e91c:	1c43      	adds	r3, r0, #1
 801e91e:	d102      	bne.n	801e926 <_write_r+0x1e>
 801e920:	682b      	ldr	r3, [r5, #0]
 801e922:	b103      	cbz	r3, 801e926 <_write_r+0x1e>
 801e924:	6023      	str	r3, [r4, #0]
 801e926:	bd38      	pop	{r3, r4, r5, pc}
 801e928:	200057ec 	.word	0x200057ec

0801e92c <__errno>:
 801e92c:	4b01      	ldr	r3, [pc, #4]	; (801e934 <__errno+0x8>)
 801e92e:	6818      	ldr	r0, [r3, #0]
 801e930:	4770      	bx	lr
 801e932:	bf00      	nop
 801e934:	2000538c 	.word	0x2000538c

0801e938 <__libc_init_array>:
 801e938:	b570      	push	{r4, r5, r6, lr}
 801e93a:	4d0d      	ldr	r5, [pc, #52]	; (801e970 <__libc_init_array+0x38>)
 801e93c:	4c0d      	ldr	r4, [pc, #52]	; (801e974 <__libc_init_array+0x3c>)
 801e93e:	1b64      	subs	r4, r4, r5
 801e940:	10a4      	asrs	r4, r4, #2
 801e942:	2600      	movs	r6, #0
 801e944:	42a6      	cmp	r6, r4
 801e946:	d109      	bne.n	801e95c <__libc_init_array+0x24>
 801e948:	4d0b      	ldr	r5, [pc, #44]	; (801e978 <__libc_init_array+0x40>)
 801e94a:	4c0c      	ldr	r4, [pc, #48]	; (801e97c <__libc_init_array+0x44>)
 801e94c:	f001 fe96 	bl	802067c <_init>
 801e950:	1b64      	subs	r4, r4, r5
 801e952:	10a4      	asrs	r4, r4, #2
 801e954:	2600      	movs	r6, #0
 801e956:	42a6      	cmp	r6, r4
 801e958:	d105      	bne.n	801e966 <__libc_init_array+0x2e>
 801e95a:	bd70      	pop	{r4, r5, r6, pc}
 801e95c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e960:	4798      	blx	r3
 801e962:	3601      	adds	r6, #1
 801e964:	e7ee      	b.n	801e944 <__libc_init_array+0xc>
 801e966:	f855 3b04 	ldr.w	r3, [r5], #4
 801e96a:	4798      	blx	r3
 801e96c:	3601      	adds	r6, #1
 801e96e:	e7f2      	b.n	801e956 <__libc_init_array+0x1e>
 801e970:	08029ab8 	.word	0x08029ab8
 801e974:	08029ab8 	.word	0x08029ab8
 801e978:	08029ab8 	.word	0x08029ab8
 801e97c:	08029ac4 	.word	0x08029ac4

0801e980 <__retarget_lock_init_recursive>:
 801e980:	4770      	bx	lr

0801e982 <__retarget_lock_acquire_recursive>:
 801e982:	4770      	bx	lr

0801e984 <__retarget_lock_release_recursive>:
 801e984:	4770      	bx	lr

0801e986 <memcpy>:
 801e986:	440a      	add	r2, r1
 801e988:	4291      	cmp	r1, r2
 801e98a:	f100 33ff 	add.w	r3, r0, #4294967295
 801e98e:	d100      	bne.n	801e992 <memcpy+0xc>
 801e990:	4770      	bx	lr
 801e992:	b510      	push	{r4, lr}
 801e994:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e998:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e99c:	4291      	cmp	r1, r2
 801e99e:	d1f9      	bne.n	801e994 <memcpy+0xe>
 801e9a0:	bd10      	pop	{r4, pc}
	...

0801e9a4 <_free_r>:
 801e9a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e9a6:	2900      	cmp	r1, #0
 801e9a8:	d044      	beq.n	801ea34 <_free_r+0x90>
 801e9aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e9ae:	9001      	str	r0, [sp, #4]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	f1a1 0404 	sub.w	r4, r1, #4
 801e9b6:	bfb8      	it	lt
 801e9b8:	18e4      	addlt	r4, r4, r3
 801e9ba:	f7fe ff3b 	bl	801d834 <__malloc_lock>
 801e9be:	4a1e      	ldr	r2, [pc, #120]	; (801ea38 <_free_r+0x94>)
 801e9c0:	9801      	ldr	r0, [sp, #4]
 801e9c2:	6813      	ldr	r3, [r2, #0]
 801e9c4:	b933      	cbnz	r3, 801e9d4 <_free_r+0x30>
 801e9c6:	6063      	str	r3, [r4, #4]
 801e9c8:	6014      	str	r4, [r2, #0]
 801e9ca:	b003      	add	sp, #12
 801e9cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e9d0:	f7fe bf36 	b.w	801d840 <__malloc_unlock>
 801e9d4:	42a3      	cmp	r3, r4
 801e9d6:	d908      	bls.n	801e9ea <_free_r+0x46>
 801e9d8:	6825      	ldr	r5, [r4, #0]
 801e9da:	1961      	adds	r1, r4, r5
 801e9dc:	428b      	cmp	r3, r1
 801e9de:	bf01      	itttt	eq
 801e9e0:	6819      	ldreq	r1, [r3, #0]
 801e9e2:	685b      	ldreq	r3, [r3, #4]
 801e9e4:	1949      	addeq	r1, r1, r5
 801e9e6:	6021      	streq	r1, [r4, #0]
 801e9e8:	e7ed      	b.n	801e9c6 <_free_r+0x22>
 801e9ea:	461a      	mov	r2, r3
 801e9ec:	685b      	ldr	r3, [r3, #4]
 801e9ee:	b10b      	cbz	r3, 801e9f4 <_free_r+0x50>
 801e9f0:	42a3      	cmp	r3, r4
 801e9f2:	d9fa      	bls.n	801e9ea <_free_r+0x46>
 801e9f4:	6811      	ldr	r1, [r2, #0]
 801e9f6:	1855      	adds	r5, r2, r1
 801e9f8:	42a5      	cmp	r5, r4
 801e9fa:	d10b      	bne.n	801ea14 <_free_r+0x70>
 801e9fc:	6824      	ldr	r4, [r4, #0]
 801e9fe:	4421      	add	r1, r4
 801ea00:	1854      	adds	r4, r2, r1
 801ea02:	42a3      	cmp	r3, r4
 801ea04:	6011      	str	r1, [r2, #0]
 801ea06:	d1e0      	bne.n	801e9ca <_free_r+0x26>
 801ea08:	681c      	ldr	r4, [r3, #0]
 801ea0a:	685b      	ldr	r3, [r3, #4]
 801ea0c:	6053      	str	r3, [r2, #4]
 801ea0e:	440c      	add	r4, r1
 801ea10:	6014      	str	r4, [r2, #0]
 801ea12:	e7da      	b.n	801e9ca <_free_r+0x26>
 801ea14:	d902      	bls.n	801ea1c <_free_r+0x78>
 801ea16:	230c      	movs	r3, #12
 801ea18:	6003      	str	r3, [r0, #0]
 801ea1a:	e7d6      	b.n	801e9ca <_free_r+0x26>
 801ea1c:	6825      	ldr	r5, [r4, #0]
 801ea1e:	1961      	adds	r1, r4, r5
 801ea20:	428b      	cmp	r3, r1
 801ea22:	bf04      	itt	eq
 801ea24:	6819      	ldreq	r1, [r3, #0]
 801ea26:	685b      	ldreq	r3, [r3, #4]
 801ea28:	6063      	str	r3, [r4, #4]
 801ea2a:	bf04      	itt	eq
 801ea2c:	1949      	addeq	r1, r1, r5
 801ea2e:	6021      	streq	r1, [r4, #0]
 801ea30:	6054      	str	r4, [r2, #4]
 801ea32:	e7ca      	b.n	801e9ca <_free_r+0x26>
 801ea34:	b003      	add	sp, #12
 801ea36:	bd30      	pop	{r4, r5, pc}
 801ea38:	200056a8 	.word	0x200056a8

0801ea3c <rshift>:
 801ea3c:	6903      	ldr	r3, [r0, #16]
 801ea3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ea42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea46:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ea4a:	f100 0414 	add.w	r4, r0, #20
 801ea4e:	dd45      	ble.n	801eadc <rshift+0xa0>
 801ea50:	f011 011f 	ands.w	r1, r1, #31
 801ea54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ea58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ea5c:	d10c      	bne.n	801ea78 <rshift+0x3c>
 801ea5e:	f100 0710 	add.w	r7, r0, #16
 801ea62:	4629      	mov	r1, r5
 801ea64:	42b1      	cmp	r1, r6
 801ea66:	d334      	bcc.n	801ead2 <rshift+0x96>
 801ea68:	1a9b      	subs	r3, r3, r2
 801ea6a:	009b      	lsls	r3, r3, #2
 801ea6c:	1eea      	subs	r2, r5, #3
 801ea6e:	4296      	cmp	r6, r2
 801ea70:	bf38      	it	cc
 801ea72:	2300      	movcc	r3, #0
 801ea74:	4423      	add	r3, r4
 801ea76:	e015      	b.n	801eaa4 <rshift+0x68>
 801ea78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ea7c:	f1c1 0820 	rsb	r8, r1, #32
 801ea80:	40cf      	lsrs	r7, r1
 801ea82:	f105 0e04 	add.w	lr, r5, #4
 801ea86:	46a1      	mov	r9, r4
 801ea88:	4576      	cmp	r6, lr
 801ea8a:	46f4      	mov	ip, lr
 801ea8c:	d815      	bhi.n	801eaba <rshift+0x7e>
 801ea8e:	1a9a      	subs	r2, r3, r2
 801ea90:	0092      	lsls	r2, r2, #2
 801ea92:	3a04      	subs	r2, #4
 801ea94:	3501      	adds	r5, #1
 801ea96:	42ae      	cmp	r6, r5
 801ea98:	bf38      	it	cc
 801ea9a:	2200      	movcc	r2, #0
 801ea9c:	18a3      	adds	r3, r4, r2
 801ea9e:	50a7      	str	r7, [r4, r2]
 801eaa0:	b107      	cbz	r7, 801eaa4 <rshift+0x68>
 801eaa2:	3304      	adds	r3, #4
 801eaa4:	1b1a      	subs	r2, r3, r4
 801eaa6:	42a3      	cmp	r3, r4
 801eaa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801eaac:	bf08      	it	eq
 801eaae:	2300      	moveq	r3, #0
 801eab0:	6102      	str	r2, [r0, #16]
 801eab2:	bf08      	it	eq
 801eab4:	6143      	streq	r3, [r0, #20]
 801eab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eaba:	f8dc c000 	ldr.w	ip, [ip]
 801eabe:	fa0c fc08 	lsl.w	ip, ip, r8
 801eac2:	ea4c 0707 	orr.w	r7, ip, r7
 801eac6:	f849 7b04 	str.w	r7, [r9], #4
 801eaca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801eace:	40cf      	lsrs	r7, r1
 801ead0:	e7da      	b.n	801ea88 <rshift+0x4c>
 801ead2:	f851 cb04 	ldr.w	ip, [r1], #4
 801ead6:	f847 cf04 	str.w	ip, [r7, #4]!
 801eada:	e7c3      	b.n	801ea64 <rshift+0x28>
 801eadc:	4623      	mov	r3, r4
 801eade:	e7e1      	b.n	801eaa4 <rshift+0x68>

0801eae0 <__hexdig_fun>:
 801eae0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801eae4:	2b09      	cmp	r3, #9
 801eae6:	d802      	bhi.n	801eaee <__hexdig_fun+0xe>
 801eae8:	3820      	subs	r0, #32
 801eaea:	b2c0      	uxtb	r0, r0
 801eaec:	4770      	bx	lr
 801eaee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801eaf2:	2b05      	cmp	r3, #5
 801eaf4:	d801      	bhi.n	801eafa <__hexdig_fun+0x1a>
 801eaf6:	3847      	subs	r0, #71	; 0x47
 801eaf8:	e7f7      	b.n	801eaea <__hexdig_fun+0xa>
 801eafa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801eafe:	2b05      	cmp	r3, #5
 801eb00:	d801      	bhi.n	801eb06 <__hexdig_fun+0x26>
 801eb02:	3827      	subs	r0, #39	; 0x27
 801eb04:	e7f1      	b.n	801eaea <__hexdig_fun+0xa>
 801eb06:	2000      	movs	r0, #0
 801eb08:	4770      	bx	lr
	...

0801eb0c <__gethex>:
 801eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb10:	4617      	mov	r7, r2
 801eb12:	680a      	ldr	r2, [r1, #0]
 801eb14:	b085      	sub	sp, #20
 801eb16:	f102 0b02 	add.w	fp, r2, #2
 801eb1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801eb1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801eb22:	4681      	mov	r9, r0
 801eb24:	468a      	mov	sl, r1
 801eb26:	9302      	str	r3, [sp, #8]
 801eb28:	32fe      	adds	r2, #254	; 0xfe
 801eb2a:	eb02 030b 	add.w	r3, r2, fp
 801eb2e:	46d8      	mov	r8, fp
 801eb30:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801eb34:	9301      	str	r3, [sp, #4]
 801eb36:	2830      	cmp	r0, #48	; 0x30
 801eb38:	d0f7      	beq.n	801eb2a <__gethex+0x1e>
 801eb3a:	f7ff ffd1 	bl	801eae0 <__hexdig_fun>
 801eb3e:	4604      	mov	r4, r0
 801eb40:	2800      	cmp	r0, #0
 801eb42:	d138      	bne.n	801ebb6 <__gethex+0xaa>
 801eb44:	49a7      	ldr	r1, [pc, #668]	; (801ede4 <__gethex+0x2d8>)
 801eb46:	2201      	movs	r2, #1
 801eb48:	4640      	mov	r0, r8
 801eb4a:	f7ff fe43 	bl	801e7d4 <strncmp>
 801eb4e:	4606      	mov	r6, r0
 801eb50:	2800      	cmp	r0, #0
 801eb52:	d169      	bne.n	801ec28 <__gethex+0x11c>
 801eb54:	f898 0001 	ldrb.w	r0, [r8, #1]
 801eb58:	465d      	mov	r5, fp
 801eb5a:	f7ff ffc1 	bl	801eae0 <__hexdig_fun>
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	d064      	beq.n	801ec2c <__gethex+0x120>
 801eb62:	465a      	mov	r2, fp
 801eb64:	7810      	ldrb	r0, [r2, #0]
 801eb66:	2830      	cmp	r0, #48	; 0x30
 801eb68:	4690      	mov	r8, r2
 801eb6a:	f102 0201 	add.w	r2, r2, #1
 801eb6e:	d0f9      	beq.n	801eb64 <__gethex+0x58>
 801eb70:	f7ff ffb6 	bl	801eae0 <__hexdig_fun>
 801eb74:	2301      	movs	r3, #1
 801eb76:	fab0 f480 	clz	r4, r0
 801eb7a:	0964      	lsrs	r4, r4, #5
 801eb7c:	465e      	mov	r6, fp
 801eb7e:	9301      	str	r3, [sp, #4]
 801eb80:	4642      	mov	r2, r8
 801eb82:	4615      	mov	r5, r2
 801eb84:	3201      	adds	r2, #1
 801eb86:	7828      	ldrb	r0, [r5, #0]
 801eb88:	f7ff ffaa 	bl	801eae0 <__hexdig_fun>
 801eb8c:	2800      	cmp	r0, #0
 801eb8e:	d1f8      	bne.n	801eb82 <__gethex+0x76>
 801eb90:	4994      	ldr	r1, [pc, #592]	; (801ede4 <__gethex+0x2d8>)
 801eb92:	2201      	movs	r2, #1
 801eb94:	4628      	mov	r0, r5
 801eb96:	f7ff fe1d 	bl	801e7d4 <strncmp>
 801eb9a:	b978      	cbnz	r0, 801ebbc <__gethex+0xb0>
 801eb9c:	b946      	cbnz	r6, 801ebb0 <__gethex+0xa4>
 801eb9e:	1c6e      	adds	r6, r5, #1
 801eba0:	4632      	mov	r2, r6
 801eba2:	4615      	mov	r5, r2
 801eba4:	3201      	adds	r2, #1
 801eba6:	7828      	ldrb	r0, [r5, #0]
 801eba8:	f7ff ff9a 	bl	801eae0 <__hexdig_fun>
 801ebac:	2800      	cmp	r0, #0
 801ebae:	d1f8      	bne.n	801eba2 <__gethex+0x96>
 801ebb0:	1b73      	subs	r3, r6, r5
 801ebb2:	009e      	lsls	r6, r3, #2
 801ebb4:	e004      	b.n	801ebc0 <__gethex+0xb4>
 801ebb6:	2400      	movs	r4, #0
 801ebb8:	4626      	mov	r6, r4
 801ebba:	e7e1      	b.n	801eb80 <__gethex+0x74>
 801ebbc:	2e00      	cmp	r6, #0
 801ebbe:	d1f7      	bne.n	801ebb0 <__gethex+0xa4>
 801ebc0:	782b      	ldrb	r3, [r5, #0]
 801ebc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ebc6:	2b50      	cmp	r3, #80	; 0x50
 801ebc8:	d13d      	bne.n	801ec46 <__gethex+0x13a>
 801ebca:	786b      	ldrb	r3, [r5, #1]
 801ebcc:	2b2b      	cmp	r3, #43	; 0x2b
 801ebce:	d02f      	beq.n	801ec30 <__gethex+0x124>
 801ebd0:	2b2d      	cmp	r3, #45	; 0x2d
 801ebd2:	d031      	beq.n	801ec38 <__gethex+0x12c>
 801ebd4:	1c69      	adds	r1, r5, #1
 801ebd6:	f04f 0b00 	mov.w	fp, #0
 801ebda:	7808      	ldrb	r0, [r1, #0]
 801ebdc:	f7ff ff80 	bl	801eae0 <__hexdig_fun>
 801ebe0:	1e42      	subs	r2, r0, #1
 801ebe2:	b2d2      	uxtb	r2, r2
 801ebe4:	2a18      	cmp	r2, #24
 801ebe6:	d82e      	bhi.n	801ec46 <__gethex+0x13a>
 801ebe8:	f1a0 0210 	sub.w	r2, r0, #16
 801ebec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ebf0:	f7ff ff76 	bl	801eae0 <__hexdig_fun>
 801ebf4:	f100 3cff 	add.w	ip, r0, #4294967295
 801ebf8:	fa5f fc8c 	uxtb.w	ip, ip
 801ebfc:	f1bc 0f18 	cmp.w	ip, #24
 801ec00:	d91d      	bls.n	801ec3e <__gethex+0x132>
 801ec02:	f1bb 0f00 	cmp.w	fp, #0
 801ec06:	d000      	beq.n	801ec0a <__gethex+0xfe>
 801ec08:	4252      	negs	r2, r2
 801ec0a:	4416      	add	r6, r2
 801ec0c:	f8ca 1000 	str.w	r1, [sl]
 801ec10:	b1dc      	cbz	r4, 801ec4a <__gethex+0x13e>
 801ec12:	9b01      	ldr	r3, [sp, #4]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	bf14      	ite	ne
 801ec18:	f04f 0800 	movne.w	r8, #0
 801ec1c:	f04f 0806 	moveq.w	r8, #6
 801ec20:	4640      	mov	r0, r8
 801ec22:	b005      	add	sp, #20
 801ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec28:	4645      	mov	r5, r8
 801ec2a:	4626      	mov	r6, r4
 801ec2c:	2401      	movs	r4, #1
 801ec2e:	e7c7      	b.n	801ebc0 <__gethex+0xb4>
 801ec30:	f04f 0b00 	mov.w	fp, #0
 801ec34:	1ca9      	adds	r1, r5, #2
 801ec36:	e7d0      	b.n	801ebda <__gethex+0xce>
 801ec38:	f04f 0b01 	mov.w	fp, #1
 801ec3c:	e7fa      	b.n	801ec34 <__gethex+0x128>
 801ec3e:	230a      	movs	r3, #10
 801ec40:	fb03 0002 	mla	r0, r3, r2, r0
 801ec44:	e7d0      	b.n	801ebe8 <__gethex+0xdc>
 801ec46:	4629      	mov	r1, r5
 801ec48:	e7e0      	b.n	801ec0c <__gethex+0x100>
 801ec4a:	eba5 0308 	sub.w	r3, r5, r8
 801ec4e:	3b01      	subs	r3, #1
 801ec50:	4621      	mov	r1, r4
 801ec52:	2b07      	cmp	r3, #7
 801ec54:	dc0a      	bgt.n	801ec6c <__gethex+0x160>
 801ec56:	4648      	mov	r0, r9
 801ec58:	f000 fa5a 	bl	801f110 <_Balloc>
 801ec5c:	4604      	mov	r4, r0
 801ec5e:	b940      	cbnz	r0, 801ec72 <__gethex+0x166>
 801ec60:	4b61      	ldr	r3, [pc, #388]	; (801ede8 <__gethex+0x2dc>)
 801ec62:	4602      	mov	r2, r0
 801ec64:	21e4      	movs	r1, #228	; 0xe4
 801ec66:	4861      	ldr	r0, [pc, #388]	; (801edec <__gethex+0x2e0>)
 801ec68:	f7fe fcf4 	bl	801d654 <__assert_func>
 801ec6c:	3101      	adds	r1, #1
 801ec6e:	105b      	asrs	r3, r3, #1
 801ec70:	e7ef      	b.n	801ec52 <__gethex+0x146>
 801ec72:	f100 0a14 	add.w	sl, r0, #20
 801ec76:	2300      	movs	r3, #0
 801ec78:	495a      	ldr	r1, [pc, #360]	; (801ede4 <__gethex+0x2d8>)
 801ec7a:	f8cd a004 	str.w	sl, [sp, #4]
 801ec7e:	469b      	mov	fp, r3
 801ec80:	45a8      	cmp	r8, r5
 801ec82:	d342      	bcc.n	801ed0a <__gethex+0x1fe>
 801ec84:	9801      	ldr	r0, [sp, #4]
 801ec86:	f840 bb04 	str.w	fp, [r0], #4
 801ec8a:	eba0 000a 	sub.w	r0, r0, sl
 801ec8e:	1080      	asrs	r0, r0, #2
 801ec90:	6120      	str	r0, [r4, #16]
 801ec92:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801ec96:	4658      	mov	r0, fp
 801ec98:	f000 fb2c 	bl	801f2f4 <__hi0bits>
 801ec9c:	683d      	ldr	r5, [r7, #0]
 801ec9e:	eba8 0000 	sub.w	r0, r8, r0
 801eca2:	42a8      	cmp	r0, r5
 801eca4:	dd59      	ble.n	801ed5a <__gethex+0x24e>
 801eca6:	eba0 0805 	sub.w	r8, r0, r5
 801ecaa:	4641      	mov	r1, r8
 801ecac:	4620      	mov	r0, r4
 801ecae:	f000 febb 	bl	801fa28 <__any_on>
 801ecb2:	4683      	mov	fp, r0
 801ecb4:	b1b8      	cbz	r0, 801ece6 <__gethex+0x1da>
 801ecb6:	f108 33ff 	add.w	r3, r8, #4294967295
 801ecba:	1159      	asrs	r1, r3, #5
 801ecbc:	f003 021f 	and.w	r2, r3, #31
 801ecc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ecc4:	f04f 0b01 	mov.w	fp, #1
 801ecc8:	fa0b f202 	lsl.w	r2, fp, r2
 801eccc:	420a      	tst	r2, r1
 801ecce:	d00a      	beq.n	801ece6 <__gethex+0x1da>
 801ecd0:	455b      	cmp	r3, fp
 801ecd2:	dd06      	ble.n	801ece2 <__gethex+0x1d6>
 801ecd4:	f1a8 0102 	sub.w	r1, r8, #2
 801ecd8:	4620      	mov	r0, r4
 801ecda:	f000 fea5 	bl	801fa28 <__any_on>
 801ecde:	2800      	cmp	r0, #0
 801ece0:	d138      	bne.n	801ed54 <__gethex+0x248>
 801ece2:	f04f 0b02 	mov.w	fp, #2
 801ece6:	4641      	mov	r1, r8
 801ece8:	4620      	mov	r0, r4
 801ecea:	f7ff fea7 	bl	801ea3c <rshift>
 801ecee:	4446      	add	r6, r8
 801ecf0:	68bb      	ldr	r3, [r7, #8]
 801ecf2:	42b3      	cmp	r3, r6
 801ecf4:	da41      	bge.n	801ed7a <__gethex+0x26e>
 801ecf6:	4621      	mov	r1, r4
 801ecf8:	4648      	mov	r0, r9
 801ecfa:	f000 fa49 	bl	801f190 <_Bfree>
 801ecfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed00:	2300      	movs	r3, #0
 801ed02:	6013      	str	r3, [r2, #0]
 801ed04:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ed08:	e78a      	b.n	801ec20 <__gethex+0x114>
 801ed0a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ed0e:	2a2e      	cmp	r2, #46	; 0x2e
 801ed10:	d014      	beq.n	801ed3c <__gethex+0x230>
 801ed12:	2b20      	cmp	r3, #32
 801ed14:	d106      	bne.n	801ed24 <__gethex+0x218>
 801ed16:	9b01      	ldr	r3, [sp, #4]
 801ed18:	f843 bb04 	str.w	fp, [r3], #4
 801ed1c:	f04f 0b00 	mov.w	fp, #0
 801ed20:	9301      	str	r3, [sp, #4]
 801ed22:	465b      	mov	r3, fp
 801ed24:	7828      	ldrb	r0, [r5, #0]
 801ed26:	9303      	str	r3, [sp, #12]
 801ed28:	f7ff feda 	bl	801eae0 <__hexdig_fun>
 801ed2c:	9b03      	ldr	r3, [sp, #12]
 801ed2e:	f000 000f 	and.w	r0, r0, #15
 801ed32:	4098      	lsls	r0, r3
 801ed34:	ea4b 0b00 	orr.w	fp, fp, r0
 801ed38:	3304      	adds	r3, #4
 801ed3a:	e7a1      	b.n	801ec80 <__gethex+0x174>
 801ed3c:	45a8      	cmp	r8, r5
 801ed3e:	d8e8      	bhi.n	801ed12 <__gethex+0x206>
 801ed40:	2201      	movs	r2, #1
 801ed42:	4628      	mov	r0, r5
 801ed44:	9303      	str	r3, [sp, #12]
 801ed46:	f7ff fd45 	bl	801e7d4 <strncmp>
 801ed4a:	4926      	ldr	r1, [pc, #152]	; (801ede4 <__gethex+0x2d8>)
 801ed4c:	9b03      	ldr	r3, [sp, #12]
 801ed4e:	2800      	cmp	r0, #0
 801ed50:	d1df      	bne.n	801ed12 <__gethex+0x206>
 801ed52:	e795      	b.n	801ec80 <__gethex+0x174>
 801ed54:	f04f 0b03 	mov.w	fp, #3
 801ed58:	e7c5      	b.n	801ece6 <__gethex+0x1da>
 801ed5a:	da0b      	bge.n	801ed74 <__gethex+0x268>
 801ed5c:	eba5 0800 	sub.w	r8, r5, r0
 801ed60:	4621      	mov	r1, r4
 801ed62:	4642      	mov	r2, r8
 801ed64:	4648      	mov	r0, r9
 801ed66:	f000 fc2d 	bl	801f5c4 <__lshift>
 801ed6a:	eba6 0608 	sub.w	r6, r6, r8
 801ed6e:	4604      	mov	r4, r0
 801ed70:	f100 0a14 	add.w	sl, r0, #20
 801ed74:	f04f 0b00 	mov.w	fp, #0
 801ed78:	e7ba      	b.n	801ecf0 <__gethex+0x1e4>
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	42b3      	cmp	r3, r6
 801ed7e:	dd73      	ble.n	801ee68 <__gethex+0x35c>
 801ed80:	1b9e      	subs	r6, r3, r6
 801ed82:	42b5      	cmp	r5, r6
 801ed84:	dc34      	bgt.n	801edf0 <__gethex+0x2e4>
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	2b02      	cmp	r3, #2
 801ed8a:	d023      	beq.n	801edd4 <__gethex+0x2c8>
 801ed8c:	2b03      	cmp	r3, #3
 801ed8e:	d025      	beq.n	801eddc <__gethex+0x2d0>
 801ed90:	2b01      	cmp	r3, #1
 801ed92:	d115      	bne.n	801edc0 <__gethex+0x2b4>
 801ed94:	42b5      	cmp	r5, r6
 801ed96:	d113      	bne.n	801edc0 <__gethex+0x2b4>
 801ed98:	2d01      	cmp	r5, #1
 801ed9a:	d10b      	bne.n	801edb4 <__gethex+0x2a8>
 801ed9c:	9a02      	ldr	r2, [sp, #8]
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	6013      	str	r3, [r2, #0]
 801eda2:	2301      	movs	r3, #1
 801eda4:	6123      	str	r3, [r4, #16]
 801eda6:	f8ca 3000 	str.w	r3, [sl]
 801edaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edac:	f04f 0862 	mov.w	r8, #98	; 0x62
 801edb0:	601c      	str	r4, [r3, #0]
 801edb2:	e735      	b.n	801ec20 <__gethex+0x114>
 801edb4:	1e69      	subs	r1, r5, #1
 801edb6:	4620      	mov	r0, r4
 801edb8:	f000 fe36 	bl	801fa28 <__any_on>
 801edbc:	2800      	cmp	r0, #0
 801edbe:	d1ed      	bne.n	801ed9c <__gethex+0x290>
 801edc0:	4621      	mov	r1, r4
 801edc2:	4648      	mov	r0, r9
 801edc4:	f000 f9e4 	bl	801f190 <_Bfree>
 801edc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801edca:	2300      	movs	r3, #0
 801edcc:	6013      	str	r3, [r2, #0]
 801edce:	f04f 0850 	mov.w	r8, #80	; 0x50
 801edd2:	e725      	b.n	801ec20 <__gethex+0x114>
 801edd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d1f2      	bne.n	801edc0 <__gethex+0x2b4>
 801edda:	e7df      	b.n	801ed9c <__gethex+0x290>
 801eddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d1dc      	bne.n	801ed9c <__gethex+0x290>
 801ede2:	e7ed      	b.n	801edc0 <__gethex+0x2b4>
 801ede4:	0802972c 	.word	0x0802972c
 801ede8:	08029899 	.word	0x08029899
 801edec:	080298aa 	.word	0x080298aa
 801edf0:	f106 38ff 	add.w	r8, r6, #4294967295
 801edf4:	f1bb 0f00 	cmp.w	fp, #0
 801edf8:	d133      	bne.n	801ee62 <__gethex+0x356>
 801edfa:	f1b8 0f00 	cmp.w	r8, #0
 801edfe:	d004      	beq.n	801ee0a <__gethex+0x2fe>
 801ee00:	4641      	mov	r1, r8
 801ee02:	4620      	mov	r0, r4
 801ee04:	f000 fe10 	bl	801fa28 <__any_on>
 801ee08:	4683      	mov	fp, r0
 801ee0a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801ee0e:	2301      	movs	r3, #1
 801ee10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ee14:	f008 081f 	and.w	r8, r8, #31
 801ee18:	fa03 f308 	lsl.w	r3, r3, r8
 801ee1c:	4213      	tst	r3, r2
 801ee1e:	4631      	mov	r1, r6
 801ee20:	4620      	mov	r0, r4
 801ee22:	bf18      	it	ne
 801ee24:	f04b 0b02 	orrne.w	fp, fp, #2
 801ee28:	1bad      	subs	r5, r5, r6
 801ee2a:	f7ff fe07 	bl	801ea3c <rshift>
 801ee2e:	687e      	ldr	r6, [r7, #4]
 801ee30:	f04f 0802 	mov.w	r8, #2
 801ee34:	f1bb 0f00 	cmp.w	fp, #0
 801ee38:	d04a      	beq.n	801eed0 <__gethex+0x3c4>
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	2b02      	cmp	r3, #2
 801ee3e:	d016      	beq.n	801ee6e <__gethex+0x362>
 801ee40:	2b03      	cmp	r3, #3
 801ee42:	d018      	beq.n	801ee76 <__gethex+0x36a>
 801ee44:	2b01      	cmp	r3, #1
 801ee46:	d109      	bne.n	801ee5c <__gethex+0x350>
 801ee48:	f01b 0f02 	tst.w	fp, #2
 801ee4c:	d006      	beq.n	801ee5c <__gethex+0x350>
 801ee4e:	f8da 3000 	ldr.w	r3, [sl]
 801ee52:	ea4b 0b03 	orr.w	fp, fp, r3
 801ee56:	f01b 0f01 	tst.w	fp, #1
 801ee5a:	d10f      	bne.n	801ee7c <__gethex+0x370>
 801ee5c:	f048 0810 	orr.w	r8, r8, #16
 801ee60:	e036      	b.n	801eed0 <__gethex+0x3c4>
 801ee62:	f04f 0b01 	mov.w	fp, #1
 801ee66:	e7d0      	b.n	801ee0a <__gethex+0x2fe>
 801ee68:	f04f 0801 	mov.w	r8, #1
 801ee6c:	e7e2      	b.n	801ee34 <__gethex+0x328>
 801ee6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee70:	f1c3 0301 	rsb	r3, r3, #1
 801ee74:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d0ef      	beq.n	801ee5c <__gethex+0x350>
 801ee7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ee80:	f104 0214 	add.w	r2, r4, #20
 801ee84:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801ee88:	9301      	str	r3, [sp, #4]
 801ee8a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801ee8e:	2300      	movs	r3, #0
 801ee90:	4694      	mov	ip, r2
 801ee92:	f852 1b04 	ldr.w	r1, [r2], #4
 801ee96:	f1b1 3fff 	cmp.w	r1, #4294967295
 801ee9a:	d01e      	beq.n	801eeda <__gethex+0x3ce>
 801ee9c:	3101      	adds	r1, #1
 801ee9e:	f8cc 1000 	str.w	r1, [ip]
 801eea2:	f1b8 0f02 	cmp.w	r8, #2
 801eea6:	f104 0214 	add.w	r2, r4, #20
 801eeaa:	d13d      	bne.n	801ef28 <__gethex+0x41c>
 801eeac:	683b      	ldr	r3, [r7, #0]
 801eeae:	3b01      	subs	r3, #1
 801eeb0:	42ab      	cmp	r3, r5
 801eeb2:	d10b      	bne.n	801eecc <__gethex+0x3c0>
 801eeb4:	1169      	asrs	r1, r5, #5
 801eeb6:	2301      	movs	r3, #1
 801eeb8:	f005 051f 	and.w	r5, r5, #31
 801eebc:	fa03 f505 	lsl.w	r5, r3, r5
 801eec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eec4:	421d      	tst	r5, r3
 801eec6:	bf18      	it	ne
 801eec8:	f04f 0801 	movne.w	r8, #1
 801eecc:	f048 0820 	orr.w	r8, r8, #32
 801eed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eed2:	601c      	str	r4, [r3, #0]
 801eed4:	9b02      	ldr	r3, [sp, #8]
 801eed6:	601e      	str	r6, [r3, #0]
 801eed8:	e6a2      	b.n	801ec20 <__gethex+0x114>
 801eeda:	4290      	cmp	r0, r2
 801eedc:	f842 3c04 	str.w	r3, [r2, #-4]
 801eee0:	d8d6      	bhi.n	801ee90 <__gethex+0x384>
 801eee2:	68a2      	ldr	r2, [r4, #8]
 801eee4:	4593      	cmp	fp, r2
 801eee6:	db17      	blt.n	801ef18 <__gethex+0x40c>
 801eee8:	6861      	ldr	r1, [r4, #4]
 801eeea:	4648      	mov	r0, r9
 801eeec:	3101      	adds	r1, #1
 801eeee:	f000 f90f 	bl	801f110 <_Balloc>
 801eef2:	4682      	mov	sl, r0
 801eef4:	b918      	cbnz	r0, 801eefe <__gethex+0x3f2>
 801eef6:	4b1b      	ldr	r3, [pc, #108]	; (801ef64 <__gethex+0x458>)
 801eef8:	4602      	mov	r2, r0
 801eefa:	2184      	movs	r1, #132	; 0x84
 801eefc:	e6b3      	b.n	801ec66 <__gethex+0x15a>
 801eefe:	6922      	ldr	r2, [r4, #16]
 801ef00:	3202      	adds	r2, #2
 801ef02:	f104 010c 	add.w	r1, r4, #12
 801ef06:	0092      	lsls	r2, r2, #2
 801ef08:	300c      	adds	r0, #12
 801ef0a:	f7ff fd3c 	bl	801e986 <memcpy>
 801ef0e:	4621      	mov	r1, r4
 801ef10:	4648      	mov	r0, r9
 801ef12:	f000 f93d 	bl	801f190 <_Bfree>
 801ef16:	4654      	mov	r4, sl
 801ef18:	6922      	ldr	r2, [r4, #16]
 801ef1a:	1c51      	adds	r1, r2, #1
 801ef1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ef20:	6121      	str	r1, [r4, #16]
 801ef22:	2101      	movs	r1, #1
 801ef24:	6151      	str	r1, [r2, #20]
 801ef26:	e7bc      	b.n	801eea2 <__gethex+0x396>
 801ef28:	6921      	ldr	r1, [r4, #16]
 801ef2a:	4559      	cmp	r1, fp
 801ef2c:	dd0b      	ble.n	801ef46 <__gethex+0x43a>
 801ef2e:	2101      	movs	r1, #1
 801ef30:	4620      	mov	r0, r4
 801ef32:	f7ff fd83 	bl	801ea3c <rshift>
 801ef36:	68bb      	ldr	r3, [r7, #8]
 801ef38:	3601      	adds	r6, #1
 801ef3a:	42b3      	cmp	r3, r6
 801ef3c:	f6ff aedb 	blt.w	801ecf6 <__gethex+0x1ea>
 801ef40:	f04f 0801 	mov.w	r8, #1
 801ef44:	e7c2      	b.n	801eecc <__gethex+0x3c0>
 801ef46:	f015 051f 	ands.w	r5, r5, #31
 801ef4a:	d0f9      	beq.n	801ef40 <__gethex+0x434>
 801ef4c:	9b01      	ldr	r3, [sp, #4]
 801ef4e:	441a      	add	r2, r3
 801ef50:	f1c5 0520 	rsb	r5, r5, #32
 801ef54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ef58:	f000 f9cc 	bl	801f2f4 <__hi0bits>
 801ef5c:	42a8      	cmp	r0, r5
 801ef5e:	dbe6      	blt.n	801ef2e <__gethex+0x422>
 801ef60:	e7ee      	b.n	801ef40 <__gethex+0x434>
 801ef62:	bf00      	nop
 801ef64:	08029899 	.word	0x08029899

0801ef68 <L_shift>:
 801ef68:	f1c2 0208 	rsb	r2, r2, #8
 801ef6c:	0092      	lsls	r2, r2, #2
 801ef6e:	b570      	push	{r4, r5, r6, lr}
 801ef70:	f1c2 0620 	rsb	r6, r2, #32
 801ef74:	6843      	ldr	r3, [r0, #4]
 801ef76:	6804      	ldr	r4, [r0, #0]
 801ef78:	fa03 f506 	lsl.w	r5, r3, r6
 801ef7c:	432c      	orrs	r4, r5
 801ef7e:	40d3      	lsrs	r3, r2
 801ef80:	6004      	str	r4, [r0, #0]
 801ef82:	f840 3f04 	str.w	r3, [r0, #4]!
 801ef86:	4288      	cmp	r0, r1
 801ef88:	d3f4      	bcc.n	801ef74 <L_shift+0xc>
 801ef8a:	bd70      	pop	{r4, r5, r6, pc}

0801ef8c <__match>:
 801ef8c:	b530      	push	{r4, r5, lr}
 801ef8e:	6803      	ldr	r3, [r0, #0]
 801ef90:	3301      	adds	r3, #1
 801ef92:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef96:	b914      	cbnz	r4, 801ef9e <__match+0x12>
 801ef98:	6003      	str	r3, [r0, #0]
 801ef9a:	2001      	movs	r0, #1
 801ef9c:	bd30      	pop	{r4, r5, pc}
 801ef9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801efa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801efa6:	2d19      	cmp	r5, #25
 801efa8:	bf98      	it	ls
 801efaa:	3220      	addls	r2, #32
 801efac:	42a2      	cmp	r2, r4
 801efae:	d0f0      	beq.n	801ef92 <__match+0x6>
 801efb0:	2000      	movs	r0, #0
 801efb2:	e7f3      	b.n	801ef9c <__match+0x10>

0801efb4 <__hexnan>:
 801efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb8:	680b      	ldr	r3, [r1, #0]
 801efba:	6801      	ldr	r1, [r0, #0]
 801efbc:	115e      	asrs	r6, r3, #5
 801efbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801efc2:	f013 031f 	ands.w	r3, r3, #31
 801efc6:	b087      	sub	sp, #28
 801efc8:	bf18      	it	ne
 801efca:	3604      	addne	r6, #4
 801efcc:	2500      	movs	r5, #0
 801efce:	1f37      	subs	r7, r6, #4
 801efd0:	4682      	mov	sl, r0
 801efd2:	4690      	mov	r8, r2
 801efd4:	9301      	str	r3, [sp, #4]
 801efd6:	f846 5c04 	str.w	r5, [r6, #-4]
 801efda:	46b9      	mov	r9, r7
 801efdc:	463c      	mov	r4, r7
 801efde:	9502      	str	r5, [sp, #8]
 801efe0:	46ab      	mov	fp, r5
 801efe2:	784a      	ldrb	r2, [r1, #1]
 801efe4:	1c4b      	adds	r3, r1, #1
 801efe6:	9303      	str	r3, [sp, #12]
 801efe8:	b342      	cbz	r2, 801f03c <__hexnan+0x88>
 801efea:	4610      	mov	r0, r2
 801efec:	9105      	str	r1, [sp, #20]
 801efee:	9204      	str	r2, [sp, #16]
 801eff0:	f7ff fd76 	bl	801eae0 <__hexdig_fun>
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d14f      	bne.n	801f098 <__hexnan+0xe4>
 801eff8:	9a04      	ldr	r2, [sp, #16]
 801effa:	9905      	ldr	r1, [sp, #20]
 801effc:	2a20      	cmp	r2, #32
 801effe:	d818      	bhi.n	801f032 <__hexnan+0x7e>
 801f000:	9b02      	ldr	r3, [sp, #8]
 801f002:	459b      	cmp	fp, r3
 801f004:	dd13      	ble.n	801f02e <__hexnan+0x7a>
 801f006:	454c      	cmp	r4, r9
 801f008:	d206      	bcs.n	801f018 <__hexnan+0x64>
 801f00a:	2d07      	cmp	r5, #7
 801f00c:	dc04      	bgt.n	801f018 <__hexnan+0x64>
 801f00e:	462a      	mov	r2, r5
 801f010:	4649      	mov	r1, r9
 801f012:	4620      	mov	r0, r4
 801f014:	f7ff ffa8 	bl	801ef68 <L_shift>
 801f018:	4544      	cmp	r4, r8
 801f01a:	d950      	bls.n	801f0be <__hexnan+0x10a>
 801f01c:	2300      	movs	r3, #0
 801f01e:	f1a4 0904 	sub.w	r9, r4, #4
 801f022:	f844 3c04 	str.w	r3, [r4, #-4]
 801f026:	f8cd b008 	str.w	fp, [sp, #8]
 801f02a:	464c      	mov	r4, r9
 801f02c:	461d      	mov	r5, r3
 801f02e:	9903      	ldr	r1, [sp, #12]
 801f030:	e7d7      	b.n	801efe2 <__hexnan+0x2e>
 801f032:	2a29      	cmp	r2, #41	; 0x29
 801f034:	d155      	bne.n	801f0e2 <__hexnan+0x12e>
 801f036:	3102      	adds	r1, #2
 801f038:	f8ca 1000 	str.w	r1, [sl]
 801f03c:	f1bb 0f00 	cmp.w	fp, #0
 801f040:	d04f      	beq.n	801f0e2 <__hexnan+0x12e>
 801f042:	454c      	cmp	r4, r9
 801f044:	d206      	bcs.n	801f054 <__hexnan+0xa0>
 801f046:	2d07      	cmp	r5, #7
 801f048:	dc04      	bgt.n	801f054 <__hexnan+0xa0>
 801f04a:	462a      	mov	r2, r5
 801f04c:	4649      	mov	r1, r9
 801f04e:	4620      	mov	r0, r4
 801f050:	f7ff ff8a 	bl	801ef68 <L_shift>
 801f054:	4544      	cmp	r4, r8
 801f056:	d934      	bls.n	801f0c2 <__hexnan+0x10e>
 801f058:	f1a8 0204 	sub.w	r2, r8, #4
 801f05c:	4623      	mov	r3, r4
 801f05e:	f853 1b04 	ldr.w	r1, [r3], #4
 801f062:	f842 1f04 	str.w	r1, [r2, #4]!
 801f066:	429f      	cmp	r7, r3
 801f068:	d2f9      	bcs.n	801f05e <__hexnan+0xaa>
 801f06a:	1b3b      	subs	r3, r7, r4
 801f06c:	f023 0303 	bic.w	r3, r3, #3
 801f070:	3304      	adds	r3, #4
 801f072:	3e03      	subs	r6, #3
 801f074:	3401      	adds	r4, #1
 801f076:	42a6      	cmp	r6, r4
 801f078:	bf38      	it	cc
 801f07a:	2304      	movcc	r3, #4
 801f07c:	4443      	add	r3, r8
 801f07e:	2200      	movs	r2, #0
 801f080:	f843 2b04 	str.w	r2, [r3], #4
 801f084:	429f      	cmp	r7, r3
 801f086:	d2fb      	bcs.n	801f080 <__hexnan+0xcc>
 801f088:	683b      	ldr	r3, [r7, #0]
 801f08a:	b91b      	cbnz	r3, 801f094 <__hexnan+0xe0>
 801f08c:	4547      	cmp	r7, r8
 801f08e:	d126      	bne.n	801f0de <__hexnan+0x12a>
 801f090:	2301      	movs	r3, #1
 801f092:	603b      	str	r3, [r7, #0]
 801f094:	2005      	movs	r0, #5
 801f096:	e025      	b.n	801f0e4 <__hexnan+0x130>
 801f098:	3501      	adds	r5, #1
 801f09a:	2d08      	cmp	r5, #8
 801f09c:	f10b 0b01 	add.w	fp, fp, #1
 801f0a0:	dd06      	ble.n	801f0b0 <__hexnan+0xfc>
 801f0a2:	4544      	cmp	r4, r8
 801f0a4:	d9c3      	bls.n	801f02e <__hexnan+0x7a>
 801f0a6:	2300      	movs	r3, #0
 801f0a8:	f844 3c04 	str.w	r3, [r4, #-4]
 801f0ac:	2501      	movs	r5, #1
 801f0ae:	3c04      	subs	r4, #4
 801f0b0:	6822      	ldr	r2, [r4, #0]
 801f0b2:	f000 000f 	and.w	r0, r0, #15
 801f0b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f0ba:	6020      	str	r0, [r4, #0]
 801f0bc:	e7b7      	b.n	801f02e <__hexnan+0x7a>
 801f0be:	2508      	movs	r5, #8
 801f0c0:	e7b5      	b.n	801f02e <__hexnan+0x7a>
 801f0c2:	9b01      	ldr	r3, [sp, #4]
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d0df      	beq.n	801f088 <__hexnan+0xd4>
 801f0c8:	f1c3 0320 	rsb	r3, r3, #32
 801f0cc:	f04f 32ff 	mov.w	r2, #4294967295
 801f0d0:	40da      	lsrs	r2, r3
 801f0d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f0d6:	4013      	ands	r3, r2
 801f0d8:	f846 3c04 	str.w	r3, [r6, #-4]
 801f0dc:	e7d4      	b.n	801f088 <__hexnan+0xd4>
 801f0de:	3f04      	subs	r7, #4
 801f0e0:	e7d2      	b.n	801f088 <__hexnan+0xd4>
 801f0e2:	2004      	movs	r0, #4
 801f0e4:	b007      	add	sp, #28
 801f0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0ea <__ascii_mbtowc>:
 801f0ea:	b082      	sub	sp, #8
 801f0ec:	b901      	cbnz	r1, 801f0f0 <__ascii_mbtowc+0x6>
 801f0ee:	a901      	add	r1, sp, #4
 801f0f0:	b142      	cbz	r2, 801f104 <__ascii_mbtowc+0x1a>
 801f0f2:	b14b      	cbz	r3, 801f108 <__ascii_mbtowc+0x1e>
 801f0f4:	7813      	ldrb	r3, [r2, #0]
 801f0f6:	600b      	str	r3, [r1, #0]
 801f0f8:	7812      	ldrb	r2, [r2, #0]
 801f0fa:	1e10      	subs	r0, r2, #0
 801f0fc:	bf18      	it	ne
 801f0fe:	2001      	movne	r0, #1
 801f100:	b002      	add	sp, #8
 801f102:	4770      	bx	lr
 801f104:	4610      	mov	r0, r2
 801f106:	e7fb      	b.n	801f100 <__ascii_mbtowc+0x16>
 801f108:	f06f 0001 	mvn.w	r0, #1
 801f10c:	e7f8      	b.n	801f100 <__ascii_mbtowc+0x16>
	...

0801f110 <_Balloc>:
 801f110:	b570      	push	{r4, r5, r6, lr}
 801f112:	69c6      	ldr	r6, [r0, #28]
 801f114:	4604      	mov	r4, r0
 801f116:	460d      	mov	r5, r1
 801f118:	b976      	cbnz	r6, 801f138 <_Balloc+0x28>
 801f11a:	2010      	movs	r0, #16
 801f11c:	f7fe fada 	bl	801d6d4 <malloc>
 801f120:	4602      	mov	r2, r0
 801f122:	61e0      	str	r0, [r4, #28]
 801f124:	b920      	cbnz	r0, 801f130 <_Balloc+0x20>
 801f126:	4b18      	ldr	r3, [pc, #96]	; (801f188 <_Balloc+0x78>)
 801f128:	4818      	ldr	r0, [pc, #96]	; (801f18c <_Balloc+0x7c>)
 801f12a:	216b      	movs	r1, #107	; 0x6b
 801f12c:	f7fe fa92 	bl	801d654 <__assert_func>
 801f130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f134:	6006      	str	r6, [r0, #0]
 801f136:	60c6      	str	r6, [r0, #12]
 801f138:	69e6      	ldr	r6, [r4, #28]
 801f13a:	68f3      	ldr	r3, [r6, #12]
 801f13c:	b183      	cbz	r3, 801f160 <_Balloc+0x50>
 801f13e:	69e3      	ldr	r3, [r4, #28]
 801f140:	68db      	ldr	r3, [r3, #12]
 801f142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f146:	b9b8      	cbnz	r0, 801f178 <_Balloc+0x68>
 801f148:	2101      	movs	r1, #1
 801f14a:	fa01 f605 	lsl.w	r6, r1, r5
 801f14e:	1d72      	adds	r2, r6, #5
 801f150:	0092      	lsls	r2, r2, #2
 801f152:	4620      	mov	r0, r4
 801f154:	f7fe faa8 	bl	801d6a8 <_calloc_r>
 801f158:	b160      	cbz	r0, 801f174 <_Balloc+0x64>
 801f15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f15e:	e00e      	b.n	801f17e <_Balloc+0x6e>
 801f160:	2221      	movs	r2, #33	; 0x21
 801f162:	2104      	movs	r1, #4
 801f164:	4620      	mov	r0, r4
 801f166:	f7fe fa9f 	bl	801d6a8 <_calloc_r>
 801f16a:	69e3      	ldr	r3, [r4, #28]
 801f16c:	60f0      	str	r0, [r6, #12]
 801f16e:	68db      	ldr	r3, [r3, #12]
 801f170:	2b00      	cmp	r3, #0
 801f172:	d1e4      	bne.n	801f13e <_Balloc+0x2e>
 801f174:	2000      	movs	r0, #0
 801f176:	bd70      	pop	{r4, r5, r6, pc}
 801f178:	6802      	ldr	r2, [r0, #0]
 801f17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f17e:	2300      	movs	r3, #0
 801f180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f184:	e7f7      	b.n	801f176 <_Balloc+0x66>
 801f186:	bf00      	nop
 801f188:	0802990a 	.word	0x0802990a
 801f18c:	08029921 	.word	0x08029921

0801f190 <_Bfree>:
 801f190:	b570      	push	{r4, r5, r6, lr}
 801f192:	69c6      	ldr	r6, [r0, #28]
 801f194:	4605      	mov	r5, r0
 801f196:	460c      	mov	r4, r1
 801f198:	b976      	cbnz	r6, 801f1b8 <_Bfree+0x28>
 801f19a:	2010      	movs	r0, #16
 801f19c:	f7fe fa9a 	bl	801d6d4 <malloc>
 801f1a0:	4602      	mov	r2, r0
 801f1a2:	61e8      	str	r0, [r5, #28]
 801f1a4:	b920      	cbnz	r0, 801f1b0 <_Bfree+0x20>
 801f1a6:	4b09      	ldr	r3, [pc, #36]	; (801f1cc <_Bfree+0x3c>)
 801f1a8:	4809      	ldr	r0, [pc, #36]	; (801f1d0 <_Bfree+0x40>)
 801f1aa:	218f      	movs	r1, #143	; 0x8f
 801f1ac:	f7fe fa52 	bl	801d654 <__assert_func>
 801f1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f1b4:	6006      	str	r6, [r0, #0]
 801f1b6:	60c6      	str	r6, [r0, #12]
 801f1b8:	b13c      	cbz	r4, 801f1ca <_Bfree+0x3a>
 801f1ba:	69eb      	ldr	r3, [r5, #28]
 801f1bc:	6862      	ldr	r2, [r4, #4]
 801f1be:	68db      	ldr	r3, [r3, #12]
 801f1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1c4:	6021      	str	r1, [r4, #0]
 801f1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f1ca:	bd70      	pop	{r4, r5, r6, pc}
 801f1cc:	0802990a 	.word	0x0802990a
 801f1d0:	08029921 	.word	0x08029921

0801f1d4 <__multadd>:
 801f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1d8:	690d      	ldr	r5, [r1, #16]
 801f1da:	4607      	mov	r7, r0
 801f1dc:	460c      	mov	r4, r1
 801f1de:	461e      	mov	r6, r3
 801f1e0:	f101 0c14 	add.w	ip, r1, #20
 801f1e4:	2000      	movs	r0, #0
 801f1e6:	f8dc 3000 	ldr.w	r3, [ip]
 801f1ea:	b299      	uxth	r1, r3
 801f1ec:	fb02 6101 	mla	r1, r2, r1, r6
 801f1f0:	0c1e      	lsrs	r6, r3, #16
 801f1f2:	0c0b      	lsrs	r3, r1, #16
 801f1f4:	fb02 3306 	mla	r3, r2, r6, r3
 801f1f8:	b289      	uxth	r1, r1
 801f1fa:	3001      	adds	r0, #1
 801f1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f200:	4285      	cmp	r5, r0
 801f202:	f84c 1b04 	str.w	r1, [ip], #4
 801f206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f20a:	dcec      	bgt.n	801f1e6 <__multadd+0x12>
 801f20c:	b30e      	cbz	r6, 801f252 <__multadd+0x7e>
 801f20e:	68a3      	ldr	r3, [r4, #8]
 801f210:	42ab      	cmp	r3, r5
 801f212:	dc19      	bgt.n	801f248 <__multadd+0x74>
 801f214:	6861      	ldr	r1, [r4, #4]
 801f216:	4638      	mov	r0, r7
 801f218:	3101      	adds	r1, #1
 801f21a:	f7ff ff79 	bl	801f110 <_Balloc>
 801f21e:	4680      	mov	r8, r0
 801f220:	b928      	cbnz	r0, 801f22e <__multadd+0x5a>
 801f222:	4602      	mov	r2, r0
 801f224:	4b0c      	ldr	r3, [pc, #48]	; (801f258 <__multadd+0x84>)
 801f226:	480d      	ldr	r0, [pc, #52]	; (801f25c <__multadd+0x88>)
 801f228:	21ba      	movs	r1, #186	; 0xba
 801f22a:	f7fe fa13 	bl	801d654 <__assert_func>
 801f22e:	6922      	ldr	r2, [r4, #16]
 801f230:	3202      	adds	r2, #2
 801f232:	f104 010c 	add.w	r1, r4, #12
 801f236:	0092      	lsls	r2, r2, #2
 801f238:	300c      	adds	r0, #12
 801f23a:	f7ff fba4 	bl	801e986 <memcpy>
 801f23e:	4621      	mov	r1, r4
 801f240:	4638      	mov	r0, r7
 801f242:	f7ff ffa5 	bl	801f190 <_Bfree>
 801f246:	4644      	mov	r4, r8
 801f248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f24c:	3501      	adds	r5, #1
 801f24e:	615e      	str	r6, [r3, #20]
 801f250:	6125      	str	r5, [r4, #16]
 801f252:	4620      	mov	r0, r4
 801f254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f258:	08029899 	.word	0x08029899
 801f25c:	08029921 	.word	0x08029921

0801f260 <__s2b>:
 801f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f264:	460c      	mov	r4, r1
 801f266:	4615      	mov	r5, r2
 801f268:	461f      	mov	r7, r3
 801f26a:	2209      	movs	r2, #9
 801f26c:	3308      	adds	r3, #8
 801f26e:	4606      	mov	r6, r0
 801f270:	fb93 f3f2 	sdiv	r3, r3, r2
 801f274:	2100      	movs	r1, #0
 801f276:	2201      	movs	r2, #1
 801f278:	429a      	cmp	r2, r3
 801f27a:	db09      	blt.n	801f290 <__s2b+0x30>
 801f27c:	4630      	mov	r0, r6
 801f27e:	f7ff ff47 	bl	801f110 <_Balloc>
 801f282:	b940      	cbnz	r0, 801f296 <__s2b+0x36>
 801f284:	4602      	mov	r2, r0
 801f286:	4b19      	ldr	r3, [pc, #100]	; (801f2ec <__s2b+0x8c>)
 801f288:	4819      	ldr	r0, [pc, #100]	; (801f2f0 <__s2b+0x90>)
 801f28a:	21d3      	movs	r1, #211	; 0xd3
 801f28c:	f7fe f9e2 	bl	801d654 <__assert_func>
 801f290:	0052      	lsls	r2, r2, #1
 801f292:	3101      	adds	r1, #1
 801f294:	e7f0      	b.n	801f278 <__s2b+0x18>
 801f296:	9b08      	ldr	r3, [sp, #32]
 801f298:	6143      	str	r3, [r0, #20]
 801f29a:	2d09      	cmp	r5, #9
 801f29c:	f04f 0301 	mov.w	r3, #1
 801f2a0:	6103      	str	r3, [r0, #16]
 801f2a2:	dd16      	ble.n	801f2d2 <__s2b+0x72>
 801f2a4:	f104 0909 	add.w	r9, r4, #9
 801f2a8:	46c8      	mov	r8, r9
 801f2aa:	442c      	add	r4, r5
 801f2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f2b0:	4601      	mov	r1, r0
 801f2b2:	3b30      	subs	r3, #48	; 0x30
 801f2b4:	220a      	movs	r2, #10
 801f2b6:	4630      	mov	r0, r6
 801f2b8:	f7ff ff8c 	bl	801f1d4 <__multadd>
 801f2bc:	45a0      	cmp	r8, r4
 801f2be:	d1f5      	bne.n	801f2ac <__s2b+0x4c>
 801f2c0:	f1a5 0408 	sub.w	r4, r5, #8
 801f2c4:	444c      	add	r4, r9
 801f2c6:	1b2d      	subs	r5, r5, r4
 801f2c8:	1963      	adds	r3, r4, r5
 801f2ca:	42bb      	cmp	r3, r7
 801f2cc:	db04      	blt.n	801f2d8 <__s2b+0x78>
 801f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f2d2:	340a      	adds	r4, #10
 801f2d4:	2509      	movs	r5, #9
 801f2d6:	e7f6      	b.n	801f2c6 <__s2b+0x66>
 801f2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f2dc:	4601      	mov	r1, r0
 801f2de:	3b30      	subs	r3, #48	; 0x30
 801f2e0:	220a      	movs	r2, #10
 801f2e2:	4630      	mov	r0, r6
 801f2e4:	f7ff ff76 	bl	801f1d4 <__multadd>
 801f2e8:	e7ee      	b.n	801f2c8 <__s2b+0x68>
 801f2ea:	bf00      	nop
 801f2ec:	08029899 	.word	0x08029899
 801f2f0:	08029921 	.word	0x08029921

0801f2f4 <__hi0bits>:
 801f2f4:	0c03      	lsrs	r3, r0, #16
 801f2f6:	041b      	lsls	r3, r3, #16
 801f2f8:	b9d3      	cbnz	r3, 801f330 <__hi0bits+0x3c>
 801f2fa:	0400      	lsls	r0, r0, #16
 801f2fc:	2310      	movs	r3, #16
 801f2fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f302:	bf04      	itt	eq
 801f304:	0200      	lsleq	r0, r0, #8
 801f306:	3308      	addeq	r3, #8
 801f308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f30c:	bf04      	itt	eq
 801f30e:	0100      	lsleq	r0, r0, #4
 801f310:	3304      	addeq	r3, #4
 801f312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f316:	bf04      	itt	eq
 801f318:	0080      	lsleq	r0, r0, #2
 801f31a:	3302      	addeq	r3, #2
 801f31c:	2800      	cmp	r0, #0
 801f31e:	db05      	blt.n	801f32c <__hi0bits+0x38>
 801f320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f324:	f103 0301 	add.w	r3, r3, #1
 801f328:	bf08      	it	eq
 801f32a:	2320      	moveq	r3, #32
 801f32c:	4618      	mov	r0, r3
 801f32e:	4770      	bx	lr
 801f330:	2300      	movs	r3, #0
 801f332:	e7e4      	b.n	801f2fe <__hi0bits+0xa>

0801f334 <__lo0bits>:
 801f334:	6803      	ldr	r3, [r0, #0]
 801f336:	f013 0207 	ands.w	r2, r3, #7
 801f33a:	d00c      	beq.n	801f356 <__lo0bits+0x22>
 801f33c:	07d9      	lsls	r1, r3, #31
 801f33e:	d422      	bmi.n	801f386 <__lo0bits+0x52>
 801f340:	079a      	lsls	r2, r3, #30
 801f342:	bf49      	itett	mi
 801f344:	085b      	lsrmi	r3, r3, #1
 801f346:	089b      	lsrpl	r3, r3, #2
 801f348:	6003      	strmi	r3, [r0, #0]
 801f34a:	2201      	movmi	r2, #1
 801f34c:	bf5c      	itt	pl
 801f34e:	6003      	strpl	r3, [r0, #0]
 801f350:	2202      	movpl	r2, #2
 801f352:	4610      	mov	r0, r2
 801f354:	4770      	bx	lr
 801f356:	b299      	uxth	r1, r3
 801f358:	b909      	cbnz	r1, 801f35e <__lo0bits+0x2a>
 801f35a:	0c1b      	lsrs	r3, r3, #16
 801f35c:	2210      	movs	r2, #16
 801f35e:	b2d9      	uxtb	r1, r3
 801f360:	b909      	cbnz	r1, 801f366 <__lo0bits+0x32>
 801f362:	3208      	adds	r2, #8
 801f364:	0a1b      	lsrs	r3, r3, #8
 801f366:	0719      	lsls	r1, r3, #28
 801f368:	bf04      	itt	eq
 801f36a:	091b      	lsreq	r3, r3, #4
 801f36c:	3204      	addeq	r2, #4
 801f36e:	0799      	lsls	r1, r3, #30
 801f370:	bf04      	itt	eq
 801f372:	089b      	lsreq	r3, r3, #2
 801f374:	3202      	addeq	r2, #2
 801f376:	07d9      	lsls	r1, r3, #31
 801f378:	d403      	bmi.n	801f382 <__lo0bits+0x4e>
 801f37a:	085b      	lsrs	r3, r3, #1
 801f37c:	f102 0201 	add.w	r2, r2, #1
 801f380:	d003      	beq.n	801f38a <__lo0bits+0x56>
 801f382:	6003      	str	r3, [r0, #0]
 801f384:	e7e5      	b.n	801f352 <__lo0bits+0x1e>
 801f386:	2200      	movs	r2, #0
 801f388:	e7e3      	b.n	801f352 <__lo0bits+0x1e>
 801f38a:	2220      	movs	r2, #32
 801f38c:	e7e1      	b.n	801f352 <__lo0bits+0x1e>
	...

0801f390 <__i2b>:
 801f390:	b510      	push	{r4, lr}
 801f392:	460c      	mov	r4, r1
 801f394:	2101      	movs	r1, #1
 801f396:	f7ff febb 	bl	801f110 <_Balloc>
 801f39a:	4602      	mov	r2, r0
 801f39c:	b928      	cbnz	r0, 801f3aa <__i2b+0x1a>
 801f39e:	4b05      	ldr	r3, [pc, #20]	; (801f3b4 <__i2b+0x24>)
 801f3a0:	4805      	ldr	r0, [pc, #20]	; (801f3b8 <__i2b+0x28>)
 801f3a2:	f240 1145 	movw	r1, #325	; 0x145
 801f3a6:	f7fe f955 	bl	801d654 <__assert_func>
 801f3aa:	2301      	movs	r3, #1
 801f3ac:	6144      	str	r4, [r0, #20]
 801f3ae:	6103      	str	r3, [r0, #16]
 801f3b0:	bd10      	pop	{r4, pc}
 801f3b2:	bf00      	nop
 801f3b4:	08029899 	.word	0x08029899
 801f3b8:	08029921 	.word	0x08029921

0801f3bc <__multiply>:
 801f3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3c0:	4691      	mov	r9, r2
 801f3c2:	690a      	ldr	r2, [r1, #16]
 801f3c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f3c8:	429a      	cmp	r2, r3
 801f3ca:	bfb8      	it	lt
 801f3cc:	460b      	movlt	r3, r1
 801f3ce:	460c      	mov	r4, r1
 801f3d0:	bfbc      	itt	lt
 801f3d2:	464c      	movlt	r4, r9
 801f3d4:	4699      	movlt	r9, r3
 801f3d6:	6927      	ldr	r7, [r4, #16]
 801f3d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f3dc:	68a3      	ldr	r3, [r4, #8]
 801f3de:	6861      	ldr	r1, [r4, #4]
 801f3e0:	eb07 060a 	add.w	r6, r7, sl
 801f3e4:	42b3      	cmp	r3, r6
 801f3e6:	b085      	sub	sp, #20
 801f3e8:	bfb8      	it	lt
 801f3ea:	3101      	addlt	r1, #1
 801f3ec:	f7ff fe90 	bl	801f110 <_Balloc>
 801f3f0:	b930      	cbnz	r0, 801f400 <__multiply+0x44>
 801f3f2:	4602      	mov	r2, r0
 801f3f4:	4b44      	ldr	r3, [pc, #272]	; (801f508 <__multiply+0x14c>)
 801f3f6:	4845      	ldr	r0, [pc, #276]	; (801f50c <__multiply+0x150>)
 801f3f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801f3fc:	f7fe f92a 	bl	801d654 <__assert_func>
 801f400:	f100 0514 	add.w	r5, r0, #20
 801f404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f408:	462b      	mov	r3, r5
 801f40a:	2200      	movs	r2, #0
 801f40c:	4543      	cmp	r3, r8
 801f40e:	d321      	bcc.n	801f454 <__multiply+0x98>
 801f410:	f104 0314 	add.w	r3, r4, #20
 801f414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f418:	f109 0314 	add.w	r3, r9, #20
 801f41c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f420:	9202      	str	r2, [sp, #8]
 801f422:	1b3a      	subs	r2, r7, r4
 801f424:	3a15      	subs	r2, #21
 801f426:	f022 0203 	bic.w	r2, r2, #3
 801f42a:	3204      	adds	r2, #4
 801f42c:	f104 0115 	add.w	r1, r4, #21
 801f430:	428f      	cmp	r7, r1
 801f432:	bf38      	it	cc
 801f434:	2204      	movcc	r2, #4
 801f436:	9201      	str	r2, [sp, #4]
 801f438:	9a02      	ldr	r2, [sp, #8]
 801f43a:	9303      	str	r3, [sp, #12]
 801f43c:	429a      	cmp	r2, r3
 801f43e:	d80c      	bhi.n	801f45a <__multiply+0x9e>
 801f440:	2e00      	cmp	r6, #0
 801f442:	dd03      	ble.n	801f44c <__multiply+0x90>
 801f444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d05b      	beq.n	801f504 <__multiply+0x148>
 801f44c:	6106      	str	r6, [r0, #16]
 801f44e:	b005      	add	sp, #20
 801f450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f454:	f843 2b04 	str.w	r2, [r3], #4
 801f458:	e7d8      	b.n	801f40c <__multiply+0x50>
 801f45a:	f8b3 a000 	ldrh.w	sl, [r3]
 801f45e:	f1ba 0f00 	cmp.w	sl, #0
 801f462:	d024      	beq.n	801f4ae <__multiply+0xf2>
 801f464:	f104 0e14 	add.w	lr, r4, #20
 801f468:	46a9      	mov	r9, r5
 801f46a:	f04f 0c00 	mov.w	ip, #0
 801f46e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f472:	f8d9 1000 	ldr.w	r1, [r9]
 801f476:	fa1f fb82 	uxth.w	fp, r2
 801f47a:	b289      	uxth	r1, r1
 801f47c:	fb0a 110b 	mla	r1, sl, fp, r1
 801f480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f484:	f8d9 2000 	ldr.w	r2, [r9]
 801f488:	4461      	add	r1, ip
 801f48a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f48e:	fb0a c20b 	mla	r2, sl, fp, ip
 801f492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f496:	b289      	uxth	r1, r1
 801f498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f49c:	4577      	cmp	r7, lr
 801f49e:	f849 1b04 	str.w	r1, [r9], #4
 801f4a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f4a6:	d8e2      	bhi.n	801f46e <__multiply+0xb2>
 801f4a8:	9a01      	ldr	r2, [sp, #4]
 801f4aa:	f845 c002 	str.w	ip, [r5, r2]
 801f4ae:	9a03      	ldr	r2, [sp, #12]
 801f4b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f4b4:	3304      	adds	r3, #4
 801f4b6:	f1b9 0f00 	cmp.w	r9, #0
 801f4ba:	d021      	beq.n	801f500 <__multiply+0x144>
 801f4bc:	6829      	ldr	r1, [r5, #0]
 801f4be:	f104 0c14 	add.w	ip, r4, #20
 801f4c2:	46ae      	mov	lr, r5
 801f4c4:	f04f 0a00 	mov.w	sl, #0
 801f4c8:	f8bc b000 	ldrh.w	fp, [ip]
 801f4cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f4d0:	fb09 220b 	mla	r2, r9, fp, r2
 801f4d4:	4452      	add	r2, sl
 801f4d6:	b289      	uxth	r1, r1
 801f4d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f4dc:	f84e 1b04 	str.w	r1, [lr], #4
 801f4e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f4e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f4e8:	f8be 1000 	ldrh.w	r1, [lr]
 801f4ec:	fb09 110a 	mla	r1, r9, sl, r1
 801f4f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801f4f4:	4567      	cmp	r7, ip
 801f4f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f4fa:	d8e5      	bhi.n	801f4c8 <__multiply+0x10c>
 801f4fc:	9a01      	ldr	r2, [sp, #4]
 801f4fe:	50a9      	str	r1, [r5, r2]
 801f500:	3504      	adds	r5, #4
 801f502:	e799      	b.n	801f438 <__multiply+0x7c>
 801f504:	3e01      	subs	r6, #1
 801f506:	e79b      	b.n	801f440 <__multiply+0x84>
 801f508:	08029899 	.word	0x08029899
 801f50c:	08029921 	.word	0x08029921

0801f510 <__pow5mult>:
 801f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f514:	4615      	mov	r5, r2
 801f516:	f012 0203 	ands.w	r2, r2, #3
 801f51a:	4606      	mov	r6, r0
 801f51c:	460f      	mov	r7, r1
 801f51e:	d007      	beq.n	801f530 <__pow5mult+0x20>
 801f520:	4c25      	ldr	r4, [pc, #148]	; (801f5b8 <__pow5mult+0xa8>)
 801f522:	3a01      	subs	r2, #1
 801f524:	2300      	movs	r3, #0
 801f526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f52a:	f7ff fe53 	bl	801f1d4 <__multadd>
 801f52e:	4607      	mov	r7, r0
 801f530:	10ad      	asrs	r5, r5, #2
 801f532:	d03d      	beq.n	801f5b0 <__pow5mult+0xa0>
 801f534:	69f4      	ldr	r4, [r6, #28]
 801f536:	b97c      	cbnz	r4, 801f558 <__pow5mult+0x48>
 801f538:	2010      	movs	r0, #16
 801f53a:	f7fe f8cb 	bl	801d6d4 <malloc>
 801f53e:	4602      	mov	r2, r0
 801f540:	61f0      	str	r0, [r6, #28]
 801f542:	b928      	cbnz	r0, 801f550 <__pow5mult+0x40>
 801f544:	4b1d      	ldr	r3, [pc, #116]	; (801f5bc <__pow5mult+0xac>)
 801f546:	481e      	ldr	r0, [pc, #120]	; (801f5c0 <__pow5mult+0xb0>)
 801f548:	f240 11b3 	movw	r1, #435	; 0x1b3
 801f54c:	f7fe f882 	bl	801d654 <__assert_func>
 801f550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f554:	6004      	str	r4, [r0, #0]
 801f556:	60c4      	str	r4, [r0, #12]
 801f558:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801f55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f560:	b94c      	cbnz	r4, 801f576 <__pow5mult+0x66>
 801f562:	f240 2171 	movw	r1, #625	; 0x271
 801f566:	4630      	mov	r0, r6
 801f568:	f7ff ff12 	bl	801f390 <__i2b>
 801f56c:	2300      	movs	r3, #0
 801f56e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f572:	4604      	mov	r4, r0
 801f574:	6003      	str	r3, [r0, #0]
 801f576:	f04f 0900 	mov.w	r9, #0
 801f57a:	07eb      	lsls	r3, r5, #31
 801f57c:	d50a      	bpl.n	801f594 <__pow5mult+0x84>
 801f57e:	4639      	mov	r1, r7
 801f580:	4622      	mov	r2, r4
 801f582:	4630      	mov	r0, r6
 801f584:	f7ff ff1a 	bl	801f3bc <__multiply>
 801f588:	4639      	mov	r1, r7
 801f58a:	4680      	mov	r8, r0
 801f58c:	4630      	mov	r0, r6
 801f58e:	f7ff fdff 	bl	801f190 <_Bfree>
 801f592:	4647      	mov	r7, r8
 801f594:	106d      	asrs	r5, r5, #1
 801f596:	d00b      	beq.n	801f5b0 <__pow5mult+0xa0>
 801f598:	6820      	ldr	r0, [r4, #0]
 801f59a:	b938      	cbnz	r0, 801f5ac <__pow5mult+0x9c>
 801f59c:	4622      	mov	r2, r4
 801f59e:	4621      	mov	r1, r4
 801f5a0:	4630      	mov	r0, r6
 801f5a2:	f7ff ff0b 	bl	801f3bc <__multiply>
 801f5a6:	6020      	str	r0, [r4, #0]
 801f5a8:	f8c0 9000 	str.w	r9, [r0]
 801f5ac:	4604      	mov	r4, r0
 801f5ae:	e7e4      	b.n	801f57a <__pow5mult+0x6a>
 801f5b0:	4638      	mov	r0, r7
 801f5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f5b6:	bf00      	nop
 801f5b8:	08029a70 	.word	0x08029a70
 801f5bc:	0802990a 	.word	0x0802990a
 801f5c0:	08029921 	.word	0x08029921

0801f5c4 <__lshift>:
 801f5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5c8:	460c      	mov	r4, r1
 801f5ca:	6849      	ldr	r1, [r1, #4]
 801f5cc:	6923      	ldr	r3, [r4, #16]
 801f5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f5d2:	68a3      	ldr	r3, [r4, #8]
 801f5d4:	4607      	mov	r7, r0
 801f5d6:	4691      	mov	r9, r2
 801f5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f5dc:	f108 0601 	add.w	r6, r8, #1
 801f5e0:	42b3      	cmp	r3, r6
 801f5e2:	db0b      	blt.n	801f5fc <__lshift+0x38>
 801f5e4:	4638      	mov	r0, r7
 801f5e6:	f7ff fd93 	bl	801f110 <_Balloc>
 801f5ea:	4605      	mov	r5, r0
 801f5ec:	b948      	cbnz	r0, 801f602 <__lshift+0x3e>
 801f5ee:	4602      	mov	r2, r0
 801f5f0:	4b28      	ldr	r3, [pc, #160]	; (801f694 <__lshift+0xd0>)
 801f5f2:	4829      	ldr	r0, [pc, #164]	; (801f698 <__lshift+0xd4>)
 801f5f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801f5f8:	f7fe f82c 	bl	801d654 <__assert_func>
 801f5fc:	3101      	adds	r1, #1
 801f5fe:	005b      	lsls	r3, r3, #1
 801f600:	e7ee      	b.n	801f5e0 <__lshift+0x1c>
 801f602:	2300      	movs	r3, #0
 801f604:	f100 0114 	add.w	r1, r0, #20
 801f608:	f100 0210 	add.w	r2, r0, #16
 801f60c:	4618      	mov	r0, r3
 801f60e:	4553      	cmp	r3, sl
 801f610:	db33      	blt.n	801f67a <__lshift+0xb6>
 801f612:	6920      	ldr	r0, [r4, #16]
 801f614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f618:	f104 0314 	add.w	r3, r4, #20
 801f61c:	f019 091f 	ands.w	r9, r9, #31
 801f620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f628:	d02b      	beq.n	801f682 <__lshift+0xbe>
 801f62a:	f1c9 0e20 	rsb	lr, r9, #32
 801f62e:	468a      	mov	sl, r1
 801f630:	2200      	movs	r2, #0
 801f632:	6818      	ldr	r0, [r3, #0]
 801f634:	fa00 f009 	lsl.w	r0, r0, r9
 801f638:	4310      	orrs	r0, r2
 801f63a:	f84a 0b04 	str.w	r0, [sl], #4
 801f63e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f642:	459c      	cmp	ip, r3
 801f644:	fa22 f20e 	lsr.w	r2, r2, lr
 801f648:	d8f3      	bhi.n	801f632 <__lshift+0x6e>
 801f64a:	ebac 0304 	sub.w	r3, ip, r4
 801f64e:	3b15      	subs	r3, #21
 801f650:	f023 0303 	bic.w	r3, r3, #3
 801f654:	3304      	adds	r3, #4
 801f656:	f104 0015 	add.w	r0, r4, #21
 801f65a:	4584      	cmp	ip, r0
 801f65c:	bf38      	it	cc
 801f65e:	2304      	movcc	r3, #4
 801f660:	50ca      	str	r2, [r1, r3]
 801f662:	b10a      	cbz	r2, 801f668 <__lshift+0xa4>
 801f664:	f108 0602 	add.w	r6, r8, #2
 801f668:	3e01      	subs	r6, #1
 801f66a:	4638      	mov	r0, r7
 801f66c:	612e      	str	r6, [r5, #16]
 801f66e:	4621      	mov	r1, r4
 801f670:	f7ff fd8e 	bl	801f190 <_Bfree>
 801f674:	4628      	mov	r0, r5
 801f676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f67a:	f842 0f04 	str.w	r0, [r2, #4]!
 801f67e:	3301      	adds	r3, #1
 801f680:	e7c5      	b.n	801f60e <__lshift+0x4a>
 801f682:	3904      	subs	r1, #4
 801f684:	f853 2b04 	ldr.w	r2, [r3], #4
 801f688:	f841 2f04 	str.w	r2, [r1, #4]!
 801f68c:	459c      	cmp	ip, r3
 801f68e:	d8f9      	bhi.n	801f684 <__lshift+0xc0>
 801f690:	e7ea      	b.n	801f668 <__lshift+0xa4>
 801f692:	bf00      	nop
 801f694:	08029899 	.word	0x08029899
 801f698:	08029921 	.word	0x08029921

0801f69c <__mcmp>:
 801f69c:	b530      	push	{r4, r5, lr}
 801f69e:	6902      	ldr	r2, [r0, #16]
 801f6a0:	690c      	ldr	r4, [r1, #16]
 801f6a2:	1b12      	subs	r2, r2, r4
 801f6a4:	d10e      	bne.n	801f6c4 <__mcmp+0x28>
 801f6a6:	f100 0314 	add.w	r3, r0, #20
 801f6aa:	3114      	adds	r1, #20
 801f6ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f6b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f6b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f6b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f6bc:	42a5      	cmp	r5, r4
 801f6be:	d003      	beq.n	801f6c8 <__mcmp+0x2c>
 801f6c0:	d305      	bcc.n	801f6ce <__mcmp+0x32>
 801f6c2:	2201      	movs	r2, #1
 801f6c4:	4610      	mov	r0, r2
 801f6c6:	bd30      	pop	{r4, r5, pc}
 801f6c8:	4283      	cmp	r3, r0
 801f6ca:	d3f3      	bcc.n	801f6b4 <__mcmp+0x18>
 801f6cc:	e7fa      	b.n	801f6c4 <__mcmp+0x28>
 801f6ce:	f04f 32ff 	mov.w	r2, #4294967295
 801f6d2:	e7f7      	b.n	801f6c4 <__mcmp+0x28>

0801f6d4 <__mdiff>:
 801f6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6d8:	460c      	mov	r4, r1
 801f6da:	4606      	mov	r6, r0
 801f6dc:	4611      	mov	r1, r2
 801f6de:	4620      	mov	r0, r4
 801f6e0:	4690      	mov	r8, r2
 801f6e2:	f7ff ffdb 	bl	801f69c <__mcmp>
 801f6e6:	1e05      	subs	r5, r0, #0
 801f6e8:	d110      	bne.n	801f70c <__mdiff+0x38>
 801f6ea:	4629      	mov	r1, r5
 801f6ec:	4630      	mov	r0, r6
 801f6ee:	f7ff fd0f 	bl	801f110 <_Balloc>
 801f6f2:	b930      	cbnz	r0, 801f702 <__mdiff+0x2e>
 801f6f4:	4b3a      	ldr	r3, [pc, #232]	; (801f7e0 <__mdiff+0x10c>)
 801f6f6:	4602      	mov	r2, r0
 801f6f8:	f240 2137 	movw	r1, #567	; 0x237
 801f6fc:	4839      	ldr	r0, [pc, #228]	; (801f7e4 <__mdiff+0x110>)
 801f6fe:	f7fd ffa9 	bl	801d654 <__assert_func>
 801f702:	2301      	movs	r3, #1
 801f704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f70c:	bfa4      	itt	ge
 801f70e:	4643      	movge	r3, r8
 801f710:	46a0      	movge	r8, r4
 801f712:	4630      	mov	r0, r6
 801f714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f718:	bfa6      	itte	ge
 801f71a:	461c      	movge	r4, r3
 801f71c:	2500      	movge	r5, #0
 801f71e:	2501      	movlt	r5, #1
 801f720:	f7ff fcf6 	bl	801f110 <_Balloc>
 801f724:	b920      	cbnz	r0, 801f730 <__mdiff+0x5c>
 801f726:	4b2e      	ldr	r3, [pc, #184]	; (801f7e0 <__mdiff+0x10c>)
 801f728:	4602      	mov	r2, r0
 801f72a:	f240 2145 	movw	r1, #581	; 0x245
 801f72e:	e7e5      	b.n	801f6fc <__mdiff+0x28>
 801f730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f734:	6926      	ldr	r6, [r4, #16]
 801f736:	60c5      	str	r5, [r0, #12]
 801f738:	f104 0914 	add.w	r9, r4, #20
 801f73c:	f108 0514 	add.w	r5, r8, #20
 801f740:	f100 0e14 	add.w	lr, r0, #20
 801f744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f74c:	f108 0210 	add.w	r2, r8, #16
 801f750:	46f2      	mov	sl, lr
 801f752:	2100      	movs	r1, #0
 801f754:	f859 3b04 	ldr.w	r3, [r9], #4
 801f758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f75c:	fa11 f88b 	uxtah	r8, r1, fp
 801f760:	b299      	uxth	r1, r3
 801f762:	0c1b      	lsrs	r3, r3, #16
 801f764:	eba8 0801 	sub.w	r8, r8, r1
 801f768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f76c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f770:	fa1f f888 	uxth.w	r8, r8
 801f774:	1419      	asrs	r1, r3, #16
 801f776:	454e      	cmp	r6, r9
 801f778:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f77c:	f84a 3b04 	str.w	r3, [sl], #4
 801f780:	d8e8      	bhi.n	801f754 <__mdiff+0x80>
 801f782:	1b33      	subs	r3, r6, r4
 801f784:	3b15      	subs	r3, #21
 801f786:	f023 0303 	bic.w	r3, r3, #3
 801f78a:	3304      	adds	r3, #4
 801f78c:	3415      	adds	r4, #21
 801f78e:	42a6      	cmp	r6, r4
 801f790:	bf38      	it	cc
 801f792:	2304      	movcc	r3, #4
 801f794:	441d      	add	r5, r3
 801f796:	4473      	add	r3, lr
 801f798:	469e      	mov	lr, r3
 801f79a:	462e      	mov	r6, r5
 801f79c:	4566      	cmp	r6, ip
 801f79e:	d30e      	bcc.n	801f7be <__mdiff+0xea>
 801f7a0:	f10c 0203 	add.w	r2, ip, #3
 801f7a4:	1b52      	subs	r2, r2, r5
 801f7a6:	f022 0203 	bic.w	r2, r2, #3
 801f7aa:	3d03      	subs	r5, #3
 801f7ac:	45ac      	cmp	ip, r5
 801f7ae:	bf38      	it	cc
 801f7b0:	2200      	movcc	r2, #0
 801f7b2:	4413      	add	r3, r2
 801f7b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f7b8:	b17a      	cbz	r2, 801f7da <__mdiff+0x106>
 801f7ba:	6107      	str	r7, [r0, #16]
 801f7bc:	e7a4      	b.n	801f708 <__mdiff+0x34>
 801f7be:	f856 8b04 	ldr.w	r8, [r6], #4
 801f7c2:	fa11 f288 	uxtah	r2, r1, r8
 801f7c6:	1414      	asrs	r4, r2, #16
 801f7c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f7cc:	b292      	uxth	r2, r2
 801f7ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f7d2:	f84e 2b04 	str.w	r2, [lr], #4
 801f7d6:	1421      	asrs	r1, r4, #16
 801f7d8:	e7e0      	b.n	801f79c <__mdiff+0xc8>
 801f7da:	3f01      	subs	r7, #1
 801f7dc:	e7ea      	b.n	801f7b4 <__mdiff+0xe0>
 801f7de:	bf00      	nop
 801f7e0:	08029899 	.word	0x08029899
 801f7e4:	08029921 	.word	0x08029921

0801f7e8 <__ulp>:
 801f7e8:	b082      	sub	sp, #8
 801f7ea:	ed8d 0b00 	vstr	d0, [sp]
 801f7ee:	9a01      	ldr	r2, [sp, #4]
 801f7f0:	4b0f      	ldr	r3, [pc, #60]	; (801f830 <__ulp+0x48>)
 801f7f2:	4013      	ands	r3, r2
 801f7f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	dc08      	bgt.n	801f80e <__ulp+0x26>
 801f7fc:	425b      	negs	r3, r3
 801f7fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801f802:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f806:	da04      	bge.n	801f812 <__ulp+0x2a>
 801f808:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801f80c:	4113      	asrs	r3, r2
 801f80e:	2200      	movs	r2, #0
 801f810:	e008      	b.n	801f824 <__ulp+0x3c>
 801f812:	f1a2 0314 	sub.w	r3, r2, #20
 801f816:	2b1e      	cmp	r3, #30
 801f818:	bfda      	itte	le
 801f81a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801f81e:	40da      	lsrle	r2, r3
 801f820:	2201      	movgt	r2, #1
 801f822:	2300      	movs	r3, #0
 801f824:	4619      	mov	r1, r3
 801f826:	4610      	mov	r0, r2
 801f828:	ec41 0b10 	vmov	d0, r0, r1
 801f82c:	b002      	add	sp, #8
 801f82e:	4770      	bx	lr
 801f830:	7ff00000 	.word	0x7ff00000

0801f834 <__b2d>:
 801f834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f838:	6906      	ldr	r6, [r0, #16]
 801f83a:	f100 0814 	add.w	r8, r0, #20
 801f83e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f842:	1f37      	subs	r7, r6, #4
 801f844:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f848:	4610      	mov	r0, r2
 801f84a:	f7ff fd53 	bl	801f2f4 <__hi0bits>
 801f84e:	f1c0 0320 	rsb	r3, r0, #32
 801f852:	280a      	cmp	r0, #10
 801f854:	600b      	str	r3, [r1, #0]
 801f856:	491b      	ldr	r1, [pc, #108]	; (801f8c4 <__b2d+0x90>)
 801f858:	dc15      	bgt.n	801f886 <__b2d+0x52>
 801f85a:	f1c0 0c0b 	rsb	ip, r0, #11
 801f85e:	fa22 f30c 	lsr.w	r3, r2, ip
 801f862:	45b8      	cmp	r8, r7
 801f864:	ea43 0501 	orr.w	r5, r3, r1
 801f868:	bf34      	ite	cc
 801f86a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f86e:	2300      	movcs	r3, #0
 801f870:	3015      	adds	r0, #21
 801f872:	fa02 f000 	lsl.w	r0, r2, r0
 801f876:	fa23 f30c 	lsr.w	r3, r3, ip
 801f87a:	4303      	orrs	r3, r0
 801f87c:	461c      	mov	r4, r3
 801f87e:	ec45 4b10 	vmov	d0, r4, r5
 801f882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f886:	45b8      	cmp	r8, r7
 801f888:	bf3a      	itte	cc
 801f88a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f88e:	f1a6 0708 	subcc.w	r7, r6, #8
 801f892:	2300      	movcs	r3, #0
 801f894:	380b      	subs	r0, #11
 801f896:	d012      	beq.n	801f8be <__b2d+0x8a>
 801f898:	f1c0 0120 	rsb	r1, r0, #32
 801f89c:	fa23 f401 	lsr.w	r4, r3, r1
 801f8a0:	4082      	lsls	r2, r0
 801f8a2:	4322      	orrs	r2, r4
 801f8a4:	4547      	cmp	r7, r8
 801f8a6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801f8aa:	bf8c      	ite	hi
 801f8ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f8b0:	2200      	movls	r2, #0
 801f8b2:	4083      	lsls	r3, r0
 801f8b4:	40ca      	lsrs	r2, r1
 801f8b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801f8ba:	4313      	orrs	r3, r2
 801f8bc:	e7de      	b.n	801f87c <__b2d+0x48>
 801f8be:	ea42 0501 	orr.w	r5, r2, r1
 801f8c2:	e7db      	b.n	801f87c <__b2d+0x48>
 801f8c4:	3ff00000 	.word	0x3ff00000

0801f8c8 <__d2b>:
 801f8c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f8cc:	460f      	mov	r7, r1
 801f8ce:	2101      	movs	r1, #1
 801f8d0:	ec59 8b10 	vmov	r8, r9, d0
 801f8d4:	4616      	mov	r6, r2
 801f8d6:	f7ff fc1b 	bl	801f110 <_Balloc>
 801f8da:	4604      	mov	r4, r0
 801f8dc:	b930      	cbnz	r0, 801f8ec <__d2b+0x24>
 801f8de:	4602      	mov	r2, r0
 801f8e0:	4b24      	ldr	r3, [pc, #144]	; (801f974 <__d2b+0xac>)
 801f8e2:	4825      	ldr	r0, [pc, #148]	; (801f978 <__d2b+0xb0>)
 801f8e4:	f240 310f 	movw	r1, #783	; 0x30f
 801f8e8:	f7fd feb4 	bl	801d654 <__assert_func>
 801f8ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f8f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f8f4:	bb2d      	cbnz	r5, 801f942 <__d2b+0x7a>
 801f8f6:	9301      	str	r3, [sp, #4]
 801f8f8:	f1b8 0300 	subs.w	r3, r8, #0
 801f8fc:	d026      	beq.n	801f94c <__d2b+0x84>
 801f8fe:	4668      	mov	r0, sp
 801f900:	9300      	str	r3, [sp, #0]
 801f902:	f7ff fd17 	bl	801f334 <__lo0bits>
 801f906:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f90a:	b1e8      	cbz	r0, 801f948 <__d2b+0x80>
 801f90c:	f1c0 0320 	rsb	r3, r0, #32
 801f910:	fa02 f303 	lsl.w	r3, r2, r3
 801f914:	430b      	orrs	r3, r1
 801f916:	40c2      	lsrs	r2, r0
 801f918:	6163      	str	r3, [r4, #20]
 801f91a:	9201      	str	r2, [sp, #4]
 801f91c:	9b01      	ldr	r3, [sp, #4]
 801f91e:	61a3      	str	r3, [r4, #24]
 801f920:	2b00      	cmp	r3, #0
 801f922:	bf14      	ite	ne
 801f924:	2202      	movne	r2, #2
 801f926:	2201      	moveq	r2, #1
 801f928:	6122      	str	r2, [r4, #16]
 801f92a:	b1bd      	cbz	r5, 801f95c <__d2b+0x94>
 801f92c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f930:	4405      	add	r5, r0
 801f932:	603d      	str	r5, [r7, #0]
 801f934:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f938:	6030      	str	r0, [r6, #0]
 801f93a:	4620      	mov	r0, r4
 801f93c:	b003      	add	sp, #12
 801f93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f946:	e7d6      	b.n	801f8f6 <__d2b+0x2e>
 801f948:	6161      	str	r1, [r4, #20]
 801f94a:	e7e7      	b.n	801f91c <__d2b+0x54>
 801f94c:	a801      	add	r0, sp, #4
 801f94e:	f7ff fcf1 	bl	801f334 <__lo0bits>
 801f952:	9b01      	ldr	r3, [sp, #4]
 801f954:	6163      	str	r3, [r4, #20]
 801f956:	3020      	adds	r0, #32
 801f958:	2201      	movs	r2, #1
 801f95a:	e7e5      	b.n	801f928 <__d2b+0x60>
 801f95c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f964:	6038      	str	r0, [r7, #0]
 801f966:	6918      	ldr	r0, [r3, #16]
 801f968:	f7ff fcc4 	bl	801f2f4 <__hi0bits>
 801f96c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f970:	e7e2      	b.n	801f938 <__d2b+0x70>
 801f972:	bf00      	nop
 801f974:	08029899 	.word	0x08029899
 801f978:	08029921 	.word	0x08029921

0801f97c <__ratio>:
 801f97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f980:	4688      	mov	r8, r1
 801f982:	4669      	mov	r1, sp
 801f984:	4681      	mov	r9, r0
 801f986:	f7ff ff55 	bl	801f834 <__b2d>
 801f98a:	a901      	add	r1, sp, #4
 801f98c:	4640      	mov	r0, r8
 801f98e:	ec55 4b10 	vmov	r4, r5, d0
 801f992:	f7ff ff4f 	bl	801f834 <__b2d>
 801f996:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f99a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f99e:	eba3 0c02 	sub.w	ip, r3, r2
 801f9a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f9a6:	1a9b      	subs	r3, r3, r2
 801f9a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f9ac:	ec51 0b10 	vmov	r0, r1, d0
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	bfd6      	itet	le
 801f9b4:	460a      	movle	r2, r1
 801f9b6:	462a      	movgt	r2, r5
 801f9b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f9bc:	468b      	mov	fp, r1
 801f9be:	462f      	mov	r7, r5
 801f9c0:	bfd4      	ite	le
 801f9c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f9c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f9ca:	4620      	mov	r0, r4
 801f9cc:	ee10 2a10 	vmov	r2, s0
 801f9d0:	465b      	mov	r3, fp
 801f9d2:	4639      	mov	r1, r7
 801f9d4:	f7e0 ff6a 	bl	80008ac <__aeabi_ddiv>
 801f9d8:	ec41 0b10 	vmov	d0, r0, r1
 801f9dc:	b003      	add	sp, #12
 801f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9e2 <__copybits>:
 801f9e2:	3901      	subs	r1, #1
 801f9e4:	b570      	push	{r4, r5, r6, lr}
 801f9e6:	1149      	asrs	r1, r1, #5
 801f9e8:	6914      	ldr	r4, [r2, #16]
 801f9ea:	3101      	adds	r1, #1
 801f9ec:	f102 0314 	add.w	r3, r2, #20
 801f9f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f9f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f9f8:	1f05      	subs	r5, r0, #4
 801f9fa:	42a3      	cmp	r3, r4
 801f9fc:	d30c      	bcc.n	801fa18 <__copybits+0x36>
 801f9fe:	1aa3      	subs	r3, r4, r2
 801fa00:	3b11      	subs	r3, #17
 801fa02:	f023 0303 	bic.w	r3, r3, #3
 801fa06:	3211      	adds	r2, #17
 801fa08:	42a2      	cmp	r2, r4
 801fa0a:	bf88      	it	hi
 801fa0c:	2300      	movhi	r3, #0
 801fa0e:	4418      	add	r0, r3
 801fa10:	2300      	movs	r3, #0
 801fa12:	4288      	cmp	r0, r1
 801fa14:	d305      	bcc.n	801fa22 <__copybits+0x40>
 801fa16:	bd70      	pop	{r4, r5, r6, pc}
 801fa18:	f853 6b04 	ldr.w	r6, [r3], #4
 801fa1c:	f845 6f04 	str.w	r6, [r5, #4]!
 801fa20:	e7eb      	b.n	801f9fa <__copybits+0x18>
 801fa22:	f840 3b04 	str.w	r3, [r0], #4
 801fa26:	e7f4      	b.n	801fa12 <__copybits+0x30>

0801fa28 <__any_on>:
 801fa28:	f100 0214 	add.w	r2, r0, #20
 801fa2c:	6900      	ldr	r0, [r0, #16]
 801fa2e:	114b      	asrs	r3, r1, #5
 801fa30:	4298      	cmp	r0, r3
 801fa32:	b510      	push	{r4, lr}
 801fa34:	db11      	blt.n	801fa5a <__any_on+0x32>
 801fa36:	dd0a      	ble.n	801fa4e <__any_on+0x26>
 801fa38:	f011 011f 	ands.w	r1, r1, #31
 801fa3c:	d007      	beq.n	801fa4e <__any_on+0x26>
 801fa3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fa42:	fa24 f001 	lsr.w	r0, r4, r1
 801fa46:	fa00 f101 	lsl.w	r1, r0, r1
 801fa4a:	428c      	cmp	r4, r1
 801fa4c:	d10b      	bne.n	801fa66 <__any_on+0x3e>
 801fa4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fa52:	4293      	cmp	r3, r2
 801fa54:	d803      	bhi.n	801fa5e <__any_on+0x36>
 801fa56:	2000      	movs	r0, #0
 801fa58:	bd10      	pop	{r4, pc}
 801fa5a:	4603      	mov	r3, r0
 801fa5c:	e7f7      	b.n	801fa4e <__any_on+0x26>
 801fa5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fa62:	2900      	cmp	r1, #0
 801fa64:	d0f5      	beq.n	801fa52 <__any_on+0x2a>
 801fa66:	2001      	movs	r0, #1
 801fa68:	e7f6      	b.n	801fa58 <__any_on+0x30>

0801fa6a <_malloc_usable_size_r>:
 801fa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa6e:	1f18      	subs	r0, r3, #4
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	bfbc      	itt	lt
 801fa74:	580b      	ldrlt	r3, [r1, r0]
 801fa76:	18c0      	addlt	r0, r0, r3
 801fa78:	4770      	bx	lr

0801fa7a <__ascii_wctomb>:
 801fa7a:	b149      	cbz	r1, 801fa90 <__ascii_wctomb+0x16>
 801fa7c:	2aff      	cmp	r2, #255	; 0xff
 801fa7e:	bf85      	ittet	hi
 801fa80:	238a      	movhi	r3, #138	; 0x8a
 801fa82:	6003      	strhi	r3, [r0, #0]
 801fa84:	700a      	strbls	r2, [r1, #0]
 801fa86:	f04f 30ff 	movhi.w	r0, #4294967295
 801fa8a:	bf98      	it	ls
 801fa8c:	2001      	movls	r0, #1
 801fa8e:	4770      	bx	lr
 801fa90:	4608      	mov	r0, r1
 801fa92:	4770      	bx	lr

0801fa94 <__ssputs_r>:
 801fa94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa98:	688e      	ldr	r6, [r1, #8]
 801fa9a:	461f      	mov	r7, r3
 801fa9c:	42be      	cmp	r6, r7
 801fa9e:	680b      	ldr	r3, [r1, #0]
 801faa0:	4682      	mov	sl, r0
 801faa2:	460c      	mov	r4, r1
 801faa4:	4690      	mov	r8, r2
 801faa6:	d82c      	bhi.n	801fb02 <__ssputs_r+0x6e>
 801faa8:	898a      	ldrh	r2, [r1, #12]
 801faaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801faae:	d026      	beq.n	801fafe <__ssputs_r+0x6a>
 801fab0:	6965      	ldr	r5, [r4, #20]
 801fab2:	6909      	ldr	r1, [r1, #16]
 801fab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fab8:	eba3 0901 	sub.w	r9, r3, r1
 801fabc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801fac0:	1c7b      	adds	r3, r7, #1
 801fac2:	444b      	add	r3, r9
 801fac4:	106d      	asrs	r5, r5, #1
 801fac6:	429d      	cmp	r5, r3
 801fac8:	bf38      	it	cc
 801faca:	461d      	movcc	r5, r3
 801facc:	0553      	lsls	r3, r2, #21
 801face:	d527      	bpl.n	801fb20 <__ssputs_r+0x8c>
 801fad0:	4629      	mov	r1, r5
 801fad2:	f7fd fe2f 	bl	801d734 <_malloc_r>
 801fad6:	4606      	mov	r6, r0
 801fad8:	b360      	cbz	r0, 801fb34 <__ssputs_r+0xa0>
 801fada:	6921      	ldr	r1, [r4, #16]
 801fadc:	464a      	mov	r2, r9
 801fade:	f7fe ff52 	bl	801e986 <memcpy>
 801fae2:	89a3      	ldrh	r3, [r4, #12]
 801fae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801fae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801faec:	81a3      	strh	r3, [r4, #12]
 801faee:	6126      	str	r6, [r4, #16]
 801faf0:	6165      	str	r5, [r4, #20]
 801faf2:	444e      	add	r6, r9
 801faf4:	eba5 0509 	sub.w	r5, r5, r9
 801faf8:	6026      	str	r6, [r4, #0]
 801fafa:	60a5      	str	r5, [r4, #8]
 801fafc:	463e      	mov	r6, r7
 801fafe:	42be      	cmp	r6, r7
 801fb00:	d900      	bls.n	801fb04 <__ssputs_r+0x70>
 801fb02:	463e      	mov	r6, r7
 801fb04:	6820      	ldr	r0, [r4, #0]
 801fb06:	4632      	mov	r2, r6
 801fb08:	4641      	mov	r1, r8
 801fb0a:	f7fe fe41 	bl	801e790 <memmove>
 801fb0e:	68a3      	ldr	r3, [r4, #8]
 801fb10:	1b9b      	subs	r3, r3, r6
 801fb12:	60a3      	str	r3, [r4, #8]
 801fb14:	6823      	ldr	r3, [r4, #0]
 801fb16:	4433      	add	r3, r6
 801fb18:	6023      	str	r3, [r4, #0]
 801fb1a:	2000      	movs	r0, #0
 801fb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb20:	462a      	mov	r2, r5
 801fb22:	f7fd fe93 	bl	801d84c <_realloc_r>
 801fb26:	4606      	mov	r6, r0
 801fb28:	2800      	cmp	r0, #0
 801fb2a:	d1e0      	bne.n	801faee <__ssputs_r+0x5a>
 801fb2c:	6921      	ldr	r1, [r4, #16]
 801fb2e:	4650      	mov	r0, sl
 801fb30:	f7fe ff38 	bl	801e9a4 <_free_r>
 801fb34:	230c      	movs	r3, #12
 801fb36:	f8ca 3000 	str.w	r3, [sl]
 801fb3a:	89a3      	ldrh	r3, [r4, #12]
 801fb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fb40:	81a3      	strh	r3, [r4, #12]
 801fb42:	f04f 30ff 	mov.w	r0, #4294967295
 801fb46:	e7e9      	b.n	801fb1c <__ssputs_r+0x88>

0801fb48 <_svfiprintf_r>:
 801fb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb4c:	4698      	mov	r8, r3
 801fb4e:	898b      	ldrh	r3, [r1, #12]
 801fb50:	061b      	lsls	r3, r3, #24
 801fb52:	b09d      	sub	sp, #116	; 0x74
 801fb54:	4607      	mov	r7, r0
 801fb56:	460d      	mov	r5, r1
 801fb58:	4614      	mov	r4, r2
 801fb5a:	d50e      	bpl.n	801fb7a <_svfiprintf_r+0x32>
 801fb5c:	690b      	ldr	r3, [r1, #16]
 801fb5e:	b963      	cbnz	r3, 801fb7a <_svfiprintf_r+0x32>
 801fb60:	2140      	movs	r1, #64	; 0x40
 801fb62:	f7fd fde7 	bl	801d734 <_malloc_r>
 801fb66:	6028      	str	r0, [r5, #0]
 801fb68:	6128      	str	r0, [r5, #16]
 801fb6a:	b920      	cbnz	r0, 801fb76 <_svfiprintf_r+0x2e>
 801fb6c:	230c      	movs	r3, #12
 801fb6e:	603b      	str	r3, [r7, #0]
 801fb70:	f04f 30ff 	mov.w	r0, #4294967295
 801fb74:	e0d0      	b.n	801fd18 <_svfiprintf_r+0x1d0>
 801fb76:	2340      	movs	r3, #64	; 0x40
 801fb78:	616b      	str	r3, [r5, #20]
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	9309      	str	r3, [sp, #36]	; 0x24
 801fb7e:	2320      	movs	r3, #32
 801fb80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fb84:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb88:	2330      	movs	r3, #48	; 0x30
 801fb8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801fd30 <_svfiprintf_r+0x1e8>
 801fb8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fb92:	f04f 0901 	mov.w	r9, #1
 801fb96:	4623      	mov	r3, r4
 801fb98:	469a      	mov	sl, r3
 801fb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb9e:	b10a      	cbz	r2, 801fba4 <_svfiprintf_r+0x5c>
 801fba0:	2a25      	cmp	r2, #37	; 0x25
 801fba2:	d1f9      	bne.n	801fb98 <_svfiprintf_r+0x50>
 801fba4:	ebba 0b04 	subs.w	fp, sl, r4
 801fba8:	d00b      	beq.n	801fbc2 <_svfiprintf_r+0x7a>
 801fbaa:	465b      	mov	r3, fp
 801fbac:	4622      	mov	r2, r4
 801fbae:	4629      	mov	r1, r5
 801fbb0:	4638      	mov	r0, r7
 801fbb2:	f7ff ff6f 	bl	801fa94 <__ssputs_r>
 801fbb6:	3001      	adds	r0, #1
 801fbb8:	f000 80a9 	beq.w	801fd0e <_svfiprintf_r+0x1c6>
 801fbbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbbe:	445a      	add	r2, fp
 801fbc0:	9209      	str	r2, [sp, #36]	; 0x24
 801fbc2:	f89a 3000 	ldrb.w	r3, [sl]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	f000 80a1 	beq.w	801fd0e <_svfiprintf_r+0x1c6>
 801fbcc:	2300      	movs	r3, #0
 801fbce:	f04f 32ff 	mov.w	r2, #4294967295
 801fbd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbd6:	f10a 0a01 	add.w	sl, sl, #1
 801fbda:	9304      	str	r3, [sp, #16]
 801fbdc:	9307      	str	r3, [sp, #28]
 801fbde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fbe2:	931a      	str	r3, [sp, #104]	; 0x68
 801fbe4:	4654      	mov	r4, sl
 801fbe6:	2205      	movs	r2, #5
 801fbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbec:	4850      	ldr	r0, [pc, #320]	; (801fd30 <_svfiprintf_r+0x1e8>)
 801fbee:	f7e0 fb1f 	bl	8000230 <memchr>
 801fbf2:	9a04      	ldr	r2, [sp, #16]
 801fbf4:	b9d8      	cbnz	r0, 801fc2e <_svfiprintf_r+0xe6>
 801fbf6:	06d0      	lsls	r0, r2, #27
 801fbf8:	bf44      	itt	mi
 801fbfa:	2320      	movmi	r3, #32
 801fbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc00:	0711      	lsls	r1, r2, #28
 801fc02:	bf44      	itt	mi
 801fc04:	232b      	movmi	r3, #43	; 0x2b
 801fc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc0a:	f89a 3000 	ldrb.w	r3, [sl]
 801fc0e:	2b2a      	cmp	r3, #42	; 0x2a
 801fc10:	d015      	beq.n	801fc3e <_svfiprintf_r+0xf6>
 801fc12:	9a07      	ldr	r2, [sp, #28]
 801fc14:	4654      	mov	r4, sl
 801fc16:	2000      	movs	r0, #0
 801fc18:	f04f 0c0a 	mov.w	ip, #10
 801fc1c:	4621      	mov	r1, r4
 801fc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc22:	3b30      	subs	r3, #48	; 0x30
 801fc24:	2b09      	cmp	r3, #9
 801fc26:	d94d      	bls.n	801fcc4 <_svfiprintf_r+0x17c>
 801fc28:	b1b0      	cbz	r0, 801fc58 <_svfiprintf_r+0x110>
 801fc2a:	9207      	str	r2, [sp, #28]
 801fc2c:	e014      	b.n	801fc58 <_svfiprintf_r+0x110>
 801fc2e:	eba0 0308 	sub.w	r3, r0, r8
 801fc32:	fa09 f303 	lsl.w	r3, r9, r3
 801fc36:	4313      	orrs	r3, r2
 801fc38:	9304      	str	r3, [sp, #16]
 801fc3a:	46a2      	mov	sl, r4
 801fc3c:	e7d2      	b.n	801fbe4 <_svfiprintf_r+0x9c>
 801fc3e:	9b03      	ldr	r3, [sp, #12]
 801fc40:	1d19      	adds	r1, r3, #4
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	9103      	str	r1, [sp, #12]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	bfbb      	ittet	lt
 801fc4a:	425b      	neglt	r3, r3
 801fc4c:	f042 0202 	orrlt.w	r2, r2, #2
 801fc50:	9307      	strge	r3, [sp, #28]
 801fc52:	9307      	strlt	r3, [sp, #28]
 801fc54:	bfb8      	it	lt
 801fc56:	9204      	strlt	r2, [sp, #16]
 801fc58:	7823      	ldrb	r3, [r4, #0]
 801fc5a:	2b2e      	cmp	r3, #46	; 0x2e
 801fc5c:	d10c      	bne.n	801fc78 <_svfiprintf_r+0x130>
 801fc5e:	7863      	ldrb	r3, [r4, #1]
 801fc60:	2b2a      	cmp	r3, #42	; 0x2a
 801fc62:	d134      	bne.n	801fcce <_svfiprintf_r+0x186>
 801fc64:	9b03      	ldr	r3, [sp, #12]
 801fc66:	1d1a      	adds	r2, r3, #4
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	9203      	str	r2, [sp, #12]
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	bfb8      	it	lt
 801fc70:	f04f 33ff 	movlt.w	r3, #4294967295
 801fc74:	3402      	adds	r4, #2
 801fc76:	9305      	str	r3, [sp, #20]
 801fc78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801fd40 <_svfiprintf_r+0x1f8>
 801fc7c:	7821      	ldrb	r1, [r4, #0]
 801fc7e:	2203      	movs	r2, #3
 801fc80:	4650      	mov	r0, sl
 801fc82:	f7e0 fad5 	bl	8000230 <memchr>
 801fc86:	b138      	cbz	r0, 801fc98 <_svfiprintf_r+0x150>
 801fc88:	9b04      	ldr	r3, [sp, #16]
 801fc8a:	eba0 000a 	sub.w	r0, r0, sl
 801fc8e:	2240      	movs	r2, #64	; 0x40
 801fc90:	4082      	lsls	r2, r0
 801fc92:	4313      	orrs	r3, r2
 801fc94:	3401      	adds	r4, #1
 801fc96:	9304      	str	r3, [sp, #16]
 801fc98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc9c:	4825      	ldr	r0, [pc, #148]	; (801fd34 <_svfiprintf_r+0x1ec>)
 801fc9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fca2:	2206      	movs	r2, #6
 801fca4:	f7e0 fac4 	bl	8000230 <memchr>
 801fca8:	2800      	cmp	r0, #0
 801fcaa:	d038      	beq.n	801fd1e <_svfiprintf_r+0x1d6>
 801fcac:	4b22      	ldr	r3, [pc, #136]	; (801fd38 <_svfiprintf_r+0x1f0>)
 801fcae:	bb1b      	cbnz	r3, 801fcf8 <_svfiprintf_r+0x1b0>
 801fcb0:	9b03      	ldr	r3, [sp, #12]
 801fcb2:	3307      	adds	r3, #7
 801fcb4:	f023 0307 	bic.w	r3, r3, #7
 801fcb8:	3308      	adds	r3, #8
 801fcba:	9303      	str	r3, [sp, #12]
 801fcbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fcbe:	4433      	add	r3, r6
 801fcc0:	9309      	str	r3, [sp, #36]	; 0x24
 801fcc2:	e768      	b.n	801fb96 <_svfiprintf_r+0x4e>
 801fcc4:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcc8:	460c      	mov	r4, r1
 801fcca:	2001      	movs	r0, #1
 801fccc:	e7a6      	b.n	801fc1c <_svfiprintf_r+0xd4>
 801fcce:	2300      	movs	r3, #0
 801fcd0:	3401      	adds	r4, #1
 801fcd2:	9305      	str	r3, [sp, #20]
 801fcd4:	4619      	mov	r1, r3
 801fcd6:	f04f 0c0a 	mov.w	ip, #10
 801fcda:	4620      	mov	r0, r4
 801fcdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fce0:	3a30      	subs	r2, #48	; 0x30
 801fce2:	2a09      	cmp	r2, #9
 801fce4:	d903      	bls.n	801fcee <_svfiprintf_r+0x1a6>
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d0c6      	beq.n	801fc78 <_svfiprintf_r+0x130>
 801fcea:	9105      	str	r1, [sp, #20]
 801fcec:	e7c4      	b.n	801fc78 <_svfiprintf_r+0x130>
 801fcee:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcf2:	4604      	mov	r4, r0
 801fcf4:	2301      	movs	r3, #1
 801fcf6:	e7f0      	b.n	801fcda <_svfiprintf_r+0x192>
 801fcf8:	ab03      	add	r3, sp, #12
 801fcfa:	9300      	str	r3, [sp, #0]
 801fcfc:	462a      	mov	r2, r5
 801fcfe:	4b0f      	ldr	r3, [pc, #60]	; (801fd3c <_svfiprintf_r+0x1f4>)
 801fd00:	a904      	add	r1, sp, #16
 801fd02:	4638      	mov	r0, r7
 801fd04:	f3af 8000 	nop.w
 801fd08:	1c42      	adds	r2, r0, #1
 801fd0a:	4606      	mov	r6, r0
 801fd0c:	d1d6      	bne.n	801fcbc <_svfiprintf_r+0x174>
 801fd0e:	89ab      	ldrh	r3, [r5, #12]
 801fd10:	065b      	lsls	r3, r3, #25
 801fd12:	f53f af2d 	bmi.w	801fb70 <_svfiprintf_r+0x28>
 801fd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fd18:	b01d      	add	sp, #116	; 0x74
 801fd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd1e:	ab03      	add	r3, sp, #12
 801fd20:	9300      	str	r3, [sp, #0]
 801fd22:	462a      	mov	r2, r5
 801fd24:	4b05      	ldr	r3, [pc, #20]	; (801fd3c <_svfiprintf_r+0x1f4>)
 801fd26:	a904      	add	r1, sp, #16
 801fd28:	4638      	mov	r0, r7
 801fd2a:	f000 f9bd 	bl	80200a8 <_printf_i>
 801fd2e:	e7eb      	b.n	801fd08 <_svfiprintf_r+0x1c0>
 801fd30:	08029a7c 	.word	0x08029a7c
 801fd34:	08029a86 	.word	0x08029a86
 801fd38:	00000000 	.word	0x00000000
 801fd3c:	0801fa95 	.word	0x0801fa95
 801fd40:	08029a82 	.word	0x08029a82

0801fd44 <__sfputc_r>:
 801fd44:	6893      	ldr	r3, [r2, #8]
 801fd46:	3b01      	subs	r3, #1
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	b410      	push	{r4}
 801fd4c:	6093      	str	r3, [r2, #8]
 801fd4e:	da08      	bge.n	801fd62 <__sfputc_r+0x1e>
 801fd50:	6994      	ldr	r4, [r2, #24]
 801fd52:	42a3      	cmp	r3, r4
 801fd54:	db01      	blt.n	801fd5a <__sfputc_r+0x16>
 801fd56:	290a      	cmp	r1, #10
 801fd58:	d103      	bne.n	801fd62 <__sfputc_r+0x1e>
 801fd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd5e:	f000 bb73 	b.w	8020448 <__swbuf_r>
 801fd62:	6813      	ldr	r3, [r2, #0]
 801fd64:	1c58      	adds	r0, r3, #1
 801fd66:	6010      	str	r0, [r2, #0]
 801fd68:	7019      	strb	r1, [r3, #0]
 801fd6a:	4608      	mov	r0, r1
 801fd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd70:	4770      	bx	lr

0801fd72 <__sfputs_r>:
 801fd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd74:	4606      	mov	r6, r0
 801fd76:	460f      	mov	r7, r1
 801fd78:	4614      	mov	r4, r2
 801fd7a:	18d5      	adds	r5, r2, r3
 801fd7c:	42ac      	cmp	r4, r5
 801fd7e:	d101      	bne.n	801fd84 <__sfputs_r+0x12>
 801fd80:	2000      	movs	r0, #0
 801fd82:	e007      	b.n	801fd94 <__sfputs_r+0x22>
 801fd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd88:	463a      	mov	r2, r7
 801fd8a:	4630      	mov	r0, r6
 801fd8c:	f7ff ffda 	bl	801fd44 <__sfputc_r>
 801fd90:	1c43      	adds	r3, r0, #1
 801fd92:	d1f3      	bne.n	801fd7c <__sfputs_r+0xa>
 801fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fd98 <_vfiprintf_r>:
 801fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd9c:	460d      	mov	r5, r1
 801fd9e:	b09d      	sub	sp, #116	; 0x74
 801fda0:	4614      	mov	r4, r2
 801fda2:	4698      	mov	r8, r3
 801fda4:	4606      	mov	r6, r0
 801fda6:	b118      	cbz	r0, 801fdb0 <_vfiprintf_r+0x18>
 801fda8:	6a03      	ldr	r3, [r0, #32]
 801fdaa:	b90b      	cbnz	r3, 801fdb0 <_vfiprintf_r+0x18>
 801fdac:	f7fe fc24 	bl	801e5f8 <__sinit>
 801fdb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fdb2:	07d9      	lsls	r1, r3, #31
 801fdb4:	d405      	bmi.n	801fdc2 <_vfiprintf_r+0x2a>
 801fdb6:	89ab      	ldrh	r3, [r5, #12]
 801fdb8:	059a      	lsls	r2, r3, #22
 801fdba:	d402      	bmi.n	801fdc2 <_vfiprintf_r+0x2a>
 801fdbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdbe:	f7fe fde0 	bl	801e982 <__retarget_lock_acquire_recursive>
 801fdc2:	89ab      	ldrh	r3, [r5, #12]
 801fdc4:	071b      	lsls	r3, r3, #28
 801fdc6:	d501      	bpl.n	801fdcc <_vfiprintf_r+0x34>
 801fdc8:	692b      	ldr	r3, [r5, #16]
 801fdca:	b99b      	cbnz	r3, 801fdf4 <_vfiprintf_r+0x5c>
 801fdcc:	4629      	mov	r1, r5
 801fdce:	4630      	mov	r0, r6
 801fdd0:	f000 fb78 	bl	80204c4 <__swsetup_r>
 801fdd4:	b170      	cbz	r0, 801fdf4 <_vfiprintf_r+0x5c>
 801fdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fdd8:	07dc      	lsls	r4, r3, #31
 801fdda:	d504      	bpl.n	801fde6 <_vfiprintf_r+0x4e>
 801fddc:	f04f 30ff 	mov.w	r0, #4294967295
 801fde0:	b01d      	add	sp, #116	; 0x74
 801fde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fde6:	89ab      	ldrh	r3, [r5, #12]
 801fde8:	0598      	lsls	r0, r3, #22
 801fdea:	d4f7      	bmi.n	801fddc <_vfiprintf_r+0x44>
 801fdec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fdee:	f7fe fdc9 	bl	801e984 <__retarget_lock_release_recursive>
 801fdf2:	e7f3      	b.n	801fddc <_vfiprintf_r+0x44>
 801fdf4:	2300      	movs	r3, #0
 801fdf6:	9309      	str	r3, [sp, #36]	; 0x24
 801fdf8:	2320      	movs	r3, #32
 801fdfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fdfe:	f8cd 800c 	str.w	r8, [sp, #12]
 801fe02:	2330      	movs	r3, #48	; 0x30
 801fe04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ffb8 <_vfiprintf_r+0x220>
 801fe08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fe0c:	f04f 0901 	mov.w	r9, #1
 801fe10:	4623      	mov	r3, r4
 801fe12:	469a      	mov	sl, r3
 801fe14:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fe18:	b10a      	cbz	r2, 801fe1e <_vfiprintf_r+0x86>
 801fe1a:	2a25      	cmp	r2, #37	; 0x25
 801fe1c:	d1f9      	bne.n	801fe12 <_vfiprintf_r+0x7a>
 801fe1e:	ebba 0b04 	subs.w	fp, sl, r4
 801fe22:	d00b      	beq.n	801fe3c <_vfiprintf_r+0xa4>
 801fe24:	465b      	mov	r3, fp
 801fe26:	4622      	mov	r2, r4
 801fe28:	4629      	mov	r1, r5
 801fe2a:	4630      	mov	r0, r6
 801fe2c:	f7ff ffa1 	bl	801fd72 <__sfputs_r>
 801fe30:	3001      	adds	r0, #1
 801fe32:	f000 80a9 	beq.w	801ff88 <_vfiprintf_r+0x1f0>
 801fe36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fe38:	445a      	add	r2, fp
 801fe3a:	9209      	str	r2, [sp, #36]	; 0x24
 801fe3c:	f89a 3000 	ldrb.w	r3, [sl]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	f000 80a1 	beq.w	801ff88 <_vfiprintf_r+0x1f0>
 801fe46:	2300      	movs	r3, #0
 801fe48:	f04f 32ff 	mov.w	r2, #4294967295
 801fe4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fe50:	f10a 0a01 	add.w	sl, sl, #1
 801fe54:	9304      	str	r3, [sp, #16]
 801fe56:	9307      	str	r3, [sp, #28]
 801fe58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fe5c:	931a      	str	r3, [sp, #104]	; 0x68
 801fe5e:	4654      	mov	r4, sl
 801fe60:	2205      	movs	r2, #5
 801fe62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe66:	4854      	ldr	r0, [pc, #336]	; (801ffb8 <_vfiprintf_r+0x220>)
 801fe68:	f7e0 f9e2 	bl	8000230 <memchr>
 801fe6c:	9a04      	ldr	r2, [sp, #16]
 801fe6e:	b9d8      	cbnz	r0, 801fea8 <_vfiprintf_r+0x110>
 801fe70:	06d1      	lsls	r1, r2, #27
 801fe72:	bf44      	itt	mi
 801fe74:	2320      	movmi	r3, #32
 801fe76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fe7a:	0713      	lsls	r3, r2, #28
 801fe7c:	bf44      	itt	mi
 801fe7e:	232b      	movmi	r3, #43	; 0x2b
 801fe80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fe84:	f89a 3000 	ldrb.w	r3, [sl]
 801fe88:	2b2a      	cmp	r3, #42	; 0x2a
 801fe8a:	d015      	beq.n	801feb8 <_vfiprintf_r+0x120>
 801fe8c:	9a07      	ldr	r2, [sp, #28]
 801fe8e:	4654      	mov	r4, sl
 801fe90:	2000      	movs	r0, #0
 801fe92:	f04f 0c0a 	mov.w	ip, #10
 801fe96:	4621      	mov	r1, r4
 801fe98:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fe9c:	3b30      	subs	r3, #48	; 0x30
 801fe9e:	2b09      	cmp	r3, #9
 801fea0:	d94d      	bls.n	801ff3e <_vfiprintf_r+0x1a6>
 801fea2:	b1b0      	cbz	r0, 801fed2 <_vfiprintf_r+0x13a>
 801fea4:	9207      	str	r2, [sp, #28]
 801fea6:	e014      	b.n	801fed2 <_vfiprintf_r+0x13a>
 801fea8:	eba0 0308 	sub.w	r3, r0, r8
 801feac:	fa09 f303 	lsl.w	r3, r9, r3
 801feb0:	4313      	orrs	r3, r2
 801feb2:	9304      	str	r3, [sp, #16]
 801feb4:	46a2      	mov	sl, r4
 801feb6:	e7d2      	b.n	801fe5e <_vfiprintf_r+0xc6>
 801feb8:	9b03      	ldr	r3, [sp, #12]
 801feba:	1d19      	adds	r1, r3, #4
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	9103      	str	r1, [sp, #12]
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	bfbb      	ittet	lt
 801fec4:	425b      	neglt	r3, r3
 801fec6:	f042 0202 	orrlt.w	r2, r2, #2
 801feca:	9307      	strge	r3, [sp, #28]
 801fecc:	9307      	strlt	r3, [sp, #28]
 801fece:	bfb8      	it	lt
 801fed0:	9204      	strlt	r2, [sp, #16]
 801fed2:	7823      	ldrb	r3, [r4, #0]
 801fed4:	2b2e      	cmp	r3, #46	; 0x2e
 801fed6:	d10c      	bne.n	801fef2 <_vfiprintf_r+0x15a>
 801fed8:	7863      	ldrb	r3, [r4, #1]
 801feda:	2b2a      	cmp	r3, #42	; 0x2a
 801fedc:	d134      	bne.n	801ff48 <_vfiprintf_r+0x1b0>
 801fede:	9b03      	ldr	r3, [sp, #12]
 801fee0:	1d1a      	adds	r2, r3, #4
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	9203      	str	r2, [sp, #12]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	bfb8      	it	lt
 801feea:	f04f 33ff 	movlt.w	r3, #4294967295
 801feee:	3402      	adds	r4, #2
 801fef0:	9305      	str	r3, [sp, #20]
 801fef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ffc8 <_vfiprintf_r+0x230>
 801fef6:	7821      	ldrb	r1, [r4, #0]
 801fef8:	2203      	movs	r2, #3
 801fefa:	4650      	mov	r0, sl
 801fefc:	f7e0 f998 	bl	8000230 <memchr>
 801ff00:	b138      	cbz	r0, 801ff12 <_vfiprintf_r+0x17a>
 801ff02:	9b04      	ldr	r3, [sp, #16]
 801ff04:	eba0 000a 	sub.w	r0, r0, sl
 801ff08:	2240      	movs	r2, #64	; 0x40
 801ff0a:	4082      	lsls	r2, r0
 801ff0c:	4313      	orrs	r3, r2
 801ff0e:	3401      	adds	r4, #1
 801ff10:	9304      	str	r3, [sp, #16]
 801ff12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff16:	4829      	ldr	r0, [pc, #164]	; (801ffbc <_vfiprintf_r+0x224>)
 801ff18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ff1c:	2206      	movs	r2, #6
 801ff1e:	f7e0 f987 	bl	8000230 <memchr>
 801ff22:	2800      	cmp	r0, #0
 801ff24:	d03f      	beq.n	801ffa6 <_vfiprintf_r+0x20e>
 801ff26:	4b26      	ldr	r3, [pc, #152]	; (801ffc0 <_vfiprintf_r+0x228>)
 801ff28:	bb1b      	cbnz	r3, 801ff72 <_vfiprintf_r+0x1da>
 801ff2a:	9b03      	ldr	r3, [sp, #12]
 801ff2c:	3307      	adds	r3, #7
 801ff2e:	f023 0307 	bic.w	r3, r3, #7
 801ff32:	3308      	adds	r3, #8
 801ff34:	9303      	str	r3, [sp, #12]
 801ff36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff38:	443b      	add	r3, r7
 801ff3a:	9309      	str	r3, [sp, #36]	; 0x24
 801ff3c:	e768      	b.n	801fe10 <_vfiprintf_r+0x78>
 801ff3e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ff42:	460c      	mov	r4, r1
 801ff44:	2001      	movs	r0, #1
 801ff46:	e7a6      	b.n	801fe96 <_vfiprintf_r+0xfe>
 801ff48:	2300      	movs	r3, #0
 801ff4a:	3401      	adds	r4, #1
 801ff4c:	9305      	str	r3, [sp, #20]
 801ff4e:	4619      	mov	r1, r3
 801ff50:	f04f 0c0a 	mov.w	ip, #10
 801ff54:	4620      	mov	r0, r4
 801ff56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ff5a:	3a30      	subs	r2, #48	; 0x30
 801ff5c:	2a09      	cmp	r2, #9
 801ff5e:	d903      	bls.n	801ff68 <_vfiprintf_r+0x1d0>
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d0c6      	beq.n	801fef2 <_vfiprintf_r+0x15a>
 801ff64:	9105      	str	r1, [sp, #20]
 801ff66:	e7c4      	b.n	801fef2 <_vfiprintf_r+0x15a>
 801ff68:	fb0c 2101 	mla	r1, ip, r1, r2
 801ff6c:	4604      	mov	r4, r0
 801ff6e:	2301      	movs	r3, #1
 801ff70:	e7f0      	b.n	801ff54 <_vfiprintf_r+0x1bc>
 801ff72:	ab03      	add	r3, sp, #12
 801ff74:	9300      	str	r3, [sp, #0]
 801ff76:	462a      	mov	r2, r5
 801ff78:	4b12      	ldr	r3, [pc, #72]	; (801ffc4 <_vfiprintf_r+0x22c>)
 801ff7a:	a904      	add	r1, sp, #16
 801ff7c:	4630      	mov	r0, r6
 801ff7e:	f3af 8000 	nop.w
 801ff82:	4607      	mov	r7, r0
 801ff84:	1c78      	adds	r0, r7, #1
 801ff86:	d1d6      	bne.n	801ff36 <_vfiprintf_r+0x19e>
 801ff88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff8a:	07d9      	lsls	r1, r3, #31
 801ff8c:	d405      	bmi.n	801ff9a <_vfiprintf_r+0x202>
 801ff8e:	89ab      	ldrh	r3, [r5, #12]
 801ff90:	059a      	lsls	r2, r3, #22
 801ff92:	d402      	bmi.n	801ff9a <_vfiprintf_r+0x202>
 801ff94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff96:	f7fe fcf5 	bl	801e984 <__retarget_lock_release_recursive>
 801ff9a:	89ab      	ldrh	r3, [r5, #12]
 801ff9c:	065b      	lsls	r3, r3, #25
 801ff9e:	f53f af1d 	bmi.w	801fddc <_vfiprintf_r+0x44>
 801ffa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ffa4:	e71c      	b.n	801fde0 <_vfiprintf_r+0x48>
 801ffa6:	ab03      	add	r3, sp, #12
 801ffa8:	9300      	str	r3, [sp, #0]
 801ffaa:	462a      	mov	r2, r5
 801ffac:	4b05      	ldr	r3, [pc, #20]	; (801ffc4 <_vfiprintf_r+0x22c>)
 801ffae:	a904      	add	r1, sp, #16
 801ffb0:	4630      	mov	r0, r6
 801ffb2:	f000 f879 	bl	80200a8 <_printf_i>
 801ffb6:	e7e4      	b.n	801ff82 <_vfiprintf_r+0x1ea>
 801ffb8:	08029a7c 	.word	0x08029a7c
 801ffbc:	08029a86 	.word	0x08029a86
 801ffc0:	00000000 	.word	0x00000000
 801ffc4:	0801fd73 	.word	0x0801fd73
 801ffc8:	08029a82 	.word	0x08029a82

0801ffcc <_printf_common>:
 801ffcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffd0:	4616      	mov	r6, r2
 801ffd2:	4699      	mov	r9, r3
 801ffd4:	688a      	ldr	r2, [r1, #8]
 801ffd6:	690b      	ldr	r3, [r1, #16]
 801ffd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ffdc:	4293      	cmp	r3, r2
 801ffde:	bfb8      	it	lt
 801ffe0:	4613      	movlt	r3, r2
 801ffe2:	6033      	str	r3, [r6, #0]
 801ffe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ffe8:	4607      	mov	r7, r0
 801ffea:	460c      	mov	r4, r1
 801ffec:	b10a      	cbz	r2, 801fff2 <_printf_common+0x26>
 801ffee:	3301      	adds	r3, #1
 801fff0:	6033      	str	r3, [r6, #0]
 801fff2:	6823      	ldr	r3, [r4, #0]
 801fff4:	0699      	lsls	r1, r3, #26
 801fff6:	bf42      	ittt	mi
 801fff8:	6833      	ldrmi	r3, [r6, #0]
 801fffa:	3302      	addmi	r3, #2
 801fffc:	6033      	strmi	r3, [r6, #0]
 801fffe:	6825      	ldr	r5, [r4, #0]
 8020000:	f015 0506 	ands.w	r5, r5, #6
 8020004:	d106      	bne.n	8020014 <_printf_common+0x48>
 8020006:	f104 0a19 	add.w	sl, r4, #25
 802000a:	68e3      	ldr	r3, [r4, #12]
 802000c:	6832      	ldr	r2, [r6, #0]
 802000e:	1a9b      	subs	r3, r3, r2
 8020010:	42ab      	cmp	r3, r5
 8020012:	dc26      	bgt.n	8020062 <_printf_common+0x96>
 8020014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020018:	1e13      	subs	r3, r2, #0
 802001a:	6822      	ldr	r2, [r4, #0]
 802001c:	bf18      	it	ne
 802001e:	2301      	movne	r3, #1
 8020020:	0692      	lsls	r2, r2, #26
 8020022:	d42b      	bmi.n	802007c <_printf_common+0xb0>
 8020024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020028:	4649      	mov	r1, r9
 802002a:	4638      	mov	r0, r7
 802002c:	47c0      	blx	r8
 802002e:	3001      	adds	r0, #1
 8020030:	d01e      	beq.n	8020070 <_printf_common+0xa4>
 8020032:	6823      	ldr	r3, [r4, #0]
 8020034:	6922      	ldr	r2, [r4, #16]
 8020036:	f003 0306 	and.w	r3, r3, #6
 802003a:	2b04      	cmp	r3, #4
 802003c:	bf02      	ittt	eq
 802003e:	68e5      	ldreq	r5, [r4, #12]
 8020040:	6833      	ldreq	r3, [r6, #0]
 8020042:	1aed      	subeq	r5, r5, r3
 8020044:	68a3      	ldr	r3, [r4, #8]
 8020046:	bf0c      	ite	eq
 8020048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802004c:	2500      	movne	r5, #0
 802004e:	4293      	cmp	r3, r2
 8020050:	bfc4      	itt	gt
 8020052:	1a9b      	subgt	r3, r3, r2
 8020054:	18ed      	addgt	r5, r5, r3
 8020056:	2600      	movs	r6, #0
 8020058:	341a      	adds	r4, #26
 802005a:	42b5      	cmp	r5, r6
 802005c:	d11a      	bne.n	8020094 <_printf_common+0xc8>
 802005e:	2000      	movs	r0, #0
 8020060:	e008      	b.n	8020074 <_printf_common+0xa8>
 8020062:	2301      	movs	r3, #1
 8020064:	4652      	mov	r2, sl
 8020066:	4649      	mov	r1, r9
 8020068:	4638      	mov	r0, r7
 802006a:	47c0      	blx	r8
 802006c:	3001      	adds	r0, #1
 802006e:	d103      	bne.n	8020078 <_printf_common+0xac>
 8020070:	f04f 30ff 	mov.w	r0, #4294967295
 8020074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020078:	3501      	adds	r5, #1
 802007a:	e7c6      	b.n	802000a <_printf_common+0x3e>
 802007c:	18e1      	adds	r1, r4, r3
 802007e:	1c5a      	adds	r2, r3, #1
 8020080:	2030      	movs	r0, #48	; 0x30
 8020082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020086:	4422      	add	r2, r4
 8020088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802008c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020090:	3302      	adds	r3, #2
 8020092:	e7c7      	b.n	8020024 <_printf_common+0x58>
 8020094:	2301      	movs	r3, #1
 8020096:	4622      	mov	r2, r4
 8020098:	4649      	mov	r1, r9
 802009a:	4638      	mov	r0, r7
 802009c:	47c0      	blx	r8
 802009e:	3001      	adds	r0, #1
 80200a0:	d0e6      	beq.n	8020070 <_printf_common+0xa4>
 80200a2:	3601      	adds	r6, #1
 80200a4:	e7d9      	b.n	802005a <_printf_common+0x8e>
	...

080200a8 <_printf_i>:
 80200a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80200ac:	7e0f      	ldrb	r7, [r1, #24]
 80200ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80200b0:	2f78      	cmp	r7, #120	; 0x78
 80200b2:	4691      	mov	r9, r2
 80200b4:	4680      	mov	r8, r0
 80200b6:	460c      	mov	r4, r1
 80200b8:	469a      	mov	sl, r3
 80200ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80200be:	d807      	bhi.n	80200d0 <_printf_i+0x28>
 80200c0:	2f62      	cmp	r7, #98	; 0x62
 80200c2:	d80a      	bhi.n	80200da <_printf_i+0x32>
 80200c4:	2f00      	cmp	r7, #0
 80200c6:	f000 80d4 	beq.w	8020272 <_printf_i+0x1ca>
 80200ca:	2f58      	cmp	r7, #88	; 0x58
 80200cc:	f000 80c0 	beq.w	8020250 <_printf_i+0x1a8>
 80200d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80200d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80200d8:	e03a      	b.n	8020150 <_printf_i+0xa8>
 80200da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80200de:	2b15      	cmp	r3, #21
 80200e0:	d8f6      	bhi.n	80200d0 <_printf_i+0x28>
 80200e2:	a101      	add	r1, pc, #4	; (adr r1, 80200e8 <_printf_i+0x40>)
 80200e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80200e8:	08020141 	.word	0x08020141
 80200ec:	08020155 	.word	0x08020155
 80200f0:	080200d1 	.word	0x080200d1
 80200f4:	080200d1 	.word	0x080200d1
 80200f8:	080200d1 	.word	0x080200d1
 80200fc:	080200d1 	.word	0x080200d1
 8020100:	08020155 	.word	0x08020155
 8020104:	080200d1 	.word	0x080200d1
 8020108:	080200d1 	.word	0x080200d1
 802010c:	080200d1 	.word	0x080200d1
 8020110:	080200d1 	.word	0x080200d1
 8020114:	08020259 	.word	0x08020259
 8020118:	08020181 	.word	0x08020181
 802011c:	08020213 	.word	0x08020213
 8020120:	080200d1 	.word	0x080200d1
 8020124:	080200d1 	.word	0x080200d1
 8020128:	0802027b 	.word	0x0802027b
 802012c:	080200d1 	.word	0x080200d1
 8020130:	08020181 	.word	0x08020181
 8020134:	080200d1 	.word	0x080200d1
 8020138:	080200d1 	.word	0x080200d1
 802013c:	0802021b 	.word	0x0802021b
 8020140:	682b      	ldr	r3, [r5, #0]
 8020142:	1d1a      	adds	r2, r3, #4
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	602a      	str	r2, [r5, #0]
 8020148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802014c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020150:	2301      	movs	r3, #1
 8020152:	e09f      	b.n	8020294 <_printf_i+0x1ec>
 8020154:	6820      	ldr	r0, [r4, #0]
 8020156:	682b      	ldr	r3, [r5, #0]
 8020158:	0607      	lsls	r7, r0, #24
 802015a:	f103 0104 	add.w	r1, r3, #4
 802015e:	6029      	str	r1, [r5, #0]
 8020160:	d501      	bpl.n	8020166 <_printf_i+0xbe>
 8020162:	681e      	ldr	r6, [r3, #0]
 8020164:	e003      	b.n	802016e <_printf_i+0xc6>
 8020166:	0646      	lsls	r6, r0, #25
 8020168:	d5fb      	bpl.n	8020162 <_printf_i+0xba>
 802016a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802016e:	2e00      	cmp	r6, #0
 8020170:	da03      	bge.n	802017a <_printf_i+0xd2>
 8020172:	232d      	movs	r3, #45	; 0x2d
 8020174:	4276      	negs	r6, r6
 8020176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802017a:	485a      	ldr	r0, [pc, #360]	; (80202e4 <_printf_i+0x23c>)
 802017c:	230a      	movs	r3, #10
 802017e:	e012      	b.n	80201a6 <_printf_i+0xfe>
 8020180:	682b      	ldr	r3, [r5, #0]
 8020182:	6820      	ldr	r0, [r4, #0]
 8020184:	1d19      	adds	r1, r3, #4
 8020186:	6029      	str	r1, [r5, #0]
 8020188:	0605      	lsls	r5, r0, #24
 802018a:	d501      	bpl.n	8020190 <_printf_i+0xe8>
 802018c:	681e      	ldr	r6, [r3, #0]
 802018e:	e002      	b.n	8020196 <_printf_i+0xee>
 8020190:	0641      	lsls	r1, r0, #25
 8020192:	d5fb      	bpl.n	802018c <_printf_i+0xe4>
 8020194:	881e      	ldrh	r6, [r3, #0]
 8020196:	4853      	ldr	r0, [pc, #332]	; (80202e4 <_printf_i+0x23c>)
 8020198:	2f6f      	cmp	r7, #111	; 0x6f
 802019a:	bf0c      	ite	eq
 802019c:	2308      	moveq	r3, #8
 802019e:	230a      	movne	r3, #10
 80201a0:	2100      	movs	r1, #0
 80201a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80201a6:	6865      	ldr	r5, [r4, #4]
 80201a8:	60a5      	str	r5, [r4, #8]
 80201aa:	2d00      	cmp	r5, #0
 80201ac:	bfa2      	ittt	ge
 80201ae:	6821      	ldrge	r1, [r4, #0]
 80201b0:	f021 0104 	bicge.w	r1, r1, #4
 80201b4:	6021      	strge	r1, [r4, #0]
 80201b6:	b90e      	cbnz	r6, 80201bc <_printf_i+0x114>
 80201b8:	2d00      	cmp	r5, #0
 80201ba:	d04b      	beq.n	8020254 <_printf_i+0x1ac>
 80201bc:	4615      	mov	r5, r2
 80201be:	fbb6 f1f3 	udiv	r1, r6, r3
 80201c2:	fb03 6711 	mls	r7, r3, r1, r6
 80201c6:	5dc7      	ldrb	r7, [r0, r7]
 80201c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80201cc:	4637      	mov	r7, r6
 80201ce:	42bb      	cmp	r3, r7
 80201d0:	460e      	mov	r6, r1
 80201d2:	d9f4      	bls.n	80201be <_printf_i+0x116>
 80201d4:	2b08      	cmp	r3, #8
 80201d6:	d10b      	bne.n	80201f0 <_printf_i+0x148>
 80201d8:	6823      	ldr	r3, [r4, #0]
 80201da:	07de      	lsls	r6, r3, #31
 80201dc:	d508      	bpl.n	80201f0 <_printf_i+0x148>
 80201de:	6923      	ldr	r3, [r4, #16]
 80201e0:	6861      	ldr	r1, [r4, #4]
 80201e2:	4299      	cmp	r1, r3
 80201e4:	bfde      	ittt	le
 80201e6:	2330      	movle	r3, #48	; 0x30
 80201e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80201ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80201f0:	1b52      	subs	r2, r2, r5
 80201f2:	6122      	str	r2, [r4, #16]
 80201f4:	f8cd a000 	str.w	sl, [sp]
 80201f8:	464b      	mov	r3, r9
 80201fa:	aa03      	add	r2, sp, #12
 80201fc:	4621      	mov	r1, r4
 80201fe:	4640      	mov	r0, r8
 8020200:	f7ff fee4 	bl	801ffcc <_printf_common>
 8020204:	3001      	adds	r0, #1
 8020206:	d14a      	bne.n	802029e <_printf_i+0x1f6>
 8020208:	f04f 30ff 	mov.w	r0, #4294967295
 802020c:	b004      	add	sp, #16
 802020e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020212:	6823      	ldr	r3, [r4, #0]
 8020214:	f043 0320 	orr.w	r3, r3, #32
 8020218:	6023      	str	r3, [r4, #0]
 802021a:	4833      	ldr	r0, [pc, #204]	; (80202e8 <_printf_i+0x240>)
 802021c:	2778      	movs	r7, #120	; 0x78
 802021e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020222:	6823      	ldr	r3, [r4, #0]
 8020224:	6829      	ldr	r1, [r5, #0]
 8020226:	061f      	lsls	r7, r3, #24
 8020228:	f851 6b04 	ldr.w	r6, [r1], #4
 802022c:	d402      	bmi.n	8020234 <_printf_i+0x18c>
 802022e:	065f      	lsls	r7, r3, #25
 8020230:	bf48      	it	mi
 8020232:	b2b6      	uxthmi	r6, r6
 8020234:	07df      	lsls	r7, r3, #31
 8020236:	bf48      	it	mi
 8020238:	f043 0320 	orrmi.w	r3, r3, #32
 802023c:	6029      	str	r1, [r5, #0]
 802023e:	bf48      	it	mi
 8020240:	6023      	strmi	r3, [r4, #0]
 8020242:	b91e      	cbnz	r6, 802024c <_printf_i+0x1a4>
 8020244:	6823      	ldr	r3, [r4, #0]
 8020246:	f023 0320 	bic.w	r3, r3, #32
 802024a:	6023      	str	r3, [r4, #0]
 802024c:	2310      	movs	r3, #16
 802024e:	e7a7      	b.n	80201a0 <_printf_i+0xf8>
 8020250:	4824      	ldr	r0, [pc, #144]	; (80202e4 <_printf_i+0x23c>)
 8020252:	e7e4      	b.n	802021e <_printf_i+0x176>
 8020254:	4615      	mov	r5, r2
 8020256:	e7bd      	b.n	80201d4 <_printf_i+0x12c>
 8020258:	682b      	ldr	r3, [r5, #0]
 802025a:	6826      	ldr	r6, [r4, #0]
 802025c:	6961      	ldr	r1, [r4, #20]
 802025e:	1d18      	adds	r0, r3, #4
 8020260:	6028      	str	r0, [r5, #0]
 8020262:	0635      	lsls	r5, r6, #24
 8020264:	681b      	ldr	r3, [r3, #0]
 8020266:	d501      	bpl.n	802026c <_printf_i+0x1c4>
 8020268:	6019      	str	r1, [r3, #0]
 802026a:	e002      	b.n	8020272 <_printf_i+0x1ca>
 802026c:	0670      	lsls	r0, r6, #25
 802026e:	d5fb      	bpl.n	8020268 <_printf_i+0x1c0>
 8020270:	8019      	strh	r1, [r3, #0]
 8020272:	2300      	movs	r3, #0
 8020274:	6123      	str	r3, [r4, #16]
 8020276:	4615      	mov	r5, r2
 8020278:	e7bc      	b.n	80201f4 <_printf_i+0x14c>
 802027a:	682b      	ldr	r3, [r5, #0]
 802027c:	1d1a      	adds	r2, r3, #4
 802027e:	602a      	str	r2, [r5, #0]
 8020280:	681d      	ldr	r5, [r3, #0]
 8020282:	6862      	ldr	r2, [r4, #4]
 8020284:	2100      	movs	r1, #0
 8020286:	4628      	mov	r0, r5
 8020288:	f7df ffd2 	bl	8000230 <memchr>
 802028c:	b108      	cbz	r0, 8020292 <_printf_i+0x1ea>
 802028e:	1b40      	subs	r0, r0, r5
 8020290:	6060      	str	r0, [r4, #4]
 8020292:	6863      	ldr	r3, [r4, #4]
 8020294:	6123      	str	r3, [r4, #16]
 8020296:	2300      	movs	r3, #0
 8020298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802029c:	e7aa      	b.n	80201f4 <_printf_i+0x14c>
 802029e:	6923      	ldr	r3, [r4, #16]
 80202a0:	462a      	mov	r2, r5
 80202a2:	4649      	mov	r1, r9
 80202a4:	4640      	mov	r0, r8
 80202a6:	47d0      	blx	sl
 80202a8:	3001      	adds	r0, #1
 80202aa:	d0ad      	beq.n	8020208 <_printf_i+0x160>
 80202ac:	6823      	ldr	r3, [r4, #0]
 80202ae:	079b      	lsls	r3, r3, #30
 80202b0:	d413      	bmi.n	80202da <_printf_i+0x232>
 80202b2:	68e0      	ldr	r0, [r4, #12]
 80202b4:	9b03      	ldr	r3, [sp, #12]
 80202b6:	4298      	cmp	r0, r3
 80202b8:	bfb8      	it	lt
 80202ba:	4618      	movlt	r0, r3
 80202bc:	e7a6      	b.n	802020c <_printf_i+0x164>
 80202be:	2301      	movs	r3, #1
 80202c0:	4632      	mov	r2, r6
 80202c2:	4649      	mov	r1, r9
 80202c4:	4640      	mov	r0, r8
 80202c6:	47d0      	blx	sl
 80202c8:	3001      	adds	r0, #1
 80202ca:	d09d      	beq.n	8020208 <_printf_i+0x160>
 80202cc:	3501      	adds	r5, #1
 80202ce:	68e3      	ldr	r3, [r4, #12]
 80202d0:	9903      	ldr	r1, [sp, #12]
 80202d2:	1a5b      	subs	r3, r3, r1
 80202d4:	42ab      	cmp	r3, r5
 80202d6:	dcf2      	bgt.n	80202be <_printf_i+0x216>
 80202d8:	e7eb      	b.n	80202b2 <_printf_i+0x20a>
 80202da:	2500      	movs	r5, #0
 80202dc:	f104 0619 	add.w	r6, r4, #25
 80202e0:	e7f5      	b.n	80202ce <_printf_i+0x226>
 80202e2:	bf00      	nop
 80202e4:	08029a8d 	.word	0x08029a8d
 80202e8:	08029a9e 	.word	0x08029a9e

080202ec <__sflush_r>:
 80202ec:	898a      	ldrh	r2, [r1, #12]
 80202ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202f2:	4605      	mov	r5, r0
 80202f4:	0710      	lsls	r0, r2, #28
 80202f6:	460c      	mov	r4, r1
 80202f8:	d458      	bmi.n	80203ac <__sflush_r+0xc0>
 80202fa:	684b      	ldr	r3, [r1, #4]
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	dc05      	bgt.n	802030c <__sflush_r+0x20>
 8020300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020302:	2b00      	cmp	r3, #0
 8020304:	dc02      	bgt.n	802030c <__sflush_r+0x20>
 8020306:	2000      	movs	r0, #0
 8020308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802030c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802030e:	2e00      	cmp	r6, #0
 8020310:	d0f9      	beq.n	8020306 <__sflush_r+0x1a>
 8020312:	2300      	movs	r3, #0
 8020314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020318:	682f      	ldr	r7, [r5, #0]
 802031a:	6a21      	ldr	r1, [r4, #32]
 802031c:	602b      	str	r3, [r5, #0]
 802031e:	d032      	beq.n	8020386 <__sflush_r+0x9a>
 8020320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020322:	89a3      	ldrh	r3, [r4, #12]
 8020324:	075a      	lsls	r2, r3, #29
 8020326:	d505      	bpl.n	8020334 <__sflush_r+0x48>
 8020328:	6863      	ldr	r3, [r4, #4]
 802032a:	1ac0      	subs	r0, r0, r3
 802032c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802032e:	b10b      	cbz	r3, 8020334 <__sflush_r+0x48>
 8020330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020332:	1ac0      	subs	r0, r0, r3
 8020334:	2300      	movs	r3, #0
 8020336:	4602      	mov	r2, r0
 8020338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802033a:	6a21      	ldr	r1, [r4, #32]
 802033c:	4628      	mov	r0, r5
 802033e:	47b0      	blx	r6
 8020340:	1c43      	adds	r3, r0, #1
 8020342:	89a3      	ldrh	r3, [r4, #12]
 8020344:	d106      	bne.n	8020354 <__sflush_r+0x68>
 8020346:	6829      	ldr	r1, [r5, #0]
 8020348:	291d      	cmp	r1, #29
 802034a:	d82b      	bhi.n	80203a4 <__sflush_r+0xb8>
 802034c:	4a29      	ldr	r2, [pc, #164]	; (80203f4 <__sflush_r+0x108>)
 802034e:	410a      	asrs	r2, r1
 8020350:	07d6      	lsls	r6, r2, #31
 8020352:	d427      	bmi.n	80203a4 <__sflush_r+0xb8>
 8020354:	2200      	movs	r2, #0
 8020356:	6062      	str	r2, [r4, #4]
 8020358:	04d9      	lsls	r1, r3, #19
 802035a:	6922      	ldr	r2, [r4, #16]
 802035c:	6022      	str	r2, [r4, #0]
 802035e:	d504      	bpl.n	802036a <__sflush_r+0x7e>
 8020360:	1c42      	adds	r2, r0, #1
 8020362:	d101      	bne.n	8020368 <__sflush_r+0x7c>
 8020364:	682b      	ldr	r3, [r5, #0]
 8020366:	b903      	cbnz	r3, 802036a <__sflush_r+0x7e>
 8020368:	6560      	str	r0, [r4, #84]	; 0x54
 802036a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802036c:	602f      	str	r7, [r5, #0]
 802036e:	2900      	cmp	r1, #0
 8020370:	d0c9      	beq.n	8020306 <__sflush_r+0x1a>
 8020372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020376:	4299      	cmp	r1, r3
 8020378:	d002      	beq.n	8020380 <__sflush_r+0x94>
 802037a:	4628      	mov	r0, r5
 802037c:	f7fe fb12 	bl	801e9a4 <_free_r>
 8020380:	2000      	movs	r0, #0
 8020382:	6360      	str	r0, [r4, #52]	; 0x34
 8020384:	e7c0      	b.n	8020308 <__sflush_r+0x1c>
 8020386:	2301      	movs	r3, #1
 8020388:	4628      	mov	r0, r5
 802038a:	47b0      	blx	r6
 802038c:	1c41      	adds	r1, r0, #1
 802038e:	d1c8      	bne.n	8020322 <__sflush_r+0x36>
 8020390:	682b      	ldr	r3, [r5, #0]
 8020392:	2b00      	cmp	r3, #0
 8020394:	d0c5      	beq.n	8020322 <__sflush_r+0x36>
 8020396:	2b1d      	cmp	r3, #29
 8020398:	d001      	beq.n	802039e <__sflush_r+0xb2>
 802039a:	2b16      	cmp	r3, #22
 802039c:	d101      	bne.n	80203a2 <__sflush_r+0xb6>
 802039e:	602f      	str	r7, [r5, #0]
 80203a0:	e7b1      	b.n	8020306 <__sflush_r+0x1a>
 80203a2:	89a3      	ldrh	r3, [r4, #12]
 80203a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80203a8:	81a3      	strh	r3, [r4, #12]
 80203aa:	e7ad      	b.n	8020308 <__sflush_r+0x1c>
 80203ac:	690f      	ldr	r7, [r1, #16]
 80203ae:	2f00      	cmp	r7, #0
 80203b0:	d0a9      	beq.n	8020306 <__sflush_r+0x1a>
 80203b2:	0793      	lsls	r3, r2, #30
 80203b4:	680e      	ldr	r6, [r1, #0]
 80203b6:	bf08      	it	eq
 80203b8:	694b      	ldreq	r3, [r1, #20]
 80203ba:	600f      	str	r7, [r1, #0]
 80203bc:	bf18      	it	ne
 80203be:	2300      	movne	r3, #0
 80203c0:	eba6 0807 	sub.w	r8, r6, r7
 80203c4:	608b      	str	r3, [r1, #8]
 80203c6:	f1b8 0f00 	cmp.w	r8, #0
 80203ca:	dd9c      	ble.n	8020306 <__sflush_r+0x1a>
 80203cc:	6a21      	ldr	r1, [r4, #32]
 80203ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80203d0:	4643      	mov	r3, r8
 80203d2:	463a      	mov	r2, r7
 80203d4:	4628      	mov	r0, r5
 80203d6:	47b0      	blx	r6
 80203d8:	2800      	cmp	r0, #0
 80203da:	dc06      	bgt.n	80203ea <__sflush_r+0xfe>
 80203dc:	89a3      	ldrh	r3, [r4, #12]
 80203de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80203e2:	81a3      	strh	r3, [r4, #12]
 80203e4:	f04f 30ff 	mov.w	r0, #4294967295
 80203e8:	e78e      	b.n	8020308 <__sflush_r+0x1c>
 80203ea:	4407      	add	r7, r0
 80203ec:	eba8 0800 	sub.w	r8, r8, r0
 80203f0:	e7e9      	b.n	80203c6 <__sflush_r+0xda>
 80203f2:	bf00      	nop
 80203f4:	dfbffffe 	.word	0xdfbffffe

080203f8 <_fflush_r>:
 80203f8:	b538      	push	{r3, r4, r5, lr}
 80203fa:	690b      	ldr	r3, [r1, #16]
 80203fc:	4605      	mov	r5, r0
 80203fe:	460c      	mov	r4, r1
 8020400:	b913      	cbnz	r3, 8020408 <_fflush_r+0x10>
 8020402:	2500      	movs	r5, #0
 8020404:	4628      	mov	r0, r5
 8020406:	bd38      	pop	{r3, r4, r5, pc}
 8020408:	b118      	cbz	r0, 8020412 <_fflush_r+0x1a>
 802040a:	6a03      	ldr	r3, [r0, #32]
 802040c:	b90b      	cbnz	r3, 8020412 <_fflush_r+0x1a>
 802040e:	f7fe f8f3 	bl	801e5f8 <__sinit>
 8020412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020416:	2b00      	cmp	r3, #0
 8020418:	d0f3      	beq.n	8020402 <_fflush_r+0xa>
 802041a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802041c:	07d0      	lsls	r0, r2, #31
 802041e:	d404      	bmi.n	802042a <_fflush_r+0x32>
 8020420:	0599      	lsls	r1, r3, #22
 8020422:	d402      	bmi.n	802042a <_fflush_r+0x32>
 8020424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020426:	f7fe faac 	bl	801e982 <__retarget_lock_acquire_recursive>
 802042a:	4628      	mov	r0, r5
 802042c:	4621      	mov	r1, r4
 802042e:	f7ff ff5d 	bl	80202ec <__sflush_r>
 8020432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020434:	07da      	lsls	r2, r3, #31
 8020436:	4605      	mov	r5, r0
 8020438:	d4e4      	bmi.n	8020404 <_fflush_r+0xc>
 802043a:	89a3      	ldrh	r3, [r4, #12]
 802043c:	059b      	lsls	r3, r3, #22
 802043e:	d4e1      	bmi.n	8020404 <_fflush_r+0xc>
 8020440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020442:	f7fe fa9f 	bl	801e984 <__retarget_lock_release_recursive>
 8020446:	e7dd      	b.n	8020404 <_fflush_r+0xc>

08020448 <__swbuf_r>:
 8020448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802044a:	460e      	mov	r6, r1
 802044c:	4614      	mov	r4, r2
 802044e:	4605      	mov	r5, r0
 8020450:	b118      	cbz	r0, 802045a <__swbuf_r+0x12>
 8020452:	6a03      	ldr	r3, [r0, #32]
 8020454:	b90b      	cbnz	r3, 802045a <__swbuf_r+0x12>
 8020456:	f7fe f8cf 	bl	801e5f8 <__sinit>
 802045a:	69a3      	ldr	r3, [r4, #24]
 802045c:	60a3      	str	r3, [r4, #8]
 802045e:	89a3      	ldrh	r3, [r4, #12]
 8020460:	071a      	lsls	r2, r3, #28
 8020462:	d525      	bpl.n	80204b0 <__swbuf_r+0x68>
 8020464:	6923      	ldr	r3, [r4, #16]
 8020466:	b31b      	cbz	r3, 80204b0 <__swbuf_r+0x68>
 8020468:	6823      	ldr	r3, [r4, #0]
 802046a:	6922      	ldr	r2, [r4, #16]
 802046c:	1a98      	subs	r0, r3, r2
 802046e:	6963      	ldr	r3, [r4, #20]
 8020470:	b2f6      	uxtb	r6, r6
 8020472:	4283      	cmp	r3, r0
 8020474:	4637      	mov	r7, r6
 8020476:	dc04      	bgt.n	8020482 <__swbuf_r+0x3a>
 8020478:	4621      	mov	r1, r4
 802047a:	4628      	mov	r0, r5
 802047c:	f7ff ffbc 	bl	80203f8 <_fflush_r>
 8020480:	b9e0      	cbnz	r0, 80204bc <__swbuf_r+0x74>
 8020482:	68a3      	ldr	r3, [r4, #8]
 8020484:	3b01      	subs	r3, #1
 8020486:	60a3      	str	r3, [r4, #8]
 8020488:	6823      	ldr	r3, [r4, #0]
 802048a:	1c5a      	adds	r2, r3, #1
 802048c:	6022      	str	r2, [r4, #0]
 802048e:	701e      	strb	r6, [r3, #0]
 8020490:	6962      	ldr	r2, [r4, #20]
 8020492:	1c43      	adds	r3, r0, #1
 8020494:	429a      	cmp	r2, r3
 8020496:	d004      	beq.n	80204a2 <__swbuf_r+0x5a>
 8020498:	89a3      	ldrh	r3, [r4, #12]
 802049a:	07db      	lsls	r3, r3, #31
 802049c:	d506      	bpl.n	80204ac <__swbuf_r+0x64>
 802049e:	2e0a      	cmp	r6, #10
 80204a0:	d104      	bne.n	80204ac <__swbuf_r+0x64>
 80204a2:	4621      	mov	r1, r4
 80204a4:	4628      	mov	r0, r5
 80204a6:	f7ff ffa7 	bl	80203f8 <_fflush_r>
 80204aa:	b938      	cbnz	r0, 80204bc <__swbuf_r+0x74>
 80204ac:	4638      	mov	r0, r7
 80204ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204b0:	4621      	mov	r1, r4
 80204b2:	4628      	mov	r0, r5
 80204b4:	f000 f806 	bl	80204c4 <__swsetup_r>
 80204b8:	2800      	cmp	r0, #0
 80204ba:	d0d5      	beq.n	8020468 <__swbuf_r+0x20>
 80204bc:	f04f 37ff 	mov.w	r7, #4294967295
 80204c0:	e7f4      	b.n	80204ac <__swbuf_r+0x64>
	...

080204c4 <__swsetup_r>:
 80204c4:	b538      	push	{r3, r4, r5, lr}
 80204c6:	4b2a      	ldr	r3, [pc, #168]	; (8020570 <__swsetup_r+0xac>)
 80204c8:	4605      	mov	r5, r0
 80204ca:	6818      	ldr	r0, [r3, #0]
 80204cc:	460c      	mov	r4, r1
 80204ce:	b118      	cbz	r0, 80204d8 <__swsetup_r+0x14>
 80204d0:	6a03      	ldr	r3, [r0, #32]
 80204d2:	b90b      	cbnz	r3, 80204d8 <__swsetup_r+0x14>
 80204d4:	f7fe f890 	bl	801e5f8 <__sinit>
 80204d8:	89a3      	ldrh	r3, [r4, #12]
 80204da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80204de:	0718      	lsls	r0, r3, #28
 80204e0:	d422      	bmi.n	8020528 <__swsetup_r+0x64>
 80204e2:	06d9      	lsls	r1, r3, #27
 80204e4:	d407      	bmi.n	80204f6 <__swsetup_r+0x32>
 80204e6:	2309      	movs	r3, #9
 80204e8:	602b      	str	r3, [r5, #0]
 80204ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80204ee:	81a3      	strh	r3, [r4, #12]
 80204f0:	f04f 30ff 	mov.w	r0, #4294967295
 80204f4:	e034      	b.n	8020560 <__swsetup_r+0x9c>
 80204f6:	0758      	lsls	r0, r3, #29
 80204f8:	d512      	bpl.n	8020520 <__swsetup_r+0x5c>
 80204fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80204fc:	b141      	cbz	r1, 8020510 <__swsetup_r+0x4c>
 80204fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020502:	4299      	cmp	r1, r3
 8020504:	d002      	beq.n	802050c <__swsetup_r+0x48>
 8020506:	4628      	mov	r0, r5
 8020508:	f7fe fa4c 	bl	801e9a4 <_free_r>
 802050c:	2300      	movs	r3, #0
 802050e:	6363      	str	r3, [r4, #52]	; 0x34
 8020510:	89a3      	ldrh	r3, [r4, #12]
 8020512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020516:	81a3      	strh	r3, [r4, #12]
 8020518:	2300      	movs	r3, #0
 802051a:	6063      	str	r3, [r4, #4]
 802051c:	6923      	ldr	r3, [r4, #16]
 802051e:	6023      	str	r3, [r4, #0]
 8020520:	89a3      	ldrh	r3, [r4, #12]
 8020522:	f043 0308 	orr.w	r3, r3, #8
 8020526:	81a3      	strh	r3, [r4, #12]
 8020528:	6923      	ldr	r3, [r4, #16]
 802052a:	b94b      	cbnz	r3, 8020540 <__swsetup_r+0x7c>
 802052c:	89a3      	ldrh	r3, [r4, #12]
 802052e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020536:	d003      	beq.n	8020540 <__swsetup_r+0x7c>
 8020538:	4621      	mov	r1, r4
 802053a:	4628      	mov	r0, r5
 802053c:	f000 f840 	bl	80205c0 <__smakebuf_r>
 8020540:	89a0      	ldrh	r0, [r4, #12]
 8020542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020546:	f010 0301 	ands.w	r3, r0, #1
 802054a:	d00a      	beq.n	8020562 <__swsetup_r+0x9e>
 802054c:	2300      	movs	r3, #0
 802054e:	60a3      	str	r3, [r4, #8]
 8020550:	6963      	ldr	r3, [r4, #20]
 8020552:	425b      	negs	r3, r3
 8020554:	61a3      	str	r3, [r4, #24]
 8020556:	6923      	ldr	r3, [r4, #16]
 8020558:	b943      	cbnz	r3, 802056c <__swsetup_r+0xa8>
 802055a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802055e:	d1c4      	bne.n	80204ea <__swsetup_r+0x26>
 8020560:	bd38      	pop	{r3, r4, r5, pc}
 8020562:	0781      	lsls	r1, r0, #30
 8020564:	bf58      	it	pl
 8020566:	6963      	ldrpl	r3, [r4, #20]
 8020568:	60a3      	str	r3, [r4, #8]
 802056a:	e7f4      	b.n	8020556 <__swsetup_r+0x92>
 802056c:	2000      	movs	r0, #0
 802056e:	e7f7      	b.n	8020560 <__swsetup_r+0x9c>
 8020570:	2000538c 	.word	0x2000538c

08020574 <__swhatbuf_r>:
 8020574:	b570      	push	{r4, r5, r6, lr}
 8020576:	460c      	mov	r4, r1
 8020578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802057c:	2900      	cmp	r1, #0
 802057e:	b096      	sub	sp, #88	; 0x58
 8020580:	4615      	mov	r5, r2
 8020582:	461e      	mov	r6, r3
 8020584:	da0d      	bge.n	80205a2 <__swhatbuf_r+0x2e>
 8020586:	89a3      	ldrh	r3, [r4, #12]
 8020588:	f013 0f80 	tst.w	r3, #128	; 0x80
 802058c:	f04f 0100 	mov.w	r1, #0
 8020590:	bf0c      	ite	eq
 8020592:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020596:	2340      	movne	r3, #64	; 0x40
 8020598:	2000      	movs	r0, #0
 802059a:	6031      	str	r1, [r6, #0]
 802059c:	602b      	str	r3, [r5, #0]
 802059e:	b016      	add	sp, #88	; 0x58
 80205a0:	bd70      	pop	{r4, r5, r6, pc}
 80205a2:	466a      	mov	r2, sp
 80205a4:	f000 f848 	bl	8020638 <_fstat_r>
 80205a8:	2800      	cmp	r0, #0
 80205aa:	dbec      	blt.n	8020586 <__swhatbuf_r+0x12>
 80205ac:	9901      	ldr	r1, [sp, #4]
 80205ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80205b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80205b6:	4259      	negs	r1, r3
 80205b8:	4159      	adcs	r1, r3
 80205ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80205be:	e7eb      	b.n	8020598 <__swhatbuf_r+0x24>

080205c0 <__smakebuf_r>:
 80205c0:	898b      	ldrh	r3, [r1, #12]
 80205c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80205c4:	079d      	lsls	r5, r3, #30
 80205c6:	4606      	mov	r6, r0
 80205c8:	460c      	mov	r4, r1
 80205ca:	d507      	bpl.n	80205dc <__smakebuf_r+0x1c>
 80205cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80205d0:	6023      	str	r3, [r4, #0]
 80205d2:	6123      	str	r3, [r4, #16]
 80205d4:	2301      	movs	r3, #1
 80205d6:	6163      	str	r3, [r4, #20]
 80205d8:	b002      	add	sp, #8
 80205da:	bd70      	pop	{r4, r5, r6, pc}
 80205dc:	ab01      	add	r3, sp, #4
 80205de:	466a      	mov	r2, sp
 80205e0:	f7ff ffc8 	bl	8020574 <__swhatbuf_r>
 80205e4:	9900      	ldr	r1, [sp, #0]
 80205e6:	4605      	mov	r5, r0
 80205e8:	4630      	mov	r0, r6
 80205ea:	f7fd f8a3 	bl	801d734 <_malloc_r>
 80205ee:	b948      	cbnz	r0, 8020604 <__smakebuf_r+0x44>
 80205f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205f4:	059a      	lsls	r2, r3, #22
 80205f6:	d4ef      	bmi.n	80205d8 <__smakebuf_r+0x18>
 80205f8:	f023 0303 	bic.w	r3, r3, #3
 80205fc:	f043 0302 	orr.w	r3, r3, #2
 8020600:	81a3      	strh	r3, [r4, #12]
 8020602:	e7e3      	b.n	80205cc <__smakebuf_r+0xc>
 8020604:	89a3      	ldrh	r3, [r4, #12]
 8020606:	6020      	str	r0, [r4, #0]
 8020608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802060c:	81a3      	strh	r3, [r4, #12]
 802060e:	9b00      	ldr	r3, [sp, #0]
 8020610:	6163      	str	r3, [r4, #20]
 8020612:	9b01      	ldr	r3, [sp, #4]
 8020614:	6120      	str	r0, [r4, #16]
 8020616:	b15b      	cbz	r3, 8020630 <__smakebuf_r+0x70>
 8020618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802061c:	4630      	mov	r0, r6
 802061e:	f000 f81d 	bl	802065c <_isatty_r>
 8020622:	b128      	cbz	r0, 8020630 <__smakebuf_r+0x70>
 8020624:	89a3      	ldrh	r3, [r4, #12]
 8020626:	f023 0303 	bic.w	r3, r3, #3
 802062a:	f043 0301 	orr.w	r3, r3, #1
 802062e:	81a3      	strh	r3, [r4, #12]
 8020630:	89a3      	ldrh	r3, [r4, #12]
 8020632:	431d      	orrs	r5, r3
 8020634:	81a5      	strh	r5, [r4, #12]
 8020636:	e7cf      	b.n	80205d8 <__smakebuf_r+0x18>

08020638 <_fstat_r>:
 8020638:	b538      	push	{r3, r4, r5, lr}
 802063a:	4d07      	ldr	r5, [pc, #28]	; (8020658 <_fstat_r+0x20>)
 802063c:	2300      	movs	r3, #0
 802063e:	4604      	mov	r4, r0
 8020640:	4608      	mov	r0, r1
 8020642:	4611      	mov	r1, r2
 8020644:	602b      	str	r3, [r5, #0]
 8020646:	f7ef ff78 	bl	801053a <_fstat>
 802064a:	1c43      	adds	r3, r0, #1
 802064c:	d102      	bne.n	8020654 <_fstat_r+0x1c>
 802064e:	682b      	ldr	r3, [r5, #0]
 8020650:	b103      	cbz	r3, 8020654 <_fstat_r+0x1c>
 8020652:	6023      	str	r3, [r4, #0]
 8020654:	bd38      	pop	{r3, r4, r5, pc}
 8020656:	bf00      	nop
 8020658:	200057ec 	.word	0x200057ec

0802065c <_isatty_r>:
 802065c:	b538      	push	{r3, r4, r5, lr}
 802065e:	4d06      	ldr	r5, [pc, #24]	; (8020678 <_isatty_r+0x1c>)
 8020660:	2300      	movs	r3, #0
 8020662:	4604      	mov	r4, r0
 8020664:	4608      	mov	r0, r1
 8020666:	602b      	str	r3, [r5, #0]
 8020668:	f7ef ff77 	bl	801055a <_isatty>
 802066c:	1c43      	adds	r3, r0, #1
 802066e:	d102      	bne.n	8020676 <_isatty_r+0x1a>
 8020670:	682b      	ldr	r3, [r5, #0]
 8020672:	b103      	cbz	r3, 8020676 <_isatty_r+0x1a>
 8020674:	6023      	str	r3, [r4, #0]
 8020676:	bd38      	pop	{r3, r4, r5, pc}
 8020678:	200057ec 	.word	0x200057ec

0802067c <_init>:
 802067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802067e:	bf00      	nop
 8020680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020682:	bc08      	pop	{r3}
 8020684:	469e      	mov	lr, r3
 8020686:	4770      	bx	lr

08020688 <_fini>:
 8020688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802068a:	bf00      	nop
 802068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802068e:	bc08      	pop	{r3}
 8020690:	469e      	mov	lr, r3
 8020692:	4770      	bx	lr
