
NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025d8  080025d8  000035d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025fc  080025fc  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080025fc  080025fc  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025fc  080025fc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025fc  080025fc  000035fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002600  08002600  00003600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002604  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000010  08002614  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002614  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058e7  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154c  00000000  00000000  00009920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000ae70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000527  00000000  00000000  0000b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016153  00000000  00000000  0000ba8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000728d  00000000  00000000  00021be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e413  00000000  00000000  00028e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ab0  00000000  00000000  000a72c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000a8d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025c0 	.word	0x080025c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025c0 	.word	0x080025c0

0800014c <cs_high>:
 */

#include "NRF24L01.h"

static void cs_high()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <cs_high+0x14>)
 8000158:	f001 f856 	bl	8001208 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010c00 	.word	0x40010c00

08000164 <cs_low>:

static void cs_low()
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <cs_low+0x14>)
 8000170:	f001 f84a 	bl	8001208 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <ce_high>:

static void ce_high()
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f001 f83e 	bl	8001208 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

static void ce_low()
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f001 f832 	bl	8001208 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <read_register>:

static uint8_t read_register(uint8_t reg)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80001ba:	f7ff ffd3 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80001be:	f107 020e 	add.w	r2, r7, #14
 80001c2:	f107 010f 	add.w	r1, r7, #15
 80001c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	2301      	movs	r3, #1
 80001ce:	4809      	ldr	r0, [pc, #36]	@ (80001f4 <read_register+0x48>)
 80001d0:	f001 ff21 	bl	8002016 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80001d4:	f107 010d 	add.w	r1, r7, #13
 80001d8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80001dc:	2201      	movs	r2, #1
 80001de:	4805      	ldr	r0, [pc, #20]	@ (80001f4 <read_register+0x48>)
 80001e0:	f001 fe01 	bl	8001de6 <HAL_SPI_Receive>
    cs_high();
 80001e4:	f7ff ffb2 	bl	800014c <cs_high>

    return read_val;
 80001e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000002c 	.word	0x2000002c

080001f8 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b086      	sub	sp, #24
 80001fc:	af02      	add	r7, sp, #8
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000216:	f7ff ffa5 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800021a:	f107 020e 	add.w	r2, r7, #14
 800021e:	f107 010f 	add.w	r1, r7, #15
 8000222:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	4809      	ldr	r0, [pc, #36]	@ (8000250 <write_register+0x58>)
 800022c:	f001 fef3 	bl	8002016 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000230:	f107 010d 	add.w	r1, r7, #13
 8000234:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000238:	2201      	movs	r2, #1
 800023a:	4805      	ldr	r0, [pc, #20]	@ (8000250 <write_register+0x58>)
 800023c:	f001 fc90 	bl	8001b60 <HAL_SPI_Transmit>
    cs_high();
 8000240:	f7ff ff84 	bl	800014c <cs_high>

    return write_val;
 8000244:	7b7b      	ldrb	r3, [r7, #13]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000002c 	.word	0x2000002c

08000254 <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	460a      	mov	r2, r1
 800025e:	80fb      	strh	r3, [r7, #6]
 8000260:	4613      	mov	r3, r2
 8000262:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000264:	f000 f850 	bl	8000308 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000268:	f000 f8a2 	bl	80003b0 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 800026c:	f000 f94c 	bl	8000508 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f9d4 	bl	8000620 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000278:	797b      	ldrb	r3, [r7, #5]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fa00 	bl	8000680 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000280:	2003      	movs	r0, #3
 8000282:	f000 f9e0 	bl	8000646 <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000286:	2001      	movs	r0, #1
 8000288:	f000 f953 	bl	8000532 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800028c:	2005      	movs	r0, #5
 800028e:	f000 f973 	bl	8000578 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000292:	2003      	movs	r0, #3
 8000294:	f000 f980 	bl	8000598 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000298:	20fa      	movs	r0, #250	@ 0xfa
 800029a:	f000 f999 	bl	80005d0 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 800029e:	f7ff ff6d 	bl	800017c <ce_high>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}

080002aa <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b082      	sub	sp, #8
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f892 	bl	80003dc <nrf24l01p_write_tx_fifo>
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 80002c6:	f000 f8dd 	bl	8000484 <nrf24l01p_get_status>
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 0320 	and.w	r3, r3, #32
 80002d4:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d007      	beq.n	80002ec <nrf24l01p_tx_irq+0x2c>
    {
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <nrf24l01p_tx_irq+0x44>)
 80002e2:	f000 ffa9 	bl	8001238 <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 80002e6:	f000 f8e7 	bl	80004b8 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 80002ea:	e007      	b.n	80002fc <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002f2:	4804      	ldr	r0, [pc, #16]	@ (8000304 <nrf24l01p_tx_irq+0x44>)
 80002f4:	f000 ff88 	bl	8001208 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 80002f8:	f000 f8f2 	bl	80004e0 <nrf24l01p_clear_max_rt>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40011000 	.word	0x40011000

08000308 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 800030c:	f7ff ff1e 	bl	800014c <cs_high>
    ce_low();
 8000310:	f7ff ff40 	bl	8000194 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 8000314:	2108      	movs	r1, #8
 8000316:	2000      	movs	r0, #0
 8000318:	f7ff ff6e 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 800031c:	213f      	movs	r1, #63	@ 0x3f
 800031e:	2001      	movs	r0, #1
 8000320:	f7ff ff6a 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8000324:	2103      	movs	r1, #3
 8000326:	2002      	movs	r0, #2
 8000328:	f7ff ff66 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 800032c:	2103      	movs	r1, #3
 800032e:	2003      	movs	r0, #3
 8000330:	f7ff ff62 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8000334:	2103      	movs	r1, #3
 8000336:	2004      	movs	r0, #4
 8000338:	f7ff ff5e 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 800033c:	2102      	movs	r1, #2
 800033e:	2005      	movs	r0, #5
 8000340:	f7ff ff5a 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8000344:	2107      	movs	r1, #7
 8000346:	2006      	movs	r0, #6
 8000348:	f7ff ff56 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 800034c:	217e      	movs	r1, #126	@ 0x7e
 800034e:	2007      	movs	r0, #7
 8000350:	f7ff ff52 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8000354:	2100      	movs	r1, #0
 8000356:	2011      	movs	r0, #17
 8000358:	f7ff ff4e 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800035c:	2100      	movs	r1, #0
 800035e:	2011      	movs	r0, #17
 8000360:	f7ff ff4a 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8000364:	2100      	movs	r1, #0
 8000366:	2012      	movs	r0, #18
 8000368:	f7ff ff46 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800036c:	2100      	movs	r1, #0
 800036e:	2013      	movs	r0, #19
 8000370:	f7ff ff42 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000374:	2100      	movs	r1, #0
 8000376:	2014      	movs	r0, #20
 8000378:	f7ff ff3e 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800037c:	2100      	movs	r1, #0
 800037e:	2015      	movs	r0, #21
 8000380:	f7ff ff3a 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000384:	2100      	movs	r1, #0
 8000386:	2016      	movs	r0, #22
 8000388:	f7ff ff36 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800038c:	2111      	movs	r1, #17
 800038e:	2017      	movs	r0, #23
 8000390:	f7ff ff32 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000394:	2100      	movs	r1, #0
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff2e 	bl	80001f8 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 800039c:	2100      	movs	r1, #0
 800039e:	201d      	movs	r0, #29
 80003a0:	f7ff ff2a 	bl	80001f8 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80003a4:	f000 f83e 	bl	8000424 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80003a8:	f000 f854 	bl	8000454 <nrf24l01p_flush_tx_fifo>
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff fef8 	bl	80001ac <read_register>
 80003bc:	4603      	mov	r3, r0
 80003be:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f023 0301 	bic.w	r3, r3, #1
 80003c6:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	4619      	mov	r1, r3
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff13 	bl	80001f8 <write_register>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af02      	add	r7, sp, #8
 80003e2:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 80003e4:	23a0      	movs	r3, #160	@ 0xa0
 80003e6:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 80003e8:	f7ff febc 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80003ec:	f107 020e 	add.w	r2, r7, #14
 80003f0:	f107 010f 	add.w	r1, r7, #15
 80003f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2301      	movs	r3, #1
 80003fc:	4808      	ldr	r0, [pc, #32]	@ (8000420 <nrf24l01p_write_tx_fifo+0x44>)
 80003fe:	f001 fe0a 	bl	8002016 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8000402:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000406:	2203      	movs	r2, #3
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	4805      	ldr	r0, [pc, #20]	@ (8000420 <nrf24l01p_write_tx_fifo+0x44>)
 800040c:	f001 fba8 	bl	8001b60 <HAL_SPI_Transmit>
    cs_high();
 8000410:	f7ff fe9c 	bl	800014c <cs_high>

    return status;
 8000414:	7bbb      	ldrb	r3, [r7, #14]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	2000002c 	.word	0x2000002c

08000424 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800042a:	23e2      	movs	r3, #226	@ 0xe2
 800042c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800042e:	f7ff fe99 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000432:	1dba      	adds	r2, r7, #6
 8000434:	1df9      	adds	r1, r7, #7
 8000436:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2301      	movs	r3, #1
 800043e:	4804      	ldr	r0, [pc, #16]	@ (8000450 <nrf24l01p_flush_rx_fifo+0x2c>)
 8000440:	f001 fde9 	bl	8002016 <HAL_SPI_TransmitReceive>
    cs_high();
 8000444:	f7ff fe82 	bl	800014c <cs_high>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000002c 	.word	0x2000002c

08000454 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800045a:	23e1      	movs	r3, #225	@ 0xe1
 800045c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800045e:	f7ff fe81 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000462:	1dba      	adds	r2, r7, #6
 8000464:	1df9      	adds	r1, r7, #7
 8000466:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	2301      	movs	r3, #1
 800046e:	4804      	ldr	r0, [pc, #16]	@ (8000480 <nrf24l01p_flush_tx_fifo+0x2c>)
 8000470:	f001 fdd1 	bl	8002016 <HAL_SPI_TransmitReceive>
    cs_high();
 8000474:	f7ff fe6a 	bl	800014c <cs_high>
}
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	2000002c 	.word	0x2000002c

08000484 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800048a:	23ff      	movs	r3, #255	@ 0xff
 800048c:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800048e:	f7ff fe69 	bl	8000164 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000492:	1dba      	adds	r2, r7, #6
 8000494:	1df9      	adds	r1, r7, #7
 8000496:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <nrf24l01p_get_status+0x30>)
 80004a0:	f001 fdb9 	bl	8002016 <HAL_SPI_TransmitReceive>
    cs_high();
 80004a4:	f7ff fe52 	bl	800014c <cs_high>

    return status;
 80004a8:	79bb      	ldrb	r3, [r7, #6]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	2000002c 	.word	0x2000002c

080004b8 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80004be:	f7ff ffe1 	bl	8000484 <nrf24l01p_get_status>
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	f043 0320 	orr.w	r3, r3, #32
 80004cc:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4619      	mov	r1, r3
 80004d2:	2007      	movs	r0, #7
 80004d4:	f7ff fe90 	bl	80001f8 <write_register>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80004e6:	f7ff ffcd 	bl	8000484 <nrf24l01p_get_status>
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2007      	movs	r0, #7
 80004fc:	f7ff fe7c 	bl	80001f8 <write_register>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fe4c 	bl	80001ac <read_register>
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4619      	mov	r1, r3
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff fe67 	bl	80001f8 <write_register>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b084      	sub	sp, #16
 8000536:	af00      	add	r7, sp, #0
 8000538:	4603      	mov	r3, r0
 800053a:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff fe35 	bl	80001ac <read_register>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d002      	beq.n	8000552 <nrf24l01p_set_crc_length+0x20>
 800054c:	2b02      	cmp	r3, #2
 800054e:	d005      	beq.n	800055c <nrf24l01p_set_crc_length+0x2a>
 8000550:	e009      	b.n	8000566 <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	f023 0304 	bic.w	r3, r3, #4
 8000558:	73fb      	strb	r3, [r7, #15]
            break;
 800055a:	e004      	b.n	8000566 <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	73fb      	strb	r3, [r7, #15]
            break;
 8000564:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	4619      	mov	r1, r3
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe44 	bl	80001f8 <write_register>
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	3b02      	subs	r3, #2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	2003      	movs	r0, #3
 800058c:	f7ff fe34 	bl	80001f8 <write_register>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80005a2:	2004      	movs	r0, #4
 80005a4:	f7ff fe02 	bl	80001ac <read_register>
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f063 030f 	orn	r3, r3, #15
 80005b2:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80005b4:	7bfa      	ldrb	r2, [r7, #15]
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4619      	mov	r1, r3
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff fe19 	bl	80001f8 <write_register>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80005da:	2004      	movs	r0, #4
 80005dc:	f7ff fde6 	bl	80001ac <read_register>
 80005e0:	4603      	mov	r3, r0
 80005e2:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f043 030f 	orr.w	r3, r3, #15
 80005ea:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	4a0b      	ldr	r2, [pc, #44]	@ (800061c <nrf24l01p_auto_retransmit_delay+0x4c>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	3b01      	subs	r3, #1
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	4619      	mov	r1, r3
 800060c:	2004      	movs	r0, #4
 800060e:	f7ff fdf3 	bl	80001f8 <write_register>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	10624dd3 	.word	0x10624dd3

08000620 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8000630:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	2005      	movs	r0, #5
 800063a:	f7ff fddd 	bl	80001f8 <write_register>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000650:	2006      	movs	r0, #6
 8000652:	f7ff fdab 	bl	80001ac <read_register>
 8000656:	4603      	mov	r3, r0
 8000658:	f023 0306 	bic.w	r3, r3, #6
 800065c:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	b25a      	sxtb	r2, r3
 8000664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000668:	4313      	orrs	r3, r2
 800066a:	b25b      	sxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4619      	mov	r1, r3
 8000672:	2006      	movs	r0, #6
 8000674:	f7ff fdc0 	bl	80001f8 <write_register>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800068a:	2006      	movs	r0, #6
 800068c:	f7ff fd8e 	bl	80001ac <read_register>
 8000690:	4603      	mov	r3, r0
 8000692:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000696:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d00a      	beq.n	80006b4 <nrf24l01p_set_rf_air_data_rate+0x34>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	dc0e      	bgt.n	80006c0 <nrf24l01p_set_rf_air_data_rate+0x40>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00b      	beq.n	80006be <nrf24l01p_set_rf_air_data_rate+0x3e>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d10a      	bne.n	80006c0 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	73fb      	strb	r3, [r7, #15]
            break;
 80006b2:	e005      	b.n	80006c0 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	f043 0320 	orr.w	r3, r3, #32
 80006ba:	73fb      	strb	r3, [r7, #15]
            break;
 80006bc:	e000      	b.n	80006c0 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80006be:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	4619      	mov	r1, r3
 80006c4:	2006      	movs	r0, #6
 80006c6:	f7ff fd97 	bl	80001f8 <write_register>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fa7e 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f852 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f8cc 	bl	800087c <MX_GPIO_Init>
  MX_SPI2_Init();
 80006e4:	f000 f894 	bl	8000810 <MX_SPI2_Init>
  /*
   * Configuramos el transciver
   * CANAL 2500Mhz
   * Baudrate en 1Mbps
   */
  nrf24l01p_tx_init(2500, _1Mbps);
 80006e8:	2100      	movs	r1, #0
 80006ea:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80006ee:	f7ff fdb1 	bl	8000254 <nrf24l01p_tx_init>

    /* USER CODE BEGIN 3 */

	#ifdef automatic
	//Transmitimos datos
	nrf24l01p_tx_transmit(tx_data);
 80006f2:	4820      	ldr	r0, [pc, #128]	@ (8000774 <main+0xa0>)
 80006f4:	f7ff fdd9 	bl	80002aa <nrf24l01p_tx_transmit>

	//Siguiente paquete a mandar

	if (efecto>4) {
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <main+0xa4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d90f      	bls.n	8000720 <main+0x4c>
		efecto=0;
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <main+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
		mode ^= true;
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <main+0xa8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <main+0xa8>)
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e005      	b.n	800072c <main+0x58>
	}else{
		efecto++;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <main+0xa4>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <main+0xa4>)
 800072a:	701a      	strb	r2, [r3, #0]
	}

	tx_data[0] = mode;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <main+0xa8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <main+0xa0>)
 8000734:	701a      	strb	r2, [r3, #0]
	tx_data[1] = efecto;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <main+0xa4>)
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <main+0xa0>)
 800073c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = dim;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <main+0xac>)
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <main+0xa0>)
 8000744:	709a      	strb	r2, [r3, #2]
	dim += 51;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <main+0xac>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3333      	adds	r3, #51	@ 0x33
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <main+0xac>)
 8000750:	701a      	strb	r2, [r3, #0]

	if (mode == false) {
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <main+0xa8>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <main+0x94>
		HAL_Delay(25);
 8000760:	2019      	movs	r0, #25
 8000762:	f000 fa9b 	bl	8000c9c <HAL_Delay>
 8000766:	e7c4      	b.n	80006f2 <main+0x1e>
	}else
	{
		HAL_Delay(3000);
 8000768:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800076c:	f000 fa96 	bl	8000c9c <HAL_Delay>
	nrf24l01p_tx_transmit(tx_data);
 8000770:	e7bf      	b.n	80006f2 <main+0x1e>
 8000772:	bf00      	nop
 8000774:	20000088 	.word	0x20000088
 8000778:	20000084 	.word	0x20000084
 800077c:	20000000 	.word	0x20000000
 8000780:	20000085 	.word	0x20000085

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	@ 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	@ 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fee8 	bl	8002568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fd65 	bl	800129c <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007d8:	f000 f901 	bl	80009de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ffd2 	bl	80017a0 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000802:	f000 f8ec 	bl	80009de <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3740      	adds	r7, #64	@ 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000814:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <MX_SPI2_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_SPI2_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_SPI2_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000844:	2210      	movs	r2, #16
 8000846:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_SPI2_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_SPI2_Init+0x64>)
 8000862:	f001 f8f9 	bl	8001a58 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800086c:	f000 f8b7 	bl	80009de <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	2000002c 	.word	0x2000002c
 8000878:	40003800 	.word	0x40003800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <MX_GPIO_Init+0x134>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a46      	ldr	r2, [pc, #280]	@ (80009b0 <MX_GPIO_Init+0x134>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b44      	ldr	r3, [pc, #272]	@ (80009b0 <MX_GPIO_Init+0x134>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a8:	4b41      	ldr	r3, [pc, #260]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a40      	ldr	r2, [pc, #256]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008ae:	f043 0320 	orr.w	r3, r3, #32
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b3e      	ldr	r3, [pc, #248]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0320 	and.w	r3, r3, #32
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b3b      	ldr	r3, [pc, #236]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a3a      	ldr	r2, [pc, #232]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b38      	ldr	r3, [pc, #224]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b35      	ldr	r3, [pc, #212]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a34      	ldr	r2, [pc, #208]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008de:	f043 0308 	orr.w	r3, r3, #8
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b32      	ldr	r3, [pc, #200]	@ (80009b0 <MX_GPIO_Init+0x134>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f6:	482f      	ldr	r0, [pc, #188]	@ (80009b4 <MX_GPIO_Init+0x138>)
 80008f8:	f000 fc86 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000902:	482d      	ldr	r0, [pc, #180]	@ (80009b8 <MX_GPIO_Init+0x13c>)
 8000904:	f000 fc80 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMmenos_Pin ONOFF_Pin MODE_Pin EFECTO_Pin
                           DIMmas_Pin */
  GPIO_InitStruct.Pin = DIMmenos_Pin|ONOFF_Pin|MODE_Pin|EFECTO_Pin
 8000908:	23f8      	movs	r3, #248	@ 0xf8
 800090a:	613b      	str	r3, [r7, #16]
                          |DIMmas_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <MX_GPIO_Init+0x140>)
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4827      	ldr	r0, [pc, #156]	@ (80009b8 <MX_GPIO_Init+0x13c>)
 800091c:	f000 faf0 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2302      	movs	r3, #2
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	481e      	ldr	r0, [pc, #120]	@ (80009b4 <MX_GPIO_Init+0x138>)
 800093a:	f000 fae1 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 800093e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4818      	ldr	r0, [pc, #96]	@ (80009b8 <MX_GPIO_Init+0x13c>)
 8000958:	f000 fad2 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 800095c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_GPIO_Init+0x140>)
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_GPIO_Init+0x13c>)
 8000972:	f000 fac5 	bl	8000f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2009      	movs	r0, #9
 800097c:	f000 fa89 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000980:	2009      	movs	r0, #9
 8000982:	f000 faa2 	bl	8000eca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200a      	movs	r0, #10
 800098c:	f000 fa81 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000990:	200a      	movs	r0, #10
 8000992:	f000 fa9a 	bl	8000eca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2017      	movs	r0, #23
 800099c:	f000 fa79 	bl	8000e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a0:	2017      	movs	r0, #23
 80009a2:	f000 fa92 	bl	8000eca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	40010800 	.word	0x40010800
 80009bc:	10210000 	.word	0x10210000

080009c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009d0:	d101      	bne.n	80009d6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nrf24l01p_tx_irq();
 80009d2:	f7ff fc75 	bl	80002c0 <nrf24l01p_tx_irq>
	tx_data[0] = mode;
	tx_data[1] = efecto;
	tx_data[2] = dim;
	nrf24l01p_tx_transmit(tx_data);
	#endif
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
}
 80009e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_MspInit+0x5c>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <HAL_MspInit+0x5c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_MspInit+0x5c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_MspInit+0x5c>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <HAL_MspInit+0x5c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <HAL_MspInit+0x5c>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <HAL_MspInit+0x60>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_MspInit+0x60>)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010000 	.word	0x40010000

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_SPI_MspInit+0x8c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d131      	bne.n	8000ad4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	61d3      	str	r3, [r2, #28]
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_SPI_MspInit+0x90>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0308 	and.w	r3, r3, #8
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000aa0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <HAL_SPI_MspInit+0x94>)
 8000ab6:	f000 fa23 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000aba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <HAL_SPI_MspInit+0x94>)
 8000ad0:	f000 fa16 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40003800 	.word	0x40003800
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f894 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIMmenos_Pin);
 8000b44:	2008      	movs	r0, #8
 8000b46:	f000 fb91 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONOFF_Pin);
 8000b52:	2010      	movs	r0, #16
 8000b54:	f000 fb8a 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 8000b60:	2020      	movs	r0, #32
 8000b62:	f000 fb83 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EFECTO_Pin);
 8000b66:	2040      	movs	r0, #64	@ 0x40
 8000b68:	f000 fb80 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIMmas_Pin);
 8000b6c:	2080      	movs	r0, #128	@ 0x80
 8000b6e:	f000 fb7d 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000b72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b76:	f000 fb79 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b8c:	f7ff fff7 	bl	8000b7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b92:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b94:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba8:	4c09      	ldr	r4, [pc, #36]	@ (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fcdf 	bl	8002578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fd8b 	bl	80006d4 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc8:	08002604 	.word	0x08002604
  ldr r2, =_sbss
 8000bcc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd0:	20000090 	.word	0x20000090

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f947 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fefa 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f95f 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f927 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	2000000c 	.word	0x2000000c
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	2000000c 	.word	0x2000000c
 8000c84:	2000008c 	.word	0x2000008c

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	@ (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	2000008c 	.word	0x2000008c

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000000c 	.word	0x2000000c

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4906      	ldr	r1, [pc, #24]	@ (8000d7c <__NVIC_EnableIRQ+0x34>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	@ (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	@ (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	@ 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff2d 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff42 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff35 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f12:	e169      	b.n	80011e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f14:	2201      	movs	r2, #1
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 8158 	bne.w	80011e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4a9a      	ldr	r2, [pc, #616]	@ (80011a0 <HAL_GPIO_Init+0x2a0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d05e      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
 8000f3c:	4a98      	ldr	r2, [pc, #608]	@ (80011a0 <HAL_GPIO_Init+0x2a0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d875      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f42:	4a98      	ldr	r2, [pc, #608]	@ (80011a4 <HAL_GPIO_Init+0x2a4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d058      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
 8000f48:	4a96      	ldr	r2, [pc, #600]	@ (80011a4 <HAL_GPIO_Init+0x2a4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d86f      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f4e:	4a96      	ldr	r2, [pc, #600]	@ (80011a8 <HAL_GPIO_Init+0x2a8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d052      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
 8000f54:	4a94      	ldr	r2, [pc, #592]	@ (80011a8 <HAL_GPIO_Init+0x2a8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d869      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f5a:	4a94      	ldr	r2, [pc, #592]	@ (80011ac <HAL_GPIO_Init+0x2ac>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d04c      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
 8000f60:	4a92      	ldr	r2, [pc, #584]	@ (80011ac <HAL_GPIO_Init+0x2ac>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d863      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f66:	4a92      	ldr	r2, [pc, #584]	@ (80011b0 <HAL_GPIO_Init+0x2b0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d046      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
 8000f6c:	4a90      	ldr	r2, [pc, #576]	@ (80011b0 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d85d      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d82a      	bhi.n	8000fcc <HAL_GPIO_Init+0xcc>
 8000f76:	2b12      	cmp	r3, #18
 8000f78:	d859      	bhi.n	800102e <HAL_GPIO_Init+0x12e>
 8000f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f80 <HAL_GPIO_Init+0x80>)
 8000f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f80:	08000ffb 	.word	0x08000ffb
 8000f84:	08000fd5 	.word	0x08000fd5
 8000f88:	08000fe7 	.word	0x08000fe7
 8000f8c:	08001029 	.word	0x08001029
 8000f90:	0800102f 	.word	0x0800102f
 8000f94:	0800102f 	.word	0x0800102f
 8000f98:	0800102f 	.word	0x0800102f
 8000f9c:	0800102f 	.word	0x0800102f
 8000fa0:	0800102f 	.word	0x0800102f
 8000fa4:	0800102f 	.word	0x0800102f
 8000fa8:	0800102f 	.word	0x0800102f
 8000fac:	0800102f 	.word	0x0800102f
 8000fb0:	0800102f 	.word	0x0800102f
 8000fb4:	0800102f 	.word	0x0800102f
 8000fb8:	0800102f 	.word	0x0800102f
 8000fbc:	0800102f 	.word	0x0800102f
 8000fc0:	0800102f 	.word	0x0800102f
 8000fc4:	08000fdd 	.word	0x08000fdd
 8000fc8:	08000ff1 	.word	0x08000ff1
 8000fcc:	4a79      	ldr	r2, [pc, #484]	@ (80011b4 <HAL_GPIO_Init+0x2b4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd2:	e02c      	b.n	800102e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e029      	b.n	8001030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e024      	b.n	8001030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	3308      	adds	r3, #8
 8000fec:	623b      	str	r3, [r7, #32]
          break;
 8000fee:	e01f      	b.n	8001030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	330c      	adds	r3, #12
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e01a      	b.n	8001030 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001002:	2304      	movs	r3, #4
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e013      	b.n	8001030 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001010:	2308      	movs	r3, #8
 8001012:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	611a      	str	r2, [r3, #16]
          break;
 800101a:	e009      	b.n	8001030 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800101c:	2308      	movs	r3, #8
 800101e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	615a      	str	r2, [r3, #20]
          break;
 8001026:	e003      	b.n	8001030 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x130>
          break;
 800102e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	@ 0xff
 8001034:	d801      	bhi.n	800103a <HAL_GPIO_Init+0x13a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	e001      	b.n	800103e <HAL_GPIO_Init+0x13e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2bff      	cmp	r3, #255	@ 0xff
 8001044:	d802      	bhi.n	800104c <HAL_GPIO_Init+0x14c>
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x152>
 800104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104e:	3b08      	subs	r3, #8
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	210f      	movs	r1, #15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	401a      	ands	r2, r3
 8001064:	6a39      	ldr	r1, [r7, #32]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	431a      	orrs	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80b1 	beq.w	80011e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001080:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a4c      	ldr	r2, [pc, #304]	@ (80011b8 <HAL_GPIO_Init+0x2b8>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b4a      	ldr	r3, [pc, #296]	@ (80011b8 <HAL_GPIO_Init+0x2b8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001098:	4a48      	ldr	r2, [pc, #288]	@ (80011bc <HAL_GPIO_Init+0x2bc>)
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a40      	ldr	r2, [pc, #256]	@ (80011c0 <HAL_GPIO_Init+0x2c0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d013      	beq.n	80010ec <HAL_GPIO_Init+0x1ec>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3f      	ldr	r2, [pc, #252]	@ (80011c4 <HAL_GPIO_Init+0x2c4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d00d      	beq.n	80010e8 <HAL_GPIO_Init+0x1e8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3e      	ldr	r2, [pc, #248]	@ (80011c8 <HAL_GPIO_Init+0x2c8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x1e4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a3d      	ldr	r2, [pc, #244]	@ (80011cc <HAL_GPIO_Init+0x2cc>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_GPIO_Init+0x1e0>
 80010dc:	2303      	movs	r3, #3
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x1ee>
 80010e0:	2304      	movs	r3, #4
 80010e2:	e004      	b.n	80010ee <HAL_GPIO_Init+0x1ee>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x1ee>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_GPIO_Init+0x1ee>
 80010ec:	2300      	movs	r3, #0
 80010ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f0:	f002 0203 	and.w	r2, r2, #3
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	4093      	lsls	r3, r2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010fe:	492f      	ldr	r1, [pc, #188]	@ (80011bc <HAL_GPIO_Init+0x2bc>)
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	492c      	ldr	r1, [pc, #176]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001126:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	43db      	mvns	r3, r3
 800112e:	4928      	ldr	r1, [pc, #160]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001130:	4013      	ands	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001140:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	4922      	ldr	r1, [pc, #136]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	60cb      	str	r3, [r1, #12]
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800114e:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	43db      	mvns	r3, r3
 8001156:	491e      	ldr	r1, [pc, #120]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001158:	4013      	ands	r3, r2
 800115a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4918      	ldr	r1, [pc, #96]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	43db      	mvns	r3, r3
 800117e:	4914      	ldr	r1, [pc, #80]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001180:	4013      	ands	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d021      	beq.n	80011d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	490e      	ldr	r1, [pc, #56]	@ (80011d0 <HAL_GPIO_Init+0x2d0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]
 800119c:	e021      	b.n	80011e2 <HAL_GPIO_Init+0x2e2>
 800119e:	bf00      	nop
 80011a0:	10320000 	.word	0x10320000
 80011a4:	10310000 	.word	0x10310000
 80011a8:	10220000 	.word	0x10220000
 80011ac:	10210000 	.word	0x10210000
 80011b0:	10120000 	.word	0x10120000
 80011b4:	10110000 	.word	0x10110000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_GPIO_Init+0x304>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	4909      	ldr	r1, [pc, #36]	@ (8001204 <HAL_GPIO_Init+0x304>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	3301      	adds	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f47f ae8e 	bne.w	8000f14 <HAL_GPIO_Init+0x14>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	372c      	adds	r7, #44	@ 0x2c
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	611a      	str	r2, [r3, #16]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43d9      	mvns	r1, r3
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	400b      	ands	r3, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
	...

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fb98 	bl	80009c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e272      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8087 	beq.w	80013ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012bc:	4b92      	ldr	r3, [pc, #584]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d00c      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b08      	cmp	r3, #8
 80012d2:	d112      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
 80012d4:	4b8c      	ldr	r3, [pc, #560]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012e0:	d10b      	bne.n	80012fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4b89      	ldr	r3, [pc, #548]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d06c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x12c>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d168      	bne.n	80013c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e24c      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x76>
 8001304:	4b80      	ldr	r3, [pc, #512]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a7f      	ldr	r2, [pc, #508]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e02e      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10c      	bne.n	8001334 <HAL_RCC_OscConfig+0x98>
 800131a:	4b7b      	ldr	r3, [pc, #492]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a7a      	ldr	r2, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b78      	ldr	r3, [pc, #480]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a77      	ldr	r2, [pc, #476]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e01d      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0xbc>
 800133e:	4b72      	ldr	r3, [pc, #456]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a71      	ldr	r2, [pc, #452]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b6f      	ldr	r3, [pc, #444]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6e      	ldr	r2, [pc, #440]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e00b      	b.n	8001370 <HAL_RCC_OscConfig+0xd4>
 8001358:	4b6b      	ldr	r3, [pc, #428]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a6a      	ldr	r2, [pc, #424]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800135e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b68      	ldr	r3, [pc, #416]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a67      	ldr	r2, [pc, #412]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d013      	beq.n	80013a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc86 	bl	8000c88 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc82 	bl	8000c88 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e200      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0xe4>
 800139e:	e014      	b.n	80013ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc72 	bl	8000c88 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fc6e 	bl	8000c88 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	@ 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1ec      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	4b53      	ldr	r3, [pc, #332]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x10c>
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d063      	beq.n	800149e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d11c      	bne.n	8001428 <HAL_RCC_OscConfig+0x18c>
 80013ee:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fa:	4b43      	ldr	r3, [pc, #268]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d001      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e1c0      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4939      	ldr	r1, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e03a      	b.n	800149e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fc27 	bl	8000c88 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc23 	bl	8000c88 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e1a1      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4927      	ldr	r1, [pc, #156]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_RCC_OscConfig+0x270>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc06 	bl	8000c88 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fc02 	bl	8000c88 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e180      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d03a      	beq.n	8001520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d019      	beq.n	80014e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbe6 	bl	8000c88 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fbe2 	bl	8000c88 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e160      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014de:	2001      	movs	r0, #1
 80014e0:	f000 fa9c 	bl	8001a1c <RCC_Delay>
 80014e4:	e01c      	b.n	8001520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbcc 	bl	8000c88 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	e00f      	b.n	8001514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbc8 	bl	8000c88 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d908      	bls.n	8001514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e146      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	42420000 	.word	0x42420000
 8001510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b92      	ldr	r3, [pc, #584]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e9      	bne.n	80014f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a6 	beq.w	800167a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b8b      	ldr	r3, [pc, #556]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10d      	bne.n	800155a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b88      	ldr	r3, [pc, #544]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a87      	ldr	r2, [pc, #540]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b82      	ldr	r3, [pc, #520]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b7f      	ldr	r3, [pc, #508]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7e      	ldr	r2, [pc, #504]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb89 	bl	8000c88 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fb85 	bl	8000c88 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	@ 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e103      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b75      	ldr	r3, [pc, #468]	@ (8001764 <HAL_RCC_OscConfig+0x4c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x312>
 80015a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6213      	str	r3, [r2, #32]
 80015ac:	e02d      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x334>
 80015b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a66      	ldr	r2, [pc, #408]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x356>
 80015d8:	4b61      	ldr	r3, [pc, #388]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a60      	ldr	r2, [pc, #384]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x36e>
 80015f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	4b58      	ldr	r3, [pc, #352]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a57      	ldr	r2, [pc, #348]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fb39 	bl	8000c88 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb35 	bl	8000c88 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0b1      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b4b      	ldr	r3, [pc, #300]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x37e>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb23 	bl	8000c88 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fb1f 	bl	8000c88 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e09b      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b40      	ldr	r3, [pc, #256]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b3c      	ldr	r3, [pc, #240]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a3b      	ldr	r2, [pc, #236]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8087 	beq.w	8001792 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001684:	4b36      	ldr	r3, [pc, #216]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d061      	beq.n	8001754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d146      	bne.n	8001726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff faf3 	bl	8000c88 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff faef 	bl	8000c88 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e06d      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	4b29      	ldr	r3, [pc, #164]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4921      	ldr	r1, [pc, #132]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a19      	ldr	r1, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	430b      	orrs	r3, r1
 80016f2:	491b      	ldr	r1, [pc, #108]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fac3 	bl	8000c88 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fabf 	bl	8000c88 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x46a>
 8001724:	e035      	b.n	8001792 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff faac 	bl	8000c88 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff faa8 	bl	8000c88 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e026      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x498>
 8001752:	e01e      	b.n	8001792 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e019      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
 8001760:	40021000 	.word	0x40021000
 8001764:	40007000 	.word	0x40007000
 8001768:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_OscConfig+0x500>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0d0      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d910      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0207 	bic.w	r2, r3, #7
 80017ca:	4965      	ldr	r1, [pc, #404]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800181e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d040      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e073      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06b      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187e:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f023 0203 	bic.w	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4936      	ldr	r1, [pc, #216]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001890:	f7ff f9fa 	bl	8000c88 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	e00a      	b.n	80018ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7ff f9f6 	bl	8000c88 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e053      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 020c 	and.w	r2, r3, #12
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1eb      	bne.n	8001898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d210      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0207 	bic.w	r2, r3, #7
 80018d6:	4922      	ldr	r1, [pc, #136]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	@ (8001968 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1cc>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1d0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f958 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	080025d8 	.word	0x080025d8
 800196c:	20000004 	.word	0x20000004
 8001970:	20000008 	.word	0x20000008

08001974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x30>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x36>
 80019a2:	e027      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019a6:	613b      	str	r3, [r7, #16]
      break;
 80019a8:	e027      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a17      	ldr	r2, [pc, #92]	@ (8001a10 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0c5b      	lsrs	r3, r3, #17
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	613b      	str	r3, [r7, #16]
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	693b      	ldr	r3, [r7, #16]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	007a1200 	.word	0x007a1200
 8001a10:	080025e8 	.word	0x080025e8
 8001a14:	080025f8 	.word	0x080025f8
 8001a18:	003d0900 	.word	0x003d0900

08001a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <RCC_Delay+0x34>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <RCC_Delay+0x38>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0a5b      	lsrs	r3, r3, #9
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a38:	bf00      	nop
  }
  while (Delay --);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <RCC_Delay+0x1c>
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20000004 	.word	0x20000004
 8001a54:	10624dd3 	.word	0x10624dd3

08001a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e076      	b.n	8001b58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d108      	bne.n	8001a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a7a:	d009      	beq.n	8001a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
 8001a82:	e005      	b.n	8001a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe ffd0 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ac6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b14:	ea42 0103 	orr.w	r1, r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	0c1a      	lsrs	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f002 0204 	and.w	r2, r2, #4
 8001b36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_SPI_Transmit+0x22>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e12d      	b.n	8001dde <HAL_SPI_Transmit+0x27e>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b8a:	f7ff f87d 	bl	8000c88 <HAL_GetTick>
 8001b8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d002      	beq.n	8001ba6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ba4:	e116      	b.n	8001dd4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_SPI_Transmit+0x52>
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bb6:	e10d      	b.n	8001dd4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bfe:	d10f      	bne.n	8001c20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c2a:	2b40      	cmp	r3, #64	@ 0x40
 8001c2c:	d007      	beq.n	8001c3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c46:	d14f      	bne.n	8001ce8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_SPI_Transmit+0xf6>
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d142      	bne.n	8001cdc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	1c9a      	adds	r2, r3, #2
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c7a:	e02f      	b.n	8001cdc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d112      	bne.n	8001cb0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	1c9a      	adds	r2, r3, #2
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001cae:	e015      	b.n	8001cdc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cb0:	f7fe ffea 	bl	8000c88 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d803      	bhi.n	8001cc8 <HAL_SPI_Transmit+0x168>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc6:	d102      	bne.n	8001cce <HAL_SPI_Transmit+0x16e>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001cda:	e07b      	b.n	8001dd4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ca      	bne.n	8001c7c <HAL_SPI_Transmit+0x11c>
 8001ce6:	e050      	b.n	8001d8a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_SPI_Transmit+0x196>
 8001cf0:	8afb      	ldrh	r3, [r7, #22]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d144      	bne.n	8001d80 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	330c      	adds	r3, #12
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d1c:	e030      	b.n	8001d80 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d113      	bne.n	8001d54 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	330c      	adds	r3, #12
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d52:	e015      	b.n	8001d80 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d54:	f7fe ff98 	bl	8000c88 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d803      	bhi.n	8001d6c <HAL_SPI_Transmit+0x20c>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6a:	d102      	bne.n	8001d72 <HAL_SPI_Transmit+0x212>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001d7e:	e029      	b.n	8001dd4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1c9      	bne.n	8001d1e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fbcc 	bl	800252c <SPI_EndRxTxTransaction>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	77fb      	strb	r3, [r7, #31]
 8001dca:	e003      	b.n	8001dd4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001ddc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b088      	sub	sp, #32
 8001dea:	af02      	add	r7, sp, #8
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d002      	beq.n	8001e0c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e0a:	e0fb      	b.n	8002004 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e14:	d112      	bne.n	8001e3c <HAL_SPI_Receive+0x56>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10e      	bne.n	8001e3c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2204      	movs	r2, #4
 8001e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f8ef 	bl	8002016 <HAL_SPI_TransmitReceive>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	e0e8      	b.n	800200e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_SPI_Receive+0x64>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e0e1      	b.n	800200e <HAL_SPI_Receive+0x228>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e52:	f7fe ff19 	bl	8000c88 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_SPI_Receive+0x7e>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e68:	e0cc      	b.n	8002004 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001edc:	2b40      	cmp	r3, #64	@ 0x40
 8001ede:	d007      	beq.n	8001ef0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d16a      	bne.n	8001fce <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ef8:	e032      	b.n	8001f60 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d115      	bne.n	8001f34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f103 020c 	add.w	r2, r3, #12
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f14:	7812      	ldrb	r2, [r2, #0]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f32:	e015      	b.n	8001f60 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f34:	f7fe fea8 	bl	8000c88 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d803      	bhi.n	8001f4c <HAL_SPI_Receive+0x166>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d102      	bne.n	8001f52 <HAL_SPI_Receive+0x16c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f5e:	e051      	b.n	8002004 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1c7      	bne.n	8001efa <HAL_SPI_Receive+0x114>
 8001f6a:	e035      	b.n	8001fd8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d113      	bne.n	8001fa2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f84:	b292      	uxth	r2, r2
 8001f86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8c:	1c9a      	adds	r2, r3, #2
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fa0:	e015      	b.n	8001fce <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fa2:	f7fe fe71 	bl	8000c88 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d803      	bhi.n	8001fba <HAL_SPI_Receive+0x1d4>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d102      	bne.n	8001fc0 <HAL_SPI_Receive+0x1da>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001fcc:	e01a      	b.n	8002004 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1c9      	bne.n	8001f6c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fa53 	bl	8002488 <SPI_EndRxTransaction>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
 8001ffa:	e003      	b.n	8002004 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800200c:	7dfb      	ldrb	r3, [r7, #23]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b08c      	sub	sp, #48	@ 0x30
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_SPI_TransmitReceive+0x26>
 8002038:	2302      	movs	r3, #2
 800203a:	e198      	b.n	800236e <HAL_SPI_TransmitReceive+0x358>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002044:	f7fe fe20 	bl	8000c88 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800205e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002062:	2b01      	cmp	r3, #1
 8002064:	d00f      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x70>
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800206c:	d107      	bne.n	800207e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_SPI_TransmitReceive+0x68>
 8002076:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002084:	e16d      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x82>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x82>
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800209e:	e160      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d003      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b40      	cmp	r3, #64	@ 0x40
 80020f6:	d007      	beq.n	8002108 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002110:	d17c      	bne.n	800220c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_SPI_TransmitReceive+0x10a>
 800211a:	8b7b      	ldrh	r3, [r7, #26]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d16a      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002144:	e057      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_SPI_TransmitReceive+0x176>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <HAL_SPI_TransmitReceive+0x176>
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d113      	bne.n	800218c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	1c9a      	adds	r2, r3, #2
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d119      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x1b8>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	b292      	uxth	r2, r2
 80021b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b6:	1c9a      	adds	r2, r3, #2
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021ca:	2301      	movs	r3, #1
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021ce:	f7fe fd5b 	bl	8000c88 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021da:	429a      	cmp	r2, r3
 80021dc:	d80b      	bhi.n	80021f6 <HAL_SPI_TransmitReceive+0x1e0>
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d007      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80021f4:	e0b5      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1a2      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x130>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d19d      	bne.n	8002146 <HAL_SPI_TransmitReceive+0x130>
 800220a:	e080      	b.n	800230e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_SPI_TransmitReceive+0x204>
 8002214:	8b7b      	ldrh	r3, [r7, #26]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d16f      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002240:	e05b      	b.n	80022fa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d11c      	bne.n	800228a <HAL_SPI_TransmitReceive+0x274>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d017      	beq.n	800228a <HAL_SPI_TransmitReceive+0x274>
 800225a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225c:	2b01      	cmp	r3, #1
 800225e:	d114      	bne.n	800228a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d119      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x2b6>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d014      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022cc:	f7fe fcdc 	bl	8000c88 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80022d8:	429a      	cmp	r2, r3
 80022da:	d803      	bhi.n	80022e4 <HAL_SPI_TransmitReceive+0x2ce>
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d102      	bne.n	80022ea <HAL_SPI_TransmitReceive+0x2d4>
 80022e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80022f8:	e033      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d19e      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x22c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d199      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800230e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f90a 	bl	800252c <SPI_EndRxTxTransaction>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800232a:	e01a      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002358:	e003      	b.n	8002362 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800236a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800236e:	4618      	mov	r0, r3
 8002370:	3730      	adds	r7, #48	@ 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002388:	f7fe fc7e 	bl	8000c88 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4413      	add	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002398:	f7fe fc76 	bl	8000c88 <HAL_GetTick>
 800239c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800239e:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ae:	e054      	b.n	800245a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d050      	beq.n	800245a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023b8:	f7fe fc66 	bl	8000c88 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d902      	bls.n	80023ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d13d      	bne.n	800244a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023e6:	d111      	bne.n	800240c <SPI_WaitFlagStateUntilTimeout+0x94>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023f0:	d004      	beq.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fa:	d107      	bne.n	800240c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800240a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002414:	d10f      	bne.n	8002436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e017      	b.n	800247a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3b01      	subs	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	429a      	cmp	r2, r3
 8002476:	d19b      	bne.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000004 	.word	0x20000004

08002488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800249c:	d111      	bne.n	80024c2 <SPI_EndRxTransaction+0x3a>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024a6:	d004      	beq.n	80024b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024b0:	d107      	bne.n	80024c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024ca:	d117      	bne.n	80024fc <SPI_EndRxTransaction+0x74>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d4:	d112      	bne.n	80024fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	2101      	movs	r1, #1
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff ff49 	bl	8002378 <SPI_WaitFlagStateUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01a      	beq.n	8002522 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f0:	f043 0220 	orr.w	r2, r3, #32
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e013      	b.n	8002524 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2200      	movs	r2, #0
 8002504:	2180      	movs	r1, #128	@ 0x80
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff ff36 	bl	8002378 <SPI_WaitFlagStateUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e000      	b.n	8002524 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	2180      	movs	r1, #128	@ 0x80
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff ff18 	bl	8002378 <SPI_WaitFlagStateUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e000      	b.n	8002560 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <memset>:
 8002568:	4603      	mov	r3, r0
 800256a:	4402      	add	r2, r0
 800256c:	4293      	cmp	r3, r2
 800256e:	d100      	bne.n	8002572 <memset+0xa>
 8002570:	4770      	bx	lr
 8002572:	f803 1b01 	strb.w	r1, [r3], #1
 8002576:	e7f9      	b.n	800256c <memset+0x4>

08002578 <__libc_init_array>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	2600      	movs	r6, #0
 800257c:	4d0c      	ldr	r5, [pc, #48]	@ (80025b0 <__libc_init_array+0x38>)
 800257e:	4c0d      	ldr	r4, [pc, #52]	@ (80025b4 <__libc_init_array+0x3c>)
 8002580:	1b64      	subs	r4, r4, r5
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	42a6      	cmp	r6, r4
 8002586:	d109      	bne.n	800259c <__libc_init_array+0x24>
 8002588:	f000 f81a 	bl	80025c0 <_init>
 800258c:	2600      	movs	r6, #0
 800258e:	4d0a      	ldr	r5, [pc, #40]	@ (80025b8 <__libc_init_array+0x40>)
 8002590:	4c0a      	ldr	r4, [pc, #40]	@ (80025bc <__libc_init_array+0x44>)
 8002592:	1b64      	subs	r4, r4, r5
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	42a6      	cmp	r6, r4
 8002598:	d105      	bne.n	80025a6 <__libc_init_array+0x2e>
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a0:	4798      	blx	r3
 80025a2:	3601      	adds	r6, #1
 80025a4:	e7ee      	b.n	8002584 <__libc_init_array+0xc>
 80025a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025aa:	4798      	blx	r3
 80025ac:	3601      	adds	r6, #1
 80025ae:	e7f2      	b.n	8002596 <__libc_init_array+0x1e>
 80025b0:	080025fc 	.word	0x080025fc
 80025b4:	080025fc 	.word	0x080025fc
 80025b8:	080025fc 	.word	0x080025fc
 80025bc:	08002600 	.word	0x08002600

080025c0 <_init>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	bf00      	nop
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr

080025cc <_fini>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	bf00      	nop
 80025d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d2:	bc08      	pop	{r3}
 80025d4:	469e      	mov	lr, r3
 80025d6:	4770      	bx	lr
