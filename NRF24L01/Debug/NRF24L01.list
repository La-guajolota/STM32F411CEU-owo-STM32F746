
NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005f18  08005f18  00006f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006118  08006118  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006118  08006118  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006118  08006118  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006120  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000010  08006130  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08006130  000081c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c7  00000000  00000000  00008039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002037  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00015438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a40  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bad  00000000  00000000  00016bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd62  00000000  00000000  0002e76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a38c  00000000  00000000  0003c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c685b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  000c68a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ca4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f00 	.word	0x08005f00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005f00 	.word	0x08005f00

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__gesf2>:
 8000d48:	f04f 3cff 	mov.w	ip, #4294967295
 8000d4c:	e006      	b.n	8000d5c <__cmpsf2+0x4>
 8000d4e:	bf00      	nop

08000d50 <__lesf2>:
 8000d50:	f04f 0c01 	mov.w	ip, #1
 8000d54:	e002      	b.n	8000d5c <__cmpsf2+0x4>
 8000d56:	bf00      	nop

08000d58 <__cmpsf2>:
 8000d58:	f04f 0c01 	mov.w	ip, #1
 8000d5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d6c:	bf18      	it	ne
 8000d6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d72:	d011      	beq.n	8000d98 <__cmpsf2+0x40>
 8000d74:	b001      	add	sp, #4
 8000d76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d7a:	bf18      	it	ne
 8000d7c:	ea90 0f01 	teqne	r0, r1
 8000d80:	bf58      	it	pl
 8000d82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d86:	bf88      	it	hi
 8000d88:	17c8      	asrhi	r0, r1, #31
 8000d8a:	bf38      	it	cc
 8000d8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d90:	bf18      	it	ne
 8000d92:	f040 0001 	orrne.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d9c:	d102      	bne.n	8000da4 <__cmpsf2+0x4c>
 8000d9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000da2:	d105      	bne.n	8000db0 <__cmpsf2+0x58>
 8000da4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da8:	d1e4      	bne.n	8000d74 <__cmpsf2+0x1c>
 8000daa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dae:	d0e1      	beq.n	8000d74 <__cmpsf2+0x1c>
 8000db0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <__aeabi_cfrcmple>:
 8000db8:	4684      	mov	ip, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4661      	mov	r1, ip
 8000dbe:	e7ff      	b.n	8000dc0 <__aeabi_cfcmpeq>

08000dc0 <__aeabi_cfcmpeq>:
 8000dc0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dc2:	f7ff ffc9 	bl	8000d58 <__cmpsf2>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	bf48      	it	mi
 8000dca:	f110 0f00 	cmnmi.w	r0, #0
 8000dce:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dd0 <__aeabi_fcmpeq>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff fff4 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000dd8:	bf0c      	ite	eq
 8000dda:	2001      	moveq	r0, #1
 8000ddc:	2000      	movne	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <__aeabi_fcmplt>:
 8000de4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de8:	f7ff ffea 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000dec:	bf34      	ite	cc
 8000dee:	2001      	movcc	r0, #1
 8000df0:	2000      	movcs	r0, #0
 8000df2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df6:	bf00      	nop

08000df8 <__aeabi_fcmple>:
 8000df8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dfc:	f7ff ffe0 	bl	8000dc0 <__aeabi_cfcmpeq>
 8000e00:	bf94      	ite	ls
 8000e02:	2001      	movls	r0, #1
 8000e04:	2000      	movhi	r0, #0
 8000e06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0a:	bf00      	nop

08000e0c <__aeabi_fcmpge>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff ffd2 	bl	8000db8 <__aeabi_cfrcmple>
 8000e14:	bf94      	ite	ls
 8000e16:	2001      	movls	r0, #1
 8000e18:	2000      	movhi	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmpgt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffc8 	bl	8000db8 <__aeabi_cfrcmple>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_f2uiz>:
 8000e34:	0042      	lsls	r2, r0, #1
 8000e36:	d20e      	bcs.n	8000e56 <__aeabi_f2uiz+0x22>
 8000e38:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e3c:	d30b      	bcc.n	8000e56 <__aeabi_f2uiz+0x22>
 8000e3e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e46:	d409      	bmi.n	8000e5c <__aeabi_f2uiz+0x28>
 8000e48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e50:	fa23 f002 	lsr.w	r0, r3, r2
 8000e54:	4770      	bx	lr
 8000e56:	f04f 0000 	mov.w	r0, #0
 8000e5a:	4770      	bx	lr
 8000e5c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e60:	d101      	bne.n	8000e66 <__aeabi_f2uiz+0x32>
 8000e62:	0242      	lsls	r2, r0, #9
 8000e64:	d102      	bne.n	8000e6c <__aeabi_f2uiz+0x38>
 8000e66:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6a:	4770      	bx	lr
 8000e6c:	f04f 0000 	mov.w	r0, #0
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <cs_high>:
 */

#include "NRF24L01.h"

static void cs_high()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7e:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <cs_high+0x14>)
 8000e80:	f002 f87e 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010c00 	.word	0x40010c00

08000e8c <cs_low>:

static void cs_low()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e96:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <cs_low+0x14>)
 8000e98:	f002 f872 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <ce_high>:

static void ce_high()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eae:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <ce_high+0x14>)
 8000eb0:	f002 f866 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40010800 	.word	0x40010800

08000ebc <ce_low>:

static void ce_low()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec6:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <ce_low+0x14>)
 8000ec8:	f002 f85a 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 8000ee2:	f7ff ffd3 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000ee6:	f107 020e 	add.w	r2, r7, #14
 8000eea:	f107 010f 	add.w	r1, r7, #15
 8000eee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <read_register+0x48>)
 8000ef8:	f002 ff49 	bl	8003d8e <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8000efc:	f107 010d 	add.w	r1, r7, #13
 8000f00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f04:	2201      	movs	r2, #1
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <read_register+0x48>)
 8000f08:	f002 fe29 	bl	8003b5e <HAL_SPI_Receive>
    cs_high();
 8000f0c:	f7ff ffb2 	bl	8000e74 <cs_high>

    return read_val;
 8000f10:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000c8 	.word	0x200000c8

08000f20 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	4603      	mov	r3, r0
 8000f28:	460a      	mov	r2, r1
 8000f2a:	71fb      	strb	r3, [r7, #7]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f043 0320 	orr.w	r3, r3, #32
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000f3e:	f7ff ffa5 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000f42:	f107 020e 	add.w	r2, r7, #14
 8000f46:	f107 010f 	add.w	r1, r7, #15
 8000f4a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <write_register+0x58>)
 8000f54:	f002 ff1b 	bl	8003d8e <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8000f58:	f107 010d 	add.w	r1, r7, #13
 8000f5c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f60:	2201      	movs	r2, #1
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <write_register+0x58>)
 8000f64:	f002 fcb8 	bl	80038d8 <HAL_SPI_Transmit>
    cs_high();
 8000f68:	f7ff ff84 	bl	8000e74 <cs_high>

    return write_val;
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000c8 	.word	0x200000c8

08000f7c <nrf24l01p_tx_init>:

    ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000f8c:	f000 f850 	bl	8001030 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 8000f90:	f000 f8a2 	bl	80010d8 <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8000f94:	f000 f94c 	bl	8001230 <nrf24l01p_power_up>

    nrf24l01p_set_rf_channel(MHz);
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f9d4 	bl	8001348 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8000fa0:	797b      	ldrb	r3, [r7, #5]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fa00 	bl	80013a8 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f9e0 	bl	800136e <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 f953 	bl	800125a <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f000 f973 	bl	80012a0 <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f980 	bl	80012c0 <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 8000fc0:	20fa      	movs	r0, #250	@ 0xfa
 8000fc2:	f000 f999 	bl	80012f8 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000fc6:	f7ff ff6d 	bl	8000ea4 <ce_high>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <nrf24l01p_tx_transmit>:

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t* tx_payload)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
    nrf24l01p_write_tx_fifo(tx_payload);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f892 	bl	8001104 <nrf24l01p_write_tx_fifo>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <nrf24l01p_tx_irq>:

void nrf24l01p_tx_irq()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
    uint8_t tx_ds = nrf24l01p_get_status();
 8000fee:	f000 f8dd 	bl	80011ac <nrf24l01p_get_status>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
    tx_ds &= 0x20;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	71fb      	strb	r3, [r7, #7]

    if(tx_ds)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <nrf24l01p_tx_irq+0x2c>
    {
        // TX_DS
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4808      	ldr	r0, [pc, #32]	@ (800102c <nrf24l01p_tx_irq+0x44>)
 800100a:	f001 ffd1 	bl	8002fb0 <HAL_GPIO_TogglePin>
        nrf24l01p_clear_tx_ds();
 800100e:	f000 f8e7 	bl	80011e0 <nrf24l01p_clear_tx_ds>
    {
        // MAX_RT
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
        nrf24l01p_clear_max_rt();
    }
}
 8001012:	e007      	b.n	8001024 <nrf24l01p_tx_irq+0x3c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	4804      	ldr	r0, [pc, #16]	@ (800102c <nrf24l01p_tx_irq+0x44>)
 800101c:	f001 ffb0 	bl	8002f80 <HAL_GPIO_WritePin>
        nrf24l01p_clear_max_rt();
 8001020:	f000 f8f2 	bl	8001208 <nrf24l01p_clear_max_rt>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40011000 	.word	0x40011000

08001030 <nrf24l01p_reset>:

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 8001034:	f7ff ff1e 	bl	8000e74 <cs_high>
    ce_low();
 8001038:	f7ff ff40 	bl	8000ebc <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 800103c:	2108      	movs	r1, #8
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ff6e 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8001044:	213f      	movs	r1, #63	@ 0x3f
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ff6a 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800104c:	2103      	movs	r1, #3
 800104e:	2002      	movs	r0, #2
 8001050:	f7ff ff66 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8001054:	2103      	movs	r1, #3
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff ff62 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800105c:	2103      	movs	r1, #3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff ff5e 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 8001064:	2102      	movs	r1, #2
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff ff5a 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800106c:	2107      	movs	r1, #7
 800106e:	2006      	movs	r0, #6
 8001070:	f7ff ff56 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 8001074:	217e      	movs	r1, #126	@ 0x7e
 8001076:	2007      	movs	r0, #7
 8001078:	f7ff ff52 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800107c:	2100      	movs	r1, #0
 800107e:	2011      	movs	r0, #17
 8001080:	f7ff ff4e 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	2011      	movs	r0, #17
 8001088:	f7ff ff4a 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 800108c:	2100      	movs	r1, #0
 800108e:	2012      	movs	r0, #18
 8001090:	f7ff ff46 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8001094:	2100      	movs	r1, #0
 8001096:	2013      	movs	r0, #19
 8001098:	f7ff ff42 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 800109c:	2100      	movs	r1, #0
 800109e:	2014      	movs	r0, #20
 80010a0:	f7ff ff3e 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2015      	movs	r0, #21
 80010a8:	f7ff ff3a 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2016      	movs	r0, #22
 80010b0:	f7ff ff36 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80010b4:	2111      	movs	r1, #17
 80010b6:	2017      	movs	r0, #23
 80010b8:	f7ff ff32 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 80010bc:	2100      	movs	r1, #0
 80010be:	201c      	movs	r0, #28
 80010c0:	f7ff ff2e 	bl	8000f20 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	201d      	movs	r0, #29
 80010c8:	f7ff ff2a 	bl	8000f20 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 80010cc:	f000 f83e 	bl	800114c <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 80010d0:	f000 f854 	bl	800117c <nrf24l01p_flush_tx_fifo>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <nrf24l01p_ptx_mode>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fef8 	bl	8000ed4 <read_register>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff13 	bl	8000f20 <write_register>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <nrf24l01p_write_tx_fifo>:

    return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t* tx_payload)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	6078      	str	r0, [r7, #4]
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 800110c:	23a0      	movs	r3, #160	@ 0xa0
 800110e:	73fb      	strb	r3, [r7, #15]
    uint8_t status;

    cs_low();
 8001110:	f7ff febc 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8001114:	f107 020e 	add.w	r2, r7, #14
 8001118:	f107 010f 	add.w	r1, r7, #15
 800111c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4808      	ldr	r0, [pc, #32]	@ (8001148 <nrf24l01p_write_tx_fifo+0x44>)
 8001126:	f002 fe32 	bl	8003d8e <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800112a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800112e:	2203      	movs	r2, #3
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <nrf24l01p_write_tx_fifo+0x44>)
 8001134:	f002 fbd0 	bl	80038d8 <HAL_SPI_Transmit>
    cs_high();
 8001138:	f7ff fe9c 	bl	8000e74 <cs_high>

    return status;
 800113c:	7bbb      	ldrb	r3, [r7, #14]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000c8 	.word	0x200000c8

0800114c <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8001152:	23e2      	movs	r3, #226	@ 0xe2
 8001154:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001156:	f7ff fe99 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800115a:	1dba      	adds	r2, r7, #6
 800115c:	1df9      	adds	r1, r7, #7
 800115e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4804      	ldr	r0, [pc, #16]	@ (8001178 <nrf24l01p_flush_rx_fifo+0x2c>)
 8001168:	f002 fe11 	bl	8003d8e <HAL_SPI_TransmitReceive>
    cs_high();
 800116c:	f7ff fe82 	bl	8000e74 <cs_high>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000c8 	.word	0x200000c8

0800117c <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8001182:	23e1      	movs	r3, #225	@ 0xe1
 8001184:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8001186:	f7ff fe81 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800118a:	1dba      	adds	r2, r7, #6
 800118c:	1df9      	adds	r1, r7, #7
 800118e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <nrf24l01p_flush_tx_fifo+0x2c>)
 8001198:	f002 fdf9 	bl	8003d8e <HAL_SPI_TransmitReceive>
    cs_high();
 800119c:	f7ff fe6a 	bl	8000e74 <cs_high>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200000c8 	.word	0x200000c8

080011ac <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 80011b2:	23ff      	movs	r3, #255	@ 0xff
 80011b4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80011b6:	f7ff fe69 	bl	8000e8c <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80011ba:	1dba      	adds	r2, r7, #6
 80011bc:	1df9      	adds	r1, r7, #7
 80011be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <nrf24l01p_get_status+0x30>)
 80011c8:	f002 fde1 	bl	8003d8e <HAL_SPI_TransmitReceive>
    cs_high();
 80011cc:	f7ff fe52 	bl	8000e74 <cs_high>

    return status;
 80011d0:	79bb      	ldrb	r3, [r7, #6]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000c8 	.word	0x200000c8

080011e0 <nrf24l01p_clear_tx_ds>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_clear_tx_ds()
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 80011e6:	f7ff ffe1 	bl	80011ac <nrf24l01p_get_status>
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x20;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4619      	mov	r1, r3
 80011fa:	2007      	movs	r0, #7
 80011fc:	f7ff fe90 	bl	8000f20 <write_register>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <nrf24l01p_clear_max_rt>:

void nrf24l01p_clear_max_rt()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    uint8_t new_status = nrf24l01p_get_status();
 800120e:	f7ff ffcd 	bl	80011ac <nrf24l01p_get_status>
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    new_status |= 0x10;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_STATUS, new_status);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4619      	mov	r1, r3
 8001222:	2007      	movs	r0, #7
 8001224:	f7ff fe7c 	bl	8000f20 <write_register>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <nrf24l01p_power_up>:

void nrf24l01p_power_up()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fe4c 	bl	8000ed4 <read_register>
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	4619      	mov	r1, r3
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fe67 	bl	8000f20 <write_register>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fe35 	bl	8000ed4 <read_register>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d002      	beq.n	800127a <nrf24l01p_set_crc_length+0x20>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d005      	beq.n	8001284 <nrf24l01p_set_crc_length+0x2a>
 8001278:	e009      	b.n	800128e <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	73fb      	strb	r3, [r7, #15]
            break;
 8001282:	e004      	b.n	800128e <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	73fb      	strb	r3, [r7, #15]
            break;
 800128c:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	4619      	mov	r1, r3
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe44 	bl	8000f20 <write_register>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3b02      	subs	r3, #2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fe34 	bl	8000f20 <write_register>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80012ca:	2004      	movs	r0, #4
 80012cc:	f7ff fe02 	bl	8000ed4 <read_register>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f063 030f 	orn	r3, r3, #15
 80012da:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	4619      	mov	r1, r3
 80012e8:	2004      	movs	r0, #4
 80012ea:	f7ff fe19 	bl	8000f20 <write_register>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8001302:	2004      	movs	r0, #4
 8001304:	f7ff fde6 	bl	8000ed4 <read_register>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f043 030f 	orr.w	r3, r3, #15
 8001312:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	b29b      	uxth	r3, r3
 8001320:	3b01      	subs	r3, #1
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b25a      	sxtb	r2, r3
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4313      	orrs	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4619      	mov	r1, r3
 8001334:	2004      	movs	r0, #4
 8001336:	f7ff fdf3 	bl	8000f20 <write_register>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	10624dd3 	.word	0x10624dd3

08001348 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	f5a3 6316 	sub.w	r3, r3, #2400	@ 0x960
 8001358:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	2005      	movs	r0, #5
 8001362:	f7ff fddd 	bl	8000f20 <write_register>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8001378:	2006      	movs	r0, #6
 800137a:	f7ff fdab 	bl	8000ed4 <read_register>
 800137e:	4603      	mov	r3, r0
 8001380:	f023 0306 	bic.w	r3, r3, #6
 8001384:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4619      	mov	r1, r3
 800139a:	2006      	movs	r0, #6
 800139c:	f7ff fdc0 	bl	8000f20 <write_register>
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80013b2:	2006      	movs	r0, #6
 80013b4:	f7ff fd8e 	bl	8000ed4 <read_register>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80013be:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d00a      	beq.n	80013dc <nrf24l01p_set_rf_air_data_rate+0x34>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	dc0e      	bgt.n	80013e8 <nrf24l01p_set_rf_air_data_rate+0x40>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <nrf24l01p_set_rf_air_data_rate+0x3e>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10a      	bne.n	80013e8 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	73fb      	strb	r3, [r7, #15]
            break;
 80013da:	e005      	b.n	80013e8 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	f043 0320 	orr.w	r3, r3, #32
 80013e2:	73fb      	strb	r3, [r7, #15]
            break;
 80013e4:	e000      	b.n	80013e8 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80013e6:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	4619      	mov	r1, r3
 80013ec:	2006      	movs	r0, #6
 80013ee:	f7ff fd97 	bl	8000f20 <write_register>
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <Set_LED>:

/*
 * Funciones
 */
void Set_LED(TIRA_t* regleta,uint8_t led_num,uint8_t R,uint8_t G,uint8_t B)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	4608      	mov	r0, r1
 8001404:	4611      	mov	r1, r2
 8001406:	461a      	mov	r2, r3
 8001408:	4603      	mov	r3, r0
 800140a:	70fb      	strb	r3, [r7, #3]
 800140c:	460b      	mov	r3, r1
 800140e:	70bb      	strb	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
	regleta->LEDS[led_num].RGB[0] = R;
 8001414:	78fa      	ldrb	r2, [r7, #3]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	440b      	add	r3, r1
 8001420:	78ba      	ldrb	r2, [r7, #2]
 8001422:	701a      	strb	r2, [r3, #0]
	regleta->LEDS[led_num].RGB[1] = G;
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	440b      	add	r3, r1
 8001430:	3301      	adds	r3, #1
 8001432:	787a      	ldrb	r2, [r7, #1]
 8001434:	701a      	strb	r2, [r3, #0]
	regleta->LEDS[led_num].RGB[2] = B;
 8001436:	78fa      	ldrb	r2, [r7, #3]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	440b      	add	r3, r1
 8001442:	3302      	adds	r3, #2
 8001444:	7c3a      	ldrb	r2, [r7, #16]
 8001446:	701a      	strb	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <Init_tira>:

void Init_tira(TIRA_t* regleta)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af02      	add	r7, sp, #8
 8001458:	6078      	str	r0, [r7, #4]
	regleta->datasentflag = 0;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
	for (int num=0;num<MAX_LED;num++) {
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e00b      	b.n	800147e <Init_tira+0x2c>
		Set_LED(regleta,num,0,0,0);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	b2d9      	uxtb	r1, r3
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2200      	movs	r2, #0
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffc1 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	ddf0      	ble.n	8001466 <Init_tira+0x14>
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <WS2812_Send>:

void WS2812_Send (TIRA_t* regleta)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
	uint32_t color; //8bits_G 8bits_R 8bits_B

	//Iteramos N leds rgb de la tira
	for (int led_num=0; led_num<MAX_LED; led_num++)
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	e03e      	b.n	8001520 <WS2812_Send+0x90>
	{
		color = ((regleta->LEDS[led_num].RGB[1]<<16) | (regleta->LEDS[led_num].RGB[0]<<8) | (regleta->LEDS[led_num].RGB[2]));
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	3301      	adds	r3, #1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0419      	lsls	r1, r3, #16
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	4403      	add	r3, r0
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	4319      	orrs	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	4403      	add	r3, r0
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	430b      	orrs	r3, r1
 80014d8:	60fb      	str	r3, [r7, #12]

		for (int i=23; i>=0; i--)//Iteramos por la trama total
 80014da:	2317      	movs	r3, #23
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	e019      	b.n	8001514 <WS2812_Send+0x84>
		{
			if (color&(1<<i))//Enmascaramos para sacar los bits
 80014e0:	2201      	movs	r2, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <WS2812_Send+0x6e>
			{
				//Logico 1
				pwmData[indx] = 66;  // 2/3 de 99
 80014f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001570 <WS2812_Send+0xe0>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2142      	movs	r1, #66	@ 0x42
 80014f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014fc:	e004      	b.n	8001508 <WS2812_Send+0x78>
			}
			else
			{
				//Logico 0
				pwmData[indx] = 33;  // 1/3 de 99
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <WS2812_Send+0xe0>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2121      	movs	r1, #33	@ 0x21
 8001504:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--)//Iteramos por la trama total
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3b01      	subs	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	dae2      	bge.n	80014e0 <WS2812_Send+0x50>
	for (int led_num=0; led_num<MAX_LED; led_num++)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	3301      	adds	r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	ddbd      	ble.n	80014a2 <WS2812_Send+0x12>
		}
	}

	//Llenamos de ceros RESET
	for (int i=0; i<50; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e00a      	b.n	8001542 <WS2812_Send+0xb2>
	{
		pwmData[indx] = 0;
 800152c:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <WS2812_Send+0xe0>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2100      	movs	r1, #0
 8001532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b31      	cmp	r3, #49	@ 0x31
 8001546:	ddf1      	ble.n	800152c <WS2812_Send+0x9c>
	}

	//Mandamos data al DMA
	HAL_TIM_PWM_Start_DMA(pwm_timer, pwm_channel, (uint32_t *)pwmData, indx);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <WS2812_Send+0xe0>)
 800154e:	210c      	movs	r1, #12
 8001550:	4808      	ldr	r0, [pc, #32]	@ (8001574 <WS2812_Send+0xe4>)
 8001552:	f002 ff15 	bl	8004380 <HAL_TIM_PWM_Start_DMA>
	while (!regleta->datasentflag){};
 8001556:	bf00      	nop
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0fb      	beq.n	8001558 <WS2812_Send+0xc8>
	regleta->datasentflag = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000002c 	.word	0x2000002c
 8001574:	20000120 	.word	0x20000120

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157c:	f000 fffa 	bl	8002574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001580:	f000 f818 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001584:	f000 f908 	bl	8001798 <MX_GPIO_Init>
  MX_DMA_Init();
 8001588:	f000 f8e8 	bl	800175c <MX_DMA_Init>
  MX_SPI2_Init();
 800158c:	f000 f858 	bl	8001640 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001590:	f000 f88c 	bl	80016ac <MX_TIM2_Init>
  /*
   * Configuramos el transciver
   * CANAL 2500Mhz
   * Baudrate en 1Mbps
   */
  nrf24l01p_tx_init(2500, _1Mbps);
 8001594:	2100      	movs	r1, #0
 8001596:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800159a:	f7ff fcef 	bl	8000f7c <nrf24l01p_tx_init>

  //inicializamos la bandera de la tira
  Init_tira(&rgbLED);
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <main+0x38>)
 80015a0:	f7ff ff57 	bl	8001452 <Init_tira>
  WS2812_Send(&rgbLED);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <main+0x38>)
 80015a6:	f7ff ff73 	bl	8001490 <WS2812_Send>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <main+0x32>
 80015ae:	bf00      	nop
 80015b0:	200000c0 	.word	0x200000c0

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	@ 0x40
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2228      	movs	r2, #40	@ 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fc98 	bl	8004ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e8:	2302      	movs	r3, #2
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fd09 	bl	8003014 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001608:	f000 fe1a 	bl	8002240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f001 ff76 	bl	8003518 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001632:	f000 fe05 	bl	8002240 <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3740      	adds	r7, #64	@ 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001646:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <MX_SPI2_Init+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_SPI2_Init+0x64>)
 800164c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001650:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_SPI2_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_SPI2_Init+0x64>)
 800166c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001670:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001674:	2210      	movs	r2, #16
 8001676:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <MX_SPI2_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_SPI2_Init+0x64>)
 800168c:	220a      	movs	r2, #10
 800168e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_SPI2_Init+0x64>)
 8001692:	f002 f89d 	bl	80037d0 <HAL_SPI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800169c:	f000 fdd0 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200000c8 	.word	0x200000c8
 80016a8:	40003800 	.word	0x40003800

080016ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016e4:	2247      	movs	r2, #71	@ 0x47
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016f4:	4818      	ldr	r0, [pc, #96]	@ (8001758 <MX_TIM2_Init+0xac>)
 80016f6:	f002 fdf3 	bl	80042e0 <HAL_TIM_PWM_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 fd9e 	bl	8002240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4619      	mov	r1, r3
 8001712:	4811      	ldr	r0, [pc, #68]	@ (8001758 <MX_TIM2_Init+0xac>)
 8001714:	f003 fb92 	bl	8004e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800171e:	f000 fd8f 	bl	8002240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	@ 0x60
 8001724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	220c      	movs	r2, #12
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	@ (8001758 <MX_TIM2_Init+0xac>)
 800173a:	f002 ffc3 	bl	80046c4 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001744:	f000 fd7c 	bl	8002240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <MX_TIM2_Init+0xac>)
 800174a:	f000 fe4b 	bl	80023e4 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000120 	.word	0x20000120

0800175c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_DMA_Init+0x38>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <MX_DMA_Init+0x38>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_DMA_Init+0x38>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2011      	movs	r0, #17
 8001780:	f001 f855 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001784:	2011      	movs	r0, #17
 8001786:	f001 f86e 	bl	8002866 <HAL_NVIC_EnableIRQ>

}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ac:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a46      	ldr	r2, [pc, #280]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b44      	ldr	r3, [pc, #272]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c4:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a40      	ldr	r2, [pc, #256]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b3b      	ldr	r3, [pc, #236]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f4:	4b35      	ldr	r3, [pc, #212]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a34      	ldr	r2, [pc, #208]	@ (80018cc <MX_GPIO_Init+0x134>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b32      	ldr	r3, [pc, #200]	@ (80018cc <MX_GPIO_Init+0x134>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001812:	482f      	ldr	r0, [pc, #188]	@ (80018d0 <MX_GPIO_Init+0x138>)
 8001814:	f001 fbb4 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800181e:	482d      	ldr	r0, [pc, #180]	@ (80018d4 <MX_GPIO_Init+0x13c>)
 8001820:	f001 fbae 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIMmenos_Pin ONOFF_Pin MODE_Pin EFECTO_Pin
                           DIMmas_Pin */
  GPIO_InitStruct.Pin = DIMmenos_Pin|ONOFF_Pin|MODE_Pin|EFECTO_Pin
 8001824:	23f8      	movs	r3, #248	@ 0xf8
 8001826:	613b      	str	r3, [r7, #16]
                          |DIMmas_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <MX_GPIO_Init+0x140>)
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182c:	2301      	movs	r3, #1
 800182e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	4827      	ldr	r0, [pc, #156]	@ (80018d4 <MX_GPIO_Init+0x13c>)
 8001838:	f001 fa1e 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800183c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2302      	movs	r3, #2
 800184c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4619      	mov	r1, r3
 8001854:	481e      	ldr	r0, [pc, #120]	@ (80018d0 <MX_GPIO_Init+0x138>)
 8001856:	f001 fa0f 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 800185a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <MX_GPIO_Init+0x13c>)
 8001874:	f001 fa00 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_GPIO_Init+0x140>)
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <MX_GPIO_Init+0x13c>)
 800188e:	f001 f9f3 	bl	8002c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f000 ffc9 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800189c:	2009      	movs	r0, #9
 800189e:	f000 ffe2 	bl	8002866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	200a      	movs	r0, #10
 80018a8:	f000 ffc1 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018ac:	200a      	movs	r0, #10
 80018ae:	f000 ffda 	bl	8002866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2017      	movs	r0, #23
 80018b8:	f000 ffb9 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018bc:	2017      	movs	r0, #23
 80018be:	f000 ffd2 	bl	8002866 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40010800 	.word	0x40010800
 80018d8:	10210000 	.word	0x10210000

080018dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER)
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		nrf24l01p_tx_irq();
 80018ee:	f7ff fb7b 	bl	8000fe8 <nrf24l01p_tx_irq>
	}

	#ifdef manual
	switch (GPIO_Pin)
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	2b80      	cmp	r3, #128	@ 0x80
 80018f6:	d02f      	beq.n	8001958 <HAL_GPIO_EXTI_Callback+0x7c>
 80018f8:	2b80      	cmp	r3, #128	@ 0x80
 80018fa:	dc3b      	bgt.n	8001974 <HAL_GPIO_EXTI_Callback+0x98>
 80018fc:	2b40      	cmp	r3, #64	@ 0x40
 80018fe:	d01c      	beq.n	800193a <HAL_GPIO_EXTI_Callback+0x5e>
 8001900:	2b40      	cmp	r3, #64	@ 0x40
 8001902:	dc37      	bgt.n	8001974 <HAL_GPIO_EXTI_Callback+0x98>
 8001904:	2b20      	cmp	r3, #32
 8001906:	d00b      	beq.n	8001920 <HAL_GPIO_EXTI_Callback+0x44>
 8001908:	2b20      	cmp	r3, #32
 800190a:	dc33      	bgt.n	8001974 <HAL_GPIO_EXTI_Callback+0x98>
 800190c:	2b08      	cmp	r3, #8
 800190e:	d02a      	beq.n	8001966 <HAL_GPIO_EXTI_Callback+0x8a>
 8001910:	2b10      	cmp	r3, #16
 8001912:	d12f      	bne.n	8001974 <HAL_GPIO_EXTI_Callback+0x98>
	{
		case ONOFF_Pin:
			efecto = 5;
 8001914:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 8001916:	2205      	movs	r2, #5
 8001918:	701a      	strb	r2, [r3, #0]
			EFECTO5();
 800191a:	f000 fb6d 	bl	8001ff8 <EFECTO5>
			break;
 800191e:	e02a      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
		case MODE_Pin:
			mode ^= true;
 8001920:	4b38      	ldr	r3, [pc, #224]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x128>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x128>)
 8001936:	701a      	strb	r2, [r3, #0]
			break;
 8001938:	e01d      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
		case EFECTO_Pin:

			if (efecto>4)
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b04      	cmp	r3, #4
 8001940:	d903      	bls.n	800194a <HAL_GPIO_EXTI_Callback+0x6e>
			{
				efecto=0;
 8001942:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			}else
			{
				efecto++;
			}
			break;
 8001948:	e015      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
				efecto++;
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 8001954:	701a      	strb	r2, [r3, #0]
			break;
 8001956:	e00e      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
		case DIMmas_Pin:
			dim++;
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x12c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001962:	701a      	strb	r2, [r3, #0]
			break;
 8001964:	e007      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
		case DIMmenos_Pin:
			dim--;
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001970:	701a      	strb	r2, [r3, #0]
			break;
 8001972:	e000      	b.n	8001976 <HAL_GPIO_EXTI_Callback+0x9a>
		default:
			break;
 8001974:	bf00      	nop
	}

	tx_data[0] = mode;
 8001976:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x128>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 800197e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = efecto;
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x124>)
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 8001986:	705a      	strb	r2, [r3, #1]
	tx_data[2] = dim;
 8001988:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x12c>)
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 800198e:	709a      	strb	r2, [r3, #2]

	if(tx_data[0])
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d025      	beq.n	80019e4 <HAL_GPIO_EXTI_Callback+0x108>
		{
			switch (tx_data[1])
 8001998:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 800199a:	785b      	ldrb	r3, [r3, #1]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d827      	bhi.n	80019f0 <HAL_GPIO_EXTI_Callback+0x114>
 80019a0:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <HAL_GPIO_EXTI_Callback+0xcc>)
 80019a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a6:	bf00      	nop
 80019a8:	080019c1 	.word	0x080019c1
 80019ac:	080019c7 	.word	0x080019c7
 80019b0:	080019cd 	.word	0x080019cd
 80019b4:	080019d3 	.word	0x080019d3
 80019b8:	080019d9 	.word	0x080019d9
 80019bc:	080019df 	.word	0x080019df
			{//EFECTOS DE RGB
				case 0:
					EFECTO1();
 80019c0:	f000 f84a 	bl	8001a58 <EFECTO1>
					break;
 80019c4:	e015      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				case 1:
					EFECTO2();
 80019c6:	f000 f93b 	bl	8001c40 <EFECTO2>
					break;
 80019ca:	e012      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				case 2:
					EFECTO3();
 80019cc:	f000 f9ac 	bl	8001d28 <EFECTO3>
					break;
 80019d0:	e00f      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				case 3:
					EFECTO4();
 80019d2:	f000 fa1d 	bl	8001e10 <EFECTO4>
					break;
 80019d6:	e00c      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				case 4:
					EFECTO5();
 80019d8:	f000 fb0e 	bl	8001ff8 <EFECTO5>
					break;
 80019dc:	e009      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				case 5:
					ONOFF();
 80019de:	f000 f817 	bl	8001a10 <ONOFF>
					break;
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
				default:
					break;
			}
		}else
		{//EFECTOS DE LUZ BLANCA
			LUZ_BLANCA(tx_data[2]);
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fbf9 	bl	80021e0 <LUZ_BLANCA>
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_EXTI_Callback+0x116>
					break;
 80019f0:	bf00      	nop
		}

	nrf24l01p_tx_transmit(tx_data);
 80019f2:	4806      	ldr	r0, [pc, #24]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x130>)
 80019f4:	f7ff faed 	bl	8000fd2 <nrf24l01p_tx_transmit>
	#endif
}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200001ac 	.word	0x200001ac
 8001a04:	20000000 	.word	0x20000000
 8001a08:	200001ad 	.word	0x200001ad
 8001a0c:	200001b0 	.word	0x200001b0

08001a10 <ONOFF>:

/*
 * ONOFF
 */
void ONOFF(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	e00b      	b.n	8001a34 <ONOFF+0x24>
		Set_LED(&rgbLED,num,0,0,0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b2d9      	uxtb	r1, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <ONOFF+0x40>)
 8001a2a:	f7ff fce6 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3301      	adds	r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	ddf0      	ble.n	8001a1c <ONOFF+0xc>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 8001a3a:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <ONOFF+0x40>)
 8001a3c:	f7ff fd28 	bl	8001490 <WS2812_Send>

	HAL_Delay(25);
 8001a40:	2019      	movs	r0, #25
 8001a42:	f000 fdf9 	bl	8002638 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200000c0 	.word	0x200000c0
 8001a54:	00000000 	.word	0x00000000

08001a58 <EFECTO1>:
 * EFECTOS RGB
 */
uint8_t colores[3] = {0};
float N = 0; //timepo en iteracion
void EFECTO1(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N           )+1.0)/2.0));
 8001a5e:	4b74      	ldr	r3, [pc, #464]	@ (8001c30 <EFECTO1+0x1d8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fcd8 	bl	8000418 <__aeabi_f2d>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f003 fa6e 	bl	8004f50 <sin>
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <EFECTO1+0x1dc>)
 8001a7a:	f7fe fb6f 	bl	800015c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a8e:	f7fe fe45 	bl	800071c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a35d      	add	r3, pc, #372	@ (adr r3, 8001c10 <EFECTO1+0x1b8>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fd12 	bl	80004c8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7fe ffce 	bl	8000a4c <__aeabi_d2uiz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b60      	ldr	r3, [pc, #384]	@ (8001c38 <EFECTO1+0x1e0>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N + (2.0*PI)/3)+1.0)/2.0));
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <EFECTO1+0x1d8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcab 	bl	8000418 <__aeabi_f2d>
 8001ac2:	a355      	add	r3, pc, #340	@ (adr r3, 8001c18 <EFECTO1+0x1c0>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fb48 	bl	800015c <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f003 fa3c 	bl	8004f50 <sin>
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b55      	ldr	r3, [pc, #340]	@ (8001c34 <EFECTO1+0x1dc>)
 8001ade:	f7fe fb3d 	bl	800015c <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af2:	f7fe fe13 	bl	800071c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	a344      	add	r3, pc, #272	@ (adr r3, 8001c10 <EFECTO1+0x1b8>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fce0 	bl	80004c8 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe ff9c 	bl	8000a4c <__aeabi_d2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b47      	ldr	r3, [pc, #284]	@ (8001c38 <EFECTO1+0x1e0>)
 8001b1a:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - (2.0*PI)/3)+1.0)/2.0));
 8001b1c:	4b44      	ldr	r3, [pc, #272]	@ (8001c30 <EFECTO1+0x1d8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fc79 	bl	8000418 <__aeabi_f2d>
 8001b26:	a33c      	add	r3, pc, #240	@ (adr r3, 8001c18 <EFECTO1+0x1c0>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fb14 	bl	8000158 <__aeabi_dsub>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f003 fa0a 	bl	8004f50 <sin>
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <EFECTO1+0x1dc>)
 8001b42:	f7fe fb0b 	bl	800015c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b56:	f7fe fde1 	bl	800071c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	a32b      	add	r3, pc, #172	@ (adr r3, 8001c10 <EFECTO1+0x1b8>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fcae 	bl	80004c8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff6a 	bl	8000a4c <__aeabi_d2uiz>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <EFECTO1+0x1e0>)
 8001b7e:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e00f      	b.n	8001ba6 <EFECTO1+0x14e>
		Set_LED(&rgbLED,num,colores[0],colores[1],colores[2]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c38 <EFECTO1+0x1e0>)
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <EFECTO1+0x1e0>)
 8001b90:	7858      	ldrb	r0, [r3, #1]
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <EFECTO1+0x1e0>)
 8001b94:	789b      	ldrb	r3, [r3, #2]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4828      	ldr	r0, [pc, #160]	@ (8001c3c <EFECTO1+0x1e4>)
 8001b9c:	f7ff fc2d 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	ddec      	ble.n	8001b86 <EFECTO1+0x12e>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 8001bac:	4823      	ldr	r0, [pc, #140]	@ (8001c3c <EFECTO1+0x1e4>)
 8001bae:	f7ff fc6f 	bl	8001490 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <EFECTO1+0x1d8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc2e 	bl	8000418 <__aeabi_f2d>
 8001bbc:	a318      	add	r3, pc, #96	@ (adr r3, 8001c20 <EFECTO1+0x1c8>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fefd 	bl	80009c0 <__aeabi_dcmple>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <EFECTO1+0x19c>
	{
		N += PI/100; // +0.9GRADOS
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <EFECTO1+0x1d8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc21 	bl	8000418 <__aeabi_f2d>
 8001bd6:	a314      	add	r3, pc, #80	@ (adr r3, 8001c28 <EFECTO1+0x1d0>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fabe 	bl	800015c <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ff50 	bl	8000a8c <__aeabi_d2f>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <EFECTO1+0x1d8>)
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e003      	b.n	8001bfc <EFECTO1+0x1a4>
	}
	else
	{
		N = 0;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <EFECTO1+0x1d8>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f000 fd1b 	bl	8002638 <HAL_Delay>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	406fc000 	.word	0x406fc000
 8001c18:	c985f06f 	.word	0xc985f06f
 8001c1c:	4000c154 	.word	0x4000c154
 8001c20:	2e48e8a7 	.word	0x2e48e8a7
 8001c24:	401921ff 	.word	0x401921ff
 8001c28:	09246bf0 	.word	0x09246bf0
 8001c2c:	3fa015c2 	.word	0x3fa015c2
 8001c30:	200001b8 	.word	0x200001b8
 8001c34:	3ff00000 	.word	0x3ff00000
 8001c38:	200001b4 	.word	0x200001b4
 8001c3c:	200000c0 	.word	0x200000c0

08001c40 <EFECTO2>:
void EFECTO2(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	switch ((uint8_t)N) {
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <EFECTO2+0xdc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f8f2 	bl	8000e34 <__aeabi_f2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d01a      	beq.n	8001c8e <EFECTO2+0x4e>
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	dc22      	bgt.n	8001ca2 <EFECTO2+0x62>
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <EFECTO2+0x26>
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d00a      	beq.n	8001c7a <EFECTO2+0x3a>
			colores[0] = (uint8_t)(0);
			colores[1] = (uint8_t)(0);
			colores[2] = (uint8_t)(255);
			break;
		default:
			break;
 8001c64:	e01d      	b.n	8001ca2 <EFECTO2+0x62>
			colores[0] = (uint8_t)(255);
 8001c66:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <EFECTO2+0xe0>)
 8001c68:	22ff      	movs	r2, #255	@ 0xff
 8001c6a:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <EFECTO2+0xe0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001c72:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <EFECTO2+0xe0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	709a      	strb	r2, [r3, #2]
			break;
 8001c78:	e014      	b.n	8001ca4 <EFECTO2+0x64>
			colores[0] = (uint8_t)(0);
 8001c7a:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <EFECTO2+0xe0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <EFECTO2+0xe0>)
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <EFECTO2+0xe0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	709a      	strb	r2, [r3, #2]
			break;
 8001c8c:	e00a      	b.n	8001ca4 <EFECTO2+0x64>
			colores[0] = (uint8_t)(0);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <EFECTO2+0xe0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <EFECTO2+0xe0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <EFECTO2+0xe0>)
 8001c9c:	22ff      	movs	r2, #255	@ 0xff
 8001c9e:	709a      	strb	r2, [r3, #2]
			break;
 8001ca0:	e000      	b.n	8001ca4 <EFECTO2+0x64>
			break;
 8001ca2:	bf00      	nop
	}

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	e00f      	b.n	8001cca <EFECTO2+0x8a>
		Set_LED(&rgbLED,num,colores[0],colores[1],colores[2]);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	b2d9      	uxtb	r1, r3
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <EFECTO2+0xe0>)
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <EFECTO2+0xe0>)
 8001cb4:	7858      	ldrb	r0, [r3, #1]
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <EFECTO2+0xe0>)
 8001cb8:	789b      	ldrb	r3, [r3, #2]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4819      	ldr	r0, [pc, #100]	@ (8001d24 <EFECTO2+0xe4>)
 8001cc0:	f7ff fb9b 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	ddec      	ble.n	8001caa <EFECTO2+0x6a>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 8001cd0:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <EFECTO2+0xe4>)
 8001cd2:	f7ff fbdd 	bl	8001490 <WS2812_Send>

	if( N < 2)
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <EFECTO2+0xdc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f880 	bl	8000de4 <__aeabi_fcmplt>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <EFECTO2+0xc2>
	{
		N += 1;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <EFECTO2+0xdc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe ff20 	bl	8000b38 <__addsf3>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <EFECTO2+0xdc>)
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e003      	b.n	8001d0a <EFECTO2+0xca>
	}
	else
	{
		N = 0;
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <EFECTO2+0xdc>)
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(750);
 8001d0a:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001d0e:	f000 fc93 	bl	8002638 <HAL_Delay>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001b8 	.word	0x200001b8
 8001d20:	200001b4 	.word	0x200001b4
 8001d24:	200000c0 	.word	0x200000c0

08001d28 <EFECTO3>:
void EFECTO3(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	switch ((uint8_t)N) {
 8001d2e:	4b35      	ldr	r3, [pc, #212]	@ (8001e04 <EFECTO3+0xdc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f87e 	bl	8000e34 <__aeabi_f2uiz>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d01a      	beq.n	8001d76 <EFECTO3+0x4e>
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	dc22      	bgt.n	8001d8a <EFECTO3+0x62>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <EFECTO3+0x26>
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d00a      	beq.n	8001d62 <EFECTO3+0x3a>
			colores[0] = (uint8_t)(0);
			colores[1] = (uint8_t)(255);
			colores[2] = (uint8_t)(255);
			break;
		default:
			break;
 8001d4c:	e01d      	b.n	8001d8a <EFECTO3+0x62>
			colores[0] = (uint8_t)(255);
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <EFECTO3+0xe0>)
 8001d50:	22ff      	movs	r2, #255	@ 0xff
 8001d52:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001d54:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <EFECTO3+0xe0>)
 8001d56:	22ff      	movs	r2, #255	@ 0xff
 8001d58:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(0);
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <EFECTO3+0xe0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	709a      	strb	r2, [r3, #2]
			break;
 8001d60:	e014      	b.n	8001d8c <EFECTO3+0x64>
			colores[0] = (uint8_t)(255);
 8001d62:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <EFECTO3+0xe0>)
 8001d64:	22ff      	movs	r2, #255	@ 0xff
 8001d66:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(0);
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <EFECTO3+0xe0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <EFECTO3+0xe0>)
 8001d70:	22ff      	movs	r2, #255	@ 0xff
 8001d72:	709a      	strb	r2, [r3, #2]
			break;
 8001d74:	e00a      	b.n	8001d8c <EFECTO3+0x64>
			colores[0] = (uint8_t)(0);
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <EFECTO3+0xe0>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
			colores[1] = (uint8_t)(255);
 8001d7c:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <EFECTO3+0xe0>)
 8001d7e:	22ff      	movs	r2, #255	@ 0xff
 8001d80:	705a      	strb	r2, [r3, #1]
			colores[2] = (uint8_t)(255);
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <EFECTO3+0xe0>)
 8001d84:	22ff      	movs	r2, #255	@ 0xff
 8001d86:	709a      	strb	r2, [r3, #2]
			break;
 8001d88:	e000      	b.n	8001d8c <EFECTO3+0x64>
			break;
 8001d8a:	bf00      	nop
	}

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	e00f      	b.n	8001db2 <EFECTO3+0x8a>
		Set_LED(&rgbLED,num,colores[0],colores[1],colores[2]);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	b2d9      	uxtb	r1, r3
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <EFECTO3+0xe0>)
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <EFECTO3+0xe0>)
 8001d9c:	7858      	ldrb	r0, [r3, #1]
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <EFECTO3+0xe0>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	4819      	ldr	r0, [pc, #100]	@ (8001e0c <EFECTO3+0xe4>)
 8001da8:	f7ff fb27 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	ddec      	ble.n	8001d92 <EFECTO3+0x6a>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 8001db8:	4814      	ldr	r0, [pc, #80]	@ (8001e0c <EFECTO3+0xe4>)
 8001dba:	f7ff fb69 	bl	8001490 <WS2812_Send>

	if( N < 2)
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <EFECTO3+0xdc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f80c 	bl	8000de4 <__aeabi_fcmplt>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <EFECTO3+0xc2>
	{
		N++;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <EFECTO3+0xdc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe feac 	bl	8000b38 <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <EFECTO3+0xdc>)
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e003      	b.n	8001df2 <EFECTO3+0xca>
	}
	else
	{
		N = 0;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <EFECTO3+0xdc>)
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(750);
 8001df2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001df6:	f000 fc1f 	bl	8002638 <HAL_Delay>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200001b8 	.word	0x200001b8
 8001e08:	200001b4 	.word	0x200001b4
 8001e0c:	200000c0 	.word	0x200000c0

08001e10 <EFECTO4>:
void EFECTO4(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N           )+1.0)/2.0));
 8001e16:	4b72      	ldr	r3, [pc, #456]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fafc 	bl	8000418 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f003 f892 	bl	8004f50 <sin>
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <EFECTO4+0x1d4>)
 8001e32:	f7fe f993 	bl	800015c <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e46:	f7fe fc69 	bl	800071c <__aeabi_ddiv>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a35b      	add	r3, pc, #364	@ (adr r3, 8001fc0 <EFECTO4+0x1b0>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fb36 	bl	80004c8 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fdf2 	bl	8000a4c <__aeabi_d2uiz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001e6e:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N + (2.0*PI)/3)+1.0)/4.0));
 8001e70:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe facf 	bl	8000418 <__aeabi_f2d>
 8001e7a:	a353      	add	r3, pc, #332	@ (adr r3, 8001fc8 <EFECTO4+0x1b8>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe f96c 	bl	800015c <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f003 f860 	bl	8004f50 <sin>
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <EFECTO4+0x1d4>)
 8001e96:	f7fe f961 	bl	800015c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <EFECTO4+0x1dc>)
 8001ea8:	f7fe fc38 	bl	800071c <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	a342      	add	r3, pc, #264	@ (adr r3, 8001fc0 <EFECTO4+0x1b0>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe fb05 	bl	80004c8 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fdc1 	bl	8000a4c <__aeabi_d2uiz>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001ed0:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - (2.0*PI)/3)+1.0)/16.0));
 8001ed2:	4b43      	ldr	r3, [pc, #268]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fa9e 	bl	8000418 <__aeabi_f2d>
 8001edc:	a33a      	add	r3, pc, #232	@ (adr r3, 8001fc8 <EFECTO4+0x1b8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe f939 	bl	8000158 <__aeabi_dsub>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f003 f82f 	bl	8004f50 <sin>
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <EFECTO4+0x1d4>)
 8001ef8:	f7fe f930 	bl	800015c <__adddf3>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <EFECTO4+0x1e0>)
 8001f0a:	f7fe fc07 	bl	800071c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	a32a      	add	r3, pc, #168	@ (adr r3, 8001fc0 <EFECTO4+0x1b0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fad4 	bl	80004c8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fd90 	bl	8000a4c <__aeabi_d2uiz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001f32:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	e00f      	b.n	8001f5a <EFECTO4+0x14a>
		Set_LED(&rgbLED,num,colores[0],colores[1],colores[2]);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001f44:	7858      	ldrb	r0, [r3, #1]
 8001f46:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <EFECTO4+0x1d8>)
 8001f48:	789b      	ldrb	r3, [r3, #2]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4829      	ldr	r0, [pc, #164]	@ (8001ff4 <EFECTO4+0x1e4>)
 8001f50:	f7ff fa53 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	ddec      	ble.n	8001f3a <EFECTO4+0x12a>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 8001f60:	4824      	ldr	r0, [pc, #144]	@ (8001ff4 <EFECTO4+0x1e4>)
 8001f62:	f7ff fa95 	bl	8001490 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fa54 	bl	8000418 <__aeabi_f2d>
 8001f70:	a317      	add	r3, pc, #92	@ (adr r3, 8001fd0 <EFECTO4+0x1c0>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fd23 	bl	80009c0 <__aeabi_dcmple>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <EFECTO4+0x198>
	{
		N += PI/100; // +0.9GRADOS
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa47 	bl	8000418 <__aeabi_f2d>
 8001f8a:	a313      	add	r3, pc, #76	@ (adr r3, 8001fd8 <EFECTO4+0x1c8>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe f8e4 	bl	800015c <__adddf3>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fd76 	bl	8000a8c <__aeabi_d2f>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e003      	b.n	8001fb0 <EFECTO4+0x1a0>
	}
	else
	{
		N = 0;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <EFECTO4+0x1d0>)
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 8001fb0:	200f      	movs	r0, #15
 8001fb2:	f000 fb41 	bl	8002638 <HAL_Delay>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	406fc000 	.word	0x406fc000
 8001fc8:	c985f06f 	.word	0xc985f06f
 8001fcc:	4000c154 	.word	0x4000c154
 8001fd0:	2e48e8a7 	.word	0x2e48e8a7
 8001fd4:	401921ff 	.word	0x401921ff
 8001fd8:	09246bf0 	.word	0x09246bf0
 8001fdc:	3fa015c2 	.word	0x3fa015c2
 8001fe0:	200001b8 	.word	0x200001b8
 8001fe4:	3ff00000 	.word	0x3ff00000
 8001fe8:	200001b4 	.word	0x200001b4
 8001fec:	40100000 	.word	0x40100000
 8001ff0:	40300000 	.word	0x40300000
 8001ff4:	200000c0 	.word	0x200000c0

08001ff8 <EFECTO5>:
void EFECTO5(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af02      	add	r7, sp, #8
	//Calculamos los colores para dar efecto
	colores[0] = (uint8_t)(254.0*((sin(N + PI/2)+1.0)/2.0));
 8001ffe:	4b74      	ldr	r3, [pc, #464]	@ (80021d0 <EFECTO5+0x1d8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa08 	bl	8000418 <__aeabi_f2d>
 8002008:	a369      	add	r3, pc, #420	@ (adr r3, 80021b0 <EFECTO5+0x1b8>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe f8a5 	bl	800015c <__adddf3>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f002 ff99 	bl	8004f50 <sin>
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b6c      	ldr	r3, [pc, #432]	@ (80021d4 <EFECTO5+0x1dc>)
 8002024:	f7fe f89a 	bl	800015c <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002038:	f7fe fb70 	bl	800071c <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	a35c      	add	r3, pc, #368	@ (adr r3, 80021b8 <EFECTO5+0x1c0>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fa3d 	bl	80004c8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fcf9 	bl	8000a4c <__aeabi_d2uiz>
 800205a:	4603      	mov	r3, r0
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b5e      	ldr	r3, [pc, #376]	@ (80021d8 <EFECTO5+0x1e0>)
 8002060:	701a      	strb	r2, [r3, #0]
	colores[1] = (uint8_t)(254.0*((sin(N)       +1.0)/2.0));
 8002062:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <EFECTO5+0x1d8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9d6 	bl	8000418 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f002 ff6c 	bl	8004f50 <sin>
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <EFECTO5+0x1dc>)
 800207e:	f7fe f86d 	bl	800015c <__adddf3>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002092:	f7fe fb43 	bl	800071c <__aeabi_ddiv>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	a346      	add	r3, pc, #280	@ (adr r3, 80021b8 <EFECTO5+0x1c0>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fa10 	bl	80004c8 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fccc 	bl	8000a4c <__aeabi_d2uiz>
 80020b4:	4603      	mov	r3, r0
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <EFECTO5+0x1e0>)
 80020ba:	705a      	strb	r2, [r3, #1]
	colores[2] = (uint8_t)(254.0*((sin(N - PI/2)+1.0)/2.0));
 80020bc:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <EFECTO5+0x1d8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9a9 	bl	8000418 <__aeabi_f2d>
 80020c6:	a33a      	add	r3, pc, #232	@ (adr r3, 80021b0 <EFECTO5+0x1b8>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe f844 	bl	8000158 <__aeabi_dsub>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f002 ff3a 	bl	8004f50 <sin>
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <EFECTO5+0x1dc>)
 80020e2:	f7fe f83b 	bl	800015c <__adddf3>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020f6:	f7fe fb11 	bl	800071c <__aeabi_ddiv>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	a32d      	add	r3, pc, #180	@ (adr r3, 80021b8 <EFECTO5+0x1c0>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe f9de 	bl	80004c8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fc9a 	bl	8000a4c <__aeabi_d2uiz>
 8002118:	4603      	mov	r3, r0
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <EFECTO5+0x1e0>)
 800211e:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++) {
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	e00f      	b.n	8002146 <EFECTO5+0x14e>
		Set_LED(&rgbLED,num,colores[0],colores[1],colores[2]);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	b2d9      	uxtb	r1, r3
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <EFECTO5+0x1e0>)
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <EFECTO5+0x1e0>)
 8002130:	7858      	ldrb	r0, [r3, #1]
 8002132:	4b29      	ldr	r3, [pc, #164]	@ (80021d8 <EFECTO5+0x1e0>)
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4603      	mov	r3, r0
 800213a:	4828      	ldr	r0, [pc, #160]	@ (80021dc <EFECTO5+0x1e4>)
 800213c:	f7ff f95d 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++) {
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	ddec      	ble.n	8002126 <EFECTO5+0x12e>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <EFECTO5+0x1e4>)
 800214e:	f7ff f99f 	bl	8001490 <WS2812_Send>

	if( N <= (2.0*PI)) //Mayor a 360grados
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <EFECTO5+0x1d8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f95e 	bl	8000418 <__aeabi_f2d>
 800215c:	a318      	add	r3, pc, #96	@ (adr r3, 80021c0 <EFECTO5+0x1c8>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fc2d 	bl	80009c0 <__aeabi_dcmple>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <EFECTO5+0x19c>
	{
		N += PI/100; // +0.9GRADOS
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <EFECTO5+0x1d8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f951 	bl	8000418 <__aeabi_f2d>
 8002176:	a314      	add	r3, pc, #80	@ (adr r3, 80021c8 <EFECTO5+0x1d0>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fd ffee 	bl	800015c <__adddf3>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f7fe fc80 	bl	8000a8c <__aeabi_d2f>
 800218c:	4603      	mov	r3, r0
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <EFECTO5+0x1d8>)
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e003      	b.n	800219c <EFECTO5+0x1a4>
	}
	else
	{
		N = 0;
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <EFECTO5+0x1d8>)
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(15);
 800219c:	200f      	movs	r0, #15
 800219e:	f000 fa4b 	bl	8002638 <HAL_Delay>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	2e48e8a7 	.word	0x2e48e8a7
 80021b4:	3ff921ff 	.word	0x3ff921ff
 80021b8:	00000000 	.word	0x00000000
 80021bc:	406fc000 	.word	0x406fc000
 80021c0:	2e48e8a7 	.word	0x2e48e8a7
 80021c4:	401921ff 	.word	0x401921ff
 80021c8:	09246bf0 	.word	0x09246bf0
 80021cc:	3fa015c2 	.word	0x3fa015c2
 80021d0:	200001b8 	.word	0x200001b8
 80021d4:	3ff00000 	.word	0x3ff00000
 80021d8:	200001b4 	.word	0x200001b4
 80021dc:	200000c0 	.word	0x200000c0

080021e0 <LUZ_BLANCA>:

/*
 * EFECTO DE LUZ BLANCA
 */
void LUZ_BLANCA(uint8_t dim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
	 * hot                 cold
	 * 254 <-------------> 0
	 *
	 */
	//Calculamos los colores para dar efecto
	colores[0] = dim;//R
 80021ea:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <LUZ_BLANCA+0x58>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	7013      	strb	r3, [r2, #0]
	colores[2] = 254-dim; //G
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80021f6:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80021fa:	33fe      	adds	r3, #254	@ 0xfe
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <LUZ_BLANCA+0x58>)
 8002200:	709a      	strb	r2, [r3, #2]

	//Actualizamos los valores
	for (int num=0;num<MAX_LED;num++)
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e00d      	b.n	8002224 <LUZ_BLANCA+0x44>
	{
		Set_LED(&rgbLED,num,colores[0],110,colores[2]);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	b2d9      	uxtb	r1, r3
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <LUZ_BLANCA+0x58>)
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <LUZ_BLANCA+0x58>)
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	236e      	movs	r3, #110	@ 0x6e
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <LUZ_BLANCA+0x5c>)
 800221a:	f7ff f8ee 	bl	80013fa <Set_LED>
	for (int num=0;num<MAX_LED;num++)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	ddee      	ble.n	8002208 <LUZ_BLANCA+0x28>
	}

	//Mandamos los valores
	WS2812_Send(&rgbLED);
 800222a:	4804      	ldr	r0, [pc, #16]	@ (800223c <LUZ_BLANCA+0x5c>)
 800222c:	f7ff f930 	bl	8001490 <WS2812_Send>

}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200001b4 	.word	0x200001b4
 800223c:	200000c0 	.word	0x200000c0

08002240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <Error_Handler+0x8>

0800224c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_MspInit+0x5c>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4a14      	ldr	r2, [pc, #80]	@ (80022a8 <HAL_MspInit+0x5c>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6193      	str	r3, [r2, #24]
 800225e:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_MspInit+0x5c>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_MspInit+0x5c>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a0e      	ldr	r2, [pc, #56]	@ (80022a8 <HAL_MspInit+0x5c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_MspInit+0x5c>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_MspInit+0x60>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <HAL_MspInit+0x60>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000

080022b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_SPI_MspInit+0x8c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d131      	bne.n	8002334 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022da:	61d3      	str	r3, [r2, #28]
 80022dc:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_SPI_MspInit+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002300:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	480b      	ldr	r0, [pc, #44]	@ (8002344 <HAL_SPI_MspInit+0x94>)
 8002316:	f000 fcaf 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800231a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800231e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <HAL_SPI_MspInit+0x94>)
 8002330:	f000 fca2 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40003800 	.word	0x40003800
 8002340:	40021000 	.word	0x40021000
 8002344:	40010c00 	.word	0x40010c00

08002348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002358:	d139      	bne.n	80023ce <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800235a:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	61d3      	str	r3, [r2, #28]
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <HAL_TIM_PWM_MspInit+0x90>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 8002374:	4a1a      	ldr	r2, [pc, #104]	@ (80023e0 <HAL_TIM_PWM_MspInit+0x98>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002378:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 800237a:	2210      	movs	r2, #16
 800237c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002384:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 8002386:	2280      	movs	r2, #128	@ 0x80
 8002388:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 800238c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002390:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 8002394:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002398:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800239a:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80023a6:	480d      	ldr	r0, [pc, #52]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023a8:	f000 fa78 	bl	800289c <HAL_DMA_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 80023b2:	f7ff ff45 	bl	8002240 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80023bc:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023c8:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_TIM_PWM_MspInit+0x94>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	20000168 	.word	0x20000168
 80023e0:	40020080 	.word	0x40020080

080023e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002402:	d12a      	bne.n	800245a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <HAL_TIM_MspPostInit+0x80>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <HAL_TIM_MspPostInit+0x80>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <HAL_TIM_MspPostInit+0x80>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800241c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4619      	mov	r1, r3
 8002430:	480d      	ldr	r0, [pc, #52]	@ (8002468 <HAL_TIM_MspPostInit+0x84>)
 8002432:	f000 fc21 	bl	8002c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <HAL_TIM_MspPostInit+0x88>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	4a05      	ldr	r2, [pc, #20]	@ (800246c <HAL_TIM_MspPostInit+0x88>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800245a:	bf00      	nop
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40010c00 	.word	0x40010c00
 800246c:	40010000 	.word	0x40010000

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <NMI_Handler+0x4>

08002478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <HardFault_Handler+0x4>

08002480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <MemManage_Handler+0x4>

08002488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <UsageFault_Handler+0x4>

08002498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c0:	f000 f89e 	bl	8002600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIMmenos_Pin);
 80024cc:	2008      	movs	r0, #8
 80024ce:	f000 fd89 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ONOFF_Pin);
 80024da:	2010      	movs	r0, #16
 80024dc:	f000 fd82 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <DMA1_Channel7_IRQHandler+0x10>)
 80024ea:	f000 fa91 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000168 	.word	0x20000168

080024f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 80024fc:	2020      	movs	r0, #32
 80024fe:	f000 fd71 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EFECTO_Pin);
 8002502:	2040      	movs	r0, #64	@ 0x40
 8002504:	f000 fd6e 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIMmas_Pin);
 8002508:	2080      	movs	r0, #128	@ 0x80
 800250a:	f000 fd6b 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 800250e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002512:	f000 fd67 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}

0800251a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
	...

08002528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002528:	f7ff fff7 	bl	800251a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800252c:	480b      	ldr	r0, [pc, #44]	@ (800255c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800252e:	490c      	ldr	r1, [pc, #48]	@ (8002560 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002530:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002544:	4c09      	ldr	r4, [pc, #36]	@ (800256c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002552:	f002 fcd9 	bl	8004f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002556:	f7ff f80f 	bl	8001578 <main>
  bx lr
 800255a:	4770      	bx	lr
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002564:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 8002568:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800256c:	200001c0 	.word	0x200001c0

08002570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC1_2_IRQHandler>
	...

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x28>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x28>)
 800257e:	f043 0310 	orr.w	r3, r3, #16
 8002582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 f947 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	200f      	movs	r0, #15
 800258c:	f000 f808 	bl	80025a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fe5c 	bl	800224c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40022000 	.word	0x40022000

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x54>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_InitTick+0x58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f95f 	bl	8002882 <HAL_SYSTICK_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00e      	b.n	80025ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d80a      	bhi.n	80025ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 f927 	bl	800282e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_InitTick+0x5c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000004 	.word	0x20000004
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_IncTick+0x1c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_IncTick+0x20>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a03      	ldr	r2, [pc, #12]	@ (8002620 <HAL_IncTick+0x20>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	2000000c 	.word	0x2000000c
 8002620:	200001bc 	.word	0x200001bc

08002624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;
 8002628:	4b02      	ldr	r3, [pc, #8]	@ (8002634 <HAL_GetTick+0x10>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	200001bc 	.word	0x200001bc

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff fff0 	bl	8002624 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffe0 	bl	8002624 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4906      	ldr	r1, [pc, #24]	@ (8002718 <__NVIC_EnableIRQ+0x34>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	@ (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	@ (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	@ 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff90 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff2d 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff42 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff90 	bl	8002770 <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5f 	bl	800271c <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff35 	bl	80026e4 <__NVIC_EnableIRQ>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffa2 	bl	80027d4 <SysTick_Config>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e043      	b.n	800293a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b22      	ldr	r3, [pc, #136]	@ (8002944 <HAL_DMA_Init+0xa8>)
 80028ba:	4413      	add	r3, r2
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_DMA_Init+0xac>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	009a      	lsls	r2, r3, #2
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <HAL_DMA_Init+0xb0>)
 80028ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80028ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	bffdfff8 	.word	0xbffdfff8
 8002948:	cccccccd 	.word	0xcccccccd
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_DMA_Start_IT+0x20>
 800296c:	2302      	movs	r3, #2
 800296e:	e04b      	b.n	8002a08 <HAL_DMA_Start_IT+0xb8>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13a      	bne.n	80029fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f937 	bl	8002c1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 020e 	orr.w	r2, r2, #14
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e00f      	b.n	80029e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0204 	bic.w	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020a 	orr.w	r2, r2, #10
 80029e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d04f      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xc8>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a66      	ldr	r2, [pc, #408]	@ (8002c00 <HAL_DMA_IRQHandler+0x1f0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d029      	beq.n	8002abe <HAL_DMA_IRQHandler+0xae>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a65      	ldr	r2, [pc, #404]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_IRQHandler+0xaa>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a63      	ldr	r2, [pc, #396]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xa4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a62      	ldr	r2, [pc, #392]	@ (8002c0c <HAL_DMA_IRQHandler+0x1fc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d012      	beq.n	8002aae <HAL_DMA_IRQHandler+0x9e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a60      	ldr	r2, [pc, #384]	@ (8002c10 <HAL_DMA_IRQHandler+0x200>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x98>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a5f      	ldr	r2, [pc, #380]	@ (8002c14 <HAL_DMA_IRQHandler+0x204>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x92>
 8002a9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aa0:	e00e      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002aa2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002aa6:	e00b      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002aa8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002aac:	e008      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002aae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ab2:	e005      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab8:	e002      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002aba:	2340      	movs	r3, #64	@ 0x40
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xb0>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	4a55      	ldr	r2, [pc, #340]	@ (8002c18 <HAL_DMA_IRQHandler+0x208>)
 8002ac2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8094 	beq.w	8002bf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ad6:	e08e      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	2202      	movs	r2, #2
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d056      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x186>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d051      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 020a 	bic.w	r2, r2, #10
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a38      	ldr	r2, [pc, #224]	@ (8002c00 <HAL_DMA_IRQHandler+0x1f0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d029      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x166>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a37      	ldr	r2, [pc, #220]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x162>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a35      	ldr	r2, [pc, #212]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x15c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <HAL_DMA_IRQHandler+0x1fc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d012      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x156>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a32      	ldr	r2, [pc, #200]	@ (8002c10 <HAL_DMA_IRQHandler+0x200>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x150>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a31      	ldr	r2, [pc, #196]	@ (8002c14 <HAL_DMA_IRQHandler+0x204>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x14a>
 8002b54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b58:	e00e      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b5e:	e00b      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b64:	e008      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b6a:	e005      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b70:	e002      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b72:	2320      	movs	r3, #32
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_IRQHandler+0x168>
 8002b76:	2302      	movs	r3, #2
 8002b78:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <HAL_DMA_IRQHandler+0x208>)
 8002b7a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d034      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b94:	e02f      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x1e8>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 020e 	bic.w	r2, r2, #14
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f202 	lsl.w	r2, r1, r2
 8002bce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
    }
  }
  return;
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
}
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40020008 	.word	0x40020008
 8002c04:	4002001c 	.word	0x4002001c
 8002c08:	40020030 	.word	0x40020030
 8002c0c:	40020044 	.word	0x40020044
 8002c10:	40020058 	.word	0x40020058
 8002c14:	4002006c 	.word	0x4002006c
 8002c18:	40020000 	.word	0x40020000

08002c1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2101      	movs	r1, #1
 8002c34:	fa01 f202 	lsl.w	r2, r1, r2
 8002c38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d108      	bne.n	8002c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c5a:	e007      	b.n	8002c6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	60da      	str	r2, [r3, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	@ 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e169      	b.n	8002f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8158 	bne.w	8002f5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a9a      	ldr	r2, [pc, #616]	@ (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a98      	ldr	r2, [pc, #608]	@ (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d875      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cba:	4a98      	ldr	r2, [pc, #608]	@ (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d058      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a96      	ldr	r2, [pc, #600]	@ (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d86f      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a96      	ldr	r2, [pc, #600]	@ (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d052      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a94      	ldr	r2, [pc, #592]	@ (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d869      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a94      	ldr	r2, [pc, #592]	@ (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04c      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a92      	ldr	r2, [pc, #584]	@ (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d863      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cde:	4a92      	ldr	r2, [pc, #584]	@ (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d046      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a90      	ldr	r2, [pc, #576]	@ (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d85d      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d82a      	bhi.n	8002d44 <HAL_GPIO_Init+0xcc>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d859      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <HAL_GPIO_Init+0x80>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d73 	.word	0x08002d73
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d5f 	.word	0x08002d5f
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da7 	.word	0x08002da7
 8002d0c:	08002da7 	.word	0x08002da7
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002da7 	.word	0x08002da7
 8002d18:	08002da7 	.word	0x08002da7
 8002d1c:	08002da7 	.word	0x08002da7
 8002d20:	08002da7 	.word	0x08002da7
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002da7 	.word	0x08002da7
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002da7 	.word	0x08002da7
 8002d34:	08002da7 	.word	0x08002da7
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	4a79      	ldr	r2, [pc, #484]	@ (8002f2c <HAL_GPIO_Init+0x2b4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e029      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e024      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e01f      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e01a      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e013      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	611a      	str	r2, [r3, #16]
          break;
 8002d92:	e009      	b.n	8002da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	615a      	str	r2, [r3, #20]
          break;
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          break;
 8002da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	@ 0xff
 8002dac:	d801      	bhi.n	8002db2 <HAL_GPIO_Init+0x13a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_Init+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	@ 0xff
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_GPIO_Init+0x14c>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x152>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80b1 	beq.w	8002f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b4a      	ldr	r3, [pc, #296]	@ (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e10:	4a48      	ldr	r2, [pc, #288]	@ (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a40      	ldr	r2, [pc, #256]	@ (8002f38 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_GPIO_Init+0x1ec>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f3c <HAL_GPIO_Init+0x2c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00d      	beq.n	8002e60 <HAL_GPIO_Init+0x1e8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3e      	ldr	r2, [pc, #248]	@ (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <HAL_GPIO_Init+0x1e4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f44 <HAL_GPIO_Init+0x2cc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_GPIO_Init+0x1e0>
 8002e54:	2303      	movs	r3, #3
 8002e56:	e006      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_Init+0x1ee>
 8002e64:	2300      	movs	r3, #0
 8002e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e76:	492f      	ldr	r1, [pc, #188]	@ (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e90:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	492c      	ldr	r1, [pc, #176]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4928      	ldr	r1, [pc, #160]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	4922      	ldr	r1, [pc, #136]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	491e      	ldr	r1, [pc, #120]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4918      	ldr	r1, [pc, #96]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	4914      	ldr	r1, [pc, #80]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d021      	beq.n	8002f4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e021      	b.n	8002f5a <HAL_GPIO_Init+0x2e2>
 8002f16:	bf00      	nop
 8002f18:	10320000 	.word	0x10320000
 8002f1c:	10310000 	.word	0x10310000
 8002f20:	10220000 	.word	0x10220000
 8002f24:	10210000 	.word	0x10210000
 8002f28:	10120000 	.word	0x10120000
 8002f2c:	10110000 	.word	0x10110000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010800 	.word	0x40010800
 8002f3c:	40010c00 	.word	0x40010c00
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	@ (8002f7c <HAL_GPIO_Init+0x304>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae8e 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	@ 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	43d9      	mvns	r1, r3
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fc6a 	bl	80018dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e272      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	4b92      	ldr	r3, [pc, #584]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4b8f      	ldr	r3, [pc, #572]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 800304c:	4b8c      	ldr	r3, [pc, #560]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b89      	ldr	r3, [pc, #548]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e24c      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b80      	ldr	r3, [pc, #512]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7f      	ldr	r2, [pc, #508]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b7b      	ldr	r3, [pc, #492]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b78      	ldr	r3, [pc, #480]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b72      	ldr	r3, [pc, #456]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b68      	ldr	r3, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff fa98 	bl	8002624 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7ff fa94 	bl	8002624 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e200      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5d      	ldr	r3, [pc, #372]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff fa84 	bl	8002624 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7ff fa80 	bl	8002624 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1ec      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314e:	4b4c      	ldr	r3, [pc, #304]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800315a:	4b49      	ldr	r3, [pc, #292]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
 8003166:	4b46      	ldr	r3, [pc, #280]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1c0      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4939      	ldr	r1, [pc, #228]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7ff fa39 	bl	8002624 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7ff fa35 	bl	8002624 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4927      	ldr	r1, [pc, #156]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7ff fa18 	bl	8002624 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7ff fa14 	bl	8002624 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e180      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7ff f9f8 	bl	8002624 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7ff f9f4 	bl	8002624 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e160      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0d      	ldr	r3, [pc, #52]	@ (8003280 <HAL_RCC_OscConfig+0x26c>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 fa9c 	bl	8003794 <RCC_Delay>
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <HAL_RCC_OscConfig+0x274>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7ff f9de 	bl	8002624 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	e00f      	b.n	800328c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7ff f9da 	bl	8002624 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e146      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b92      	ldr	r3, [pc, #584]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e9      	bne.n	800326c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b8b      	ldr	r3, [pc, #556]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a87      	ldr	r2, [pc, #540]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b82      	ldr	r3, [pc, #520]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b7f      	ldr	r3, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7e      	ldr	r2, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7ff f99b 	bl	8002624 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7ff f997 	bl	8002624 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	@ 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e103      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b75      	ldr	r3, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x4c8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 8003318:	4b6f      	ldr	r3, [pc, #444]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a6e      	ldr	r2, [pc, #440]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e02d      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x334>
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a69      	ldr	r2, [pc, #420]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	4b67      	ldr	r3, [pc, #412]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a66      	ldr	r2, [pc, #408]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x356>
 8003350:	4b61      	ldr	r3, [pc, #388]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a60      	ldr	r2, [pc, #384]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	4b5e      	ldr	r3, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 800336a:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a5a      	ldr	r2, [pc, #360]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a57      	ldr	r2, [pc, #348]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7ff f94b 	bl	8002624 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7ff f947 	bl	8002624 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0b1      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7ff f935 	bl	8002624 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7ff f931 	bl	8002624 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e09b      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b40      	ldr	r3, [pc, #256]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b3c      	ldr	r3, [pc, #240]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8087 	beq.w	800350a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d061      	beq.n	80034cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d146      	bne.n	800349e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b33      	ldr	r3, [pc, #204]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7ff f905 	bl	8002624 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7ff f901 	bl	8002624 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e06d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	4b29      	ldr	r3, [pc, #164]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003446:	4b24      	ldr	r3, [pc, #144]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4921      	ldr	r1, [pc, #132]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a19      	ldr	r1, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	491b      	ldr	r1, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7ff f8d5 	bl	8002624 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7ff f8d1 	bl	8002624 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03d      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
 800349c:	e035      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_OscConfig+0x4cc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7ff f8be 	bl	8002624 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7ff f8ba 	bl	8002624 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e026      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
 80034ca:	e01e      	b.n	800350a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e019      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x500>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d0      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4965      	ldr	r1, [pc, #404]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a58      	ldr	r2, [pc, #352]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800357e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d040      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e073      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06b      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4936      	ldr	r1, [pc, #216]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7ff f80c 	bl	8002624 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7ff f808 	bl	8002624 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e053      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d210      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 0207 	bic.w	r2, r3, #7
 800364e:	4922      	ldr	r1, [pc, #136]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1cc>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1d0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe ff6a 	bl	80025a0 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40022000 	.word	0x40022000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08005f18 	.word	0x08005f18
 80036e4:	20000004 	.word	0x20000004
 80036e8:	20000008 	.word	0x20000008

080036ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x30>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x36>
 800371a:	e027      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	613b      	str	r3, [r7, #16]
      break;
 8003720:	e027      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800373a:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x94>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0c5b      	lsrs	r3, r3, #17
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	613b      	str	r3, [r7, #16]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x98>)
 800376e:	613b      	str	r3, [r7, #16]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	693b      	ldr	r3, [r7, #16]
}
 8003774:	4618      	mov	r0, r3
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	007a1200 	.word	0x007a1200
 8003788:	08005f28 	.word	0x08005f28
 800378c:	08005f38 	.word	0x08005f38
 8003790:	003d0900 	.word	0x003d0900

08003794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800379c:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <RCC_Delay+0x34>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <RCC_Delay+0x38>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b0:	bf00      	nop
  }
  while (Delay --);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <RCC_Delay+0x1c>
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000004 	.word	0x20000004
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e076      	b.n	80038d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f2:	d009      	beq.n	8003808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	e005      	b.n	8003808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe fd44 	bl	80022b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	0c1a      	lsrs	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f002 0204 	and.w	r2, r2, #4
 80038ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Transmit+0x22>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e12d      	b.n	8003b56 <HAL_SPI_Transmit+0x27e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fe fe8f 	bl	8002624 <HAL_GetTick>
 8003906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003918:	2302      	movs	r3, #2
 800391a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800391c:	e116      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0x52>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800392e:	e10d      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003976:	d10f      	bne.n	8003998 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d007      	beq.n	80039b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039be:	d14f      	bne.n	8003a60 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0xf6>
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d142      	bne.n	8003a54 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f2:	e02f      	b.n	8003a54 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d112      	bne.n	8003a28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a26:	e015      	b.n	8003a54 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a28:	f7fe fdfc 	bl	8002624 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d803      	bhi.n	8003a40 <HAL_SPI_Transmit+0x168>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Transmit+0x16e>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003a52:	e07b      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ca      	bne.n	80039f4 <HAL_SPI_Transmit+0x11c>
 8003a5e:	e050      	b.n	8003b02 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_SPI_Transmit+0x196>
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d144      	bne.n	8003af8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a94:	e030      	b.n	8003af8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d113      	bne.n	8003acc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003aca:	e015      	b.n	8003af8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003acc:	f7fe fdaa 	bl	8002624 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d803      	bhi.n	8003ae4 <HAL_SPI_Transmit+0x20c>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d102      	bne.n	8003aea <HAL_SPI_Transmit+0x212>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003af6:	e029      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1c9      	bne.n	8003a96 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	6839      	ldr	r1, [r7, #0]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fbcc 	bl	80042a4 <SPI_EndRxTxTransaction>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e003      	b.n	8003b4c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	603b      	str	r3, [r7, #0]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d002      	beq.n	8003b84 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b82:	e0fb      	b.n	8003d7c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b8c:	d112      	bne.n	8003bb4 <HAL_SPI_Receive+0x56>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10e      	bne.n	8003bb4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f8ef 	bl	8003d8e <HAL_SPI_TransmitReceive>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	e0e8      	b.n	8003d86 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Receive+0x64>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0e1      	b.n	8003d86 <HAL_SPI_Receive+0x228>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bca:	f7fe fd2b 	bl	8002624 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Receive+0x7e>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003be0:	e0cc      	b.n	8003d7c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2204      	movs	r2, #4
 8003be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	88fa      	ldrh	r2, [r7, #6]
 8003bfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d10f      	bne.n	8003c4a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d007      	beq.n	8003c68 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d16a      	bne.n	8003d46 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c70:	e032      	b.n	8003cd8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d115      	bne.n	8003cac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f103 020c 	add.w	r2, r3, #12
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003caa:	e015      	b.n	8003cd8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cac:	f7fe fcba 	bl	8002624 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d803      	bhi.n	8003cc4 <HAL_SPI_Receive+0x166>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Receive+0x16c>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003cd6:	e051      	b.n	8003d7c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1c7      	bne.n	8003c72 <HAL_SPI_Receive+0x114>
 8003ce2:	e035      	b.n	8003d50 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d113      	bne.n	8003d1a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d18:	e015      	b.n	8003d46 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1a:	f7fe fc83 	bl	8002624 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d803      	bhi.n	8003d32 <HAL_SPI_Receive+0x1d4>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_Receive+0x1da>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003d44:	e01a      	b.n	8003d7c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1c9      	bne.n	8003ce4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fa53 	bl	8004200 <SPI_EndRxTransaction>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
 8003d72:	e003      	b.n	8003d7c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b08c      	sub	sp, #48	@ 0x30
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x26>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e198      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x358>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dbc:	f7fe fc32 	bl	8002624 <HAL_GetTick>
 8003dc0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d00f      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x70>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de4:	d107      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x68>
 8003dee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d003      	beq.n	8003dfe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003dfc:	e16d      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x82>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x82>
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003e16:	e160      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d003      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2205      	movs	r2, #5
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	887a      	ldrh	r2, [r7, #2]
 8003e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	887a      	ldrh	r2, [r7, #2]
 8003e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d007      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e88:	d17c      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x10a>
 8003e92:	8b7b      	ldrh	r3, [r7, #26]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d16a      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebc:	e057      	b.n	8003f6e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11b      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x176>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d016      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0x176>
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d113      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee0:	881a      	ldrh	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	1c9a      	adds	r2, r3, #2
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d119      	bne.n	8003f46 <HAL_SPI_TransmitReceive+0x1b8>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d014      	beq.n	8003f46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f26:	b292      	uxth	r2, r2
 8003f28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f42:	2301      	movs	r3, #1
 8003f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f46:	f7fe fb6d 	bl	8002624 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d80b      	bhi.n	8003f6e <HAL_SPI_TransmitReceive+0x1e0>
 8003f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d007      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003f6c:	e0b5      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1a2      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x130>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d19d      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x130>
 8003f82:	e080      	b.n	8004086 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_TransmitReceive+0x204>
 8003f8c:	8b7b      	ldrh	r3, [r7, #26]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d16f      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb8:	e05b      	b.n	8004072 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d11c      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x274>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_SPI_TransmitReceive+0x274>
 8003fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d114      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	7812      	ldrb	r2, [r2, #0]
 8003fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d119      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x2b6>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d014      	beq.n	8004044 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004040:	2301      	movs	r3, #1
 8004042:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004044:	f7fe faee 	bl	8002624 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004050:	429a      	cmp	r2, r3
 8004052:	d803      	bhi.n	800405c <HAL_SPI_TransmitReceive+0x2ce>
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d102      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x2d4>
 800405c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004070:	e033      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d19e      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x22c>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d199      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004088:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f90a 	bl	80042a4 <SPI_EndRxTxTransaction>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80040a2:	e01a      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d0:	e003      	b.n	80040da <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80040e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3730      	adds	r7, #48	@ 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004100:	f7fe fa90 	bl	8002624 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4413      	add	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004110:	f7fe fa88 	bl	8002624 <HAL_GetTick>
 8004114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004116:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	015b      	lsls	r3, r3, #5
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004126:	e054      	b.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d050      	beq.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004130:	f7fe fa78 	bl	8002624 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d902      	bls.n	8004146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d13d      	bne.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800415e:	d111      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004168:	d004      	beq.n	8004174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d107      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418c:	d10f      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e017      	b.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d19b      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000004 	.word	0x20000004

08004200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004214:	d111      	bne.n	800423a <SPI_EndRxTransaction+0x3a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800421e:	d004      	beq.n	800422a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d107      	bne.n	800423a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004238:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004242:	d117      	bne.n	8004274 <SPI_EndRxTransaction+0x74>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424c:	d112      	bne.n	8004274 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2200      	movs	r2, #0
 8004256:	2101      	movs	r1, #1
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff ff49 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01a      	beq.n	800429a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f043 0220 	orr.w	r2, r3, #32
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e013      	b.n	800429c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	2180      	movs	r1, #128	@ 0x80
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff ff36 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e000      	b.n	800429c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	@ 0x80
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff ff18 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e000      	b.n	80042d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e041      	b.n	8004376 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe f81e 	bl	8002348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fb7e 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e022      	b.n	80043f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d109      	bne.n	80043c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e015      	b.n	80043f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d109      	bne.n	80043e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e008      	b.n	80043f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
 80043f8:	e153      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_TIM_PWM_Start_DMA+0x94>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e022      	b.n	800445a <HAL_TIM_PWM_Start_DMA+0xda>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d109      	bne.n	800442e <HAL_TIM_PWM_Start_DMA+0xae>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	e015      	b.n	800445a <HAL_TIM_PWM_Start_DMA+0xda>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d109      	bne.n	8004448 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e008      	b.n	800445a <HAL_TIM_PWM_Start_DMA+0xda>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d024      	beq.n	80044a8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_TIM_PWM_Start_DMA+0xea>
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e119      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start_DMA+0xfe>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800447c:	e016      	b.n	80044ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start_DMA+0x10e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	e00e      	b.n	80044ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800449c:	e006      	b.n	80044ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a6:	e001      	b.n	80044ac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0fa      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	f200 80ae 	bhi.w	8004610 <HAL_TIM_PWM_Start_DMA+0x290>
 80044b4:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044f1 	.word	0x080044f1
 80044c0:	08004611 	.word	0x08004611
 80044c4:	08004611 	.word	0x08004611
 80044c8:	08004611 	.word	0x08004611
 80044cc:	08004539 	.word	0x08004539
 80044d0:	08004611 	.word	0x08004611
 80044d4:	08004611 	.word	0x08004611
 80044d8:	08004611 	.word	0x08004611
 80044dc:	08004581 	.word	0x08004581
 80044e0:	08004611 	.word	0x08004611
 80044e4:	08004611 	.word	0x08004611
 80044e8:	08004611 	.word	0x08004611
 80044ec:	080045c9 	.word	0x080045c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	4a6d      	ldr	r2, [pc, #436]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x32c>)
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	4a6c      	ldr	r2, [pc, #432]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x330>)
 80044fe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	4a6b      	ldr	r2, [pc, #428]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3334      	adds	r3, #52	@ 0x34
 8004514:	461a      	mov	r2, r3
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	f7fe fa1a 	bl	8002950 <HAL_DMA_Start_IT>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0bd      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004534:	60da      	str	r2, [r3, #12]
      break;
 8004536:	e06e      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453c:	4a5b      	ldr	r2, [pc, #364]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x32c>)
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004544:	4a5a      	ldr	r2, [pc, #360]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x330>)
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	4a59      	ldr	r2, [pc, #356]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x334>)
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3338      	adds	r3, #56	@ 0x38
 800455c:	461a      	mov	r2, r3
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	f7fe f9f6 	bl	8002950 <HAL_DMA_Start_IT>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e099      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800457c:	60da      	str	r2, [r3, #12]
      break;
 800457e:	e04a      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	4a49      	ldr	r2, [pc, #292]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4a48      	ldr	r2, [pc, #288]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800458e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004594:	4a47      	ldr	r2, [pc, #284]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004596:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	333c      	adds	r3, #60	@ 0x3c
 80045a4:	461a      	mov	r2, r3
 80045a6:	887b      	ldrh	r3, [r7, #2]
 80045a8:	f7fe f9d2 	bl	8002950 <HAL_DMA_Start_IT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e075      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c4:	60da      	str	r2, [r3, #12]
      break;
 80045c6:	e026      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	4a37      	ldr	r2, [pc, #220]	@ (80046ac <HAL_TIM_PWM_Start_DMA+0x32c>)
 80045ce:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	4a36      	ldr	r2, [pc, #216]	@ (80046b0 <HAL_TIM_PWM_Start_DMA+0x330>)
 80045d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	4a35      	ldr	r2, [pc, #212]	@ (80046b4 <HAL_TIM_PWM_Start_DMA+0x334>)
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3340      	adds	r3, #64	@ 0x40
 80045ec:	461a      	mov	r2, r3
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	f7fe f9ae 	bl	8002950 <HAL_DMA_Start_IT>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e051      	b.n	80046a2 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800460c:	60da      	str	r2, [r3, #12]
      break;
 800460e:	e002      	b.n	8004616 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
      break;
 8004614:	bf00      	nop
  }

  if (status == HAL_OK)
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d141      	bne.n	80046a0 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fbe5 	bl	8004df4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d107      	bne.n	8004644 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_PWM_Start_DMA+0x2ec>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d009      	beq.n	800466c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a16      	ldr	r2, [pc, #88]	@ (80046c0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	08004911 	.word	0x08004911
 80046b0:	080049b9 	.word	0x080049b9
 80046b4:	0800487f 	.word	0x0800487f
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800

080046c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0ae      	b.n	8004840 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	f200 809f 	bhi.w	8004830 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046f2:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004831 	.word	0x08004831
 8004700:	08004831 	.word	0x08004831
 8004704:	08004831 	.word	0x08004831
 8004708:	0800476d 	.word	0x0800476d
 800470c:	08004831 	.word	0x08004831
 8004710:	08004831 	.word	0x08004831
 8004714:	08004831 	.word	0x08004831
 8004718:	080047af 	.word	0x080047af
 800471c:	08004831 	.word	0x08004831
 8004720:	08004831 	.word	0x08004831
 8004724:	08004831 	.word	0x08004831
 8004728:	080047ef 	.word	0x080047ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f9d6 	bl	8004ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699a      	ldr	r2, [r3, #24]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6999      	ldr	r1, [r3, #24]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	619a      	str	r2, [r3, #24]
      break;
 800476a:	e064      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fa1c 	bl	8004bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	021a      	lsls	r2, r3, #8
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	619a      	str	r2, [r3, #24]
      break;
 80047ac:	e043      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fa65 	bl	8004c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0208 	orr.w	r2, r2, #8
 80047c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69da      	ldr	r2, [r3, #28]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0204 	bic.w	r2, r2, #4
 80047d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69d9      	ldr	r1, [r3, #28]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      break;
 80047ec:	e023      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 faaf 	bl	8004d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	021a      	lsls	r2, r3, #8
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	61da      	str	r2, [r3, #28]
      break;
 800482e:	e002      	b.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
      break;
 8004834:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d107      	bne.n	80048a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	e02a      	b.n	80048fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2202      	movs	r2, #2
 80048b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048be:	e01d      	b.n	80048fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d107      	bne.n	80048da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2204      	movs	r2, #4
 80048ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d8:	e010      	b.n	80048fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2208      	movs	r2, #8
 80048e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f2:	e003      	b.n	80048fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff ffb5 	bl	800486c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d10b      	bne.n	8004940 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d136      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800493e:	e031      	b.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d10b      	bne.n	8004962 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2202      	movs	r2, #2
 800494e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d125      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004960:	e020      	b.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d10b      	bne.n	8004984 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2204      	movs	r2, #4
 8004970:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d114      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004982:	e00f      	b.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d10a      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2208      	movs	r2, #8
 8004992:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d103      	bne.n	80049a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff4f 	bl	8004848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d103      	bne.n	80049d8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	771a      	strb	r2, [r3, #28]
 80049d6:	e019      	b.n	8004a0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d103      	bne.n	80049ea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2202      	movs	r2, #2
 80049e6:	771a      	strb	r2, [r3, #28]
 80049e8:	e010      	b.n	8004a0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d103      	bne.n	80049fc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2204      	movs	r2, #4
 80049f8:	771a      	strb	r2, [r3, #28]
 80049fa:	e007      	b.n	8004a0c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d102      	bne.n	8004a0c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff ff24 	bl	800485a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a29      	ldr	r2, [pc, #164]	@ (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a07      	ldr	r2, [pc, #28]	@ (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800

08004ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f023 0201 	bic.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10c      	bne.n	8004b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0308 	bic.w	r3, r3, #8
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	@ (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f023 0210 	bic.w	r2, r3, #16
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a14      	ldr	r2, [pc, #80]	@ (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d113      	bne.n	8004c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00

08004c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a14      	ldr	r2, [pc, #80]	@ (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d113      	bne.n	8004d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00

08004d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0f      	ldr	r2, [pc, #60]	@ (8004df0 <TIM_OC4_SetConfig+0x98>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e046      	b.n	8004ee2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a12      	ldr	r2, [pc, #72]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a10      	ldr	r2, [pc, #64]	@ (8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800

08004ef8 <memset>:
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4402      	add	r2, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d100      	bne.n	8004f02 <memset+0xa>
 8004f00:	4770      	bx	lr
 8004f02:	f803 1b01 	strb.w	r1, [r3], #1
 8004f06:	e7f9      	b.n	8004efc <memset+0x4>

08004f08 <__libc_init_array>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	4d0c      	ldr	r5, [pc, #48]	@ (8004f40 <__libc_init_array+0x38>)
 8004f0e:	4c0d      	ldr	r4, [pc, #52]	@ (8004f44 <__libc_init_array+0x3c>)
 8004f10:	1b64      	subs	r4, r4, r5
 8004f12:	10a4      	asrs	r4, r4, #2
 8004f14:	42a6      	cmp	r6, r4
 8004f16:	d109      	bne.n	8004f2c <__libc_init_array+0x24>
 8004f18:	f000 fff2 	bl	8005f00 <_init>
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	4d0a      	ldr	r5, [pc, #40]	@ (8004f48 <__libc_init_array+0x40>)
 8004f20:	4c0a      	ldr	r4, [pc, #40]	@ (8004f4c <__libc_init_array+0x44>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	42a6      	cmp	r6, r4
 8004f28:	d105      	bne.n	8004f36 <__libc_init_array+0x2e>
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f30:	4798      	blx	r3
 8004f32:	3601      	adds	r6, #1
 8004f34:	e7ee      	b.n	8004f14 <__libc_init_array+0xc>
 8004f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3a:	4798      	blx	r3
 8004f3c:	3601      	adds	r6, #1
 8004f3e:	e7f2      	b.n	8004f26 <__libc_init_array+0x1e>
 8004f40:	08006118 	.word	0x08006118
 8004f44:	08006118 	.word	0x08006118
 8004f48:	08006118 	.word	0x08006118
 8004f4c:	0800611c 	.word	0x0800611c

08004f50 <sin>:
 8004f50:	b530      	push	{r4, r5, lr}
 8004f52:	4d20      	ldr	r5, [pc, #128]	@ (8004fd4 <sin+0x84>)
 8004f54:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004f58:	42ac      	cmp	r4, r5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	b087      	sub	sp, #28
 8004f60:	d806      	bhi.n	8004f70 <sin+0x20>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2200      	movs	r2, #0
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f000 f8f9 	bl	8005160 <__kernel_sin>
 8004f6e:	e004      	b.n	8004f7a <sin+0x2a>
 8004f70:	4d19      	ldr	r5, [pc, #100]	@ (8004fd8 <sin+0x88>)
 8004f72:	42ac      	cmp	r4, r5
 8004f74:	d903      	bls.n	8004f7e <sin+0x2e>
 8004f76:	f7fb f8ef 	bl	8000158 <__aeabi_dsub>
 8004f7a:	b007      	add	sp, #28
 8004f7c:	bd30      	pop	{r4, r5, pc}
 8004f7e:	aa02      	add	r2, sp, #8
 8004f80:	f000 f9a6 	bl	80052d0 <__ieee754_rem_pio2>
 8004f84:	f000 0003 	and.w	r0, r0, #3
 8004f88:	2801      	cmp	r0, #1
 8004f8a:	d009      	beq.n	8004fa0 <sin+0x50>
 8004f8c:	2802      	cmp	r0, #2
 8004f8e:	d00e      	beq.n	8004fae <sin+0x5e>
 8004f90:	b9c0      	cbnz	r0, 8004fc4 <sin+0x74>
 8004f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f96:	2301      	movs	r3, #1
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f9e:	e7e4      	b.n	8004f6a <sin+0x1a>
 8004fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fa8:	f000 f81a 	bl	8004fe0 <__kernel_cos>
 8004fac:	e7e5      	b.n	8004f7a <sin+0x2a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fba:	f000 f8d1 	bl	8005160 <__kernel_sin>
 8004fbe:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004fc2:	e7da      	b.n	8004f7a <sin+0x2a>
 8004fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fcc:	f000 f808 	bl	8004fe0 <__kernel_cos>
 8004fd0:	e7f5      	b.n	8004fbe <sin+0x6e>
 8004fd2:	bf00      	nop
 8004fd4:	3fe921fb 	.word	0x3fe921fb
 8004fd8:	7fefffff 	.word	0x7fefffff
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <__kernel_cos>:
 8004fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004fe8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004fec:	4680      	mov	r8, r0
 8004fee:	4689      	mov	r9, r1
 8004ff0:	e9cd 2300 	strd	r2, r3, [sp]
 8004ff4:	d204      	bcs.n	8005000 <__kernel_cos+0x20>
 8004ff6:	f7fb fd01 	bl	80009fc <__aeabi_d2iz>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	f000 8086 	beq.w	800510c <__kernel_cos+0x12c>
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fa5e 	bl	80004c8 <__aeabi_dmul>
 800500c:	2200      	movs	r2, #0
 800500e:	4b4e      	ldr	r3, [pc, #312]	@ (8005148 <__kernel_cos+0x168>)
 8005010:	4604      	mov	r4, r0
 8005012:	460d      	mov	r5, r1
 8005014:	f7fb fa58 	bl	80004c8 <__aeabi_dmul>
 8005018:	a33f      	add	r3, pc, #252	@ (adr r3, 8005118 <__kernel_cos+0x138>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	4682      	mov	sl, r0
 8005020:	468b      	mov	fp, r1
 8005022:	4620      	mov	r0, r4
 8005024:	4629      	mov	r1, r5
 8005026:	f7fb fa4f 	bl	80004c8 <__aeabi_dmul>
 800502a:	a33d      	add	r3, pc, #244	@ (adr r3, 8005120 <__kernel_cos+0x140>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb f894 	bl	800015c <__adddf3>
 8005034:	4622      	mov	r2, r4
 8005036:	462b      	mov	r3, r5
 8005038:	f7fb fa46 	bl	80004c8 <__aeabi_dmul>
 800503c:	a33a      	add	r3, pc, #232	@ (adr r3, 8005128 <__kernel_cos+0x148>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb f889 	bl	8000158 <__aeabi_dsub>
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f7fb fa3d 	bl	80004c8 <__aeabi_dmul>
 800504e:	a338      	add	r3, pc, #224	@ (adr r3, 8005130 <__kernel_cos+0x150>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f7fb f882 	bl	800015c <__adddf3>
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	f7fb fa34 	bl	80004c8 <__aeabi_dmul>
 8005060:	a335      	add	r3, pc, #212	@ (adr r3, 8005138 <__kernel_cos+0x158>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f7fb f877 	bl	8000158 <__aeabi_dsub>
 800506a:	4622      	mov	r2, r4
 800506c:	462b      	mov	r3, r5
 800506e:	f7fb fa2b 	bl	80004c8 <__aeabi_dmul>
 8005072:	a333      	add	r3, pc, #204	@ (adr r3, 8005140 <__kernel_cos+0x160>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb f870 	bl	800015c <__adddf3>
 800507c:	4622      	mov	r2, r4
 800507e:	462b      	mov	r3, r5
 8005080:	f7fb fa22 	bl	80004c8 <__aeabi_dmul>
 8005084:	4622      	mov	r2, r4
 8005086:	462b      	mov	r3, r5
 8005088:	f7fb fa1e 	bl	80004c8 <__aeabi_dmul>
 800508c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	4640      	mov	r0, r8
 8005096:	4649      	mov	r1, r9
 8005098:	f7fb fa16 	bl	80004c8 <__aeabi_dmul>
 800509c:	460b      	mov	r3, r1
 800509e:	4602      	mov	r2, r0
 80050a0:	4629      	mov	r1, r5
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7fb f858 	bl	8000158 <__aeabi_dsub>
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <__kernel_cos+0x16c>)
 80050aa:	4680      	mov	r8, r0
 80050ac:	429e      	cmp	r6, r3
 80050ae:	4689      	mov	r9, r1
 80050b0:	d80e      	bhi.n	80050d0 <__kernel_cos+0xf0>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4650      	mov	r0, sl
 80050b8:	4659      	mov	r1, fp
 80050ba:	f7fb f84d 	bl	8000158 <__aeabi_dsub>
 80050be:	4602      	mov	r2, r0
 80050c0:	2000      	movs	r0, #0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4922      	ldr	r1, [pc, #136]	@ (8005150 <__kernel_cos+0x170>)
 80050c6:	f7fb f847 	bl	8000158 <__aeabi_dsub>
 80050ca:	b003      	add	sp, #12
 80050cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d0:	2400      	movs	r4, #0
 80050d2:	4b20      	ldr	r3, [pc, #128]	@ (8005154 <__kernel_cos+0x174>)
 80050d4:	4622      	mov	r2, r4
 80050d6:	429e      	cmp	r6, r3
 80050d8:	bf8c      	ite	hi
 80050da:	4d1f      	ldrhi	r5, [pc, #124]	@ (8005158 <__kernel_cos+0x178>)
 80050dc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80050e0:	462b      	mov	r3, r5
 80050e2:	2000      	movs	r0, #0
 80050e4:	491a      	ldr	r1, [pc, #104]	@ (8005150 <__kernel_cos+0x170>)
 80050e6:	f7fb f837 	bl	8000158 <__aeabi_dsub>
 80050ea:	4622      	mov	r2, r4
 80050ec:	4606      	mov	r6, r0
 80050ee:	460f      	mov	r7, r1
 80050f0:	462b      	mov	r3, r5
 80050f2:	4650      	mov	r0, sl
 80050f4:	4659      	mov	r1, fp
 80050f6:	f7fb f82f 	bl	8000158 <__aeabi_dsub>
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	f7fb f82b 	bl	8000158 <__aeabi_dsub>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4630      	mov	r0, r6
 8005108:	4639      	mov	r1, r7
 800510a:	e7dc      	b.n	80050c6 <__kernel_cos+0xe6>
 800510c:	2000      	movs	r0, #0
 800510e:	4910      	ldr	r1, [pc, #64]	@ (8005150 <__kernel_cos+0x170>)
 8005110:	e7db      	b.n	80050ca <__kernel_cos+0xea>
 8005112:	bf00      	nop
 8005114:	f3af 8000 	nop.w
 8005118:	be8838d4 	.word	0xbe8838d4
 800511c:	bda8fae9 	.word	0xbda8fae9
 8005120:	bdb4b1c4 	.word	0xbdb4b1c4
 8005124:	3e21ee9e 	.word	0x3e21ee9e
 8005128:	809c52ad 	.word	0x809c52ad
 800512c:	3e927e4f 	.word	0x3e927e4f
 8005130:	19cb1590 	.word	0x19cb1590
 8005134:	3efa01a0 	.word	0x3efa01a0
 8005138:	16c15177 	.word	0x16c15177
 800513c:	3f56c16c 	.word	0x3f56c16c
 8005140:	5555554c 	.word	0x5555554c
 8005144:	3fa55555 	.word	0x3fa55555
 8005148:	3fe00000 	.word	0x3fe00000
 800514c:	3fd33332 	.word	0x3fd33332
 8005150:	3ff00000 	.word	0x3ff00000
 8005154:	3fe90000 	.word	0x3fe90000
 8005158:	3fd20000 	.word	0x3fd20000
 800515c:	00000000 	.word	0x00000000

08005160 <__kernel_sin>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	461f      	mov	r7, r3
 8005166:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800516a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800516e:	4604      	mov	r4, r0
 8005170:	460d      	mov	r5, r1
 8005172:	4616      	mov	r6, r2
 8005174:	b085      	sub	sp, #20
 8005176:	d203      	bcs.n	8005180 <__kernel_sin+0x20>
 8005178:	f7fb fc40 	bl	80009fc <__aeabi_d2iz>
 800517c:	2800      	cmp	r0, #0
 800517e:	d051      	beq.n	8005224 <__kernel_sin+0xc4>
 8005180:	4622      	mov	r2, r4
 8005182:	462b      	mov	r3, r5
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb f99e 	bl	80004c8 <__aeabi_dmul>
 800518c:	4682      	mov	sl, r0
 800518e:	468b      	mov	fp, r1
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	f7fb f996 	bl	80004c8 <__aeabi_dmul>
 800519c:	a33e      	add	r3, pc, #248	@ (adr r3, 8005298 <__kernel_sin+0x138>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	4680      	mov	r8, r0
 80051a4:	4689      	mov	r9, r1
 80051a6:	4650      	mov	r0, sl
 80051a8:	4659      	mov	r1, fp
 80051aa:	f7fb f98d 	bl	80004c8 <__aeabi_dmul>
 80051ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80052a0 <__kernel_sin+0x140>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	f7fa ffd0 	bl	8000158 <__aeabi_dsub>
 80051b8:	4652      	mov	r2, sl
 80051ba:	465b      	mov	r3, fp
 80051bc:	f7fb f984 	bl	80004c8 <__aeabi_dmul>
 80051c0:	a339      	add	r3, pc, #228	@ (adr r3, 80052a8 <__kernel_sin+0x148>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	f7fa ffc9 	bl	800015c <__adddf3>
 80051ca:	4652      	mov	r2, sl
 80051cc:	465b      	mov	r3, fp
 80051ce:	f7fb f97b 	bl	80004c8 <__aeabi_dmul>
 80051d2:	a337      	add	r3, pc, #220	@ (adr r3, 80052b0 <__kernel_sin+0x150>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fa ffbe 	bl	8000158 <__aeabi_dsub>
 80051dc:	4652      	mov	r2, sl
 80051de:	465b      	mov	r3, fp
 80051e0:	f7fb f972 	bl	80004c8 <__aeabi_dmul>
 80051e4:	a334      	add	r3, pc, #208	@ (adr r3, 80052b8 <__kernel_sin+0x158>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fa ffb7 	bl	800015c <__adddf3>
 80051ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051f0:	e9cd 0100 	strd	r0, r1, [sp]
 80051f4:	b9db      	cbnz	r3, 800522e <__kernel_sin+0xce>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4650      	mov	r0, sl
 80051fc:	4659      	mov	r1, fp
 80051fe:	f7fb f963 	bl	80004c8 <__aeabi_dmul>
 8005202:	a32f      	add	r3, pc, #188	@ (adr r3, 80052c0 <__kernel_sin+0x160>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fa ffa6 	bl	8000158 <__aeabi_dsub>
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	f7fb f95a 	bl	80004c8 <__aeabi_dmul>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f7fa ff9e 	bl	800015c <__adddf3>
 8005220:	4604      	mov	r4, r0
 8005222:	460d      	mov	r5, r1
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	b005      	add	sp, #20
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	2200      	movs	r2, #0
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <__kernel_sin+0x168>)
 8005236:	f7fb f947 	bl	80004c8 <__aeabi_dmul>
 800523a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800523e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f93f 	bl	80004c8 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005252:	f7fa ff81 	bl	8000158 <__aeabi_dsub>
 8005256:	4652      	mov	r2, sl
 8005258:	465b      	mov	r3, fp
 800525a:	f7fb f935 	bl	80004c8 <__aeabi_dmul>
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	f7fa ff79 	bl	8000158 <__aeabi_dsub>
 8005266:	a316      	add	r3, pc, #88	@ (adr r3, 80052c0 <__kernel_sin+0x160>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	4606      	mov	r6, r0
 800526e:	460f      	mov	r7, r1
 8005270:	4640      	mov	r0, r8
 8005272:	4649      	mov	r1, r9
 8005274:	f7fb f928 	bl	80004c8 <__aeabi_dmul>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4630      	mov	r0, r6
 800527e:	4639      	mov	r1, r7
 8005280:	f7fa ff6c 	bl	800015c <__adddf3>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4620      	mov	r0, r4
 800528a:	4629      	mov	r1, r5
 800528c:	f7fa ff64 	bl	8000158 <__aeabi_dsub>
 8005290:	e7c6      	b.n	8005220 <__kernel_sin+0xc0>
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	5acfd57c 	.word	0x5acfd57c
 800529c:	3de5d93a 	.word	0x3de5d93a
 80052a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80052a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80052a8:	57b1fe7d 	.word	0x57b1fe7d
 80052ac:	3ec71de3 	.word	0x3ec71de3
 80052b0:	19c161d5 	.word	0x19c161d5
 80052b4:	3f2a01a0 	.word	0x3f2a01a0
 80052b8:	1110f8a6 	.word	0x1110f8a6
 80052bc:	3f811111 	.word	0x3f811111
 80052c0:	55555549 	.word	0x55555549
 80052c4:	3fc55555 	.word	0x3fc55555
 80052c8:	3fe00000 	.word	0x3fe00000
 80052cc:	00000000 	.word	0x00000000

080052d0 <__ieee754_rem_pio2>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4bc4      	ldr	r3, [pc, #784]	@ (80055e8 <__ieee754_rem_pio2+0x318>)
 80052d6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80052da:	b08d      	sub	sp, #52	@ 0x34
 80052dc:	4598      	cmp	r8, r3
 80052de:	4606      	mov	r6, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	9104      	str	r1, [sp, #16]
 80052e6:	d807      	bhi.n	80052f8 <__ieee754_rem_pio2+0x28>
 80052e8:	e9c2 6700 	strd	r6, r7, [r2]
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80052f4:	2500      	movs	r5, #0
 80052f6:	e026      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 80052f8:	4bbc      	ldr	r3, [pc, #752]	@ (80055ec <__ieee754_rem_pio2+0x31c>)
 80052fa:	4598      	cmp	r8, r3
 80052fc:	d876      	bhi.n	80053ec <__ieee754_rem_pio2+0x11c>
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	4dbb      	ldr	r5, [pc, #748]	@ (80055f0 <__ieee754_rem_pio2+0x320>)
 8005302:	2b00      	cmp	r3, #0
 8005304:	a3aa      	add	r3, pc, #680	@ (adr r3, 80055b0 <__ieee754_rem_pio2+0x2e0>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	dd38      	ble.n	800537e <__ieee754_rem_pio2+0xae>
 800530c:	f7fa ff24 	bl	8000158 <__aeabi_dsub>
 8005310:	45a8      	cmp	r8, r5
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	d01a      	beq.n	800534e <__ieee754_rem_pio2+0x7e>
 8005318:	a3a7      	add	r3, pc, #668	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ff1b 	bl	8000158 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fa ff13 	bl	8000158 <__aeabi_dsub>
 8005332:	a3a1      	add	r3, pc, #644	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fa ff0e 	bl	8000158 <__aeabi_dsub>
 800533c:	2501      	movs	r5, #1
 800533e:	e9c4 8900 	strd	r8, r9, [r4]
 8005342:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005346:	4628      	mov	r0, r5
 8005348:	b00d      	add	sp, #52	@ 0x34
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	a39c      	add	r3, pc, #624	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff00 	bl	8000158 <__aeabi_dsub>
 8005358:	a39b      	add	r3, pc, #620	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	4606      	mov	r6, r0
 8005360:	460f      	mov	r7, r1
 8005362:	f7fa fef9 	bl	8000158 <__aeabi_dsub>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fa fef1 	bl	8000158 <__aeabi_dsub>
 8005376:	a394      	add	r3, pc, #592	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	e7dc      	b.n	8005338 <__ieee754_rem_pio2+0x68>
 800537e:	f7fa feed 	bl	800015c <__adddf3>
 8005382:	45a8      	cmp	r8, r5
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	d018      	beq.n	80053bc <__ieee754_rem_pio2+0xec>
 800538a:	a38b      	add	r3, pc, #556	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fa fee4 	bl	800015c <__adddf3>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4680      	mov	r8, r0
 800539a:	4689      	mov	r9, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fa feda 	bl	8000158 <__aeabi_dsub>
 80053a4:	a384      	add	r3, pc, #528	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa fed7 	bl	800015c <__adddf3>
 80053ae:	f04f 35ff 	mov.w	r5, #4294967295
 80053b2:	e9c4 8900 	strd	r8, r9, [r4]
 80053b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ba:	e7c4      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 80053bc:	a380      	add	r3, pc, #512	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fa fecb 	bl	800015c <__adddf3>
 80053c6:	a380      	add	r3, pc, #512	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	f7fa fec4 	bl	800015c <__adddf3>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4680      	mov	r8, r0
 80053da:	4689      	mov	r9, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fa feba 	bl	8000158 <__aeabi_dsub>
 80053e4:	a378      	add	r3, pc, #480	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e7de      	b.n	80053aa <__ieee754_rem_pio2+0xda>
 80053ec:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <__ieee754_rem_pio2+0x324>)
 80053ee:	4598      	cmp	r8, r3
 80053f0:	f200 80cf 	bhi.w	8005592 <__ieee754_rem_pio2+0x2c2>
 80053f4:	f000 f962 	bl	80056bc <fabs>
 80053f8:	a375      	add	r3, pc, #468	@ (adr r3, 80055d0 <__ieee754_rem_pio2+0x300>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	f7fb f861 	bl	80004c8 <__aeabi_dmul>
 8005406:	2200      	movs	r2, #0
 8005408:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <__ieee754_rem_pio2+0x328>)
 800540a:	f7fa fea7 	bl	800015c <__adddf3>
 800540e:	f7fb faf5 	bl	80009fc <__aeabi_d2iz>
 8005412:	4605      	mov	r5, r0
 8005414:	f7fa ffee 	bl	80003f4 <__aeabi_i2d>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005420:	a363      	add	r3, pc, #396	@ (adr r3, 80055b0 <__ieee754_rem_pio2+0x2e0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f84f 	bl	80004c8 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fa fe91 	bl	8000158 <__aeabi_dsub>
 8005436:	a360      	add	r3, pc, #384	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	4682      	mov	sl, r0
 800543e:	468b      	mov	fp, r1
 8005440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005444:	f7fb f840 	bl	80004c8 <__aeabi_dmul>
 8005448:	2d1f      	cmp	r5, #31
 800544a:	4606      	mov	r6, r0
 800544c:	460f      	mov	r7, r1
 800544e:	dc0c      	bgt.n	800546a <__ieee754_rem_pio2+0x19a>
 8005450:	4b6a      	ldr	r3, [pc, #424]	@ (80055fc <__ieee754_rem_pio2+0x32c>)
 8005452:	1e6a      	subs	r2, r5, #1
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	4543      	cmp	r3, r8
 800545a:	d006      	beq.n	800546a <__ieee754_rem_pio2+0x19a>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	4650      	mov	r0, sl
 8005462:	4659      	mov	r1, fp
 8005464:	f7fa fe78 	bl	8000158 <__aeabi_dsub>
 8005468:	e00e      	b.n	8005488 <__ieee754_rem_pio2+0x1b8>
 800546a:	463b      	mov	r3, r7
 800546c:	4632      	mov	r2, r6
 800546e:	4650      	mov	r0, sl
 8005470:	4659      	mov	r1, fp
 8005472:	f7fa fe71 	bl	8000158 <__aeabi_dsub>
 8005476:	ea4f 5328 	mov.w	r3, r8, asr #20
 800547a:	9305      	str	r3, [sp, #20]
 800547c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005480:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005484:	2b10      	cmp	r3, #16
 8005486:	dc02      	bgt.n	800548e <__ieee754_rem_pio2+0x1be>
 8005488:	e9c4 0100 	strd	r0, r1, [r4]
 800548c:	e039      	b.n	8005502 <__ieee754_rem_pio2+0x232>
 800548e:	a34c      	add	r3, pc, #304	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005498:	f7fb f816 	bl	80004c8 <__aeabi_dmul>
 800549c:	4606      	mov	r6, r0
 800549e:	460f      	mov	r7, r1
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4650      	mov	r0, sl
 80054a6:	4659      	mov	r1, fp
 80054a8:	f7fa fe56 	bl	8000158 <__aeabi_dsub>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4680      	mov	r8, r0
 80054b2:	4689      	mov	r9, r1
 80054b4:	4650      	mov	r0, sl
 80054b6:	4659      	mov	r1, fp
 80054b8:	f7fa fe4e 	bl	8000158 <__aeabi_dsub>
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	f7fa fe4a 	bl	8000158 <__aeabi_dsub>
 80054c4:	a340      	add	r3, pc, #256	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d2:	f7fa fff9 	bl	80004c8 <__aeabi_dmul>
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	f7fa fe3d 	bl	8000158 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4606      	mov	r6, r0
 80054e4:	460f      	mov	r7, r1
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fe35 	bl	8000158 <__aeabi_dsub>
 80054ee:	9a05      	ldr	r2, [sp, #20]
 80054f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b31      	cmp	r3, #49	@ 0x31
 80054f8:	dc20      	bgt.n	800553c <__ieee754_rem_pio2+0x26c>
 80054fa:	46c2      	mov	sl, r8
 80054fc:	46cb      	mov	fp, r9
 80054fe:	e9c4 0100 	strd	r0, r1, [r4]
 8005502:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005506:	4650      	mov	r0, sl
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	4659      	mov	r1, fp
 800550e:	f7fa fe23 	bl	8000158 <__aeabi_dsub>
 8005512:	463b      	mov	r3, r7
 8005514:	4632      	mov	r2, r6
 8005516:	f7fa fe1f 	bl	8000158 <__aeabi_dsub>
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f6bf af10 	bge.w	8005346 <__ieee754_rem_pio2+0x76>
 8005526:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005530:	f8c4 8000 	str.w	r8, [r4]
 8005534:	60a0      	str	r0, [r4, #8]
 8005536:	60e3      	str	r3, [r4, #12]
 8005538:	426d      	negs	r5, r5
 800553a:	e704      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 800553c:	a326      	add	r3, pc, #152	@ (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005546:	f7fa ffbf 	bl	80004c8 <__aeabi_dmul>
 800554a:	4606      	mov	r6, r0
 800554c:	460f      	mov	r7, r1
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fa fdff 	bl	8000158 <__aeabi_dsub>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4682      	mov	sl, r0
 8005560:	468b      	mov	fp, r1
 8005562:	4640      	mov	r0, r8
 8005564:	4649      	mov	r1, r9
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	4632      	mov	r2, r6
 800556c:	463b      	mov	r3, r7
 800556e:	f7fa fdf3 	bl	8000158 <__aeabi_dsub>
 8005572:	a31b      	add	r3, pc, #108	@ (adr r3, 80055e0 <__ieee754_rem_pio2+0x310>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005580:	f7fa ffa2 	bl	80004c8 <__aeabi_dmul>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	f7fa fde6 	bl	8000158 <__aeabi_dsub>
 800558c:	4606      	mov	r6, r0
 800558e:	460f      	mov	r7, r1
 8005590:	e764      	b.n	800545c <__ieee754_rem_pio2+0x18c>
 8005592:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <__ieee754_rem_pio2+0x330>)
 8005594:	4598      	cmp	r8, r3
 8005596:	d935      	bls.n	8005604 <__ieee754_rem_pio2+0x334>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f7fa fddc 	bl	8000158 <__aeabi_dsub>
 80055a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055a4:	e9c4 0100 	strd	r0, r1, [r4]
 80055a8:	e6a4      	b.n	80052f4 <__ieee754_rem_pio2+0x24>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	54400000 	.word	0x54400000
 80055b4:	3ff921fb 	.word	0x3ff921fb
 80055b8:	1a626331 	.word	0x1a626331
 80055bc:	3dd0b461 	.word	0x3dd0b461
 80055c0:	1a600000 	.word	0x1a600000
 80055c4:	3dd0b461 	.word	0x3dd0b461
 80055c8:	2e037073 	.word	0x2e037073
 80055cc:	3ba3198a 	.word	0x3ba3198a
 80055d0:	6dc9c883 	.word	0x6dc9c883
 80055d4:	3fe45f30 	.word	0x3fe45f30
 80055d8:	2e000000 	.word	0x2e000000
 80055dc:	3ba3198a 	.word	0x3ba3198a
 80055e0:	252049c1 	.word	0x252049c1
 80055e4:	397b839a 	.word	0x397b839a
 80055e8:	3fe921fb 	.word	0x3fe921fb
 80055ec:	4002d97b 	.word	0x4002d97b
 80055f0:	3ff921fb 	.word	0x3ff921fb
 80055f4:	413921fb 	.word	0x413921fb
 80055f8:	3fe00000 	.word	0x3fe00000
 80055fc:	08005f3c 	.word	0x08005f3c
 8005600:	7fefffff 	.word	0x7fefffff
 8005604:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005608:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800560c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005610:	460f      	mov	r7, r1
 8005612:	f7fb f9f3 	bl	80009fc <__aeabi_d2iz>
 8005616:	f7fa feed 	bl	80003f4 <__aeabi_i2d>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005626:	f7fa fd97 	bl	8000158 <__aeabi_dsub>
 800562a:	2200      	movs	r2, #0
 800562c:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <__ieee754_rem_pio2+0x3e4>)
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	460f      	mov	r7, r1
 8005634:	4606      	mov	r6, r0
 8005636:	f7fb f9e1 	bl	80009fc <__aeabi_d2iz>
 800563a:	f7fa fedb 	bl	80003f4 <__aeabi_i2d>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800564a:	f7fa fd85 	bl	8000158 <__aeabi_dsub>
 800564e:	2200      	movs	r2, #0
 8005650:	4b18      	ldr	r3, [pc, #96]	@ (80056b4 <__ieee754_rem_pio2+0x3e4>)
 8005652:	f7fa ff39 	bl	80004c8 <__aeabi_dmul>
 8005656:	f04f 0803 	mov.w	r8, #3
 800565a:	2600      	movs	r6, #0
 800565c:	2700      	movs	r7, #0
 800565e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005662:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005666:	4632      	mov	r2, r6
 8005668:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800566c:	463b      	mov	r3, r7
 800566e:	46c2      	mov	sl, r8
 8005670:	f108 38ff 	add.w	r8, r8, #4294967295
 8005674:	f7fb f990 	bl	8000998 <__aeabi_dcmpeq>
 8005678:	2800      	cmp	r0, #0
 800567a:	d1f4      	bne.n	8005666 <__ieee754_rem_pio2+0x396>
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <__ieee754_rem_pio2+0x3e8>)
 800567e:	462a      	mov	r2, r5
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2302      	movs	r3, #2
 8005684:	4621      	mov	r1, r4
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	a806      	add	r0, sp, #24
 800568a:	4653      	mov	r3, sl
 800568c:	f000 f81a 	bl	80056c4 <__kernel_rem_pio2>
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	4605      	mov	r5, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	f6bf ae56 	bge.w	8005346 <__ieee754_rem_pio2+0x76>
 800569a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800569e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056a2:	e9c4 2300 	strd	r2, r3, [r4]
 80056a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80056aa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80056b2:	e741      	b.n	8005538 <__ieee754_rem_pio2+0x268>
 80056b4:	41700000 	.word	0x41700000
 80056b8:	08005fbc 	.word	0x08005fbc

080056bc <fabs>:
 80056bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80056c0:	4619      	mov	r1, r3
 80056c2:	4770      	bx	lr

080056c4 <__kernel_rem_pio2>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	9104      	str	r1, [sp, #16]
 80056d0:	4bb6      	ldr	r3, [pc, #728]	@ (80059ac <__kernel_rem_pio2+0x2e8>)
 80056d2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80056d4:	f112 0f14 	cmn.w	r2, #20
 80056d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056dc:	bfa8      	it	ge
 80056de:	1ed4      	subge	r4, r2, #3
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	bfb8      	it	lt
 80056e6:	2400      	movlt	r4, #0
 80056e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80056ec:	9306      	str	r3, [sp, #24]
 80056ee:	bfa4      	itt	ge
 80056f0:	2318      	movge	r3, #24
 80056f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80056f6:	f06f 0317 	mvn.w	r3, #23
 80056fa:	fb04 3303 	mla	r3, r4, r3, r3
 80056fe:	eb03 0a02 	add.w	sl, r3, r2
 8005702:	9a06      	ldr	r2, [sp, #24]
 8005704:	9b02      	ldr	r3, [sp, #8]
 8005706:	1aa7      	subs	r7, r4, r2
 8005708:	eb03 0802 	add.w	r8, r3, r2
 800570c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800570e:	2500      	movs	r5, #0
 8005710:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005714:	2200      	movs	r2, #0
 8005716:	2300      	movs	r3, #0
 8005718:	9009      	str	r0, [sp, #36]	@ 0x24
 800571a:	ae20      	add	r6, sp, #128	@ 0x80
 800571c:	4545      	cmp	r5, r8
 800571e:	dd14      	ble.n	800574a <__kernel_rem_pio2+0x86>
 8005720:	f04f 0800 	mov.w	r8, #0
 8005724:	9a08      	ldr	r2, [sp, #32]
 8005726:	ab20      	add	r3, sp, #128	@ 0x80
 8005728:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800572c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	4598      	cmp	r8, r3
 8005734:	dc35      	bgt.n	80057a2 <__kernel_rem_pio2+0xde>
 8005736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	f1a3 0908 	sub.w	r9, r3, #8
 800573e:	2300      	movs	r3, #0
 8005740:	462f      	mov	r7, r5
 8005742:	2600      	movs	r6, #0
 8005744:	e9cd 2300 	strd	r2, r3, [sp]
 8005748:	e01f      	b.n	800578a <__kernel_rem_pio2+0xc6>
 800574a:	42ef      	cmn	r7, r5
 800574c:	d40b      	bmi.n	8005766 <__kernel_rem_pio2+0xa2>
 800574e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005752:	e9cd 2300 	strd	r2, r3, [sp]
 8005756:	f7fa fe4d 	bl	80003f4 <__aeabi_i2d>
 800575a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800575e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005762:	3501      	adds	r5, #1
 8005764:	e7da      	b.n	800571c <__kernel_rem_pio2+0x58>
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	e7f8      	b.n	800575e <__kernel_rem_pio2+0x9a>
 800576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005770:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005774:	f7fa fea8 	bl	80004c8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005780:	f7fa fcec 	bl	800015c <__adddf3>
 8005784:	e9cd 0100 	strd	r0, r1, [sp]
 8005788:	3601      	adds	r6, #1
 800578a:	9b06      	ldr	r3, [sp, #24]
 800578c:	3f08      	subs	r7, #8
 800578e:	429e      	cmp	r6, r3
 8005790:	ddec      	ble.n	800576c <__kernel_rem_pio2+0xa8>
 8005792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005796:	f108 0801 	add.w	r8, r8, #1
 800579a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800579e:	3508      	adds	r5, #8
 80057a0:	e7c6      	b.n	8005730 <__kernel_rem_pio2+0x6c>
 80057a2:	9b02      	ldr	r3, [sp, #8]
 80057a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80057a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057ac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80057ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 80057b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b8:	ab98      	add	r3, sp, #608	@ 0x260
 80057ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057be:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80057c2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80057c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057c8:	ae0c      	add	r6, sp, #48	@ 0x30
 80057ca:	4698      	mov	r8, r3
 80057cc:	46b1      	mov	r9, r6
 80057ce:	465f      	mov	r7, fp
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	f1a8 0808 	sub.w	r8, r8, #8
 80057d8:	dc71      	bgt.n	80058be <__kernel_rem_pio2+0x1fa>
 80057da:	4652      	mov	r2, sl
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f000 fa96 	bl	8005d10 <scalbn>
 80057e4:	2200      	movs	r2, #0
 80057e6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80057ea:	4604      	mov	r4, r0
 80057ec:	460d      	mov	r5, r1
 80057ee:	f7fa fe6b 	bl	80004c8 <__aeabi_dmul>
 80057f2:	f000 fb05 	bl	8005e00 <floor>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b6d      	ldr	r3, [pc, #436]	@ (80059b0 <__kernel_rem_pio2+0x2ec>)
 80057fa:	f7fa fe65 	bl	80004c8 <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	f7fa fca7 	bl	8000158 <__aeabi_dsub>
 800580a:	460d      	mov	r5, r1
 800580c:	4604      	mov	r4, r0
 800580e:	f7fb f8f5 	bl	80009fc <__aeabi_d2iz>
 8005812:	9005      	str	r0, [sp, #20]
 8005814:	f7fa fdee 	bl	80003f4 <__aeabi_i2d>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fc9a 	bl	8000158 <__aeabi_dsub>
 8005824:	f1ba 0f00 	cmp.w	sl, #0
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	dd6d      	ble.n	800590a <__kernel_rem_pio2+0x246>
 800582e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8005832:	ab0c      	add	r3, sp, #48	@ 0x30
 8005834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005838:	9c05      	ldr	r4, [sp, #20]
 800583a:	f1ca 0018 	rsb	r0, sl, #24
 800583e:	fa43 f200 	asr.w	r2, r3, r0
 8005842:	4414      	add	r4, r2
 8005844:	4082      	lsls	r2, r0
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	aa0c      	add	r2, sp, #48	@ 0x30
 800584a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800584e:	f1ca 0217 	rsb	r2, sl, #23
 8005852:	9405      	str	r4, [sp, #20]
 8005854:	4113      	asrs	r3, r2
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	9b00      	ldr	r3, [sp, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	dd64      	ble.n	8005928 <__kernel_rem_pio2+0x264>
 800585e:	2200      	movs	r2, #0
 8005860:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005864:	4614      	mov	r4, r2
 8005866:	9b05      	ldr	r3, [sp, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4593      	cmp	fp, r2
 800586e:	f300 80ab 	bgt.w	80059c8 <__kernel_rem_pio2+0x304>
 8005872:	f1ba 0f00 	cmp.w	sl, #0
 8005876:	dd07      	ble.n	8005888 <__kernel_rem_pio2+0x1c4>
 8005878:	f1ba 0f01 	cmp.w	sl, #1
 800587c:	f000 80b2 	beq.w	80059e4 <__kernel_rem_pio2+0x320>
 8005880:	f1ba 0f02 	cmp.w	sl, #2
 8005884:	f000 80b9 	beq.w	80059fa <__kernel_rem_pio2+0x336>
 8005888:	9b00      	ldr	r3, [sp, #0]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d14c      	bne.n	8005928 <__kernel_rem_pio2+0x264>
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	2000      	movs	r0, #0
 8005894:	4947      	ldr	r1, [pc, #284]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 8005896:	f7fa fc5f 	bl	8000158 <__aeabi_dsub>
 800589a:	4680      	mov	r8, r0
 800589c:	4689      	mov	r9, r1
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d042      	beq.n	8005928 <__kernel_rem_pio2+0x264>
 80058a2:	4652      	mov	r2, sl
 80058a4:	2000      	movs	r0, #0
 80058a6:	4943      	ldr	r1, [pc, #268]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 80058a8:	f000 fa32 	bl	8005d10 <scalbn>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fc50 	bl	8000158 <__aeabi_dsub>
 80058b8:	4680      	mov	r8, r0
 80058ba:	4689      	mov	r9, r1
 80058bc:	e034      	b.n	8005928 <__kernel_rem_pio2+0x264>
 80058be:	2200      	movs	r2, #0
 80058c0:	4b3d      	ldr	r3, [pc, #244]	@ (80059b8 <__kernel_rem_pio2+0x2f4>)
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fa fdff 	bl	80004c8 <__aeabi_dmul>
 80058ca:	f7fb f897 	bl	80009fc <__aeabi_d2iz>
 80058ce:	f7fa fd91 	bl	80003f4 <__aeabi_i2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2300 	strd	r2, r3, [sp]
 80058da:	2200      	movs	r2, #0
 80058dc:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <__kernel_rem_pio2+0x2f8>)
 80058de:	f7fa fdf3 	bl	80004c8 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fc35 	bl	8000158 <__aeabi_dsub>
 80058ee:	f7fb f885 	bl	80009fc <__aeabi_d2iz>
 80058f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80058f6:	f849 0b04 	str.w	r0, [r9], #4
 80058fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fe:	f7fa fc2d 	bl	800015c <__adddf3>
 8005902:	3f01      	subs	r7, #1
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
 8005908:	e763      	b.n	80057d2 <__kernel_rem_pio2+0x10e>
 800590a:	d106      	bne.n	800591a <__kernel_rem_pio2+0x256>
 800590c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005910:	aa0c      	add	r2, sp, #48	@ 0x30
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	15db      	asrs	r3, r3, #23
 8005918:	e79d      	b.n	8005856 <__kernel_rem_pio2+0x192>
 800591a:	2200      	movs	r2, #0
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <__kernel_rem_pio2+0x2fc>)
 800591e:	f7fb f859 	bl	80009d4 <__aeabi_dcmpge>
 8005922:	2800      	cmp	r0, #0
 8005924:	d13f      	bne.n	80059a6 <__kernel_rem_pio2+0x2e2>
 8005926:	9000      	str	r0, [sp, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fb f832 	bl	8000998 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	f000 80af 	beq.w	8005a98 <__kernel_rem_pio2+0x3d4>
 800593a:	2200      	movs	r2, #0
 800593c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005940:	9902      	ldr	r1, [sp, #8]
 8005942:	428b      	cmp	r3, r1
 8005944:	da61      	bge.n	8005a0a <__kernel_rem_pio2+0x346>
 8005946:	2a00      	cmp	r2, #0
 8005948:	d076      	beq.n	8005a38 <__kernel_rem_pio2+0x374>
 800594a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800594e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005950:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005954:	f1aa 0a18 	sub.w	sl, sl, #24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f6      	beq.n	800594a <__kernel_rem_pio2+0x286>
 800595c:	4652      	mov	r2, sl
 800595e:	2000      	movs	r0, #0
 8005960:	4914      	ldr	r1, [pc, #80]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 8005962:	f000 f9d5 	bl	8005d10 <scalbn>
 8005966:	465d      	mov	r5, fp
 8005968:	4606      	mov	r6, r0
 800596a:	460f      	mov	r7, r1
 800596c:	f04f 0900 	mov.w	r9, #0
 8005970:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005972:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80059b8 <__kernel_rem_pio2+0x2f4>
 8005976:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800597a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800597e:	2d00      	cmp	r5, #0
 8005980:	f280 80c0 	bge.w	8005b04 <__kernel_rem_pio2+0x440>
 8005984:	465d      	mov	r5, fp
 8005986:	2d00      	cmp	r5, #0
 8005988:	f2c0 80f0 	blt.w	8005b6c <__kernel_rem_pio2+0x4a8>
 800598c:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <__kernel_rem_pio2+0x300>)
 800598e:	f04f 0900 	mov.w	r9, #0
 8005992:	9306      	str	r3, [sp, #24]
 8005994:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005996:	f04f 0a00 	mov.w	sl, #0
 800599a:	2700      	movs	r7, #0
 800599c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80059a0:	ebab 0605 	sub.w	r6, fp, r5
 80059a4:	e0d6      	b.n	8005b54 <__kernel_rem_pio2+0x490>
 80059a6:	2302      	movs	r3, #2
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	e758      	b.n	800585e <__kernel_rem_pio2+0x19a>
 80059ac:	08006108 	.word	0x08006108
 80059b0:	40200000 	.word	0x40200000
 80059b4:	3ff00000 	.word	0x3ff00000
 80059b8:	3e700000 	.word	0x3e700000
 80059bc:	41700000 	.word	0x41700000
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	080060c8 	.word	0x080060c8
 80059c8:	f856 3b04 	ldr.w	r3, [r6], #4
 80059cc:	b944      	cbnz	r4, 80059e0 <__kernel_rem_pio2+0x31c>
 80059ce:	b123      	cbz	r3, 80059da <__kernel_rem_pio2+0x316>
 80059d0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80059d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80059d8:	2301      	movs	r3, #1
 80059da:	461c      	mov	r4, r3
 80059dc:	3201      	adds	r2, #1
 80059de:	e745      	b.n	800586c <__kernel_rem_pio2+0x1a8>
 80059e0:	1acb      	subs	r3, r1, r3
 80059e2:	e7f7      	b.n	80059d4 <__kernel_rem_pio2+0x310>
 80059e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80059e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059f2:	a90c      	add	r1, sp, #48	@ 0x30
 80059f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059f8:	e746      	b.n	8005888 <__kernel_rem_pio2+0x1c4>
 80059fa:	f10b 32ff 	add.w	r2, fp, #4294967295
 80059fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a08:	e7f3      	b.n	80059f2 <__kernel_rem_pio2+0x32e>
 8005a0a:	a90c      	add	r1, sp, #48	@ 0x30
 8005a0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	430a      	orrs	r2, r1
 8005a14:	e794      	b.n	8005940 <__kernel_rem_pio2+0x27c>
 8005a16:	3401      	adds	r4, #1
 8005a18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	d0fa      	beq.n	8005a16 <__kernel_rem_pio2+0x352>
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	aa20      	add	r2, sp, #128	@ 0x80
 8005a24:	445b      	add	r3, fp
 8005a26:	f10b 0801 	add.w	r8, fp, #1
 8005a2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005a2e:	445c      	add	r4, fp
 8005a30:	4544      	cmp	r4, r8
 8005a32:	da04      	bge.n	8005a3e <__kernel_rem_pio2+0x37a>
 8005a34:	46a3      	mov	fp, r4
 8005a36:	e6bf      	b.n	80057b8 <__kernel_rem_pio2+0xf4>
 8005a38:	2401      	movs	r4, #1
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a3c:	e7ec      	b.n	8005a18 <__kernel_rem_pio2+0x354>
 8005a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a40:	46ab      	mov	fp, r5
 8005a42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a46:	f7fa fcd5 	bl	80003f4 <__aeabi_i2d>
 8005a4a:	f04f 0900 	mov.w	r9, #0
 8005a4e:	2600      	movs	r6, #0
 8005a50:	2700      	movs	r7, #0
 8005a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a54:	e9c5 0100 	strd	r0, r1, [r5]
 8005a58:	3b08      	subs	r3, #8
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	4599      	cmp	r9, r3
 8005a60:	dd07      	ble.n	8005a72 <__kernel_rem_pio2+0x3ae>
 8005a62:	9b07      	ldr	r3, [sp, #28]
 8005a64:	f108 0801 	add.w	r8, r8, #1
 8005a68:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8005a6c:	3508      	adds	r5, #8
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	e7de      	b.n	8005a30 <__kernel_rem_pio2+0x36c>
 8005a72:	9900      	ldr	r1, [sp, #0]
 8005a74:	f109 0901 	add.w	r9, r9, #1
 8005a78:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005a7c:	9100      	str	r1, [sp, #0]
 8005a7e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8005a82:	f7fa fd21 	bl	80004c8 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fb65 	bl	800015c <__adddf3>
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	e7e1      	b.n	8005a5c <__kernel_rem_pio2+0x398>
 8005a98:	f1ca 0200 	rsb	r2, sl, #0
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f000 f936 	bl	8005d10 <scalbn>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4b97      	ldr	r3, [pc, #604]	@ (8005d04 <__kernel_rem_pio2+0x640>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	f7fa ff92 	bl	80009d4 <__aeabi_dcmpge>
 8005ab0:	b300      	cbz	r0, 8005af4 <__kernel_rem_pio2+0x430>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4b94      	ldr	r3, [pc, #592]	@ (8005d08 <__kernel_rem_pio2+0x644>)
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fd05 	bl	80004c8 <__aeabi_dmul>
 8005abe:	f7fa ff9d 	bl	80009fc <__aeabi_d2iz>
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	f7fa fc96 	bl	80003f4 <__aeabi_i2d>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4b8e      	ldr	r3, [pc, #568]	@ (8005d04 <__kernel_rem_pio2+0x640>)
 8005acc:	f7fa fcfc 	bl	80004c8 <__aeabi_dmul>
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7fa fb3e 	bl	8000158 <__aeabi_dsub>
 8005adc:	f7fa ff8e 	bl	80009fc <__aeabi_d2iz>
 8005ae0:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ae2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005ae6:	f10b 0b01 	add.w	fp, fp, #1
 8005aea:	f10a 0a18 	add.w	sl, sl, #24
 8005aee:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005af2:	e733      	b.n	800595c <__kernel_rem_pio2+0x298>
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa ff80 	bl	80009fc <__aeabi_d2iz>
 8005afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8005afe:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005b02:	e72b      	b.n	800595c <__kernel_rem_pio2+0x298>
 8005b04:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b0a:	f7fa fc73 	bl	80003f4 <__aeabi_i2d>
 8005b0e:	4632      	mov	r2, r6
 8005b10:	463b      	mov	r3, r7
 8005b12:	f7fa fcd9 	bl	80004c8 <__aeabi_dmul>
 8005b16:	464a      	mov	r2, r9
 8005b18:	e868 0102 	strd	r0, r1, [r8], #-8
 8005b1c:	4653      	mov	r3, sl
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fcd1 	bl	80004c8 <__aeabi_dmul>
 8005b26:	3d01      	subs	r5, #1
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	e727      	b.n	800597e <__kernel_rem_pio2+0x2ba>
 8005b2e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005b32:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005b36:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005b3a:	f8cd c018 	str.w	ip, [sp, #24]
 8005b3e:	f7fa fcc3 	bl	80004c8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4648      	mov	r0, r9
 8005b48:	4651      	mov	r1, sl
 8005b4a:	f7fa fb07 	bl	800015c <__adddf3>
 8005b4e:	4681      	mov	r9, r0
 8005b50:	468a      	mov	sl, r1
 8005b52:	3701      	adds	r7, #1
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	429f      	cmp	r7, r3
 8005b58:	dc01      	bgt.n	8005b5e <__kernel_rem_pio2+0x49a>
 8005b5a:	42be      	cmp	r6, r7
 8005b5c:	dae7      	bge.n	8005b2e <__kernel_rem_pio2+0x46a>
 8005b5e:	ab48      	add	r3, sp, #288	@ 0x120
 8005b60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005b64:	e9c6 9a00 	strd	r9, sl, [r6]
 8005b68:	3d01      	subs	r5, #1
 8005b6a:	e70c      	b.n	8005986 <__kernel_rem_pio2+0x2c2>
 8005b6c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	dc09      	bgt.n	8005b86 <__kernel_rem_pio2+0x4c2>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dc2c      	bgt.n	8005bd0 <__kernel_rem_pio2+0x50c>
 8005b76:	d04e      	beq.n	8005c16 <__kernel_rem_pio2+0x552>
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	f003 0007 	and.w	r0, r3, #7
 8005b7e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d1f5      	bne.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005b8c:	ab48      	add	r3, sp, #288	@ 0x120
 8005b8e:	441c      	add	r4, r3
 8005b90:	4625      	mov	r5, r4
 8005b92:	46da      	mov	sl, fp
 8005b94:	f1ba 0f00 	cmp.w	sl, #0
 8005b98:	dc63      	bgt.n	8005c62 <__kernel_rem_pio2+0x59e>
 8005b9a:	4625      	mov	r5, r4
 8005b9c:	46da      	mov	sl, fp
 8005b9e:	f1ba 0f01 	cmp.w	sl, #1
 8005ba2:	dc7b      	bgt.n	8005c9c <__kernel_rem_pio2+0x5d8>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	f1bb 0f01 	cmp.w	fp, #1
 8005bac:	f300 8093 	bgt.w	8005cd6 <__kernel_rem_pio2+0x612>
 8005bb0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005bb4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8092 	bne.w	8005ce4 <__kernel_rem_pio2+0x620>
 8005bc0:	9b04      	ldr	r3, [sp, #16]
 8005bc2:	e9c3 7800 	strd	r7, r8, [r3]
 8005bc6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005bca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bce:	e7d3      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005bd0:	465d      	mov	r5, fp
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	ab48      	add	r3, sp, #288	@ 0x120
 8005bd8:	441c      	add	r4, r3
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	da32      	bge.n	8005c44 <__kernel_rem_pio2+0x580>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d035      	beq.n	8005c50 <__kernel_rem_pio2+0x58c>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bea:	9c04      	ldr	r4, [sp, #16]
 8005bec:	2501      	movs	r5, #1
 8005bee:	e9c4 2300 	strd	r2, r3, [r4]
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005bfa:	f7fa faad 	bl	8000158 <__aeabi_dsub>
 8005bfe:	ac48      	add	r4, sp, #288	@ 0x120
 8005c00:	45ab      	cmp	fp, r5
 8005c02:	da28      	bge.n	8005c56 <__kernel_rem_pio2+0x592>
 8005c04:	9b00      	ldr	r3, [sp, #0]
 8005c06:	b113      	cbz	r3, 8005c0e <__kernel_rem_pio2+0x54a>
 8005c08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	9b04      	ldr	r3, [sp, #16]
 8005c10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c14:	e7b0      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005c16:	2000      	movs	r0, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	ab48      	add	r3, sp, #288	@ 0x120
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f1bb 0f00 	cmp.w	fp, #0
 8005c22:	da08      	bge.n	8005c36 <__kernel_rem_pio2+0x572>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	b113      	cbz	r3, 8005c2e <__kernel_rem_pio2+0x56a>
 8005c28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	9b04      	ldr	r3, [sp, #16]
 8005c30:	e9c3 0100 	strd	r0, r1, [r3]
 8005c34:	e7a0      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005c36:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005c3a:	f7fa fa8f 	bl	800015c <__adddf3>
 8005c3e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c42:	e7ec      	b.n	8005c1e <__kernel_rem_pio2+0x55a>
 8005c44:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005c48:	f7fa fa88 	bl	800015c <__adddf3>
 8005c4c:	3d01      	subs	r5, #1
 8005c4e:	e7c4      	b.n	8005bda <__kernel_rem_pio2+0x516>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	e7c9      	b.n	8005bea <__kernel_rem_pio2+0x526>
 8005c56:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8005c5a:	f7fa fa7f 	bl	800015c <__adddf3>
 8005c5e:	3501      	adds	r5, #1
 8005c60:	e7ce      	b.n	8005c00 <__kernel_rem_pio2+0x53c>
 8005c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c66:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c72:	f7fa fa73 	bl	800015c <__adddf3>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fa69 	bl	8000158 <__aeabi_dsub>
 8005c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c8a:	f7fa fa67 	bl	800015c <__adddf3>
 8005c8e:	e865 0102 	strd	r0, r1, [r5], #-8
 8005c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c96:	e9c5 6700 	strd	r6, r7, [r5]
 8005c9a:	e77b      	b.n	8005b94 <__kernel_rem_pio2+0x4d0>
 8005c9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ca0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cac:	f7fa fa56 	bl	800015c <__adddf3>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa fa4c 	bl	8000158 <__aeabi_dsub>
 8005cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc4:	f7fa fa4a 	bl	800015c <__adddf3>
 8005cc8:	e865 0102 	strd	r0, r1, [r5], #-8
 8005ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cd0:	e9c5 6700 	strd	r6, r7, [r5]
 8005cd4:	e763      	b.n	8005b9e <__kernel_rem_pio2+0x4da>
 8005cd6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005cda:	f7fa fa3f 	bl	800015c <__adddf3>
 8005cde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ce2:	e761      	b.n	8005ba8 <__kernel_rem_pio2+0x4e4>
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	9a04      	ldr	r2, [sp, #16]
 8005ce8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005cec:	601f      	str	r7, [r3, #0]
 8005cee:	605c      	str	r4, [r3, #4]
 8005cf0:	609d      	str	r5, [r3, #8]
 8005cf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005cf6:	60d3      	str	r3, [r2, #12]
 8005cf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cfc:	6110      	str	r0, [r2, #16]
 8005cfe:	6153      	str	r3, [r2, #20]
 8005d00:	e73a      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005d02:	bf00      	nop
 8005d04:	41700000 	.word	0x41700000
 8005d08:	3e700000 	.word	0x3e700000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <scalbn>:
 8005d10:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d1a:	4683      	mov	fp, r0
 8005d1c:	468c      	mov	ip, r1
 8005d1e:	460b      	mov	r3, r1
 8005d20:	b982      	cbnz	r2, 8005d44 <scalbn+0x34>
 8005d22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005d26:	4303      	orrs	r3, r0
 8005d28:	d039      	beq.n	8005d9e <scalbn+0x8e>
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <scalbn+0xd8>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f7fa fbcb 	bl	80004c8 <__aeabi_dmul>
 8005d32:	4b2e      	ldr	r3, [pc, #184]	@ (8005dec <scalbn+0xdc>)
 8005d34:	4683      	mov	fp, r0
 8005d36:	429e      	cmp	r6, r3
 8005d38:	468c      	mov	ip, r1
 8005d3a:	da0d      	bge.n	8005d58 <scalbn+0x48>
 8005d3c:	a326      	add	r3, pc, #152	@ (adr r3, 8005dd8 <scalbn+0xc8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	e01b      	b.n	8005d7c <scalbn+0x6c>
 8005d44:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005d48:	42ba      	cmp	r2, r7
 8005d4a:	d109      	bne.n	8005d60 <scalbn+0x50>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f7fa fa05 	bl	800015c <__adddf3>
 8005d52:	4683      	mov	fp, r0
 8005d54:	468c      	mov	ip, r1
 8005d56:	e022      	b.n	8005d9e <scalbn+0x8e>
 8005d58:	460b      	mov	r3, r1
 8005d5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d5e:	3a36      	subs	r2, #54	@ 0x36
 8005d60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005d64:	428e      	cmp	r6, r1
 8005d66:	dd0c      	ble.n	8005d82 <scalbn+0x72>
 8005d68:	a31d      	add	r3, pc, #116	@ (adr r3, 8005de0 <scalbn+0xd0>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	461c      	mov	r4, r3
 8005d70:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005d74:	f361 74df 	bfi	r4, r1, #31, #1
 8005d78:	4621      	mov	r1, r4
 8005d7a:	481d      	ldr	r0, [pc, #116]	@ (8005df0 <scalbn+0xe0>)
 8005d7c:	f7fa fba4 	bl	80004c8 <__aeabi_dmul>
 8005d80:	e7e7      	b.n	8005d52 <scalbn+0x42>
 8005d82:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005d86:	4432      	add	r2, r6
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	dced      	bgt.n	8005d68 <scalbn+0x58>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	dd0a      	ble.n	8005da6 <scalbn+0x96>
 8005d90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005d94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005d98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d9c:	46ac      	mov	ip, r5
 8005d9e:	4658      	mov	r0, fp
 8005da0:	4661      	mov	r1, ip
 8005da2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005da6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005daa:	da09      	bge.n	8005dc0 <scalbn+0xb0>
 8005dac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005db0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005db4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005db8:	480e      	ldr	r0, [pc, #56]	@ (8005df4 <scalbn+0xe4>)
 8005dba:	f041 011f 	orr.w	r1, r1, #31
 8005dbe:	e7bd      	b.n	8005d3c <scalbn+0x2c>
 8005dc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005dc4:	3236      	adds	r2, #54	@ 0x36
 8005dc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005dca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dce:	4658      	mov	r0, fp
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <scalbn+0xe8>)
 8005dd6:	e7d1      	b.n	8005d7c <scalbn+0x6c>
 8005dd8:	c2f8f359 	.word	0xc2f8f359
 8005ddc:	01a56e1f 	.word	0x01a56e1f
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	7e37e43c 	.word	0x7e37e43c
 8005de8:	43500000 	.word	0x43500000
 8005dec:	ffff3cb0 	.word	0xffff3cb0
 8005df0:	8800759c 	.word	0x8800759c
 8005df4:	c2f8f359 	.word	0xc2f8f359
 8005df8:	3c900000 	.word	0x3c900000
 8005dfc:	00000000 	.word	0x00000000

08005e00 <floor>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e08:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005e0c:	2e13      	cmp	r6, #19
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	460c      	mov	r4, r1
 8005e14:	4605      	mov	r5, r0
 8005e16:	4680      	mov	r8, r0
 8005e18:	dc35      	bgt.n	8005e86 <floor+0x86>
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	da17      	bge.n	8005e4e <floor+0x4e>
 8005e1e:	a334      	add	r3, pc, #208	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa f99a 	bl	800015c <__adddf3>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f7fa fddc 	bl	80009e8 <__aeabi_dcmpgt>
 8005e30:	b150      	cbz	r0, 8005e48 <floor+0x48>
 8005e32:	2c00      	cmp	r4, #0
 8005e34:	da57      	bge.n	8005ee6 <floor+0xe6>
 8005e36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005e3a:	432c      	orrs	r4, r5
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	42ac      	cmp	r4, r5
 8005e40:	4c2d      	ldr	r4, [pc, #180]	@ (8005ef8 <floor+0xf8>)
 8005e42:	bf08      	it	eq
 8005e44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005e48:	4623      	mov	r3, r4
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	e024      	b.n	8005e98 <floor+0x98>
 8005e4e:	4f2b      	ldr	r7, [pc, #172]	@ (8005efc <floor+0xfc>)
 8005e50:	4137      	asrs	r7, r6
 8005e52:	ea01 0c07 	and.w	ip, r1, r7
 8005e56:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005e5a:	d01d      	beq.n	8005e98 <floor+0x98>
 8005e5c:	a324      	add	r3, pc, #144	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f97b 	bl	800015c <__adddf3>
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f7fa fdbd 	bl	80009e8 <__aeabi_dcmpgt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0ea      	beq.n	8005e48 <floor+0x48>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	bfbe      	ittt	lt
 8005e76:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005e7a:	4133      	asrlt	r3, r6
 8005e7c:	18e4      	addlt	r4, r4, r3
 8005e7e:	2500      	movs	r5, #0
 8005e80:	ea24 0407 	bic.w	r4, r4, r7
 8005e84:	e7e0      	b.n	8005e48 <floor+0x48>
 8005e86:	2e33      	cmp	r6, #51	@ 0x33
 8005e88:	dd0a      	ble.n	8005ea0 <floor+0xa0>
 8005e8a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005e8e:	d103      	bne.n	8005e98 <floor+0x98>
 8005e90:	f7fa f964 	bl	800015c <__adddf3>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea0:	f04f 3cff 	mov.w	ip, #4294967295
 8005ea4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005ea8:	fa2c f707 	lsr.w	r7, ip, r7
 8005eac:	4207      	tst	r7, r0
 8005eae:	d0f3      	beq.n	8005e98 <floor+0x98>
 8005eb0:	a30f      	add	r3, pc, #60	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f951 	bl	800015c <__adddf3>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f7fa fd93 	bl	80009e8 <__aeabi_dcmpgt>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0c0      	beq.n	8005e48 <floor+0x48>
 8005ec6:	2c00      	cmp	r4, #0
 8005ec8:	da0a      	bge.n	8005ee0 <floor+0xe0>
 8005eca:	2e14      	cmp	r6, #20
 8005ecc:	d101      	bne.n	8005ed2 <floor+0xd2>
 8005ece:	3401      	adds	r4, #1
 8005ed0:	e006      	b.n	8005ee0 <floor+0xe0>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005ed8:	40b3      	lsls	r3, r6
 8005eda:	441d      	add	r5, r3
 8005edc:	4545      	cmp	r5, r8
 8005ede:	d3f6      	bcc.n	8005ece <floor+0xce>
 8005ee0:	ea25 0507 	bic.w	r5, r5, r7
 8005ee4:	e7b0      	b.n	8005e48 <floor+0x48>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	462c      	mov	r4, r5
 8005eea:	e7ad      	b.n	8005e48 <floor+0x48>
 8005eec:	f3af 8000 	nop.w
 8005ef0:	8800759c 	.word	0x8800759c
 8005ef4:	7e37e43c 	.word	0x7e37e43c
 8005ef8:	bff00000 	.word	0xbff00000
 8005efc:	000fffff 	.word	0x000fffff

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
